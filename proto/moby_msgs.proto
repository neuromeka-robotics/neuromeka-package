syntax = "proto3";
package Nrmk.IndyFramework;

//////////////////////////Moby/////////////////////////
message DriveIndex {
    uint32 moby_index = 1;
}
message MotorDriverTx {
    uint32 statusWord = 1;
    int32 modeOpDisp = 2;
    int32 actualPosition = 3;
    int32 actualVelocity = 4;
    int32 actualTorque = 5;
}

message MotorDriverRx {
    uint32 controlWord = 1;
    int32 modeOp = 2;
    int32 targetPosition = 3;
    int32 targetVelocity = 4;
    int32 targetTorque = 5;
}

message MobyState {
  uint32 status = 1;
  bool is_ready = 2;
  bool is_enable = 3;
  bool is_moving = 4;
  bool is_violation = 5;
}

message MobyErrorState {
    uint64 errorState = 1;
    int32 errorIndex1 = 2;
    int32 errorIndex2 = 3;
    int32 errorIndex3 = 4;
}

message MobyPose {
    double px = 1;
    double py = 2;
    double pw = 3;
}

message MobyVel {
    double vx = 1;
    double vy = 2;
    double vw = 3;
}

message IMUData {
    double angleX = 1;
    double angleY= 2;
    double angleZ = 3;
    double angleVelX = 4;
    double angleVelY = 5;
    double angleVelZ = 6;
    double linAccX = 7;
    double linAccY = 8;
    double linAccZ = 9;
}

message SwerveDoubles {
    double fl = 1;
    double fr = 2;
    double bl = 3;
    double br = 4;
}


message TargetVel {
    double vx = 1;
    double vy = 2;
    double vw = 3;
}

message ZeroCount {
    int32 fl = 1;
    int32 fr = 2;
    int32 bl = 3;
    int32 br = 4;
}

//message RobotZeroCount {
//    int32 rotation = 1;
//    int32 elevation = 2;
//}

message IRData {
    int32 ir_front1 = 1;
    int32 ir_front2 = 2;
    int32 ir_left1 = 3;
    int32 ir_left2 = 4;
    int32 ir_left3 = 5;
    int32 ir_rear = 6;
    int32 ir_right1 = 7;
    int32 ir_right2 = 8;
    int32 ir_right3 = 9;
}

message USData {
    int32 us_front_left1 = 1;
    int32 us_front_left2 = 2;
    int32 us_front_left3 = 3;
    int32 us_front_ground = 4;
    int32 us_front_right1 = 5;
    int32 us_front_right2 = 6;
    int32 us_front_right3 = 7;
    int32 us_front_right4 = 8;

    int32 us_back_right1 = 9;
    int32 us_back_right2 = 10;
    int32 us_back_right3 = 11;
    int32 us_back_ground = 12;
    int32 us_back_left1 = 13;
    int32 us_back_left2 = 14;
    int32 us_back_left3 = 15;
    int32 us_back_left4 = 16;
}


message BMSData {
    repeated int32 bms_status = 1;
    repeated int32 pack_volt = 2;
    repeated int32 battery_volt = 3;
    repeated int32 pack_current1 = 4;
    repeated int32 pack_current2 = 5;

    int32 isCharge = 6;
    int32 isCellOverVolt = 7;
    int32 isCellUnderVolt = 8;
    int32 isOverCurCharge = 9;
    int32 isOverCurDischrg = 10;
    int32 isShortCircuit = 11;
    int32 isOverTemperature = 12;
    int32 isPackOverVolt = 13;

    int32 SOC = 14;
    int32 SOH = 15;

    int32 time_charge = 16;
    int32 time_dcharge = 17;

    int32 rem_capAh = 18;
    int32 rem_capWh = 19;

    repeated int32 bms_temperature = 20;
    repeated int32 cell_volt = 21;
}

message ForcedKinematicsData {
    bool activate = 1;
    int32 angle = 2;
}

// Global variables
message GBool {
    int32 idx = 1;
    bool val = 2;
}

message GInt {
    int32 idx = 1;
    int32 val = 2;
}

message GFloat {
    int32 idx = 1;
    float val = 2;
}

message GString {
    int32 idx = 1;
    string val = 2;
}

// Common use
message BoolVal {
    bool val = 1;
}

message BoolVals {
    repeated bool val = 1;
}

message IntVal {
    int32 val = 1;
}

message IntVals {
    repeated int32 val = 1;
}

message FloatVal {
    float val = 1;
}

message FloatVals {
    repeated float val = 1;
}

message DoubleVal {
    double val = 1;
}

message DoubleVals {
    repeated double val = 1;
}

message RotationGain {
    int32 idx = 1;
    double k = 2;
    double kv = 3;
    double kp = 4;
}

message VelAccBoundary {
    int32 idx = 1;
    float vmax = 2;
    float amax = 3;
}