// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_5fmsgs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_5fmsgs_2eproto;
namespace Nrmk {
namespace IndyFramework {
class DateTime;
struct DateTimeDefaultTypeInternal;
extern DateTimeDefaultTypeInternal _DateTime_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class EndtoolRS485Rx;
struct EndtoolRS485RxDefaultTypeInternal;
extern EndtoolRS485RxDefaultTypeInternal _EndtoolRS485Rx_default_instance_;
class EndtoolRS485Tx;
struct EndtoolRS485TxDefaultTypeInternal;
extern EndtoolRS485TxDefaultTypeInternal _EndtoolRS485Tx_default_instance_;
class Float;
struct FloatDefaultTypeInternal;
extern FloatDefaultTypeInternal _Float_default_instance_;
class IntMode;
struct IntModeDefaultTypeInternal;
extern IntModeDefaultTypeInternal _IntMode_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Name;
struct NameDefaultTypeInternal;
extern NameDefaultTypeInternal _Name_default_instance_;
class PauseCat;
struct PauseCatDefaultTypeInternal;
extern PauseCatDefaultTypeInternal _PauseCat_default_instance_;
class PosePair;
struct PosePairDefaultTypeInternal;
extern PosePairDefaultTypeInternal _PosePair_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class StopCat;
struct StopCatDefaultTypeInternal;
extern StopCatDefaultTypeInternal _StopCat_default_instance_;
class TactTime;
struct TactTimeDefaultTypeInternal;
extern TactTimeDefaultTypeInternal _TactTime_default_instance_;
class Vector;
struct VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Nrmk {
namespace IndyFramework {
enum OpState : int {
  OP_SYSTEM_OFF = 0,
  OP_SYSTEM_ON = 1,
  OP_VIOLATE = 2,
  OP_RECOVER_HARD = 3,
  OP_RECOVER_SOFT = 4,
  OP_IDLE = 5,
  OP_MOVING = 6,
  OP_TEACHING = 7,
  OP_COLLISION = 8,
  OP_STOP_AND_OFF = 9,
  OP_COMPLIANCE = 10,
  OP_BRAKE_CONTROL = 11,
  OP_SYSTEM_RESET = 12,
  OP_SYSTEM_SWITCH = 13,
  OP_VIOLATE_HARD = 15,
  OP_MANUAL_RECOVER = 16,
  TELE_OP = 17,
  TRAJ_MOVING = 18,
  OpState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OpState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OpState_IsValid(int value);
constexpr OpState OpState_MIN = static_cast<OpState>(0);
constexpr OpState OpState_MAX = static_cast<OpState>(18);
constexpr int OpState_ARRAYSIZE = 18 + 1;
const ::google::protobuf::EnumDescriptor*
OpState_descriptor();
template <typename T>
const std::string& OpState_Name(T value) {
  static_assert(std::is_same<T, OpState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OpState_Name().");
  return OpState_Name(static_cast<OpState>(value));
}
template <>
inline const std::string& OpState_Name(OpState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OpState_descriptor,
                                                 0, 18>(
      static_cast<int>(value));
}
inline bool OpState_Parse(absl::string_view name, OpState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpState>(
      OpState_descriptor(), name, value);
}
enum TrajState : int {
  TRAJ_NONE = 0,
  TRAJ_INIT = 1,
  TRAJ_CALC = 2,
  TRAJ_STAND_BY = 3,
  TRAJ_ACC = 4,
  TRAJ_CRUISE = 5,
  TRAJ_DEC = 6,
  TRAJ_CANCELLING = 7,
  TRAJ_FINISHED = 8,
  TRAJ_ERROR = 9,
  TrajState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TrajState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TrajState_IsValid(int value);
constexpr TrajState TrajState_MIN = static_cast<TrajState>(0);
constexpr TrajState TrajState_MAX = static_cast<TrajState>(9);
constexpr int TrajState_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
TrajState_descriptor();
template <typename T>
const std::string& TrajState_Name(T value) {
  static_assert(std::is_same<T, TrajState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TrajState_Name().");
  return TrajState_Name(static_cast<TrajState>(value));
}
template <>
inline const std::string& TrajState_Name(TrajState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrajState_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool TrajState_Parse(absl::string_view name, TrajState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrajState>(
      TrajState_descriptor(), name, value);
}
enum TrajCondition : int {
  TRAJ_STARTED = 0,
  TRAJ_ACC_DONE = 1,
  TRAJ_CRZ_DONE = 2,
  TRAJ_DEC_DONE = 3,
  TrajCondition_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TrajCondition_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TrajCondition_IsValid(int value);
constexpr TrajCondition TrajCondition_MIN = static_cast<TrajCondition>(0);
constexpr TrajCondition TrajCondition_MAX = static_cast<TrajCondition>(3);
constexpr int TrajCondition_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
TrajCondition_descriptor();
template <typename T>
const std::string& TrajCondition_Name(T value) {
  static_assert(std::is_same<T, TrajCondition>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TrajCondition_Name().");
  return TrajCondition_Name(static_cast<TrajCondition>(value));
}
template <>
inline const std::string& TrajCondition_Name(TrajCondition value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrajCondition_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool TrajCondition_Parse(absl::string_view name, TrajCondition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrajCondition>(
      TrajCondition_descriptor(), name, value);
}
enum StopCategory : int {
  IMMEDIATE_BRAKE = 0,
  SMOOTH_BRAKE = 1,
  SMOOTH_ONLY = 2,
  StopCategory_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StopCategory_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StopCategory_IsValid(int value);
constexpr StopCategory StopCategory_MIN = static_cast<StopCategory>(0);
constexpr StopCategory StopCategory_MAX = static_cast<StopCategory>(2);
constexpr int StopCategory_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
StopCategory_descriptor();
template <typename T>
const std::string& StopCategory_Name(T value) {
  static_assert(std::is_same<T, StopCategory>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StopCategory_Name().");
  return StopCategory_Name(static_cast<StopCategory>(value));
}
template <>
inline const std::string& StopCategory_Name(StopCategory value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StopCategory_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool StopCategory_Parse(absl::string_view name, StopCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StopCategory>(
      StopCategory_descriptor(), name, value);
}
enum PauseCategory : int {
  SMOOTH_PAUSE = 0,
  IMMEDIATE_PAUSE = 1,
  PauseCategory_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PauseCategory_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PauseCategory_IsValid(int value);
constexpr PauseCategory PauseCategory_MIN = static_cast<PauseCategory>(0);
constexpr PauseCategory PauseCategory_MAX = static_cast<PauseCategory>(1);
constexpr int PauseCategory_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
PauseCategory_descriptor();
template <typename T>
const std::string& PauseCategory_Name(T value) {
  static_assert(std::is_same<T, PauseCategory>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PauseCategory_Name().");
  return PauseCategory_Name(static_cast<PauseCategory>(value));
}
template <>
inline const std::string& PauseCategory_Name(PauseCategory value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PauseCategory_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool PauseCategory_Parse(absl::string_view name, PauseCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PauseCategory>(
      PauseCategory_descriptor(), name, value);
}
enum ProgramState : int {
  PROG_IDLE = 0,
  PROG_RUNNING = 1,
  PROG_PAUSING = 2,
  PROG_STOPPING = 3,
  ProgramState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProgramState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ProgramState_IsValid(int value);
constexpr ProgramState ProgramState_MIN = static_cast<ProgramState>(0);
constexpr ProgramState ProgramState_MAX = static_cast<ProgramState>(3);
constexpr int ProgramState_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ProgramState_descriptor();
template <typename T>
const std::string& ProgramState_Name(T value) {
  static_assert(std::is_same<T, ProgramState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProgramState_Name().");
  return ProgramState_Name(static_cast<ProgramState>(value));
}
template <>
inline const std::string& ProgramState_Name(ProgramState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProgramState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ProgramState_Parse(absl::string_view name, ProgramState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProgramState>(
      ProgramState_descriptor(), name, value);
}
enum CollisionPolicyType : int {
  COLL_NO_DETECT = 0,
  COLL_PAUSE = 1,
  COLL_RESUME_AFTER_SLEEP = 2,
  COLL_STOP = 3,
  CollisionPolicyType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CollisionPolicyType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CollisionPolicyType_IsValid(int value);
constexpr CollisionPolicyType CollisionPolicyType_MIN = static_cast<CollisionPolicyType>(0);
constexpr CollisionPolicyType CollisionPolicyType_MAX = static_cast<CollisionPolicyType>(3);
constexpr int CollisionPolicyType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
CollisionPolicyType_descriptor();
template <typename T>
const std::string& CollisionPolicyType_Name(T value) {
  static_assert(std::is_same<T, CollisionPolicyType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CollisionPolicyType_Name().");
  return CollisionPolicyType_Name(static_cast<CollisionPolicyType>(value));
}
template <>
inline const std::string& CollisionPolicyType_Name(CollisionPolicyType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CollisionPolicyType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool CollisionPolicyType_Parse(absl::string_view name, CollisionPolicyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CollisionPolicyType>(
      CollisionPolicyType_descriptor(), name, value);
}
enum TuningSpace : int {
  TUNE_ALL = 0,
  TUNE_JOINT = 1,
  TUNE_TASK = 2,
  TuningSpace_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TuningSpace_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TuningSpace_IsValid(int value);
constexpr TuningSpace TuningSpace_MIN = static_cast<TuningSpace>(0);
constexpr TuningSpace TuningSpace_MAX = static_cast<TuningSpace>(2);
constexpr int TuningSpace_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
TuningSpace_descriptor();
template <typename T>
const std::string& TuningSpace_Name(T value) {
  static_assert(std::is_same<T, TuningSpace>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TuningSpace_Name().");
  return TuningSpace_Name(static_cast<TuningSpace>(value));
}
template <>
inline const std::string& TuningSpace_Name(TuningSpace value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TuningSpace_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TuningSpace_Parse(absl::string_view name, TuningSpace* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TuningSpace>(
      TuningSpace_descriptor(), name, value);
}
enum TuningPrecision : int {
  LOW_PRECISION = 0,
  MIDDLE_PRECISION = 1,
  HIGH_PRECISION = 2,
  TuningPrecision_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TuningPrecision_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TuningPrecision_IsValid(int value);
constexpr TuningPrecision TuningPrecision_MIN = static_cast<TuningPrecision>(0);
constexpr TuningPrecision TuningPrecision_MAX = static_cast<TuningPrecision>(2);
constexpr int TuningPrecision_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
TuningPrecision_descriptor();
template <typename T>
const std::string& TuningPrecision_Name(T value) {
  static_assert(std::is_same<T, TuningPrecision>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TuningPrecision_Name().");
  return TuningPrecision_Name(static_cast<TuningPrecision>(value));
}
template <>
inline const std::string& TuningPrecision_Name(TuningPrecision value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TuningPrecision_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TuningPrecision_Parse(absl::string_view name, TuningPrecision* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TuningPrecision>(
      TuningPrecision_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Empty final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Empty(::google::protobuf::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Empty";
  }
  protected:
  explicit Empty(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class Name final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Name) */ {
 public:
  inline Name() : Name(nullptr) {}
  ~Name() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Name(::google::protobuf::internal::ConstantInitialized);

  Name(const Name& from);
  Name(Name&& from) noexcept
    : Name() {
    *this = ::std::move(from);
  }

  inline Name& operator=(const Name& from) {
    CopyFrom(from);
    return *this;
  }
  inline Name& operator=(Name&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Name& default_instance() {
    return *internal_default_instance();
  }
  static inline const Name* internal_default_instance() {
    return reinterpret_cast<const Name*>(
               &_Name_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Name& a, Name& b) {
    a.Swap(&b);
  }
  inline void Swap(Name* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Name* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Name* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Name>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Name& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Name& from) {
    Name::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Name* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Name";
  }
  protected:
  explicit Name(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Name)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 36, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class State final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR State(::google::protobuf::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<State>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const State& from) {
    State::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.State";
  }
  protected:
  explicit State(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
  };
  // bool enable = 1;
  void clear_enable() ;
  bool enable() const;
  void set_enable(bool value);

  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.State)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool enable_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class Float final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Float) */ {
 public:
  inline Float() : Float(nullptr) {}
  ~Float() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Float(::google::protobuf::internal::ConstantInitialized);

  Float(const Float& from);
  Float(Float&& from) noexcept
    : Float() {
    *this = ::std::move(from);
  }

  inline Float& operator=(const Float& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float& operator=(Float&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Float& default_instance() {
    return *internal_default_instance();
  }
  static inline const Float* internal_default_instance() {
    return reinterpret_cast<const Float*>(
               &_Float_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Float& a, Float& b) {
    a.Swap(&b);
  }
  inline void Swap(Float* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Float* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Float>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Float& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Float& from) {
    Float::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Float";
  }
  protected:
  explicit Float(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // float value = 1;
  void clear_value() ;
  float value() const;
  void set_value(float value);

  private:
  float _internal_value() const;
  void _internal_set_value(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Float)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class IntMode final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IntMode) */ {
 public:
  inline IntMode() : IntMode(nullptr) {}
  ~IntMode() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IntMode(::google::protobuf::internal::ConstantInitialized);

  IntMode(const IntMode& from);
  IntMode(IntMode&& from) noexcept
    : IntMode() {
    *this = ::std::move(from);
  }

  inline IntMode& operator=(const IntMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntMode& operator=(IntMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntMode* internal_default_instance() {
    return reinterpret_cast<const IntMode*>(
               &_IntMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IntMode& a, IntMode& b) {
    a.Swap(&b);
  }
  inline void Swap(IntMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntMode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntMode* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntMode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntMode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IntMode& from) {
    IntMode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntMode* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.IntMode";
  }
  protected:
  explicit IntMode(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // uint64 mode = 1;
  void clear_mode() ;
  ::uint64_t mode() const;
  void set_mode(::uint64_t value);

  private:
  ::uint64_t _internal_mode() const;
  void _internal_set_mode(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IntMode)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t mode_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class StopCat final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.StopCat) */ {
 public:
  inline StopCat() : StopCat(nullptr) {}
  ~StopCat() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StopCat(::google::protobuf::internal::ConstantInitialized);

  StopCat(const StopCat& from);
  StopCat(StopCat&& from) noexcept
    : StopCat() {
    *this = ::std::move(from);
  }

  inline StopCat& operator=(const StopCat& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopCat& operator=(StopCat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopCat& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopCat* internal_default_instance() {
    return reinterpret_cast<const StopCat*>(
               &_StopCat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StopCat& a, StopCat& b) {
    a.Swap(&b);
  }
  inline void Swap(StopCat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopCat* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopCat* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopCat>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StopCat& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StopCat& from) {
    StopCat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopCat* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.StopCat";
  }
  protected:
  explicit StopCat(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
  };
  // .Nrmk.IndyFramework.StopCategory category = 1;
  void clear_category() ;
  ::Nrmk::IndyFramework::StopCategory category() const;
  void set_category(::Nrmk::IndyFramework::StopCategory value);

  private:
  ::Nrmk::IndyFramework::StopCategory _internal_category() const;
  void _internal_set_category(::Nrmk::IndyFramework::StopCategory value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.StopCat)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int category_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class PauseCat final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.PauseCat) */ {
 public:
  inline PauseCat() : PauseCat(nullptr) {}
  ~PauseCat() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PauseCat(::google::protobuf::internal::ConstantInitialized);

  PauseCat(const PauseCat& from);
  PauseCat(PauseCat&& from) noexcept
    : PauseCat() {
    *this = ::std::move(from);
  }

  inline PauseCat& operator=(const PauseCat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseCat& operator=(PauseCat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PauseCat& default_instance() {
    return *internal_default_instance();
  }
  static inline const PauseCat* internal_default_instance() {
    return reinterpret_cast<const PauseCat*>(
               &_PauseCat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PauseCat& a, PauseCat& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseCat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseCat* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PauseCat* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PauseCat>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PauseCat& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PauseCat& from) {
    PauseCat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseCat* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.PauseCat";
  }
  protected:
  explicit PauseCat(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
  };
  // .Nrmk.IndyFramework.PauseCategory category = 1;
  void clear_category() ;
  ::Nrmk::IndyFramework::PauseCategory category() const;
  void set_category(::Nrmk::IndyFramework::PauseCategory value);

  private:
  ::Nrmk::IndyFramework::PauseCategory _internal_category() const;
  void _internal_set_category(::Nrmk::IndyFramework::PauseCategory value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.PauseCat)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int category_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Response(::google::protobuf::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Response";
  }
  protected:
  explicit Response(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // int64 code = 1;
  void clear_code() ;
  ::int64_t code() const;
  void set_code(::int64_t value);

  private:
  ::int64_t _internal_code() const;
  void _internal_set_code(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Response)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 39, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::int64_t code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Message(::google::protobuf::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Message";
  }
  protected:
  explicit Message(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* ptr);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Message)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 42, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr content_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class Vector final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {}
  ~Vector() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Vector(::google::protobuf::internal::ConstantInitialized);

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vector& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Vector& from) {
    Vector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Vector";
  }
  protected:
  explicit Vector(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated double values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::google::protobuf::RepeatedField<double>& values() const;
  ::google::protobuf::RepeatedField<double>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_values() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Vector)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<double> values_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class PosePair final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.PosePair) */ {
 public:
  inline PosePair() : PosePair(nullptr) {}
  ~PosePair() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PosePair(::google::protobuf::internal::ConstantInitialized);

  PosePair(const PosePair& from);
  PosePair(PosePair&& from) noexcept
    : PosePair() {
    *this = ::std::move(from);
  }

  inline PosePair& operator=(const PosePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosePair& operator=(PosePair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PosePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosePair* internal_default_instance() {
    return reinterpret_cast<const PosePair*>(
               &_PosePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PosePair& a, PosePair& b) {
    a.Swap(&b);
  }
  inline void Swap(PosePair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosePair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PosePair* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PosePair>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PosePair& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PosePair& from) {
    PosePair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosePair* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.PosePair";
  }
  protected:
  explicit PosePair(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 1,
    kPFieldNumber = 2,
  };
  // repeated float q = 1;
  int q_size() const;
  private:
  int _internal_q_size() const;

  public:
  void clear_q() ;
  float q(int index) const;
  void set_q(int index, float value);
  void add_q(float value);
  const ::google::protobuf::RepeatedField<float>& q() const;
  ::google::protobuf::RepeatedField<float>* mutable_q();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_q() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_q();

  public:
  // repeated float p = 2;
  int p_size() const;
  private:
  int _internal_p_size() const;

  public:
  void clear_p() ;
  float p(int index) const;
  void set_p(int index, float value);
  void add_p(float value);
  const ::google::protobuf::RepeatedField<float>& p() const;
  ::google::protobuf::RepeatedField<float>* mutable_p();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_p() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_p();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.PosePair)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> q_;
    ::google::protobuf::RepeatedField<float> p_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class EndtoolRS485Tx final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.EndtoolRS485Tx) */ {
 public:
  inline EndtoolRS485Tx() : EndtoolRS485Tx(nullptr) {}
  ~EndtoolRS485Tx() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EndtoolRS485Tx(::google::protobuf::internal::ConstantInitialized);

  EndtoolRS485Tx(const EndtoolRS485Tx& from);
  EndtoolRS485Tx(EndtoolRS485Tx&& from) noexcept
    : EndtoolRS485Tx() {
    *this = ::std::move(from);
  }

  inline EndtoolRS485Tx& operator=(const EndtoolRS485Tx& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndtoolRS485Tx& operator=(EndtoolRS485Tx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndtoolRS485Tx& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndtoolRS485Tx* internal_default_instance() {
    return reinterpret_cast<const EndtoolRS485Tx*>(
               &_EndtoolRS485Tx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EndtoolRS485Tx& a, EndtoolRS485Tx& b) {
    a.Swap(&b);
  }
  inline void Swap(EndtoolRS485Tx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndtoolRS485Tx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EndtoolRS485Tx* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EndtoolRS485Tx>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EndtoolRS485Tx& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EndtoolRS485Tx& from) {
    EndtoolRS485Tx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndtoolRS485Tx* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.EndtoolRS485Tx";
  }
  protected:
  explicit EndtoolRS485Tx(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWord1FieldNumber = 1,
    kWord2FieldNumber = 2,
  };
  // uint32 word1 = 1;
  void clear_word1() ;
  ::uint32_t word1() const;
  void set_word1(::uint32_t value);

  private:
  ::uint32_t _internal_word1() const;
  void _internal_set_word1(::uint32_t value);

  public:
  // uint32 word2 = 2;
  void clear_word2() ;
  ::uint32_t word2() const;
  void set_word2(::uint32_t value);

  private:
  ::uint32_t _internal_word2() const;
  void _internal_set_word2(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.EndtoolRS485Tx)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t word1_;
    ::uint32_t word2_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class EndtoolRS485Rx final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.EndtoolRS485Rx) */ {
 public:
  inline EndtoolRS485Rx() : EndtoolRS485Rx(nullptr) {}
  ~EndtoolRS485Rx() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EndtoolRS485Rx(::google::protobuf::internal::ConstantInitialized);

  EndtoolRS485Rx(const EndtoolRS485Rx& from);
  EndtoolRS485Rx(EndtoolRS485Rx&& from) noexcept
    : EndtoolRS485Rx() {
    *this = ::std::move(from);
  }

  inline EndtoolRS485Rx& operator=(const EndtoolRS485Rx& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndtoolRS485Rx& operator=(EndtoolRS485Rx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndtoolRS485Rx& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndtoolRS485Rx* internal_default_instance() {
    return reinterpret_cast<const EndtoolRS485Rx*>(
               &_EndtoolRS485Rx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EndtoolRS485Rx& a, EndtoolRS485Rx& b) {
    a.Swap(&b);
  }
  inline void Swap(EndtoolRS485Rx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndtoolRS485Rx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EndtoolRS485Rx* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EndtoolRS485Rx>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EndtoolRS485Rx& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EndtoolRS485Rx& from) {
    EndtoolRS485Rx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndtoolRS485Rx* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.EndtoolRS485Rx";
  }
  protected:
  explicit EndtoolRS485Rx(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWord1FieldNumber = 1,
    kWord2FieldNumber = 2,
  };
  // uint32 word1 = 1;
  void clear_word1() ;
  ::uint32_t word1() const;
  void set_word1(::uint32_t value);

  private:
  ::uint32_t _internal_word1() const;
  void _internal_set_word1(::uint32_t value);

  public:
  // uint32 word2 = 2;
  void clear_word2() ;
  ::uint32_t word2() const;
  void set_word2(::uint32_t value);

  private:
  ::uint32_t _internal_word2() const;
  void _internal_set_word2(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.EndtoolRS485Rx)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t word1_;
    ::uint32_t word2_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TactTime final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TactTime) */ {
 public:
  inline TactTime() : TactTime(nullptr) {}
  ~TactTime() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TactTime(::google::protobuf::internal::ConstantInitialized);

  TactTime(const TactTime& from);
  TactTime(TactTime&& from) noexcept
    : TactTime() {
    *this = ::std::move(from);
  }

  inline TactTime& operator=(const TactTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline TactTime& operator=(TactTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TactTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const TactTime* internal_default_instance() {
    return reinterpret_cast<const TactTime*>(
               &_TactTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TactTime& a, TactTime& b) {
    a.Swap(&b);
  }
  inline void Swap(TactTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TactTime* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TactTime* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TactTime>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TactTime& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TactTime& from) {
    TactTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TactTime* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TactTime";
  }
  protected:
  explicit TactTime(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kTactTimeFieldNumber = 2,
  };
  // string type = 1;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* ptr);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // float tact_time = 2;
  void clear_tact_time() ;
  float tact_time() const;
  void set_tact_time(float value);

  private:
  float _internal_tact_time() const;
  void _internal_set_tact_time(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TactTime)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 40, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr type_;
    float tact_time_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class DateTime final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DateTime) */ {
 public:
  inline DateTime() : DateTime(nullptr) {}
  ~DateTime() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DateTime(::google::protobuf::internal::ConstantInitialized);

  DateTime(const DateTime& from);
  DateTime(DateTime&& from) noexcept
    : DateTime() {
    *this = ::std::move(from);
  }

  inline DateTime& operator=(const DateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateTime& operator=(DateTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DateTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const DateTime* internal_default_instance() {
    return reinterpret_cast<const DateTime*>(
               &_DateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DateTime& a, DateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(DateTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateTime* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DateTime* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DateTime>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DateTime& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DateTime& from) {
    DateTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTime* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.DateTime";
  }
  protected:
  explicit DateTime(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
    kHourFieldNumber = 4,
    kMinuteFieldNumber = 5,
    kSecondFieldNumber = 6,
  };
  // uint32 year = 1;
  void clear_year() ;
  ::uint32_t year() const;
  void set_year(::uint32_t value);

  private:
  ::uint32_t _internal_year() const;
  void _internal_set_year(::uint32_t value);

  public:
  // uint32 month = 2;
  void clear_month() ;
  ::uint32_t month() const;
  void set_month(::uint32_t value);

  private:
  ::uint32_t _internal_month() const;
  void _internal_set_month(::uint32_t value);

  public:
  // uint32 day = 3;
  void clear_day() ;
  ::uint32_t day() const;
  void set_day(::uint32_t value);

  private:
  ::uint32_t _internal_day() const;
  void _internal_set_day(::uint32_t value);

  public:
  // uint32 hour = 4;
  void clear_hour() ;
  ::uint32_t hour() const;
  void set_hour(::uint32_t value);

  private:
  ::uint32_t _internal_hour() const;
  void _internal_set_hour(::uint32_t value);

  public:
  // uint32 minute = 5;
  void clear_minute() ;
  ::uint32_t minute() const;
  void set_minute(::uint32_t value);

  private:
  ::uint32_t _internal_minute() const;
  void _internal_set_minute(::uint32_t value);

  public:
  // uint32 second = 6;
  void clear_second() ;
  ::uint32_t second() const;
  void set_second(::uint32_t value);

  private:
  ::uint32_t _internal_second() const;
  void _internal_set_second(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DateTime)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t year_;
    ::uint32_t month_;
    ::uint32_t day_;
    ::uint32_t hour_;
    ::uint32_t minute_;
    ::uint32_t second_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// Name

// string name = 1;
inline void Name::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Name::name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Name.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Name::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Name.name)
}
inline std::string* Name::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Name.name)
  return _s;
}
inline const std::string& Name::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Name::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Name::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Name::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Name.name)
  return _impl_.name_.Release();
}
inline void Name::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Name.name)
}

// -------------------------------------------------------------------

// State

// bool enable = 1;
inline void State::clear_enable() {
  _impl_.enable_ = false;
}
inline bool State::enable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.State.enable)
  return _internal_enable();
}
inline void State::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.State.enable)
}
inline bool State::_internal_enable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enable_;
}
inline void State::_internal_set_enable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.enable_ = value;
}

// -------------------------------------------------------------------

// Float

// float value = 1;
inline void Float::clear_value() {
  _impl_.value_ = 0;
}
inline float Float::value() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Float.value)
  return _internal_value();
}
inline void Float::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Float.value)
}
inline float Float::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void Float::_internal_set_value(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// IntMode

// uint64 mode = 1;
inline void IntMode::clear_mode() {
  _impl_.mode_ = ::uint64_t{0u};
}
inline ::uint64_t IntMode::mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IntMode.mode)
  return _internal_mode();
}
inline void IntMode::set_mode(::uint64_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IntMode.mode)
}
inline ::uint64_t IntMode::_internal_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mode_;
}
inline void IntMode::_internal_set_mode(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// StopCat

// .Nrmk.IndyFramework.StopCategory category = 1;
inline void StopCat::clear_category() {
  _impl_.category_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory StopCat::category() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.StopCat.category)
  return _internal_category();
}
inline void StopCat::set_category(::Nrmk::IndyFramework::StopCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.StopCat.category)
}
inline ::Nrmk::IndyFramework::StopCategory StopCat::_internal_category() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::StopCategory>(_impl_.category_);
}
inline void StopCat::_internal_set_category(::Nrmk::IndyFramework::StopCategory value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.category_ = value;
}

// -------------------------------------------------------------------

// PauseCat

// .Nrmk.IndyFramework.PauseCategory category = 1;
inline void PauseCat::clear_category() {
  _impl_.category_ = 0;
}
inline ::Nrmk::IndyFramework::PauseCategory PauseCat::category() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PauseCat.category)
  return _internal_category();
}
inline void PauseCat::set_category(::Nrmk::IndyFramework::PauseCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PauseCat.category)
}
inline ::Nrmk::IndyFramework::PauseCategory PauseCat::_internal_category() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::PauseCategory>(_impl_.category_);
}
inline void PauseCat::_internal_set_category(::Nrmk::IndyFramework::PauseCategory value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.category_ = value;
}

// -------------------------------------------------------------------

// Response

// int64 code = 1;
inline void Response::clear_code() {
  _impl_.code_ = ::int64_t{0};
}
inline ::int64_t Response::code() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Response.code)
  return _internal_code();
}
inline void Response::set_code(::int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Response.code)
}
inline ::int64_t Response::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_;
}
inline void Response::_internal_set_code(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_ = value;
}

// string msg = 2;
inline void Response::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& Response::msg() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Response.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Response::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Response.msg)
}
inline std::string* Response::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Response.msg)
  return _s;
}
inline const std::string& Response::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void Response::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* Response::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Response.msg)
  return _impl_.msg_.Release();
}
inline void Response::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Response.msg)
}

// -------------------------------------------------------------------

// Message

// string content = 1;
inline void Message::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Message::content() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Message.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Message.content)
}
inline std::string* Message::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Message.content)
  return _s;
}
inline const std::string& Message::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void Message::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.content_.Mutable( GetArenaForAllocation());
}
inline std::string* Message::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Message.content)
  return _impl_.content_.Release();
}
inline void Message::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Message.content)
}

// -------------------------------------------------------------------

// Vector

// repeated double values = 1;
inline int Vector::_internal_values_size() const {
  return _internal_values().size();
}
inline int Vector::values_size() const {
  return _internal_values_size();
}
inline void Vector::clear_values() {
  _internal_mutable_values()->Clear();
}
inline double Vector::values(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Vector.values)
  return _internal_values().Get(index);
}
inline void Vector::set_values(int index, double value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Vector.values)
}
inline void Vector::add_values(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.Vector.values)
}
inline const ::google::protobuf::RepeatedField<double>& Vector::values() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.Vector.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<double>* Vector::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.Vector.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}

inline const ::google::protobuf::RepeatedField<double>& Vector::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<double>* Vector::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// PosePair

// repeated float q = 1;
inline int PosePair::_internal_q_size() const {
  return _internal_q().size();
}
inline int PosePair::q_size() const {
  return _internal_q_size();
}
inline void PosePair::clear_q() {
  _internal_mutable_q()->Clear();
}
inline float PosePair::q(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PosePair.q)
  return _internal_q().Get(index);
}
inline void PosePair::set_q(int index, float value) {
  _internal_mutable_q()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PosePair.q)
}
inline void PosePair::add_q(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_q()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PosePair.q)
}
inline const ::google::protobuf::RepeatedField<float>& PosePair::q() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PosePair.q)
  return _internal_q();
}
inline ::google::protobuf::RepeatedField<float>* PosePair::mutable_q() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PosePair.q)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_q();
}

inline const ::google::protobuf::RepeatedField<float>& PosePair::_internal_q() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.q_;
}
inline ::google::protobuf::RepeatedField<float>* PosePair::_internal_mutable_q() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.q_;
}

// repeated float p = 2;
inline int PosePair::_internal_p_size() const {
  return _internal_p().size();
}
inline int PosePair::p_size() const {
  return _internal_p_size();
}
inline void PosePair::clear_p() {
  _internal_mutable_p()->Clear();
}
inline float PosePair::p(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PosePair.p)
  return _internal_p().Get(index);
}
inline void PosePair::set_p(int index, float value) {
  _internal_mutable_p()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PosePair.p)
}
inline void PosePair::add_p(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_p()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PosePair.p)
}
inline const ::google::protobuf::RepeatedField<float>& PosePair::p() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PosePair.p)
  return _internal_p();
}
inline ::google::protobuf::RepeatedField<float>* PosePair::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PosePair.p)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_p();
}

inline const ::google::protobuf::RepeatedField<float>& PosePair::_internal_p() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.p_;
}
inline ::google::protobuf::RepeatedField<float>* PosePair::_internal_mutable_p() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.p_;
}

// -------------------------------------------------------------------

// EndtoolRS485Tx

// uint32 word1 = 1;
inline void EndtoolRS485Tx::clear_word1() {
  _impl_.word1_ = 0u;
}
inline ::uint32_t EndtoolRS485Tx::word1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRS485Tx.word1)
  return _internal_word1();
}
inline void EndtoolRS485Tx::set_word1(::uint32_t value) {
  _internal_set_word1(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRS485Tx.word1)
}
inline ::uint32_t EndtoolRS485Tx::_internal_word1() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.word1_;
}
inline void EndtoolRS485Tx::_internal_set_word1(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.word1_ = value;
}

// uint32 word2 = 2;
inline void EndtoolRS485Tx::clear_word2() {
  _impl_.word2_ = 0u;
}
inline ::uint32_t EndtoolRS485Tx::word2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRS485Tx.word2)
  return _internal_word2();
}
inline void EndtoolRS485Tx::set_word2(::uint32_t value) {
  _internal_set_word2(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRS485Tx.word2)
}
inline ::uint32_t EndtoolRS485Tx::_internal_word2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.word2_;
}
inline void EndtoolRS485Tx::_internal_set_word2(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.word2_ = value;
}

// -------------------------------------------------------------------

// EndtoolRS485Rx

// uint32 word1 = 1;
inline void EndtoolRS485Rx::clear_word1() {
  _impl_.word1_ = 0u;
}
inline ::uint32_t EndtoolRS485Rx::word1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRS485Rx.word1)
  return _internal_word1();
}
inline void EndtoolRS485Rx::set_word1(::uint32_t value) {
  _internal_set_word1(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRS485Rx.word1)
}
inline ::uint32_t EndtoolRS485Rx::_internal_word1() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.word1_;
}
inline void EndtoolRS485Rx::_internal_set_word1(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.word1_ = value;
}

// uint32 word2 = 2;
inline void EndtoolRS485Rx::clear_word2() {
  _impl_.word2_ = 0u;
}
inline ::uint32_t EndtoolRS485Rx::word2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRS485Rx.word2)
  return _internal_word2();
}
inline void EndtoolRS485Rx::set_word2(::uint32_t value) {
  _internal_set_word2(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRS485Rx.word2)
}
inline ::uint32_t EndtoolRS485Rx::_internal_word2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.word2_;
}
inline void EndtoolRS485Rx::_internal_set_word2(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.word2_ = value;
}

// -------------------------------------------------------------------

// TactTime

// string type = 1;
inline void TactTime::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& TactTime::type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TactTime.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TactTime::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TactTime.type)
}
inline std::string* TactTime::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TactTime.type)
  return _s;
}
inline const std::string& TactTime::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void TactTime::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* TactTime::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArenaForAllocation());
}
inline std::string* TactTime::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TactTime.type)
  return _impl_.type_.Release();
}
inline void TactTime::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TactTime.type)
}

// float tact_time = 2;
inline void TactTime::clear_tact_time() {
  _impl_.tact_time_ = 0;
}
inline float TactTime::tact_time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TactTime.tact_time)
  return _internal_tact_time();
}
inline void TactTime::set_tact_time(float value) {
  _internal_set_tact_time(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TactTime.tact_time)
}
inline float TactTime::_internal_tact_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tact_time_;
}
inline void TactTime::_internal_set_tact_time(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tact_time_ = value;
}

// -------------------------------------------------------------------

// DateTime

// uint32 year = 1;
inline void DateTime::clear_year() {
  _impl_.year_ = 0u;
}
inline ::uint32_t DateTime::year() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DateTime.year)
  return _internal_year();
}
inline void DateTime::set_year(::uint32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DateTime.year)
}
inline ::uint32_t DateTime::_internal_year() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.year_;
}
inline void DateTime::_internal_set_year(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.year_ = value;
}

// uint32 month = 2;
inline void DateTime::clear_month() {
  _impl_.month_ = 0u;
}
inline ::uint32_t DateTime::month() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DateTime.month)
  return _internal_month();
}
inline void DateTime::set_month(::uint32_t value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DateTime.month)
}
inline ::uint32_t DateTime::_internal_month() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.month_;
}
inline void DateTime::_internal_set_month(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.month_ = value;
}

// uint32 day = 3;
inline void DateTime::clear_day() {
  _impl_.day_ = 0u;
}
inline ::uint32_t DateTime::day() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DateTime.day)
  return _internal_day();
}
inline void DateTime::set_day(::uint32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DateTime.day)
}
inline ::uint32_t DateTime::_internal_day() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.day_;
}
inline void DateTime::_internal_set_day(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.day_ = value;
}

// uint32 hour = 4;
inline void DateTime::clear_hour() {
  _impl_.hour_ = 0u;
}
inline ::uint32_t DateTime::hour() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DateTime.hour)
  return _internal_hour();
}
inline void DateTime::set_hour(::uint32_t value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DateTime.hour)
}
inline ::uint32_t DateTime::_internal_hour() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hour_;
}
inline void DateTime::_internal_set_hour(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hour_ = value;
}

// uint32 minute = 5;
inline void DateTime::clear_minute() {
  _impl_.minute_ = 0u;
}
inline ::uint32_t DateTime::minute() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DateTime.minute)
  return _internal_minute();
}
inline void DateTime::set_minute(::uint32_t value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DateTime.minute)
}
inline ::uint32_t DateTime::_internal_minute() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.minute_;
}
inline void DateTime::_internal_set_minute(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.minute_ = value;
}

// uint32 second = 6;
inline void DateTime::clear_second() {
  _impl_.second_ = 0u;
}
inline ::uint32_t DateTime::second() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DateTime.second)
  return _internal_second();
}
inline void DateTime::set_second(::uint32_t value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DateTime.second)
}
inline ::uint32_t DateTime::_internal_second() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.second_;
}
inline void DateTime::_internal_set_second(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.second_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Nrmk::IndyFramework::OpState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::OpState>() {
  return ::Nrmk::IndyFramework::OpState_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::TrajState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::TrajState>() {
  return ::Nrmk::IndyFramework::TrajState_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::TrajCondition> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::TrajCondition>() {
  return ::Nrmk::IndyFramework::TrajCondition_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::StopCategory> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::StopCategory>() {
  return ::Nrmk::IndyFramework::StopCategory_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::PauseCategory> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::PauseCategory>() {
  return ::Nrmk::IndyFramework::PauseCategory_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::ProgramState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::ProgramState>() {
  return ::Nrmk::IndyFramework::ProgramState_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::CollisionPolicyType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::CollisionPolicyType>() {
  return ::Nrmk::IndyFramework::CollisionPolicyType_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::TuningSpace> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::TuningSpace>() {
  return ::Nrmk::IndyFramework::TuningSpace_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::TuningPrecision> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::TuningPrecision>() {
  return ::Nrmk::IndyFramework::TuningPrecision_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2eproto_2epb_2eh
