// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_5fmsgs_2eproto;
namespace Nrmk {
namespace IndyFramework {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class EndtoolRS485Rx;
class EndtoolRS485RxDefaultTypeInternal;
extern EndtoolRS485RxDefaultTypeInternal _EndtoolRS485Rx_default_instance_;
class EndtoolRS485Tx;
class EndtoolRS485TxDefaultTypeInternal;
extern EndtoolRS485TxDefaultTypeInternal _EndtoolRS485Tx_default_instance_;
class Float;
class FloatDefaultTypeInternal;
extern FloatDefaultTypeInternal _Float_default_instance_;
class IntMode;
class IntModeDefaultTypeInternal;
extern IntModeDefaultTypeInternal _IntMode_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Name;
class NameDefaultTypeInternal;
extern NameDefaultTypeInternal _Name_default_instance_;
class PauseCat;
class PauseCatDefaultTypeInternal;
extern PauseCatDefaultTypeInternal _PauseCat_default_instance_;
class PosePair;
class PosePairDefaultTypeInternal;
extern PosePairDefaultTypeInternal _PosePair_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class StopCat;
class StopCatDefaultTypeInternal;
extern StopCatDefaultTypeInternal _StopCat_default_instance_;
class TactTime;
class TactTimeDefaultTypeInternal;
extern TactTimeDefaultTypeInternal _TactTime_default_instance_;
class Vector;
class VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
PROTOBUF_NAMESPACE_OPEN
template<> ::Nrmk::IndyFramework::Empty* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::Empty>(Arena*);
template<> ::Nrmk::IndyFramework::EndtoolRS485Rx* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::EndtoolRS485Rx>(Arena*);
template<> ::Nrmk::IndyFramework::EndtoolRS485Tx* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::EndtoolRS485Tx>(Arena*);
template<> ::Nrmk::IndyFramework::Float* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::Float>(Arena*);
template<> ::Nrmk::IndyFramework::IntMode* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::IntMode>(Arena*);
template<> ::Nrmk::IndyFramework::Message* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::Message>(Arena*);
template<> ::Nrmk::IndyFramework::Name* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::Name>(Arena*);
template<> ::Nrmk::IndyFramework::PauseCat* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::PauseCat>(Arena*);
template<> ::Nrmk::IndyFramework::PosePair* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::PosePair>(Arena*);
template<> ::Nrmk::IndyFramework::Response* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::Response>(Arena*);
template<> ::Nrmk::IndyFramework::State* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::State>(Arena*);
template<> ::Nrmk::IndyFramework::StopCat* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::StopCat>(Arena*);
template<> ::Nrmk::IndyFramework::TactTime* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TactTime>(Arena*);
template<> ::Nrmk::IndyFramework::Vector* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::Vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Nrmk {
namespace IndyFramework {

enum OpState : int {
  OP_SYSTEM_OFF = 0,
  OP_SYSTEM_ON = 1,
  OP_VIOLATE = 2,
  OP_RECOVER_HARD = 3,
  OP_RECOVER_SOFT = 4,
  OP_IDLE = 5,
  OP_MOVING = 6,
  OP_TEACHING = 7,
  OP_COLLISION = 8,
  OP_STOP_AND_OFF = 9,
  OP_COMPLIANCE = 10,
  OP_BRAKE_CONTROL = 11,
  OP_SYSTEM_RESET = 12,
  OP_SYSTEM_SWITCH = 13,
  OP_VIOLATE_HARD = 15,
  OP_MANUAL_RECOVER = 16,
  TELE_OP = 17,
  TRAJ_MOVING = 18,
  OpState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OpState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OpState_IsValid(int value);
constexpr OpState OpState_MIN = OP_SYSTEM_OFF;
constexpr OpState OpState_MAX = TRAJ_MOVING;
constexpr int OpState_ARRAYSIZE = OpState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpState_descriptor();
template<typename T>
inline const std::string& OpState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OpState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OpState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OpState_descriptor(), enum_t_value);
}
inline bool OpState_Parse(
    const std::string& name, OpState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpState>(
    OpState_descriptor(), name, value);
}
enum TrajState : int {
  TRAJ_NONE = 0,
  TRAJ_INIT = 1,
  TRAJ_CALC = 2,
  TRAJ_STAND_BY = 3,
  TRAJ_ACC = 4,
  TRAJ_CRUISE = 5,
  TRAJ_DEC = 6,
  TRAJ_CANCELLING = 7,
  TRAJ_FINISHED = 8,
  TRAJ_ERROR = 9,
  TrajState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TrajState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TrajState_IsValid(int value);
constexpr TrajState TrajState_MIN = TRAJ_NONE;
constexpr TrajState TrajState_MAX = TRAJ_ERROR;
constexpr int TrajState_ARRAYSIZE = TrajState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrajState_descriptor();
template<typename T>
inline const std::string& TrajState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrajState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrajState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrajState_descriptor(), enum_t_value);
}
inline bool TrajState_Parse(
    const std::string& name, TrajState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrajState>(
    TrajState_descriptor(), name, value);
}
enum TrajCondition : int {
  TRAJ_STARTED = 0,
  TRAJ_ACC_DONE = 1,
  TRAJ_CRZ_DONE = 2,
  TRAJ_DEC_DONE = 3,
  TrajCondition_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TrajCondition_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TrajCondition_IsValid(int value);
constexpr TrajCondition TrajCondition_MIN = TRAJ_STARTED;
constexpr TrajCondition TrajCondition_MAX = TRAJ_DEC_DONE;
constexpr int TrajCondition_ARRAYSIZE = TrajCondition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrajCondition_descriptor();
template<typename T>
inline const std::string& TrajCondition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrajCondition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrajCondition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrajCondition_descriptor(), enum_t_value);
}
inline bool TrajCondition_Parse(
    const std::string& name, TrajCondition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrajCondition>(
    TrajCondition_descriptor(), name, value);
}
enum StopCategory : int {
  IMMEDIATE_BRAKE = 0,
  SMOOTH_BRAKE = 1,
  SMOOTH_ONLY = 2,
  StopCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StopCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StopCategory_IsValid(int value);
constexpr StopCategory StopCategory_MIN = IMMEDIATE_BRAKE;
constexpr StopCategory StopCategory_MAX = SMOOTH_ONLY;
constexpr int StopCategory_ARRAYSIZE = StopCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopCategory_descriptor();
template<typename T>
inline const std::string& StopCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StopCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StopCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StopCategory_descriptor(), enum_t_value);
}
inline bool StopCategory_Parse(
    const std::string& name, StopCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StopCategory>(
    StopCategory_descriptor(), name, value);
}
enum PauseCategory : int {
  SMOOTH_PAUSE = 0,
  IMMEDIATE_PAUSE = 1,
  PauseCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PauseCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PauseCategory_IsValid(int value);
constexpr PauseCategory PauseCategory_MIN = SMOOTH_PAUSE;
constexpr PauseCategory PauseCategory_MAX = IMMEDIATE_PAUSE;
constexpr int PauseCategory_ARRAYSIZE = PauseCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PauseCategory_descriptor();
template<typename T>
inline const std::string& PauseCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PauseCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PauseCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PauseCategory_descriptor(), enum_t_value);
}
inline bool PauseCategory_Parse(
    const std::string& name, PauseCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PauseCategory>(
    PauseCategory_descriptor(), name, value);
}
enum ProgramState : int {
  PROG_IDLE = 0,
  PROG_RUNNING = 1,
  PROG_PAUSING = 2,
  PROG_STOPPING = 3,
  ProgramState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProgramState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProgramState_IsValid(int value);
constexpr ProgramState ProgramState_MIN = PROG_IDLE;
constexpr ProgramState ProgramState_MAX = PROG_STOPPING;
constexpr int ProgramState_ARRAYSIZE = ProgramState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramState_descriptor();
template<typename T>
inline const std::string& ProgramState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProgramState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProgramState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProgramState_descriptor(), enum_t_value);
}
inline bool ProgramState_Parse(
    const std::string& name, ProgramState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProgramState>(
    ProgramState_descriptor(), name, value);
}
enum CollisionPolicyType : int {
  COLL_NO_DETECT = 0,
  COLL_PAUSE = 1,
  COLL_RESUME_AFTER_SLEEP = 2,
  COLL_STOP = 3,
  CollisionPolicyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CollisionPolicyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CollisionPolicyType_IsValid(int value);
constexpr CollisionPolicyType CollisionPolicyType_MIN = COLL_NO_DETECT;
constexpr CollisionPolicyType CollisionPolicyType_MAX = COLL_STOP;
constexpr int CollisionPolicyType_ARRAYSIZE = CollisionPolicyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollisionPolicyType_descriptor();
template<typename T>
inline const std::string& CollisionPolicyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CollisionPolicyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CollisionPolicyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CollisionPolicyType_descriptor(), enum_t_value);
}
inline bool CollisionPolicyType_Parse(
    const std::string& name, CollisionPolicyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CollisionPolicyType>(
    CollisionPolicyType_descriptor(), name, value);
}
enum TuningSpace : int {
  TUNE_ALL = 0,
  TUNE_JOINT = 1,
  TUNE_TASK = 2,
  TuningSpace_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TuningSpace_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TuningSpace_IsValid(int value);
constexpr TuningSpace TuningSpace_MIN = TUNE_ALL;
constexpr TuningSpace TuningSpace_MAX = TUNE_TASK;
constexpr int TuningSpace_ARRAYSIZE = TuningSpace_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TuningSpace_descriptor();
template<typename T>
inline const std::string& TuningSpace_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TuningSpace>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TuningSpace_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TuningSpace_descriptor(), enum_t_value);
}
inline bool TuningSpace_Parse(
    const std::string& name, TuningSpace* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TuningSpace>(
    TuningSpace_descriptor(), name, value);
}
enum TuningPrecision : int {
  LOW_PRECISION = 0,
  MIDDLE_PRECISION = 1,
  HIGH_PRECISION = 2,
  TuningPrecision_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TuningPrecision_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TuningPrecision_IsValid(int value);
constexpr TuningPrecision TuningPrecision_MIN = LOW_PRECISION;
constexpr TuningPrecision TuningPrecision_MAX = HIGH_PRECISION;
constexpr int TuningPrecision_ARRAYSIZE = TuningPrecision_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TuningPrecision_descriptor();
template<typename T>
inline const std::string& TuningPrecision_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TuningPrecision>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TuningPrecision_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TuningPrecision_descriptor(), enum_t_value);
}
inline bool TuningPrecision_Parse(
    const std::string& name, TuningPrecision* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TuningPrecision>(
    TuningPrecision_descriptor(), name, value);
}
// ===================================================================

class Empty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.Empty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2eproto);
    return ::descriptor_table_common_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Empty)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Name :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Name) */ {
 public:
  Name();
  virtual ~Name();

  Name(const Name& from);
  Name(Name&& from) noexcept
    : Name() {
    *this = ::std::move(from);
  }

  inline Name& operator=(const Name& from) {
    CopyFrom(from);
    return *this;
  }
  inline Name& operator=(Name&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Name& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Name* internal_default_instance() {
    return reinterpret_cast<const Name*>(
               &_Name_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Name* other);
  friend void swap(Name& a, Name& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Name* New() const final {
    return CreateMaybeMessage<Name>(nullptr);
  }

  Name* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Name>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Name& from);
  void MergeFrom(const Name& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Name* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.Name";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2eproto);
    return ::descriptor_table_common_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Name)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class State :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(State* other);
  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.State";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2eproto);
    return ::descriptor_table_common_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.State)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Float :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Float) */ {
 public:
  Float();
  virtual ~Float();

  Float(const Float& from);
  Float(Float&& from) noexcept
    : Float() {
    *this = ::std::move(from);
  }

  inline Float& operator=(const Float& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float& operator=(Float&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Float& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Float* internal_default_instance() {
    return reinterpret_cast<const Float*>(
               &_Float_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Float* other);
  friend void swap(Float& a, Float& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Float* New() const final {
    return CreateMaybeMessage<Float>(nullptr);
  }

  Float* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Float>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Float& from);
  void MergeFrom(const Float& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.Float";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2eproto);
    return ::descriptor_table_common_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Float)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class IntMode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IntMode) */ {
 public:
  IntMode();
  virtual ~IntMode();

  IntMode(const IntMode& from);
  IntMode(IntMode&& from) noexcept
    : IntMode() {
    *this = ::std::move(from);
  }

  inline IntMode& operator=(const IntMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntMode& operator=(IntMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntMode* internal_default_instance() {
    return reinterpret_cast<const IntMode*>(
               &_IntMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(IntMode* other);
  friend void swap(IntMode& a, IntMode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntMode* New() const final {
    return CreateMaybeMessage<IntMode>(nullptr);
  }

  IntMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntMode& from);
  void MergeFrom(const IntMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.IntMode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2eproto);
    return ::descriptor_table_common_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 mode = 1;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IntMode)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class StopCat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.StopCat) */ {
 public:
  StopCat();
  virtual ~StopCat();

  StopCat(const StopCat& from);
  StopCat(StopCat&& from) noexcept
    : StopCat() {
    *this = ::std::move(from);
  }

  inline StopCat& operator=(const StopCat& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopCat& operator=(StopCat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopCat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopCat* internal_default_instance() {
    return reinterpret_cast<const StopCat*>(
               &_StopCat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(StopCat* other);
  friend void swap(StopCat& a, StopCat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopCat* New() const final {
    return CreateMaybeMessage<StopCat>(nullptr);
  }

  StopCat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopCat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopCat& from);
  void MergeFrom(const StopCat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopCat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.StopCat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2eproto);
    return ::descriptor_table_common_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.StopCategory category = 1;
  void clear_category();
  static const int kCategoryFieldNumber = 1;
  ::Nrmk::IndyFramework::StopCategory category() const;
  void set_category(::Nrmk::IndyFramework::StopCategory value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.StopCat)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PauseCat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.PauseCat) */ {
 public:
  PauseCat();
  virtual ~PauseCat();

  PauseCat(const PauseCat& from);
  PauseCat(PauseCat&& from) noexcept
    : PauseCat() {
    *this = ::std::move(from);
  }

  inline PauseCat& operator=(const PauseCat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseCat& operator=(PauseCat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PauseCat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PauseCat* internal_default_instance() {
    return reinterpret_cast<const PauseCat*>(
               &_PauseCat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PauseCat* other);
  friend void swap(PauseCat& a, PauseCat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PauseCat* New() const final {
    return CreateMaybeMessage<PauseCat>(nullptr);
  }

  PauseCat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseCat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PauseCat& from);
  void MergeFrom(const PauseCat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseCat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.PauseCat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2eproto);
    return ::descriptor_table_common_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.PauseCategory category = 1;
  void clear_category();
  static const int kCategoryFieldNumber = 1;
  ::Nrmk::IndyFramework::PauseCategory category() const;
  void set_category(::Nrmk::IndyFramework::PauseCategory value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.PauseCat)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2eproto);
    return ::descriptor_table_common_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // int64 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Response)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int64 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2eproto);
    return ::descriptor_table_common_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Message)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Vector :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Vector) */ {
 public:
  Vector();
  virtual ~Vector();

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Vector* other);
  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector* New() const final {
    return CreateMaybeMessage<Vector>(nullptr);
  }

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.Vector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2eproto);
    return ::descriptor_table_common_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Vector)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PosePair :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.PosePair) */ {
 public:
  PosePair();
  virtual ~PosePair();

  PosePair(const PosePair& from);
  PosePair(PosePair&& from) noexcept
    : PosePair() {
    *this = ::std::move(from);
  }

  inline PosePair& operator=(const PosePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosePair& operator=(PosePair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PosePair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PosePair* internal_default_instance() {
    return reinterpret_cast<const PosePair*>(
               &_PosePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(PosePair* other);
  friend void swap(PosePair& a, PosePair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PosePair* New() const final {
    return CreateMaybeMessage<PosePair>(nullptr);
  }

  PosePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosePair& from);
  void MergeFrom(const PosePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.PosePair";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2eproto);
    return ::descriptor_table_common_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float q = 1;
  int q_size() const;
  void clear_q();
  static const int kQFieldNumber = 1;
  float q(int index) const;
  void set_q(int index, float value);
  void add_q(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      q() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_q();

  // repeated float p = 2;
  int p_size() const;
  void clear_p();
  static const int kPFieldNumber = 2;
  float p(int index) const;
  void set_p(int index, float value);
  void add_p(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      p() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_p();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.PosePair)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > q_;
  mutable std::atomic<int> _q_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > p_;
  mutable std::atomic<int> _p_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class EndtoolRS485Tx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.EndtoolRS485Tx) */ {
 public:
  EndtoolRS485Tx();
  virtual ~EndtoolRS485Tx();

  EndtoolRS485Tx(const EndtoolRS485Tx& from);
  EndtoolRS485Tx(EndtoolRS485Tx&& from) noexcept
    : EndtoolRS485Tx() {
    *this = ::std::move(from);
  }

  inline EndtoolRS485Tx& operator=(const EndtoolRS485Tx& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndtoolRS485Tx& operator=(EndtoolRS485Tx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndtoolRS485Tx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndtoolRS485Tx* internal_default_instance() {
    return reinterpret_cast<const EndtoolRS485Tx*>(
               &_EndtoolRS485Tx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(EndtoolRS485Tx* other);
  friend void swap(EndtoolRS485Tx& a, EndtoolRS485Tx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndtoolRS485Tx* New() const final {
    return CreateMaybeMessage<EndtoolRS485Tx>(nullptr);
  }

  EndtoolRS485Tx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndtoolRS485Tx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndtoolRS485Tx& from);
  void MergeFrom(const EndtoolRS485Tx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndtoolRS485Tx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.EndtoolRS485Tx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2eproto);
    return ::descriptor_table_common_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 word1 = 1;
  void clear_word1();
  static const int kWord1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 word1() const;
  void set_word1(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 word2 = 2;
  void clear_word2();
  static const int kWord2FieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 word2() const;
  void set_word2(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.EndtoolRS485Tx)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 word1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 word2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class EndtoolRS485Rx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.EndtoolRS485Rx) */ {
 public:
  EndtoolRS485Rx();
  virtual ~EndtoolRS485Rx();

  EndtoolRS485Rx(const EndtoolRS485Rx& from);
  EndtoolRS485Rx(EndtoolRS485Rx&& from) noexcept
    : EndtoolRS485Rx() {
    *this = ::std::move(from);
  }

  inline EndtoolRS485Rx& operator=(const EndtoolRS485Rx& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndtoolRS485Rx& operator=(EndtoolRS485Rx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndtoolRS485Rx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndtoolRS485Rx* internal_default_instance() {
    return reinterpret_cast<const EndtoolRS485Rx*>(
               &_EndtoolRS485Rx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(EndtoolRS485Rx* other);
  friend void swap(EndtoolRS485Rx& a, EndtoolRS485Rx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndtoolRS485Rx* New() const final {
    return CreateMaybeMessage<EndtoolRS485Rx>(nullptr);
  }

  EndtoolRS485Rx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndtoolRS485Rx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndtoolRS485Rx& from);
  void MergeFrom(const EndtoolRS485Rx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndtoolRS485Rx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.EndtoolRS485Rx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2eproto);
    return ::descriptor_table_common_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 word1 = 1;
  void clear_word1();
  static const int kWord1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 word1() const;
  void set_word1(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 word2 = 2;
  void clear_word2();
  static const int kWord2FieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 word2() const;
  void set_word2(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.EndtoolRS485Rx)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 word1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 word2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TactTime :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TactTime) */ {
 public:
  TactTime();
  virtual ~TactTime();

  TactTime(const TactTime& from);
  TactTime(TactTime&& from) noexcept
    : TactTime() {
    *this = ::std::move(from);
  }

  inline TactTime& operator=(const TactTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline TactTime& operator=(TactTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TactTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TactTime* internal_default_instance() {
    return reinterpret_cast<const TactTime*>(
               &_TactTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(TactTime* other);
  friend void swap(TactTime& a, TactTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TactTime* New() const final {
    return CreateMaybeMessage<TactTime>(nullptr);
  }

  TactTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TactTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TactTime& from);
  void MergeFrom(const TactTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TactTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TactTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_5fmsgs_2eproto);
    return ::descriptor_table_common_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // float tact_time = 2;
  void clear_tact_time();
  static const int kTactTimeFieldNumber = 2;
  float tact_time() const;
  void set_tact_time(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TactTime)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  float tact_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// Name

// string name = 1;
inline void Name::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Name::name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Name.name)
  return name_.GetNoArena();
}
inline void Name::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Name.name)
}
inline void Name::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.Name.name)
}
inline void Name::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.Name.name)
}
inline void Name::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.Name.name)
}
inline std::string* Name::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Name.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Name::release_name() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Name.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Name::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Name.name)
}

// -------------------------------------------------------------------

// State

// bool enable = 1;
inline void State::clear_enable() {
  enable_ = false;
}
inline bool State::enable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.State.enable)
  return enable_;
}
inline void State::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.State.enable)
}

// -------------------------------------------------------------------

// Float

// float value = 1;
inline void Float::clear_value() {
  value_ = 0;
}
inline float Float::value() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Float.value)
  return value_;
}
inline void Float::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Float.value)
}

// -------------------------------------------------------------------

// IntMode

// uint64 mode = 1;
inline void IntMode::clear_mode() {
  mode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntMode::mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IntMode.mode)
  return mode_;
}
inline void IntMode::set_mode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IntMode.mode)
}

// -------------------------------------------------------------------

// StopCat

// .Nrmk.IndyFramework.StopCategory category = 1;
inline void StopCat::clear_category() {
  category_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory StopCat::category() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.StopCat.category)
  return static_cast< ::Nrmk::IndyFramework::StopCategory >(category_);
}
inline void StopCat::set_category(::Nrmk::IndyFramework::StopCategory value) {
  
  category_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.StopCat.category)
}

// -------------------------------------------------------------------

// PauseCat

// .Nrmk.IndyFramework.PauseCategory category = 1;
inline void PauseCat::clear_category() {
  category_ = 0;
}
inline ::Nrmk::IndyFramework::PauseCategory PauseCat::category() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PauseCat.category)
  return static_cast< ::Nrmk::IndyFramework::PauseCategory >(category_);
}
inline void PauseCat::set_category(::Nrmk::IndyFramework::PauseCategory value) {
  
  category_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PauseCat.category)
}

// -------------------------------------------------------------------

// Response

// int64 code = 1;
inline void Response::clear_code() {
  code_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Response::code() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Response.code)
  return code_;
}
inline void Response::set_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Response.code)
}

// string msg = 2;
inline void Response::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Response::msg() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Response.msg)
  return msg_.GetNoArena();
}
inline void Response::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Response.msg)
}
inline void Response::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.Response.msg)
}
inline void Response::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.Response.msg)
}
inline void Response::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.Response.msg)
}
inline std::string* Response::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Response.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_msg() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Response.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Response.msg)
}

// -------------------------------------------------------------------

// Message

// string content = 1;
inline void Message::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Message::content() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Message.content)
  return content_.GetNoArena();
}
inline void Message::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Message.content)
}
inline void Message::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.Message.content)
}
inline void Message::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.Message.content)
}
inline void Message::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.Message.content)
}
inline std::string* Message::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Message.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_content() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Message.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Message.content)
}

// -------------------------------------------------------------------

// Vector

// repeated double values = 1;
inline int Vector::values_size() const {
  return values_.size();
}
inline void Vector::clear_values() {
  values_.Clear();
}
inline double Vector::values(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Vector.values)
  return values_.Get(index);
}
inline void Vector::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Vector.values)
}
inline void Vector::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.Vector.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Vector::values() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.Vector.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Vector::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.Vector.values)
  return &values_;
}

// -------------------------------------------------------------------

// PosePair

// repeated float q = 1;
inline int PosePair::q_size() const {
  return q_.size();
}
inline void PosePair::clear_q() {
  q_.Clear();
}
inline float PosePair::q(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PosePair.q)
  return q_.Get(index);
}
inline void PosePair::set_q(int index, float value) {
  q_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PosePair.q)
}
inline void PosePair::add_q(float value) {
  q_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PosePair.q)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PosePair::q() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PosePair.q)
  return q_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PosePair::mutable_q() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PosePair.q)
  return &q_;
}

// repeated float p = 2;
inline int PosePair::p_size() const {
  return p_.size();
}
inline void PosePair::clear_p() {
  p_.Clear();
}
inline float PosePair::p(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PosePair.p)
  return p_.Get(index);
}
inline void PosePair::set_p(int index, float value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PosePair.p)
}
inline void PosePair::add_p(float value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PosePair.p)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PosePair::p() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PosePair.p)
  return p_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PosePair::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PosePair.p)
  return &p_;
}

// -------------------------------------------------------------------

// EndtoolRS485Tx

// uint32 word1 = 1;
inline void EndtoolRS485Tx::clear_word1() {
  word1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolRS485Tx::word1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRS485Tx.word1)
  return word1_;
}
inline void EndtoolRS485Tx::set_word1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  word1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRS485Tx.word1)
}

// uint32 word2 = 2;
inline void EndtoolRS485Tx::clear_word2() {
  word2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolRS485Tx::word2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRS485Tx.word2)
  return word2_;
}
inline void EndtoolRS485Tx::set_word2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  word2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRS485Tx.word2)
}

// -------------------------------------------------------------------

// EndtoolRS485Rx

// uint32 word1 = 1;
inline void EndtoolRS485Rx::clear_word1() {
  word1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolRS485Rx::word1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRS485Rx.word1)
  return word1_;
}
inline void EndtoolRS485Rx::set_word1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  word1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRS485Rx.word1)
}

// uint32 word2 = 2;
inline void EndtoolRS485Rx::clear_word2() {
  word2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolRS485Rx::word2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRS485Rx.word2)
  return word2_;
}
inline void EndtoolRS485Rx::set_word2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  word2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRS485Rx.word2)
}

// -------------------------------------------------------------------

// TactTime

// string type = 1;
inline void TactTime::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TactTime::type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TactTime.type)
  return type_.GetNoArena();
}
inline void TactTime::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TactTime.type)
}
inline void TactTime::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.TactTime.type)
}
inline void TactTime::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.TactTime.type)
}
inline void TactTime::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.TactTime.type)
}
inline std::string* TactTime::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TactTime.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TactTime::release_type() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TactTime.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TactTime::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TactTime.type)
}

// float tact_time = 2;
inline void TactTime::clear_tact_time() {
  tact_time_ = 0;
}
inline float TactTime::tact_time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TactTime.tact_time)
  return tact_time_;
}
inline void TactTime::set_tact_time(float value) {
  
  tact_time_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TactTime.tact_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IndyFramework
}  // namespace Nrmk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Nrmk::IndyFramework::OpState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::OpState>() {
  return ::Nrmk::IndyFramework::OpState_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::TrajState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::TrajState>() {
  return ::Nrmk::IndyFramework::TrajState_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::TrajCondition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::TrajCondition>() {
  return ::Nrmk::IndyFramework::TrajCondition_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::StopCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::StopCategory>() {
  return ::Nrmk::IndyFramework::StopCategory_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::PauseCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::PauseCategory>() {
  return ::Nrmk::IndyFramework::PauseCategory_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::ProgramState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::ProgramState>() {
  return ::Nrmk::IndyFramework::ProgramState_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::CollisionPolicyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::CollisionPolicyType>() {
  return ::Nrmk::IndyFramework::CollisionPolicyType_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::TuningSpace> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::TuningSpace>() {
  return ::Nrmk::IndyFramework::TuningSpace_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::TuningPrecision> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::TuningPrecision>() {
  return ::Nrmk::IndyFramework::TuningPrecision_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2eproto
