// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#include "control.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Nrmk {
namespace IndyFramework {
}  // namespace IndyFramework
}  // namespace Nrmk
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_control_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_control_2eproto = nullptr;
const ::uint32_t TableStruct_control_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;
const char descriptor_table_protodef_control_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\rcontrol.proto\022\022Nrmk.IndyFramework\032\022con"
    "trol_msgs.proto\032\021config_msgs.proto\032\021comm"
    "on_msgs.proto2\2545\n\007Control\022N\n\016GetControlI"
    "nfo\022\031.Nrmk.IndyFramework.Empty\032\037.Nrmk.In"
    "dyFramework.ControlInfo\"\000\022[\n\017ActivateInd"
    "ySDK\022\".Nrmk.IndyFramework.SDKLicenseInfo"
    "\032\".Nrmk.IndyFramework.SDKLicenseResp\"\000\022E"
    "\n\005MoveJ\022\034.Nrmk.IndyFramework.MoveJReq\032\034."
    "Nrmk.IndyFramework.Response\"\000\022G\n\006MoveJT\022"
    "\035.Nrmk.IndyFramework.MoveJTReq\032\034.Nrmk.In"
    "dyFramework.Response\"\000\022E\n\005MoveL\022\034.Nrmk.I"
    "ndyFramework.MoveLReq\032\034.Nrmk.IndyFramewo"
    "rk.Response\"\000\022G\n\006MoveLT\022\035.Nrmk.IndyFrame"
    "work.MoveLTReq\032\034.Nrmk.IndyFramework.Resp"
    "onse\"\000\022E\n\005MoveC\022\034.Nrmk.IndyFramework.Mov"
    "eCReq\032\034.Nrmk.IndyFramework.Response\"\000\022G\n"
    "\006MoveCT\022\035.Nrmk.IndyFramework.MoveCTReq\032\034"
    ".Nrmk.IndyFramework.Response\"\000\022U\n\rMoveJo"
    "intTraj\022$.Nrmk.IndyFramework.MoveJointTr"
    "ajReq\032\034.Nrmk.IndyFramework.Response\"\000\022S\n"
    "\014MoveTaskTraj\022#.Nrmk.IndyFramework.MoveT"
    "askTrajReq\032\034.Nrmk.IndyFramework.Response"
    "\"\000\022M\n\tMoveGcode\022 .Nrmk.IndyFramework.Mov"
    "eGcodeReq\032\034.Nrmk.IndyFramework.Response\""
    "\000\022S\n\014MoveConveyor\022#.Nrmk.IndyFramework.M"
    "oveConveyorReq\032\034.Nrmk.IndyFramework.Resp"
    "onse\"\000\022G\n\006WaitIO\022\035.Nrmk.IndyFramework.Wa"
    "itIOReq\032\034.Nrmk.IndyFramework.Response\"\000\022"
    "K\n\010WaitTime\022\037.Nrmk.IndyFramework.WaitTim"
    "eReq\032\034.Nrmk.IndyFramework.Response\"\000\022S\n\014"
    "WaitProgress\022#.Nrmk.IndyFramework.WaitPr"
    "ogressReq\032\034.Nrmk.IndyFramework.Response\""
    "\000\022K\n\010WaitTraj\022\037.Nrmk.IndyFramework.WaitT"
    "rajReq\032\034.Nrmk.IndyFramework.Response\"\000\022O"
    "\n\nWaitRadius\022!.Nrmk.IndyFramework.WaitRa"
    "diusReq\032\034.Nrmk.IndyFramework.Response\"\000\022"
    "M\n\tMoveJCond\022 .Nrmk.IndyFramework.MoveJC"
    "ondReq\032\034.Nrmk.IndyFramework.Response\"\000\022Q"
    "\n\016MoveLinearAxis\022\037.Nrmk.IndyFramework.Mo"
    "veAxisReq\032\034.Nrmk.IndyFramework.Response\""
    "\000\022I\n\nStopMotion\022\033.Nrmk.IndyFramework.Sto"
    "pCat\032\034.Nrmk.IndyFramework.Response\"\000\022K\n\013"
    "PauseMotion\022\034.Nrmk.IndyFramework.PauseCa"
    "t\032\034.Nrmk.IndyFramework.Response\"\000\022N\n\021Set"
    "DirectTeaching\022\031.Nrmk.IndyFramework.Stat"
    "e\032\034.Nrmk.IndyFramework.Response\"\000\022N\n\021Set"
    "SimulationMode\022\031.Nrmk.IndyFramework.Stat"
    "e\032\034.Nrmk.IndyFramework.Response\"\000\022S\n\024Set"
    "CustomControlMode\022\033.Nrmk.IndyFramework.I"
    "ntMode\032\034.Nrmk.IndyFramework.Response\"\000\022P"
    "\n\024GetCustomControlMode\022\031.Nrmk.IndyFramew"
    "ork.Empty\032\033.Nrmk.IndyFramework.IntMode\"\000"
    "\022T\n\027SetFrictionCompensation\022\031.Nrmk.IndyF"
    "ramework.State\032\034.Nrmk.IndyFramework.Resp"
    "onse\"\000\022V\n\034GetFrictionCompensationState\022\031"
    ".Nrmk.IndyFramework.Empty\032\031.Nrmk.IndyFra"
    "mework.State\"\000\022K\n\013SetTactTime\022\034.Nrmk.Ind"
    "yFramework.TactTime\032\034.Nrmk.IndyFramework"
    ".Response\"\000\022H\n\013GetTactTime\022\031.Nrmk.IndyFr"
    "amework.Empty\032\034.Nrmk.IndyFramework.TactT"
    "ime\"\000\022D\n\007Recover\022\031.Nrmk.IndyFramework.Em"
    "pty\032\034.Nrmk.IndyFramework.Response\"\000\022C\n\006R"
    "eboot\022\031.Nrmk.IndyFramework.Empty\032\034.Nrmk."
    "IndyFramework.Response\"\000\022N\n\021SetManualRec"
    "overy\022\031.Nrmk.IndyFramework.State\032\034.Nrmk."
    "IndyFramework.Response\"\000\022O\n\020MoveRecoverJ"
    "oint\022\033.Nrmk.IndyFramework.TargetJ\032\034.Nrmk"
    ".IndyFramework.Response\"\000\022O\n\rSearchProgr"
    "am\022\033.Nrmk.IndyFramework.Program\032\037.Nrmk.I"
    "ndyFramework.ProgramInfo\"\000\022J\n\013PlayProgra"
    "m\022\033.Nrmk.IndyFramework.Program\032\034.Nrmk.In"
    "dyFramework.Response\"\000\022I\n\014PauseProgram\022\031"
    ".Nrmk.IndyFramework.Empty\032\034.Nrmk.IndyFra"
    "mework.Response\"\000\022J\n\rResumeProgram\022\031.Nrm"
    "k.IndyFramework.Empty\032\034.Nrmk.IndyFramewo"
    "rk.Response\"\000\022H\n\013StopProgram\022\031.Nrmk.Indy"
    "Framework.Empty\032\034.Nrmk.IndyFramework.Res"
    "ponse\"\000\022E\n\tSendAlarm\022\033.Nrmk.IndyFramewor"
    "k.Message\032\031.Nrmk.IndyFramework.Empty\"\000\022J"
    "\n\016SendAnnotation\022\033.Nrmk.IndyFramework.Me"
    "ssage\032\031.Nrmk.IndyFramework.Empty\"\000\022a\n\021Pl"
    "ayTuningProgram\022!.Nrmk.IndyFramework.Tun"
    "ingProgram\032\'.Nrmk.IndyFramework.Collisio"
    "nThresholds\"\000\022N\n\017PlayProgramLine\022\033.Nrmk."
    "IndyFramework.Program\032\034.Nrmk.IndyFramewo"
    "rk.Response\"\000\022`\n\031SetModbusVariableNameLi"
    "st\022&.Nrmk.IndyFramework.ModbusVariableLi"
    "st\032\031.Nrmk.IndyFramework.Empty\"\000\022O\n\023SetVa"
    "riableNameList\022\033.Nrmk.IndyFramework.AllV"
    "ars\032\031.Nrmk.IndyFramework.Empty\"\000\022O\n\023GetV"
    "ariableNameList\022\031.Nrmk.IndyFramework.Emp"
    "ty\032\033.Nrmk.IndyFramework.AllVars\"\000\022J\n\016Set"
    "IntVariable\022\033.Nrmk.IndyFramework.IntVars"
    "\032\031.Nrmk.IndyFramework.Empty\"\000\022J\n\016GetIntV"
    "ariable\022\031.Nrmk.IndyFramework.Empty\032\033.Nrm"
    "k.IndyFramework.IntVars\"\000\022P\n\021SetModbusVa"
    "riable\022\036.Nrmk.IndyFramework.ModbusVars\032\031"
    ".Nrmk.IndyFramework.Empty\"\000\022P\n\021GetModbus"
    "Variable\022\031.Nrmk.IndyFramework.Empty\032\036.Nr"
    "mk.IndyFramework.ModbusVars\"\000\022L\n\017SetBool"
    "Variable\022\034.Nrmk.IndyFramework.BoolVars\032\031"
    ".Nrmk.IndyFramework.Empty\"\000\022L\n\017GetBoolVa"
    "riable\022\031.Nrmk.IndyFramework.Empty\032\034.Nrmk"
    ".IndyFramework.BoolVars\"\000\022N\n\020SetFloatVar"
    "iable\022\035.Nrmk.IndyFramework.FloatVars\032\031.N"
    "rmk.IndyFramework.Empty\"\000\022N\n\020GetFloatVar"
    "iable\022\031.Nrmk.IndyFramework.Empty\032\035.Nrmk."
    "IndyFramework.FloatVars\"\000\022L\n\017SetJPosVari"
    "able\022\034.Nrmk.IndyFramework.JPosVars\032\031.Nrm"
    "k.IndyFramework.Empty\"\000\022L\n\017GetJPosVariab"
    "le\022\031.Nrmk.IndyFramework.Empty\032\034.Nrmk.Ind"
    "yFramework.JPosVars\"\000\022L\n\017SetTPosVariable"
    "\022\034.Nrmk.IndyFramework.TPosVars\032\031.Nrmk.In"
    "dyFramework.Empty\"\000\022L\n\017GetTPosVariable\022\031"
    ".Nrmk.IndyFramework.Empty\032\034.Nrmk.IndyFra"
    "mework.TPosVars\"\000\022i\n\021InverseKinematics\022("
    ".Nrmk.IndyFramework.InverseKinematicsReq"
    "\032(.Nrmk.IndyFramework.InverseKinematicsR"
    "es\"\000\022i\n\021ForwardKinematics\022(.Nrmk.IndyFra"
    "mework.ForwardKinematicsReq\032(.Nrmk.IndyF"
    "ramework.ForwardKinematicsRes\"\000\022~\n\030Check"
    "AproachRetractValid\022/.Nrmk.IndyFramework"
    ".CheckAproachRetractValidReq\032/.Nrmk.Indy"
    "Framework.CheckAproachRetractValidRes\"\000\022"
    "l\n\022GetPalletPointList\022).Nrmk.IndyFramewo"
    "rk.GetPalletPointListReq\032).Nrmk.IndyFram"
    "ework.GetPalletPointListRes\"\000\022u\n\025Calcula"
    "teRelativePose\022,.Nrmk.IndyFramework.Calc"
    "ulateRelativePoseReq\032,.Nrmk.IndyFramewor"
    "k.CalculateRelativePoseRes\"\000\022{\n\027Calculat"
    "eCurrentPoseRel\022..Nrmk.IndyFramework.Cal"
    "culateCurrentPoseRelReq\032..Nrmk.IndyFrame"
    "work.CalculateCurrentPoseRelRes\"\000\022G\n\rPin"
    "gFromConty\022\031.Nrmk.IndyFramework.Empty\032\031."
    "Nrmk.IndyFramework.Empty\"\000\022P\n\017GetTeleOpD"
    "evice\022\031.Nrmk.IndyFramework.Empty\032 .Nrmk."
    "IndyFramework.TeleOpDevice\"\000\022N\n\016GetTeleO"
    "pState\022\031.Nrmk.IndyFramework.Empty\032\037.Nrmk"
    ".IndyFramework.TeleOpState\"\000\022W\n\023ConnectT"
    "eleOpDevice\022 .Nrmk.IndyFramework.TeleOpD"
    "evice\032\034.Nrmk.IndyFramework.Response\"\000\022S\n"
    "\026DisConnectTeleOpDevice\022\031.Nrmk.IndyFrame"
    "work.Empty\032\034.Nrmk.IndyFramework.Response"
    "\"\000\022I\n\017ReadTeleOpInput\022\031.Nrmk.IndyFramewo"
    "rk.Empty\032\031.Nrmk.IndyFramework.TeleP\"\000\022N\n"
    "\013StartTeleOp\022\037.Nrmk.IndyFramework.TeleOp"
    "State\032\034.Nrmk.IndyFramework.Response\"\000\022G\n"
    "\nStopTeleOp\022\031.Nrmk.IndyFramework.Empty\032\034"
    ".Nrmk.IndyFramework.Response\"\000\022O\n\013SetPla"
    "yRate\022 .Nrmk.IndyFramework.TelePlayRate\032"
    "\034.Nrmk.IndyFramework.Response\"\000\022L\n\013GetPl"
    "ayRate\022\031.Nrmk.IndyFramework.Empty\032 .Nrmk"
    ".IndyFramework.TelePlayRate\"\000\022R\n\017GetTele"
    "FileList\022\031.Nrmk.IndyFramework.Empty\032\".Nr"
    "mk.IndyFramework.TeleOpFileList\"\000\022Q\n\016Sav"
    "eTeleMotion\022\037.Nrmk.IndyFramework.TeleFil"
    "eReq\032\034.Nrmk.IndyFramework.Response\"\000\022Q\n\016"
    "LoadTeleMotion\022\037.Nrmk.IndyFramework.Tele"
    "FileReq\032\034.Nrmk.IndyFramework.Response\"\000\022"
    "S\n\020DeleteTeleMotion\022\037.Nrmk.IndyFramework"
    ".TeleFileReq\032\034.Nrmk.IndyFramework.Respon"
    "se\"\000\022J\n\rEnableTeleKey\022\031.Nrmk.IndyFramewo"
    "rk.State\032\034.Nrmk.IndyFramework.Response\"\000"
    "\022M\n\tMoveTeleJ\022 .Nrmk.IndyFramework.MoveT"
    "eleJReq\032\034.Nrmk.IndyFramework.Response\"\000\022"
    "M\n\tMoveTeleL\022 .Nrmk.IndyFramework.MoveTe"
    "leLReq\032\034.Nrmk.IndyFramework.Response\"\000\022G"
    "\n\006MoveLF\022\035.Nrmk.IndyFramework.MoveLFReq\032"
    "\034.Nrmk.IndyFramework.Response\"\000\022f\n\032GetTr"
    "ansformedFTSensorData\022\031.Nrmk.IndyFramewo"
    "rk.Empty\032+.Nrmk.IndyFramework.Transforme"
    "dFTSensorData\"\000\022C\n\006FTZero\022\031.Nrmk.IndyFra"
    "mework.Empty\032\034.Nrmk.IndyFramework.Respon"
    "se\"\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_control_2eproto_deps[3] =
    {
        &::descriptor_table_common_5fmsgs_2eproto,
        &::descriptor_table_config_5fmsgs_2eproto,
        &::descriptor_table_control_5fmsgs_2eproto,
};
static ::absl::once_flag descriptor_table_control_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_control_2eproto = {
    false,
    false,
    6932,
    descriptor_table_protodef_control_2eproto,
    "control.proto",
    &descriptor_table_control_2eproto_once,
    descriptor_table_control_2eproto_deps,
    3,
    0,
    schemas,
    file_default_instances,
    TableStruct_control_2eproto::offsets,
    nullptr,
    file_level_enum_descriptors_control_2eproto,
    file_level_service_descriptors_control_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_control_2eproto_getter() {
  return &descriptor_table_control_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_control_2eproto(&descriptor_table_control_2eproto);
namespace Nrmk {
namespace IndyFramework {
// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
