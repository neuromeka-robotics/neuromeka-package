// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: control.proto

#include "control.pb.h"
#include "control.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Nrmk {
namespace IndyFramework {

static const char* Control_method_names[] = {
  "/Nrmk.IndyFramework.Control/GetControlInfo",
  "/Nrmk.IndyFramework.Control/ActivateIndySDK",
  "/Nrmk.IndyFramework.Control/MoveJ",
  "/Nrmk.IndyFramework.Control/MoveJT",
  "/Nrmk.IndyFramework.Control/MoveL",
  "/Nrmk.IndyFramework.Control/MoveLT",
  "/Nrmk.IndyFramework.Control/MoveC",
  "/Nrmk.IndyFramework.Control/MoveCT",
  "/Nrmk.IndyFramework.Control/MoveJointTraj",
  "/Nrmk.IndyFramework.Control/MoveTaskTraj",
  "/Nrmk.IndyFramework.Control/MoveConveyor",
  "/Nrmk.IndyFramework.Control/WaitIO",
  "/Nrmk.IndyFramework.Control/WaitTime",
  "/Nrmk.IndyFramework.Control/WaitProgress",
  "/Nrmk.IndyFramework.Control/WaitTraj",
  "/Nrmk.IndyFramework.Control/WaitRadius",
  "/Nrmk.IndyFramework.Control/MoveJCond",
  "/Nrmk.IndyFramework.Control/MoveLinearAxis",
  "/Nrmk.IndyFramework.Control/StopMotion",
  "/Nrmk.IndyFramework.Control/PauseMotion",
  "/Nrmk.IndyFramework.Control/SetDirectTeaching",
  "/Nrmk.IndyFramework.Control/SetSimulationMode",
  "/Nrmk.IndyFramework.Control/SetCustomControlMode",
  "/Nrmk.IndyFramework.Control/GetCustomControlMode",
  "/Nrmk.IndyFramework.Control/SetFrictionCompensation",
  "/Nrmk.IndyFramework.Control/GetFrictionCompensationState",
  "/Nrmk.IndyFramework.Control/SetTactTime",
  "/Nrmk.IndyFramework.Control/GetTactTime",
  "/Nrmk.IndyFramework.Control/Recover",
  "/Nrmk.IndyFramework.Control/Reboot",
  "/Nrmk.IndyFramework.Control/SetManualRecovery",
  "/Nrmk.IndyFramework.Control/MoveRecoverJoint",
  "/Nrmk.IndyFramework.Control/SearchProgram",
  "/Nrmk.IndyFramework.Control/PlayProgram",
  "/Nrmk.IndyFramework.Control/PauseProgram",
  "/Nrmk.IndyFramework.Control/ResumeProgram",
  "/Nrmk.IndyFramework.Control/StopProgram",
  "/Nrmk.IndyFramework.Control/SendAlarm",
  "/Nrmk.IndyFramework.Control/SendAnnotation",
  "/Nrmk.IndyFramework.Control/PlayTuningProgram",
  "/Nrmk.IndyFramework.Control/PlayProgramLine",
  "/Nrmk.IndyFramework.Control/SetModbusVariableNameList",
  "/Nrmk.IndyFramework.Control/SetVariableNameList",
  "/Nrmk.IndyFramework.Control/GetVariableNameList",
  "/Nrmk.IndyFramework.Control/SetIntVariable",
  "/Nrmk.IndyFramework.Control/GetIntVariable",
  "/Nrmk.IndyFramework.Control/SetModbusVariable",
  "/Nrmk.IndyFramework.Control/GetModbusVariable",
  "/Nrmk.IndyFramework.Control/SetBoolVariable",
  "/Nrmk.IndyFramework.Control/GetBoolVariable",
  "/Nrmk.IndyFramework.Control/SetFloatVariable",
  "/Nrmk.IndyFramework.Control/GetFloatVariable",
  "/Nrmk.IndyFramework.Control/SetJPosVariable",
  "/Nrmk.IndyFramework.Control/GetJPosVariable",
  "/Nrmk.IndyFramework.Control/SetTPosVariable",
  "/Nrmk.IndyFramework.Control/GetTPosVariable",
  "/Nrmk.IndyFramework.Control/InverseKinematics",
  "/Nrmk.IndyFramework.Control/ForwardKinematics",
  "/Nrmk.IndyFramework.Control/CheckAproachRetractValid",
  "/Nrmk.IndyFramework.Control/GetPalletPointList",
  "/Nrmk.IndyFramework.Control/CalculateRelativePose",
  "/Nrmk.IndyFramework.Control/CalculateCurrentPoseRel",
  "/Nrmk.IndyFramework.Control/PingFromConty",
  "/Nrmk.IndyFramework.Control/GetTeleOpDevice",
  "/Nrmk.IndyFramework.Control/GetTeleOpState",
  "/Nrmk.IndyFramework.Control/ConnectTeleOpDevice",
  "/Nrmk.IndyFramework.Control/DisConnectTeleOpDevice",
  "/Nrmk.IndyFramework.Control/ReadTeleOpInput",
  "/Nrmk.IndyFramework.Control/StartTeleOp",
  "/Nrmk.IndyFramework.Control/StopTeleOp",
  "/Nrmk.IndyFramework.Control/SetPlayRate",
  "/Nrmk.IndyFramework.Control/GetPlayRate",
  "/Nrmk.IndyFramework.Control/GetTeleFileList",
  "/Nrmk.IndyFramework.Control/SaveTeleMotion",
  "/Nrmk.IndyFramework.Control/LoadTeleMotion",
  "/Nrmk.IndyFramework.Control/DeleteTeleMotion",
  "/Nrmk.IndyFramework.Control/EnableTeleKey",
  "/Nrmk.IndyFramework.Control/MoveTeleJ",
  "/Nrmk.IndyFramework.Control/MoveTeleL",
  "/Nrmk.IndyFramework.Control/MoveLF",
  "/Nrmk.IndyFramework.Control/GetTransformedFTSensorData",
};

std::unique_ptr< Control::Stub> Control::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Control::Stub> stub(new Control::Stub(channel));
  return stub;
}

Control::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetControlInfo_(Control_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ActivateIndySDK_(Control_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveJ_(Control_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveJT_(Control_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveL_(Control_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveLT_(Control_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveC_(Control_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveCT_(Control_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveJointTraj_(Control_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveTaskTraj_(Control_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveConveyor_(Control_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WaitIO_(Control_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WaitTime_(Control_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WaitProgress_(Control_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WaitTraj_(Control_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WaitRadius_(Control_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveJCond_(Control_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveLinearAxis_(Control_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopMotion_(Control_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseMotion_(Control_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDirectTeaching_(Control_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSimulationMode_(Control_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCustomControlMode_(Control_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCustomControlMode_(Control_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFrictionCompensation_(Control_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFrictionCompensationState_(Control_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTactTime_(Control_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTactTime_(Control_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Recover_(Control_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reboot_(Control_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetManualRecovery_(Control_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveRecoverJoint_(Control_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchProgram_(Control_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayProgram_(Control_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseProgram_(Control_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResumeProgram_(Control_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopProgram_(Control_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendAlarm_(Control_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendAnnotation_(Control_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayTuningProgram_(Control_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayProgramLine_(Control_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetModbusVariableNameList_(Control_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetVariableNameList_(Control_method_names[42], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVariableNameList_(Control_method_names[43], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetIntVariable_(Control_method_names[44], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIntVariable_(Control_method_names[45], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetModbusVariable_(Control_method_names[46], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModbusVariable_(Control_method_names[47], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBoolVariable_(Control_method_names[48], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBoolVariable_(Control_method_names[49], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFloatVariable_(Control_method_names[50], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFloatVariable_(Control_method_names[51], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetJPosVariable_(Control_method_names[52], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJPosVariable_(Control_method_names[53], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTPosVariable_(Control_method_names[54], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTPosVariable_(Control_method_names[55], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InverseKinematics_(Control_method_names[56], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ForwardKinematics_(Control_method_names[57], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckAproachRetractValid_(Control_method_names[58], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPalletPointList_(Control_method_names[59], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalculateRelativePose_(Control_method_names[60], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalculateCurrentPoseRel_(Control_method_names[61], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PingFromConty_(Control_method_names[62], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTeleOpDevice_(Control_method_names[63], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTeleOpState_(Control_method_names[64], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectTeleOpDevice_(Control_method_names[65], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisConnectTeleOpDevice_(Control_method_names[66], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadTeleOpInput_(Control_method_names[67], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartTeleOp_(Control_method_names[68], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopTeleOp_(Control_method_names[69], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPlayRate_(Control_method_names[70], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPlayRate_(Control_method_names[71], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTeleFileList_(Control_method_names[72], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SaveTeleMotion_(Control_method_names[73], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadTeleMotion_(Control_method_names[74], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTeleMotion_(Control_method_names[75], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnableTeleKey_(Control_method_names[76], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveTeleJ_(Control_method_names[77], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveTeleL_(Control_method_names[78], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveLF_(Control_method_names[79], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransformedFTSensorData_(Control_method_names[80], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Control::Stub::GetControlInfo(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::ControlInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetControlInfo_, context, request, response);
}

void Control::Stub::experimental_async::GetControlInfo(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ControlInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetControlInfo_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetControlInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::ControlInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetControlInfo_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetControlInfo(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ControlInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetControlInfo_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetControlInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::ControlInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetControlInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ControlInfo>* Control::Stub::AsyncGetControlInfoRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::ControlInfo>::Create(channel_.get(), cq, rpcmethod_GetControlInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ControlInfo>* Control::Stub::PrepareAsyncGetControlInfoRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::ControlInfo>::Create(channel_.get(), cq, rpcmethod_GetControlInfo_, context, request, false);
}

::grpc::Status Control::Stub::ActivateIndySDK(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SDKLicenseInfo& request, ::Nrmk::IndyFramework::SDKLicenseResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ActivateIndySDK_, context, request, response);
}

void Control::Stub::experimental_async::ActivateIndySDK(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SDKLicenseInfo* request, ::Nrmk::IndyFramework::SDKLicenseResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ActivateIndySDK_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::ActivateIndySDK(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::SDKLicenseResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ActivateIndySDK_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::ActivateIndySDK(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SDKLicenseInfo* request, ::Nrmk::IndyFramework::SDKLicenseResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ActivateIndySDK_, context, request, response, reactor);
}

void Control::Stub::experimental_async::ActivateIndySDK(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::SDKLicenseResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ActivateIndySDK_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SDKLicenseResp>* Control::Stub::AsyncActivateIndySDKRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SDKLicenseInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::SDKLicenseResp>::Create(channel_.get(), cq, rpcmethod_ActivateIndySDK_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SDKLicenseResp>* Control::Stub::PrepareAsyncActivateIndySDKRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SDKLicenseInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::SDKLicenseResp>::Create(channel_.get(), cq, rpcmethod_ActivateIndySDK_, context, request, false);
}

::grpc::Status Control::Stub::MoveJ(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveJ_, context, request, response);
}

void Control::Stub::experimental_async::MoveJ(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveJ_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveJ(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveJ_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveJ(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveJ_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveJ(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveJ_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveJRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveJ_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveJRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveJ_, context, request, false);
}

::grpc::Status Control::Stub::MoveJT(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJTReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveJT_, context, request, response);
}

void Control::Stub::experimental_async::MoveJT(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJTReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveJT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveJT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveJT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveJT(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJTReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveJT_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveJT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveJT_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveJTRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveJT_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveJTRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveJT_, context, request, false);
}

::grpc::Status Control::Stub::MoveL(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveL_, context, request, response);
}

void Control::Stub::experimental_async::MoveL(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveL_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveL(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveL_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveL(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveL_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveL(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveLRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveL_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveLRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveL_, context, request, false);
}

::grpc::Status Control::Stub::MoveLT(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLTReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveLT_, context, request, response);
}

void Control::Stub::experimental_async::MoveLT(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLTReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveLT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveLT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveLT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveLT(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLTReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveLT_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveLT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveLT_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveLTRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveLT_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveLTRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveLT_, context, request, false);
}

::grpc::Status Control::Stub::MoveC(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveCReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveC_, context, request, response);
}

void Control::Stub::experimental_async::MoveC(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveCReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveC_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveC_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveC(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveCReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveC_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveC_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveCRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveCReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveC_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveCRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveCReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveC_, context, request, false);
}

::grpc::Status Control::Stub::MoveCT(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveCTReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveCT_, context, request, response);
}

void Control::Stub::experimental_async::MoveCT(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveCTReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveCT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveCT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveCT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveCT(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveCTReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveCT_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveCT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveCT_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveCTRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveCTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveCT_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveCTRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveCTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveCT_, context, request, false);
}

::grpc::Status Control::Stub::MoveJointTraj(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJointTrajReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveJointTraj_, context, request, response);
}

void Control::Stub::experimental_async::MoveJointTraj(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJointTrajReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveJointTraj_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveJointTraj(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveJointTraj_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveJointTraj(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJointTrajReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveJointTraj_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveJointTraj(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveJointTraj_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveJointTrajRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJointTrajReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveJointTraj_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveJointTrajRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJointTrajReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveJointTraj_, context, request, false);
}

::grpc::Status Control::Stub::MoveTaskTraj(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTaskTrajReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveTaskTraj_, context, request, response);
}

void Control::Stub::experimental_async::MoveTaskTraj(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTaskTrajReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveTaskTraj_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveTaskTraj(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveTaskTraj_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveTaskTraj(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTaskTrajReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveTaskTraj_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveTaskTraj(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveTaskTraj_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveTaskTrajRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTaskTrajReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveTaskTraj_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveTaskTrajRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTaskTrajReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveTaskTraj_, context, request, false);
}

::grpc::Status Control::Stub::MoveConveyor(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveConveyorReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveConveyor_, context, request, response);
}

void Control::Stub::experimental_async::MoveConveyor(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveConveyorReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveConveyor_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveConveyor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveConveyor_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveConveyor(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveConveyorReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveConveyor_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveConveyor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveConveyor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveConveyorRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveConveyorReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveConveyor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveConveyorRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveConveyorReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveConveyor_, context, request, false);
}

::grpc::Status Control::Stub::WaitIO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitIOReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WaitIO_, context, request, response);
}

void Control::Stub::experimental_async::WaitIO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitIOReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WaitIO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::WaitIO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WaitIO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::WaitIO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitIOReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WaitIO_, context, request, response, reactor);
}

void Control::Stub::experimental_async::WaitIO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WaitIO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncWaitIORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitIOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_WaitIO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncWaitIORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitIOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_WaitIO_, context, request, false);
}

::grpc::Status Control::Stub::WaitTime(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitTimeReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WaitTime_, context, request, response);
}

void Control::Stub::experimental_async::WaitTime(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitTimeReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WaitTime_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::WaitTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WaitTime_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::WaitTime(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitTimeReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WaitTime_, context, request, response, reactor);
}

void Control::Stub::experimental_async::WaitTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WaitTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncWaitTimeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitTimeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_WaitTime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncWaitTimeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitTimeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_WaitTime_, context, request, false);
}

::grpc::Status Control::Stub::WaitProgress(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitProgressReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WaitProgress_, context, request, response);
}

void Control::Stub::experimental_async::WaitProgress(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitProgressReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WaitProgress_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::WaitProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WaitProgress_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::WaitProgress(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitProgressReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WaitProgress_, context, request, response, reactor);
}

void Control::Stub::experimental_async::WaitProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WaitProgress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncWaitProgressRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitProgressReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_WaitProgress_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncWaitProgressRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitProgressReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_WaitProgress_, context, request, false);
}

::grpc::Status Control::Stub::WaitTraj(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitTrajReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WaitTraj_, context, request, response);
}

void Control::Stub::experimental_async::WaitTraj(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitTrajReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WaitTraj_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::WaitTraj(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WaitTraj_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::WaitTraj(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitTrajReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WaitTraj_, context, request, response, reactor);
}

void Control::Stub::experimental_async::WaitTraj(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WaitTraj_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncWaitTrajRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitTrajReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_WaitTraj_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncWaitTrajRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitTrajReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_WaitTraj_, context, request, false);
}

::grpc::Status Control::Stub::WaitRadius(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitRadiusReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WaitRadius_, context, request, response);
}

void Control::Stub::experimental_async::WaitRadius(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitRadiusReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WaitRadius_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::WaitRadius(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WaitRadius_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::WaitRadius(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitRadiusReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WaitRadius_, context, request, response, reactor);
}

void Control::Stub::experimental_async::WaitRadius(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WaitRadius_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncWaitRadiusRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitRadiusReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_WaitRadius_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncWaitRadiusRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::WaitRadiusReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_WaitRadius_, context, request, false);
}

::grpc::Status Control::Stub::MoveJCond(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJCondReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveJCond_, context, request, response);
}

void Control::Stub::experimental_async::MoveJCond(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJCondReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveJCond_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveJCond(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveJCond_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveJCond(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJCondReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveJCond_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveJCond(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveJCond_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveJCondRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJCondReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveJCond_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveJCondRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveJCondReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveJCond_, context, request, false);
}

::grpc::Status Control::Stub::MoveLinearAxis(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveAxisReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveLinearAxis_, context, request, response);
}

void Control::Stub::experimental_async::MoveLinearAxis(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveAxisReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveLinearAxis_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveLinearAxis(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveLinearAxis_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveLinearAxis(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveAxisReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveLinearAxis_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveLinearAxis(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveLinearAxis_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveLinearAxisRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveAxisReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveLinearAxis_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveLinearAxisRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveAxisReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveLinearAxis_, context, request, false);
}

::grpc::Status Control::Stub::StopMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::StopCat& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopMotion_, context, request, response);
}

void Control::Stub::experimental_async::StopMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::StopCat* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopMotion_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::StopMotion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopMotion_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::StopMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::StopCat* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopMotion_, context, request, response, reactor);
}

void Control::Stub::experimental_async::StopMotion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopMotion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncStopMotionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::StopCat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_StopMotion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncStopMotionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::StopCat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_StopMotion_, context, request, false);
}

::grpc::Status Control::Stub::PauseMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::PauseCat& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PauseMotion_, context, request, response);
}

void Control::Stub::experimental_async::PauseMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::PauseCat* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PauseMotion_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::PauseMotion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PauseMotion_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::PauseMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::PauseCat* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PauseMotion_, context, request, response, reactor);
}

void Control::Stub::experimental_async::PauseMotion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PauseMotion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncPauseMotionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::PauseCat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_PauseMotion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncPauseMotionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::PauseCat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_PauseMotion_, context, request, false);
}

::grpc::Status Control::Stub::SetDirectTeaching(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetDirectTeaching_, context, request, response);
}

void Control::Stub::experimental_async::SetDirectTeaching(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDirectTeaching_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetDirectTeaching(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDirectTeaching_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetDirectTeaching(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDirectTeaching_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetDirectTeaching(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDirectTeaching_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncSetDirectTeachingRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetDirectTeaching_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncSetDirectTeachingRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetDirectTeaching_, context, request, false);
}

::grpc::Status Control::Stub::SetSimulationMode(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSimulationMode_, context, request, response);
}

void Control::Stub::experimental_async::SetSimulationMode(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSimulationMode_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetSimulationMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSimulationMode_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetSimulationMode(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSimulationMode_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetSimulationMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSimulationMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncSetSimulationModeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetSimulationMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncSetSimulationModeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetSimulationMode_, context, request, false);
}

::grpc::Status Control::Stub::SetCustomControlMode(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IntMode& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCustomControlMode_, context, request, response);
}

void Control::Stub::experimental_async::SetCustomControlMode(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IntMode* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCustomControlMode_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetCustomControlMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCustomControlMode_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetCustomControlMode(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IntMode* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCustomControlMode_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetCustomControlMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCustomControlMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncSetCustomControlModeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IntMode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetCustomControlMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncSetCustomControlModeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IntMode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetCustomControlMode_, context, request, false);
}

::grpc::Status Control::Stub::GetCustomControlMode(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::IntMode* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCustomControlMode_, context, request, response);
}

void Control::Stub::experimental_async::GetCustomControlMode(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::IntMode* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCustomControlMode_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetCustomControlMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::IntMode* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCustomControlMode_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetCustomControlMode(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::IntMode* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCustomControlMode_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetCustomControlMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::IntMode* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCustomControlMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::IntMode>* Control::Stub::AsyncGetCustomControlModeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::IntMode>::Create(channel_.get(), cq, rpcmethod_GetCustomControlMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::IntMode>* Control::Stub::PrepareAsyncGetCustomControlModeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::IntMode>::Create(channel_.get(), cq, rpcmethod_GetCustomControlMode_, context, request, false);
}

::grpc::Status Control::Stub::SetFrictionCompensation(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetFrictionCompensation_, context, request, response);
}

void Control::Stub::experimental_async::SetFrictionCompensation(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetFrictionCompensation_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetFrictionCompensation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetFrictionCompensation_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetFrictionCompensation(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetFrictionCompensation_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetFrictionCompensation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetFrictionCompensation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncSetFrictionCompensationRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetFrictionCompensation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncSetFrictionCompensationRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetFrictionCompensation_, context, request, false);
}

::grpc::Status Control::Stub::GetFrictionCompensationState(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::State* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFrictionCompensationState_, context, request, response);
}

void Control::Stub::experimental_async::GetFrictionCompensationState(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::State* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFrictionCompensationState_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetFrictionCompensationState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::State* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFrictionCompensationState_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetFrictionCompensationState(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::State* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFrictionCompensationState_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetFrictionCompensationState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::State* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFrictionCompensationState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::State>* Control::Stub::AsyncGetFrictionCompensationStateRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::State>::Create(channel_.get(), cq, rpcmethod_GetFrictionCompensationState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::State>* Control::Stub::PrepareAsyncGetFrictionCompensationStateRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::State>::Create(channel_.get(), cq, rpcmethod_GetFrictionCompensationState_, context, request, false);
}

::grpc::Status Control::Stub::SetTactTime(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TactTime& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTactTime_, context, request, response);
}

void Control::Stub::experimental_async::SetTactTime(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TactTime* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTactTime_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetTactTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTactTime_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetTactTime(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TactTime* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTactTime_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetTactTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTactTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncSetTactTimeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TactTime& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetTactTime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncSetTactTimeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TactTime& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetTactTime_, context, request, false);
}

::grpc::Status Control::Stub::GetTactTime(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::TactTime* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTactTime_, context, request, response);
}

void Control::Stub::experimental_async::GetTactTime(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TactTime* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTactTime_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetTactTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TactTime* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTactTime_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetTactTime(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TactTime* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTactTime_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetTactTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TactTime* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTactTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TactTime>* Control::Stub::AsyncGetTactTimeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TactTime>::Create(channel_.get(), cq, rpcmethod_GetTactTime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TactTime>* Control::Stub::PrepareAsyncGetTactTimeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TactTime>::Create(channel_.get(), cq, rpcmethod_GetTactTime_, context, request, false);
}

::grpc::Status Control::Stub::Recover(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Recover_, context, request, response);
}

void Control::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, reactor);
}

void Control::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncRecoverRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_Recover_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncRecoverRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_Recover_, context, request, false);
}

::grpc::Status Control::Stub::Reboot(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Reboot_, context, request, response);
}

void Control::Stub::experimental_async::Reboot(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Reboot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Reboot(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, reactor);
}

void Control::Stub::experimental_async::Reboot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncRebootRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_Reboot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncRebootRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_Reboot_, context, request, false);
}

::grpc::Status Control::Stub::SetManualRecovery(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetManualRecovery_, context, request, response);
}

void Control::Stub::experimental_async::SetManualRecovery(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetManualRecovery_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetManualRecovery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetManualRecovery_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetManualRecovery(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetManualRecovery_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetManualRecovery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetManualRecovery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncSetManualRecoveryRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetManualRecovery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncSetManualRecoveryRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetManualRecovery_, context, request, false);
}

::grpc::Status Control::Stub::MoveRecoverJoint(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TargetJ& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveRecoverJoint_, context, request, response);
}

void Control::Stub::experimental_async::MoveRecoverJoint(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TargetJ* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveRecoverJoint_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveRecoverJoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveRecoverJoint_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveRecoverJoint(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TargetJ* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveRecoverJoint_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveRecoverJoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveRecoverJoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveRecoverJointRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TargetJ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveRecoverJoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveRecoverJointRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TargetJ& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveRecoverJoint_, context, request, false);
}

::grpc::Status Control::Stub::SearchProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program& request, ::Nrmk::IndyFramework::ProgramInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SearchProgram_, context, request, response);
}

void Control::Stub::experimental_async::SearchProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program* request, ::Nrmk::IndyFramework::ProgramInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchProgram_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SearchProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::ProgramInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchProgram_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SearchProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program* request, ::Nrmk::IndyFramework::ProgramInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchProgram_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SearchProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::ProgramInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ProgramInfo>* Control::Stub::AsyncSearchProgramRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::ProgramInfo>::Create(channel_.get(), cq, rpcmethod_SearchProgram_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ProgramInfo>* Control::Stub::PrepareAsyncSearchProgramRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::ProgramInfo>::Create(channel_.get(), cq, rpcmethod_SearchProgram_, context, request, false);
}

::grpc::Status Control::Stub::PlayProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PlayProgram_, context, request, response);
}

void Control::Stub::experimental_async::PlayProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlayProgram_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::PlayProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlayProgram_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::PlayProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlayProgram_, context, request, response, reactor);
}

void Control::Stub::experimental_async::PlayProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlayProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncPlayProgramRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_PlayProgram_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncPlayProgramRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_PlayProgram_, context, request, false);
}

::grpc::Status Control::Stub::PauseProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PauseProgram_, context, request, response);
}

void Control::Stub::experimental_async::PauseProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PauseProgram_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::PauseProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PauseProgram_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::PauseProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PauseProgram_, context, request, response, reactor);
}

void Control::Stub::experimental_async::PauseProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PauseProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncPauseProgramRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_PauseProgram_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncPauseProgramRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_PauseProgram_, context, request, false);
}

::grpc::Status Control::Stub::ResumeProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResumeProgram_, context, request, response);
}

void Control::Stub::experimental_async::ResumeProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResumeProgram_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::ResumeProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResumeProgram_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::ResumeProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResumeProgram_, context, request, response, reactor);
}

void Control::Stub::experimental_async::ResumeProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResumeProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncResumeProgramRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_ResumeProgram_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncResumeProgramRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_ResumeProgram_, context, request, false);
}

::grpc::Status Control::Stub::StopProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopProgram_, context, request, response);
}

void Control::Stub::experimental_async::StopProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopProgram_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::StopProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopProgram_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::StopProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopProgram_, context, request, response, reactor);
}

void Control::Stub::experimental_async::StopProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncStopProgramRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_StopProgram_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncStopProgramRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_StopProgram_, context, request, false);
}

::grpc::Status Control::Stub::SendAlarm(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Message& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendAlarm_, context, request, response);
}

void Control::Stub::experimental_async::SendAlarm(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Message* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendAlarm_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SendAlarm(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendAlarm_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SendAlarm(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Message* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendAlarm_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SendAlarm(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendAlarm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::AsyncSendAlarmRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SendAlarm_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::PrepareAsyncSendAlarmRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SendAlarm_, context, request, false);
}

::grpc::Status Control::Stub::SendAnnotation(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Message& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendAnnotation_, context, request, response);
}

void Control::Stub::experimental_async::SendAnnotation(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Message* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendAnnotation_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SendAnnotation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendAnnotation_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SendAnnotation(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Message* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendAnnotation_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SendAnnotation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendAnnotation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::AsyncSendAnnotationRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SendAnnotation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::PrepareAsyncSendAnnotationRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SendAnnotation_, context, request, false);
}

::grpc::Status Control::Stub::PlayTuningProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TuningProgram& request, ::Nrmk::IndyFramework::CollisionThresholds* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PlayTuningProgram_, context, request, response);
}

void Control::Stub::experimental_async::PlayTuningProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TuningProgram* request, ::Nrmk::IndyFramework::CollisionThresholds* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlayTuningProgram_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::PlayTuningProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CollisionThresholds* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlayTuningProgram_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::PlayTuningProgram(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TuningProgram* request, ::Nrmk::IndyFramework::CollisionThresholds* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlayTuningProgram_, context, request, response, reactor);
}

void Control::Stub::experimental_async::PlayTuningProgram(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CollisionThresholds* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlayTuningProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CollisionThresholds>* Control::Stub::AsyncPlayTuningProgramRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TuningProgram& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CollisionThresholds>::Create(channel_.get(), cq, rpcmethod_PlayTuningProgram_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CollisionThresholds>* Control::Stub::PrepareAsyncPlayTuningProgramRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TuningProgram& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CollisionThresholds>::Create(channel_.get(), cq, rpcmethod_PlayTuningProgram_, context, request, false);
}

::grpc::Status Control::Stub::PlayProgramLine(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PlayProgramLine_, context, request, response);
}

void Control::Stub::experimental_async::PlayProgramLine(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlayProgramLine_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::PlayProgramLine(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlayProgramLine_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::PlayProgramLine(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlayProgramLine_, context, request, response, reactor);
}

void Control::Stub::experimental_async::PlayProgramLine(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlayProgramLine_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncPlayProgramLineRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_PlayProgramLine_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncPlayProgramLineRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Program& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_PlayProgramLine_, context, request, false);
}

::grpc::Status Control::Stub::SetModbusVariableNameList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ModbusVariableList& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetModbusVariableNameList_, context, request, response);
}

void Control::Stub::experimental_async::SetModbusVariableNameList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ModbusVariableList* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetModbusVariableNameList_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetModbusVariableNameList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetModbusVariableNameList_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetModbusVariableNameList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ModbusVariableList* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetModbusVariableNameList_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetModbusVariableNameList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetModbusVariableNameList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::AsyncSetModbusVariableNameListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ModbusVariableList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetModbusVariableNameList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::PrepareAsyncSetModbusVariableNameListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ModbusVariableList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetModbusVariableNameList_, context, request, false);
}

::grpc::Status Control::Stub::SetVariableNameList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::AllVars& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetVariableNameList_, context, request, response);
}

void Control::Stub::experimental_async::SetVariableNameList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::AllVars* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetVariableNameList_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetVariableNameList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetVariableNameList_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetVariableNameList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::AllVars* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetVariableNameList_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetVariableNameList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetVariableNameList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::AsyncSetVariableNameListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::AllVars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetVariableNameList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::PrepareAsyncSetVariableNameListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::AllVars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetVariableNameList_, context, request, false);
}

::grpc::Status Control::Stub::GetVariableNameList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::AllVars* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVariableNameList_, context, request, response);
}

void Control::Stub::experimental_async::GetVariableNameList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::AllVars* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVariableNameList_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetVariableNameList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::AllVars* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVariableNameList_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetVariableNameList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::AllVars* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVariableNameList_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetVariableNameList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::AllVars* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVariableNameList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::AllVars>* Control::Stub::AsyncGetVariableNameListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::AllVars>::Create(channel_.get(), cq, rpcmethod_GetVariableNameList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::AllVars>* Control::Stub::PrepareAsyncGetVariableNameListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::AllVars>::Create(channel_.get(), cq, rpcmethod_GetVariableNameList_, context, request, false);
}

::grpc::Status Control::Stub::SetIntVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IntVars& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetIntVariable_, context, request, response);
}

void Control::Stub::experimental_async::SetIntVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IntVars* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetIntVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetIntVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetIntVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetIntVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IntVars* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetIntVariable_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetIntVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetIntVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::AsyncSetIntVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IntVars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetIntVariable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::PrepareAsyncSetIntVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IntVars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetIntVariable_, context, request, false);
}

::grpc::Status Control::Stub::GetIntVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::IntVars* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIntVariable_, context, request, response);
}

void Control::Stub::experimental_async::GetIntVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::IntVars* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetIntVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetIntVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::IntVars* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetIntVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetIntVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::IntVars* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetIntVariable_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetIntVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::IntVars* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetIntVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::IntVars>* Control::Stub::AsyncGetIntVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::IntVars>::Create(channel_.get(), cq, rpcmethod_GetIntVariable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::IntVars>* Control::Stub::PrepareAsyncGetIntVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::IntVars>::Create(channel_.get(), cq, rpcmethod_GetIntVariable_, context, request, false);
}

::grpc::Status Control::Stub::SetModbusVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ModbusVars& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetModbusVariable_, context, request, response);
}

void Control::Stub::experimental_async::SetModbusVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ModbusVars* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetModbusVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetModbusVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetModbusVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetModbusVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ModbusVars* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetModbusVariable_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetModbusVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetModbusVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::AsyncSetModbusVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ModbusVars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetModbusVariable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::PrepareAsyncSetModbusVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ModbusVars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetModbusVariable_, context, request, false);
}

::grpc::Status Control::Stub::GetModbusVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::ModbusVars* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetModbusVariable_, context, request, response);
}

void Control::Stub::experimental_async::GetModbusVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ModbusVars* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetModbusVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetModbusVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::ModbusVars* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetModbusVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetModbusVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ModbusVars* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetModbusVariable_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetModbusVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::ModbusVars* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetModbusVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ModbusVars>* Control::Stub::AsyncGetModbusVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::ModbusVars>::Create(channel_.get(), cq, rpcmethod_GetModbusVariable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ModbusVars>* Control::Stub::PrepareAsyncGetModbusVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::ModbusVars>::Create(channel_.get(), cq, rpcmethod_GetModbusVariable_, context, request, false);
}

::grpc::Status Control::Stub::SetBoolVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::BoolVars& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetBoolVariable_, context, request, response);
}

void Control::Stub::experimental_async::SetBoolVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::BoolVars* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetBoolVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetBoolVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetBoolVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetBoolVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::BoolVars* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetBoolVariable_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetBoolVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetBoolVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::AsyncSetBoolVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::BoolVars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetBoolVariable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::PrepareAsyncSetBoolVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::BoolVars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetBoolVariable_, context, request, false);
}

::grpc::Status Control::Stub::GetBoolVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::BoolVars* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBoolVariable_, context, request, response);
}

void Control::Stub::experimental_async::GetBoolVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::BoolVars* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBoolVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetBoolVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::BoolVars* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBoolVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetBoolVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::BoolVars* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBoolVariable_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetBoolVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::BoolVars* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBoolVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::BoolVars>* Control::Stub::AsyncGetBoolVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::BoolVars>::Create(channel_.get(), cq, rpcmethod_GetBoolVariable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::BoolVars>* Control::Stub::PrepareAsyncGetBoolVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::BoolVars>::Create(channel_.get(), cq, rpcmethod_GetBoolVariable_, context, request, false);
}

::grpc::Status Control::Stub::SetFloatVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FloatVars& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetFloatVariable_, context, request, response);
}

void Control::Stub::experimental_async::SetFloatVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FloatVars* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetFloatVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetFloatVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetFloatVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetFloatVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FloatVars* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetFloatVariable_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetFloatVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetFloatVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::AsyncSetFloatVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FloatVars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetFloatVariable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::PrepareAsyncSetFloatVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FloatVars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetFloatVariable_, context, request, false);
}

::grpc::Status Control::Stub::GetFloatVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::FloatVars* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFloatVariable_, context, request, response);
}

void Control::Stub::experimental_async::GetFloatVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::FloatVars* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFloatVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetFloatVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::FloatVars* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFloatVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetFloatVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::FloatVars* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFloatVariable_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetFloatVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::FloatVars* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFloatVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::FloatVars>* Control::Stub::AsyncGetFloatVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::FloatVars>::Create(channel_.get(), cq, rpcmethod_GetFloatVariable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::FloatVars>* Control::Stub::PrepareAsyncGetFloatVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::FloatVars>::Create(channel_.get(), cq, rpcmethod_GetFloatVariable_, context, request, false);
}

::grpc::Status Control::Stub::SetJPosVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JPosVars& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetJPosVariable_, context, request, response);
}

void Control::Stub::experimental_async::SetJPosVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JPosVars* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetJPosVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetJPosVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetJPosVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetJPosVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JPosVars* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetJPosVariable_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetJPosVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetJPosVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::AsyncSetJPosVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JPosVars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetJPosVariable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::PrepareAsyncSetJPosVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JPosVars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetJPosVariable_, context, request, false);
}

::grpc::Status Control::Stub::GetJPosVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::JPosVars* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetJPosVariable_, context, request, response);
}

void Control::Stub::experimental_async::GetJPosVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::JPosVars* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetJPosVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetJPosVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::JPosVars* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetJPosVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetJPosVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::JPosVars* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetJPosVariable_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetJPosVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::JPosVars* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetJPosVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::JPosVars>* Control::Stub::AsyncGetJPosVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::JPosVars>::Create(channel_.get(), cq, rpcmethod_GetJPosVariable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::JPosVars>* Control::Stub::PrepareAsyncGetJPosVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::JPosVars>::Create(channel_.get(), cq, rpcmethod_GetJPosVariable_, context, request, false);
}

::grpc::Status Control::Stub::SetTPosVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TPosVars& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTPosVariable_, context, request, response);
}

void Control::Stub::experimental_async::SetTPosVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TPosVars* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTPosVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetTPosVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTPosVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetTPosVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TPosVars* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTPosVariable_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetTPosVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTPosVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::AsyncSetTPosVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TPosVars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetTPosVariable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::PrepareAsyncSetTPosVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TPosVars& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_SetTPosVariable_, context, request, false);
}

::grpc::Status Control::Stub::GetTPosVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::TPosVars* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTPosVariable_, context, request, response);
}

void Control::Stub::experimental_async::GetTPosVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TPosVars* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTPosVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetTPosVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TPosVars* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTPosVariable_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetTPosVariable(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TPosVars* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTPosVariable_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetTPosVariable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TPosVars* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTPosVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TPosVars>* Control::Stub::AsyncGetTPosVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TPosVars>::Create(channel_.get(), cq, rpcmethod_GetTPosVariable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TPosVars>* Control::Stub::PrepareAsyncGetTPosVariableRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TPosVars>::Create(channel_.get(), cq, rpcmethod_GetTPosVariable_, context, request, false);
}

::grpc::Status Control::Stub::InverseKinematics(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::InverseKinematicsReq& request, ::Nrmk::IndyFramework::InverseKinematicsRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InverseKinematics_, context, request, response);
}

void Control::Stub::experimental_async::InverseKinematics(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::InverseKinematicsReq* request, ::Nrmk::IndyFramework::InverseKinematicsRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InverseKinematics_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::InverseKinematics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::InverseKinematicsRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InverseKinematics_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::InverseKinematics(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::InverseKinematicsReq* request, ::Nrmk::IndyFramework::InverseKinematicsRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InverseKinematics_, context, request, response, reactor);
}

void Control::Stub::experimental_async::InverseKinematics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::InverseKinematicsRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InverseKinematics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::InverseKinematicsRes>* Control::Stub::AsyncInverseKinematicsRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::InverseKinematicsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::InverseKinematicsRes>::Create(channel_.get(), cq, rpcmethod_InverseKinematics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::InverseKinematicsRes>* Control::Stub::PrepareAsyncInverseKinematicsRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::InverseKinematicsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::InverseKinematicsRes>::Create(channel_.get(), cq, rpcmethod_InverseKinematics_, context, request, false);
}

::grpc::Status Control::Stub::ForwardKinematics(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ForwardKinematicsReq& request, ::Nrmk::IndyFramework::ForwardKinematicsRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ForwardKinematics_, context, request, response);
}

void Control::Stub::experimental_async::ForwardKinematics(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ForwardKinematicsReq* request, ::Nrmk::IndyFramework::ForwardKinematicsRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ForwardKinematics_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::ForwardKinematics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::ForwardKinematicsRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ForwardKinematics_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::ForwardKinematics(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ForwardKinematicsReq* request, ::Nrmk::IndyFramework::ForwardKinematicsRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ForwardKinematics_, context, request, response, reactor);
}

void Control::Stub::experimental_async::ForwardKinematics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::ForwardKinematicsRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ForwardKinematics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ForwardKinematicsRes>* Control::Stub::AsyncForwardKinematicsRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ForwardKinematicsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::ForwardKinematicsRes>::Create(channel_.get(), cq, rpcmethod_ForwardKinematics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ForwardKinematicsRes>* Control::Stub::PrepareAsyncForwardKinematicsRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ForwardKinematicsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::ForwardKinematicsRes>::Create(channel_.get(), cq, rpcmethod_ForwardKinematics_, context, request, false);
}

::grpc::Status Control::Stub::CheckAproachRetractValid(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CheckAproachRetractValidReq& request, ::Nrmk::IndyFramework::CheckAproachRetractValidRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckAproachRetractValid_, context, request, response);
}

void Control::Stub::experimental_async::CheckAproachRetractValid(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CheckAproachRetractValidReq* request, ::Nrmk::IndyFramework::CheckAproachRetractValidRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckAproachRetractValid_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::CheckAproachRetractValid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CheckAproachRetractValidRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckAproachRetractValid_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::CheckAproachRetractValid(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CheckAproachRetractValidReq* request, ::Nrmk::IndyFramework::CheckAproachRetractValidRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckAproachRetractValid_, context, request, response, reactor);
}

void Control::Stub::experimental_async::CheckAproachRetractValid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CheckAproachRetractValidRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckAproachRetractValid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CheckAproachRetractValidRes>* Control::Stub::AsyncCheckAproachRetractValidRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CheckAproachRetractValidReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CheckAproachRetractValidRes>::Create(channel_.get(), cq, rpcmethod_CheckAproachRetractValid_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CheckAproachRetractValidRes>* Control::Stub::PrepareAsyncCheckAproachRetractValidRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CheckAproachRetractValidReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CheckAproachRetractValidRes>::Create(channel_.get(), cq, rpcmethod_CheckAproachRetractValid_, context, request, false);
}

::grpc::Status Control::Stub::GetPalletPointList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::GetPalletPointListReq& request, ::Nrmk::IndyFramework::GetPalletPointListRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPalletPointList_, context, request, response);
}

void Control::Stub::experimental_async::GetPalletPointList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::GetPalletPointListReq* request, ::Nrmk::IndyFramework::GetPalletPointListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPalletPointList_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetPalletPointList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::GetPalletPointListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPalletPointList_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetPalletPointList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::GetPalletPointListReq* request, ::Nrmk::IndyFramework::GetPalletPointListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPalletPointList_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetPalletPointList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::GetPalletPointListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPalletPointList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::GetPalletPointListRes>* Control::Stub::AsyncGetPalletPointListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::GetPalletPointListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::GetPalletPointListRes>::Create(channel_.get(), cq, rpcmethod_GetPalletPointList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::GetPalletPointListRes>* Control::Stub::PrepareAsyncGetPalletPointListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::GetPalletPointListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::GetPalletPointListRes>::Create(channel_.get(), cq, rpcmethod_GetPalletPointList_, context, request, false);
}

::grpc::Status Control::Stub::CalculateRelativePose(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CalculateRelativePoseReq& request, ::Nrmk::IndyFramework::CalculateRelativePoseRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CalculateRelativePose_, context, request, response);
}

void Control::Stub::experimental_async::CalculateRelativePose(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CalculateRelativePoseReq* request, ::Nrmk::IndyFramework::CalculateRelativePoseRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CalculateRelativePose_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::CalculateRelativePose(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CalculateRelativePoseRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CalculateRelativePose_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::CalculateRelativePose(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CalculateRelativePoseReq* request, ::Nrmk::IndyFramework::CalculateRelativePoseRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CalculateRelativePose_, context, request, response, reactor);
}

void Control::Stub::experimental_async::CalculateRelativePose(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CalculateRelativePoseRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CalculateRelativePose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CalculateRelativePoseRes>* Control::Stub::AsyncCalculateRelativePoseRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CalculateRelativePoseReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CalculateRelativePoseRes>::Create(channel_.get(), cq, rpcmethod_CalculateRelativePose_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CalculateRelativePoseRes>* Control::Stub::PrepareAsyncCalculateRelativePoseRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CalculateRelativePoseReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CalculateRelativePoseRes>::Create(channel_.get(), cq, rpcmethod_CalculateRelativePose_, context, request, false);
}

::grpc::Status Control::Stub::CalculateCurrentPoseRel(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CalculateCurrentPoseRelReq& request, ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CalculateCurrentPoseRel_, context, request, response);
}

void Control::Stub::experimental_async::CalculateCurrentPoseRel(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CalculateCurrentPoseRelReq* request, ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CalculateCurrentPoseRel_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::CalculateCurrentPoseRel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CalculateCurrentPoseRel_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::CalculateCurrentPoseRel(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CalculateCurrentPoseRelReq* request, ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CalculateCurrentPoseRel_, context, request, response, reactor);
}

void Control::Stub::experimental_async::CalculateCurrentPoseRel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CalculateCurrentPoseRel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes>* Control::Stub::AsyncCalculateCurrentPoseRelRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CalculateCurrentPoseRelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes>::Create(channel_.get(), cq, rpcmethod_CalculateCurrentPoseRel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes>* Control::Stub::PrepareAsyncCalculateCurrentPoseRelRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CalculateCurrentPoseRelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes>::Create(channel_.get(), cq, rpcmethod_CalculateCurrentPoseRel_, context, request, false);
}

::grpc::Status Control::Stub::PingFromConty(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PingFromConty_, context, request, response);
}

void Control::Stub::experimental_async::PingFromConty(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PingFromConty_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::PingFromConty(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PingFromConty_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::PingFromConty(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PingFromConty_, context, request, response, reactor);
}

void Control::Stub::experimental_async::PingFromConty(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PingFromConty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::AsyncPingFromContyRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_PingFromConty_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* Control::Stub::PrepareAsyncPingFromContyRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Empty>::Create(channel_.get(), cq, rpcmethod_PingFromConty_, context, request, false);
}

::grpc::Status Control::Stub::GetTeleOpDevice(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::TeleOpDevice* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTeleOpDevice_, context, request, response);
}

void Control::Stub::experimental_async::GetTeleOpDevice(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleOpDevice* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpDevice_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetTeleOpDevice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TeleOpDevice* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpDevice_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetTeleOpDevice(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleOpDevice* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpDevice_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetTeleOpDevice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TeleOpDevice* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TeleOpDevice>* Control::Stub::AsyncGetTeleOpDeviceRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TeleOpDevice>::Create(channel_.get(), cq, rpcmethod_GetTeleOpDevice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TeleOpDevice>* Control::Stub::PrepareAsyncGetTeleOpDeviceRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TeleOpDevice>::Create(channel_.get(), cq, rpcmethod_GetTeleOpDevice_, context, request, false);
}

::grpc::Status Control::Stub::GetTeleOpState(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::TeleOpState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTeleOpState_, context, request, response);
}

void Control::Stub::experimental_async::GetTeleOpState(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleOpState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpState_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetTeleOpState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TeleOpState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpState_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetTeleOpState(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleOpState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpState_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetTeleOpState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TeleOpState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TeleOpState>* Control::Stub::AsyncGetTeleOpStateRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TeleOpState>::Create(channel_.get(), cq, rpcmethod_GetTeleOpState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TeleOpState>* Control::Stub::PrepareAsyncGetTeleOpStateRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TeleOpState>::Create(channel_.get(), cq, rpcmethod_GetTeleOpState_, context, request, false);
}

::grpc::Status Control::Stub::ConnectTeleOpDevice(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpDevice& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ConnectTeleOpDevice_, context, request, response);
}

void Control::Stub::experimental_async::ConnectTeleOpDevice(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpDevice* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConnectTeleOpDevice_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::ConnectTeleOpDevice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConnectTeleOpDevice_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::ConnectTeleOpDevice(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpDevice* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ConnectTeleOpDevice_, context, request, response, reactor);
}

void Control::Stub::experimental_async::ConnectTeleOpDevice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ConnectTeleOpDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncConnectTeleOpDeviceRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpDevice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_ConnectTeleOpDevice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncConnectTeleOpDeviceRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpDevice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_ConnectTeleOpDevice_, context, request, false);
}

::grpc::Status Control::Stub::DisConnectTeleOpDevice(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DisConnectTeleOpDevice_, context, request, response);
}

void Control::Stub::experimental_async::DisConnectTeleOpDevice(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DisConnectTeleOpDevice_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::DisConnectTeleOpDevice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DisConnectTeleOpDevice_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::DisConnectTeleOpDevice(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DisConnectTeleOpDevice_, context, request, response, reactor);
}

void Control::Stub::experimental_async::DisConnectTeleOpDevice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DisConnectTeleOpDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncDisConnectTeleOpDeviceRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_DisConnectTeleOpDevice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncDisConnectTeleOpDeviceRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_DisConnectTeleOpDevice_, context, request, false);
}

::grpc::Status Control::Stub::ReadTeleOpInput(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::TeleP* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReadTeleOpInput_, context, request, response);
}

void Control::Stub::experimental_async::ReadTeleOpInput(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReadTeleOpInput_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::ReadTeleOpInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TeleP* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReadTeleOpInput_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::ReadTeleOpInput(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReadTeleOpInput_, context, request, response, reactor);
}

void Control::Stub::experimental_async::ReadTeleOpInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TeleP* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReadTeleOpInput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TeleP>* Control::Stub::AsyncReadTeleOpInputRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TeleP>::Create(channel_.get(), cq, rpcmethod_ReadTeleOpInput_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TeleP>* Control::Stub::PrepareAsyncReadTeleOpInputRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TeleP>::Create(channel_.get(), cq, rpcmethod_ReadTeleOpInput_, context, request, false);
}

::grpc::Status Control::Stub::StartTeleOp(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpState& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartTeleOp_, context, request, response);
}

void Control::Stub::experimental_async::StartTeleOp(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpState* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartTeleOp_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::StartTeleOp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartTeleOp_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::StartTeleOp(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpState* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartTeleOp_, context, request, response, reactor);
}

void Control::Stub::experimental_async::StartTeleOp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartTeleOp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncStartTeleOpRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_StartTeleOp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncStartTeleOpRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_StartTeleOp_, context, request, false);
}

::grpc::Status Control::Stub::StopTeleOp(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopTeleOp_, context, request, response);
}

void Control::Stub::experimental_async::StopTeleOp(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopTeleOp_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::StopTeleOp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopTeleOp_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::StopTeleOp(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopTeleOp_, context, request, response, reactor);
}

void Control::Stub::experimental_async::StopTeleOp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopTeleOp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncStopTeleOpRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_StopTeleOp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncStopTeleOpRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_StopTeleOp_, context, request, false);
}

::grpc::Status Control::Stub::SetPlayRate(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TelePlayRate& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetPlayRate_, context, request, response);
}

void Control::Stub::experimental_async::SetPlayRate(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TelePlayRate* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPlayRate_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetPlayRate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPlayRate_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetPlayRate(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TelePlayRate* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPlayRate_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetPlayRate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPlayRate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncSetPlayRateRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TelePlayRate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetPlayRate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncSetPlayRateRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TelePlayRate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetPlayRate_, context, request, false);
}

::grpc::Status Control::Stub::GetPlayRate(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::TelePlayRate* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPlayRate_, context, request, response);
}

void Control::Stub::experimental_async::GetPlayRate(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TelePlayRate* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPlayRate_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetPlayRate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TelePlayRate* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPlayRate_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetPlayRate(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TelePlayRate* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPlayRate_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetPlayRate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TelePlayRate* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPlayRate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TelePlayRate>* Control::Stub::AsyncGetPlayRateRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TelePlayRate>::Create(channel_.get(), cq, rpcmethod_GetPlayRate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TelePlayRate>* Control::Stub::PrepareAsyncGetPlayRateRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TelePlayRate>::Create(channel_.get(), cq, rpcmethod_GetPlayRate_, context, request, false);
}

::grpc::Status Control::Stub::GetTeleFileList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::TeleOpFileList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTeleFileList_, context, request, response);
}

void Control::Stub::experimental_async::GetTeleFileList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleOpFileList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTeleFileList_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetTeleFileList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TeleOpFileList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTeleFileList_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetTeleFileList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleOpFileList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTeleFileList_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetTeleFileList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TeleOpFileList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTeleFileList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TeleOpFileList>* Control::Stub::AsyncGetTeleFileListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TeleOpFileList>::Create(channel_.get(), cq, rpcmethod_GetTeleFileList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TeleOpFileList>* Control::Stub::PrepareAsyncGetTeleFileListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TeleOpFileList>::Create(channel_.get(), cq, rpcmethod_GetTeleFileList_, context, request, false);
}

::grpc::Status Control::Stub::SaveTeleMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SaveTeleMotion_, context, request, response);
}

void Control::Stub::experimental_async::SaveTeleMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SaveTeleMotion_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SaveTeleMotion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SaveTeleMotion_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SaveTeleMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SaveTeleMotion_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SaveTeleMotion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SaveTeleMotion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncSaveTeleMotionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SaveTeleMotion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncSaveTeleMotionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SaveTeleMotion_, context, request, false);
}

::grpc::Status Control::Stub::LoadTeleMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoadTeleMotion_, context, request, response);
}

void Control::Stub::experimental_async::LoadTeleMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadTeleMotion_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::LoadTeleMotion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadTeleMotion_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::LoadTeleMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadTeleMotion_, context, request, response, reactor);
}

void Control::Stub::experimental_async::LoadTeleMotion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadTeleMotion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncLoadTeleMotionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_LoadTeleMotion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncLoadTeleMotionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_LoadTeleMotion_, context, request, false);
}

::grpc::Status Control::Stub::DeleteTeleMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteTeleMotion_, context, request, response);
}

void Control::Stub::experimental_async::DeleteTeleMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteTeleMotion_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::DeleteTeleMotion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteTeleMotion_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::DeleteTeleMotion(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteTeleMotion_, context, request, response, reactor);
}

void Control::Stub::experimental_async::DeleteTeleMotion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteTeleMotion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncDeleteTeleMotionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_DeleteTeleMotion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncDeleteTeleMotionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_DeleteTeleMotion_, context, request, false);
}

::grpc::Status Control::Stub::EnableTeleKey(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EnableTeleKey_, context, request, response);
}

void Control::Stub::experimental_async::EnableTeleKey(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EnableTeleKey_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::EnableTeleKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EnableTeleKey_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::EnableTeleKey(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EnableTeleKey_, context, request, response, reactor);
}

void Control::Stub::experimental_async::EnableTeleKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EnableTeleKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncEnableTeleKeyRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_EnableTeleKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncEnableTeleKeyRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::State& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_EnableTeleKey_, context, request, false);
}

::grpc::Status Control::Stub::MoveTeleJ(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTeleJReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveTeleJ_, context, request, response);
}

void Control::Stub::experimental_async::MoveTeleJ(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTeleJReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveTeleJ_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveTeleJ(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveTeleJ_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveTeleJ(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTeleJReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveTeleJ_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveTeleJ(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveTeleJ_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveTeleJRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTeleJReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveTeleJ_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveTeleJRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTeleJReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveTeleJ_, context, request, false);
}

::grpc::Status Control::Stub::MoveTeleL(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTeleLReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveTeleL_, context, request, response);
}

void Control::Stub::experimental_async::MoveTeleL(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTeleLReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveTeleL_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveTeleL(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveTeleL_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveTeleL(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTeleLReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveTeleL_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveTeleL(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveTeleL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveTeleLRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTeleLReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveTeleL_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveTeleLRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveTeleLReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveTeleL_, context, request, false);
}

::grpc::Status Control::Stub::MoveLF(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLFReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveLF_, context, request, response);
}

void Control::Stub::experimental_async::MoveLF(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLFReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveLF_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveLF(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveLF_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveLF(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLFReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveLF_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveLF(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveLF_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::AsyncMoveLFRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLFReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveLF_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Control::Stub::PrepareAsyncMoveLFRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MoveLFReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_MoveLF_, context, request, false);
}

::grpc::Status Control::Stub::GetTransformedFTSensorData(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::TransformedFTSensorData* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTransformedFTSensorData_, context, request, response);
}

void Control::Stub::experimental_async::GetTransformedFTSensorData(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TransformedFTSensorData* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTransformedFTSensorData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetTransformedFTSensorData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TransformedFTSensorData* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTransformedFTSensorData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetTransformedFTSensorData(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TransformedFTSensorData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTransformedFTSensorData_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetTransformedFTSensorData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TransformedFTSensorData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTransformedFTSensorData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TransformedFTSensorData>* Control::Stub::AsyncGetTransformedFTSensorDataRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TransformedFTSensorData>::Create(channel_.get(), cq, rpcmethod_GetTransformedFTSensorData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TransformedFTSensorData>* Control::Stub::PrepareAsyncGetTransformedFTSensorDataRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TransformedFTSensorData>::Create(channel_.get(), cq, rpcmethod_GetTransformedFTSensorData_, context, request, false);
}

Control::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ControlInfo>(
          std::mem_fn(&Control::Service::GetControlInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::SDKLicenseInfo, ::Nrmk::IndyFramework::SDKLicenseResp>(
          std::mem_fn(&Control::Service::ActivateIndySDK), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::MoveJReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveJ), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::MoveJTReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveJT), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::MoveLReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveL), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::MoveLTReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveLT), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::MoveCReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveC), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::MoveCTReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveCT), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::MoveJointTrajReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveJointTraj), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::MoveTaskTrajReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveTaskTraj), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::MoveConveyorReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveConveyor), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::WaitIOReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::WaitIO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::WaitTimeReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::WaitTime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::WaitProgressReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::WaitProgress), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::WaitTrajReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::WaitTraj), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::WaitRadiusReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::WaitRadius), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::MoveJCondReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveJCond), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::MoveAxisReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveLinearAxis), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::StopCat, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::StopMotion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::PauseCat, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::PauseMotion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::State, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::SetDirectTeaching), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::State, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::SetSimulationMode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::IntMode, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::SetCustomControlMode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::IntMode>(
          std::mem_fn(&Control::Service::GetCustomControlMode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::State, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::SetFrictionCompensation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::State>(
          std::mem_fn(&Control::Service::GetFrictionCompensationState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::TactTime, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::SetTactTime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::TactTime>(
          std::mem_fn(&Control::Service::GetTactTime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::Recover), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::Reboot), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::State, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::SetManualRecovery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::TargetJ, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveRecoverJoint), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Program, ::Nrmk::IndyFramework::ProgramInfo>(
          std::mem_fn(&Control::Service::SearchProgram), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Program, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::PlayProgram), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::PauseProgram), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::ResumeProgram), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::StopProgram), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Message, ::Nrmk::IndyFramework::Empty>(
          std::mem_fn(&Control::Service::SendAlarm), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Message, ::Nrmk::IndyFramework::Empty>(
          std::mem_fn(&Control::Service::SendAnnotation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::TuningProgram, ::Nrmk::IndyFramework::CollisionThresholds>(
          std::mem_fn(&Control::Service::PlayTuningProgram), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Program, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::PlayProgramLine), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::ModbusVariableList, ::Nrmk::IndyFramework::Empty>(
          std::mem_fn(&Control::Service::SetModbusVariableNameList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::AllVars, ::Nrmk::IndyFramework::Empty>(
          std::mem_fn(&Control::Service::SetVariableNameList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::AllVars>(
          std::mem_fn(&Control::Service::GetVariableNameList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::IntVars, ::Nrmk::IndyFramework::Empty>(
          std::mem_fn(&Control::Service::SetIntVariable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::IntVars>(
          std::mem_fn(&Control::Service::GetIntVariable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::ModbusVars, ::Nrmk::IndyFramework::Empty>(
          std::mem_fn(&Control::Service::SetModbusVariable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ModbusVars>(
          std::mem_fn(&Control::Service::GetModbusVariable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::BoolVars, ::Nrmk::IndyFramework::Empty>(
          std::mem_fn(&Control::Service::SetBoolVariable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::BoolVars>(
          std::mem_fn(&Control::Service::GetBoolVariable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::FloatVars, ::Nrmk::IndyFramework::Empty>(
          std::mem_fn(&Control::Service::SetFloatVariable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::FloatVars>(
          std::mem_fn(&Control::Service::GetFloatVariable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::JPosVars, ::Nrmk::IndyFramework::Empty>(
          std::mem_fn(&Control::Service::SetJPosVariable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::JPosVars>(
          std::mem_fn(&Control::Service::GetJPosVariable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::TPosVars, ::Nrmk::IndyFramework::Empty>(
          std::mem_fn(&Control::Service::SetTPosVariable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::TPosVars>(
          std::mem_fn(&Control::Service::GetTPosVariable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::InverseKinematicsReq, ::Nrmk::IndyFramework::InverseKinematicsRes>(
          std::mem_fn(&Control::Service::InverseKinematics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::ForwardKinematicsReq, ::Nrmk::IndyFramework::ForwardKinematicsRes>(
          std::mem_fn(&Control::Service::ForwardKinematics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::CheckAproachRetractValidReq, ::Nrmk::IndyFramework::CheckAproachRetractValidRes>(
          std::mem_fn(&Control::Service::CheckAproachRetractValid), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::GetPalletPointListReq, ::Nrmk::IndyFramework::GetPalletPointListRes>(
          std::mem_fn(&Control::Service::GetPalletPointList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[60],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::CalculateRelativePoseReq, ::Nrmk::IndyFramework::CalculateRelativePoseRes>(
          std::mem_fn(&Control::Service::CalculateRelativePose), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[61],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::CalculateCurrentPoseRelReq, ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes>(
          std::mem_fn(&Control::Service::CalculateCurrentPoseRel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[62],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::Empty>(
          std::mem_fn(&Control::Service::PingFromConty), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[63],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::TeleOpDevice>(
          std::mem_fn(&Control::Service::GetTeleOpDevice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[64],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::TeleOpState>(
          std::mem_fn(&Control::Service::GetTeleOpState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[65],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::TeleOpDevice, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::ConnectTeleOpDevice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[66],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::DisConnectTeleOpDevice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[67],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::TeleP>(
          std::mem_fn(&Control::Service::ReadTeleOpInput), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[68],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::TeleOpState, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::StartTeleOp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[69],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::StopTeleOp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[70],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::TelePlayRate, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::SetPlayRate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[71],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::TelePlayRate>(
          std::mem_fn(&Control::Service::GetPlayRate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[72],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::TeleOpFileList>(
          std::mem_fn(&Control::Service::GetTeleFileList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[73],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::TeleFileReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::SaveTeleMotion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[74],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::TeleFileReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::LoadTeleMotion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[75],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::TeleFileReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::DeleteTeleMotion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[76],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::State, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::EnableTeleKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[77],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::MoveTeleJReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveTeleJ), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[78],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::MoveTeleLReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveTeleL), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[79],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::MoveLFReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Control::Service::MoveLF), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[80],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::TransformedFTSensorData>(
          std::mem_fn(&Control::Service::GetTransformedFTSensorData), this)));
}

Control::Service::~Service() {
}

::grpc::Status Control::Service::GetControlInfo(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ControlInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::ActivateIndySDK(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::SDKLicenseInfo* request, ::Nrmk::IndyFramework::SDKLicenseResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveJ(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MoveJReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveJT(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MoveJTReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveL(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MoveLReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveLT(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MoveLTReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveC(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MoveCReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveCT(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MoveCTReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveJointTraj(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MoveJointTrajReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveTaskTraj(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MoveTaskTrajReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveConveyor(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MoveConveyorReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::WaitIO(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::WaitIOReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::WaitTime(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::WaitTimeReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::WaitProgress(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::WaitProgressReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::WaitTraj(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::WaitTrajReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::WaitRadius(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::WaitRadiusReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveJCond(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MoveJCondReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveLinearAxis(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MoveAxisReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::StopMotion(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::StopCat* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::PauseMotion(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::PauseCat* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetDirectTeaching(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetSimulationMode(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetCustomControlMode(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::IntMode* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetCustomControlMode(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::IntMode* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetFrictionCompensation(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetFrictionCompensationState(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::State* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetTactTime(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::TactTime* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetTactTime(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TactTime* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::Recover(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::Reboot(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetManualRecovery(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveRecoverJoint(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::TargetJ* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SearchProgram(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Program* request, ::Nrmk::IndyFramework::ProgramInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::PlayProgram(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Program* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::PauseProgram(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::ResumeProgram(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::StopProgram(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SendAlarm(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Message* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SendAnnotation(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Message* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::PlayTuningProgram(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::TuningProgram* request, ::Nrmk::IndyFramework::CollisionThresholds* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::PlayProgramLine(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Program* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetModbusVariableNameList(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ModbusVariableList* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetVariableNameList(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::AllVars* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetVariableNameList(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::AllVars* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetIntVariable(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::IntVars* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetIntVariable(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::IntVars* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetModbusVariable(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ModbusVars* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetModbusVariable(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ModbusVars* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetBoolVariable(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::BoolVars* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetBoolVariable(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::BoolVars* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetFloatVariable(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::FloatVars* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetFloatVariable(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::FloatVars* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetJPosVariable(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::JPosVars* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetJPosVariable(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::JPosVars* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetTPosVariable(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::TPosVars* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetTPosVariable(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TPosVars* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::InverseKinematics(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::InverseKinematicsReq* request, ::Nrmk::IndyFramework::InverseKinematicsRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::ForwardKinematics(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ForwardKinematicsReq* request, ::Nrmk::IndyFramework::ForwardKinematicsRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::CheckAproachRetractValid(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::CheckAproachRetractValidReq* request, ::Nrmk::IndyFramework::CheckAproachRetractValidRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetPalletPointList(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::GetPalletPointListReq* request, ::Nrmk::IndyFramework::GetPalletPointListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::CalculateRelativePose(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::CalculateRelativePoseReq* request, ::Nrmk::IndyFramework::CalculateRelativePoseRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::CalculateCurrentPoseRel(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::CalculateCurrentPoseRelReq* request, ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::PingFromConty(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetTeleOpDevice(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleOpDevice* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetTeleOpState(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleOpState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::ConnectTeleOpDevice(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::TeleOpDevice* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::DisConnectTeleOpDevice(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::ReadTeleOpInput(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleP* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::StartTeleOp(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::TeleOpState* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::StopTeleOp(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetPlayRate(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::TelePlayRate* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetPlayRate(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TelePlayRate* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetTeleFileList(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleOpFileList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SaveTeleMotion(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::TeleFileReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::LoadTeleMotion(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::TeleFileReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::DeleteTeleMotion(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::TeleFileReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::EnableTeleKey(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::State* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveTeleJ(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MoveTeleJReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveTeleL(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MoveTeleLReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveLF(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MoveLFReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetTransformedFTSensorData(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TransformedFTSensorData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Nrmk
}  // namespace IndyFramework

