// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: config.proto

#include "config.pb.h"
#include "config.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Nrmk {
namespace IndyFramework {

static const char* Config_method_names[] = {
  "/Nrmk.IndyFramework.Config/GetRefFrame",
  "/Nrmk.IndyFramework.Config/SetRefFrame",
  "/Nrmk.IndyFramework.Config/SetRefFramePlanar",
  "/Nrmk.IndyFramework.Config/SetToolFrame",
  "/Nrmk.IndyFramework.Config/SetSpeedRatio",
  "/Nrmk.IndyFramework.Config/SetDIConfigList",
  "/Nrmk.IndyFramework.Config/GetDIConfigList",
  "/Nrmk.IndyFramework.Config/SetDOConfigList",
  "/Nrmk.IndyFramework.Config/GetDOConfigList",
  "/Nrmk.IndyFramework.Config/SetHomePosition",
  "/Nrmk.IndyFramework.Config/GetHomePosition",
  "/Nrmk.IndyFramework.Config/GetPackPosition",
  "/Nrmk.IndyFramework.Config/SetAutoServoOff",
  "/Nrmk.IndyFramework.Config/GetAutoServoOff",
  "/Nrmk.IndyFramework.Config/SetJointControlGain",
  "/Nrmk.IndyFramework.Config/GetJointControlGain",
  "/Nrmk.IndyFramework.Config/SetTaskControlGain",
  "/Nrmk.IndyFramework.Config/GetTaskControlGain",
  "/Nrmk.IndyFramework.Config/SetImpedanceControlGain",
  "/Nrmk.IndyFramework.Config/GetImpedanceControlGain",
  "/Nrmk.IndyFramework.Config/SetForceControlGain",
  "/Nrmk.IndyFramework.Config/GetForceControlGain",
  "/Nrmk.IndyFramework.Config/SetTestControlGain",
  "/Nrmk.IndyFramework.Config/GetTestControlGain",
  "/Nrmk.IndyFramework.Config/SetCustomControlGain",
  "/Nrmk.IndyFramework.Config/GetCustomControlGain",
  "/Nrmk.IndyFramework.Config/SetNewControllerTestOnOff",
  "/Nrmk.IndyFramework.Config/GetNewControllerTestOnOffState",
  "/Nrmk.IndyFramework.Config/SetFrictionComp",
  "/Nrmk.IndyFramework.Config/GetFrictionComp",
  "/Nrmk.IndyFramework.Config/SetMountPos",
  "/Nrmk.IndyFramework.Config/GetMountPos",
  "/Nrmk.IndyFramework.Config/SetToolProperty",
  "/Nrmk.IndyFramework.Config/GetToolProperty",
  "/Nrmk.IndyFramework.Config/SetCollSensLevel",
  "/Nrmk.IndyFramework.Config/GetCollSensLevel",
  "/Nrmk.IndyFramework.Config/SetCollSensParam",
  "/Nrmk.IndyFramework.Config/GetCollSensParam",
  "/Nrmk.IndyFramework.Config/SetCollPolicy",
  "/Nrmk.IndyFramework.Config/GetCollPolicy",
  "/Nrmk.IndyFramework.Config/SetSafetyLimits",
  "/Nrmk.IndyFramework.Config/GetSafetyLimits",
  "/Nrmk.IndyFramework.Config/SetSafetyStopConfig",
  "/Nrmk.IndyFramework.Config/GetSafetyStopConfig",
  "/Nrmk.IndyFramework.Config/GetReducedRatio",
  "/Nrmk.IndyFramework.Config/GetReducedSpeed",
  "/Nrmk.IndyFramework.Config/SetReducedSpeed",
  "/Nrmk.IndyFramework.Config/SetFTSensorConfig",
  "/Nrmk.IndyFramework.Config/GetFTSensorConfig",
  "/Nrmk.IndyFramework.Config/SetTeleOpParams",
  "/Nrmk.IndyFramework.Config/GetTeleOpParams",
  "/Nrmk.IndyFramework.Config/GetKinematicsParams",
};

std::unique_ptr< Config::Stub> Config::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Config::Stub> stub(new Config::Stub(channel));
  return stub;
}

Config::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetRefFrame_(Config_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRefFrame_(Config_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRefFramePlanar_(Config_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetToolFrame_(Config_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSpeedRatio_(Config_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDIConfigList_(Config_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDIConfigList_(Config_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDOConfigList_(Config_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDOConfigList_(Config_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetHomePosition_(Config_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHomePosition_(Config_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPackPosition_(Config_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAutoServoOff_(Config_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAutoServoOff_(Config_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetJointControlGain_(Config_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointControlGain_(Config_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTaskControlGain_(Config_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTaskControlGain_(Config_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetImpedanceControlGain_(Config_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImpedanceControlGain_(Config_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetForceControlGain_(Config_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetForceControlGain_(Config_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTestControlGain_(Config_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTestControlGain_(Config_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCustomControlGain_(Config_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCustomControlGain_(Config_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNewControllerTestOnOff_(Config_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNewControllerTestOnOffState_(Config_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFrictionComp_(Config_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFrictionComp_(Config_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMountPos_(Config_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMountPos_(Config_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetToolProperty_(Config_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetToolProperty_(Config_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCollSensLevel_(Config_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCollSensLevel_(Config_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCollSensParam_(Config_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCollSensParam_(Config_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCollPolicy_(Config_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCollPolicy_(Config_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSafetyLimits_(Config_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSafetyLimits_(Config_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSafetyStopConfig_(Config_method_names[42], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSafetyStopConfig_(Config_method_names[43], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReducedRatio_(Config_method_names[44], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReducedSpeed_(Config_method_names[45], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetReducedSpeed_(Config_method_names[46], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFTSensorConfig_(Config_method_names[47], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFTSensorConfig_(Config_method_names[48], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTeleOpParams_(Config_method_names[49], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTeleOpParams_(Config_method_names[50], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetKinematicsParams_(Config_method_names[51], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Config::Stub::GetRefFrame(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::Frame* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRefFrame_, context, request, response);
}

void Config::Stub::experimental_async::GetRefFrame(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Frame* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRefFrame_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetRefFrame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Frame* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRefFrame_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetRefFrame(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Frame* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRefFrame_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetRefFrame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Frame* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRefFrame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Frame>* Config::Stub::AsyncGetRefFrameRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Frame>::Create(channel_.get(), cq, rpcmethod_GetRefFrame_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Frame>* Config::Stub::PrepareAsyncGetRefFrameRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Frame>::Create(channel_.get(), cq, rpcmethod_GetRefFrame_, context, request, false);
}

::grpc::Status Config::Stub::SetRefFrame(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Frame& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRefFrame_, context, request, response);
}

void Config::Stub::experimental_async::SetRefFrame(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Frame* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRefFrame_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetRefFrame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRefFrame_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetRefFrame(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Frame* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRefFrame_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetRefFrame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRefFrame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetRefFrameRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Frame& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetRefFrame_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetRefFrameRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Frame& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetRefFrame_, context, request, false);
}

::grpc::Status Config::Stub::SetRefFramePlanar(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::PlanarFrame& request, ::Nrmk::IndyFramework::FrameResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRefFramePlanar_, context, request, response);
}

void Config::Stub::experimental_async::SetRefFramePlanar(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::PlanarFrame* request, ::Nrmk::IndyFramework::FrameResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRefFramePlanar_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetRefFramePlanar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::FrameResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRefFramePlanar_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetRefFramePlanar(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::PlanarFrame* request, ::Nrmk::IndyFramework::FrameResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRefFramePlanar_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetRefFramePlanar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::FrameResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRefFramePlanar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::FrameResult>* Config::Stub::AsyncSetRefFramePlanarRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::PlanarFrame& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::FrameResult>::Create(channel_.get(), cq, rpcmethod_SetRefFramePlanar_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::FrameResult>* Config::Stub::PrepareAsyncSetRefFramePlanarRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::PlanarFrame& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::FrameResult>::Create(channel_.get(), cq, rpcmethod_SetRefFramePlanar_, context, request, false);
}

::grpc::Status Config::Stub::SetToolFrame(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Frame& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetToolFrame_, context, request, response);
}

void Config::Stub::experimental_async::SetToolFrame(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Frame* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetToolFrame_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetToolFrame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetToolFrame_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetToolFrame(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Frame* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetToolFrame_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetToolFrame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetToolFrame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetToolFrameRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Frame& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetToolFrame_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetToolFrameRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Frame& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetToolFrame_, context, request, false);
}

::grpc::Status Config::Stub::SetSpeedRatio(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Ratio& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSpeedRatio_, context, request, response);
}

void Config::Stub::experimental_async::SetSpeedRatio(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Ratio* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSpeedRatio_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetSpeedRatio(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSpeedRatio_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetSpeedRatio(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Ratio* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSpeedRatio_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetSpeedRatio(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSpeedRatio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetSpeedRatioRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Ratio& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetSpeedRatio_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetSpeedRatioRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Ratio& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetSpeedRatio_, context, request, false);
}

::grpc::Status Config::Stub::SetDIConfigList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIConfigList& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetDIConfigList_, context, request, response);
}

void Config::Stub::experimental_async::SetDIConfigList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIConfigList* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDIConfigList_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetDIConfigList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDIConfigList_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetDIConfigList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIConfigList* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDIConfigList_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetDIConfigList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDIConfigList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetDIConfigListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIConfigList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetDIConfigList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetDIConfigListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIConfigList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetDIConfigList_, context, request, false);
}

::grpc::Status Config::Stub::GetDIConfigList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::DIConfigList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDIConfigList_, context, request, response);
}

void Config::Stub::experimental_async::GetDIConfigList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::DIConfigList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDIConfigList_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetDIConfigList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::DIConfigList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDIConfigList_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetDIConfigList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::DIConfigList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDIConfigList_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetDIConfigList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::DIConfigList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDIConfigList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::DIConfigList>* Config::Stub::AsyncGetDIConfigListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::DIConfigList>::Create(channel_.get(), cq, rpcmethod_GetDIConfigList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::DIConfigList>* Config::Stub::PrepareAsyncGetDIConfigListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::DIConfigList>::Create(channel_.get(), cq, rpcmethod_GetDIConfigList_, context, request, false);
}

::grpc::Status Config::Stub::SetDOConfigList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DOConfigList& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetDOConfigList_, context, request, response);
}

void Config::Stub::experimental_async::SetDOConfigList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DOConfigList* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDOConfigList_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetDOConfigList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDOConfigList_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetDOConfigList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DOConfigList* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDOConfigList_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetDOConfigList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDOConfigList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetDOConfigListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DOConfigList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetDOConfigList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetDOConfigListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DOConfigList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetDOConfigList_, context, request, false);
}

::grpc::Status Config::Stub::GetDOConfigList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::DOConfigList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDOConfigList_, context, request, response);
}

void Config::Stub::experimental_async::GetDOConfigList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::DOConfigList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDOConfigList_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetDOConfigList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::DOConfigList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDOConfigList_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetDOConfigList(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::DOConfigList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDOConfigList_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetDOConfigList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::DOConfigList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDOConfigList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::DOConfigList>* Config::Stub::AsyncGetDOConfigListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::DOConfigList>::Create(channel_.get(), cq, rpcmethod_GetDOConfigList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::DOConfigList>* Config::Stub::PrepareAsyncGetDOConfigListRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::DOConfigList>::Create(channel_.get(), cq, rpcmethod_GetDOConfigList_, context, request, false);
}

::grpc::Status Config::Stub::SetHomePosition(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JointPos& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetHomePosition_, context, request, response);
}

void Config::Stub::experimental_async::SetHomePosition(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JointPos* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetHomePosition_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetHomePosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetHomePosition_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetHomePosition(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JointPos* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetHomePosition_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetHomePosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetHomePosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetHomePositionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JointPos& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetHomePosition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetHomePositionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JointPos& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetHomePosition_, context, request, false);
}

::grpc::Status Config::Stub::GetHomePosition(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::JointPos* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetHomePosition_, context, request, response);
}

void Config::Stub::experimental_async::GetHomePosition(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::JointPos* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHomePosition_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetHomePosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::JointPos* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHomePosition_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetHomePosition(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::JointPos* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHomePosition_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetHomePosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::JointPos* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHomePosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::JointPos>* Config::Stub::AsyncGetHomePositionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::JointPos>::Create(channel_.get(), cq, rpcmethod_GetHomePosition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::JointPos>* Config::Stub::PrepareAsyncGetHomePositionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::JointPos>::Create(channel_.get(), cq, rpcmethod_GetHomePosition_, context, request, false);
}

::grpc::Status Config::Stub::GetPackPosition(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::JointPos* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPackPosition_, context, request, response);
}

void Config::Stub::experimental_async::GetPackPosition(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::JointPos* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPackPosition_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetPackPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::JointPos* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPackPosition_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetPackPosition(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::JointPos* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPackPosition_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetPackPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::JointPos* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPackPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::JointPos>* Config::Stub::AsyncGetPackPositionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::JointPos>::Create(channel_.get(), cq, rpcmethod_GetPackPosition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::JointPos>* Config::Stub::PrepareAsyncGetPackPositionRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::JointPos>::Create(channel_.get(), cq, rpcmethod_GetPackPosition_, context, request, false);
}

::grpc::Status Config::Stub::SetAutoServoOff(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::AutoServoOffConfig& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetAutoServoOff_, context, request, response);
}

void Config::Stub::experimental_async::SetAutoServoOff(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::AutoServoOffConfig* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAutoServoOff_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetAutoServoOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAutoServoOff_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetAutoServoOff(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::AutoServoOffConfig* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAutoServoOff_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetAutoServoOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAutoServoOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetAutoServoOffRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::AutoServoOffConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetAutoServoOff_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetAutoServoOffRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::AutoServoOffConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetAutoServoOff_, context, request, false);
}

::grpc::Status Config::Stub::GetAutoServoOff(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::AutoServoOffConfig* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAutoServoOff_, context, request, response);
}

void Config::Stub::experimental_async::GetAutoServoOff(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::AutoServoOffConfig* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAutoServoOff_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetAutoServoOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::AutoServoOffConfig* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAutoServoOff_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetAutoServoOff(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::AutoServoOffConfig* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAutoServoOff_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetAutoServoOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::AutoServoOffConfig* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAutoServoOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::AutoServoOffConfig>* Config::Stub::AsyncGetAutoServoOffRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::AutoServoOffConfig>::Create(channel_.get(), cq, rpcmethod_GetAutoServoOff_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::AutoServoOffConfig>* Config::Stub::PrepareAsyncGetAutoServoOffRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::AutoServoOffConfig>::Create(channel_.get(), cq, rpcmethod_GetAutoServoOff_, context, request, false);
}

::grpc::Status Config::Stub::SetJointControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JointGainSet& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetJointControlGain_, context, request, response);
}

void Config::Stub::experimental_async::SetJointControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JointGainSet* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetJointControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetJointControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetJointControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetJointControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JointGainSet* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetJointControlGain_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetJointControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetJointControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetJointControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JointGainSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetJointControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetJointControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::JointGainSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetJointControlGain_, context, request, false);
}

::grpc::Status Config::Stub::GetJointControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::JointGainSet* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetJointControlGain_, context, request, response);
}

void Config::Stub::experimental_async::GetJointControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::JointGainSet* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetJointControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetJointControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::JointGainSet* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetJointControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetJointControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::JointGainSet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetJointControlGain_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetJointControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::JointGainSet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetJointControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::JointGainSet>* Config::Stub::AsyncGetJointControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::JointGainSet>::Create(channel_.get(), cq, rpcmethod_GetJointControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::JointGainSet>* Config::Stub::PrepareAsyncGetJointControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::JointGainSet>::Create(channel_.get(), cq, rpcmethod_GetJointControlGain_, context, request, false);
}

::grpc::Status Config::Stub::SetTaskControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TaskGainSet& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTaskControlGain_, context, request, response);
}

void Config::Stub::experimental_async::SetTaskControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TaskGainSet* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTaskControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetTaskControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTaskControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetTaskControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TaskGainSet* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTaskControlGain_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetTaskControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTaskControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetTaskControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TaskGainSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetTaskControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetTaskControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TaskGainSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetTaskControlGain_, context, request, false);
}

::grpc::Status Config::Stub::GetTaskControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::TaskGainSet* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTaskControlGain_, context, request, response);
}

void Config::Stub::experimental_async::GetTaskControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TaskGainSet* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTaskControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetTaskControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TaskGainSet* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTaskControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetTaskControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TaskGainSet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTaskControlGain_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetTaskControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TaskGainSet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTaskControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TaskGainSet>* Config::Stub::AsyncGetTaskControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TaskGainSet>::Create(channel_.get(), cq, rpcmethod_GetTaskControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TaskGainSet>* Config::Stub::PrepareAsyncGetTaskControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TaskGainSet>::Create(channel_.get(), cq, rpcmethod_GetTaskControlGain_, context, request, false);
}

::grpc::Status Config::Stub::SetImpedanceControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ImpedanceGainSet& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetImpedanceControlGain_, context, request, response);
}

void Config::Stub::experimental_async::SetImpedanceControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ImpedanceGainSet* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetImpedanceControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetImpedanceControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetImpedanceControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetImpedanceControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ImpedanceGainSet* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetImpedanceControlGain_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetImpedanceControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetImpedanceControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetImpedanceControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ImpedanceGainSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetImpedanceControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetImpedanceControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ImpedanceGainSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetImpedanceControlGain_, context, request, false);
}

::grpc::Status Config::Stub::GetImpedanceControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::ImpedanceGainSet* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetImpedanceControlGain_, context, request, response);
}

void Config::Stub::experimental_async::GetImpedanceControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ImpedanceGainSet* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetImpedanceControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetImpedanceControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::ImpedanceGainSet* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetImpedanceControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetImpedanceControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ImpedanceGainSet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetImpedanceControlGain_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetImpedanceControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::ImpedanceGainSet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetImpedanceControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ImpedanceGainSet>* Config::Stub::AsyncGetImpedanceControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::ImpedanceGainSet>::Create(channel_.get(), cq, rpcmethod_GetImpedanceControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ImpedanceGainSet>* Config::Stub::PrepareAsyncGetImpedanceControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::ImpedanceGainSet>::Create(channel_.get(), cq, rpcmethod_GetImpedanceControlGain_, context, request, false);
}

::grpc::Status Config::Stub::SetForceControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ForceGainSet& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetForceControlGain_, context, request, response);
}

void Config::Stub::experimental_async::SetForceControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ForceGainSet* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetForceControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetForceControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetForceControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetForceControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ForceGainSet* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetForceControlGain_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetForceControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetForceControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetForceControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ForceGainSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetForceControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetForceControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ForceGainSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetForceControlGain_, context, request, false);
}

::grpc::Status Config::Stub::GetForceControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::ForceGainSet* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetForceControlGain_, context, request, response);
}

void Config::Stub::experimental_async::GetForceControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ForceGainSet* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetForceControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetForceControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::ForceGainSet* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetForceControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetForceControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ForceGainSet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetForceControlGain_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetForceControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::ForceGainSet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetForceControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ForceGainSet>* Config::Stub::AsyncGetForceControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::ForceGainSet>::Create(channel_.get(), cq, rpcmethod_GetForceControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ForceGainSet>* Config::Stub::PrepareAsyncGetForceControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::ForceGainSet>::Create(channel_.get(), cq, rpcmethod_GetForceControlGain_, context, request, false);
}

::grpc::Status Config::Stub::SetTestControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TestGainSet& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTestControlGain_, context, request, response);
}

void Config::Stub::experimental_async::SetTestControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TestGainSet* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTestControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetTestControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTestControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetTestControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TestGainSet* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTestControlGain_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetTestControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTestControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetTestControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TestGainSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetTestControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetTestControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TestGainSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetTestControlGain_, context, request, false);
}

::grpc::Status Config::Stub::GetTestControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::TestGainSet* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTestControlGain_, context, request, response);
}

void Config::Stub::experimental_async::GetTestControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TestGainSet* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTestControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetTestControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TestGainSet* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTestControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetTestControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TestGainSet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTestControlGain_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetTestControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TestGainSet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTestControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TestGainSet>* Config::Stub::AsyncGetTestControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TestGainSet>::Create(channel_.get(), cq, rpcmethod_GetTestControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TestGainSet>* Config::Stub::PrepareAsyncGetTestControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TestGainSet>::Create(channel_.get(), cq, rpcmethod_GetTestControlGain_, context, request, false);
}

::grpc::Status Config::Stub::SetCustomControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CustomGainSet& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCustomControlGain_, context, request, response);
}

void Config::Stub::experimental_async::SetCustomControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CustomGainSet* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCustomControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetCustomControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCustomControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetCustomControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CustomGainSet* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCustomControlGain_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetCustomControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCustomControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetCustomControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CustomGainSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetCustomControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetCustomControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CustomGainSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetCustomControlGain_, context, request, false);
}

::grpc::Status Config::Stub::GetCustomControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::CustomGainSet* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCustomControlGain_, context, request, response);
}

void Config::Stub::experimental_async::GetCustomControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::CustomGainSet* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCustomControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetCustomControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CustomGainSet* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCustomControlGain_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetCustomControlGain(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::CustomGainSet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCustomControlGain_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetCustomControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CustomGainSet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCustomControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CustomGainSet>* Config::Stub::AsyncGetCustomControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CustomGainSet>::Create(channel_.get(), cq, rpcmethod_GetCustomControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CustomGainSet>* Config::Stub::PrepareAsyncGetCustomControlGainRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CustomGainSet>::Create(channel_.get(), cq, rpcmethod_GetCustomControlGain_, context, request, false);
}

::grpc::Status Config::Stub::SetNewControllerTestOnOff(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::NewControllerTestState& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetNewControllerTestOnOff_, context, request, response);
}

void Config::Stub::experimental_async::SetNewControllerTestOnOff(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::NewControllerTestState* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetNewControllerTestOnOff_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetNewControllerTestOnOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetNewControllerTestOnOff_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetNewControllerTestOnOff(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::NewControllerTestState* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetNewControllerTestOnOff_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetNewControllerTestOnOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetNewControllerTestOnOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetNewControllerTestOnOffRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::NewControllerTestState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetNewControllerTestOnOff_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetNewControllerTestOnOffRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::NewControllerTestState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetNewControllerTestOnOff_, context, request, false);
}

::grpc::Status Config::Stub::GetNewControllerTestOnOffState(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::NewControllerTestState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNewControllerTestOnOffState_, context, request, response);
}

void Config::Stub::experimental_async::GetNewControllerTestOnOffState(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::NewControllerTestState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNewControllerTestOnOffState_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetNewControllerTestOnOffState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::NewControllerTestState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNewControllerTestOnOffState_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetNewControllerTestOnOffState(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::NewControllerTestState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNewControllerTestOnOffState_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetNewControllerTestOnOffState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::NewControllerTestState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNewControllerTestOnOffState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::NewControllerTestState>* Config::Stub::AsyncGetNewControllerTestOnOffStateRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::NewControllerTestState>::Create(channel_.get(), cq, rpcmethod_GetNewControllerTestOnOffState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::NewControllerTestState>* Config::Stub::PrepareAsyncGetNewControllerTestOnOffStateRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::NewControllerTestState>::Create(channel_.get(), cq, rpcmethod_GetNewControllerTestOnOffState_, context, request, false);
}

::grpc::Status Config::Stub::SetFrictionComp(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FrictionCompSet& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetFrictionComp_, context, request, response);
}

void Config::Stub::experimental_async::SetFrictionComp(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FrictionCompSet* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetFrictionComp_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetFrictionComp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetFrictionComp_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetFrictionComp(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FrictionCompSet* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetFrictionComp_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetFrictionComp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetFrictionComp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetFrictionCompRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FrictionCompSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetFrictionComp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetFrictionCompRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FrictionCompSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetFrictionComp_, context, request, false);
}

::grpc::Status Config::Stub::GetFrictionComp(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::FrictionCompSet* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFrictionComp_, context, request, response);
}

void Config::Stub::experimental_async::GetFrictionComp(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::FrictionCompSet* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFrictionComp_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetFrictionComp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::FrictionCompSet* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFrictionComp_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetFrictionComp(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::FrictionCompSet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFrictionComp_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetFrictionComp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::FrictionCompSet* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFrictionComp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::FrictionCompSet>* Config::Stub::AsyncGetFrictionCompRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::FrictionCompSet>::Create(channel_.get(), cq, rpcmethod_GetFrictionComp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::FrictionCompSet>* Config::Stub::PrepareAsyncGetFrictionCompRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::FrictionCompSet>::Create(channel_.get(), cq, rpcmethod_GetFrictionComp_, context, request, false);
}

::grpc::Status Config::Stub::SetMountPos(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MountingAngles& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetMountPos_, context, request, response);
}

void Config::Stub::experimental_async::SetMountPos(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MountingAngles* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMountPos_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetMountPos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMountPos_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetMountPos(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MountingAngles* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetMountPos_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetMountPos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetMountPos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetMountPosRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MountingAngles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetMountPos_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetMountPosRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::MountingAngles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetMountPos_, context, request, false);
}

::grpc::Status Config::Stub::GetMountPos(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::MountingAngles* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMountPos_, context, request, response);
}

void Config::Stub::experimental_async::GetMountPos(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::MountingAngles* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMountPos_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetMountPos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::MountingAngles* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMountPos_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetMountPos(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::MountingAngles* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMountPos_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetMountPos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::MountingAngles* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMountPos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::MountingAngles>* Config::Stub::AsyncGetMountPosRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::MountingAngles>::Create(channel_.get(), cq, rpcmethod_GetMountPos_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::MountingAngles>* Config::Stub::PrepareAsyncGetMountPosRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::MountingAngles>::Create(channel_.get(), cq, rpcmethod_GetMountPos_, context, request, false);
}

::grpc::Status Config::Stub::SetToolProperty(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ToolProperties& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetToolProperty_, context, request, response);
}

void Config::Stub::experimental_async::SetToolProperty(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ToolProperties* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetToolProperty_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetToolProperty(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetToolProperty_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetToolProperty(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ToolProperties* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetToolProperty_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetToolProperty(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetToolProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetToolPropertyRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ToolProperties& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetToolProperty_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetToolPropertyRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ToolProperties& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetToolProperty_, context, request, false);
}

::grpc::Status Config::Stub::GetToolProperty(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::ToolProperties* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetToolProperty_, context, request, response);
}

void Config::Stub::experimental_async::GetToolProperty(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ToolProperties* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetToolProperty_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetToolProperty(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::ToolProperties* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetToolProperty_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetToolProperty(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ToolProperties* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetToolProperty_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetToolProperty(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::ToolProperties* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetToolProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ToolProperties>* Config::Stub::AsyncGetToolPropertyRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::ToolProperties>::Create(channel_.get(), cq, rpcmethod_GetToolProperty_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ToolProperties>* Config::Stub::PrepareAsyncGetToolPropertyRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::ToolProperties>::Create(channel_.get(), cq, rpcmethod_GetToolProperty_, context, request, false);
}

::grpc::Status Config::Stub::SetCollSensLevel(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionSensLevel& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCollSensLevel_, context, request, response);
}

void Config::Stub::experimental_async::SetCollSensLevel(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionSensLevel* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCollSensLevel_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetCollSensLevel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCollSensLevel_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetCollSensLevel(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionSensLevel* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCollSensLevel_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetCollSensLevel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCollSensLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetCollSensLevelRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionSensLevel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetCollSensLevel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetCollSensLevelRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionSensLevel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetCollSensLevel_, context, request, false);
}

::grpc::Status Config::Stub::GetCollSensLevel(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::CollisionSensLevel* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCollSensLevel_, context, request, response);
}

void Config::Stub::experimental_async::GetCollSensLevel(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::CollisionSensLevel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollSensLevel_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetCollSensLevel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CollisionSensLevel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollSensLevel_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetCollSensLevel(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::CollisionSensLevel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollSensLevel_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetCollSensLevel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CollisionSensLevel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollSensLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CollisionSensLevel>* Config::Stub::AsyncGetCollSensLevelRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CollisionSensLevel>::Create(channel_.get(), cq, rpcmethod_GetCollSensLevel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CollisionSensLevel>* Config::Stub::PrepareAsyncGetCollSensLevelRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CollisionSensLevel>::Create(channel_.get(), cq, rpcmethod_GetCollSensLevel_, context, request, false);
}

::grpc::Status Config::Stub::SetCollSensParam(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionThresholds& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCollSensParam_, context, request, response);
}

void Config::Stub::experimental_async::SetCollSensParam(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionThresholds* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCollSensParam_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetCollSensParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCollSensParam_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetCollSensParam(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionThresholds* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCollSensParam_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetCollSensParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCollSensParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetCollSensParamRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionThresholds& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetCollSensParam_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetCollSensParamRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionThresholds& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetCollSensParam_, context, request, false);
}

::grpc::Status Config::Stub::GetCollSensParam(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::CollisionThresholds* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCollSensParam_, context, request, response);
}

void Config::Stub::experimental_async::GetCollSensParam(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::CollisionThresholds* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollSensParam_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetCollSensParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CollisionThresholds* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollSensParam_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetCollSensParam(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::CollisionThresholds* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollSensParam_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetCollSensParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CollisionThresholds* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollSensParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CollisionThresholds>* Config::Stub::AsyncGetCollSensParamRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CollisionThresholds>::Create(channel_.get(), cq, rpcmethod_GetCollSensParam_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CollisionThresholds>* Config::Stub::PrepareAsyncGetCollSensParamRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CollisionThresholds>::Create(channel_.get(), cq, rpcmethod_GetCollSensParam_, context, request, false);
}

::grpc::Status Config::Stub::SetCollPolicy(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionPolicy& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCollPolicy_, context, request, response);
}

void Config::Stub::experimental_async::SetCollPolicy(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionPolicy* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCollPolicy_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetCollPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCollPolicy_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetCollPolicy(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionPolicy* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCollPolicy_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetCollPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCollPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetCollPolicyRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionPolicy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetCollPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetCollPolicyRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::CollisionPolicy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetCollPolicy_, context, request, false);
}

::grpc::Status Config::Stub::GetCollPolicy(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::CollisionPolicy* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCollPolicy_, context, request, response);
}

void Config::Stub::experimental_async::GetCollPolicy(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::CollisionPolicy* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollPolicy_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetCollPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CollisionPolicy* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollPolicy_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetCollPolicy(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::CollisionPolicy* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollPolicy_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetCollPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::CollisionPolicy* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CollisionPolicy>* Config::Stub::AsyncGetCollPolicyRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CollisionPolicy>::Create(channel_.get(), cq, rpcmethod_GetCollPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::CollisionPolicy>* Config::Stub::PrepareAsyncGetCollPolicyRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::CollisionPolicy>::Create(channel_.get(), cq, rpcmethod_GetCollPolicy_, context, request, false);
}

::grpc::Status Config::Stub::SetSafetyLimits(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SafetyLimits& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSafetyLimits_, context, request, response);
}

void Config::Stub::experimental_async::SetSafetyLimits(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SafetyLimits* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSafetyLimits_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetSafetyLimits(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSafetyLimits_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetSafetyLimits(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SafetyLimits* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSafetyLimits_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetSafetyLimits(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSafetyLimits_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetSafetyLimitsRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SafetyLimits& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetSafetyLimits_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetSafetyLimitsRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SafetyLimits& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetSafetyLimits_, context, request, false);
}

::grpc::Status Config::Stub::GetSafetyLimits(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::SafetyLimits* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSafetyLimits_, context, request, response);
}

void Config::Stub::experimental_async::GetSafetyLimits(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SafetyLimits* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSafetyLimits_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetSafetyLimits(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::SafetyLimits* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSafetyLimits_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetSafetyLimits(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SafetyLimits* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSafetyLimits_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetSafetyLimits(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::SafetyLimits* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSafetyLimits_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SafetyLimits>* Config::Stub::AsyncGetSafetyLimitsRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::SafetyLimits>::Create(channel_.get(), cq, rpcmethod_GetSafetyLimits_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SafetyLimits>* Config::Stub::PrepareAsyncGetSafetyLimitsRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::SafetyLimits>::Create(channel_.get(), cq, rpcmethod_GetSafetyLimits_, context, request, false);
}

::grpc::Status Config::Stub::SetSafetyStopConfig(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SafetyStopConfig& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSafetyStopConfig_, context, request, response);
}

void Config::Stub::experimental_async::SetSafetyStopConfig(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SafetyStopConfig* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSafetyStopConfig_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetSafetyStopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSafetyStopConfig_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetSafetyStopConfig(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SafetyStopConfig* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSafetyStopConfig_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetSafetyStopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSafetyStopConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetSafetyStopConfigRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SafetyStopConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetSafetyStopConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetSafetyStopConfigRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SafetyStopConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetSafetyStopConfig_, context, request, false);
}

::grpc::Status Config::Stub::GetSafetyStopConfig(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::SafetyStopConfig* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSafetyStopConfig_, context, request, response);
}

void Config::Stub::experimental_async::GetSafetyStopConfig(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SafetyStopConfig* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSafetyStopConfig_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetSafetyStopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::SafetyStopConfig* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSafetyStopConfig_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetSafetyStopConfig(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SafetyStopConfig* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSafetyStopConfig_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetSafetyStopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::SafetyStopConfig* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSafetyStopConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SafetyStopConfig>* Config::Stub::AsyncGetSafetyStopConfigRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::SafetyStopConfig>::Create(channel_.get(), cq, rpcmethod_GetSafetyStopConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SafetyStopConfig>* Config::Stub::PrepareAsyncGetSafetyStopConfigRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::SafetyStopConfig>::Create(channel_.get(), cq, rpcmethod_GetSafetyStopConfig_, context, request, false);
}

::grpc::Status Config::Stub::GetReducedRatio(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::GetReducedRatioRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetReducedRatio_, context, request, response);
}

void Config::Stub::experimental_async::GetReducedRatio(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::GetReducedRatioRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetReducedRatio_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetReducedRatio(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::GetReducedRatioRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetReducedRatio_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetReducedRatio(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::GetReducedRatioRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetReducedRatio_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetReducedRatio(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::GetReducedRatioRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetReducedRatio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::GetReducedRatioRes>* Config::Stub::AsyncGetReducedRatioRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::GetReducedRatioRes>::Create(channel_.get(), cq, rpcmethod_GetReducedRatio_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::GetReducedRatioRes>* Config::Stub::PrepareAsyncGetReducedRatioRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::GetReducedRatioRes>::Create(channel_.get(), cq, rpcmethod_GetReducedRatio_, context, request, false);
}

::grpc::Status Config::Stub::GetReducedSpeed(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::GetReducedSpeedRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetReducedSpeed_, context, request, response);
}

void Config::Stub::experimental_async::GetReducedSpeed(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::GetReducedSpeedRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetReducedSpeed_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetReducedSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::GetReducedSpeedRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetReducedSpeed_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetReducedSpeed(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::GetReducedSpeedRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetReducedSpeed_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetReducedSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::GetReducedSpeedRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetReducedSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::GetReducedSpeedRes>* Config::Stub::AsyncGetReducedSpeedRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::GetReducedSpeedRes>::Create(channel_.get(), cq, rpcmethod_GetReducedSpeed_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::GetReducedSpeedRes>* Config::Stub::PrepareAsyncGetReducedSpeedRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::GetReducedSpeedRes>::Create(channel_.get(), cq, rpcmethod_GetReducedSpeed_, context, request, false);
}

::grpc::Status Config::Stub::SetReducedSpeed(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SetReducedSpeedReq& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetReducedSpeed_, context, request, response);
}

void Config::Stub::experimental_async::SetReducedSpeed(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SetReducedSpeedReq* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetReducedSpeed_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetReducedSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetReducedSpeed_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetReducedSpeed(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SetReducedSpeedReq* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetReducedSpeed_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetReducedSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetReducedSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetReducedSpeedRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SetReducedSpeedReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetReducedSpeed_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetReducedSpeedRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SetReducedSpeedReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetReducedSpeed_, context, request, false);
}

::grpc::Status Config::Stub::SetFTSensorConfig(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FTSensorDevice& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetFTSensorConfig_, context, request, response);
}

void Config::Stub::experimental_async::SetFTSensorConfig(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FTSensorDevice* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetFTSensorConfig_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetFTSensorConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetFTSensorConfig_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetFTSensorConfig(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FTSensorDevice* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetFTSensorConfig_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetFTSensorConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetFTSensorConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetFTSensorConfigRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FTSensorDevice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetFTSensorConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetFTSensorConfigRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::FTSensorDevice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetFTSensorConfig_, context, request, false);
}

::grpc::Status Config::Stub::GetFTSensorConfig(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::FTSensorDevice* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFTSensorConfig_, context, request, response);
}

void Config::Stub::experimental_async::GetFTSensorConfig(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::FTSensorDevice* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFTSensorConfig_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetFTSensorConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::FTSensorDevice* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFTSensorConfig_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetFTSensorConfig(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::FTSensorDevice* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFTSensorConfig_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetFTSensorConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::FTSensorDevice* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFTSensorConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::FTSensorDevice>* Config::Stub::AsyncGetFTSensorConfigRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::FTSensorDevice>::Create(channel_.get(), cq, rpcmethod_GetFTSensorConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::FTSensorDevice>* Config::Stub::PrepareAsyncGetFTSensorConfigRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::FTSensorDevice>::Create(channel_.get(), cq, rpcmethod_GetFTSensorConfig_, context, request, false);
}

::grpc::Status Config::Stub::SetTeleOpParams(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpParams& request, ::Nrmk::IndyFramework::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTeleOpParams_, context, request, response);
}

void Config::Stub::experimental_async::SetTeleOpParams(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpParams* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTeleOpParams_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetTeleOpParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTeleOpParams_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::SetTeleOpParams(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpParams* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTeleOpParams_, context, request, response, reactor);
}

void Config::Stub::experimental_async::SetTeleOpParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTeleOpParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::AsyncSetTeleOpParamsRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetTeleOpParams_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Response>* Config::Stub::PrepareAsyncSetTeleOpParamsRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::TeleOpParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::Response>::Create(channel_.get(), cq, rpcmethod_SetTeleOpParams_, context, request, false);
}

::grpc::Status Config::Stub::GetTeleOpParams(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::TeleOpParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTeleOpParams_, context, request, response);
}

void Config::Stub::experimental_async::GetTeleOpParams(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleOpParams* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpParams_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetTeleOpParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TeleOpParams* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpParams_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetTeleOpParams(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleOpParams* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpParams_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetTeleOpParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::TeleOpParams* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TeleOpParams>* Config::Stub::AsyncGetTeleOpParamsRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TeleOpParams>::Create(channel_.get(), cq, rpcmethod_GetTeleOpParams_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::TeleOpParams>* Config::Stub::PrepareAsyncGetTeleOpParamsRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::TeleOpParams>::Create(channel_.get(), cq, rpcmethod_GetTeleOpParams_, context, request, false);
}

::grpc::Status Config::Stub::GetKinematicsParams(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::KinematicsParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetKinematicsParams_, context, request, response);
}

void Config::Stub::experimental_async::GetKinematicsParams(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::KinematicsParams* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetKinematicsParams_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetKinematicsParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::KinematicsParams* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetKinematicsParams_, context, request, response, std::move(f));
}

void Config::Stub::experimental_async::GetKinematicsParams(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::KinematicsParams* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetKinematicsParams_, context, request, response, reactor);
}

void Config::Stub::experimental_async::GetKinematicsParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Nrmk::IndyFramework::KinematicsParams* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetKinematicsParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::KinematicsParams>* Config::Stub::AsyncGetKinematicsParamsRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::KinematicsParams>::Create(channel_.get(), cq, rpcmethod_GetKinematicsParams_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::KinematicsParams>* Config::Stub::PrepareAsyncGetKinematicsParamsRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Nrmk::IndyFramework::KinematicsParams>::Create(channel_.get(), cq, rpcmethod_GetKinematicsParams_, context, request, false);
}

Config::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::Frame>(
          std::mem_fn(&Config::Service::GetRefFrame), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Frame, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetRefFrame), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::PlanarFrame, ::Nrmk::IndyFramework::FrameResult>(
          std::mem_fn(&Config::Service::SetRefFramePlanar), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Frame, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetToolFrame), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Ratio, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetSpeedRatio), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::DIConfigList, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetDIConfigList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::DIConfigList>(
          std::mem_fn(&Config::Service::GetDIConfigList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::DOConfigList, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetDOConfigList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::DOConfigList>(
          std::mem_fn(&Config::Service::GetDOConfigList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::JointPos, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetHomePosition), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::JointPos>(
          std::mem_fn(&Config::Service::GetHomePosition), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::JointPos>(
          std::mem_fn(&Config::Service::GetPackPosition), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::AutoServoOffConfig, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetAutoServoOff), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::AutoServoOffConfig>(
          std::mem_fn(&Config::Service::GetAutoServoOff), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::JointGainSet, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetJointControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::JointGainSet>(
          std::mem_fn(&Config::Service::GetJointControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::TaskGainSet, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetTaskControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::TaskGainSet>(
          std::mem_fn(&Config::Service::GetTaskControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::ImpedanceGainSet, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetImpedanceControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ImpedanceGainSet>(
          std::mem_fn(&Config::Service::GetImpedanceControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::ForceGainSet, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetForceControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ForceGainSet>(
          std::mem_fn(&Config::Service::GetForceControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::TestGainSet, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetTestControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::TestGainSet>(
          std::mem_fn(&Config::Service::GetTestControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::CustomGainSet, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetCustomControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::CustomGainSet>(
          std::mem_fn(&Config::Service::GetCustomControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::NewControllerTestState, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetNewControllerTestOnOff), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::NewControllerTestState>(
          std::mem_fn(&Config::Service::GetNewControllerTestOnOffState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::FrictionCompSet, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetFrictionComp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::FrictionCompSet>(
          std::mem_fn(&Config::Service::GetFrictionComp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::MountingAngles, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetMountPos), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::MountingAngles>(
          std::mem_fn(&Config::Service::GetMountPos), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::ToolProperties, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetToolProperty), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ToolProperties>(
          std::mem_fn(&Config::Service::GetToolProperty), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::CollisionSensLevel, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetCollSensLevel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::CollisionSensLevel>(
          std::mem_fn(&Config::Service::GetCollSensLevel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::CollisionThresholds, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetCollSensParam), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::CollisionThresholds>(
          std::mem_fn(&Config::Service::GetCollSensParam), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::CollisionPolicy, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetCollPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::CollisionPolicy>(
          std::mem_fn(&Config::Service::GetCollPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::SafetyLimits, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetSafetyLimits), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SafetyLimits>(
          std::mem_fn(&Config::Service::GetSafetyLimits), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::SafetyStopConfig, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetSafetyStopConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SafetyStopConfig>(
          std::mem_fn(&Config::Service::GetSafetyStopConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::GetReducedRatioRes>(
          std::mem_fn(&Config::Service::GetReducedRatio), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::GetReducedSpeedRes>(
          std::mem_fn(&Config::Service::GetReducedSpeed), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::SetReducedSpeedReq, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetReducedSpeed), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::FTSensorDevice, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetFTSensorConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::FTSensorDevice>(
          std::mem_fn(&Config::Service::GetFTSensorConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::TeleOpParams, ::Nrmk::IndyFramework::Response>(
          std::mem_fn(&Config::Service::SetTeleOpParams), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::TeleOpParams>(
          std::mem_fn(&Config::Service::GetTeleOpParams), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::KinematicsParams>(
          std::mem_fn(&Config::Service::GetKinematicsParams), this)));
}

Config::Service::~Service() {
}

::grpc::Status Config::Service::GetRefFrame(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Frame* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetRefFrame(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Frame* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetRefFramePlanar(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::PlanarFrame* request, ::Nrmk::IndyFramework::FrameResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetToolFrame(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Frame* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetSpeedRatio(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Ratio* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetDIConfigList(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::DIConfigList* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetDIConfigList(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::DIConfigList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetDOConfigList(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::DOConfigList* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetDOConfigList(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::DOConfigList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetHomePosition(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::JointPos* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetHomePosition(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::JointPos* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetPackPosition(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::JointPos* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetAutoServoOff(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::AutoServoOffConfig* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetAutoServoOff(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::AutoServoOffConfig* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetJointControlGain(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::JointGainSet* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetJointControlGain(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::JointGainSet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetTaskControlGain(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::TaskGainSet* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetTaskControlGain(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TaskGainSet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetImpedanceControlGain(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ImpedanceGainSet* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetImpedanceControlGain(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ImpedanceGainSet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetForceControlGain(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ForceGainSet* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetForceControlGain(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ForceGainSet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetTestControlGain(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::TestGainSet* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetTestControlGain(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TestGainSet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetCustomControlGain(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::CustomGainSet* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetCustomControlGain(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::CustomGainSet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetNewControllerTestOnOff(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::NewControllerTestState* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetNewControllerTestOnOffState(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::NewControllerTestState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetFrictionComp(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::FrictionCompSet* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetFrictionComp(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::FrictionCompSet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetMountPos(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::MountingAngles* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetMountPos(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::MountingAngles* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetToolProperty(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ToolProperties* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetToolProperty(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::ToolProperties* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetCollSensLevel(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::CollisionSensLevel* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetCollSensLevel(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::CollisionSensLevel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetCollSensParam(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::CollisionThresholds* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetCollSensParam(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::CollisionThresholds* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetCollPolicy(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::CollisionPolicy* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetCollPolicy(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::CollisionPolicy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetSafetyLimits(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::SafetyLimits* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetSafetyLimits(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SafetyLimits* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetSafetyStopConfig(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::SafetyStopConfig* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetSafetyStopConfig(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SafetyStopConfig* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetReducedRatio(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::GetReducedRatioRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetReducedSpeed(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::GetReducedSpeedRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetReducedSpeed(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::SetReducedSpeedReq* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetFTSensorConfig(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::FTSensorDevice* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetFTSensorConfig(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::FTSensorDevice* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::SetTeleOpParams(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::TeleOpParams* request, ::Nrmk::IndyFramework::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetTeleOpParams(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::TeleOpParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::GetKinematicsParams(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::KinematicsParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Nrmk
}  // namespace IndyFramework

