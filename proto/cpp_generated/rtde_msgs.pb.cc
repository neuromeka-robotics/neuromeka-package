// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtde_msgs.proto

#include "rtde_msgs.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Nrmk {
namespace IndyFramework {
        template <typename>
PROTOBUF_CONSTEXPR TestRequest::TestRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.strval_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.intval_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRequestDefaultTypeInternal() {}
  union {
    TestRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRequestDefaultTypeInternal _TestRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestResponse::TestResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.msg_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.code_)*/ ::int64_t{0},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestResponseDefaultTypeInternal() {}
  union {
    TestResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestResponseDefaultTypeInternal _TestResponse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MotionData::MotionData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.traj_state_)*/ 0,
      /*decltype(_impl_.traj_progress_)*/ 0,
      /*decltype(_impl_.is_in_motion_)*/ false,
      /*decltype(_impl_.is_target_reached_)*/ false,
      /*decltype(_impl_.is_pausing_)*/ false,
      /*decltype(_impl_.is_stopping_)*/ false,
      /*decltype(_impl_.has_motion_)*/ false,
      /*decltype(_impl_.speed_ratio_)*/ 0,
      /*decltype(_impl_.motion_id_)*/ 0,
      /*decltype(_impl_.remain_distance_)*/ 0,
      /*decltype(_impl_.motion_queue_size_)*/ 0u,
      /*decltype(_impl_.cur_traj_progress_)*/ 0,
    } {}
struct MotionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotionDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotionDataDefaultTypeInternal() {}
  union {
    MotionData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotionDataDefaultTypeInternal _MotionData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ControlData::ControlData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.q_)*/ {},
      /*decltype(_impl_.qdot_)*/ {},
      /*decltype(_impl_.p_)*/ {},
      /*decltype(_impl_.pdot_)*/ {},
      /*decltype(_impl_.ref_frame_)*/ {},
      /*decltype(_impl_.tool_frame_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.running_hours_)*/ 0u,
      /*decltype(_impl_.running_mins_)*/ 0u,
      /*decltype(_impl_.running_secs_)*/ 0u,
      /*decltype(_impl_.op_state_)*/ 0,
      /*decltype(_impl_.sim_mode_)*/ false,
    } {}
struct ControlDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlDataDefaultTypeInternal() {}
  union {
    ControlData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlDataDefaultTypeInternal _ControlData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ControlData2::ControlData2(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.q_)*/ {},
      /*decltype(_impl_.qdot_)*/ {},
      /*decltype(_impl_.qddot_)*/ {},
      /*decltype(_impl_.qdes_)*/ {},
      /*decltype(_impl_.qdotdes_)*/ {},
      /*decltype(_impl_.qddotdes_)*/ {},
      /*decltype(_impl_.p_)*/ {},
      /*decltype(_impl_.pdot_)*/ {},
      /*decltype(_impl_.pddot_)*/ {},
      /*decltype(_impl_.pdes_)*/ {},
      /*decltype(_impl_.pdotdes_)*/ {},
      /*decltype(_impl_.pddotdes_)*/ {},
      /*decltype(_impl_.tau_)*/ {},
      /*decltype(_impl_.tau_act_)*/ {},
      /*decltype(_impl_.tau_ext_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct ControlData2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlData2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlData2DefaultTypeInternal() {}
  union {
    ControlData2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlData2DefaultTypeInternal _ControlData2_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR IOData::IOData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.di_)*/ {},
      /*decltype(_impl_.do__)*/ {},
      /*decltype(_impl_.ai_)*/ {},
      /*decltype(_impl_.ao_)*/ {},
      /*decltype(_impl_.end_di_)*/ {},
      /*decltype(_impl_.end_do_)*/ {},
      /*decltype(_impl_.end_ai_)*/ {},
      /*decltype(_impl_.end_ao_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct IODataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IODataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IODataDefaultTypeInternal() {}
  union {
    IOData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IODataDefaultTypeInternal _IOData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ViolationData::ViolationData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.i_args_)*/ {},
      /* _impl_._i_args_cached_byte_size_ = */ {0},
      /*decltype(_impl_.f_args_)*/ {},
      /*decltype(_impl_.violation_str_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.violation_code_)*/ ::uint64_t{0u},
      /*decltype(_impl_.j_index_)*/ 0u,
    } {}
struct ViolationDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViolationDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViolationDataDefaultTypeInternal() {}
  union {
    ViolationData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViolationDataDefaultTypeInternal _ViolationData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ViolationMessageQueue::ViolationMessageQueue(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.violation_queue_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct ViolationMessageQueueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViolationMessageQueueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViolationMessageQueueDefaultTypeInternal() {}
  union {
    ViolationMessageQueue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViolationMessageQueueDefaultTypeInternal _ViolationMessageQueue_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ServoData::ServoData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.status_codes_)*/ {},
      /*decltype(_impl_.temperatures_)*/ {},
      /*decltype(_impl_.voltages_)*/ {},
      /*decltype(_impl_.currents_)*/ {},
      /*decltype(_impl_.servo_actives_)*/ {},
      /*decltype(_impl_.brake_actives_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct ServoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServoDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServoDataDefaultTypeInternal() {}
  union {
    ServoData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServoDataDefaultTypeInternal _ServoData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ProgramData::ProgramData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.program_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.program_alarm_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.program_annotation_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.program_state_)*/ 0,
      /*decltype(_impl_.cmd_id_)*/ 0,
      /*decltype(_impl_.sub_cmd_id_)*/ 0,
      /*decltype(_impl_.running_hours_)*/ 0u,
      /*decltype(_impl_.running_mins_)*/ 0u,
      /*decltype(_impl_.running_secs_)*/ 0u,
      /*decltype(_impl_.speed_ratio_)*/ 0,
    } {}
struct ProgramDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgramDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgramDataDefaultTypeInternal() {}
  union {
    ProgramData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgramDataDefaultTypeInternal _ProgramData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR StopState::StopState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.category_)*/ 0,
    } {}
struct StopStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopStateDefaultTypeInternal() {}
  union {
    StopState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopStateDefaultTypeInternal _StopState_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
static ::_pb::Metadata file_level_metadata_rtde_5fmsgs_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_rtde_5fmsgs_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_rtde_5fmsgs_2eproto = nullptr;
const ::uint32_t TableStruct_rtde_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestRequest, _impl_.intval_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestRequest, _impl_.strval_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestResponse, _impl_.code_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestResponse, _impl_.msg_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _impl_.traj_state_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _impl_.traj_progress_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _impl_.is_in_motion_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _impl_.is_target_reached_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _impl_.is_pausing_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _impl_.is_stopping_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _impl_.has_motion_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _impl_.speed_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _impl_.motion_id_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _impl_.remain_distance_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _impl_.motion_queue_size_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _impl_.cur_traj_progress_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _impl_.running_hours_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _impl_.running_mins_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _impl_.running_secs_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _impl_.op_state_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _impl_.sim_mode_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _impl_.q_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _impl_.qdot_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _impl_.p_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _impl_.pdot_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _impl_.ref_frame_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _impl_.tool_frame_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.q_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.qdot_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.qddot_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.qdes_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.qdotdes_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.qddotdes_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.p_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.pdot_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.pddot_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.pdes_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.pdotdes_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.pddotdes_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.tau_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.tau_act_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.tau_ext_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, _impl_.di_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, _impl_.do__),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, _impl_.ai_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, _impl_.ao_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, _impl_.end_di_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, _impl_.end_do_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, _impl_.end_ai_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, _impl_.end_ao_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, _impl_.violation_code_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, _impl_.j_index_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, _impl_.i_args_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, _impl_.f_args_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, _impl_.violation_str_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationMessageQueue, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationMessageQueue, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationMessageQueue, _impl_.violation_queue_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationMessageQueue, _impl_.response_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, _impl_.status_codes_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, _impl_.temperatures_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, _impl_.voltages_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, _impl_.currents_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, _impl_.servo_actives_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, _impl_.brake_actives_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, _impl_.program_state_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, _impl_.cmd_id_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, _impl_.sub_cmd_id_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, _impl_.running_hours_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, _impl_.running_mins_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, _impl_.running_secs_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, _impl_.program_name_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, _impl_.program_alarm_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, _impl_.program_annotation_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, _impl_.speed_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::StopState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::StopState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::StopState, _impl_.category_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::StopState, _impl_.response_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Nrmk::IndyFramework::TestRequest)},
        {10, -1, -1, sizeof(::Nrmk::IndyFramework::TestResponse)},
        {20, 41, -1, sizeof(::Nrmk::IndyFramework::MotionData)},
        {54, 74, -1, sizeof(::Nrmk::IndyFramework::ControlData)},
        {86, 110, -1, sizeof(::Nrmk::IndyFramework::ControlData2)},
        {126, 143, -1, sizeof(::Nrmk::IndyFramework::IOData)},
        {152, 166, -1, sizeof(::Nrmk::IndyFramework::ViolationData)},
        {172, 182, -1, sizeof(::Nrmk::IndyFramework::ViolationMessageQueue)},
        {184, 199, -1, sizeof(::Nrmk::IndyFramework::ServoData)},
        {206, 225, -1, sizeof(::Nrmk::IndyFramework::ProgramData)},
        {236, 246, -1, sizeof(::Nrmk::IndyFramework::StopState)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::Nrmk::IndyFramework::_TestRequest_default_instance_._instance,
    &::Nrmk::IndyFramework::_TestResponse_default_instance_._instance,
    &::Nrmk::IndyFramework::_MotionData_default_instance_._instance,
    &::Nrmk::IndyFramework::_ControlData_default_instance_._instance,
    &::Nrmk::IndyFramework::_ControlData2_default_instance_._instance,
    &::Nrmk::IndyFramework::_IOData_default_instance_._instance,
    &::Nrmk::IndyFramework::_ViolationData_default_instance_._instance,
    &::Nrmk::IndyFramework::_ViolationMessageQueue_default_instance_._instance,
    &::Nrmk::IndyFramework::_ServoData_default_instance_._instance,
    &::Nrmk::IndyFramework::_ProgramData_default_instance_._instance,
    &::Nrmk::IndyFramework::_StopState_default_instance_._instance,
};
const char descriptor_table_protodef_rtde_5fmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\017rtde_msgs.proto\022\022Nrmk.IndyFramework\032\021d"
    "evice_msgs.proto\032\021common_msgs.proto\"-\n\013T"
    "estRequest\022\016\n\006intVal\030\001 \001(\005\022\016\n\006strVal\030\002 \001"
    "(\t\")\n\014TestResponse\022\014\n\004code\030\001 \001(\003\022\013\n\003msg\030"
    "\002 \001(\t\"\353\002\n\nMotionData\0221\n\ntraj_state\030\001 \001(\016"
    "2\035.Nrmk.IndyFramework.TrajState\022\025\n\rtraj_"
    "progress\030\002 \001(\005\022\024\n\014is_in_motion\030\003 \001(\010\022\031\n\021"
    "is_target_reached\030\004 \001(\010\022\022\n\nis_pausing\030\005 "
    "\001(\010\022\023\n\013is_stopping\030\006 \001(\010\022\022\n\nhas_motion\030\007"
    " \001(\010\022\023\n\013speed_ratio\030\010 \001(\005\022\021\n\tmotion_id\030\t"
    " \001(\005\022\027\n\017remain_distance\030\n \001(\002\022\031\n\021motion_"
    "queue_size\030\013 \001(\r\022\031\n\021cur_traj_progress\030\014 "
    "\001(\005\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFramewo"
    "rk.Response\"\232\002\n\013ControlData\022\025\n\rrunning_h"
    "ours\030\001 \001(\r\022\024\n\014running_mins\030\002 \001(\r\022\024\n\014runn"
    "ing_secs\030\003 \001(\r\022-\n\010op_state\030\004 \001(\0162\033.Nrmk."
    "IndyFramework.OpState\022\020\n\010sim_mode\030\005 \001(\010\022"
    "\t\n\001q\030\n \003(\002\022\014\n\004qdot\030\013 \003(\002\022\t\n\001p\030\014 \003(\002\022\014\n\004p"
    "dot\030\r \003(\002\022\021\n\tref_frame\030\024 \003(\002\022\022\n\ntool_fra"
    "me\030\025 \003(\002\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFr"
    "amework.Response\"\237\002\n\014ControlData2\022\t\n\001q\030\001"
    " \003(\002\022\014\n\004qdot\030\002 \003(\002\022\r\n\005qddot\030\003 \003(\002\022\014\n\004qde"
    "s\030\004 \003(\002\022\017\n\007qdotdes\030\005 \003(\002\022\020\n\010qddotdes\030\006 \003"
    "(\002\022\t\n\001p\030\n \003(\002\022\014\n\004pdot\030\013 \003(\002\022\r\n\005pddot\030\014 \003"
    "(\002\022\014\n\004pdes\030\r \003(\002\022\017\n\007pdotdes\030\016 \003(\002\022\020\n\010pdd"
    "otdes\030\017 \003(\002\022\013\n\003tau\030\024 \003(\002\022\017\n\007tau_act\030\025 \003("
    "\002\022\017\n\007tau_ext\030\026 \003(\002\022.\n\010response\030d \001(\0132\034.N"
    "rmk.IndyFramework.Response\"\274\003\n\006IOData\022-\n"
    "\002di\030\001 \003(\0132!.Nrmk.IndyFramework.DigitalSi"
    "gnal\022-\n\002do\030\002 \003(\0132!.Nrmk.IndyFramework.Di"
    "gitalSignal\022,\n\002ai\030\003 \003(\0132 .Nrmk.IndyFrame"
    "work.AnalogSignal\022,\n\002ao\030\004 \003(\0132 .Nrmk.Ind"
    "yFramework.AnalogSignal\0221\n\006end_di\030\005 \003(\0132"
    "!.Nrmk.IndyFramework.EndtoolSignal\0221\n\006en"
    "d_do\030\006 \003(\0132!.Nrmk.IndyFramework.EndtoolS"
    "ignal\0220\n\006end_ai\030\007 \003(\0132 .Nrmk.IndyFramewo"
    "rk.AnalogSignal\0220\n\006end_ao\030\010 \003(\0132 .Nrmk.I"
    "ndyFramework.AnalogSignal\022.\n\010response\030d "
    "\001(\0132\034.Nrmk.IndyFramework.Response\"\237\001\n\rVi"
    "olationData\022\026\n\016violation_code\030\001 \001(\004\022\017\n\007j"
    "_index\030\002 \001(\r\022\016\n\006i_args\030\003 \003(\005\022\016\n\006f_args\030\004"
    " \003(\002\022\025\n\rviolation_str\030\005 \001(\t\022.\n\010response\030"
    "d \001(\0132\034.Nrmk.IndyFramework.Response\"\203\001\n\025"
    "ViolationMessageQueue\022:\n\017violation_queue"
    "\030\001 \003(\0132!.Nrmk.IndyFramework.ViolationDat"
    "a\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFramework"
    ".Response\"\271\001\n\tServoData\022\024\n\014status_codes\030"
    "\001 \003(\t\022\024\n\014temperatures\030\002 \003(\002\022\020\n\010voltages\030"
    "\003 \003(\002\022\020\n\010currents\030\004 \003(\002\022\025\n\rservo_actives"
    "\030\n \003(\010\022\025\n\rbrake_actives\030\013 \003(\010\022.\n\010respons"
    "e\030d \001(\0132\034.Nrmk.IndyFramework.Response\"\273\002"
    "\n\013ProgramData\0227\n\rprogram_state\030\001 \001(\0162 .N"
    "rmk.IndyFramework.ProgramState\022\016\n\006cmd_id"
    "\030\002 \001(\005\022\022\n\nsub_cmd_id\030\003 \001(\005\022\025\n\rrunning_ho"
    "urs\030\004 \001(\r\022\024\n\014running_mins\030\005 \001(\r\022\024\n\014runni"
    "ng_secs\030\006 \001(\r\022\024\n\014program_name\030\007 \001(\t\022\025\n\rp"
    "rogram_alarm\030\010 \001(\t\022\032\n\022program_annotation"
    "\030\t \001(\t\022\023\n\013speed_ratio\030\n \001(\005\022.\n\010response\030"
    "d \001(\0132\034.Nrmk.IndyFramework.Response\"\325\001\n\t"
    "StopState\022<\n\010category\030\001 \001(\0162*.Nrmk.IndyF"
    "ramework.StopState.StopCategory\022.\n\010respo"
    "nse\030d \001(\0132\034.Nrmk.IndyFramework.Response\""
    "Z\n\014StopCategory\022\016\n\nSTOP_CAT_0\020\000\022\016\n\nSTOP_"
    "CAT_1\020\001\022\016\n\nSTOP_CAT_2\020\002\022\032\n\rSTOP_CAT_NONE"
    "\020\377\377\377\377\377\377\377\377\377\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_rtde_5fmsgs_2eproto_deps[2] =
    {
        &::descriptor_table_common_5fmsgs_2eproto,
        &::descriptor_table_device_5fmsgs_2eproto,
};
static ::absl::once_flag descriptor_table_rtde_5fmsgs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rtde_5fmsgs_2eproto = {
    false,
    false,
    2579,
    descriptor_table_protodef_rtde_5fmsgs_2eproto,
    "rtde_msgs.proto",
    &descriptor_table_rtde_5fmsgs_2eproto_once,
    descriptor_table_rtde_5fmsgs_2eproto_deps,
    2,
    11,
    schemas,
    file_default_instances,
    TableStruct_rtde_5fmsgs_2eproto::offsets,
    file_level_metadata_rtde_5fmsgs_2eproto,
    file_level_enum_descriptors_rtde_5fmsgs_2eproto,
    file_level_service_descriptors_rtde_5fmsgs_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rtde_5fmsgs_2eproto_getter() {
  return &descriptor_table_rtde_5fmsgs_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rtde_5fmsgs_2eproto(&descriptor_table_rtde_5fmsgs_2eproto);
namespace Nrmk {
namespace IndyFramework {
const ::google::protobuf::EnumDescriptor* StopState_StopCategory_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_rtde_5fmsgs_2eproto);
  return file_level_enum_descriptors_rtde_5fmsgs_2eproto[0];
}
bool StopState_StopCategory_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr StopState_StopCategory StopState::STOP_CAT_0;
constexpr StopState_StopCategory StopState::STOP_CAT_1;
constexpr StopState_StopCategory StopState::STOP_CAT_2;
constexpr StopState_StopCategory StopState::STOP_CAT_NONE;
constexpr StopState_StopCategory StopState::StopCategory_MIN;
constexpr StopState_StopCategory StopState::StopCategory_MAX;
constexpr int StopState::StopCategory_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class TestRequest::_Internal {
 public:
};

TestRequest::TestRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TestRequest)
}
TestRequest::TestRequest(const TestRequest& from) : ::google::protobuf::Message() {
  TestRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.strval_){},
      decltype(_impl_.intval_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.strval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strval_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strval().empty()) {
    _this->_impl_.strval_.Set(from._internal_strval(), _this->GetArenaForAllocation());
  }
  _this->_impl_.intval_ = from._impl_.intval_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TestRequest)
}
inline void TestRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.strval_){},
      decltype(_impl_.intval_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.strval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strval_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestRequest::~TestRequest() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TestRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strval_.Destroy();
}
void TestRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TestRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.strval_.ClearToEmpty();
  _impl_.intval_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 45, 2> TestRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string strVal = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestRequest, _impl_.strval_)}},
    // int32 intVal = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestRequest, _impl_.intval_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestRequest, _impl_.intval_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 intVal = 1;
    {PROTOBUF_FIELD_OFFSET(TestRequest, _impl_.intval_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string strVal = 2;
    {PROTOBUF_FIELD_OFFSET(TestRequest, _impl_.strval_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\36\0\6\0\0\0\0\0"
    "Nrmk.IndyFramework.TestRequest"
    "strVal"
  }},
};

::uint8_t* TestRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TestRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 intVal = 1;
  if (this->_internal_intval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_intval(), target);
  }

  // string strVal = 2;
  if (!this->_internal_strval().empty()) {
    const std::string& _s = this->_internal_strval();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.TestRequest.strVal");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TestRequest)
  return target;
}

::size_t TestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TestRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strVal = 2;
  if (!this->_internal_strval().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_strval());
  }

  // int32 intVal = 1;
  if (this->_internal_intval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_intval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestRequest::GetClassData() const { return &_class_data_; }


void TestRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestRequest*>(&to_msg);
  auto& from = static_cast<const TestRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TestRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strval().empty()) {
    _this->_internal_set_strval(from._internal_strval());
  }
  if (from._internal_intval() != 0) {
    _this->_internal_set_intval(from._internal_intval());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestRequest::CopyFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestRequest::IsInitialized() const {
  return true;
}

void TestRequest::InternalSwap(TestRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strval_, lhs_arena,
                                       &other->_impl_.strval_, rhs_arena);
        swap(_impl_.intval_, other->_impl_.intval_);
}

::google::protobuf::Metadata TestRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rtde_5fmsgs_2eproto_getter, &descriptor_table_rtde_5fmsgs_2eproto_once,
      file_level_metadata_rtde_5fmsgs_2eproto[0]);
}
// ===================================================================

class TestResponse::_Internal {
 public:
};

TestResponse::TestResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TestResponse)
}
TestResponse::TestResponse(const TestResponse& from) : ::google::protobuf::Message() {
  TestResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      decltype(_impl_.code_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TestResponse)
}
inline void TestResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      decltype(_impl_.code_){::int64_t{0}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TestResponse::~TestResponse() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TestResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}
void TestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TestResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.code_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 43, 2> TestResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string msg = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestResponse, _impl_.msg_)}},
    // int64 code = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TestResponse, _impl_.code_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestResponse, _impl_.code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 code = 1;
    {PROTOBUF_FIELD_OFFSET(TestResponse, _impl_.code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string msg = 2;
    {PROTOBUF_FIELD_OFFSET(TestResponse, _impl_.msg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\37\0\3\0\0\0\0\0"
    "Nrmk.IndyFramework.TestResponse"
    "msg"
  }},
};

::uint8_t* TestResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TestResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 code = 1;
  if (this->_internal_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_code(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.TestResponse.msg");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TestResponse)
  return target;
}

::size_t TestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TestResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  // int64 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestResponse::GetClassData() const { return &_class_data_; }


void TestResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestResponse*>(&to_msg);
  auto& from = static_cast<const TestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TestResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestResponse::CopyFrom(const TestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestResponse::IsInitialized() const {
  return true;
}

void TestResponse::InternalSwap(TestResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
        swap(_impl_.code_, other->_impl_.code_);
}

::google::protobuf::Metadata TestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rtde_5fmsgs_2eproto_getter, &descriptor_table_rtde_5fmsgs_2eproto_once,
      file_level_metadata_rtde_5fmsgs_2eproto[1]);
}
// ===================================================================

class MotionData::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MotionData, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const MotionData* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& MotionData::_Internal::response(const MotionData* msg) {
  return *msg->_impl_.response_;
}
void MotionData::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MotionData::MotionData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MotionData)
}
MotionData::MotionData(const MotionData& from) : ::google::protobuf::Message() {
  MotionData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.traj_state_){},
      decltype(_impl_.traj_progress_){},
      decltype(_impl_.is_in_motion_){},
      decltype(_impl_.is_target_reached_){},
      decltype(_impl_.is_pausing_){},
      decltype(_impl_.is_stopping_){},
      decltype(_impl_.has_motion_){},
      decltype(_impl_.speed_ratio_){},
      decltype(_impl_.motion_id_){},
      decltype(_impl_.remain_distance_){},
      decltype(_impl_.motion_queue_size_){},
      decltype(_impl_.cur_traj_progress_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.traj_state_, &from._impl_.traj_state_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.cur_traj_progress_) -
    reinterpret_cast<char*>(&_impl_.traj_state_)) + sizeof(_impl_.cur_traj_progress_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MotionData)
}
inline void MotionData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.traj_state_){0},
      decltype(_impl_.traj_progress_){0},
      decltype(_impl_.is_in_motion_){false},
      decltype(_impl_.is_target_reached_){false},
      decltype(_impl_.is_pausing_){false},
      decltype(_impl_.is_stopping_){false},
      decltype(_impl_.has_motion_){false},
      decltype(_impl_.speed_ratio_){0},
      decltype(_impl_.motion_id_){0},
      decltype(_impl_.remain_distance_){0},
      decltype(_impl_.motion_queue_size_){0u},
      decltype(_impl_.cur_traj_progress_){0},
  };
}
MotionData::~MotionData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MotionData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MotionData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}
void MotionData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MotionData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MotionData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  ::memset(&_impl_.traj_state_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cur_traj_progress_) -
      reinterpret_cast<char*>(&_impl_.traj_state_)) + sizeof(_impl_.cur_traj_progress_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MotionData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 1, 0, 7> MotionData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MotionData, _impl_._has_bits_),
    0, // no _extensions_
    100, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MotionData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.TrajState traj_state = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MotionData, _impl_.traj_state_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MotionData, _impl_.traj_state_)}},
    // int32 traj_progress = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MotionData, _impl_.traj_progress_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MotionData, _impl_.traj_progress_)}},
    // bool is_in_motion = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MotionData, _impl_.is_in_motion_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MotionData, _impl_.is_in_motion_)}},
    // bool is_target_reached = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MotionData, _impl_.is_target_reached_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MotionData, _impl_.is_target_reached_)}},
    // bool is_pausing = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MotionData, _impl_.is_pausing_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MotionData, _impl_.is_pausing_)}},
    // bool is_stopping = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MotionData, _impl_.is_stopping_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(MotionData, _impl_.is_stopping_)}},
    // bool has_motion = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MotionData, _impl_.has_motion_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(MotionData, _impl_.has_motion_)}},
    // int32 speed_ratio = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MotionData, _impl_.speed_ratio_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(MotionData, _impl_.speed_ratio_)}},
    // int32 motion_id = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MotionData, _impl_.motion_id_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(MotionData, _impl_.motion_id_)}},
    // float remain_distance = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(MotionData, _impl_.remain_distance_)}},
    // uint32 motion_queue_size = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MotionData, _impl_.motion_queue_size_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(MotionData, _impl_.motion_queue_size_)}},
    // int32 cur_traj_progress = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MotionData, _impl_.cur_traj_progress_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(MotionData, _impl_.cur_traj_progress_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 12,
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.TrajState traj_state = 1;
    {PROTOBUF_FIELD_OFFSET(MotionData, _impl_.traj_state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 traj_progress = 2;
    {PROTOBUF_FIELD_OFFSET(MotionData, _impl_.traj_progress_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_in_motion = 3;
    {PROTOBUF_FIELD_OFFSET(MotionData, _impl_.is_in_motion_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_target_reached = 4;
    {PROTOBUF_FIELD_OFFSET(MotionData, _impl_.is_target_reached_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_pausing = 5;
    {PROTOBUF_FIELD_OFFSET(MotionData, _impl_.is_pausing_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_stopping = 6;
    {PROTOBUF_FIELD_OFFSET(MotionData, _impl_.is_stopping_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool has_motion = 7;
    {PROTOBUF_FIELD_OFFSET(MotionData, _impl_.has_motion_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 speed_ratio = 8;
    {PROTOBUF_FIELD_OFFSET(MotionData, _impl_.speed_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 motion_id = 9;
    {PROTOBUF_FIELD_OFFSET(MotionData, _impl_.motion_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float remain_distance = 10;
    {PROTOBUF_FIELD_OFFSET(MotionData, _impl_.remain_distance_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint32 motion_queue_size = 11;
    {PROTOBUF_FIELD_OFFSET(MotionData, _impl_.motion_queue_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int32 cur_traj_progress = 12;
    {PROTOBUF_FIELD_OFFSET(MotionData, _impl_.cur_traj_progress_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(MotionData, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* MotionData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MotionData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.TrajState traj_state = 1;
  if (this->_internal_traj_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_traj_state(), target);
  }

  // int32 traj_progress = 2;
  if (this->_internal_traj_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_traj_progress(), target);
  }

  // bool is_in_motion = 3;
  if (this->_internal_is_in_motion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_in_motion(), target);
  }

  // bool is_target_reached = 4;
  if (this->_internal_is_target_reached() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_is_target_reached(), target);
  }

  // bool is_pausing = 5;
  if (this->_internal_is_pausing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_pausing(), target);
  }

  // bool is_stopping = 6;
  if (this->_internal_is_stopping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_is_stopping(), target);
  }

  // bool has_motion = 7;
  if (this->_internal_has_motion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_has_motion(), target);
  }

  // int32 speed_ratio = 8;
  if (this->_internal_speed_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_speed_ratio(), target);
  }

  // int32 motion_id = 9;
  if (this->_internal_motion_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_motion_id(), target);
  }

  // float remain_distance = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_remain_distance = this->_internal_remain_distance();
  ::uint32_t raw_remain_distance;
  memcpy(&raw_remain_distance, &tmp_remain_distance, sizeof(tmp_remain_distance));
  if (raw_remain_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_remain_distance(), target);
  }

  // uint32 motion_queue_size = 11;
  if (this->_internal_motion_queue_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_motion_queue_size(), target);
  }

  // int32 cur_traj_progress = 12;
  if (this->_internal_cur_traj_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<12>(
            stream, this->_internal_cur_traj_progress(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MotionData)
  return target;
}

::size_t MotionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MotionData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .Nrmk.IndyFramework.TrajState traj_state = 1;
  if (this->_internal_traj_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_traj_state());
  }

  // int32 traj_progress = 2;
  if (this->_internal_traj_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_traj_progress());
  }

  // bool is_in_motion = 3;
  if (this->_internal_is_in_motion() != 0) {
    total_size += 2;
  }

  // bool is_target_reached = 4;
  if (this->_internal_is_target_reached() != 0) {
    total_size += 2;
  }

  // bool is_pausing = 5;
  if (this->_internal_is_pausing() != 0) {
    total_size += 2;
  }

  // bool is_stopping = 6;
  if (this->_internal_is_stopping() != 0) {
    total_size += 2;
  }

  // bool has_motion = 7;
  if (this->_internal_has_motion() != 0) {
    total_size += 2;
  }

  // int32 speed_ratio = 8;
  if (this->_internal_speed_ratio() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_speed_ratio());
  }

  // int32 motion_id = 9;
  if (this->_internal_motion_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_motion_id());
  }

  // float remain_distance = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_remain_distance = this->_internal_remain_distance();
  ::uint32_t raw_remain_distance;
  memcpy(&raw_remain_distance, &tmp_remain_distance, sizeof(tmp_remain_distance));
  if (raw_remain_distance != 0) {
    total_size += 5;
  }

  // uint32 motion_queue_size = 11;
  if (this->_internal_motion_queue_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_motion_queue_size());
  }

  // int32 cur_traj_progress = 12;
  if (this->_internal_cur_traj_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cur_traj_progress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MotionData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MotionData::MergeImpl
};
const ::google::protobuf::Message::ClassData*MotionData::GetClassData() const { return &_class_data_; }


void MotionData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MotionData*>(&to_msg);
  auto& from = static_cast<const MotionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MotionData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_traj_state() != 0) {
    _this->_internal_set_traj_state(from._internal_traj_state());
  }
  if (from._internal_traj_progress() != 0) {
    _this->_internal_set_traj_progress(from._internal_traj_progress());
  }
  if (from._internal_is_in_motion() != 0) {
    _this->_internal_set_is_in_motion(from._internal_is_in_motion());
  }
  if (from._internal_is_target_reached() != 0) {
    _this->_internal_set_is_target_reached(from._internal_is_target_reached());
  }
  if (from._internal_is_pausing() != 0) {
    _this->_internal_set_is_pausing(from._internal_is_pausing());
  }
  if (from._internal_is_stopping() != 0) {
    _this->_internal_set_is_stopping(from._internal_is_stopping());
  }
  if (from._internal_has_motion() != 0) {
    _this->_internal_set_has_motion(from._internal_has_motion());
  }
  if (from._internal_speed_ratio() != 0) {
    _this->_internal_set_speed_ratio(from._internal_speed_ratio());
  }
  if (from._internal_motion_id() != 0) {
    _this->_internal_set_motion_id(from._internal_motion_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_remain_distance = from._internal_remain_distance();
  ::uint32_t raw_remain_distance;
  memcpy(&raw_remain_distance, &tmp_remain_distance, sizeof(tmp_remain_distance));
  if (raw_remain_distance != 0) {
    _this->_internal_set_remain_distance(from._internal_remain_distance());
  }
  if (from._internal_motion_queue_size() != 0) {
    _this->_internal_set_motion_queue_size(from._internal_motion_queue_size());
  }
  if (from._internal_cur_traj_progress() != 0) {
    _this->_internal_set_cur_traj_progress(from._internal_cur_traj_progress());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MotionData::CopyFrom(const MotionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MotionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MotionData::IsInitialized() const {
  return true;
}

void MotionData::InternalSwap(MotionData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionData, _impl_.cur_traj_progress_)
      + sizeof(MotionData::_impl_.cur_traj_progress_)
      - PROTOBUF_FIELD_OFFSET(MotionData, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata MotionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rtde_5fmsgs_2eproto_getter, &descriptor_table_rtde_5fmsgs_2eproto_once,
      file_level_metadata_rtde_5fmsgs_2eproto[2]);
}
// ===================================================================

class ControlData::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ControlData, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const ControlData* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& ControlData::_Internal::response(const ControlData* msg) {
  return *msg->_impl_.response_;
}
void ControlData::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ControlData::ControlData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ControlData)
}
ControlData::ControlData(const ControlData& from) : ::google::protobuf::Message() {
  ControlData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.q_){from._impl_.q_},
      decltype(_impl_.qdot_){from._impl_.qdot_},
      decltype(_impl_.p_){from._impl_.p_},
      decltype(_impl_.pdot_){from._impl_.pdot_},
      decltype(_impl_.ref_frame_){from._impl_.ref_frame_},
      decltype(_impl_.tool_frame_){from._impl_.tool_frame_},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.running_hours_){},
      decltype(_impl_.running_mins_){},
      decltype(_impl_.running_secs_){},
      decltype(_impl_.op_state_){},
      decltype(_impl_.sim_mode_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.running_hours_, &from._impl_.running_hours_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.sim_mode_) -
    reinterpret_cast<char*>(&_impl_.running_hours_)) + sizeof(_impl_.sim_mode_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ControlData)
}
inline void ControlData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.q_){arena},
      decltype(_impl_.qdot_){arena},
      decltype(_impl_.p_){arena},
      decltype(_impl_.pdot_){arena},
      decltype(_impl_.ref_frame_){arena},
      decltype(_impl_.tool_frame_){arena},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.running_hours_){0u},
      decltype(_impl_.running_mins_){0u},
      decltype(_impl_.running_secs_){0u},
      decltype(_impl_.op_state_){0},
      decltype(_impl_.sim_mode_){false},
  };
}
ControlData::~ControlData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ControlData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ControlData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.q_.~RepeatedField();
  _impl_.qdot_.~RepeatedField();
  _impl_.p_.~RepeatedField();
  _impl_.pdot_.~RepeatedField();
  _impl_.ref_frame_.~RepeatedField();
  _impl_.tool_frame_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void ControlData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ControlData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ControlData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_q()->Clear();
  _internal_mutable_qdot()->Clear();
  _internal_mutable_p()->Clear();
  _internal_mutable_pdot()->Clear();
  _internal_mutable_ref_frame()->Clear();
  _internal_mutable_tool_frame()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  ::memset(&_impl_.running_hours_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sim_mode_) -
      reinterpret_cast<char*>(&_impl_.running_hours_)) + sizeof(_impl_.sim_mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ControlData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 1, 0, 7> ControlData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ControlData, _impl_._has_bits_),
    0, // no _extensions_
    100, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293386720,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ControlData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 running_hours = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlData, _impl_.running_hours_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData, _impl_.running_hours_)}},
    // uint32 running_mins = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlData, _impl_.running_mins_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData, _impl_.running_mins_)}},
    // uint32 running_secs = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlData, _impl_.running_secs_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData, _impl_.running_secs_)}},
    // .Nrmk.IndyFramework.OpState op_state = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlData, _impl_.op_state_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData, _impl_.op_state_)}},
    // bool sim_mode = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ControlData, _impl_.sim_mode_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData, _impl_.sim_mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float q = 10;
    {::_pbi::TcParser::FastF32P1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData, _impl_.q_)}},
    // repeated float qdot = 11;
    {::_pbi::TcParser::FastF32P1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData, _impl_.qdot_)}},
    // repeated float p = 12;
    {::_pbi::TcParser::FastF32P1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData, _impl_.p_)}},
    // repeated float pdot = 13;
    {::_pbi::TcParser::FastF32P1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData, _impl_.pdot_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 11,
    65535, 65535
  }}, {{
    // uint32 running_hours = 1;
    {PROTOBUF_FIELD_OFFSET(ControlData, _impl_.running_hours_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 running_mins = 2;
    {PROTOBUF_FIELD_OFFSET(ControlData, _impl_.running_mins_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 running_secs = 3;
    {PROTOBUF_FIELD_OFFSET(ControlData, _impl_.running_secs_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .Nrmk.IndyFramework.OpState op_state = 4;
    {PROTOBUF_FIELD_OFFSET(ControlData, _impl_.op_state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool sim_mode = 5;
    {PROTOBUF_FIELD_OFFSET(ControlData, _impl_.sim_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated float q = 10;
    {PROTOBUF_FIELD_OFFSET(ControlData, _impl_.q_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float qdot = 11;
    {PROTOBUF_FIELD_OFFSET(ControlData, _impl_.qdot_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float p = 12;
    {PROTOBUF_FIELD_OFFSET(ControlData, _impl_.p_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float pdot = 13;
    {PROTOBUF_FIELD_OFFSET(ControlData, _impl_.pdot_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float ref_frame = 20;
    {PROTOBUF_FIELD_OFFSET(ControlData, _impl_.ref_frame_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float tool_frame = 21;
    {PROTOBUF_FIELD_OFFSET(ControlData, _impl_.tool_frame_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(ControlData, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* ControlData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ControlData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 running_hours = 1;
  if (this->_internal_running_hours() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_running_hours(), target);
  }

  // uint32 running_mins = 2;
  if (this->_internal_running_mins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_running_mins(), target);
  }

  // uint32 running_secs = 3;
  if (this->_internal_running_secs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_running_secs(), target);
  }

  // .Nrmk.IndyFramework.OpState op_state = 4;
  if (this->_internal_op_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_op_state(), target);
  }

  // bool sim_mode = 5;
  if (this->_internal_sim_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_sim_mode(), target);
  }

  // repeated float q = 10;
  if (this->_internal_q_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_q(), target);
  }

  // repeated float qdot = 11;
  if (this->_internal_qdot_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_qdot(), target);
  }

  // repeated float p = 12;
  if (this->_internal_p_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_p(), target);
  }

  // repeated float pdot = 13;
  if (this->_internal_pdot_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_pdot(), target);
  }

  // repeated float ref_frame = 20;
  if (this->_internal_ref_frame_size() > 0) {
    target = stream->WriteFixedPacked(20, _internal_ref_frame(), target);
  }

  // repeated float tool_frame = 21;
  if (this->_internal_tool_frame_size() > 0) {
    target = stream->WriteFixedPacked(21, _internal_tool_frame(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ControlData)
  return target;
}

::size_t ControlData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ControlData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float q = 10;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_q_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float qdot = 11;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_qdot_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float p = 12;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_p_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float pdot = 13;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_pdot_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float ref_frame = 20;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_ref_frame_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float tool_frame = 21;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tool_frame_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // uint32 running_hours = 1;
  if (this->_internal_running_hours() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_running_hours());
  }

  // uint32 running_mins = 2;
  if (this->_internal_running_mins() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_running_mins());
  }

  // uint32 running_secs = 3;
  if (this->_internal_running_secs() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_running_secs());
  }

  // .Nrmk.IndyFramework.OpState op_state = 4;
  if (this->_internal_op_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_op_state());
  }

  // bool sim_mode = 5;
  if (this->_internal_sim_mode() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ControlData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ControlData::MergeImpl
};
const ::google::protobuf::Message::ClassData*ControlData::GetClassData() const { return &_class_data_; }


void ControlData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ControlData*>(&to_msg);
  auto& from = static_cast<const ControlData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ControlData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_q()->MergeFrom(from._internal_q());
  _this->_internal_mutable_qdot()->MergeFrom(from._internal_qdot());
  _this->_internal_mutable_p()->MergeFrom(from._internal_p());
  _this->_internal_mutable_pdot()->MergeFrom(from._internal_pdot());
  _this->_internal_mutable_ref_frame()->MergeFrom(from._internal_ref_frame());
  _this->_internal_mutable_tool_frame()->MergeFrom(from._internal_tool_frame());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_running_hours() != 0) {
    _this->_internal_set_running_hours(from._internal_running_hours());
  }
  if (from._internal_running_mins() != 0) {
    _this->_internal_set_running_mins(from._internal_running_mins());
  }
  if (from._internal_running_secs() != 0) {
    _this->_internal_set_running_secs(from._internal_running_secs());
  }
  if (from._internal_op_state() != 0) {
    _this->_internal_set_op_state(from._internal_op_state());
  }
  if (from._internal_sim_mode() != 0) {
    _this->_internal_set_sim_mode(from._internal_sim_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ControlData::CopyFrom(const ControlData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ControlData::IsInitialized() const {
  return true;
}

void ControlData::InternalSwap(ControlData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.q_.InternalSwap(&other->_impl_.q_);
  _impl_.qdot_.InternalSwap(&other->_impl_.qdot_);
  _impl_.p_.InternalSwap(&other->_impl_.p_);
  _impl_.pdot_.InternalSwap(&other->_impl_.pdot_);
  _impl_.ref_frame_.InternalSwap(&other->_impl_.ref_frame_);
  _impl_.tool_frame_.InternalSwap(&other->_impl_.tool_frame_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlData, _impl_.sim_mode_)
      + sizeof(ControlData::_impl_.sim_mode_)
      - PROTOBUF_FIELD_OFFSET(ControlData, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata ControlData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rtde_5fmsgs_2eproto_getter, &descriptor_table_rtde_5fmsgs_2eproto_once,
      file_level_metadata_rtde_5fmsgs_2eproto[3]);
}
// ===================================================================

class ControlData2::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlData2>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ControlData2, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const ControlData2* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& ControlData2::_Internal::response(const ControlData2* msg) {
  return *msg->_impl_.response_;
}
void ControlData2::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ControlData2::ControlData2(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ControlData2)
}
ControlData2::ControlData2(const ControlData2& from) : ::google::protobuf::Message() {
  ControlData2* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.q_){from._impl_.q_},
      decltype(_impl_.qdot_){from._impl_.qdot_},
      decltype(_impl_.qddot_){from._impl_.qddot_},
      decltype(_impl_.qdes_){from._impl_.qdes_},
      decltype(_impl_.qdotdes_){from._impl_.qdotdes_},
      decltype(_impl_.qddotdes_){from._impl_.qddotdes_},
      decltype(_impl_.p_){from._impl_.p_},
      decltype(_impl_.pdot_){from._impl_.pdot_},
      decltype(_impl_.pddot_){from._impl_.pddot_},
      decltype(_impl_.pdes_){from._impl_.pdes_},
      decltype(_impl_.pdotdes_){from._impl_.pdotdes_},
      decltype(_impl_.pddotdes_){from._impl_.pddotdes_},
      decltype(_impl_.tau_){from._impl_.tau_},
      decltype(_impl_.tau_act_){from._impl_.tau_act_},
      decltype(_impl_.tau_ext_){from._impl_.tau_ext_},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ControlData2)
}
inline void ControlData2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.q_){arena},
      decltype(_impl_.qdot_){arena},
      decltype(_impl_.qddot_){arena},
      decltype(_impl_.qdes_){arena},
      decltype(_impl_.qdotdes_){arena},
      decltype(_impl_.qddotdes_){arena},
      decltype(_impl_.p_){arena},
      decltype(_impl_.pdot_){arena},
      decltype(_impl_.pddot_){arena},
      decltype(_impl_.pdes_){arena},
      decltype(_impl_.pdotdes_){arena},
      decltype(_impl_.pddotdes_){arena},
      decltype(_impl_.tau_){arena},
      decltype(_impl_.tau_act_){arena},
      decltype(_impl_.tau_ext_){arena},
      decltype(_impl_.response_){nullptr},
  };
}
ControlData2::~ControlData2() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ControlData2)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ControlData2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.q_.~RepeatedField();
  _impl_.qdot_.~RepeatedField();
  _impl_.qddot_.~RepeatedField();
  _impl_.qdes_.~RepeatedField();
  _impl_.qdotdes_.~RepeatedField();
  _impl_.qddotdes_.~RepeatedField();
  _impl_.p_.~RepeatedField();
  _impl_.pdot_.~RepeatedField();
  _impl_.pddot_.~RepeatedField();
  _impl_.pdes_.~RepeatedField();
  _impl_.pdotdes_.~RepeatedField();
  _impl_.pddotdes_.~RepeatedField();
  _impl_.tau_.~RepeatedField();
  _impl_.tau_act_.~RepeatedField();
  _impl_.tau_ext_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void ControlData2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ControlData2::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ControlData2)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_q()->Clear();
  _internal_mutable_qdot()->Clear();
  _internal_mutable_qddot()->Clear();
  _internal_mutable_qdes()->Clear();
  _internal_mutable_qdotdes()->Clear();
  _internal_mutable_qddotdes()->Clear();
  _internal_mutable_p()->Clear();
  _internal_mutable_pdot()->Clear();
  _internal_mutable_pddot()->Clear();
  _internal_mutable_pdes()->Clear();
  _internal_mutable_pdotdes()->Clear();
  _internal_mutable_pddotdes()->Clear();
  _internal_mutable_tau()->Clear();
  _internal_mutable_tau_act()->Clear();
  _internal_mutable_tau_ext()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ControlData2::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 16, 1, 0, 7> ControlData2::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ControlData2, _impl_._has_bits_),
    0, // no _extensions_
    100, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4291264960,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ControlData2_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float q = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.q_)}},
    // repeated float qdot = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.qdot_)}},
    // repeated float qddot = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.qddot_)}},
    // repeated float qdes = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.qdes_)}},
    // repeated float qdotdes = 5;
    {::_pbi::TcParser::FastF32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.qdotdes_)}},
    // repeated float qddotdes = 6;
    {::_pbi::TcParser::FastF32P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.qddotdes_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float p = 10;
    {::_pbi::TcParser::FastF32P1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.p_)}},
    // repeated float pdot = 11;
    {::_pbi::TcParser::FastF32P1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.pdot_)}},
    // repeated float pddot = 12;
    {::_pbi::TcParser::FastF32P1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.pddot_)}},
    // repeated float pdes = 13;
    {::_pbi::TcParser::FastF32P1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.pdes_)}},
    // repeated float pdotdes = 14;
    {::_pbi::TcParser::FastF32P1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.pdotdes_)}},
    // repeated float pddotdes = 15;
    {::_pbi::TcParser::FastF32P1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.pddotdes_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float tau = 20;
    {::_pbi::TcParser::FastF32P2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.tau_)}},
    // repeated float tau_act = 21;
    {::_pbi::TcParser::FastF32P2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.tau_act_)}},
    // repeated float tau_ext = 22;
    {::_pbi::TcParser::FastF32P2,
     {434, 63, 0, PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.tau_ext_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 15,
    65535, 65535
  }}, {{
    // repeated float q = 1;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.q_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float qdot = 2;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.qdot_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float qddot = 3;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.qddot_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float qdes = 4;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.qdes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float qdotdes = 5;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.qdotdes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float qddotdes = 6;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.qddotdes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float p = 10;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.p_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float pdot = 11;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.pdot_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float pddot = 12;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.pddot_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float pdes = 13;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.pdes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float pdotdes = 14;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.pdotdes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float pddotdes = 15;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.pddotdes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float tau = 20;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.tau_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float tau_act = 21;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.tau_act_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float tau_ext = 22;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.tau_ext_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(ControlData2, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* ControlData2::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ControlData2)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float q = 1;
  if (this->_internal_q_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_q(), target);
  }

  // repeated float qdot = 2;
  if (this->_internal_qdot_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_qdot(), target);
  }

  // repeated float qddot = 3;
  if (this->_internal_qddot_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_qddot(), target);
  }

  // repeated float qdes = 4;
  if (this->_internal_qdes_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_qdes(), target);
  }

  // repeated float qdotdes = 5;
  if (this->_internal_qdotdes_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_qdotdes(), target);
  }

  // repeated float qddotdes = 6;
  if (this->_internal_qddotdes_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_qddotdes(), target);
  }

  // repeated float p = 10;
  if (this->_internal_p_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_p(), target);
  }

  // repeated float pdot = 11;
  if (this->_internal_pdot_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_pdot(), target);
  }

  // repeated float pddot = 12;
  if (this->_internal_pddot_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_pddot(), target);
  }

  // repeated float pdes = 13;
  if (this->_internal_pdes_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_pdes(), target);
  }

  // repeated float pdotdes = 14;
  if (this->_internal_pdotdes_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_pdotdes(), target);
  }

  // repeated float pddotdes = 15;
  if (this->_internal_pddotdes_size() > 0) {
    target = stream->WriteFixedPacked(15, _internal_pddotdes(), target);
  }

  // repeated float tau = 20;
  if (this->_internal_tau_size() > 0) {
    target = stream->WriteFixedPacked(20, _internal_tau(), target);
  }

  // repeated float tau_act = 21;
  if (this->_internal_tau_act_size() > 0) {
    target = stream->WriteFixedPacked(21, _internal_tau_act(), target);
  }

  // repeated float tau_ext = 22;
  if (this->_internal_tau_ext_size() > 0) {
    target = stream->WriteFixedPacked(22, _internal_tau_ext(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ControlData2)
  return target;
}

::size_t ControlData2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ControlData2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float q = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_q_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float qdot = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_qdot_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float qddot = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_qddot_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float qdes = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_qdes_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float qdotdes = 5;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_qdotdes_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float qddotdes = 6;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_qddotdes_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float p = 10;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_p_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float pdot = 11;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_pdot_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float pddot = 12;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_pddot_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float pdes = 13;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_pdes_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float pdotdes = 14;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_pdotdes_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float pddotdes = 15;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_pddotdes_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float tau = 20;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tau_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float tau_act = 21;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tau_act_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float tau_ext = 22;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tau_ext_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ControlData2::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ControlData2::MergeImpl
};
const ::google::protobuf::Message::ClassData*ControlData2::GetClassData() const { return &_class_data_; }


void ControlData2::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ControlData2*>(&to_msg);
  auto& from = static_cast<const ControlData2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ControlData2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_q()->MergeFrom(from._internal_q());
  _this->_internal_mutable_qdot()->MergeFrom(from._internal_qdot());
  _this->_internal_mutable_qddot()->MergeFrom(from._internal_qddot());
  _this->_internal_mutable_qdes()->MergeFrom(from._internal_qdes());
  _this->_internal_mutable_qdotdes()->MergeFrom(from._internal_qdotdes());
  _this->_internal_mutable_qddotdes()->MergeFrom(from._internal_qddotdes());
  _this->_internal_mutable_p()->MergeFrom(from._internal_p());
  _this->_internal_mutable_pdot()->MergeFrom(from._internal_pdot());
  _this->_internal_mutable_pddot()->MergeFrom(from._internal_pddot());
  _this->_internal_mutable_pdes()->MergeFrom(from._internal_pdes());
  _this->_internal_mutable_pdotdes()->MergeFrom(from._internal_pdotdes());
  _this->_internal_mutable_pddotdes()->MergeFrom(from._internal_pddotdes());
  _this->_internal_mutable_tau()->MergeFrom(from._internal_tau());
  _this->_internal_mutable_tau_act()->MergeFrom(from._internal_tau_act());
  _this->_internal_mutable_tau_ext()->MergeFrom(from._internal_tau_ext());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ControlData2::CopyFrom(const ControlData2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ControlData2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ControlData2::IsInitialized() const {
  return true;
}

void ControlData2::InternalSwap(ControlData2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.q_.InternalSwap(&other->_impl_.q_);
  _impl_.qdot_.InternalSwap(&other->_impl_.qdot_);
  _impl_.qddot_.InternalSwap(&other->_impl_.qddot_);
  _impl_.qdes_.InternalSwap(&other->_impl_.qdes_);
  _impl_.qdotdes_.InternalSwap(&other->_impl_.qdotdes_);
  _impl_.qddotdes_.InternalSwap(&other->_impl_.qddotdes_);
  _impl_.p_.InternalSwap(&other->_impl_.p_);
  _impl_.pdot_.InternalSwap(&other->_impl_.pdot_);
  _impl_.pddot_.InternalSwap(&other->_impl_.pddot_);
  _impl_.pdes_.InternalSwap(&other->_impl_.pdes_);
  _impl_.pdotdes_.InternalSwap(&other->_impl_.pdotdes_);
  _impl_.pddotdes_.InternalSwap(&other->_impl_.pddotdes_);
  _impl_.tau_.InternalSwap(&other->_impl_.tau_);
  _impl_.tau_act_.InternalSwap(&other->_impl_.tau_act_);
  _impl_.tau_ext_.InternalSwap(&other->_impl_.tau_ext_);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata ControlData2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rtde_5fmsgs_2eproto_getter, &descriptor_table_rtde_5fmsgs_2eproto_once,
      file_level_metadata_rtde_5fmsgs_2eproto[4]);
}
// ===================================================================

class IOData::_Internal {
 public:
  using HasBits = decltype(std::declval<IOData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IOData, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const IOData* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& IOData::_Internal::response(const IOData* msg) {
  return *msg->_impl_.response_;
}
void IOData::clear_di() {
  _internal_mutable_di()->Clear();
}
void IOData::clear_do_() {
  _internal_mutable_do_()->Clear();
}
void IOData::clear_ai() {
  _internal_mutable_ai()->Clear();
}
void IOData::clear_ao() {
  _internal_mutable_ao()->Clear();
}
void IOData::clear_end_di() {
  _internal_mutable_end_di()->Clear();
}
void IOData::clear_end_do() {
  _internal_mutable_end_do()->Clear();
}
void IOData::clear_end_ai() {
  _internal_mutable_end_ai()->Clear();
}
void IOData::clear_end_ao() {
  _internal_mutable_end_ao()->Clear();
}
void IOData::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
IOData::IOData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.IOData)
}
IOData::IOData(const IOData& from) : ::google::protobuf::Message() {
  IOData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.di_){from._impl_.di_},
      decltype(_impl_.do__){from._impl_.do__},
      decltype(_impl_.ai_){from._impl_.ai_},
      decltype(_impl_.ao_){from._impl_.ao_},
      decltype(_impl_.end_di_){from._impl_.end_di_},
      decltype(_impl_.end_do_){from._impl_.end_do_},
      decltype(_impl_.end_ai_){from._impl_.end_ai_},
      decltype(_impl_.end_ao_){from._impl_.end_ao_},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.IOData)
}
inline void IOData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.di_){arena},
      decltype(_impl_.do__){arena},
      decltype(_impl_.ai_){arena},
      decltype(_impl_.ao_){arena},
      decltype(_impl_.end_di_){arena},
      decltype(_impl_.end_do_){arena},
      decltype(_impl_.end_ai_){arena},
      decltype(_impl_.end_ao_){arena},
      decltype(_impl_.response_){nullptr},
  };
}
IOData::~IOData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.IOData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IOData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.di_.~RepeatedPtrField();
  _impl_.do__.~RepeatedPtrField();
  _impl_.ai_.~RepeatedPtrField();
  _impl_.ao_.~RepeatedPtrField();
  _impl_.end_di_.~RepeatedPtrField();
  _impl_.end_do_.~RepeatedPtrField();
  _impl_.end_ai_.~RepeatedPtrField();
  _impl_.end_ao_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void IOData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void IOData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.IOData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_di()->Clear();
  _internal_mutable_do_()->Clear();
  _internal_mutable_ai()->Clear();
  _internal_mutable_ao()->Clear();
  _internal_mutable_end_di()->Clear();
  _internal_mutable_end_do()->Clear();
  _internal_mutable_end_ai()->Clear();
  _internal_mutable_end_ao()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* IOData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 9, 9, 0, 7> IOData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IOData, _impl_._has_bits_),
    0, // no _extensions_
    100, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_IOData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.AnalogSignal end_ao = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 7, PROTOBUF_FIELD_OFFSET(IOData, _impl_.end_ao_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(IOData, _impl_.di_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal do = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(IOData, _impl_.do__)}},
    // repeated .Nrmk.IndyFramework.AnalogSignal ai = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(IOData, _impl_.ai_)}},
    // repeated .Nrmk.IndyFramework.AnalogSignal ao = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(IOData, _impl_.ao_)}},
    // repeated .Nrmk.IndyFramework.EndtoolSignal end_di = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 4, PROTOBUF_FIELD_OFFSET(IOData, _impl_.end_di_)}},
    // repeated .Nrmk.IndyFramework.EndtoolSignal end_do = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 5, PROTOBUF_FIELD_OFFSET(IOData, _impl_.end_do_)}},
    // repeated .Nrmk.IndyFramework.AnalogSignal end_ai = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 6, PROTOBUF_FIELD_OFFSET(IOData, _impl_.end_ai_)}},
  }}, {{
    100, 0, 1,
    65534, 8,
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
    {PROTOBUF_FIELD_OFFSET(IOData, _impl_.di_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.DigitalSignal do = 2;
    {PROTOBUF_FIELD_OFFSET(IOData, _impl_.do__), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.AnalogSignal ai = 3;
    {PROTOBUF_FIELD_OFFSET(IOData, _impl_.ai_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.AnalogSignal ao = 4;
    {PROTOBUF_FIELD_OFFSET(IOData, _impl_.ao_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.EndtoolSignal end_di = 5;
    {PROTOBUF_FIELD_OFFSET(IOData, _impl_.end_di_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.EndtoolSignal end_do = 6;
    {PROTOBUF_FIELD_OFFSET(IOData, _impl_.end_do_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.AnalogSignal end_ai = 7;
    {PROTOBUF_FIELD_OFFSET(IOData, _impl_.end_ai_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.AnalogSignal end_ao = 8;
    {PROTOBUF_FIELD_OFFSET(IOData, _impl_.end_ao_), -1, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(IOData, _impl_.response_), _Internal::kHasBitsOffset + 0, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::EndtoolSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::EndtoolSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* IOData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.IOData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_di_size()); i < n; i++) {
    const auto& repfield = this->_internal_di().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal do = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_do__size()); i < n; i++) {
    const auto& repfield = this->_internal_do_().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal ai = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ai_size()); i < n; i++) {
    const auto& repfield = this->_internal_ai().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal ao = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ao_size()); i < n; i++) {
    const auto& repfield = this->_internal_ao().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.EndtoolSignal end_di = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_end_di_size()); i < n; i++) {
    const auto& repfield = this->_internal_end_di().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.EndtoolSignal end_do = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_end_do_size()); i < n; i++) {
    const auto& repfield = this->_internal_end_do().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal end_ai = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_end_ai_size()); i < n; i++) {
    const auto& repfield = this->_internal_end_ai().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal end_ao = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_end_ao_size()); i < n; i++) {
    const auto& repfield = this->_internal_end_ao().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.IOData)
  return target;
}

::size_t IOData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.IOData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
  total_size += 1UL * this->_internal_di_size();
  for (const auto& msg : this->_internal_di()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.DigitalSignal do = 2;
  total_size += 1UL * this->_internal_do__size();
  for (const auto& msg : this->_internal_do_()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.AnalogSignal ai = 3;
  total_size += 1UL * this->_internal_ai_size();
  for (const auto& msg : this->_internal_ai()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.AnalogSignal ao = 4;
  total_size += 1UL * this->_internal_ao_size();
  for (const auto& msg : this->_internal_ao()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.EndtoolSignal end_di = 5;
  total_size += 1UL * this->_internal_end_di_size();
  for (const auto& msg : this->_internal_end_di()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.EndtoolSignal end_do = 6;
  total_size += 1UL * this->_internal_end_do_size();
  for (const auto& msg : this->_internal_end_do()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.AnalogSignal end_ai = 7;
  total_size += 1UL * this->_internal_end_ai_size();
  for (const auto& msg : this->_internal_end_ai()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.AnalogSignal end_ao = 8;
  total_size += 1UL * this->_internal_end_ao_size();
  for (const auto& msg : this->_internal_end_ao()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData IOData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    IOData::MergeImpl
};
const ::google::protobuf::Message::ClassData*IOData::GetClassData() const { return &_class_data_; }


void IOData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<IOData*>(&to_msg);
  auto& from = static_cast<const IOData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.IOData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_di()->MergeFrom(from._internal_di());
  _this->_internal_mutable_do_()->MergeFrom(from._internal_do_());
  _this->_internal_mutable_ai()->MergeFrom(from._internal_ai());
  _this->_internal_mutable_ao()->MergeFrom(from._internal_ao());
  _this->_internal_mutable_end_di()->MergeFrom(from._internal_end_di());
  _this->_internal_mutable_end_do()->MergeFrom(from._internal_end_do());
  _this->_internal_mutable_end_ai()->MergeFrom(from._internal_end_ai());
  _this->_internal_mutable_end_ao()->MergeFrom(from._internal_end_ao());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IOData::CopyFrom(const IOData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.IOData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IOData::IsInitialized() const {
  return true;
}

void IOData::InternalSwap(IOData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.di_.InternalSwap(&other->_impl_.di_);
  _impl_.do__.InternalSwap(&other->_impl_.do__);
  _impl_.ai_.InternalSwap(&other->_impl_.ai_);
  _impl_.ao_.InternalSwap(&other->_impl_.ao_);
  _impl_.end_di_.InternalSwap(&other->_impl_.end_di_);
  _impl_.end_do_.InternalSwap(&other->_impl_.end_do_);
  _impl_.end_ai_.InternalSwap(&other->_impl_.end_ai_);
  _impl_.end_ao_.InternalSwap(&other->_impl_.end_ao_);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata IOData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rtde_5fmsgs_2eproto_getter, &descriptor_table_rtde_5fmsgs_2eproto_once,
      file_level_metadata_rtde_5fmsgs_2eproto[5]);
}
// ===================================================================

class ViolationData::_Internal {
 public:
  using HasBits = decltype(std::declval<ViolationData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViolationData, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const ViolationData* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& ViolationData::_Internal::response(const ViolationData* msg) {
  return *msg->_impl_.response_;
}
void ViolationData::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViolationData::ViolationData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ViolationData)
}
ViolationData::ViolationData(const ViolationData& from) : ::google::protobuf::Message() {
  ViolationData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.i_args_){from._impl_.i_args_},
      /* _impl_._i_args_cached_byte_size_ = */ {0},
      decltype(_impl_.f_args_){from._impl_.f_args_},
      decltype(_impl_.violation_str_){},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.violation_code_){},
      decltype(_impl_.j_index_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.violation_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.violation_str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_violation_str().empty()) {
    _this->_impl_.violation_str_.Set(from._internal_violation_str(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.violation_code_, &from._impl_.violation_code_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.j_index_) -
    reinterpret_cast<char*>(&_impl_.violation_code_)) + sizeof(_impl_.j_index_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ViolationData)
}
inline void ViolationData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.i_args_){arena},
      /* _impl_._i_args_cached_byte_size_ = */ {0},
      decltype(_impl_.f_args_){arena},
      decltype(_impl_.violation_str_){},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.violation_code_){::uint64_t{0u}},
      decltype(_impl_.j_index_){0u},
  };
  _impl_.violation_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.violation_str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ViolationData::~ViolationData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ViolationData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ViolationData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.i_args_.~RepeatedField();
  _impl_.f_args_.~RepeatedField();
  _impl_.violation_str_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void ViolationData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ViolationData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ViolationData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_i_args()->Clear();
  _internal_mutable_f_args()->Clear();
  _impl_.violation_str_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  ::memset(&_impl_.violation_code_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.j_index_) -
      reinterpret_cast<char*>(&_impl_.violation_code_)) + sizeof(_impl_.j_index_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ViolationData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 54, 7> ViolationData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ViolationData, _impl_._has_bits_),
    0, // no _extensions_
    100, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ViolationData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 violation_code = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ViolationData, _impl_.violation_code_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ViolationData, _impl_.violation_code_)}},
    // uint32 j_index = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ViolationData, _impl_.j_index_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ViolationData, _impl_.j_index_)}},
    // repeated int32 i_args = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ViolationData, _impl_.i_args_)}},
    // repeated float f_args = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ViolationData, _impl_.f_args_)}},
    // string violation_str = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ViolationData, _impl_.violation_str_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 5,
    65535, 65535
  }}, {{
    // uint64 violation_code = 1;
    {PROTOBUF_FIELD_OFFSET(ViolationData, _impl_.violation_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint32 j_index = 2;
    {PROTOBUF_FIELD_OFFSET(ViolationData, _impl_.j_index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated int32 i_args = 3;
    {PROTOBUF_FIELD_OFFSET(ViolationData, _impl_.i_args_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated float f_args = 4;
    {PROTOBUF_FIELD_OFFSET(ViolationData, _impl_.f_args_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // string violation_str = 5;
    {PROTOBUF_FIELD_OFFSET(ViolationData, _impl_.violation_str_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(ViolationData, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
    "\40\0\0\0\0\15\0\0"
    "Nrmk.IndyFramework.ViolationData"
    "violation_str"
  }},
};

::uint8_t* ViolationData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ViolationData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 violation_code = 1;
  if (this->_internal_violation_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_violation_code(), target);
  }

  // uint32 j_index = 2;
  if (this->_internal_j_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_j_index(), target);
  }

  // repeated int32 i_args = 3;
  {
    int byte_size = _impl_._i_args_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(3, _internal_i_args(),
                                                 byte_size, target);
    }
  }

  // repeated float f_args = 4;
  if (this->_internal_f_args_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_f_args(), target);
  }

  // string violation_str = 5;
  if (!this->_internal_violation_str().empty()) {
    const std::string& _s = this->_internal_violation_str();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.ViolationData.violation_str");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ViolationData)
  return target;
}

::size_t ViolationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ViolationData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 i_args = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_i_args())
    ;
    _impl_._i_args_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float f_args = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_f_args_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string violation_str = 5;
  if (!this->_internal_violation_str().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_violation_str());
  }

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // uint64 violation_code = 1;
  if (this->_internal_violation_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_violation_code());
  }

  // uint32 j_index = 2;
  if (this->_internal_j_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_j_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ViolationData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ViolationData::MergeImpl
};
const ::google::protobuf::Message::ClassData*ViolationData::GetClassData() const { return &_class_data_; }


void ViolationData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ViolationData*>(&to_msg);
  auto& from = static_cast<const ViolationData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ViolationData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_i_args()->MergeFrom(from._internal_i_args());
  _this->_internal_mutable_f_args()->MergeFrom(from._internal_f_args());
  if (!from._internal_violation_str().empty()) {
    _this->_internal_set_violation_str(from._internal_violation_str());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_violation_code() != 0) {
    _this->_internal_set_violation_code(from._internal_violation_code());
  }
  if (from._internal_j_index() != 0) {
    _this->_internal_set_j_index(from._internal_j_index());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ViolationData::CopyFrom(const ViolationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ViolationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ViolationData::IsInitialized() const {
  return true;
}

void ViolationData::InternalSwap(ViolationData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.i_args_.InternalSwap(&other->_impl_.i_args_);
  _impl_.f_args_.InternalSwap(&other->_impl_.f_args_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.violation_str_, lhs_arena,
                                       &other->_impl_.violation_str_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViolationData, _impl_.j_index_)
      + sizeof(ViolationData::_impl_.j_index_)
      - PROTOBUF_FIELD_OFFSET(ViolationData, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata ViolationData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rtde_5fmsgs_2eproto_getter, &descriptor_table_rtde_5fmsgs_2eproto_once,
      file_level_metadata_rtde_5fmsgs_2eproto[6]);
}
// ===================================================================

class ViolationMessageQueue::_Internal {
 public:
  using HasBits = decltype(std::declval<ViolationMessageQueue>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ViolationMessageQueue, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const ViolationMessageQueue* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& ViolationMessageQueue::_Internal::response(const ViolationMessageQueue* msg) {
  return *msg->_impl_.response_;
}
void ViolationMessageQueue::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViolationMessageQueue::ViolationMessageQueue(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ViolationMessageQueue)
}
ViolationMessageQueue::ViolationMessageQueue(const ViolationMessageQueue& from) : ::google::protobuf::Message() {
  ViolationMessageQueue* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.violation_queue_){from._impl_.violation_queue_},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ViolationMessageQueue)
}
inline void ViolationMessageQueue::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.violation_queue_){arena},
      decltype(_impl_.response_){nullptr},
  };
}
ViolationMessageQueue::~ViolationMessageQueue() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ViolationMessageQueue)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ViolationMessageQueue::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.violation_queue_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void ViolationMessageQueue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ViolationMessageQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ViolationMessageQueue)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_violation_queue()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ViolationMessageQueue::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 7> ViolationMessageQueue::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ViolationMessageQueue, _impl_._has_bits_),
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ViolationMessageQueue_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 1, PROTOBUF_FIELD_OFFSET(ViolationMessageQueue, _impl_.response_)}},
    // repeated .Nrmk.IndyFramework.ViolationData violation_queue = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ViolationMessageQueue, _impl_.violation_queue_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.ViolationData violation_queue = 1;
    {PROTOBUF_FIELD_OFFSET(ViolationMessageQueue, _impl_.violation_queue_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(ViolationMessageQueue, _impl_.response_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::ViolationData>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* ViolationMessageQueue::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ViolationMessageQueue)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.ViolationData violation_queue = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_violation_queue_size()); i < n; i++) {
    const auto& repfield = this->_internal_violation_queue().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ViolationMessageQueue)
  return target;
}

::size_t ViolationMessageQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ViolationMessageQueue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.ViolationData violation_queue = 1;
  total_size += 1UL * this->_internal_violation_queue_size();
  for (const auto& msg : this->_internal_violation_queue()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ViolationMessageQueue::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ViolationMessageQueue::MergeImpl
};
const ::google::protobuf::Message::ClassData*ViolationMessageQueue::GetClassData() const { return &_class_data_; }


void ViolationMessageQueue::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ViolationMessageQueue*>(&to_msg);
  auto& from = static_cast<const ViolationMessageQueue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ViolationMessageQueue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_violation_queue()->MergeFrom(from._internal_violation_queue());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ViolationMessageQueue::CopyFrom(const ViolationMessageQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ViolationMessageQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ViolationMessageQueue::IsInitialized() const {
  return true;
}

void ViolationMessageQueue::InternalSwap(ViolationMessageQueue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.violation_queue_.InternalSwap(&other->_impl_.violation_queue_);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata ViolationMessageQueue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rtde_5fmsgs_2eproto_getter, &descriptor_table_rtde_5fmsgs_2eproto_once,
      file_level_metadata_rtde_5fmsgs_2eproto[7]);
}
// ===================================================================

class ServoData::_Internal {
 public:
  using HasBits = decltype(std::declval<ServoData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ServoData, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const ServoData* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& ServoData::_Internal::response(const ServoData* msg) {
  return *msg->_impl_.response_;
}
void ServoData::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ServoData::ServoData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ServoData)
}
ServoData::ServoData(const ServoData& from) : ::google::protobuf::Message() {
  ServoData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.status_codes_){from._impl_.status_codes_},
      decltype(_impl_.temperatures_){from._impl_.temperatures_},
      decltype(_impl_.voltages_){from._impl_.voltages_},
      decltype(_impl_.currents_){from._impl_.currents_},
      decltype(_impl_.servo_actives_){from._impl_.servo_actives_},
      decltype(_impl_.brake_actives_){from._impl_.brake_actives_},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ServoData)
}
inline void ServoData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.status_codes_){arena},
      decltype(_impl_.temperatures_){arena},
      decltype(_impl_.voltages_){arena},
      decltype(_impl_.currents_){arena},
      decltype(_impl_.servo_actives_){arena},
      decltype(_impl_.brake_actives_){arena},
      decltype(_impl_.response_){nullptr},
  };
}
ServoData::~ServoData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ServoData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ServoData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_status_codes()->~RepeatedPtrField();
  _impl_.temperatures_.~RepeatedField();
  _impl_.voltages_.~RepeatedField();
  _impl_.currents_.~RepeatedField();
  _impl_.servo_actives_.~RepeatedField();
  _impl_.brake_actives_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void ServoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ServoData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ServoData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_status_codes()->Clear();
  _internal_mutable_temperatures()->Clear();
  _internal_mutable_voltages()->Clear();
  _internal_mutable_currents()->Clear();
  _internal_mutable_servo_actives()->Clear();
  _internal_mutable_brake_actives()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ServoData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 7, 1, 49, 7> ServoData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ServoData, _impl_._has_bits_),
    0, // no _extensions_
    100, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965744,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ServoData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float currents = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ServoData, _impl_.currents_)}},
    // repeated string status_codes = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ServoData, _impl_.status_codes_)}},
    // repeated float temperatures = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ServoData, _impl_.temperatures_)}},
    // repeated float voltages = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ServoData, _impl_.voltages_)}},
  }}, {{
    100, 0, 1,
    65534, 6,
    65535, 65535
  }}, {{
    // repeated string status_codes = 1;
    {PROTOBUF_FIELD_OFFSET(ServoData, _impl_.status_codes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated float temperatures = 2;
    {PROTOBUF_FIELD_OFFSET(ServoData, _impl_.temperatures_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float voltages = 3;
    {PROTOBUF_FIELD_OFFSET(ServoData, _impl_.voltages_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float currents = 4;
    {PROTOBUF_FIELD_OFFSET(ServoData, _impl_.currents_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated bool servo_actives = 10;
    {PROTOBUF_FIELD_OFFSET(ServoData, _impl_.servo_actives_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
    // repeated bool brake_actives = 11;
    {PROTOBUF_FIELD_OFFSET(ServoData, _impl_.brake_actives_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(ServoData, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
    "\34\14\0\0\0\0\0\0"
    "Nrmk.IndyFramework.ServoData"
    "status_codes"
  }},
};

::uint8_t* ServoData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ServoData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string status_codes = 1;
  for (int i = 0, n = this->_internal_status_codes_size(); i < n; ++i) {
    const auto& s = this->_internal_status_codes().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.ServoData.status_codes");
    target = stream->WriteString(1, s, target);
  }

  // repeated float temperatures = 2;
  if (this->_internal_temperatures_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_temperatures(), target);
  }

  // repeated float voltages = 3;
  if (this->_internal_voltages_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_voltages(), target);
  }

  // repeated float currents = 4;
  if (this->_internal_currents_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_currents(), target);
  }

  // repeated bool servo_actives = 10;
  if (this->_internal_servo_actives_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_servo_actives(), target);
  }

  // repeated bool brake_actives = 11;
  if (this->_internal_brake_actives_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_brake_actives(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ServoData)
  return target;
}

::size_t ServoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ServoData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string status_codes = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_status_codes().size());
  for (int i = 0, n = _internal_status_codes().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_status_codes().Get(i));
  }
  // repeated float temperatures = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_temperatures_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float voltages = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_voltages_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float currents = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_currents_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated bool servo_actives = 10;
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_servo_actives_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated bool brake_actives = 11;
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_brake_actives_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ServoData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ServoData::MergeImpl
};
const ::google::protobuf::Message::ClassData*ServoData::GetClassData() const { return &_class_data_; }


void ServoData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ServoData*>(&to_msg);
  auto& from = static_cast<const ServoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ServoData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_status_codes()->MergeFrom(from._internal_status_codes());
  _this->_internal_mutable_temperatures()->MergeFrom(from._internal_temperatures());
  _this->_internal_mutable_voltages()->MergeFrom(from._internal_voltages());
  _this->_internal_mutable_currents()->MergeFrom(from._internal_currents());
  _this->_internal_mutable_servo_actives()->MergeFrom(from._internal_servo_actives());
  _this->_internal_mutable_brake_actives()->MergeFrom(from._internal_brake_actives());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServoData::CopyFrom(const ServoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ServoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ServoData::IsInitialized() const {
  return true;
}

void ServoData::InternalSwap(ServoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.status_codes_.InternalSwap(&other->_impl_.status_codes_);
  _impl_.temperatures_.InternalSwap(&other->_impl_.temperatures_);
  _impl_.voltages_.InternalSwap(&other->_impl_.voltages_);
  _impl_.currents_.InternalSwap(&other->_impl_.currents_);
  _impl_.servo_actives_.InternalSwap(&other->_impl_.servo_actives_);
  _impl_.brake_actives_.InternalSwap(&other->_impl_.brake_actives_);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata ServoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rtde_5fmsgs_2eproto_getter, &descriptor_table_rtde_5fmsgs_2eproto_once,
      file_level_metadata_rtde_5fmsgs_2eproto[8]);
}
// ===================================================================

class ProgramData::_Internal {
 public:
  using HasBits = decltype(std::declval<ProgramData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProgramData, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const ProgramData* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& ProgramData::_Internal::response(const ProgramData* msg) {
  return *msg->_impl_.response_;
}
void ProgramData::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ProgramData::ProgramData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ProgramData)
}
ProgramData::ProgramData(const ProgramData& from) : ::google::protobuf::Message() {
  ProgramData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.program_name_){},
      decltype(_impl_.program_alarm_){},
      decltype(_impl_.program_annotation_){},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.program_state_){},
      decltype(_impl_.cmd_id_){},
      decltype(_impl_.sub_cmd_id_){},
      decltype(_impl_.running_hours_){},
      decltype(_impl_.running_mins_){},
      decltype(_impl_.running_secs_){},
      decltype(_impl_.speed_ratio_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.program_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.program_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_program_name().empty()) {
    _this->_impl_.program_name_.Set(from._internal_program_name(), _this->GetArenaForAllocation());
  }
  _impl_.program_alarm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.program_alarm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_program_alarm().empty()) {
    _this->_impl_.program_alarm_.Set(from._internal_program_alarm(), _this->GetArenaForAllocation());
  }
  _impl_.program_annotation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.program_annotation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_program_annotation().empty()) {
    _this->_impl_.program_annotation_.Set(from._internal_program_annotation(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.program_state_, &from._impl_.program_state_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.speed_ratio_) -
    reinterpret_cast<char*>(&_impl_.program_state_)) + sizeof(_impl_.speed_ratio_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ProgramData)
}
inline void ProgramData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.program_name_){},
      decltype(_impl_.program_alarm_){},
      decltype(_impl_.program_annotation_){},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.program_state_){0},
      decltype(_impl_.cmd_id_){0},
      decltype(_impl_.sub_cmd_id_){0},
      decltype(_impl_.running_hours_){0u},
      decltype(_impl_.running_mins_){0u},
      decltype(_impl_.running_secs_){0u},
      decltype(_impl_.speed_ratio_){0},
  };
  _impl_.program_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.program_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.program_alarm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.program_alarm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.program_annotation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.program_annotation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ProgramData::~ProgramData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ProgramData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ProgramData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.program_name_.Destroy();
  _impl_.program_alarm_.Destroy();
  _impl_.program_annotation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void ProgramData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ProgramData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ProgramData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.program_name_.ClearToEmpty();
  _impl_.program_alarm_.ClearToEmpty();
  _impl_.program_annotation_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  ::memset(&_impl_.program_state_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.speed_ratio_) -
      reinterpret_cast<char*>(&_impl_.program_state_)) + sizeof(_impl_.speed_ratio_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ProgramData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 1, 90, 7> ProgramData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ProgramData, _impl_._has_bits_),
    0, // no _extensions_
    100, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ProgramData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.ProgramState program_state = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ProgramData, _impl_.program_state_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.program_state_)}},
    // int32 cmd_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ProgramData, _impl_.cmd_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.cmd_id_)}},
    // int32 sub_cmd_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ProgramData, _impl_.sub_cmd_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.sub_cmd_id_)}},
    // uint32 running_hours = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ProgramData, _impl_.running_hours_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.running_hours_)}},
    // uint32 running_mins = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ProgramData, _impl_.running_mins_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.running_mins_)}},
    // uint32 running_secs = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ProgramData, _impl_.running_secs_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.running_secs_)}},
    // string program_name = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.program_name_)}},
    // string program_alarm = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.program_alarm_)}},
    // string program_annotation = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.program_annotation_)}},
    // int32 speed_ratio = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ProgramData, _impl_.speed_ratio_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.speed_ratio_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 10,
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.ProgramState program_state = 1;
    {PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.program_state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 cmd_id = 2;
    {PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.cmd_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 sub_cmd_id = 3;
    {PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.sub_cmd_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // uint32 running_hours = 4;
    {PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.running_hours_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 running_mins = 5;
    {PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.running_mins_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 running_secs = 6;
    {PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.running_secs_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string program_name = 7;
    {PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.program_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string program_alarm = 8;
    {PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.program_alarm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string program_annotation = 9;
    {PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.program_annotation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 speed_ratio = 10;
    {PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.speed_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
    "\36\0\0\0\0\0\0\14\15\22\0\0\0\0\0\0"
    "Nrmk.IndyFramework.ProgramData"
    "program_name"
    "program_alarm"
    "program_annotation"
  }},
};

::uint8_t* ProgramData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ProgramData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.ProgramState program_state = 1;
  if (this->_internal_program_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_program_state(), target);
  }

  // int32 cmd_id = 2;
  if (this->_internal_cmd_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_cmd_id(), target);
  }

  // int32 sub_cmd_id = 3;
  if (this->_internal_sub_cmd_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_sub_cmd_id(), target);
  }

  // uint32 running_hours = 4;
  if (this->_internal_running_hours() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_running_hours(), target);
  }

  // uint32 running_mins = 5;
  if (this->_internal_running_mins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_running_mins(), target);
  }

  // uint32 running_secs = 6;
  if (this->_internal_running_secs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_running_secs(), target);
  }

  // string program_name = 7;
  if (!this->_internal_program_name().empty()) {
    const std::string& _s = this->_internal_program_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.ProgramData.program_name");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string program_alarm = 8;
  if (!this->_internal_program_alarm().empty()) {
    const std::string& _s = this->_internal_program_alarm();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.ProgramData.program_alarm");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string program_annotation = 9;
  if (!this->_internal_program_annotation().empty()) {
    const std::string& _s = this->_internal_program_annotation();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.ProgramData.program_annotation");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // int32 speed_ratio = 10;
  if (this->_internal_speed_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_speed_ratio(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ProgramData)
  return target;
}

::size_t ProgramData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ProgramData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string program_name = 7;
  if (!this->_internal_program_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_program_name());
  }

  // string program_alarm = 8;
  if (!this->_internal_program_alarm().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_program_alarm());
  }

  // string program_annotation = 9;
  if (!this->_internal_program_annotation().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_program_annotation());
  }

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .Nrmk.IndyFramework.ProgramState program_state = 1;
  if (this->_internal_program_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_program_state());
  }

  // int32 cmd_id = 2;
  if (this->_internal_cmd_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cmd_id());
  }

  // int32 sub_cmd_id = 3;
  if (this->_internal_sub_cmd_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sub_cmd_id());
  }

  // uint32 running_hours = 4;
  if (this->_internal_running_hours() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_running_hours());
  }

  // uint32 running_mins = 5;
  if (this->_internal_running_mins() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_running_mins());
  }

  // uint32 running_secs = 6;
  if (this->_internal_running_secs() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_running_secs());
  }

  // int32 speed_ratio = 10;
  if (this->_internal_speed_ratio() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_speed_ratio());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ProgramData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ProgramData::MergeImpl
};
const ::google::protobuf::Message::ClassData*ProgramData::GetClassData() const { return &_class_data_; }


void ProgramData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ProgramData*>(&to_msg);
  auto& from = static_cast<const ProgramData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ProgramData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_program_name().empty()) {
    _this->_internal_set_program_name(from._internal_program_name());
  }
  if (!from._internal_program_alarm().empty()) {
    _this->_internal_set_program_alarm(from._internal_program_alarm());
  }
  if (!from._internal_program_annotation().empty()) {
    _this->_internal_set_program_annotation(from._internal_program_annotation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_program_state() != 0) {
    _this->_internal_set_program_state(from._internal_program_state());
  }
  if (from._internal_cmd_id() != 0) {
    _this->_internal_set_cmd_id(from._internal_cmd_id());
  }
  if (from._internal_sub_cmd_id() != 0) {
    _this->_internal_set_sub_cmd_id(from._internal_sub_cmd_id());
  }
  if (from._internal_running_hours() != 0) {
    _this->_internal_set_running_hours(from._internal_running_hours());
  }
  if (from._internal_running_mins() != 0) {
    _this->_internal_set_running_mins(from._internal_running_mins());
  }
  if (from._internal_running_secs() != 0) {
    _this->_internal_set_running_secs(from._internal_running_secs());
  }
  if (from._internal_speed_ratio() != 0) {
    _this->_internal_set_speed_ratio(from._internal_speed_ratio());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProgramData::CopyFrom(const ProgramData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ProgramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ProgramData::IsInitialized() const {
  return true;
}

void ProgramData::InternalSwap(ProgramData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.program_name_, lhs_arena,
                                       &other->_impl_.program_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.program_alarm_, lhs_arena,
                                       &other->_impl_.program_alarm_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.program_annotation_, lhs_arena,
                                       &other->_impl_.program_annotation_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.speed_ratio_)
      + sizeof(ProgramData::_impl_.speed_ratio_)
      - PROTOBUF_FIELD_OFFSET(ProgramData, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata ProgramData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rtde_5fmsgs_2eproto_getter, &descriptor_table_rtde_5fmsgs_2eproto_once,
      file_level_metadata_rtde_5fmsgs_2eproto[9]);
}
// ===================================================================

class StopState::_Internal {
 public:
  using HasBits = decltype(std::declval<StopState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StopState, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const StopState* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& StopState::_Internal::response(const StopState* msg) {
  return *msg->_impl_.response_;
}
void StopState::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StopState::StopState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.StopState)
}
StopState::StopState(const StopState& from) : ::google::protobuf::Message() {
  StopState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.category_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  _this->_impl_.category_ = from._impl_.category_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.StopState)
}
inline void StopState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.category_){0},
  };
}
StopState::~StopState() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.StopState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StopState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}
void StopState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void StopState::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.StopState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_.category_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StopState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 7> StopState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StopState, _impl_._has_bits_),
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StopState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 0, PROTOBUF_FIELD_OFFSET(StopState, _impl_.response_)}},
    // .Nrmk.IndyFramework.StopState.StopCategory category = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StopState, _impl_.category_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(StopState, _impl_.category_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.StopState.StopCategory category = 1;
    {PROTOBUF_FIELD_OFFSET(StopState, _impl_.category_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(StopState, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* StopState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.StopState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.StopState.StopCategory category = 1;
  if (this->_internal_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_category(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.StopState)
  return target;
}

::size_t StopState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.StopState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .Nrmk.IndyFramework.StopState.StopCategory category = 1;
  if (this->_internal_category() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_category());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StopState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    StopState::MergeImpl
};
const ::google::protobuf::Message::ClassData*StopState::GetClassData() const { return &_class_data_; }


void StopState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StopState*>(&to_msg);
  auto& from = static_cast<const StopState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.StopState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_category() != 0) {
    _this->_internal_set_category(from._internal_category());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StopState::CopyFrom(const StopState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.StopState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StopState::IsInitialized() const {
  return true;
}

void StopState::InternalSwap(StopState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopState, _impl_.category_)
      + sizeof(StopState::_impl_.category_)
      - PROTOBUF_FIELD_OFFSET(StopState, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata StopState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rtde_5fmsgs_2eproto_getter, &descriptor_table_rtde_5fmsgs_2eproto_once,
      file_level_metadata_rtde_5fmsgs_2eproto[10]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
