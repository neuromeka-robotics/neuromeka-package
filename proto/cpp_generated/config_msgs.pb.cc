// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_msgs.proto

#include "config_msgs.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Nrmk {
namespace IndyFramework {
        template <typename>
PROTOBUF_CONSTEXPR Frame::Frame(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.fpos_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct FrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameDefaultTypeInternal() {}
  union {
    Frame _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameDefaultTypeInternal _Frame_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR JointPos::JointPos(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.jpos_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct JointPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointPosDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointPosDefaultTypeInternal() {}
  union {
    JointPos _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointPosDefaultTypeInternal _JointPos_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR PlanarFrame::PlanarFrame(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.fpos0_)*/ {},
      /*decltype(_impl_.fpos1_)*/ {},
      /*decltype(_impl_.fpos2_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct PlanarFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanarFrameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanarFrameDefaultTypeInternal() {}
  union {
    PlanarFrame _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanarFrameDefaultTypeInternal _PlanarFrame_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FrameResult::FrameResult(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.fpos_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct FrameResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameResultDefaultTypeInternal() {}
  union {
    FrameResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameResultDefaultTypeInternal _FrameResult_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Ratio::Ratio(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.ratio_)*/ 0u,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct RatioDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RatioDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RatioDefaultTypeInternal() {}
  union {
    Ratio _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RatioDefaultTypeInternal _Ratio_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AutoServoOffConfig::AutoServoOffConfig(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.enable_)*/ false,
      /*decltype(_impl_.time_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AutoServoOffConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoServoOffConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoServoOffConfigDefaultTypeInternal() {}
  union {
    AutoServoOffConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoServoOffConfigDefaultTypeInternal _AutoServoOffConfig_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CollTuningConfig::CollTuningConfig(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.precision_)*/ 0,
      /*decltype(_impl_.tuning_space_)*/ 0,
      /*decltype(_impl_.vel_level_max_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CollTuningConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollTuningConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollTuningConfigDefaultTypeInternal() {}
  union {
    CollTuningConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollTuningConfigDefaultTypeInternal _CollTuningConfig_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR JointGainSet::JointGainSet(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.kp_)*/ {},
      /*decltype(_impl_.kv_)*/ {},
      /*decltype(_impl_.kl2_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct JointGainSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointGainSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointGainSetDefaultTypeInternal() {}
  union {
    JointGainSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointGainSetDefaultTypeInternal _JointGainSet_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TaskGainSet::TaskGainSet(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.kp_)*/ {},
      /*decltype(_impl_.kv_)*/ {},
      /*decltype(_impl_.kl2_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TaskGainSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskGainSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskGainSetDefaultTypeInternal() {}
  union {
    TaskGainSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskGainSetDefaultTypeInternal _TaskGainSet_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ImpedanceGainSet::ImpedanceGainSet(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.mass_)*/ {},
      /*decltype(_impl_.damping_)*/ {},
      /*decltype(_impl_.stiffness_)*/ {},
      /*decltype(_impl_.kl2_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ImpedanceGainSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImpedanceGainSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImpedanceGainSetDefaultTypeInternal() {}
  union {
    ImpedanceGainSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImpedanceGainSetDefaultTypeInternal _ImpedanceGainSet_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ForceGainSet::ForceGainSet(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.kp_)*/ {},
      /*decltype(_impl_.kv_)*/ {},
      /*decltype(_impl_.kl2_)*/ {},
      /*decltype(_impl_.mass_)*/ {},
      /*decltype(_impl_.damping_)*/ {},
      /*decltype(_impl_.stiffness_)*/ {},
      /*decltype(_impl_.kpf_)*/ {},
      /*decltype(_impl_.kif_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ForceGainSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForceGainSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForceGainSetDefaultTypeInternal() {}
  union {
    ForceGainSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForceGainSetDefaultTypeInternal _ForceGainSet_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TestGainSet::TestGainSet(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.kpctc_)*/ {},
      /*decltype(_impl_.kvctc_)*/ {},
      /*decltype(_impl_.kictc_)*/ {},
      /*decltype(_impl_.knric_)*/ {},
      /*decltype(_impl_.kpnric_)*/ {},
      /*decltype(_impl_.kinric_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TestGainSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestGainSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestGainSetDefaultTypeInternal() {}
  union {
    TestGainSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestGainSetDefaultTypeInternal _TestGainSet_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CustomGainSet::CustomGainSet(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.gain0_)*/ {},
      /*decltype(_impl_.gain1_)*/ {},
      /*decltype(_impl_.gain2_)*/ {},
      /*decltype(_impl_.gain3_)*/ {},
      /*decltype(_impl_.gain4_)*/ {},
      /*decltype(_impl_.gain5_)*/ {},
      /*decltype(_impl_.gain6_)*/ {},
      /*decltype(_impl_.gain7_)*/ {},
      /*decltype(_impl_.gain8_)*/ {},
      /*decltype(_impl_.gain9_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CustomGainSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomGainSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomGainSetDefaultTypeInternal() {}
  union {
    CustomGainSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomGainSetDefaultTypeInternal _CustomGainSet_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR NewControllerTestState::NewControllerTestState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.jenable_)*/ false,
      /*decltype(_impl_.tenable_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct NewControllerTestStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewControllerTestStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewControllerTestStateDefaultTypeInternal() {}
  union {
    NewControllerTestState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewControllerTestStateDefaultTypeInternal _NewControllerTestState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FrictionCompSet::FrictionCompSet(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.control_comp_levels_)*/ {},
      /* _impl_._control_comp_levels_cached_byte_size_ = */ {0},
      /*decltype(_impl_.teaching_comp_levels_)*/ {},
      /* _impl_._teaching_comp_levels_cached_byte_size_ = */ {0},
      /*decltype(_impl_.control_comp_enable_)*/ false,
      /*decltype(_impl_.teaching_comp_enable_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct FrictionCompSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrictionCompSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrictionCompSetDefaultTypeInternal() {}
  union {
    FrictionCompSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrictionCompSetDefaultTypeInternal _FrictionCompSet_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MountingAngles::MountingAngles(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.ry_)*/ 0,
      /*decltype(_impl_.rz_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MountingAnglesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MountingAnglesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MountingAnglesDefaultTypeInternal() {}
  union {
    MountingAngles _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MountingAnglesDefaultTypeInternal _MountingAngles_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ToolProperties::ToolProperties(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.center_of_mass_)*/ {},
      /*decltype(_impl_.inertia_)*/ {},
      /*decltype(_impl_.mass_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ToolPropertiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ToolPropertiesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ToolPropertiesDefaultTypeInternal() {}
  union {
    ToolProperties _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ToolPropertiesDefaultTypeInternal _ToolProperties_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CollisionSensLevel::CollisionSensLevel(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.level_)*/ 0u,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CollisionSensLevelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollisionSensLevelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollisionSensLevelDefaultTypeInternal() {}
  union {
    CollisionSensLevel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollisionSensLevelDefaultTypeInternal _CollisionSensLevel_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CollisionThresholds::CollisionThresholds(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.j_torque_bases_)*/ {},
      /*decltype(_impl_.j_torque_tangents_)*/ {},
      /*decltype(_impl_.t_torque_bases_)*/ {},
      /*decltype(_impl_.t_torque_tangents_)*/ {},
      /*decltype(_impl_.error_bases_)*/ {},
      /*decltype(_impl_.error_tangents_)*/ {},
      /*decltype(_impl_.t_constvel_torque_bases_)*/ {},
      /*decltype(_impl_.t_constvel_torque_tangents_)*/ {},
      /*decltype(_impl_.t_conveyor_torque_bases_)*/ {},
      /*decltype(_impl_.t_conveyor_torque_tangents_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CollisionThresholdsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollisionThresholdsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollisionThresholdsDefaultTypeInternal() {}
  union {
    CollisionThresholds _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollisionThresholdsDefaultTypeInternal _CollisionThresholds_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CollisionPolicy::CollisionPolicy(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.policy_)*/ 0,
      /*decltype(_impl_.sleep_time_)*/ 0,
      /*decltype(_impl_.gravity_time_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CollisionPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollisionPolicyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollisionPolicyDefaultTypeInternal() {}
  union {
    CollisionPolicy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollisionPolicyDefaultTypeInternal _CollisionPolicy_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SafetyLimits::SafetyLimits(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.joint_upper_limits_)*/ {},
      /*decltype(_impl_.joint_lower_limits_)*/ {},
      /*decltype(_impl_.power_limit_)*/ 0,
      /*decltype(_impl_.power_limit_ratio_)*/ 0,
      /*decltype(_impl_.tcp_force_limit_)*/ 0,
      /*decltype(_impl_.tcp_force_limit_ratio_)*/ 0,
      /*decltype(_impl_.tcp_speed_limit_)*/ 0,
      /*decltype(_impl_.tcp_speed_limit_ratio_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SafetyLimitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SafetyLimitsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SafetyLimitsDefaultTypeInternal() {}
  union {
    SafetyLimits _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SafetyLimitsDefaultTypeInternal _SafetyLimits_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SafetyStopConfig::SafetyStopConfig(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.joint_position_limit_stop_cat_)*/ 0,
      /*decltype(_impl_.joint_speed_limit_stop_cat_)*/ 0,
      /*decltype(_impl_.joint_torque_limit_stop_cat_)*/ 0,
      /*decltype(_impl_.tcp_speed_limit_stop_cat_)*/ 0,
      /*decltype(_impl_.tcp_force_limit_stop_cat_)*/ 0,
      /*decltype(_impl_.power_limit_stop_cat_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SafetyStopConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SafetyStopConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SafetyStopConfigDefaultTypeInternal() {}
  union {
    SafetyStopConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SafetyStopConfigDefaultTypeInternal _SafetyStopConfig_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR DIConfig::DIConfig(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.triggersignals_)*/ {},
      /*decltype(_impl_.successsignals_)*/ {},
      /*decltype(_impl_.failuresignals_)*/ {},
      /*decltype(_impl_.function_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.function_code_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct DIConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DIConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DIConfigDefaultTypeInternal() {}
  union {
    DIConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DIConfigDefaultTypeInternal _DIConfig_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR DIConfigList::DIConfigList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.di_configs_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct DIConfigListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DIConfigListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DIConfigListDefaultTypeInternal() {}
  union {
    DIConfigList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DIConfigListDefaultTypeInternal _DIConfigList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR DOConfig::DOConfig(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.onsignals_)*/ {},
      /*decltype(_impl_.offsignals_)*/ {},
      /*decltype(_impl_.state_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.state_code_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct DOConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DOConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DOConfigDefaultTypeInternal() {}
  union {
    DOConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DOConfigDefaultTypeInternal _DOConfig_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR DOConfigList::DOConfigList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.do_configs_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct DOConfigListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DOConfigListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DOConfigListDefaultTypeInternal() {}
  union {
    DOConfigList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DOConfigListDefaultTypeInternal _DOConfigList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GetReducedRatioRes::GetReducedRatioRes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.msg_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.ratio_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct GetReducedRatioResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetReducedRatioResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetReducedRatioResDefaultTypeInternal() {}
  union {
    GetReducedRatioRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetReducedRatioResDefaultTypeInternal _GetReducedRatioRes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GetReducedSpeedRes::GetReducedSpeedRes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.msg_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.speed_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct GetReducedSpeedResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetReducedSpeedResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetReducedSpeedResDefaultTypeInternal() {}
  union {
    GetReducedSpeedRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetReducedSpeedResDefaultTypeInternal _GetReducedSpeedRes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SetReducedSpeedReq::SetReducedSpeedReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.speed_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SetReducedSpeedReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetReducedSpeedReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetReducedSpeedReqDefaultTypeInternal() {}
  union {
    SetReducedSpeedReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetReducedSpeedReqDefaultTypeInternal _SetReducedSpeedReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FTSensorDevice::FTSensorDevice(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.ip_address_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.dev_type_)*/ 0,
      /*decltype(_impl_.com_type_)*/ 0,
      /*decltype(_impl_.ft_frame_translation_offset_x_)*/ 0,
      /*decltype(_impl_.ft_frame_translation_offset_y_)*/ 0,
      /*decltype(_impl_.ft_frame_translation_offset_z_)*/ 0,
      /*decltype(_impl_.ft_frame_rotation_offset_r_)*/ 0,
      /*decltype(_impl_.ft_frame_rotation_offset_p_)*/ 0,
      /*decltype(_impl_.ft_frame_rotation_offset_y_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct FTSensorDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FTSensorDeviceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FTSensorDeviceDefaultTypeInternal() {}
  union {
    FTSensorDevice _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FTSensorDeviceDefaultTypeInternal _FTSensorDevice_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FTSensorDeviceRes::FTSensorDeviceRes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.msg_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct FTSensorDeviceResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FTSensorDeviceResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FTSensorDeviceResDefaultTypeInternal() {}
  union {
    FTSensorDeviceRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FTSensorDeviceResDefaultTypeInternal _FTSensorDeviceRes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TeleOpParams::TeleOpParams(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.smooth_factor_)*/ 0,
      /*decltype(_impl_.cutoff_freq_)*/ 0,
      /*decltype(_impl_.error_gain_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TeleOpParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeleOpParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeleOpParamsDefaultTypeInternal() {}
  union {
    TeleOpParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeleOpParamsDefaultTypeInternal _TeleOpParams_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR KinematicsParams_MDH::KinematicsParams_MDH(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.a_)*/ 0,
      /*decltype(_impl_.alpha_)*/ 0,
      /*decltype(_impl_.d0_)*/ 0,
      /*decltype(_impl_.theta0_)*/ 0,
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_.index_)*/ 0,
      /*decltype(_impl_.parent_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct KinematicsParams_MDHDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KinematicsParams_MDHDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KinematicsParams_MDHDefaultTypeInternal() {}
  union {
    KinematicsParams_MDH _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KinematicsParams_MDHDefaultTypeInternal _KinematicsParams_MDH_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR KinematicsParams::KinematicsParams(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.mdh_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct KinematicsParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KinematicsParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KinematicsParamsDefaultTypeInternal() {}
  union {
    KinematicsParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KinematicsParamsDefaultTypeInternal _KinematicsParams_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
static ::_pb::Metadata file_level_metadata_config_5fmsgs_2eproto[34];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_config_5fmsgs_2eproto[5];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_config_5fmsgs_2eproto = nullptr;
const ::uint32_t TableStruct_config_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Frame, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Frame, _impl_.fpos_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JointPos, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JointPos, _impl_.jpos_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::PlanarFrame, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::PlanarFrame, _impl_.fpos0_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::PlanarFrame, _impl_.fpos1_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::PlanarFrame, _impl_.fpos2_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FrameResult, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FrameResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FrameResult, _impl_.fpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FrameResult, _impl_.response_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Ratio, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Ratio, _impl_.ratio_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AutoServoOffConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AutoServoOffConfig, _impl_.enable_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AutoServoOffConfig, _impl_.time_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollTuningConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollTuningConfig, _impl_.precision_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollTuningConfig, _impl_.tuning_space_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollTuningConfig, _impl_.vel_level_max_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JointGainSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JointGainSet, _impl_.kp_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JointGainSet, _impl_.kv_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JointGainSet, _impl_.kl2_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TaskGainSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TaskGainSet, _impl_.kp_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TaskGainSet, _impl_.kv_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TaskGainSet, _impl_.kl2_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ImpedanceGainSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ImpedanceGainSet, _impl_.mass_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ImpedanceGainSet, _impl_.damping_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ImpedanceGainSet, _impl_.stiffness_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ImpedanceGainSet, _impl_.kl2_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForceGainSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForceGainSet, _impl_.kp_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForceGainSet, _impl_.kv_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForceGainSet, _impl_.kl2_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForceGainSet, _impl_.mass_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForceGainSet, _impl_.damping_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForceGainSet, _impl_.stiffness_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForceGainSet, _impl_.kpf_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForceGainSet, _impl_.kif_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestGainSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestGainSet, _impl_.kpctc_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestGainSet, _impl_.kvctc_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestGainSet, _impl_.kictc_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestGainSet, _impl_.knric_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestGainSet, _impl_.kpnric_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestGainSet, _impl_.kinric_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CustomGainSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CustomGainSet, _impl_.gain0_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CustomGainSet, _impl_.gain1_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CustomGainSet, _impl_.gain2_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CustomGainSet, _impl_.gain3_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CustomGainSet, _impl_.gain4_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CustomGainSet, _impl_.gain5_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CustomGainSet, _impl_.gain6_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CustomGainSet, _impl_.gain7_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CustomGainSet, _impl_.gain8_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CustomGainSet, _impl_.gain9_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::NewControllerTestState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::NewControllerTestState, _impl_.jenable_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::NewControllerTestState, _impl_.tenable_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FrictionCompSet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FrictionCompSet, _impl_.control_comp_enable_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FrictionCompSet, _impl_.control_comp_levels_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FrictionCompSet, _impl_.teaching_comp_enable_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FrictionCompSet, _impl_.teaching_comp_levels_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MountingAngles, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MountingAngles, _impl_.ry_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MountingAngles, _impl_.rz_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ToolProperties, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ToolProperties, _impl_.mass_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ToolProperties, _impl_.center_of_mass_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ToolProperties, _impl_.inertia_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionSensLevel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionSensLevel, _impl_.level_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionThresholds, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionThresholds, _impl_.j_torque_bases_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionThresholds, _impl_.j_torque_tangents_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionThresholds, _impl_.t_torque_bases_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionThresholds, _impl_.t_torque_tangents_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionThresholds, _impl_.error_bases_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionThresholds, _impl_.error_tangents_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionThresholds, _impl_.t_constvel_torque_bases_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionThresholds, _impl_.t_constvel_torque_tangents_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionThresholds, _impl_.t_conveyor_torque_bases_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionThresholds, _impl_.t_conveyor_torque_tangents_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionPolicy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionPolicy, _impl_.policy_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionPolicy, _impl_.sleep_time_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CollisionPolicy, _impl_.gravity_time_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyLimits, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyLimits, _impl_.power_limit_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyLimits, _impl_.power_limit_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyLimits, _impl_.tcp_force_limit_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyLimits, _impl_.tcp_force_limit_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyLimits, _impl_.tcp_speed_limit_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyLimits, _impl_.tcp_speed_limit_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyLimits, _impl_.joint_upper_limits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyLimits, _impl_.joint_lower_limits_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyStopConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyStopConfig, _impl_.joint_position_limit_stop_cat_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyStopConfig, _impl_.joint_speed_limit_stop_cat_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyStopConfig, _impl_.joint_torque_limit_stop_cat_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyStopConfig, _impl_.tcp_speed_limit_stop_cat_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyStopConfig, _impl_.tcp_force_limit_stop_cat_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyStopConfig, _impl_.power_limit_stop_cat_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DIConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DIConfig, _impl_.function_code_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DIConfig, _impl_.function_name_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DIConfig, _impl_.triggersignals_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DIConfig, _impl_.successsignals_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DIConfig, _impl_.failuresignals_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DIConfigList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DIConfigList, _impl_.di_configs_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DOConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DOConfig, _impl_.state_code_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DOConfig, _impl_.state_name_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DOConfig, _impl_.onsignals_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DOConfig, _impl_.offsignals_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DOConfigList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DOConfigList, _impl_.do_configs_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetReducedRatioRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetReducedRatioRes, _impl_.ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetReducedRatioRes, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetReducedSpeedRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetReducedSpeedRes, _impl_.speed_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetReducedSpeedRes, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SetReducedSpeedReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SetReducedSpeedReq, _impl_.speed_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorDevice, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorDevice, _impl_.dev_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorDevice, _impl_.com_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorDevice, _impl_.ip_address_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorDevice, _impl_.ft_frame_translation_offset_x_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorDevice, _impl_.ft_frame_translation_offset_y_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorDevice, _impl_.ft_frame_translation_offset_z_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorDevice, _impl_.ft_frame_rotation_offset_r_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorDevice, _impl_.ft_frame_rotation_offset_p_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorDevice, _impl_.ft_frame_rotation_offset_y_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorDeviceRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorDeviceRes, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpParams, _impl_.smooth_factor_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpParams, _impl_.cutoff_freq_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpParams, _impl_.error_gain_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::KinematicsParams_MDH, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::KinematicsParams_MDH, _impl_.a_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::KinematicsParams_MDH, _impl_.alpha_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::KinematicsParams_MDH, _impl_.d0_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::KinematicsParams_MDH, _impl_.theta0_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::KinematicsParams_MDH, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::KinematicsParams_MDH, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::KinematicsParams_MDH, _impl_.parent_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::KinematicsParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::KinematicsParams, _impl_.mdh_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Nrmk::IndyFramework::Frame)},
        {9, -1, -1, sizeof(::Nrmk::IndyFramework::JointPos)},
        {18, -1, -1, sizeof(::Nrmk::IndyFramework::PlanarFrame)},
        {29, 39, -1, sizeof(::Nrmk::IndyFramework::FrameResult)},
        {41, -1, -1, sizeof(::Nrmk::IndyFramework::Ratio)},
        {50, -1, -1, sizeof(::Nrmk::IndyFramework::AutoServoOffConfig)},
        {60, -1, -1, sizeof(::Nrmk::IndyFramework::CollTuningConfig)},
        {71, -1, -1, sizeof(::Nrmk::IndyFramework::JointGainSet)},
        {82, -1, -1, sizeof(::Nrmk::IndyFramework::TaskGainSet)},
        {93, -1, -1, sizeof(::Nrmk::IndyFramework::ImpedanceGainSet)},
        {105, -1, -1, sizeof(::Nrmk::IndyFramework::ForceGainSet)},
        {121, -1, -1, sizeof(::Nrmk::IndyFramework::TestGainSet)},
        {135, -1, -1, sizeof(::Nrmk::IndyFramework::CustomGainSet)},
        {153, -1, -1, sizeof(::Nrmk::IndyFramework::NewControllerTestState)},
        {163, -1, -1, sizeof(::Nrmk::IndyFramework::FrictionCompSet)},
        {175, -1, -1, sizeof(::Nrmk::IndyFramework::MountingAngles)},
        {185, -1, -1, sizeof(::Nrmk::IndyFramework::ToolProperties)},
        {196, -1, -1, sizeof(::Nrmk::IndyFramework::CollisionSensLevel)},
        {205, -1, -1, sizeof(::Nrmk::IndyFramework::CollisionThresholds)},
        {223, -1, -1, sizeof(::Nrmk::IndyFramework::CollisionPolicy)},
        {234, -1, -1, sizeof(::Nrmk::IndyFramework::SafetyLimits)},
        {250, -1, -1, sizeof(::Nrmk::IndyFramework::SafetyStopConfig)},
        {264, -1, -1, sizeof(::Nrmk::IndyFramework::DIConfig)},
        {277, -1, -1, sizeof(::Nrmk::IndyFramework::DIConfigList)},
        {286, -1, -1, sizeof(::Nrmk::IndyFramework::DOConfig)},
        {298, -1, -1, sizeof(::Nrmk::IndyFramework::DOConfigList)},
        {307, -1, -1, sizeof(::Nrmk::IndyFramework::GetReducedRatioRes)},
        {317, -1, -1, sizeof(::Nrmk::IndyFramework::GetReducedSpeedRes)},
        {327, -1, -1, sizeof(::Nrmk::IndyFramework::SetReducedSpeedReq)},
        {336, -1, -1, sizeof(::Nrmk::IndyFramework::FTSensorDevice)},
        {353, -1, -1, sizeof(::Nrmk::IndyFramework::FTSensorDeviceRes)},
        {362, -1, -1, sizeof(::Nrmk::IndyFramework::TeleOpParams)},
        {373, -1, -1, sizeof(::Nrmk::IndyFramework::KinematicsParams_MDH)},
        {388, -1, -1, sizeof(::Nrmk::IndyFramework::KinematicsParams)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::Nrmk::IndyFramework::_Frame_default_instance_._instance,
    &::Nrmk::IndyFramework::_JointPos_default_instance_._instance,
    &::Nrmk::IndyFramework::_PlanarFrame_default_instance_._instance,
    &::Nrmk::IndyFramework::_FrameResult_default_instance_._instance,
    &::Nrmk::IndyFramework::_Ratio_default_instance_._instance,
    &::Nrmk::IndyFramework::_AutoServoOffConfig_default_instance_._instance,
    &::Nrmk::IndyFramework::_CollTuningConfig_default_instance_._instance,
    &::Nrmk::IndyFramework::_JointGainSet_default_instance_._instance,
    &::Nrmk::IndyFramework::_TaskGainSet_default_instance_._instance,
    &::Nrmk::IndyFramework::_ImpedanceGainSet_default_instance_._instance,
    &::Nrmk::IndyFramework::_ForceGainSet_default_instance_._instance,
    &::Nrmk::IndyFramework::_TestGainSet_default_instance_._instance,
    &::Nrmk::IndyFramework::_CustomGainSet_default_instance_._instance,
    &::Nrmk::IndyFramework::_NewControllerTestState_default_instance_._instance,
    &::Nrmk::IndyFramework::_FrictionCompSet_default_instance_._instance,
    &::Nrmk::IndyFramework::_MountingAngles_default_instance_._instance,
    &::Nrmk::IndyFramework::_ToolProperties_default_instance_._instance,
    &::Nrmk::IndyFramework::_CollisionSensLevel_default_instance_._instance,
    &::Nrmk::IndyFramework::_CollisionThresholds_default_instance_._instance,
    &::Nrmk::IndyFramework::_CollisionPolicy_default_instance_._instance,
    &::Nrmk::IndyFramework::_SafetyLimits_default_instance_._instance,
    &::Nrmk::IndyFramework::_SafetyStopConfig_default_instance_._instance,
    &::Nrmk::IndyFramework::_DIConfig_default_instance_._instance,
    &::Nrmk::IndyFramework::_DIConfigList_default_instance_._instance,
    &::Nrmk::IndyFramework::_DOConfig_default_instance_._instance,
    &::Nrmk::IndyFramework::_DOConfigList_default_instance_._instance,
    &::Nrmk::IndyFramework::_GetReducedRatioRes_default_instance_._instance,
    &::Nrmk::IndyFramework::_GetReducedSpeedRes_default_instance_._instance,
    &::Nrmk::IndyFramework::_SetReducedSpeedReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_FTSensorDevice_default_instance_._instance,
    &::Nrmk::IndyFramework::_FTSensorDeviceRes_default_instance_._instance,
    &::Nrmk::IndyFramework::_TeleOpParams_default_instance_._instance,
    &::Nrmk::IndyFramework::_KinematicsParams_MDH_default_instance_._instance,
    &::Nrmk::IndyFramework::_KinematicsParams_default_instance_._instance,
};
const char descriptor_table_protodef_config_5fmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021config_msgs.proto\022\022Nrmk.IndyFramework\032"
    "\021common_msgs.proto\032\021device_msgs.proto\"\025\n"
    "\005Frame\022\014\n\004fpos\030\001 \003(\002\"\030\n\010JointPos\022\014\n\004jpos"
    "\030\001 \003(\002\":\n\013PlanarFrame\022\r\n\005fpos0\030\001 \003(\002\022\r\n\005"
    "fpos1\030\002 \003(\002\022\r\n\005fpos2\030\003 \003(\002\"K\n\013FrameResul"
    "t\022\014\n\004fpos\030\001 \003(\002\022.\n\010response\030\002 \001(\0132\034.Nrmk"
    ".IndyFramework.Response\"\026\n\005Ratio\022\r\n\005rati"
    "o\030\001 \001(\r\"2\n\022AutoServoOffConfig\022\016\n\006enable\030"
    "\001 \001(\010\022\014\n\004time\030\002 \001(\002\"\304\002\n\020CollTuningConfig"
    "\022G\n\tprecision\030\001 \001(\01624.Nrmk.IndyFramework"
    ".CollTuningConfig.TuningPrecision\022F\n\014tun"
    "ing_space\030\002 \001(\01620.Nrmk.IndyFramework.Col"
    "lTuningConfig.TuningSpace\022\025\n\rvel_level_m"
    "ax\030\003 \001(\005\"\?\n\017TuningPrecision\022\014\n\010LOW_TUNE\020"
    "\000\022\017\n\013MIDDLE_TUNE\020\001\022\r\n\tHIGH_TUNE\020\002\"G\n\013Tun"
    "ingSpace\022\013\n\007NO_TUNE\020\000\022\016\n\nJOINT_TUNE\020\001\022\r\n"
    "\tTASK_TUNE\020\002\022\014\n\010ALL_TUNE\020\003\"3\n\014JointGainS"
    "et\022\n\n\002kp\030\001 \003(\002\022\n\n\002kv\030\002 \003(\002\022\013\n\003kl2\030\003 \003(\002\""
    "2\n\013TaskGainSet\022\n\n\002kp\030\001 \003(\002\022\n\n\002kv\030\002 \003(\002\022\013"
    "\n\003kl2\030\003 \003(\002\"Q\n\020ImpedanceGainSet\022\014\n\004mass\030"
    "\001 \003(\002\022\017\n\007damping\030\002 \003(\002\022\021\n\tstiffness\030\003 \003("
    "\002\022\013\n\003kl2\030\004 \003(\002\"\177\n\014ForceGainSet\022\n\n\002kp\030\001 \003"
    "(\002\022\n\n\002kv\030\002 \003(\002\022\013\n\003kl2\030\003 \003(\002\022\014\n\004mass\030\004 \003("
    "\002\022\017\n\007damping\030\005 \003(\002\022\021\n\tstiffness\030\006 \003(\002\022\013\n"
    "\003kpf\030\007 \003(\002\022\013\n\003kif\030\010 \003(\002\"i\n\013TestGainSet\022\r"
    "\n\005kpctc\030\001 \003(\002\022\r\n\005kvctc\030\002 \003(\002\022\r\n\005kictc\030\003 "
    "\003(\002\022\r\n\005knric\030\004 \003(\002\022\016\n\006kpnric\030\005 \003(\002\022\016\n\006ki"
    "nric\030\006 \003(\002\"\245\001\n\rCustomGainSet\022\r\n\005gain0\030\001 "
    "\003(\002\022\r\n\005gain1\030\002 \003(\002\022\r\n\005gain2\030\003 \003(\002\022\r\n\005gai"
    "n3\030\004 \003(\002\022\r\n\005gain4\030\005 \003(\002\022\r\n\005gain5\030\006 \003(\002\022\r"
    "\n\005gain6\030\007 \003(\002\022\r\n\005gain7\030\010 \003(\002\022\r\n\005gain8\030\t "
    "\003(\002\022\r\n\005gain9\030\n \003(\002\":\n\026NewControllerTestS"
    "tate\022\017\n\007Jenable\030\001 \001(\010\022\017\n\007Tenable\030\002 \001(\010\"\207"
    "\001\n\017FrictionCompSet\022\033\n\023control_comp_enabl"
    "e\030\001 \001(\010\022\033\n\023control_comp_levels\030\002 \003(\005\022\034\n\024"
    "teaching_comp_enable\030\003 \001(\010\022\034\n\024teaching_c"
    "omp_levels\030\004 \003(\005\"(\n\016MountingAngles\022\n\n\002ry"
    "\030\001 \001(\002\022\n\n\002rz\030\002 \001(\002\"G\n\016ToolProperties\022\014\n\004"
    "mass\030\001 \001(\002\022\026\n\016center_of_mass\030\002 \003(\002\022\017\n\007in"
    "ertia\030\003 \003(\002\"#\n\022CollisionSensLevel\022\r\n\005lev"
    "el\030\001 \001(\r\"\262\002\n\023CollisionThresholds\022\026\n\016j_to"
    "rque_bases\030\001 \003(\002\022\031\n\021j_torque_tangents\030\002 "
    "\003(\002\022\026\n\016t_torque_bases\030\003 \003(\002\022\031\n\021t_torque_"
    "tangents\030\004 \003(\002\022\023\n\013error_bases\030\005 \003(\002\022\026\n\016e"
    "rror_tangents\030\006 \003(\002\022\037\n\027t_constvel_torque"
    "_bases\030\007 \003(\002\022\"\n\032t_constvel_torque_tangen"
    "ts\030\010 \003(\002\022\037\n\027t_conveyor_torque_bases\030\t \003("
    "\002\022\"\n\032t_conveyor_torque_tangents\030\n \003(\002\"t\n"
    "\017CollisionPolicy\0227\n\006policy\030\001 \001(\0162\'.Nrmk."
    "IndyFramework.CollisionPolicyType\022\022\n\nsle"
    "ep_time\030\002 \001(\002\022\024\n\014gravity_time\030\003 \001(\002\"\346\001\n\014"
    "SafetyLimits\022\023\n\013power_limit\030\001 \001(\002\022\031\n\021pow"
    "er_limit_ratio\030\002 \001(\002\022\027\n\017tcp_force_limit\030"
    "\003 \001(\002\022\035\n\025tcp_force_limit_ratio\030\004 \001(\002\022\027\n\017"
    "tcp_speed_limit\030\005 \001(\002\022\035\n\025tcp_speed_limit"
    "_ratio\030\006 \001(\002\022\032\n\022joint_upper_limits\030\007 \003(\002"
    "\022\032\n\022joint_lower_limits\030\010 \003(\002\"\260\003\n\020SafetyS"
    "topConfig\022G\n\035joint_position_limit_stop_c"
    "at\030\001 \001(\0162 .Nrmk.IndyFramework.StopCatego"
    "ry\022D\n\032joint_speed_limit_stop_cat\030\002 \001(\0162 "
    ".Nrmk.IndyFramework.StopCategory\022E\n\033join"
    "t_torque_limit_stop_cat\030\003 \001(\0162 .Nrmk.Ind"
    "yFramework.StopCategory\022B\n\030tcp_speed_lim"
    "it_stop_cat\030\004 \001(\0162 .Nrmk.IndyFramework.S"
    "topCategory\022B\n\030tcp_force_limit_stop_cat\030"
    "\005 \001(\0162 .Nrmk.IndyFramework.StopCategory\022"
    ">\n\024power_limit_stop_cat\030\006 \001(\0162 .Nrmk.Ind"
    "yFramework.StopCategory\"\351\001\n\010DIConfig\022\025\n\r"
    "function_code\030\001 \001(\005\022\025\n\rfunction_name\030\002 \001"
    "(\t\0229\n\016triggerSignals\030\003 \003(\0132!.Nrmk.IndyFr"
    "amework.DigitalSignal\0229\n\016successSignals\030"
    "\004 \003(\0132!.Nrmk.IndyFramework.DigitalSignal"
    "\0229\n\016failureSignals\030\005 \003(\0132!.Nrmk.IndyFram"
    "ework.DigitalSignal\"@\n\014DIConfigList\0220\n\nd"
    "i_configs\030\001 \003(\0132\034.Nrmk.IndyFramework.DIC"
    "onfig\"\237\001\n\010DOConfig\022\022\n\nstate_code\030\001 \001(\005\022\022"
    "\n\nstate_name\030\002 \001(\t\0224\n\tonSignals\030\003 \003(\0132!."
    "Nrmk.IndyFramework.DigitalSignal\0225\n\noffS"
    "ignals\030\004 \003(\0132!.Nrmk.IndyFramework.Digita"
    "lSignal\"@\n\014DOConfigList\0220\n\ndo_configs\030\001 "
    "\003(\0132\034.Nrmk.IndyFramework.DOConfig\"0\n\022Get"
    "ReducedRatioRes\022\r\n\005ratio\030\001 \001(\002\022\013\n\003msg\030d "
    "\001(\t\"0\n\022GetReducedSpeedRes\022\r\n\005speed\030\001 \001(\002"
    "\022\013\n\003msg\030d \001(\t\"#\n\022SetReducedSpeedReq\022\r\n\005s"
    "peed\030\001 \001(\002\"\341\004\n\016FTSensorDevice\022G\n\010dev_typ"
    "e\030\001 \001(\01625.Nrmk.IndyFramework.FTSensorDev"
    "ice.FTSensorDeviceType\022J\n\010com_type\030\002 \001(\016"
    "28.Nrmk.IndyFramework.FTSensorDevice.FTS"
    "ensorDeviceComType\022\022\n\nip_address\030\003 \001(\t\022%"
    "\n\035ft_frame_translation_offset_x\030\013 \001(\002\022%\n"
    "\035ft_frame_translation_offset_y\030\014 \001(\002\022%\n\035"
    "ft_frame_translation_offset_z\030\r \001(\002\022\"\n\032f"
    "t_frame_rotation_offset_r\030\016 \001(\002\022\"\n\032ft_fr"
    "ame_rotation_offset_p\030\017 \001(\002\022\"\n\032ft_frame_"
    "rotation_offset_y\030\020 \001(\002\"q\n\022FTSensorDevic"
    "eType\022\010\n\004NONE\020\000\022\016\n\nAFT200_D80\020\001\022\021\n\rAFT20"
    "0_D80_EC\020\002\022\016\n\nRFT80_6A01\020\003\022\016\n\nRFT60_HA01"
    "\020\004\022\016\n\nHEX_E_H_QC\020\005\"R\n\025FTSensorDeviceComT"
    "ype\022\016\n\nENDTOOLCAN\020\000\022\t\n\005CBCAN\020\001\022\020\n\014MODBUS"
    "CLIENT\020\002\022\014\n\010ETHERCAT\020\003\" \n\021FTSensorDevice"
    "Res\022\013\n\003msg\030d \001(\t\"N\n\014TeleOpParams\022\025\n\rsmoo"
    "th_factor\030\001 \001(\002\022\023\n\013cutoff_freq\030\002 \001(\002\022\022\n\n"
    "error_gain\030\003 \001(\002\"\231\002\n\020KinematicsParams\0225\n"
    "\003mdh\030\001 \003(\0132(.Nrmk.IndyFramework.Kinemati"
    "csParams.MDH\032\230\001\n\003MDH\022\t\n\001a\030\001 \001(\002\022\r\n\005alpha"
    "\030\002 \001(\002\022\n\n\002d0\030\003 \001(\002\022\016\n\006theta0\030\004 \001(\002\022<\n\004ty"
    "pe\030\005 \001(\0162..Nrmk.IndyFramework.Kinematics"
    "Params.JointType\022\r\n\005index\030\n \001(\005\022\016\n\006paren"
    "t\030\013 \001(\005\"3\n\tJointType\022\014\n\010REVOLUTE\020\000\022\r\n\tPR"
    "ISMATIC\020\001\022\t\n\005FIXED\020\002b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_config_5fmsgs_2eproto_deps[2] =
    {
        &::descriptor_table_common_5fmsgs_2eproto,
        &::descriptor_table_device_5fmsgs_2eproto,
};
static ::absl::once_flag descriptor_table_config_5fmsgs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_config_5fmsgs_2eproto = {
    false,
    false,
    4388,
    descriptor_table_protodef_config_5fmsgs_2eproto,
    "config_msgs.proto",
    &descriptor_table_config_5fmsgs_2eproto_once,
    descriptor_table_config_5fmsgs_2eproto_deps,
    2,
    34,
    schemas,
    file_default_instances,
    TableStruct_config_5fmsgs_2eproto::offsets,
    file_level_metadata_config_5fmsgs_2eproto,
    file_level_enum_descriptors_config_5fmsgs_2eproto,
    file_level_service_descriptors_config_5fmsgs_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_config_5fmsgs_2eproto_getter() {
  return &descriptor_table_config_5fmsgs_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_config_5fmsgs_2eproto(&descriptor_table_config_5fmsgs_2eproto);
namespace Nrmk {
namespace IndyFramework {
const ::google::protobuf::EnumDescriptor* CollTuningConfig_TuningPrecision_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_config_5fmsgs_2eproto);
  return file_level_enum_descriptors_config_5fmsgs_2eproto[0];
}
bool CollTuningConfig_TuningPrecision_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CollTuningConfig_TuningPrecision CollTuningConfig::LOW_TUNE;
constexpr CollTuningConfig_TuningPrecision CollTuningConfig::MIDDLE_TUNE;
constexpr CollTuningConfig_TuningPrecision CollTuningConfig::HIGH_TUNE;
constexpr CollTuningConfig_TuningPrecision CollTuningConfig::TuningPrecision_MIN;
constexpr CollTuningConfig_TuningPrecision CollTuningConfig::TuningPrecision_MAX;
constexpr int CollTuningConfig::TuningPrecision_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* CollTuningConfig_TuningSpace_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_config_5fmsgs_2eproto);
  return file_level_enum_descriptors_config_5fmsgs_2eproto[1];
}
bool CollTuningConfig_TuningSpace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CollTuningConfig_TuningSpace CollTuningConfig::NO_TUNE;
constexpr CollTuningConfig_TuningSpace CollTuningConfig::JOINT_TUNE;
constexpr CollTuningConfig_TuningSpace CollTuningConfig::TASK_TUNE;
constexpr CollTuningConfig_TuningSpace CollTuningConfig::ALL_TUNE;
constexpr CollTuningConfig_TuningSpace CollTuningConfig::TuningSpace_MIN;
constexpr CollTuningConfig_TuningSpace CollTuningConfig::TuningSpace_MAX;
constexpr int CollTuningConfig::TuningSpace_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* FTSensorDevice_FTSensorDeviceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_config_5fmsgs_2eproto);
  return file_level_enum_descriptors_config_5fmsgs_2eproto[2];
}
bool FTSensorDevice_FTSensorDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FTSensorDevice_FTSensorDeviceType FTSensorDevice::NONE;
constexpr FTSensorDevice_FTSensorDeviceType FTSensorDevice::AFT200_D80;
constexpr FTSensorDevice_FTSensorDeviceType FTSensorDevice::AFT200_D80_EC;
constexpr FTSensorDevice_FTSensorDeviceType FTSensorDevice::RFT80_6A01;
constexpr FTSensorDevice_FTSensorDeviceType FTSensorDevice::RFT60_HA01;
constexpr FTSensorDevice_FTSensorDeviceType FTSensorDevice::HEX_E_H_QC;
constexpr FTSensorDevice_FTSensorDeviceType FTSensorDevice::FTSensorDeviceType_MIN;
constexpr FTSensorDevice_FTSensorDeviceType FTSensorDevice::FTSensorDeviceType_MAX;
constexpr int FTSensorDevice::FTSensorDeviceType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* FTSensorDevice_FTSensorDeviceComType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_config_5fmsgs_2eproto);
  return file_level_enum_descriptors_config_5fmsgs_2eproto[3];
}
bool FTSensorDevice_FTSensorDeviceComType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FTSensorDevice_FTSensorDeviceComType FTSensorDevice::ENDTOOLCAN;
constexpr FTSensorDevice_FTSensorDeviceComType FTSensorDevice::CBCAN;
constexpr FTSensorDevice_FTSensorDeviceComType FTSensorDevice::MODBUSCLIENT;
constexpr FTSensorDevice_FTSensorDeviceComType FTSensorDevice::ETHERCAT;
constexpr FTSensorDevice_FTSensorDeviceComType FTSensorDevice::FTSensorDeviceComType_MIN;
constexpr FTSensorDevice_FTSensorDeviceComType FTSensorDevice::FTSensorDeviceComType_MAX;
constexpr int FTSensorDevice::FTSensorDeviceComType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* KinematicsParams_JointType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_config_5fmsgs_2eproto);
  return file_level_enum_descriptors_config_5fmsgs_2eproto[4];
}
bool KinematicsParams_JointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr KinematicsParams_JointType KinematicsParams::REVOLUTE;
constexpr KinematicsParams_JointType KinematicsParams::PRISMATIC;
constexpr KinematicsParams_JointType KinematicsParams::FIXED;
constexpr KinematicsParams_JointType KinematicsParams::JointType_MIN;
constexpr KinematicsParams_JointType KinematicsParams::JointType_MAX;
constexpr int KinematicsParams::JointType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Frame::_Internal {
 public:
};

Frame::Frame(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.Frame)
}
Frame::Frame(const Frame& from) : ::google::protobuf::Message() {
  Frame* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fpos_){from._impl_.fpos_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.Frame)
}
inline void Frame::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.fpos_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Frame::~Frame() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.Frame)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Frame::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fpos_.~RepeatedField();
}
void Frame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.Frame)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_fpos()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Frame::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Frame::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Frame_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float fpos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Frame, _impl_.fpos_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float fpos = 1;
    {PROTOBUF_FIELD_OFFSET(Frame, _impl_.fpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Frame::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.Frame)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float fpos = 1;
  if (this->_internal_fpos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_fpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.Frame)
  return target;
}

::size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.Frame)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float fpos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_fpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Frame::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Frame::MergeImpl
};
const ::google::protobuf::Message::ClassData*Frame::GetClassData() const { return &_class_data_; }


void Frame::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Frame*>(&to_msg);
  auto& from = static_cast<const Frame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.Frame)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_fpos()->MergeFrom(from._internal_fpos());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fpos_.InternalSwap(&other->_impl_.fpos_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[0]);
}
// ===================================================================

class JointPos::_Internal {
 public:
};

JointPos::JointPos(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.JointPos)
}
JointPos::JointPos(const JointPos& from) : ::google::protobuf::Message() {
  JointPos* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.jpos_){from._impl_.jpos_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.JointPos)
}
inline void JointPos::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.jpos_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
JointPos::~JointPos() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.JointPos)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void JointPos::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jpos_.~RepeatedField();
}
void JointPos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void JointPos::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.JointPos)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_jpos()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* JointPos::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> JointPos::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_JointPos_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float jpos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(JointPos, _impl_.jpos_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float jpos = 1;
    {PROTOBUF_FIELD_OFFSET(JointPos, _impl_.jpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* JointPos::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.JointPos)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float jpos = 1;
  if (this->_internal_jpos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_jpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.JointPos)
  return target;
}

::size_t JointPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.JointPos)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_jpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData JointPos::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    JointPos::MergeImpl
};
const ::google::protobuf::Message::ClassData*JointPos::GetClassData() const { return &_class_data_; }


void JointPos::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<JointPos*>(&to_msg);
  auto& from = static_cast<const JointPos&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.JointPos)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_jpos()->MergeFrom(from._internal_jpos());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JointPos::CopyFrom(const JointPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.JointPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool JointPos::IsInitialized() const {
  return true;
}

void JointPos::InternalSwap(JointPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.jpos_.InternalSwap(&other->_impl_.jpos_);
}

::google::protobuf::Metadata JointPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[1]);
}
// ===================================================================

class PlanarFrame::_Internal {
 public:
};

PlanarFrame::PlanarFrame(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.PlanarFrame)
}
PlanarFrame::PlanarFrame(const PlanarFrame& from) : ::google::protobuf::Message() {
  PlanarFrame* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fpos0_){from._impl_.fpos0_},
      decltype(_impl_.fpos1_){from._impl_.fpos1_},
      decltype(_impl_.fpos2_){from._impl_.fpos2_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.PlanarFrame)
}
inline void PlanarFrame::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.fpos0_){arena},
      decltype(_impl_.fpos1_){arena},
      decltype(_impl_.fpos2_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
PlanarFrame::~PlanarFrame() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.PlanarFrame)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlanarFrame::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fpos0_.~RepeatedField();
  _impl_.fpos1_.~RepeatedField();
  _impl_.fpos2_.~RepeatedField();
}
void PlanarFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void PlanarFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.PlanarFrame)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_fpos0()->Clear();
  _internal_mutable_fpos1()->Clear();
  _internal_mutable_fpos2()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PlanarFrame::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> PlanarFrame::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PlanarFrame_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float fpos0 = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PlanarFrame, _impl_.fpos0_)}},
    // repeated float fpos1 = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PlanarFrame, _impl_.fpos1_)}},
    // repeated float fpos2 = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PlanarFrame, _impl_.fpos2_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float fpos0 = 1;
    {PROTOBUF_FIELD_OFFSET(PlanarFrame, _impl_.fpos0_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float fpos1 = 2;
    {PROTOBUF_FIELD_OFFSET(PlanarFrame, _impl_.fpos1_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float fpos2 = 3;
    {PROTOBUF_FIELD_OFFSET(PlanarFrame, _impl_.fpos2_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PlanarFrame::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.PlanarFrame)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float fpos0 = 1;
  if (this->_internal_fpos0_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_fpos0(), target);
  }

  // repeated float fpos1 = 2;
  if (this->_internal_fpos1_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_fpos1(), target);
  }

  // repeated float fpos2 = 3;
  if (this->_internal_fpos2_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_fpos2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.PlanarFrame)
  return target;
}

::size_t PlanarFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.PlanarFrame)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float fpos0 = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_fpos0_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float fpos1 = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_fpos1_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float fpos2 = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_fpos2_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PlanarFrame::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    PlanarFrame::MergeImpl
};
const ::google::protobuf::Message::ClassData*PlanarFrame::GetClassData() const { return &_class_data_; }


void PlanarFrame::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PlanarFrame*>(&to_msg);
  auto& from = static_cast<const PlanarFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.PlanarFrame)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_fpos0()->MergeFrom(from._internal_fpos0());
  _this->_internal_mutable_fpos1()->MergeFrom(from._internal_fpos1());
  _this->_internal_mutable_fpos2()->MergeFrom(from._internal_fpos2());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlanarFrame::CopyFrom(const PlanarFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.PlanarFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PlanarFrame::IsInitialized() const {
  return true;
}

void PlanarFrame::InternalSwap(PlanarFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fpos0_.InternalSwap(&other->_impl_.fpos0_);
  _impl_.fpos1_.InternalSwap(&other->_impl_.fpos1_);
  _impl_.fpos2_.InternalSwap(&other->_impl_.fpos2_);
}

::google::protobuf::Metadata PlanarFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[2]);
}
// ===================================================================

class FrameResult::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameResult>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameResult, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const FrameResult* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& FrameResult::_Internal::response(const FrameResult* msg) {
  return *msg->_impl_.response_;
}
void FrameResult::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FrameResult::FrameResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.FrameResult)
}
FrameResult::FrameResult(const FrameResult& from) : ::google::protobuf::Message() {
  FrameResult* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.fpos_){from._impl_.fpos_},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.FrameResult)
}
inline void FrameResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.fpos_){arena},
      decltype(_impl_.response_){nullptr},
  };
}
FrameResult::~FrameResult() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.FrameResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FrameResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fpos_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void FrameResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FrameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.FrameResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_fpos()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FrameResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> FrameResult::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FrameResult, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FrameResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(FrameResult, _impl_.response_)}},
    // repeated float fpos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FrameResult, _impl_.fpos_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float fpos = 1;
    {PROTOBUF_FIELD_OFFSET(FrameResult, _impl_.fpos_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.Response response = 2;
    {PROTOBUF_FIELD_OFFSET(FrameResult, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* FrameResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.FrameResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float fpos = 1;
  if (this->_internal_fpos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_fpos(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.FrameResult)
  return target;
}

::size_t FrameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.FrameResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float fpos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_fpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.Response response = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FrameResult::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FrameResult::MergeImpl
};
const ::google::protobuf::Message::ClassData*FrameResult::GetClassData() const { return &_class_data_; }


void FrameResult::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FrameResult*>(&to_msg);
  auto& from = static_cast<const FrameResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.FrameResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_fpos()->MergeFrom(from._internal_fpos());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FrameResult::CopyFrom(const FrameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.FrameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FrameResult::IsInitialized() const {
  return true;
}

void FrameResult::InternalSwap(FrameResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.fpos_.InternalSwap(&other->_impl_.fpos_);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata FrameResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[3]);
}
// ===================================================================

class Ratio::_Internal {
 public:
};

Ratio::Ratio(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.Ratio)
}
Ratio::Ratio(const Ratio& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.Ratio)
}
inline void Ratio::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ratio_){0u},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Ratio::~Ratio() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.Ratio)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Ratio::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Ratio::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Ratio::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.Ratio)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ratio_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Ratio::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Ratio::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Ratio_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 ratio = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Ratio, _impl_.ratio_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Ratio, _impl_.ratio_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 ratio = 1;
    {PROTOBUF_FIELD_OFFSET(Ratio, _impl_.ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Ratio::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.Ratio)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 ratio = 1;
  if (this->_internal_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.Ratio)
  return target;
}

::size_t Ratio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.Ratio)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ratio = 1;
  if (this->_internal_ratio() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_ratio());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Ratio::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Ratio::MergeImpl
};
const ::google::protobuf::Message::ClassData*Ratio::GetClassData() const { return &_class_data_; }


void Ratio::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Ratio*>(&to_msg);
  auto& from = static_cast<const Ratio&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.Ratio)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ratio() != 0) {
    _this->_internal_set_ratio(from._internal_ratio());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Ratio::CopyFrom(const Ratio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.Ratio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Ratio::IsInitialized() const {
  return true;
}

void Ratio::InternalSwap(Ratio* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.ratio_, other->_impl_.ratio_);
}

::google::protobuf::Metadata Ratio::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[4]);
}
// ===================================================================

class AutoServoOffConfig::_Internal {
 public:
};

AutoServoOffConfig::AutoServoOffConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.AutoServoOffConfig)
}
AutoServoOffConfig::AutoServoOffConfig(const AutoServoOffConfig& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.AutoServoOffConfig)
}
inline void AutoServoOffConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.enable_){false},
      decltype(_impl_.time_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AutoServoOffConfig::~AutoServoOffConfig() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.AutoServoOffConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AutoServoOffConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void AutoServoOffConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AutoServoOffConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.AutoServoOffConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.enable_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.enable_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AutoServoOffConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> AutoServoOffConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AutoServoOffConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float time = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(AutoServoOffConfig, _impl_.time_)}},
    // bool enable = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AutoServoOffConfig, _impl_.enable_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AutoServoOffConfig, _impl_.enable_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool enable = 1;
    {PROTOBUF_FIELD_OFFSET(AutoServoOffConfig, _impl_.enable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float time = 2;
    {PROTOBUF_FIELD_OFFSET(AutoServoOffConfig, _impl_.time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AutoServoOffConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.AutoServoOffConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_enable(), target);
  }

  // float time = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.AutoServoOffConfig)
  return target;
}

::size_t AutoServoOffConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.AutoServoOffConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    total_size += 2;
  }

  // float time = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AutoServoOffConfig::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AutoServoOffConfig::MergeImpl
};
const ::google::protobuf::Message::ClassData*AutoServoOffConfig::GetClassData() const { return &_class_data_; }


void AutoServoOffConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AutoServoOffConfig*>(&to_msg);
  auto& from = static_cast<const AutoServoOffConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.AutoServoOffConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = from._internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AutoServoOffConfig::CopyFrom(const AutoServoOffConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.AutoServoOffConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AutoServoOffConfig::IsInitialized() const {
  return true;
}

void AutoServoOffConfig::InternalSwap(AutoServoOffConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoServoOffConfig, _impl_.time_)
      + sizeof(AutoServoOffConfig::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(AutoServoOffConfig, _impl_.enable_)>(
          reinterpret_cast<char*>(&_impl_.enable_),
          reinterpret_cast<char*>(&other->_impl_.enable_));
}

::google::protobuf::Metadata AutoServoOffConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[5]);
}
// ===================================================================

class CollTuningConfig::_Internal {
 public:
};

CollTuningConfig::CollTuningConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CollTuningConfig)
}
CollTuningConfig::CollTuningConfig(const CollTuningConfig& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CollTuningConfig)
}
inline void CollTuningConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.precision_){0},
      decltype(_impl_.tuning_space_){0},
      decltype(_impl_.vel_level_max_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
CollTuningConfig::~CollTuningConfig() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CollTuningConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CollTuningConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CollTuningConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CollTuningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CollTuningConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.precision_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.vel_level_max_) -
      reinterpret_cast<char*>(&_impl_.precision_)) + sizeof(_impl_.vel_level_max_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CollTuningConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> CollTuningConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CollTuningConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.CollTuningConfig.TuningPrecision precision = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CollTuningConfig, _impl_.precision_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CollTuningConfig, _impl_.precision_)}},
    // .Nrmk.IndyFramework.CollTuningConfig.TuningSpace tuning_space = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CollTuningConfig, _impl_.tuning_space_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CollTuningConfig, _impl_.tuning_space_)}},
    // int32 vel_level_max = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CollTuningConfig, _impl_.vel_level_max_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CollTuningConfig, _impl_.vel_level_max_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.CollTuningConfig.TuningPrecision precision = 1;
    {PROTOBUF_FIELD_OFFSET(CollTuningConfig, _impl_.precision_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.CollTuningConfig.TuningSpace tuning_space = 2;
    {PROTOBUF_FIELD_OFFSET(CollTuningConfig, _impl_.tuning_space_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 vel_level_max = 3;
    {PROTOBUF_FIELD_OFFSET(CollTuningConfig, _impl_.vel_level_max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CollTuningConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CollTuningConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.CollTuningConfig.TuningPrecision precision = 1;
  if (this->_internal_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_precision(), target);
  }

  // .Nrmk.IndyFramework.CollTuningConfig.TuningSpace tuning_space = 2;
  if (this->_internal_tuning_space() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_tuning_space(), target);
  }

  // int32 vel_level_max = 3;
  if (this->_internal_vel_level_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_vel_level_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CollTuningConfig)
  return target;
}

::size_t CollTuningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CollTuningConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.CollTuningConfig.TuningPrecision precision = 1;
  if (this->_internal_precision() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_precision());
  }

  // .Nrmk.IndyFramework.CollTuningConfig.TuningSpace tuning_space = 2;
  if (this->_internal_tuning_space() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_tuning_space());
  }

  // int32 vel_level_max = 3;
  if (this->_internal_vel_level_max() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_vel_level_max());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CollTuningConfig::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CollTuningConfig::MergeImpl
};
const ::google::protobuf::Message::ClassData*CollTuningConfig::GetClassData() const { return &_class_data_; }


void CollTuningConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CollTuningConfig*>(&to_msg);
  auto& from = static_cast<const CollTuningConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CollTuningConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_precision() != 0) {
    _this->_internal_set_precision(from._internal_precision());
  }
  if (from._internal_tuning_space() != 0) {
    _this->_internal_set_tuning_space(from._internal_tuning_space());
  }
  if (from._internal_vel_level_max() != 0) {
    _this->_internal_set_vel_level_max(from._internal_vel_level_max());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CollTuningConfig::CopyFrom(const CollTuningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CollTuningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CollTuningConfig::IsInitialized() const {
  return true;
}

void CollTuningConfig::InternalSwap(CollTuningConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollTuningConfig, _impl_.vel_level_max_)
      + sizeof(CollTuningConfig::_impl_.vel_level_max_)
      - PROTOBUF_FIELD_OFFSET(CollTuningConfig, _impl_.precision_)>(
          reinterpret_cast<char*>(&_impl_.precision_),
          reinterpret_cast<char*>(&other->_impl_.precision_));
}

::google::protobuf::Metadata CollTuningConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[6]);
}
// ===================================================================

class JointGainSet::_Internal {
 public:
};

JointGainSet::JointGainSet(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.JointGainSet)
}
JointGainSet::JointGainSet(const JointGainSet& from) : ::google::protobuf::Message() {
  JointGainSet* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kp_){from._impl_.kp_},
      decltype(_impl_.kv_){from._impl_.kv_},
      decltype(_impl_.kl2_){from._impl_.kl2_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.JointGainSet)
}
inline void JointGainSet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.kp_){arena},
      decltype(_impl_.kv_){arena},
      decltype(_impl_.kl2_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
JointGainSet::~JointGainSet() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.JointGainSet)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void JointGainSet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kp_.~RepeatedField();
  _impl_.kv_.~RepeatedField();
  _impl_.kl2_.~RepeatedField();
}
void JointGainSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void JointGainSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.JointGainSet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_kp()->Clear();
  _internal_mutable_kv()->Clear();
  _internal_mutable_kl2()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* JointGainSet::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> JointGainSet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_JointGainSet_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float kp = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(JointGainSet, _impl_.kp_)}},
    // repeated float kv = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(JointGainSet, _impl_.kv_)}},
    // repeated float kl2 = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(JointGainSet, _impl_.kl2_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float kp = 1;
    {PROTOBUF_FIELD_OFFSET(JointGainSet, _impl_.kp_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float kv = 2;
    {PROTOBUF_FIELD_OFFSET(JointGainSet, _impl_.kv_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float kl2 = 3;
    {PROTOBUF_FIELD_OFFSET(JointGainSet, _impl_.kl2_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* JointGainSet::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.JointGainSet)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float kp = 1;
  if (this->_internal_kp_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_kp(), target);
  }

  // repeated float kv = 2;
  if (this->_internal_kv_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_kv(), target);
  }

  // repeated float kl2 = 3;
  if (this->_internal_kl2_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_kl2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.JointGainSet)
  return target;
}

::size_t JointGainSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.JointGainSet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float kp = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kp_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float kv = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kv_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float kl2 = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kl2_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData JointGainSet::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    JointGainSet::MergeImpl
};
const ::google::protobuf::Message::ClassData*JointGainSet::GetClassData() const { return &_class_data_; }


void JointGainSet::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<JointGainSet*>(&to_msg);
  auto& from = static_cast<const JointGainSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.JointGainSet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_kp()->MergeFrom(from._internal_kp());
  _this->_internal_mutable_kv()->MergeFrom(from._internal_kv());
  _this->_internal_mutable_kl2()->MergeFrom(from._internal_kl2());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JointGainSet::CopyFrom(const JointGainSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.JointGainSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool JointGainSet::IsInitialized() const {
  return true;
}

void JointGainSet::InternalSwap(JointGainSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kp_.InternalSwap(&other->_impl_.kp_);
  _impl_.kv_.InternalSwap(&other->_impl_.kv_);
  _impl_.kl2_.InternalSwap(&other->_impl_.kl2_);
}

::google::protobuf::Metadata JointGainSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[7]);
}
// ===================================================================

class TaskGainSet::_Internal {
 public:
};

TaskGainSet::TaskGainSet(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TaskGainSet)
}
TaskGainSet::TaskGainSet(const TaskGainSet& from) : ::google::protobuf::Message() {
  TaskGainSet* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kp_){from._impl_.kp_},
      decltype(_impl_.kv_){from._impl_.kv_},
      decltype(_impl_.kl2_){from._impl_.kl2_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TaskGainSet)
}
inline void TaskGainSet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.kp_){arena},
      decltype(_impl_.kv_){arena},
      decltype(_impl_.kl2_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TaskGainSet::~TaskGainSet() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TaskGainSet)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TaskGainSet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kp_.~RepeatedField();
  _impl_.kv_.~RepeatedField();
  _impl_.kl2_.~RepeatedField();
}
void TaskGainSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TaskGainSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TaskGainSet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_kp()->Clear();
  _internal_mutable_kv()->Clear();
  _internal_mutable_kl2()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TaskGainSet::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> TaskGainSet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TaskGainSet_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float kp = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TaskGainSet, _impl_.kp_)}},
    // repeated float kv = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TaskGainSet, _impl_.kv_)}},
    // repeated float kl2 = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TaskGainSet, _impl_.kl2_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float kp = 1;
    {PROTOBUF_FIELD_OFFSET(TaskGainSet, _impl_.kp_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float kv = 2;
    {PROTOBUF_FIELD_OFFSET(TaskGainSet, _impl_.kv_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float kl2 = 3;
    {PROTOBUF_FIELD_OFFSET(TaskGainSet, _impl_.kl2_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TaskGainSet::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TaskGainSet)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float kp = 1;
  if (this->_internal_kp_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_kp(), target);
  }

  // repeated float kv = 2;
  if (this->_internal_kv_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_kv(), target);
  }

  // repeated float kl2 = 3;
  if (this->_internal_kl2_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_kl2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TaskGainSet)
  return target;
}

::size_t TaskGainSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TaskGainSet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float kp = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kp_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float kv = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kv_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float kl2 = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kl2_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TaskGainSet::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TaskGainSet::MergeImpl
};
const ::google::protobuf::Message::ClassData*TaskGainSet::GetClassData() const { return &_class_data_; }


void TaskGainSet::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TaskGainSet*>(&to_msg);
  auto& from = static_cast<const TaskGainSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TaskGainSet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_kp()->MergeFrom(from._internal_kp());
  _this->_internal_mutable_kv()->MergeFrom(from._internal_kv());
  _this->_internal_mutable_kl2()->MergeFrom(from._internal_kl2());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TaskGainSet::CopyFrom(const TaskGainSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TaskGainSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TaskGainSet::IsInitialized() const {
  return true;
}

void TaskGainSet::InternalSwap(TaskGainSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kp_.InternalSwap(&other->_impl_.kp_);
  _impl_.kv_.InternalSwap(&other->_impl_.kv_);
  _impl_.kl2_.InternalSwap(&other->_impl_.kl2_);
}

::google::protobuf::Metadata TaskGainSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[8]);
}
// ===================================================================

class ImpedanceGainSet::_Internal {
 public:
};

ImpedanceGainSet::ImpedanceGainSet(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ImpedanceGainSet)
}
ImpedanceGainSet::ImpedanceGainSet(const ImpedanceGainSet& from) : ::google::protobuf::Message() {
  ImpedanceGainSet* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mass_){from._impl_.mass_},
      decltype(_impl_.damping_){from._impl_.damping_},
      decltype(_impl_.stiffness_){from._impl_.stiffness_},
      decltype(_impl_.kl2_){from._impl_.kl2_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ImpedanceGainSet)
}
inline void ImpedanceGainSet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.mass_){arena},
      decltype(_impl_.damping_){arena},
      decltype(_impl_.stiffness_){arena},
      decltype(_impl_.kl2_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
ImpedanceGainSet::~ImpedanceGainSet() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ImpedanceGainSet)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ImpedanceGainSet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mass_.~RepeatedField();
  _impl_.damping_.~RepeatedField();
  _impl_.stiffness_.~RepeatedField();
  _impl_.kl2_.~RepeatedField();
}
void ImpedanceGainSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ImpedanceGainSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ImpedanceGainSet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_mass()->Clear();
  _internal_mutable_damping()->Clear();
  _internal_mutable_stiffness()->Clear();
  _internal_mutable_kl2()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ImpedanceGainSet::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> ImpedanceGainSet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ImpedanceGainSet_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float kl2 = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ImpedanceGainSet, _impl_.kl2_)}},
    // repeated float mass = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ImpedanceGainSet, _impl_.mass_)}},
    // repeated float damping = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ImpedanceGainSet, _impl_.damping_)}},
    // repeated float stiffness = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ImpedanceGainSet, _impl_.stiffness_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float mass = 1;
    {PROTOBUF_FIELD_OFFSET(ImpedanceGainSet, _impl_.mass_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float damping = 2;
    {PROTOBUF_FIELD_OFFSET(ImpedanceGainSet, _impl_.damping_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float stiffness = 3;
    {PROTOBUF_FIELD_OFFSET(ImpedanceGainSet, _impl_.stiffness_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float kl2 = 4;
    {PROTOBUF_FIELD_OFFSET(ImpedanceGainSet, _impl_.kl2_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ImpedanceGainSet::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ImpedanceGainSet)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float mass = 1;
  if (this->_internal_mass_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_mass(), target);
  }

  // repeated float damping = 2;
  if (this->_internal_damping_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_damping(), target);
  }

  // repeated float stiffness = 3;
  if (this->_internal_stiffness_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_stiffness(), target);
  }

  // repeated float kl2 = 4;
  if (this->_internal_kl2_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_kl2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ImpedanceGainSet)
  return target;
}

::size_t ImpedanceGainSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ImpedanceGainSet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float mass = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_mass_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float damping = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_damping_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float stiffness = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_stiffness_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float kl2 = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kl2_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ImpedanceGainSet::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ImpedanceGainSet::MergeImpl
};
const ::google::protobuf::Message::ClassData*ImpedanceGainSet::GetClassData() const { return &_class_data_; }


void ImpedanceGainSet::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ImpedanceGainSet*>(&to_msg);
  auto& from = static_cast<const ImpedanceGainSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ImpedanceGainSet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_mass()->MergeFrom(from._internal_mass());
  _this->_internal_mutable_damping()->MergeFrom(from._internal_damping());
  _this->_internal_mutable_stiffness()->MergeFrom(from._internal_stiffness());
  _this->_internal_mutable_kl2()->MergeFrom(from._internal_kl2());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImpedanceGainSet::CopyFrom(const ImpedanceGainSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ImpedanceGainSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ImpedanceGainSet::IsInitialized() const {
  return true;
}

void ImpedanceGainSet::InternalSwap(ImpedanceGainSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mass_.InternalSwap(&other->_impl_.mass_);
  _impl_.damping_.InternalSwap(&other->_impl_.damping_);
  _impl_.stiffness_.InternalSwap(&other->_impl_.stiffness_);
  _impl_.kl2_.InternalSwap(&other->_impl_.kl2_);
}

::google::protobuf::Metadata ImpedanceGainSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[9]);
}
// ===================================================================

class ForceGainSet::_Internal {
 public:
};

ForceGainSet::ForceGainSet(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ForceGainSet)
}
ForceGainSet::ForceGainSet(const ForceGainSet& from) : ::google::protobuf::Message() {
  ForceGainSet* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kp_){from._impl_.kp_},
      decltype(_impl_.kv_){from._impl_.kv_},
      decltype(_impl_.kl2_){from._impl_.kl2_},
      decltype(_impl_.mass_){from._impl_.mass_},
      decltype(_impl_.damping_){from._impl_.damping_},
      decltype(_impl_.stiffness_){from._impl_.stiffness_},
      decltype(_impl_.kpf_){from._impl_.kpf_},
      decltype(_impl_.kif_){from._impl_.kif_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ForceGainSet)
}
inline void ForceGainSet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.kp_){arena},
      decltype(_impl_.kv_){arena},
      decltype(_impl_.kl2_){arena},
      decltype(_impl_.mass_){arena},
      decltype(_impl_.damping_){arena},
      decltype(_impl_.stiffness_){arena},
      decltype(_impl_.kpf_){arena},
      decltype(_impl_.kif_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
ForceGainSet::~ForceGainSet() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ForceGainSet)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ForceGainSet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kp_.~RepeatedField();
  _impl_.kv_.~RepeatedField();
  _impl_.kl2_.~RepeatedField();
  _impl_.mass_.~RepeatedField();
  _impl_.damping_.~RepeatedField();
  _impl_.stiffness_.~RepeatedField();
  _impl_.kpf_.~RepeatedField();
  _impl_.kif_.~RepeatedField();
}
void ForceGainSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ForceGainSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ForceGainSet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_kp()->Clear();
  _internal_mutable_kv()->Clear();
  _internal_mutable_kl2()->Clear();
  _internal_mutable_mass()->Clear();
  _internal_mutable_damping()->Clear();
  _internal_mutable_stiffness()->Clear();
  _internal_mutable_kpf()->Clear();
  _internal_mutable_kif()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ForceGainSet::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 0, 2> ForceGainSet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ForceGainSet_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float kif = 8;
    {::_pbi::TcParser::FastF32P1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.kif_)}},
    // repeated float kp = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.kp_)}},
    // repeated float kv = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.kv_)}},
    // repeated float kl2 = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.kl2_)}},
    // repeated float mass = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.mass_)}},
    // repeated float damping = 5;
    {::_pbi::TcParser::FastF32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.damping_)}},
    // repeated float stiffness = 6;
    {::_pbi::TcParser::FastF32P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.stiffness_)}},
    // repeated float kpf = 7;
    {::_pbi::TcParser::FastF32P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.kpf_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float kp = 1;
    {PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.kp_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float kv = 2;
    {PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.kv_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float kl2 = 3;
    {PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.kl2_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float mass = 4;
    {PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.mass_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float damping = 5;
    {PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.damping_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float stiffness = 6;
    {PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.stiffness_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float kpf = 7;
    {PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.kpf_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float kif = 8;
    {PROTOBUF_FIELD_OFFSET(ForceGainSet, _impl_.kif_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ForceGainSet::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ForceGainSet)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float kp = 1;
  if (this->_internal_kp_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_kp(), target);
  }

  // repeated float kv = 2;
  if (this->_internal_kv_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_kv(), target);
  }

  // repeated float kl2 = 3;
  if (this->_internal_kl2_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_kl2(), target);
  }

  // repeated float mass = 4;
  if (this->_internal_mass_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_mass(), target);
  }

  // repeated float damping = 5;
  if (this->_internal_damping_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_damping(), target);
  }

  // repeated float stiffness = 6;
  if (this->_internal_stiffness_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_stiffness(), target);
  }

  // repeated float kpf = 7;
  if (this->_internal_kpf_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_kpf(), target);
  }

  // repeated float kif = 8;
  if (this->_internal_kif_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_kif(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ForceGainSet)
  return target;
}

::size_t ForceGainSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ForceGainSet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float kp = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kp_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float kv = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kv_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float kl2 = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kl2_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float mass = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_mass_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float damping = 5;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_damping_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float stiffness = 6;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_stiffness_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float kpf = 7;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kpf_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float kif = 8;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kif_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ForceGainSet::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ForceGainSet::MergeImpl
};
const ::google::protobuf::Message::ClassData*ForceGainSet::GetClassData() const { return &_class_data_; }


void ForceGainSet::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ForceGainSet*>(&to_msg);
  auto& from = static_cast<const ForceGainSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ForceGainSet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_kp()->MergeFrom(from._internal_kp());
  _this->_internal_mutable_kv()->MergeFrom(from._internal_kv());
  _this->_internal_mutable_kl2()->MergeFrom(from._internal_kl2());
  _this->_internal_mutable_mass()->MergeFrom(from._internal_mass());
  _this->_internal_mutable_damping()->MergeFrom(from._internal_damping());
  _this->_internal_mutable_stiffness()->MergeFrom(from._internal_stiffness());
  _this->_internal_mutable_kpf()->MergeFrom(from._internal_kpf());
  _this->_internal_mutable_kif()->MergeFrom(from._internal_kif());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ForceGainSet::CopyFrom(const ForceGainSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ForceGainSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ForceGainSet::IsInitialized() const {
  return true;
}

void ForceGainSet::InternalSwap(ForceGainSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kp_.InternalSwap(&other->_impl_.kp_);
  _impl_.kv_.InternalSwap(&other->_impl_.kv_);
  _impl_.kl2_.InternalSwap(&other->_impl_.kl2_);
  _impl_.mass_.InternalSwap(&other->_impl_.mass_);
  _impl_.damping_.InternalSwap(&other->_impl_.damping_);
  _impl_.stiffness_.InternalSwap(&other->_impl_.stiffness_);
  _impl_.kpf_.InternalSwap(&other->_impl_.kpf_);
  _impl_.kif_.InternalSwap(&other->_impl_.kif_);
}

::google::protobuf::Metadata ForceGainSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[10]);
}
// ===================================================================

class TestGainSet::_Internal {
 public:
};

TestGainSet::TestGainSet(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TestGainSet)
}
TestGainSet::TestGainSet(const TestGainSet& from) : ::google::protobuf::Message() {
  TestGainSet* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kpctc_){from._impl_.kpctc_},
      decltype(_impl_.kvctc_){from._impl_.kvctc_},
      decltype(_impl_.kictc_){from._impl_.kictc_},
      decltype(_impl_.knric_){from._impl_.knric_},
      decltype(_impl_.kpnric_){from._impl_.kpnric_},
      decltype(_impl_.kinric_){from._impl_.kinric_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TestGainSet)
}
inline void TestGainSet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.kpctc_){arena},
      decltype(_impl_.kvctc_){arena},
      decltype(_impl_.kictc_){arena},
      decltype(_impl_.knric_){arena},
      decltype(_impl_.kpnric_){arena},
      decltype(_impl_.kinric_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TestGainSet::~TestGainSet() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TestGainSet)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TestGainSet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kpctc_.~RepeatedField();
  _impl_.kvctc_.~RepeatedField();
  _impl_.kictc_.~RepeatedField();
  _impl_.knric_.~RepeatedField();
  _impl_.kpnric_.~RepeatedField();
  _impl_.kinric_.~RepeatedField();
}
void TestGainSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TestGainSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TestGainSet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_kpctc()->Clear();
  _internal_mutable_kvctc()->Clear();
  _internal_mutable_kictc()->Clear();
  _internal_mutable_knric()->Clear();
  _internal_mutable_kpnric()->Clear();
  _internal_mutable_kinric()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TestGainSet::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> TestGainSet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TestGainSet_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float kpctc = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestGainSet, _impl_.kpctc_)}},
    // repeated float kvctc = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestGainSet, _impl_.kvctc_)}},
    // repeated float kictc = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestGainSet, _impl_.kictc_)}},
    // repeated float knric = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TestGainSet, _impl_.knric_)}},
    // repeated float kpnric = 5;
    {::_pbi::TcParser::FastF32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TestGainSet, _impl_.kpnric_)}},
    // repeated float kinric = 6;
    {::_pbi::TcParser::FastF32P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(TestGainSet, _impl_.kinric_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float kpctc = 1;
    {PROTOBUF_FIELD_OFFSET(TestGainSet, _impl_.kpctc_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float kvctc = 2;
    {PROTOBUF_FIELD_OFFSET(TestGainSet, _impl_.kvctc_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float kictc = 3;
    {PROTOBUF_FIELD_OFFSET(TestGainSet, _impl_.kictc_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float knric = 4;
    {PROTOBUF_FIELD_OFFSET(TestGainSet, _impl_.knric_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float kpnric = 5;
    {PROTOBUF_FIELD_OFFSET(TestGainSet, _impl_.kpnric_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float kinric = 6;
    {PROTOBUF_FIELD_OFFSET(TestGainSet, _impl_.kinric_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TestGainSet::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TestGainSet)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float kpctc = 1;
  if (this->_internal_kpctc_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_kpctc(), target);
  }

  // repeated float kvctc = 2;
  if (this->_internal_kvctc_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_kvctc(), target);
  }

  // repeated float kictc = 3;
  if (this->_internal_kictc_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_kictc(), target);
  }

  // repeated float knric = 4;
  if (this->_internal_knric_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_knric(), target);
  }

  // repeated float kpnric = 5;
  if (this->_internal_kpnric_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_kpnric(), target);
  }

  // repeated float kinric = 6;
  if (this->_internal_kinric_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_kinric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TestGainSet)
  return target;
}

::size_t TestGainSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TestGainSet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float kpctc = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kpctc_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float kvctc = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kvctc_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float kictc = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kictc_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float knric = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_knric_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float kpnric = 5;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kpnric_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float kinric = 6;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_kinric_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TestGainSet::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TestGainSet::MergeImpl
};
const ::google::protobuf::Message::ClassData*TestGainSet::GetClassData() const { return &_class_data_; }


void TestGainSet::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TestGainSet*>(&to_msg);
  auto& from = static_cast<const TestGainSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TestGainSet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_kpctc()->MergeFrom(from._internal_kpctc());
  _this->_internal_mutable_kvctc()->MergeFrom(from._internal_kvctc());
  _this->_internal_mutable_kictc()->MergeFrom(from._internal_kictc());
  _this->_internal_mutable_knric()->MergeFrom(from._internal_knric());
  _this->_internal_mutable_kpnric()->MergeFrom(from._internal_kpnric());
  _this->_internal_mutable_kinric()->MergeFrom(from._internal_kinric());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestGainSet::CopyFrom(const TestGainSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TestGainSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TestGainSet::IsInitialized() const {
  return true;
}

void TestGainSet::InternalSwap(TestGainSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kpctc_.InternalSwap(&other->_impl_.kpctc_);
  _impl_.kvctc_.InternalSwap(&other->_impl_.kvctc_);
  _impl_.kictc_.InternalSwap(&other->_impl_.kictc_);
  _impl_.knric_.InternalSwap(&other->_impl_.knric_);
  _impl_.kpnric_.InternalSwap(&other->_impl_.kpnric_);
  _impl_.kinric_.InternalSwap(&other->_impl_.kinric_);
}

::google::protobuf::Metadata TestGainSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[11]);
}
// ===================================================================

class CustomGainSet::_Internal {
 public:
};

CustomGainSet::CustomGainSet(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CustomGainSet)
}
CustomGainSet::CustomGainSet(const CustomGainSet& from) : ::google::protobuf::Message() {
  CustomGainSet* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gain0_){from._impl_.gain0_},
      decltype(_impl_.gain1_){from._impl_.gain1_},
      decltype(_impl_.gain2_){from._impl_.gain2_},
      decltype(_impl_.gain3_){from._impl_.gain3_},
      decltype(_impl_.gain4_){from._impl_.gain4_},
      decltype(_impl_.gain5_){from._impl_.gain5_},
      decltype(_impl_.gain6_){from._impl_.gain6_},
      decltype(_impl_.gain7_){from._impl_.gain7_},
      decltype(_impl_.gain8_){from._impl_.gain8_},
      decltype(_impl_.gain9_){from._impl_.gain9_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CustomGainSet)
}
inline void CustomGainSet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.gain0_){arena},
      decltype(_impl_.gain1_){arena},
      decltype(_impl_.gain2_){arena},
      decltype(_impl_.gain3_){arena},
      decltype(_impl_.gain4_){arena},
      decltype(_impl_.gain5_){arena},
      decltype(_impl_.gain6_){arena},
      decltype(_impl_.gain7_){arena},
      decltype(_impl_.gain8_){arena},
      decltype(_impl_.gain9_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
CustomGainSet::~CustomGainSet() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CustomGainSet)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CustomGainSet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gain0_.~RepeatedField();
  _impl_.gain1_.~RepeatedField();
  _impl_.gain2_.~RepeatedField();
  _impl_.gain3_.~RepeatedField();
  _impl_.gain4_.~RepeatedField();
  _impl_.gain5_.~RepeatedField();
  _impl_.gain6_.~RepeatedField();
  _impl_.gain7_.~RepeatedField();
  _impl_.gain8_.~RepeatedField();
  _impl_.gain9_.~RepeatedField();
}
void CustomGainSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CustomGainSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CustomGainSet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_gain0()->Clear();
  _internal_mutable_gain1()->Clear();
  _internal_mutable_gain2()->Clear();
  _internal_mutable_gain3()->Clear();
  _internal_mutable_gain4()->Clear();
  _internal_mutable_gain5()->Clear();
  _internal_mutable_gain6()->Clear();
  _internal_mutable_gain7()->Clear();
  _internal_mutable_gain8()->Clear();
  _internal_mutable_gain9()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CustomGainSet::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 0, 2> CustomGainSet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CustomGainSet_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float gain0 = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain0_)}},
    // repeated float gain1 = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain1_)}},
    // repeated float gain2 = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain2_)}},
    // repeated float gain3 = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain3_)}},
    // repeated float gain4 = 5;
    {::_pbi::TcParser::FastF32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain4_)}},
    // repeated float gain5 = 6;
    {::_pbi::TcParser::FastF32P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain5_)}},
    // repeated float gain6 = 7;
    {::_pbi::TcParser::FastF32P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain6_)}},
    // repeated float gain7 = 8;
    {::_pbi::TcParser::FastF32P1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain7_)}},
    // repeated float gain8 = 9;
    {::_pbi::TcParser::FastF32P1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain8_)}},
    // repeated float gain9 = 10;
    {::_pbi::TcParser::FastF32P1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain9_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float gain0 = 1;
    {PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain0_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float gain1 = 2;
    {PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain1_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float gain2 = 3;
    {PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain2_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float gain3 = 4;
    {PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain3_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float gain4 = 5;
    {PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain4_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float gain5 = 6;
    {PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain5_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float gain6 = 7;
    {PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain6_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float gain7 = 8;
    {PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain7_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float gain8 = 9;
    {PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain8_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float gain9 = 10;
    {PROTOBUF_FIELD_OFFSET(CustomGainSet, _impl_.gain9_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CustomGainSet::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CustomGainSet)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float gain0 = 1;
  if (this->_internal_gain0_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_gain0(), target);
  }

  // repeated float gain1 = 2;
  if (this->_internal_gain1_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_gain1(), target);
  }

  // repeated float gain2 = 3;
  if (this->_internal_gain2_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_gain2(), target);
  }

  // repeated float gain3 = 4;
  if (this->_internal_gain3_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_gain3(), target);
  }

  // repeated float gain4 = 5;
  if (this->_internal_gain4_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_gain4(), target);
  }

  // repeated float gain5 = 6;
  if (this->_internal_gain5_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_gain5(), target);
  }

  // repeated float gain6 = 7;
  if (this->_internal_gain6_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_gain6(), target);
  }

  // repeated float gain7 = 8;
  if (this->_internal_gain7_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_gain7(), target);
  }

  // repeated float gain8 = 9;
  if (this->_internal_gain8_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_gain8(), target);
  }

  // repeated float gain9 = 10;
  if (this->_internal_gain9_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_gain9(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CustomGainSet)
  return target;
}

::size_t CustomGainSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CustomGainSet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float gain0 = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_gain0_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float gain1 = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_gain1_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float gain2 = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_gain2_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float gain3 = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_gain3_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float gain4 = 5;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_gain4_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float gain5 = 6;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_gain5_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float gain6 = 7;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_gain6_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float gain7 = 8;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_gain7_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float gain8 = 9;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_gain8_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float gain9 = 10;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_gain9_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CustomGainSet::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CustomGainSet::MergeImpl
};
const ::google::protobuf::Message::ClassData*CustomGainSet::GetClassData() const { return &_class_data_; }


void CustomGainSet::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CustomGainSet*>(&to_msg);
  auto& from = static_cast<const CustomGainSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CustomGainSet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_gain0()->MergeFrom(from._internal_gain0());
  _this->_internal_mutable_gain1()->MergeFrom(from._internal_gain1());
  _this->_internal_mutable_gain2()->MergeFrom(from._internal_gain2());
  _this->_internal_mutable_gain3()->MergeFrom(from._internal_gain3());
  _this->_internal_mutable_gain4()->MergeFrom(from._internal_gain4());
  _this->_internal_mutable_gain5()->MergeFrom(from._internal_gain5());
  _this->_internal_mutable_gain6()->MergeFrom(from._internal_gain6());
  _this->_internal_mutable_gain7()->MergeFrom(from._internal_gain7());
  _this->_internal_mutable_gain8()->MergeFrom(from._internal_gain8());
  _this->_internal_mutable_gain9()->MergeFrom(from._internal_gain9());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CustomGainSet::CopyFrom(const CustomGainSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CustomGainSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CustomGainSet::IsInitialized() const {
  return true;
}

void CustomGainSet::InternalSwap(CustomGainSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gain0_.InternalSwap(&other->_impl_.gain0_);
  _impl_.gain1_.InternalSwap(&other->_impl_.gain1_);
  _impl_.gain2_.InternalSwap(&other->_impl_.gain2_);
  _impl_.gain3_.InternalSwap(&other->_impl_.gain3_);
  _impl_.gain4_.InternalSwap(&other->_impl_.gain4_);
  _impl_.gain5_.InternalSwap(&other->_impl_.gain5_);
  _impl_.gain6_.InternalSwap(&other->_impl_.gain6_);
  _impl_.gain7_.InternalSwap(&other->_impl_.gain7_);
  _impl_.gain8_.InternalSwap(&other->_impl_.gain8_);
  _impl_.gain9_.InternalSwap(&other->_impl_.gain9_);
}

::google::protobuf::Metadata CustomGainSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[12]);
}
// ===================================================================

class NewControllerTestState::_Internal {
 public:
};

NewControllerTestState::NewControllerTestState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.NewControllerTestState)
}
NewControllerTestState::NewControllerTestState(const NewControllerTestState& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.NewControllerTestState)
}
inline void NewControllerTestState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.jenable_){false},
      decltype(_impl_.tenable_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
NewControllerTestState::~NewControllerTestState() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.NewControllerTestState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NewControllerTestState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void NewControllerTestState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void NewControllerTestState::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.NewControllerTestState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.jenable_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tenable_) -
      reinterpret_cast<char*>(&_impl_.jenable_)) + sizeof(_impl_.tenable_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NewControllerTestState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> NewControllerTestState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NewControllerTestState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool Tenable = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NewControllerTestState, _impl_.tenable_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NewControllerTestState, _impl_.tenable_)}},
    // bool Jenable = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NewControllerTestState, _impl_.jenable_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(NewControllerTestState, _impl_.jenable_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool Jenable = 1;
    {PROTOBUF_FIELD_OFFSET(NewControllerTestState, _impl_.jenable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool Tenable = 2;
    {PROTOBUF_FIELD_OFFSET(NewControllerTestState, _impl_.tenable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* NewControllerTestState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.NewControllerTestState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool Jenable = 1;
  if (this->_internal_jenable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_jenable(), target);
  }

  // bool Tenable = 2;
  if (this->_internal_tenable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_tenable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.NewControllerTestState)
  return target;
}

::size_t NewControllerTestState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.NewControllerTestState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Jenable = 1;
  if (this->_internal_jenable() != 0) {
    total_size += 2;
  }

  // bool Tenable = 2;
  if (this->_internal_tenable() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NewControllerTestState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    NewControllerTestState::MergeImpl
};
const ::google::protobuf::Message::ClassData*NewControllerTestState::GetClassData() const { return &_class_data_; }


void NewControllerTestState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NewControllerTestState*>(&to_msg);
  auto& from = static_cast<const NewControllerTestState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.NewControllerTestState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_jenable() != 0) {
    _this->_internal_set_jenable(from._internal_jenable());
  }
  if (from._internal_tenable() != 0) {
    _this->_internal_set_tenable(from._internal_tenable());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NewControllerTestState::CopyFrom(const NewControllerTestState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.NewControllerTestState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NewControllerTestState::IsInitialized() const {
  return true;
}

void NewControllerTestState::InternalSwap(NewControllerTestState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewControllerTestState, _impl_.tenable_)
      + sizeof(NewControllerTestState::_impl_.tenable_)
      - PROTOBUF_FIELD_OFFSET(NewControllerTestState, _impl_.jenable_)>(
          reinterpret_cast<char*>(&_impl_.jenable_),
          reinterpret_cast<char*>(&other->_impl_.jenable_));
}

::google::protobuf::Metadata NewControllerTestState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[13]);
}
// ===================================================================

class FrictionCompSet::_Internal {
 public:
};

FrictionCompSet::FrictionCompSet(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.FrictionCompSet)
}
FrictionCompSet::FrictionCompSet(const FrictionCompSet& from) : ::google::protobuf::Message() {
  FrictionCompSet* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.control_comp_levels_){from._impl_.control_comp_levels_},
      /* _impl_._control_comp_levels_cached_byte_size_ = */ {0},
      decltype(_impl_.teaching_comp_levels_){from._impl_.teaching_comp_levels_},
      /* _impl_._teaching_comp_levels_cached_byte_size_ = */ {0},
      decltype(_impl_.control_comp_enable_){},
      decltype(_impl_.teaching_comp_enable_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.control_comp_enable_, &from._impl_.control_comp_enable_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.teaching_comp_enable_) -
    reinterpret_cast<char*>(&_impl_.control_comp_enable_)) + sizeof(_impl_.teaching_comp_enable_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.FrictionCompSet)
}
inline void FrictionCompSet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.control_comp_levels_){arena},
      /* _impl_._control_comp_levels_cached_byte_size_ = */ {0},
      decltype(_impl_.teaching_comp_levels_){arena},
      /* _impl_._teaching_comp_levels_cached_byte_size_ = */ {0},
      decltype(_impl_.control_comp_enable_){false},
      decltype(_impl_.teaching_comp_enable_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
FrictionCompSet::~FrictionCompSet() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.FrictionCompSet)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FrictionCompSet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.control_comp_levels_.~RepeatedField();
  _impl_.teaching_comp_levels_.~RepeatedField();
}
void FrictionCompSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FrictionCompSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.FrictionCompSet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_control_comp_levels()->Clear();
  _internal_mutable_teaching_comp_levels()->Clear();
  ::memset(&_impl_.control_comp_enable_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.teaching_comp_enable_) -
      reinterpret_cast<char*>(&_impl_.control_comp_enable_)) + sizeof(_impl_.teaching_comp_enable_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FrictionCompSet::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> FrictionCompSet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FrictionCompSet_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated int32 teaching_comp_levels = 4;
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(FrictionCompSet, _impl_.teaching_comp_levels_)}},
    // bool control_comp_enable = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FrictionCompSet, _impl_.control_comp_enable_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FrictionCompSet, _impl_.control_comp_enable_)}},
    // repeated int32 control_comp_levels = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FrictionCompSet, _impl_.control_comp_levels_)}},
    // bool teaching_comp_enable = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FrictionCompSet, _impl_.teaching_comp_enable_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(FrictionCompSet, _impl_.teaching_comp_enable_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool control_comp_enable = 1;
    {PROTOBUF_FIELD_OFFSET(FrictionCompSet, _impl_.control_comp_enable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated int32 control_comp_levels = 2;
    {PROTOBUF_FIELD_OFFSET(FrictionCompSet, _impl_.control_comp_levels_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // bool teaching_comp_enable = 3;
    {PROTOBUF_FIELD_OFFSET(FrictionCompSet, _impl_.teaching_comp_enable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated int32 teaching_comp_levels = 4;
    {PROTOBUF_FIELD_OFFSET(FrictionCompSet, _impl_.teaching_comp_levels_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FrictionCompSet::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.FrictionCompSet)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool control_comp_enable = 1;
  if (this->_internal_control_comp_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_control_comp_enable(), target);
  }

  // repeated int32 control_comp_levels = 2;
  {
    int byte_size = _impl_._control_comp_levels_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(2, _internal_control_comp_levels(),
                                                 byte_size, target);
    }
  }

  // bool teaching_comp_enable = 3;
  if (this->_internal_teaching_comp_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_teaching_comp_enable(), target);
  }

  // repeated int32 teaching_comp_levels = 4;
  {
    int byte_size = _impl_._teaching_comp_levels_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(4, _internal_teaching_comp_levels(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.FrictionCompSet)
  return target;
}

::size_t FrictionCompSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.FrictionCompSet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 control_comp_levels = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_control_comp_levels())
    ;
    _impl_._control_comp_levels_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 teaching_comp_levels = 4;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_teaching_comp_levels())
    ;
    _impl_._teaching_comp_levels_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // bool control_comp_enable = 1;
  if (this->_internal_control_comp_enable() != 0) {
    total_size += 2;
  }

  // bool teaching_comp_enable = 3;
  if (this->_internal_teaching_comp_enable() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FrictionCompSet::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FrictionCompSet::MergeImpl
};
const ::google::protobuf::Message::ClassData*FrictionCompSet::GetClassData() const { return &_class_data_; }


void FrictionCompSet::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FrictionCompSet*>(&to_msg);
  auto& from = static_cast<const FrictionCompSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.FrictionCompSet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_control_comp_levels()->MergeFrom(from._internal_control_comp_levels());
  _this->_internal_mutable_teaching_comp_levels()->MergeFrom(from._internal_teaching_comp_levels());
  if (from._internal_control_comp_enable() != 0) {
    _this->_internal_set_control_comp_enable(from._internal_control_comp_enable());
  }
  if (from._internal_teaching_comp_enable() != 0) {
    _this->_internal_set_teaching_comp_enable(from._internal_teaching_comp_enable());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FrictionCompSet::CopyFrom(const FrictionCompSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.FrictionCompSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FrictionCompSet::IsInitialized() const {
  return true;
}

void FrictionCompSet::InternalSwap(FrictionCompSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.control_comp_levels_.InternalSwap(&other->_impl_.control_comp_levels_);
  _impl_.teaching_comp_levels_.InternalSwap(&other->_impl_.teaching_comp_levels_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrictionCompSet, _impl_.teaching_comp_enable_)
      + sizeof(FrictionCompSet::_impl_.teaching_comp_enable_)
      - PROTOBUF_FIELD_OFFSET(FrictionCompSet, _impl_.control_comp_enable_)>(
          reinterpret_cast<char*>(&_impl_.control_comp_enable_),
          reinterpret_cast<char*>(&other->_impl_.control_comp_enable_));
}

::google::protobuf::Metadata FrictionCompSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[14]);
}
// ===================================================================

class MountingAngles::_Internal {
 public:
};

MountingAngles::MountingAngles(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MountingAngles)
}
MountingAngles::MountingAngles(const MountingAngles& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MountingAngles)
}
inline void MountingAngles::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ry_){0},
      decltype(_impl_.rz_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
MountingAngles::~MountingAngles() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MountingAngles)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MountingAngles::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void MountingAngles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MountingAngles::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MountingAngles)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ry_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.rz_) -
      reinterpret_cast<char*>(&_impl_.ry_)) + sizeof(_impl_.rz_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MountingAngles::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> MountingAngles::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MountingAngles_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float rz = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(MountingAngles, _impl_.rz_)}},
    // float ry = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(MountingAngles, _impl_.ry_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float ry = 1;
    {PROTOBUF_FIELD_OFFSET(MountingAngles, _impl_.ry_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float rz = 2;
    {PROTOBUF_FIELD_OFFSET(MountingAngles, _impl_.rz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* MountingAngles::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MountingAngles)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float ry = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ry = this->_internal_ry();
  ::uint32_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_ry(), target);
  }

  // float rz = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rz = this->_internal_rz();
  ::uint32_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_rz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MountingAngles)
  return target;
}

::size_t MountingAngles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MountingAngles)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float ry = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ry = this->_internal_ry();
  ::uint32_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    total_size += 5;
  }

  // float rz = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rz = this->_internal_rz();
  ::uint32_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MountingAngles::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MountingAngles::MergeImpl
};
const ::google::protobuf::Message::ClassData*MountingAngles::GetClassData() const { return &_class_data_; }


void MountingAngles::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MountingAngles*>(&to_msg);
  auto& from = static_cast<const MountingAngles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MountingAngles)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ry = from._internal_ry();
  ::uint32_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    _this->_internal_set_ry(from._internal_ry());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rz = from._internal_rz();
  ::uint32_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    _this->_internal_set_rz(from._internal_rz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MountingAngles::CopyFrom(const MountingAngles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MountingAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MountingAngles::IsInitialized() const {
  return true;
}

void MountingAngles::InternalSwap(MountingAngles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MountingAngles, _impl_.rz_)
      + sizeof(MountingAngles::_impl_.rz_)
      - PROTOBUF_FIELD_OFFSET(MountingAngles, _impl_.ry_)>(
          reinterpret_cast<char*>(&_impl_.ry_),
          reinterpret_cast<char*>(&other->_impl_.ry_));
}

::google::protobuf::Metadata MountingAngles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[15]);
}
// ===================================================================

class ToolProperties::_Internal {
 public:
};

ToolProperties::ToolProperties(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ToolProperties)
}
ToolProperties::ToolProperties(const ToolProperties& from) : ::google::protobuf::Message() {
  ToolProperties* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.center_of_mass_){from._impl_.center_of_mass_},
      decltype(_impl_.inertia_){from._impl_.inertia_},
      decltype(_impl_.mass_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.mass_ = from._impl_.mass_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ToolProperties)
}
inline void ToolProperties::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.center_of_mass_){arena},
      decltype(_impl_.inertia_){arena},
      decltype(_impl_.mass_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
ToolProperties::~ToolProperties() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ToolProperties)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ToolProperties::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.center_of_mass_.~RepeatedField();
  _impl_.inertia_.~RepeatedField();
}
void ToolProperties::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ToolProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ToolProperties)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_center_of_mass()->Clear();
  _internal_mutable_inertia()->Clear();
  _impl_.mass_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ToolProperties::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> ToolProperties::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ToolProperties_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float mass = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(ToolProperties, _impl_.mass_)}},
    // repeated float center_of_mass = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ToolProperties, _impl_.center_of_mass_)}},
    // repeated float inertia = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ToolProperties, _impl_.inertia_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float mass = 1;
    {PROTOBUF_FIELD_OFFSET(ToolProperties, _impl_.mass_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // repeated float center_of_mass = 2;
    {PROTOBUF_FIELD_OFFSET(ToolProperties, _impl_.center_of_mass_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float inertia = 3;
    {PROTOBUF_FIELD_OFFSET(ToolProperties, _impl_.inertia_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ToolProperties::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ToolProperties)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float mass = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_mass = this->_internal_mass();
  ::uint32_t raw_mass;
  memcpy(&raw_mass, &tmp_mass, sizeof(tmp_mass));
  if (raw_mass != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_mass(), target);
  }

  // repeated float center_of_mass = 2;
  if (this->_internal_center_of_mass_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_center_of_mass(), target);
  }

  // repeated float inertia = 3;
  if (this->_internal_inertia_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_inertia(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ToolProperties)
  return target;
}

::size_t ToolProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ToolProperties)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float center_of_mass = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_center_of_mass_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float inertia = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_inertia_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // float mass = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_mass = this->_internal_mass();
  ::uint32_t raw_mass;
  memcpy(&raw_mass, &tmp_mass, sizeof(tmp_mass));
  if (raw_mass != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ToolProperties::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ToolProperties::MergeImpl
};
const ::google::protobuf::Message::ClassData*ToolProperties::GetClassData() const { return &_class_data_; }


void ToolProperties::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ToolProperties*>(&to_msg);
  auto& from = static_cast<const ToolProperties&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ToolProperties)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_center_of_mass()->MergeFrom(from._internal_center_of_mass());
  _this->_internal_mutable_inertia()->MergeFrom(from._internal_inertia());
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_mass = from._internal_mass();
  ::uint32_t raw_mass;
  memcpy(&raw_mass, &tmp_mass, sizeof(tmp_mass));
  if (raw_mass != 0) {
    _this->_internal_set_mass(from._internal_mass());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ToolProperties::CopyFrom(const ToolProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ToolProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ToolProperties::IsInitialized() const {
  return true;
}

void ToolProperties::InternalSwap(ToolProperties* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.center_of_mass_.InternalSwap(&other->_impl_.center_of_mass_);
  _impl_.inertia_.InternalSwap(&other->_impl_.inertia_);
        swap(_impl_.mass_, other->_impl_.mass_);
}

::google::protobuf::Metadata ToolProperties::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[16]);
}
// ===================================================================

class CollisionSensLevel::_Internal {
 public:
};

CollisionSensLevel::CollisionSensLevel(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CollisionSensLevel)
}
CollisionSensLevel::CollisionSensLevel(const CollisionSensLevel& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CollisionSensLevel)
}
inline void CollisionSensLevel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){0u},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
CollisionSensLevel::~CollisionSensLevel() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CollisionSensLevel)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CollisionSensLevel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CollisionSensLevel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CollisionSensLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CollisionSensLevel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.level_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CollisionSensLevel::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> CollisionSensLevel::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CollisionSensLevel_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CollisionSensLevel, _impl_.level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CollisionSensLevel, _impl_.level_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 level = 1;
    {PROTOBUF_FIELD_OFFSET(CollisionSensLevel, _impl_.level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CollisionSensLevel::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CollisionSensLevel)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CollisionSensLevel)
  return target;
}

::size_t CollisionSensLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CollisionSensLevel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CollisionSensLevel::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CollisionSensLevel::MergeImpl
};
const ::google::protobuf::Message::ClassData*CollisionSensLevel::GetClassData() const { return &_class_data_; }


void CollisionSensLevel::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CollisionSensLevel*>(&to_msg);
  auto& from = static_cast<const CollisionSensLevel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CollisionSensLevel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CollisionSensLevel::CopyFrom(const CollisionSensLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CollisionSensLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CollisionSensLevel::IsInitialized() const {
  return true;
}

void CollisionSensLevel::InternalSwap(CollisionSensLevel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.level_, other->_impl_.level_);
}

::google::protobuf::Metadata CollisionSensLevel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[17]);
}
// ===================================================================

class CollisionThresholds::_Internal {
 public:
};

CollisionThresholds::CollisionThresholds(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CollisionThresholds)
}
CollisionThresholds::CollisionThresholds(const CollisionThresholds& from) : ::google::protobuf::Message() {
  CollisionThresholds* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.j_torque_bases_){from._impl_.j_torque_bases_},
      decltype(_impl_.j_torque_tangents_){from._impl_.j_torque_tangents_},
      decltype(_impl_.t_torque_bases_){from._impl_.t_torque_bases_},
      decltype(_impl_.t_torque_tangents_){from._impl_.t_torque_tangents_},
      decltype(_impl_.error_bases_){from._impl_.error_bases_},
      decltype(_impl_.error_tangents_){from._impl_.error_tangents_},
      decltype(_impl_.t_constvel_torque_bases_){from._impl_.t_constvel_torque_bases_},
      decltype(_impl_.t_constvel_torque_tangents_){from._impl_.t_constvel_torque_tangents_},
      decltype(_impl_.t_conveyor_torque_bases_){from._impl_.t_conveyor_torque_bases_},
      decltype(_impl_.t_conveyor_torque_tangents_){from._impl_.t_conveyor_torque_tangents_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CollisionThresholds)
}
inline void CollisionThresholds::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.j_torque_bases_){arena},
      decltype(_impl_.j_torque_tangents_){arena},
      decltype(_impl_.t_torque_bases_){arena},
      decltype(_impl_.t_torque_tangents_){arena},
      decltype(_impl_.error_bases_){arena},
      decltype(_impl_.error_tangents_){arena},
      decltype(_impl_.t_constvel_torque_bases_){arena},
      decltype(_impl_.t_constvel_torque_tangents_){arena},
      decltype(_impl_.t_conveyor_torque_bases_){arena},
      decltype(_impl_.t_conveyor_torque_tangents_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
CollisionThresholds::~CollisionThresholds() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CollisionThresholds)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CollisionThresholds::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.j_torque_bases_.~RepeatedField();
  _impl_.j_torque_tangents_.~RepeatedField();
  _impl_.t_torque_bases_.~RepeatedField();
  _impl_.t_torque_tangents_.~RepeatedField();
  _impl_.error_bases_.~RepeatedField();
  _impl_.error_tangents_.~RepeatedField();
  _impl_.t_constvel_torque_bases_.~RepeatedField();
  _impl_.t_constvel_torque_tangents_.~RepeatedField();
  _impl_.t_conveyor_torque_bases_.~RepeatedField();
  _impl_.t_conveyor_torque_tangents_.~RepeatedField();
}
void CollisionThresholds::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CollisionThresholds::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CollisionThresholds)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_j_torque_bases()->Clear();
  _internal_mutable_j_torque_tangents()->Clear();
  _internal_mutable_t_torque_bases()->Clear();
  _internal_mutable_t_torque_tangents()->Clear();
  _internal_mutable_error_bases()->Clear();
  _internal_mutable_error_tangents()->Clear();
  _internal_mutable_t_constvel_torque_bases()->Clear();
  _internal_mutable_t_constvel_torque_tangents()->Clear();
  _internal_mutable_t_conveyor_torque_bases()->Clear();
  _internal_mutable_t_conveyor_torque_tangents()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CollisionThresholds::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 0, 2> CollisionThresholds::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CollisionThresholds_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float j_torque_bases = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.j_torque_bases_)}},
    // repeated float j_torque_tangents = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.j_torque_tangents_)}},
    // repeated float t_torque_bases = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.t_torque_bases_)}},
    // repeated float t_torque_tangents = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.t_torque_tangents_)}},
    // repeated float error_bases = 5;
    {::_pbi::TcParser::FastF32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.error_bases_)}},
    // repeated float error_tangents = 6;
    {::_pbi::TcParser::FastF32P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.error_tangents_)}},
    // repeated float t_constvel_torque_bases = 7;
    {::_pbi::TcParser::FastF32P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.t_constvel_torque_bases_)}},
    // repeated float t_constvel_torque_tangents = 8;
    {::_pbi::TcParser::FastF32P1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.t_constvel_torque_tangents_)}},
    // repeated float t_conveyor_torque_bases = 9;
    {::_pbi::TcParser::FastF32P1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.t_conveyor_torque_bases_)}},
    // repeated float t_conveyor_torque_tangents = 10;
    {::_pbi::TcParser::FastF32P1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.t_conveyor_torque_tangents_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float j_torque_bases = 1;
    {PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.j_torque_bases_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float j_torque_tangents = 2;
    {PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.j_torque_tangents_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float t_torque_bases = 3;
    {PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.t_torque_bases_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float t_torque_tangents = 4;
    {PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.t_torque_tangents_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float error_bases = 5;
    {PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.error_bases_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float error_tangents = 6;
    {PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.error_tangents_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float t_constvel_torque_bases = 7;
    {PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.t_constvel_torque_bases_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float t_constvel_torque_tangents = 8;
    {PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.t_constvel_torque_tangents_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float t_conveyor_torque_bases = 9;
    {PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.t_conveyor_torque_bases_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float t_conveyor_torque_tangents = 10;
    {PROTOBUF_FIELD_OFFSET(CollisionThresholds, _impl_.t_conveyor_torque_tangents_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CollisionThresholds::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CollisionThresholds)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float j_torque_bases = 1;
  if (this->_internal_j_torque_bases_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_j_torque_bases(), target);
  }

  // repeated float j_torque_tangents = 2;
  if (this->_internal_j_torque_tangents_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_j_torque_tangents(), target);
  }

  // repeated float t_torque_bases = 3;
  if (this->_internal_t_torque_bases_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_t_torque_bases(), target);
  }

  // repeated float t_torque_tangents = 4;
  if (this->_internal_t_torque_tangents_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_t_torque_tangents(), target);
  }

  // repeated float error_bases = 5;
  if (this->_internal_error_bases_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_error_bases(), target);
  }

  // repeated float error_tangents = 6;
  if (this->_internal_error_tangents_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_error_tangents(), target);
  }

  // repeated float t_constvel_torque_bases = 7;
  if (this->_internal_t_constvel_torque_bases_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_t_constvel_torque_bases(), target);
  }

  // repeated float t_constvel_torque_tangents = 8;
  if (this->_internal_t_constvel_torque_tangents_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_t_constvel_torque_tangents(), target);
  }

  // repeated float t_conveyor_torque_bases = 9;
  if (this->_internal_t_conveyor_torque_bases_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_t_conveyor_torque_bases(), target);
  }

  // repeated float t_conveyor_torque_tangents = 10;
  if (this->_internal_t_conveyor_torque_tangents_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_t_conveyor_torque_tangents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CollisionThresholds)
  return target;
}

::size_t CollisionThresholds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CollisionThresholds)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float j_torque_bases = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_j_torque_bases_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float j_torque_tangents = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_j_torque_tangents_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float t_torque_bases = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_t_torque_bases_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float t_torque_tangents = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_t_torque_tangents_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float error_bases = 5;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_error_bases_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float error_tangents = 6;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_error_tangents_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float t_constvel_torque_bases = 7;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_t_constvel_torque_bases_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float t_constvel_torque_tangents = 8;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_t_constvel_torque_tangents_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float t_conveyor_torque_bases = 9;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_t_conveyor_torque_bases_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float t_conveyor_torque_tangents = 10;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_t_conveyor_torque_tangents_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CollisionThresholds::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CollisionThresholds::MergeImpl
};
const ::google::protobuf::Message::ClassData*CollisionThresholds::GetClassData() const { return &_class_data_; }


void CollisionThresholds::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CollisionThresholds*>(&to_msg);
  auto& from = static_cast<const CollisionThresholds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CollisionThresholds)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_j_torque_bases()->MergeFrom(from._internal_j_torque_bases());
  _this->_internal_mutable_j_torque_tangents()->MergeFrom(from._internal_j_torque_tangents());
  _this->_internal_mutable_t_torque_bases()->MergeFrom(from._internal_t_torque_bases());
  _this->_internal_mutable_t_torque_tangents()->MergeFrom(from._internal_t_torque_tangents());
  _this->_internal_mutable_error_bases()->MergeFrom(from._internal_error_bases());
  _this->_internal_mutable_error_tangents()->MergeFrom(from._internal_error_tangents());
  _this->_internal_mutable_t_constvel_torque_bases()->MergeFrom(from._internal_t_constvel_torque_bases());
  _this->_internal_mutable_t_constvel_torque_tangents()->MergeFrom(from._internal_t_constvel_torque_tangents());
  _this->_internal_mutable_t_conveyor_torque_bases()->MergeFrom(from._internal_t_conveyor_torque_bases());
  _this->_internal_mutable_t_conveyor_torque_tangents()->MergeFrom(from._internal_t_conveyor_torque_tangents());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CollisionThresholds::CopyFrom(const CollisionThresholds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CollisionThresholds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CollisionThresholds::IsInitialized() const {
  return true;
}

void CollisionThresholds::InternalSwap(CollisionThresholds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.j_torque_bases_.InternalSwap(&other->_impl_.j_torque_bases_);
  _impl_.j_torque_tangents_.InternalSwap(&other->_impl_.j_torque_tangents_);
  _impl_.t_torque_bases_.InternalSwap(&other->_impl_.t_torque_bases_);
  _impl_.t_torque_tangents_.InternalSwap(&other->_impl_.t_torque_tangents_);
  _impl_.error_bases_.InternalSwap(&other->_impl_.error_bases_);
  _impl_.error_tangents_.InternalSwap(&other->_impl_.error_tangents_);
  _impl_.t_constvel_torque_bases_.InternalSwap(&other->_impl_.t_constvel_torque_bases_);
  _impl_.t_constvel_torque_tangents_.InternalSwap(&other->_impl_.t_constvel_torque_tangents_);
  _impl_.t_conveyor_torque_bases_.InternalSwap(&other->_impl_.t_conveyor_torque_bases_);
  _impl_.t_conveyor_torque_tangents_.InternalSwap(&other->_impl_.t_conveyor_torque_tangents_);
}

::google::protobuf::Metadata CollisionThresholds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[18]);
}
// ===================================================================

class CollisionPolicy::_Internal {
 public:
};

CollisionPolicy::CollisionPolicy(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CollisionPolicy)
}
CollisionPolicy::CollisionPolicy(const CollisionPolicy& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CollisionPolicy)
}
inline void CollisionPolicy::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.policy_){0},
      decltype(_impl_.sleep_time_){0},
      decltype(_impl_.gravity_time_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
CollisionPolicy::~CollisionPolicy() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CollisionPolicy)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CollisionPolicy::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CollisionPolicy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CollisionPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CollisionPolicy)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.policy_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.gravity_time_) -
      reinterpret_cast<char*>(&_impl_.policy_)) + sizeof(_impl_.gravity_time_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CollisionPolicy::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> CollisionPolicy::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CollisionPolicy_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.CollisionPolicyType policy = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CollisionPolicy, _impl_.policy_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CollisionPolicy, _impl_.policy_)}},
    // float sleep_time = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(CollisionPolicy, _impl_.sleep_time_)}},
    // float gravity_time = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(CollisionPolicy, _impl_.gravity_time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.CollisionPolicyType policy = 1;
    {PROTOBUF_FIELD_OFFSET(CollisionPolicy, _impl_.policy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float sleep_time = 2;
    {PROTOBUF_FIELD_OFFSET(CollisionPolicy, _impl_.sleep_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float gravity_time = 3;
    {PROTOBUF_FIELD_OFFSET(CollisionPolicy, _impl_.gravity_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CollisionPolicy::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CollisionPolicy)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.CollisionPolicyType policy = 1;
  if (this->_internal_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_policy(), target);
  }

  // float sleep_time = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sleep_time = this->_internal_sleep_time();
  ::uint32_t raw_sleep_time;
  memcpy(&raw_sleep_time, &tmp_sleep_time, sizeof(tmp_sleep_time));
  if (raw_sleep_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_sleep_time(), target);
  }

  // float gravity_time = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gravity_time = this->_internal_gravity_time();
  ::uint32_t raw_gravity_time;
  memcpy(&raw_gravity_time, &tmp_gravity_time, sizeof(tmp_gravity_time));
  if (raw_gravity_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_gravity_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CollisionPolicy)
  return target;
}

::size_t CollisionPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CollisionPolicy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.CollisionPolicyType policy = 1;
  if (this->_internal_policy() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_policy());
  }

  // float sleep_time = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sleep_time = this->_internal_sleep_time();
  ::uint32_t raw_sleep_time;
  memcpy(&raw_sleep_time, &tmp_sleep_time, sizeof(tmp_sleep_time));
  if (raw_sleep_time != 0) {
    total_size += 5;
  }

  // float gravity_time = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gravity_time = this->_internal_gravity_time();
  ::uint32_t raw_gravity_time;
  memcpy(&raw_gravity_time, &tmp_gravity_time, sizeof(tmp_gravity_time));
  if (raw_gravity_time != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CollisionPolicy::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CollisionPolicy::MergeImpl
};
const ::google::protobuf::Message::ClassData*CollisionPolicy::GetClassData() const { return &_class_data_; }


void CollisionPolicy::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CollisionPolicy*>(&to_msg);
  auto& from = static_cast<const CollisionPolicy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CollisionPolicy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_policy() != 0) {
    _this->_internal_set_policy(from._internal_policy());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sleep_time = from._internal_sleep_time();
  ::uint32_t raw_sleep_time;
  memcpy(&raw_sleep_time, &tmp_sleep_time, sizeof(tmp_sleep_time));
  if (raw_sleep_time != 0) {
    _this->_internal_set_sleep_time(from._internal_sleep_time());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gravity_time = from._internal_gravity_time();
  ::uint32_t raw_gravity_time;
  memcpy(&raw_gravity_time, &tmp_gravity_time, sizeof(tmp_gravity_time));
  if (raw_gravity_time != 0) {
    _this->_internal_set_gravity_time(from._internal_gravity_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CollisionPolicy::CopyFrom(const CollisionPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CollisionPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CollisionPolicy::IsInitialized() const {
  return true;
}

void CollisionPolicy::InternalSwap(CollisionPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollisionPolicy, _impl_.gravity_time_)
      + sizeof(CollisionPolicy::_impl_.gravity_time_)
      - PROTOBUF_FIELD_OFFSET(CollisionPolicy, _impl_.policy_)>(
          reinterpret_cast<char*>(&_impl_.policy_),
          reinterpret_cast<char*>(&other->_impl_.policy_));
}

::google::protobuf::Metadata CollisionPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[19]);
}
// ===================================================================

class SafetyLimits::_Internal {
 public:
};

SafetyLimits::SafetyLimits(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.SafetyLimits)
}
SafetyLimits::SafetyLimits(const SafetyLimits& from) : ::google::protobuf::Message() {
  SafetyLimits* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.joint_upper_limits_){from._impl_.joint_upper_limits_},
      decltype(_impl_.joint_lower_limits_){from._impl_.joint_lower_limits_},
      decltype(_impl_.power_limit_){},
      decltype(_impl_.power_limit_ratio_){},
      decltype(_impl_.tcp_force_limit_){},
      decltype(_impl_.tcp_force_limit_ratio_){},
      decltype(_impl_.tcp_speed_limit_){},
      decltype(_impl_.tcp_speed_limit_ratio_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.power_limit_, &from._impl_.power_limit_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tcp_speed_limit_ratio_) -
    reinterpret_cast<char*>(&_impl_.power_limit_)) + sizeof(_impl_.tcp_speed_limit_ratio_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.SafetyLimits)
}
inline void SafetyLimits::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.joint_upper_limits_){arena},
      decltype(_impl_.joint_lower_limits_){arena},
      decltype(_impl_.power_limit_){0},
      decltype(_impl_.power_limit_ratio_){0},
      decltype(_impl_.tcp_force_limit_){0},
      decltype(_impl_.tcp_force_limit_ratio_){0},
      decltype(_impl_.tcp_speed_limit_){0},
      decltype(_impl_.tcp_speed_limit_ratio_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
SafetyLimits::~SafetyLimits() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.SafetyLimits)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SafetyLimits::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.joint_upper_limits_.~RepeatedField();
  _impl_.joint_lower_limits_.~RepeatedField();
}
void SafetyLimits::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SafetyLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.SafetyLimits)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_joint_upper_limits()->Clear();
  _internal_mutable_joint_lower_limits()->Clear();
  ::memset(&_impl_.power_limit_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tcp_speed_limit_ratio_) -
      reinterpret_cast<char*>(&_impl_.power_limit_)) + sizeof(_impl_.tcp_speed_limit_ratio_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SafetyLimits::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 0, 2> SafetyLimits::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SafetyLimits_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float joint_lower_limits = 8;
    {::_pbi::TcParser::FastF32P1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.joint_lower_limits_)}},
    // float power_limit = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.power_limit_)}},
    // float power_limit_ratio = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.power_limit_ratio_)}},
    // float tcp_force_limit = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.tcp_force_limit_)}},
    // float tcp_force_limit_ratio = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.tcp_force_limit_ratio_)}},
    // float tcp_speed_limit = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.tcp_speed_limit_)}},
    // float tcp_speed_limit_ratio = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.tcp_speed_limit_ratio_)}},
    // repeated float joint_upper_limits = 7;
    {::_pbi::TcParser::FastF32P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.joint_upper_limits_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float power_limit = 1;
    {PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.power_limit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float power_limit_ratio = 2;
    {PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.power_limit_ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float tcp_force_limit = 3;
    {PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.tcp_force_limit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float tcp_force_limit_ratio = 4;
    {PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.tcp_force_limit_ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float tcp_speed_limit = 5;
    {PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.tcp_speed_limit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float tcp_speed_limit_ratio = 6;
    {PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.tcp_speed_limit_ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // repeated float joint_upper_limits = 7;
    {PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.joint_upper_limits_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float joint_lower_limits = 8;
    {PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.joint_lower_limits_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SafetyLimits::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.SafetyLimits)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float power_limit = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_power_limit = this->_internal_power_limit();
  ::uint32_t raw_power_limit;
  memcpy(&raw_power_limit, &tmp_power_limit, sizeof(tmp_power_limit));
  if (raw_power_limit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_power_limit(), target);
  }

  // float power_limit_ratio = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_power_limit_ratio = this->_internal_power_limit_ratio();
  ::uint32_t raw_power_limit_ratio;
  memcpy(&raw_power_limit_ratio, &tmp_power_limit_ratio, sizeof(tmp_power_limit_ratio));
  if (raw_power_limit_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_power_limit_ratio(), target);
  }

  // float tcp_force_limit = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tcp_force_limit = this->_internal_tcp_force_limit();
  ::uint32_t raw_tcp_force_limit;
  memcpy(&raw_tcp_force_limit, &tmp_tcp_force_limit, sizeof(tmp_tcp_force_limit));
  if (raw_tcp_force_limit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_tcp_force_limit(), target);
  }

  // float tcp_force_limit_ratio = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tcp_force_limit_ratio = this->_internal_tcp_force_limit_ratio();
  ::uint32_t raw_tcp_force_limit_ratio;
  memcpy(&raw_tcp_force_limit_ratio, &tmp_tcp_force_limit_ratio, sizeof(tmp_tcp_force_limit_ratio));
  if (raw_tcp_force_limit_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_tcp_force_limit_ratio(), target);
  }

  // float tcp_speed_limit = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tcp_speed_limit = this->_internal_tcp_speed_limit();
  ::uint32_t raw_tcp_speed_limit;
  memcpy(&raw_tcp_speed_limit, &tmp_tcp_speed_limit, sizeof(tmp_tcp_speed_limit));
  if (raw_tcp_speed_limit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_tcp_speed_limit(), target);
  }

  // float tcp_speed_limit_ratio = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tcp_speed_limit_ratio = this->_internal_tcp_speed_limit_ratio();
  ::uint32_t raw_tcp_speed_limit_ratio;
  memcpy(&raw_tcp_speed_limit_ratio, &tmp_tcp_speed_limit_ratio, sizeof(tmp_tcp_speed_limit_ratio));
  if (raw_tcp_speed_limit_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_tcp_speed_limit_ratio(), target);
  }

  // repeated float joint_upper_limits = 7;
  if (this->_internal_joint_upper_limits_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_joint_upper_limits(), target);
  }

  // repeated float joint_lower_limits = 8;
  if (this->_internal_joint_lower_limits_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_joint_lower_limits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.SafetyLimits)
  return target;
}

::size_t SafetyLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.SafetyLimits)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float joint_upper_limits = 7;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_joint_upper_limits_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float joint_lower_limits = 8;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_joint_lower_limits_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // float power_limit = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_power_limit = this->_internal_power_limit();
  ::uint32_t raw_power_limit;
  memcpy(&raw_power_limit, &tmp_power_limit, sizeof(tmp_power_limit));
  if (raw_power_limit != 0) {
    total_size += 5;
  }

  // float power_limit_ratio = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_power_limit_ratio = this->_internal_power_limit_ratio();
  ::uint32_t raw_power_limit_ratio;
  memcpy(&raw_power_limit_ratio, &tmp_power_limit_ratio, sizeof(tmp_power_limit_ratio));
  if (raw_power_limit_ratio != 0) {
    total_size += 5;
  }

  // float tcp_force_limit = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tcp_force_limit = this->_internal_tcp_force_limit();
  ::uint32_t raw_tcp_force_limit;
  memcpy(&raw_tcp_force_limit, &tmp_tcp_force_limit, sizeof(tmp_tcp_force_limit));
  if (raw_tcp_force_limit != 0) {
    total_size += 5;
  }

  // float tcp_force_limit_ratio = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tcp_force_limit_ratio = this->_internal_tcp_force_limit_ratio();
  ::uint32_t raw_tcp_force_limit_ratio;
  memcpy(&raw_tcp_force_limit_ratio, &tmp_tcp_force_limit_ratio, sizeof(tmp_tcp_force_limit_ratio));
  if (raw_tcp_force_limit_ratio != 0) {
    total_size += 5;
  }

  // float tcp_speed_limit = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tcp_speed_limit = this->_internal_tcp_speed_limit();
  ::uint32_t raw_tcp_speed_limit;
  memcpy(&raw_tcp_speed_limit, &tmp_tcp_speed_limit, sizeof(tmp_tcp_speed_limit));
  if (raw_tcp_speed_limit != 0) {
    total_size += 5;
  }

  // float tcp_speed_limit_ratio = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tcp_speed_limit_ratio = this->_internal_tcp_speed_limit_ratio();
  ::uint32_t raw_tcp_speed_limit_ratio;
  memcpy(&raw_tcp_speed_limit_ratio, &tmp_tcp_speed_limit_ratio, sizeof(tmp_tcp_speed_limit_ratio));
  if (raw_tcp_speed_limit_ratio != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SafetyLimits::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SafetyLimits::MergeImpl
};
const ::google::protobuf::Message::ClassData*SafetyLimits::GetClassData() const { return &_class_data_; }


void SafetyLimits::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SafetyLimits*>(&to_msg);
  auto& from = static_cast<const SafetyLimits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.SafetyLimits)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_joint_upper_limits()->MergeFrom(from._internal_joint_upper_limits());
  _this->_internal_mutable_joint_lower_limits()->MergeFrom(from._internal_joint_lower_limits());
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_power_limit = from._internal_power_limit();
  ::uint32_t raw_power_limit;
  memcpy(&raw_power_limit, &tmp_power_limit, sizeof(tmp_power_limit));
  if (raw_power_limit != 0) {
    _this->_internal_set_power_limit(from._internal_power_limit());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_power_limit_ratio = from._internal_power_limit_ratio();
  ::uint32_t raw_power_limit_ratio;
  memcpy(&raw_power_limit_ratio, &tmp_power_limit_ratio, sizeof(tmp_power_limit_ratio));
  if (raw_power_limit_ratio != 0) {
    _this->_internal_set_power_limit_ratio(from._internal_power_limit_ratio());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tcp_force_limit = from._internal_tcp_force_limit();
  ::uint32_t raw_tcp_force_limit;
  memcpy(&raw_tcp_force_limit, &tmp_tcp_force_limit, sizeof(tmp_tcp_force_limit));
  if (raw_tcp_force_limit != 0) {
    _this->_internal_set_tcp_force_limit(from._internal_tcp_force_limit());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tcp_force_limit_ratio = from._internal_tcp_force_limit_ratio();
  ::uint32_t raw_tcp_force_limit_ratio;
  memcpy(&raw_tcp_force_limit_ratio, &tmp_tcp_force_limit_ratio, sizeof(tmp_tcp_force_limit_ratio));
  if (raw_tcp_force_limit_ratio != 0) {
    _this->_internal_set_tcp_force_limit_ratio(from._internal_tcp_force_limit_ratio());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tcp_speed_limit = from._internal_tcp_speed_limit();
  ::uint32_t raw_tcp_speed_limit;
  memcpy(&raw_tcp_speed_limit, &tmp_tcp_speed_limit, sizeof(tmp_tcp_speed_limit));
  if (raw_tcp_speed_limit != 0) {
    _this->_internal_set_tcp_speed_limit(from._internal_tcp_speed_limit());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_tcp_speed_limit_ratio = from._internal_tcp_speed_limit_ratio();
  ::uint32_t raw_tcp_speed_limit_ratio;
  memcpy(&raw_tcp_speed_limit_ratio, &tmp_tcp_speed_limit_ratio, sizeof(tmp_tcp_speed_limit_ratio));
  if (raw_tcp_speed_limit_ratio != 0) {
    _this->_internal_set_tcp_speed_limit_ratio(from._internal_tcp_speed_limit_ratio());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SafetyLimits::CopyFrom(const SafetyLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.SafetyLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SafetyLimits::IsInitialized() const {
  return true;
}

void SafetyLimits::InternalSwap(SafetyLimits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.joint_upper_limits_.InternalSwap(&other->_impl_.joint_upper_limits_);
  _impl_.joint_lower_limits_.InternalSwap(&other->_impl_.joint_lower_limits_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.tcp_speed_limit_ratio_)
      + sizeof(SafetyLimits::_impl_.tcp_speed_limit_ratio_)
      - PROTOBUF_FIELD_OFFSET(SafetyLimits, _impl_.power_limit_)>(
          reinterpret_cast<char*>(&_impl_.power_limit_),
          reinterpret_cast<char*>(&other->_impl_.power_limit_));
}

::google::protobuf::Metadata SafetyLimits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[20]);
}
// ===================================================================

class SafetyStopConfig::_Internal {
 public:
};

SafetyStopConfig::SafetyStopConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.SafetyStopConfig)
}
SafetyStopConfig::SafetyStopConfig(const SafetyStopConfig& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.SafetyStopConfig)
}
inline void SafetyStopConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.joint_position_limit_stop_cat_){0},
      decltype(_impl_.joint_speed_limit_stop_cat_){0},
      decltype(_impl_.joint_torque_limit_stop_cat_){0},
      decltype(_impl_.tcp_speed_limit_stop_cat_){0},
      decltype(_impl_.tcp_force_limit_stop_cat_){0},
      decltype(_impl_.power_limit_stop_cat_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
SafetyStopConfig::~SafetyStopConfig() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.SafetyStopConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SafetyStopConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void SafetyStopConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SafetyStopConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.SafetyStopConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.joint_position_limit_stop_cat_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.power_limit_stop_cat_) -
      reinterpret_cast<char*>(&_impl_.joint_position_limit_stop_cat_)) + sizeof(_impl_.power_limit_stop_cat_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SafetyStopConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> SafetyStopConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SafetyStopConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.StopCategory joint_position_limit_stop_cat = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SafetyStopConfig, _impl_.joint_position_limit_stop_cat_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyStopConfig, _impl_.joint_position_limit_stop_cat_)}},
    // .Nrmk.IndyFramework.StopCategory joint_speed_limit_stop_cat = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SafetyStopConfig, _impl_.joint_speed_limit_stop_cat_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyStopConfig, _impl_.joint_speed_limit_stop_cat_)}},
    // .Nrmk.IndyFramework.StopCategory joint_torque_limit_stop_cat = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SafetyStopConfig, _impl_.joint_torque_limit_stop_cat_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyStopConfig, _impl_.joint_torque_limit_stop_cat_)}},
    // .Nrmk.IndyFramework.StopCategory tcp_speed_limit_stop_cat = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SafetyStopConfig, _impl_.tcp_speed_limit_stop_cat_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyStopConfig, _impl_.tcp_speed_limit_stop_cat_)}},
    // .Nrmk.IndyFramework.StopCategory tcp_force_limit_stop_cat = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SafetyStopConfig, _impl_.tcp_force_limit_stop_cat_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyStopConfig, _impl_.tcp_force_limit_stop_cat_)}},
    // .Nrmk.IndyFramework.StopCategory power_limit_stop_cat = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SafetyStopConfig, _impl_.power_limit_stop_cat_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyStopConfig, _impl_.power_limit_stop_cat_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.StopCategory joint_position_limit_stop_cat = 1;
    {PROTOBUF_FIELD_OFFSET(SafetyStopConfig, _impl_.joint_position_limit_stop_cat_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.StopCategory joint_speed_limit_stop_cat = 2;
    {PROTOBUF_FIELD_OFFSET(SafetyStopConfig, _impl_.joint_speed_limit_stop_cat_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.StopCategory joint_torque_limit_stop_cat = 3;
    {PROTOBUF_FIELD_OFFSET(SafetyStopConfig, _impl_.joint_torque_limit_stop_cat_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.StopCategory tcp_speed_limit_stop_cat = 4;
    {PROTOBUF_FIELD_OFFSET(SafetyStopConfig, _impl_.tcp_speed_limit_stop_cat_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.StopCategory tcp_force_limit_stop_cat = 5;
    {PROTOBUF_FIELD_OFFSET(SafetyStopConfig, _impl_.tcp_force_limit_stop_cat_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.StopCategory power_limit_stop_cat = 6;
    {PROTOBUF_FIELD_OFFSET(SafetyStopConfig, _impl_.power_limit_stop_cat_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SafetyStopConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.SafetyStopConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.StopCategory joint_position_limit_stop_cat = 1;
  if (this->_internal_joint_position_limit_stop_cat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_joint_position_limit_stop_cat(), target);
  }

  // .Nrmk.IndyFramework.StopCategory joint_speed_limit_stop_cat = 2;
  if (this->_internal_joint_speed_limit_stop_cat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_joint_speed_limit_stop_cat(), target);
  }

  // .Nrmk.IndyFramework.StopCategory joint_torque_limit_stop_cat = 3;
  if (this->_internal_joint_torque_limit_stop_cat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_joint_torque_limit_stop_cat(), target);
  }

  // .Nrmk.IndyFramework.StopCategory tcp_speed_limit_stop_cat = 4;
  if (this->_internal_tcp_speed_limit_stop_cat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_tcp_speed_limit_stop_cat(), target);
  }

  // .Nrmk.IndyFramework.StopCategory tcp_force_limit_stop_cat = 5;
  if (this->_internal_tcp_force_limit_stop_cat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_tcp_force_limit_stop_cat(), target);
  }

  // .Nrmk.IndyFramework.StopCategory power_limit_stop_cat = 6;
  if (this->_internal_power_limit_stop_cat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_power_limit_stop_cat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.SafetyStopConfig)
  return target;
}

::size_t SafetyStopConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.SafetyStopConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.StopCategory joint_position_limit_stop_cat = 1;
  if (this->_internal_joint_position_limit_stop_cat() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_joint_position_limit_stop_cat());
  }

  // .Nrmk.IndyFramework.StopCategory joint_speed_limit_stop_cat = 2;
  if (this->_internal_joint_speed_limit_stop_cat() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_joint_speed_limit_stop_cat());
  }

  // .Nrmk.IndyFramework.StopCategory joint_torque_limit_stop_cat = 3;
  if (this->_internal_joint_torque_limit_stop_cat() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_joint_torque_limit_stop_cat());
  }

  // .Nrmk.IndyFramework.StopCategory tcp_speed_limit_stop_cat = 4;
  if (this->_internal_tcp_speed_limit_stop_cat() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_tcp_speed_limit_stop_cat());
  }

  // .Nrmk.IndyFramework.StopCategory tcp_force_limit_stop_cat = 5;
  if (this->_internal_tcp_force_limit_stop_cat() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_tcp_force_limit_stop_cat());
  }

  // .Nrmk.IndyFramework.StopCategory power_limit_stop_cat = 6;
  if (this->_internal_power_limit_stop_cat() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_power_limit_stop_cat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SafetyStopConfig::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SafetyStopConfig::MergeImpl
};
const ::google::protobuf::Message::ClassData*SafetyStopConfig::GetClassData() const { return &_class_data_; }


void SafetyStopConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SafetyStopConfig*>(&to_msg);
  auto& from = static_cast<const SafetyStopConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.SafetyStopConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_joint_position_limit_stop_cat() != 0) {
    _this->_internal_set_joint_position_limit_stop_cat(from._internal_joint_position_limit_stop_cat());
  }
  if (from._internal_joint_speed_limit_stop_cat() != 0) {
    _this->_internal_set_joint_speed_limit_stop_cat(from._internal_joint_speed_limit_stop_cat());
  }
  if (from._internal_joint_torque_limit_stop_cat() != 0) {
    _this->_internal_set_joint_torque_limit_stop_cat(from._internal_joint_torque_limit_stop_cat());
  }
  if (from._internal_tcp_speed_limit_stop_cat() != 0) {
    _this->_internal_set_tcp_speed_limit_stop_cat(from._internal_tcp_speed_limit_stop_cat());
  }
  if (from._internal_tcp_force_limit_stop_cat() != 0) {
    _this->_internal_set_tcp_force_limit_stop_cat(from._internal_tcp_force_limit_stop_cat());
  }
  if (from._internal_power_limit_stop_cat() != 0) {
    _this->_internal_set_power_limit_stop_cat(from._internal_power_limit_stop_cat());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SafetyStopConfig::CopyFrom(const SafetyStopConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.SafetyStopConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SafetyStopConfig::IsInitialized() const {
  return true;
}

void SafetyStopConfig::InternalSwap(SafetyStopConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SafetyStopConfig, _impl_.power_limit_stop_cat_)
      + sizeof(SafetyStopConfig::_impl_.power_limit_stop_cat_)
      - PROTOBUF_FIELD_OFFSET(SafetyStopConfig, _impl_.joint_position_limit_stop_cat_)>(
          reinterpret_cast<char*>(&_impl_.joint_position_limit_stop_cat_),
          reinterpret_cast<char*>(&other->_impl_.joint_position_limit_stop_cat_));
}

::google::protobuf::Metadata SafetyStopConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[21]);
}
// ===================================================================

class DIConfig::_Internal {
 public:
};

void DIConfig::clear_triggersignals() {
  _internal_mutable_triggersignals()->Clear();
}
void DIConfig::clear_successsignals() {
  _internal_mutable_successsignals()->Clear();
}
void DIConfig::clear_failuresignals() {
  _internal_mutable_failuresignals()->Clear();
}
DIConfig::DIConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.DIConfig)
}
DIConfig::DIConfig(const DIConfig& from) : ::google::protobuf::Message() {
  DIConfig* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.triggersignals_){from._impl_.triggersignals_},
      decltype(_impl_.successsignals_){from._impl_.successsignals_},
      decltype(_impl_.failuresignals_){from._impl_.failuresignals_},
      decltype(_impl_.function_name_){},
      decltype(_impl_.function_code_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.function_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.function_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_function_name().empty()) {
    _this->_impl_.function_name_.Set(from._internal_function_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.function_code_ = from._impl_.function_code_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.DIConfig)
}
inline void DIConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.triggersignals_){arena},
      decltype(_impl_.successsignals_){arena},
      decltype(_impl_.failuresignals_){arena},
      decltype(_impl_.function_name_){},
      decltype(_impl_.function_code_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.function_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.function_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
DIConfig::~DIConfig() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.DIConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DIConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.triggersignals_.~RepeatedPtrField();
  _impl_.successsignals_.~RepeatedPtrField();
  _impl_.failuresignals_.~RepeatedPtrField();
  _impl_.function_name_.Destroy();
}
void DIConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void DIConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.DIConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_triggersignals()->Clear();
  _internal_mutable_successsignals()->Clear();
  _internal_mutable_failuresignals()->Clear();
  _impl_.function_name_.ClearToEmpty();
  _impl_.function_code_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DIConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 49, 2> DIConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DIConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 function_code = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DIConfig, _impl_.function_code_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DIConfig, _impl_.function_code_)}},
    // string function_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DIConfig, _impl_.function_name_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal triggerSignals = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DIConfig, _impl_.triggersignals_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal successSignals = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(DIConfig, _impl_.successsignals_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal failureSignals = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 2, PROTOBUF_FIELD_OFFSET(DIConfig, _impl_.failuresignals_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 function_code = 1;
    {PROTOBUF_FIELD_OFFSET(DIConfig, _impl_.function_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string function_name = 2;
    {PROTOBUF_FIELD_OFFSET(DIConfig, _impl_.function_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .Nrmk.IndyFramework.DigitalSignal triggerSignals = 3;
    {PROTOBUF_FIELD_OFFSET(DIConfig, _impl_.triggersignals_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.DigitalSignal successSignals = 4;
    {PROTOBUF_FIELD_OFFSET(DIConfig, _impl_.successsignals_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.DigitalSignal failureSignals = 5;
    {PROTOBUF_FIELD_OFFSET(DIConfig, _impl_.failuresignals_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
  }}, {{
    "\33\0\15\0\0\0\0\0"
    "Nrmk.IndyFramework.DIConfig"
    "function_name"
  }},
};

::uint8_t* DIConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.DIConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 function_code = 1;
  if (this->_internal_function_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_function_code(), target);
  }

  // string function_name = 2;
  if (!this->_internal_function_name().empty()) {
    const std::string& _s = this->_internal_function_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DIConfig.function_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal triggerSignals = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_triggersignals_size()); i < n; i++) {
    const auto& repfield = this->_internal_triggersignals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal successSignals = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_successsignals_size()); i < n; i++) {
    const auto& repfield = this->_internal_successsignals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal failureSignals = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_failuresignals_size()); i < n; i++) {
    const auto& repfield = this->_internal_failuresignals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.DIConfig)
  return target;
}

::size_t DIConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.DIConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal triggerSignals = 3;
  total_size += 1UL * this->_internal_triggersignals_size();
  for (const auto& msg : this->_internal_triggersignals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.DigitalSignal successSignals = 4;
  total_size += 1UL * this->_internal_successsignals_size();
  for (const auto& msg : this->_internal_successsignals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.DigitalSignal failureSignals = 5;
  total_size += 1UL * this->_internal_failuresignals_size();
  for (const auto& msg : this->_internal_failuresignals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string function_name = 2;
  if (!this->_internal_function_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_function_name());
  }

  // int32 function_code = 1;
  if (this->_internal_function_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_function_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DIConfig::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    DIConfig::MergeImpl
};
const ::google::protobuf::Message::ClassData*DIConfig::GetClassData() const { return &_class_data_; }


void DIConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DIConfig*>(&to_msg);
  auto& from = static_cast<const DIConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.DIConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_triggersignals()->MergeFrom(from._internal_triggersignals());
  _this->_internal_mutable_successsignals()->MergeFrom(from._internal_successsignals());
  _this->_internal_mutable_failuresignals()->MergeFrom(from._internal_failuresignals());
  if (!from._internal_function_name().empty()) {
    _this->_internal_set_function_name(from._internal_function_name());
  }
  if (from._internal_function_code() != 0) {
    _this->_internal_set_function_code(from._internal_function_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DIConfig::CopyFrom(const DIConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.DIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DIConfig::IsInitialized() const {
  return true;
}

void DIConfig::InternalSwap(DIConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.triggersignals_.InternalSwap(&other->_impl_.triggersignals_);
  _impl_.successsignals_.InternalSwap(&other->_impl_.successsignals_);
  _impl_.failuresignals_.InternalSwap(&other->_impl_.failuresignals_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.function_name_, lhs_arena,
                                       &other->_impl_.function_name_, rhs_arena);
        swap(_impl_.function_code_, other->_impl_.function_code_);
}

::google::protobuf::Metadata DIConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[22]);
}
// ===================================================================

class DIConfigList::_Internal {
 public:
};

DIConfigList::DIConfigList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.DIConfigList)
}
DIConfigList::DIConfigList(const DIConfigList& from) : ::google::protobuf::Message() {
  DIConfigList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.di_configs_){from._impl_.di_configs_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.DIConfigList)
}
inline void DIConfigList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.di_configs_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
DIConfigList::~DIConfigList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.DIConfigList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DIConfigList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.di_configs_.~RepeatedPtrField();
}
void DIConfigList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void DIConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.DIConfigList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_di_configs()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DIConfigList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> DIConfigList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DIConfigList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.DIConfig di_configs = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DIConfigList, _impl_.di_configs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.DIConfig di_configs = 1;
    {PROTOBUF_FIELD_OFFSET(DIConfigList, _impl_.di_configs_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DIConfig>()},
  }}, {{
  }},
};

::uint8_t* DIConfigList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.DIConfigList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.DIConfig di_configs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_di_configs_size()); i < n; i++) {
    const auto& repfield = this->_internal_di_configs().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.DIConfigList)
  return target;
}

::size_t DIConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.DIConfigList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DIConfig di_configs = 1;
  total_size += 1UL * this->_internal_di_configs_size();
  for (const auto& msg : this->_internal_di_configs()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DIConfigList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    DIConfigList::MergeImpl
};
const ::google::protobuf::Message::ClassData*DIConfigList::GetClassData() const { return &_class_data_; }


void DIConfigList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DIConfigList*>(&to_msg);
  auto& from = static_cast<const DIConfigList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.DIConfigList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_di_configs()->MergeFrom(from._internal_di_configs());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DIConfigList::CopyFrom(const DIConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.DIConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DIConfigList::IsInitialized() const {
  return true;
}

void DIConfigList::InternalSwap(DIConfigList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.di_configs_.InternalSwap(&other->_impl_.di_configs_);
}

::google::protobuf::Metadata DIConfigList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[23]);
}
// ===================================================================

class DOConfig::_Internal {
 public:
};

void DOConfig::clear_onsignals() {
  _internal_mutable_onsignals()->Clear();
}
void DOConfig::clear_offsignals() {
  _internal_mutable_offsignals()->Clear();
}
DOConfig::DOConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.DOConfig)
}
DOConfig::DOConfig(const DOConfig& from) : ::google::protobuf::Message() {
  DOConfig* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.onsignals_){from._impl_.onsignals_},
      decltype(_impl_.offsignals_){from._impl_.offsignals_},
      decltype(_impl_.state_name_){},
      decltype(_impl_.state_code_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.state_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state_name().empty()) {
    _this->_impl_.state_name_.Set(from._internal_state_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.state_code_ = from._impl_.state_code_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.DOConfig)
}
inline void DOConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.onsignals_){arena},
      decltype(_impl_.offsignals_){arena},
      decltype(_impl_.state_name_){},
      decltype(_impl_.state_code_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.state_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
DOConfig::~DOConfig() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.DOConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DOConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.onsignals_.~RepeatedPtrField();
  _impl_.offsignals_.~RepeatedPtrField();
  _impl_.state_name_.Destroy();
}
void DOConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void DOConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.DOConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_onsignals()->Clear();
  _internal_mutable_offsignals()->Clear();
  _impl_.state_name_.ClearToEmpty();
  _impl_.state_code_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DOConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 46, 2> DOConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DOConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.DigitalSignal offSignals = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(DOConfig, _impl_.offsignals_)}},
    // int32 state_code = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DOConfig, _impl_.state_code_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DOConfig, _impl_.state_code_)}},
    // string state_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DOConfig, _impl_.state_name_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal onSignals = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DOConfig, _impl_.onsignals_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 state_code = 1;
    {PROTOBUF_FIELD_OFFSET(DOConfig, _impl_.state_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string state_name = 2;
    {PROTOBUF_FIELD_OFFSET(DOConfig, _impl_.state_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .Nrmk.IndyFramework.DigitalSignal onSignals = 3;
    {PROTOBUF_FIELD_OFFSET(DOConfig, _impl_.onsignals_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.DigitalSignal offSignals = 4;
    {PROTOBUF_FIELD_OFFSET(DOConfig, _impl_.offsignals_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
  }}, {{
    "\33\0\12\0\0\0\0\0"
    "Nrmk.IndyFramework.DOConfig"
    "state_name"
  }},
};

::uint8_t* DOConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.DOConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 state_code = 1;
  if (this->_internal_state_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_state_code(), target);
  }

  // string state_name = 2;
  if (!this->_internal_state_name().empty()) {
    const std::string& _s = this->_internal_state_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DOConfig.state_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal onSignals = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_onsignals_size()); i < n; i++) {
    const auto& repfield = this->_internal_onsignals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal offSignals = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_offsignals_size()); i < n; i++) {
    const auto& repfield = this->_internal_offsignals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.DOConfig)
  return target;
}

::size_t DOConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.DOConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal onSignals = 3;
  total_size += 1UL * this->_internal_onsignals_size();
  for (const auto& msg : this->_internal_onsignals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.DigitalSignal offSignals = 4;
  total_size += 1UL * this->_internal_offsignals_size();
  for (const auto& msg : this->_internal_offsignals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string state_name = 2;
  if (!this->_internal_state_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_state_name());
  }

  // int32 state_code = 1;
  if (this->_internal_state_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_state_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DOConfig::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    DOConfig::MergeImpl
};
const ::google::protobuf::Message::ClassData*DOConfig::GetClassData() const { return &_class_data_; }


void DOConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DOConfig*>(&to_msg);
  auto& from = static_cast<const DOConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.DOConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_onsignals()->MergeFrom(from._internal_onsignals());
  _this->_internal_mutable_offsignals()->MergeFrom(from._internal_offsignals());
  if (!from._internal_state_name().empty()) {
    _this->_internal_set_state_name(from._internal_state_name());
  }
  if (from._internal_state_code() != 0) {
    _this->_internal_set_state_code(from._internal_state_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DOConfig::CopyFrom(const DOConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.DOConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DOConfig::IsInitialized() const {
  return true;
}

void DOConfig::InternalSwap(DOConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.onsignals_.InternalSwap(&other->_impl_.onsignals_);
  _impl_.offsignals_.InternalSwap(&other->_impl_.offsignals_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_name_, lhs_arena,
                                       &other->_impl_.state_name_, rhs_arena);
        swap(_impl_.state_code_, other->_impl_.state_code_);
}

::google::protobuf::Metadata DOConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[24]);
}
// ===================================================================

class DOConfigList::_Internal {
 public:
};

DOConfigList::DOConfigList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.DOConfigList)
}
DOConfigList::DOConfigList(const DOConfigList& from) : ::google::protobuf::Message() {
  DOConfigList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.do_configs_){from._impl_.do_configs_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.DOConfigList)
}
inline void DOConfigList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.do_configs_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
DOConfigList::~DOConfigList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.DOConfigList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DOConfigList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.do_configs_.~RepeatedPtrField();
}
void DOConfigList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void DOConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.DOConfigList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_do_configs()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DOConfigList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> DOConfigList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DOConfigList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.DOConfig do_configs = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DOConfigList, _impl_.do_configs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.DOConfig do_configs = 1;
    {PROTOBUF_FIELD_OFFSET(DOConfigList, _impl_.do_configs_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DOConfig>()},
  }}, {{
  }},
};

::uint8_t* DOConfigList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.DOConfigList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.DOConfig do_configs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_do_configs_size()); i < n; i++) {
    const auto& repfield = this->_internal_do_configs().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.DOConfigList)
  return target;
}

::size_t DOConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.DOConfigList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DOConfig do_configs = 1;
  total_size += 1UL * this->_internal_do_configs_size();
  for (const auto& msg : this->_internal_do_configs()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DOConfigList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    DOConfigList::MergeImpl
};
const ::google::protobuf::Message::ClassData*DOConfigList::GetClassData() const { return &_class_data_; }


void DOConfigList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DOConfigList*>(&to_msg);
  auto& from = static_cast<const DOConfigList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.DOConfigList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_do_configs()->MergeFrom(from._internal_do_configs());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DOConfigList::CopyFrom(const DOConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.DOConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DOConfigList::IsInitialized() const {
  return true;
}

void DOConfigList::InternalSwap(DOConfigList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.do_configs_.InternalSwap(&other->_impl_.do_configs_);
}

::google::protobuf::Metadata DOConfigList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[25]);
}
// ===================================================================

class GetReducedRatioRes::_Internal {
 public:
};

GetReducedRatioRes::GetReducedRatioRes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.GetReducedRatioRes)
}
GetReducedRatioRes::GetReducedRatioRes(const GetReducedRatioRes& from) : ::google::protobuf::Message() {
  GetReducedRatioRes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      decltype(_impl_.ratio_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  _this->_impl_.ratio_ = from._impl_.ratio_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.GetReducedRatioRes)
}
inline void GetReducedRatioRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      decltype(_impl_.ratio_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
GetReducedRatioRes::~GetReducedRatioRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.GetReducedRatioRes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetReducedRatioRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}
void GetReducedRatioRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GetReducedRatioRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.GetReducedRatioRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.ratio_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetReducedRatioRes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 49, 7> GetReducedRatioRes::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetReducedRatioRes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string msg = 100;
    {::_pbi::TcParser::FastUS2,
     {1698, 63, 0, PROTOBUF_FIELD_OFFSET(GetReducedRatioRes, _impl_.msg_)}},
    // float ratio = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(GetReducedRatioRes, _impl_.ratio_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // float ratio = 1;
    {PROTOBUF_FIELD_OFFSET(GetReducedRatioRes, _impl_.ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string msg = 100;
    {PROTOBUF_FIELD_OFFSET(GetReducedRatioRes, _impl_.msg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\45\0\3\0\0\0\0\0"
    "Nrmk.IndyFramework.GetReducedRatioRes"
    "msg"
  }},
};

::uint8_t* GetReducedRatioRes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.GetReducedRatioRes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float ratio = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ratio = this->_internal_ratio();
  ::uint32_t raw_ratio;
  memcpy(&raw_ratio, &tmp_ratio, sizeof(tmp_ratio));
  if (raw_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_ratio(), target);
  }

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.GetReducedRatioRes.msg");
    target = stream->WriteStringMaybeAliased(100, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.GetReducedRatioRes)
  return target;
}

::size_t GetReducedRatioRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.GetReducedRatioRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  // float ratio = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ratio = this->_internal_ratio();
  ::uint32_t raw_ratio;
  memcpy(&raw_ratio, &tmp_ratio, sizeof(tmp_ratio));
  if (raw_ratio != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetReducedRatioRes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GetReducedRatioRes::MergeImpl
};
const ::google::protobuf::Message::ClassData*GetReducedRatioRes::GetClassData() const { return &_class_data_; }


void GetReducedRatioRes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetReducedRatioRes*>(&to_msg);
  auto& from = static_cast<const GetReducedRatioRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.GetReducedRatioRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ratio = from._internal_ratio();
  ::uint32_t raw_ratio;
  memcpy(&raw_ratio, &tmp_ratio, sizeof(tmp_ratio));
  if (raw_ratio != 0) {
    _this->_internal_set_ratio(from._internal_ratio());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetReducedRatioRes::CopyFrom(const GetReducedRatioRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.GetReducedRatioRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetReducedRatioRes::IsInitialized() const {
  return true;
}

void GetReducedRatioRes::InternalSwap(GetReducedRatioRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
        swap(_impl_.ratio_, other->_impl_.ratio_);
}

::google::protobuf::Metadata GetReducedRatioRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[26]);
}
// ===================================================================

class GetReducedSpeedRes::_Internal {
 public:
};

GetReducedSpeedRes::GetReducedSpeedRes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.GetReducedSpeedRes)
}
GetReducedSpeedRes::GetReducedSpeedRes(const GetReducedSpeedRes& from) : ::google::protobuf::Message() {
  GetReducedSpeedRes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      decltype(_impl_.speed_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  _this->_impl_.speed_ = from._impl_.speed_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.GetReducedSpeedRes)
}
inline void GetReducedSpeedRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      decltype(_impl_.speed_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
GetReducedSpeedRes::~GetReducedSpeedRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.GetReducedSpeedRes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetReducedSpeedRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}
void GetReducedSpeedRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GetReducedSpeedRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.GetReducedSpeedRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.speed_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetReducedSpeedRes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 49, 7> GetReducedSpeedRes::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetReducedSpeedRes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string msg = 100;
    {::_pbi::TcParser::FastUS2,
     {1698, 63, 0, PROTOBUF_FIELD_OFFSET(GetReducedSpeedRes, _impl_.msg_)}},
    // float speed = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(GetReducedSpeedRes, _impl_.speed_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // float speed = 1;
    {PROTOBUF_FIELD_OFFSET(GetReducedSpeedRes, _impl_.speed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string msg = 100;
    {PROTOBUF_FIELD_OFFSET(GetReducedSpeedRes, _impl_.msg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\45\0\3\0\0\0\0\0"
    "Nrmk.IndyFramework.GetReducedSpeedRes"
    "msg"
  }},
};

::uint8_t* GetReducedSpeedRes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.GetReducedSpeedRes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float speed = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  ::uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_speed(), target);
  }

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.GetReducedSpeedRes.msg");
    target = stream->WriteStringMaybeAliased(100, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.GetReducedSpeedRes)
  return target;
}

::size_t GetReducedSpeedRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.GetReducedSpeedRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  // float speed = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  ::uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetReducedSpeedRes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GetReducedSpeedRes::MergeImpl
};
const ::google::protobuf::Message::ClassData*GetReducedSpeedRes::GetClassData() const { return &_class_data_; }


void GetReducedSpeedRes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetReducedSpeedRes*>(&to_msg);
  auto& from = static_cast<const GetReducedSpeedRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.GetReducedSpeedRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  ::uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetReducedSpeedRes::CopyFrom(const GetReducedSpeedRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.GetReducedSpeedRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetReducedSpeedRes::IsInitialized() const {
  return true;
}

void GetReducedSpeedRes::InternalSwap(GetReducedSpeedRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
        swap(_impl_.speed_, other->_impl_.speed_);
}

::google::protobuf::Metadata GetReducedSpeedRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[27]);
}
// ===================================================================

class SetReducedSpeedReq::_Internal {
 public:
};

SetReducedSpeedReq::SetReducedSpeedReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.SetReducedSpeedReq)
}
SetReducedSpeedReq::SetReducedSpeedReq(const SetReducedSpeedReq& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.SetReducedSpeedReq)
}
inline void SetReducedSpeedReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.speed_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
SetReducedSpeedReq::~SetReducedSpeedReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.SetReducedSpeedReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetReducedSpeedReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void SetReducedSpeedReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SetReducedSpeedReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.SetReducedSpeedReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.speed_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetReducedSpeedReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetReducedSpeedReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetReducedSpeedReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float speed = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(SetReducedSpeedReq, _impl_.speed_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float speed = 1;
    {PROTOBUF_FIELD_OFFSET(SetReducedSpeedReq, _impl_.speed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetReducedSpeedReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.SetReducedSpeedReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float speed = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  ::uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.SetReducedSpeedReq)
  return target;
}

::size_t SetReducedSpeedReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.SetReducedSpeedReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float speed = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  ::uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetReducedSpeedReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SetReducedSpeedReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*SetReducedSpeedReq::GetClassData() const { return &_class_data_; }


void SetReducedSpeedReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetReducedSpeedReq*>(&to_msg);
  auto& from = static_cast<const SetReducedSpeedReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.SetReducedSpeedReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  ::uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetReducedSpeedReq::CopyFrom(const SetReducedSpeedReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.SetReducedSpeedReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetReducedSpeedReq::IsInitialized() const {
  return true;
}

void SetReducedSpeedReq::InternalSwap(SetReducedSpeedReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.speed_, other->_impl_.speed_);
}

::google::protobuf::Metadata SetReducedSpeedReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[28]);
}
// ===================================================================

class FTSensorDevice::_Internal {
 public:
};

FTSensorDevice::FTSensorDevice(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.FTSensorDevice)
}
FTSensorDevice::FTSensorDevice(const FTSensorDevice& from) : ::google::protobuf::Message() {
  FTSensorDevice* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_address_){},
      decltype(_impl_.dev_type_){},
      decltype(_impl_.com_type_){},
      decltype(_impl_.ft_frame_translation_offset_x_){},
      decltype(_impl_.ft_frame_translation_offset_y_){},
      decltype(_impl_.ft_frame_translation_offset_z_){},
      decltype(_impl_.ft_frame_rotation_offset_r_){},
      decltype(_impl_.ft_frame_rotation_offset_p_){},
      decltype(_impl_.ft_frame_rotation_offset_y_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_address().empty()) {
    _this->_impl_.ip_address_.Set(from._internal_ip_address(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_type_, &from._impl_.dev_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ft_frame_rotation_offset_y_) -
    reinterpret_cast<char*>(&_impl_.dev_type_)) + sizeof(_impl_.ft_frame_rotation_offset_y_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.FTSensorDevice)
}
inline void FTSensorDevice::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_address_){},
      decltype(_impl_.dev_type_){0},
      decltype(_impl_.com_type_){0},
      decltype(_impl_.ft_frame_translation_offset_x_){0},
      decltype(_impl_.ft_frame_translation_offset_y_){0},
      decltype(_impl_.ft_frame_translation_offset_z_){0},
      decltype(_impl_.ft_frame_rotation_offset_r_){0},
      decltype(_impl_.ft_frame_rotation_offset_p_){0},
      decltype(_impl_.ft_frame_rotation_offset_y_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
FTSensorDevice::~FTSensorDevice() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.FTSensorDevice)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FTSensorDevice::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_address_.Destroy();
}
void FTSensorDevice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FTSensorDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.FTSensorDevice)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_address_.ClearToEmpty();
  ::memset(&_impl_.dev_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ft_frame_rotation_offset_y_) -
      reinterpret_cast<char*>(&_impl_.dev_type_)) + sizeof(_impl_.ft_frame_rotation_offset_y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FTSensorDevice::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 60, 2> FTSensorDevice::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294902776,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FTSensorDevice_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float ft_frame_rotation_offset_y = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ft_frame_rotation_offset_y_)}},
    // .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceType dev_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FTSensorDevice, _impl_.dev_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.dev_type_)}},
    // .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceComType com_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FTSensorDevice, _impl_.com_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.com_type_)}},
    // string ip_address = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ip_address_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // float ft_frame_translation_offset_x = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ft_frame_translation_offset_x_)}},
    // float ft_frame_translation_offset_y = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ft_frame_translation_offset_y_)}},
    // float ft_frame_translation_offset_z = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ft_frame_translation_offset_z_)}},
    // float ft_frame_rotation_offset_r = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ft_frame_rotation_offset_r_)}},
    // float ft_frame_rotation_offset_p = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ft_frame_rotation_offset_p_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceType dev_type = 1;
    {PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.dev_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceComType com_type = 2;
    {PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.com_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string ip_address = 3;
    {PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ip_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float ft_frame_translation_offset_x = 11;
    {PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ft_frame_translation_offset_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_frame_translation_offset_y = 12;
    {PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ft_frame_translation_offset_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_frame_translation_offset_z = 13;
    {PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ft_frame_translation_offset_z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_frame_rotation_offset_r = 14;
    {PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ft_frame_rotation_offset_r_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_frame_rotation_offset_p = 15;
    {PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ft_frame_rotation_offset_p_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_frame_rotation_offset_y = 16;
    {PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ft_frame_rotation_offset_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\41\0\0\12\0\0\0\0\0\0\0\0\0\0\0\0"
    "Nrmk.IndyFramework.FTSensorDevice"
    "ip_address"
  }},
};

::uint8_t* FTSensorDevice::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.FTSensorDevice)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceType dev_type = 1;
  if (this->_internal_dev_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_dev_type(), target);
  }

  // .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceComType com_type = 2;
  if (this->_internal_com_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_com_type(), target);
  }

  // string ip_address = 3;
  if (!this->_internal_ip_address().empty()) {
    const std::string& _s = this->_internal_ip_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.FTSensorDevice.ip_address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // float ft_frame_translation_offset_x = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_translation_offset_x = this->_internal_ft_frame_translation_offset_x();
  ::uint32_t raw_ft_frame_translation_offset_x;
  memcpy(&raw_ft_frame_translation_offset_x, &tmp_ft_frame_translation_offset_x, sizeof(tmp_ft_frame_translation_offset_x));
  if (raw_ft_frame_translation_offset_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_ft_frame_translation_offset_x(), target);
  }

  // float ft_frame_translation_offset_y = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_translation_offset_y = this->_internal_ft_frame_translation_offset_y();
  ::uint32_t raw_ft_frame_translation_offset_y;
  memcpy(&raw_ft_frame_translation_offset_y, &tmp_ft_frame_translation_offset_y, sizeof(tmp_ft_frame_translation_offset_y));
  if (raw_ft_frame_translation_offset_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this->_internal_ft_frame_translation_offset_y(), target);
  }

  // float ft_frame_translation_offset_z = 13;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_translation_offset_z = this->_internal_ft_frame_translation_offset_z();
  ::uint32_t raw_ft_frame_translation_offset_z;
  memcpy(&raw_ft_frame_translation_offset_z, &tmp_ft_frame_translation_offset_z, sizeof(tmp_ft_frame_translation_offset_z));
  if (raw_ft_frame_translation_offset_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        13, this->_internal_ft_frame_translation_offset_z(), target);
  }

  // float ft_frame_rotation_offset_r = 14;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_rotation_offset_r = this->_internal_ft_frame_rotation_offset_r();
  ::uint32_t raw_ft_frame_rotation_offset_r;
  memcpy(&raw_ft_frame_rotation_offset_r, &tmp_ft_frame_rotation_offset_r, sizeof(tmp_ft_frame_rotation_offset_r));
  if (raw_ft_frame_rotation_offset_r != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        14, this->_internal_ft_frame_rotation_offset_r(), target);
  }

  // float ft_frame_rotation_offset_p = 15;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_rotation_offset_p = this->_internal_ft_frame_rotation_offset_p();
  ::uint32_t raw_ft_frame_rotation_offset_p;
  memcpy(&raw_ft_frame_rotation_offset_p, &tmp_ft_frame_rotation_offset_p, sizeof(tmp_ft_frame_rotation_offset_p));
  if (raw_ft_frame_rotation_offset_p != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        15, this->_internal_ft_frame_rotation_offset_p(), target);
  }

  // float ft_frame_rotation_offset_y = 16;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_rotation_offset_y = this->_internal_ft_frame_rotation_offset_y();
  ::uint32_t raw_ft_frame_rotation_offset_y;
  memcpy(&raw_ft_frame_rotation_offset_y, &tmp_ft_frame_rotation_offset_y, sizeof(tmp_ft_frame_rotation_offset_y));
  if (raw_ft_frame_rotation_offset_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        16, this->_internal_ft_frame_rotation_offset_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.FTSensorDevice)
  return target;
}

::size_t FTSensorDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.FTSensorDevice)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 3;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ip_address());
  }

  // .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceType dev_type = 1;
  if (this->_internal_dev_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_dev_type());
  }

  // .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceComType com_type = 2;
  if (this->_internal_com_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_com_type());
  }

  // float ft_frame_translation_offset_x = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_translation_offset_x = this->_internal_ft_frame_translation_offset_x();
  ::uint32_t raw_ft_frame_translation_offset_x;
  memcpy(&raw_ft_frame_translation_offset_x, &tmp_ft_frame_translation_offset_x, sizeof(tmp_ft_frame_translation_offset_x));
  if (raw_ft_frame_translation_offset_x != 0) {
    total_size += 5;
  }

  // float ft_frame_translation_offset_y = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_translation_offset_y = this->_internal_ft_frame_translation_offset_y();
  ::uint32_t raw_ft_frame_translation_offset_y;
  memcpy(&raw_ft_frame_translation_offset_y, &tmp_ft_frame_translation_offset_y, sizeof(tmp_ft_frame_translation_offset_y));
  if (raw_ft_frame_translation_offset_y != 0) {
    total_size += 5;
  }

  // float ft_frame_translation_offset_z = 13;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_translation_offset_z = this->_internal_ft_frame_translation_offset_z();
  ::uint32_t raw_ft_frame_translation_offset_z;
  memcpy(&raw_ft_frame_translation_offset_z, &tmp_ft_frame_translation_offset_z, sizeof(tmp_ft_frame_translation_offset_z));
  if (raw_ft_frame_translation_offset_z != 0) {
    total_size += 5;
  }

  // float ft_frame_rotation_offset_r = 14;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_rotation_offset_r = this->_internal_ft_frame_rotation_offset_r();
  ::uint32_t raw_ft_frame_rotation_offset_r;
  memcpy(&raw_ft_frame_rotation_offset_r, &tmp_ft_frame_rotation_offset_r, sizeof(tmp_ft_frame_rotation_offset_r));
  if (raw_ft_frame_rotation_offset_r != 0) {
    total_size += 5;
  }

  // float ft_frame_rotation_offset_p = 15;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_rotation_offset_p = this->_internal_ft_frame_rotation_offset_p();
  ::uint32_t raw_ft_frame_rotation_offset_p;
  memcpy(&raw_ft_frame_rotation_offset_p, &tmp_ft_frame_rotation_offset_p, sizeof(tmp_ft_frame_rotation_offset_p));
  if (raw_ft_frame_rotation_offset_p != 0) {
    total_size += 5;
  }

  // float ft_frame_rotation_offset_y = 16;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_rotation_offset_y = this->_internal_ft_frame_rotation_offset_y();
  ::uint32_t raw_ft_frame_rotation_offset_y;
  memcpy(&raw_ft_frame_rotation_offset_y, &tmp_ft_frame_rotation_offset_y, sizeof(tmp_ft_frame_rotation_offset_y));
  if (raw_ft_frame_rotation_offset_y != 0) {
    total_size += 6;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FTSensorDevice::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FTSensorDevice::MergeImpl
};
const ::google::protobuf::Message::ClassData*FTSensorDevice::GetClassData() const { return &_class_data_; }


void FTSensorDevice::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FTSensorDevice*>(&to_msg);
  auto& from = static_cast<const FTSensorDevice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.FTSensorDevice)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip_address().empty()) {
    _this->_internal_set_ip_address(from._internal_ip_address());
  }
  if (from._internal_dev_type() != 0) {
    _this->_internal_set_dev_type(from._internal_dev_type());
  }
  if (from._internal_com_type() != 0) {
    _this->_internal_set_com_type(from._internal_com_type());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_translation_offset_x = from._internal_ft_frame_translation_offset_x();
  ::uint32_t raw_ft_frame_translation_offset_x;
  memcpy(&raw_ft_frame_translation_offset_x, &tmp_ft_frame_translation_offset_x, sizeof(tmp_ft_frame_translation_offset_x));
  if (raw_ft_frame_translation_offset_x != 0) {
    _this->_internal_set_ft_frame_translation_offset_x(from._internal_ft_frame_translation_offset_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_translation_offset_y = from._internal_ft_frame_translation_offset_y();
  ::uint32_t raw_ft_frame_translation_offset_y;
  memcpy(&raw_ft_frame_translation_offset_y, &tmp_ft_frame_translation_offset_y, sizeof(tmp_ft_frame_translation_offset_y));
  if (raw_ft_frame_translation_offset_y != 0) {
    _this->_internal_set_ft_frame_translation_offset_y(from._internal_ft_frame_translation_offset_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_translation_offset_z = from._internal_ft_frame_translation_offset_z();
  ::uint32_t raw_ft_frame_translation_offset_z;
  memcpy(&raw_ft_frame_translation_offset_z, &tmp_ft_frame_translation_offset_z, sizeof(tmp_ft_frame_translation_offset_z));
  if (raw_ft_frame_translation_offset_z != 0) {
    _this->_internal_set_ft_frame_translation_offset_z(from._internal_ft_frame_translation_offset_z());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_rotation_offset_r = from._internal_ft_frame_rotation_offset_r();
  ::uint32_t raw_ft_frame_rotation_offset_r;
  memcpy(&raw_ft_frame_rotation_offset_r, &tmp_ft_frame_rotation_offset_r, sizeof(tmp_ft_frame_rotation_offset_r));
  if (raw_ft_frame_rotation_offset_r != 0) {
    _this->_internal_set_ft_frame_rotation_offset_r(from._internal_ft_frame_rotation_offset_r());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_rotation_offset_p = from._internal_ft_frame_rotation_offset_p();
  ::uint32_t raw_ft_frame_rotation_offset_p;
  memcpy(&raw_ft_frame_rotation_offset_p, &tmp_ft_frame_rotation_offset_p, sizeof(tmp_ft_frame_rotation_offset_p));
  if (raw_ft_frame_rotation_offset_p != 0) {
    _this->_internal_set_ft_frame_rotation_offset_p(from._internal_ft_frame_rotation_offset_p());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_frame_rotation_offset_y = from._internal_ft_frame_rotation_offset_y();
  ::uint32_t raw_ft_frame_rotation_offset_y;
  memcpy(&raw_ft_frame_rotation_offset_y, &tmp_ft_frame_rotation_offset_y, sizeof(tmp_ft_frame_rotation_offset_y));
  if (raw_ft_frame_rotation_offset_y != 0) {
    _this->_internal_set_ft_frame_rotation_offset_y(from._internal_ft_frame_rotation_offset_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FTSensorDevice::CopyFrom(const FTSensorDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.FTSensorDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FTSensorDevice::IsInitialized() const {
  return true;
}

void FTSensorDevice::InternalSwap(FTSensorDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_address_, lhs_arena,
                                       &other->_impl_.ip_address_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.ft_frame_rotation_offset_y_)
      + sizeof(FTSensorDevice::_impl_.ft_frame_rotation_offset_y_)
      - PROTOBUF_FIELD_OFFSET(FTSensorDevice, _impl_.dev_type_)>(
          reinterpret_cast<char*>(&_impl_.dev_type_),
          reinterpret_cast<char*>(&other->_impl_.dev_type_));
}

::google::protobuf::Metadata FTSensorDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[29]);
}
// ===================================================================

class FTSensorDeviceRes::_Internal {
 public:
};

FTSensorDeviceRes::FTSensorDeviceRes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.FTSensorDeviceRes)
}
FTSensorDeviceRes::FTSensorDeviceRes(const FTSensorDeviceRes& from) : ::google::protobuf::Message() {
  FTSensorDeviceRes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.FTSensorDeviceRes)
}
inline void FTSensorDeviceRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
FTSensorDeviceRes::~FTSensorDeviceRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.FTSensorDeviceRes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FTSensorDeviceRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}
void FTSensorDeviceRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FTSensorDeviceRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.FTSensorDeviceRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FTSensorDeviceRes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 48, 7> FTSensorDeviceRes::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    100, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FTSensorDeviceRes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string msg = 100;
    {::_pbi::TcParser::FastUS2,
     {1698, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorDeviceRes, _impl_.msg_)}},
  }}, {{
    100, 0, 1,
    65534, 0,
    65535, 65535
  }}, {{
    // string msg = 100;
    {PROTOBUF_FIELD_OFFSET(FTSensorDeviceRes, _impl_.msg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\44\3\0\0\0\0\0\0"
    "Nrmk.IndyFramework.FTSensorDeviceRes"
    "msg"
  }},
};

::uint8_t* FTSensorDeviceRes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.FTSensorDeviceRes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.FTSensorDeviceRes.msg");
    target = stream->WriteStringMaybeAliased(100, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.FTSensorDeviceRes)
  return target;
}

::size_t FTSensorDeviceRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.FTSensorDeviceRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FTSensorDeviceRes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FTSensorDeviceRes::MergeImpl
};
const ::google::protobuf::Message::ClassData*FTSensorDeviceRes::GetClassData() const { return &_class_data_; }


void FTSensorDeviceRes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FTSensorDeviceRes*>(&to_msg);
  auto& from = static_cast<const FTSensorDeviceRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.FTSensorDeviceRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FTSensorDeviceRes::CopyFrom(const FTSensorDeviceRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.FTSensorDeviceRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FTSensorDeviceRes::IsInitialized() const {
  return true;
}

void FTSensorDeviceRes::InternalSwap(FTSensorDeviceRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
}

::google::protobuf::Metadata FTSensorDeviceRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[30]);
}
// ===================================================================

class TeleOpParams::_Internal {
 public:
};

TeleOpParams::TeleOpParams(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TeleOpParams)
}
TeleOpParams::TeleOpParams(const TeleOpParams& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TeleOpParams)
}
inline void TeleOpParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.smooth_factor_){0},
      decltype(_impl_.cutoff_freq_){0},
      decltype(_impl_.error_gain_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TeleOpParams::~TeleOpParams() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TeleOpParams)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TeleOpParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TeleOpParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TeleOpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TeleOpParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.smooth_factor_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_gain_) -
      reinterpret_cast<char*>(&_impl_.smooth_factor_)) + sizeof(_impl_.error_gain_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TeleOpParams::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> TeleOpParams::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TeleOpParams_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float smooth_factor = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(TeleOpParams, _impl_.smooth_factor_)}},
    // float cutoff_freq = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(TeleOpParams, _impl_.cutoff_freq_)}},
    // float error_gain = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(TeleOpParams, _impl_.error_gain_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float smooth_factor = 1;
    {PROTOBUF_FIELD_OFFSET(TeleOpParams, _impl_.smooth_factor_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float cutoff_freq = 2;
    {PROTOBUF_FIELD_OFFSET(TeleOpParams, _impl_.cutoff_freq_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float error_gain = 3;
    {PROTOBUF_FIELD_OFFSET(TeleOpParams, _impl_.error_gain_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TeleOpParams::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TeleOpParams)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float smooth_factor = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_smooth_factor = this->_internal_smooth_factor();
  ::uint32_t raw_smooth_factor;
  memcpy(&raw_smooth_factor, &tmp_smooth_factor, sizeof(tmp_smooth_factor));
  if (raw_smooth_factor != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_smooth_factor(), target);
  }

  // float cutoff_freq = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cutoff_freq = this->_internal_cutoff_freq();
  ::uint32_t raw_cutoff_freq;
  memcpy(&raw_cutoff_freq, &tmp_cutoff_freq, sizeof(tmp_cutoff_freq));
  if (raw_cutoff_freq != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_cutoff_freq(), target);
  }

  // float error_gain = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_error_gain = this->_internal_error_gain();
  ::uint32_t raw_error_gain;
  memcpy(&raw_error_gain, &tmp_error_gain, sizeof(tmp_error_gain));
  if (raw_error_gain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_error_gain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TeleOpParams)
  return target;
}

::size_t TeleOpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TeleOpParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float smooth_factor = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_smooth_factor = this->_internal_smooth_factor();
  ::uint32_t raw_smooth_factor;
  memcpy(&raw_smooth_factor, &tmp_smooth_factor, sizeof(tmp_smooth_factor));
  if (raw_smooth_factor != 0) {
    total_size += 5;
  }

  // float cutoff_freq = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cutoff_freq = this->_internal_cutoff_freq();
  ::uint32_t raw_cutoff_freq;
  memcpy(&raw_cutoff_freq, &tmp_cutoff_freq, sizeof(tmp_cutoff_freq));
  if (raw_cutoff_freq != 0) {
    total_size += 5;
  }

  // float error_gain = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_error_gain = this->_internal_error_gain();
  ::uint32_t raw_error_gain;
  memcpy(&raw_error_gain, &tmp_error_gain, sizeof(tmp_error_gain));
  if (raw_error_gain != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TeleOpParams::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TeleOpParams::MergeImpl
};
const ::google::protobuf::Message::ClassData*TeleOpParams::GetClassData() const { return &_class_data_; }


void TeleOpParams::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TeleOpParams*>(&to_msg);
  auto& from = static_cast<const TeleOpParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TeleOpParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_smooth_factor = from._internal_smooth_factor();
  ::uint32_t raw_smooth_factor;
  memcpy(&raw_smooth_factor, &tmp_smooth_factor, sizeof(tmp_smooth_factor));
  if (raw_smooth_factor != 0) {
    _this->_internal_set_smooth_factor(from._internal_smooth_factor());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cutoff_freq = from._internal_cutoff_freq();
  ::uint32_t raw_cutoff_freq;
  memcpy(&raw_cutoff_freq, &tmp_cutoff_freq, sizeof(tmp_cutoff_freq));
  if (raw_cutoff_freq != 0) {
    _this->_internal_set_cutoff_freq(from._internal_cutoff_freq());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_error_gain = from._internal_error_gain();
  ::uint32_t raw_error_gain;
  memcpy(&raw_error_gain, &tmp_error_gain, sizeof(tmp_error_gain));
  if (raw_error_gain != 0) {
    _this->_internal_set_error_gain(from._internal_error_gain());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TeleOpParams::CopyFrom(const TeleOpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TeleOpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TeleOpParams::IsInitialized() const {
  return true;
}

void TeleOpParams::InternalSwap(TeleOpParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeleOpParams, _impl_.error_gain_)
      + sizeof(TeleOpParams::_impl_.error_gain_)
      - PROTOBUF_FIELD_OFFSET(TeleOpParams, _impl_.smooth_factor_)>(
          reinterpret_cast<char*>(&_impl_.smooth_factor_),
          reinterpret_cast<char*>(&other->_impl_.smooth_factor_));
}

::google::protobuf::Metadata TeleOpParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[31]);
}
// ===================================================================

class KinematicsParams_MDH::_Internal {
 public:
};

KinematicsParams_MDH::KinematicsParams_MDH(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.KinematicsParams.MDH)
}
KinematicsParams_MDH::KinematicsParams_MDH(const KinematicsParams_MDH& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.KinematicsParams.MDH)
}
inline void KinematicsParams_MDH::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.a_){0},
      decltype(_impl_.alpha_){0},
      decltype(_impl_.d0_){0},
      decltype(_impl_.theta0_){0},
      decltype(_impl_.type_){0},
      decltype(_impl_.index_){0},
      decltype(_impl_.parent_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
KinematicsParams_MDH::~KinematicsParams_MDH() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.KinematicsParams.MDH)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void KinematicsParams_MDH::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void KinematicsParams_MDH::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void KinematicsParams_MDH::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.KinematicsParams.MDH)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.parent_) -
      reinterpret_cast<char*>(&_impl_.a_)) + sizeof(_impl_.parent_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* KinematicsParams_MDH::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> KinematicsParams_MDH::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965728,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_KinematicsParams_MDH_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float a = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(KinematicsParams_MDH, _impl_.a_)}},
    // float alpha = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(KinematicsParams_MDH, _impl_.alpha_)}},
    // float d0 = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(KinematicsParams_MDH, _impl_.d0_)}},
    // float theta0 = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(KinematicsParams_MDH, _impl_.theta0_)}},
    // .Nrmk.IndyFramework.KinematicsParams.JointType type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(KinematicsParams_MDH, _impl_.type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(KinematicsParams_MDH, _impl_.type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float a = 1;
    {PROTOBUF_FIELD_OFFSET(KinematicsParams_MDH, _impl_.a_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float alpha = 2;
    {PROTOBUF_FIELD_OFFSET(KinematicsParams_MDH, _impl_.alpha_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float d0 = 3;
    {PROTOBUF_FIELD_OFFSET(KinematicsParams_MDH, _impl_.d0_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float theta0 = 4;
    {PROTOBUF_FIELD_OFFSET(KinematicsParams_MDH, _impl_.theta0_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.KinematicsParams.JointType type = 5;
    {PROTOBUF_FIELD_OFFSET(KinematicsParams_MDH, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 index = 10;
    {PROTOBUF_FIELD_OFFSET(KinematicsParams_MDH, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 parent = 11;
    {PROTOBUF_FIELD_OFFSET(KinematicsParams_MDH, _impl_.parent_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* KinematicsParams_MDH::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.KinematicsParams.MDH)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float a = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  ::uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_a(), target);
  }

  // float alpha = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_alpha = this->_internal_alpha();
  ::uint32_t raw_alpha;
  memcpy(&raw_alpha, &tmp_alpha, sizeof(tmp_alpha));
  if (raw_alpha != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_alpha(), target);
  }

  // float d0 = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_d0 = this->_internal_d0();
  ::uint32_t raw_d0;
  memcpy(&raw_d0, &tmp_d0, sizeof(tmp_d0));
  if (raw_d0 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_d0(), target);
  }

  // float theta0 = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_theta0 = this->_internal_theta0();
  ::uint32_t raw_theta0;
  memcpy(&raw_theta0, &tmp_theta0, sizeof(tmp_theta0));
  if (raw_theta0 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_theta0(), target);
  }

  // .Nrmk.IndyFramework.KinematicsParams.JointType type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_type(), target);
  }

  // int32 index = 10;
  if (this->_internal_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_index(), target);
  }

  // int32 parent = 11;
  if (this->_internal_parent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_parent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.KinematicsParams.MDH)
  return target;
}

::size_t KinematicsParams_MDH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.KinematicsParams.MDH)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float a = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  ::uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    total_size += 5;
  }

  // float alpha = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_alpha = this->_internal_alpha();
  ::uint32_t raw_alpha;
  memcpy(&raw_alpha, &tmp_alpha, sizeof(tmp_alpha));
  if (raw_alpha != 0) {
    total_size += 5;
  }

  // float d0 = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_d0 = this->_internal_d0();
  ::uint32_t raw_d0;
  memcpy(&raw_d0, &tmp_d0, sizeof(tmp_d0));
  if (raw_d0 != 0) {
    total_size += 5;
  }

  // float theta0 = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_theta0 = this->_internal_theta0();
  ::uint32_t raw_theta0;
  memcpy(&raw_theta0, &tmp_theta0, sizeof(tmp_theta0));
  if (raw_theta0 != 0) {
    total_size += 5;
  }

  // .Nrmk.IndyFramework.KinematicsParams.JointType type = 5;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 index = 10;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_index());
  }

  // int32 parent = 11;
  if (this->_internal_parent() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_parent());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData KinematicsParams_MDH::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    KinematicsParams_MDH::MergeImpl
};
const ::google::protobuf::Message::ClassData*KinematicsParams_MDH::GetClassData() const { return &_class_data_; }


void KinematicsParams_MDH::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<KinematicsParams_MDH*>(&to_msg);
  auto& from = static_cast<const KinematicsParams_MDH&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.KinematicsParams.MDH)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_a = from._internal_a();
  ::uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    _this->_internal_set_a(from._internal_a());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_alpha = from._internal_alpha();
  ::uint32_t raw_alpha;
  memcpy(&raw_alpha, &tmp_alpha, sizeof(tmp_alpha));
  if (raw_alpha != 0) {
    _this->_internal_set_alpha(from._internal_alpha());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_d0 = from._internal_d0();
  ::uint32_t raw_d0;
  memcpy(&raw_d0, &tmp_d0, sizeof(tmp_d0));
  if (raw_d0 != 0) {
    _this->_internal_set_d0(from._internal_d0());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_theta0 = from._internal_theta0();
  ::uint32_t raw_theta0;
  memcpy(&raw_theta0, &tmp_theta0, sizeof(tmp_theta0));
  if (raw_theta0 != 0) {
    _this->_internal_set_theta0(from._internal_theta0());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_parent() != 0) {
    _this->_internal_set_parent(from._internal_parent());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KinematicsParams_MDH::CopyFrom(const KinematicsParams_MDH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.KinematicsParams.MDH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool KinematicsParams_MDH::IsInitialized() const {
  return true;
}

void KinematicsParams_MDH::InternalSwap(KinematicsParams_MDH* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KinematicsParams_MDH, _impl_.parent_)
      + sizeof(KinematicsParams_MDH::_impl_.parent_)
      - PROTOBUF_FIELD_OFFSET(KinematicsParams_MDH, _impl_.a_)>(
          reinterpret_cast<char*>(&_impl_.a_),
          reinterpret_cast<char*>(&other->_impl_.a_));
}

::google::protobuf::Metadata KinematicsParams_MDH::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[32]);
}
// ===================================================================

class KinematicsParams::_Internal {
 public:
};

KinematicsParams::KinematicsParams(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.KinematicsParams)
}
KinematicsParams::KinematicsParams(const KinematicsParams& from) : ::google::protobuf::Message() {
  KinematicsParams* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mdh_){from._impl_.mdh_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.KinematicsParams)
}
inline void KinematicsParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.mdh_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
KinematicsParams::~KinematicsParams() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.KinematicsParams)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void KinematicsParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mdh_.~RepeatedPtrField();
}
void KinematicsParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void KinematicsParams::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.KinematicsParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_mdh()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* KinematicsParams::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> KinematicsParams::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_KinematicsParams_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.KinematicsParams.MDH mdh = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(KinematicsParams, _impl_.mdh_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.KinematicsParams.MDH mdh = 1;
    {PROTOBUF_FIELD_OFFSET(KinematicsParams, _impl_.mdh_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::KinematicsParams_MDH>()},
  }}, {{
  }},
};

::uint8_t* KinematicsParams::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.KinematicsParams)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.KinematicsParams.MDH mdh = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mdh_size()); i < n; i++) {
    const auto& repfield = this->_internal_mdh().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.KinematicsParams)
  return target;
}

::size_t KinematicsParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.KinematicsParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.KinematicsParams.MDH mdh = 1;
  total_size += 1UL * this->_internal_mdh_size();
  for (const auto& msg : this->_internal_mdh()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData KinematicsParams::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    KinematicsParams::MergeImpl
};
const ::google::protobuf::Message::ClassData*KinematicsParams::GetClassData() const { return &_class_data_; }


void KinematicsParams::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<KinematicsParams*>(&to_msg);
  auto& from = static_cast<const KinematicsParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.KinematicsParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_mdh()->MergeFrom(from._internal_mdh());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KinematicsParams::CopyFrom(const KinematicsParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.KinematicsParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool KinematicsParams::IsInitialized() const {
  return true;
}

void KinematicsParams::InternalSwap(KinematicsParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mdh_.InternalSwap(&other->_impl_.mdh_);
}

::google::protobuf::Metadata KinematicsParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_5fmsgs_2eproto_getter, &descriptor_table_config_5fmsgs_2eproto_once,
      file_level_metadata_config_5fmsgs_2eproto[33]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
