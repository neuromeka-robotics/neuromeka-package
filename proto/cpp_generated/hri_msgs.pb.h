// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hri_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hri_5fmsgs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_hri_5fmsgs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "shared_msgs.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_hri_5fmsgs_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_hri_5fmsgs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_hri_5fmsgs_2eproto;
namespace IndyFramework {
namespace Protobuf {
namespace HRI {
class GetRefFrameListReq;
struct GetRefFrameListReqDefaultTypeInternal;
extern GetRefFrameListReqDefaultTypeInternal _GetRefFrameListReq_default_instance_;
class GetRefFrameListRes;
struct GetRefFrameListResDefaultTypeInternal;
extern GetRefFrameListResDefaultTypeInternal _GetRefFrameListRes_default_instance_;
class SetRefFrameListReq;
struct SetRefFrameListReqDefaultTypeInternal;
extern SetRefFrameListReqDefaultTypeInternal _SetRefFrameListReq_default_instance_;
class SetRefFrameListRes;
struct SetRefFrameListResDefaultTypeInternal;
extern SetRefFrameListResDefaultTypeInternal _SetRefFrameListRes_default_instance_;
}  // namespace HRI
}  // namespace Protobuf
}  // namespace IndyFramework
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace IndyFramework {
namespace Protobuf {
namespace HRI {

// ===================================================================


// -------------------------------------------------------------------

class GetRefFrameListReq final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.HRI.GetRefFrameListReq) */ {
 public:
  inline GetRefFrameListReq() : GetRefFrameListReq(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetRefFrameListReq(::google::protobuf::internal::ConstantInitialized);

  GetRefFrameListReq(const GetRefFrameListReq& from);
  GetRefFrameListReq(GetRefFrameListReq&& from) noexcept
    : GetRefFrameListReq() {
    *this = ::std::move(from);
  }

  inline GetRefFrameListReq& operator=(const GetRefFrameListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRefFrameListReq& operator=(GetRefFrameListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRefFrameListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRefFrameListReq* internal_default_instance() {
    return reinterpret_cast<const GetRefFrameListReq*>(
               &_GetRefFrameListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetRefFrameListReq& a, GetRefFrameListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRefFrameListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRefFrameListReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRefFrameListReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRefFrameListReq>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetRefFrameListReq& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetRefFrameListReq& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.HRI.GetRefFrameListReq";
  }
  protected:
  explicit GetRefFrameListReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.HRI.GetRefFrameListReq)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_hri_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class GetRefFrameListRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.HRI.GetRefFrameListRes) */ {
 public:
  inline GetRefFrameListRes() : GetRefFrameListRes(nullptr) {}
  ~GetRefFrameListRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetRefFrameListRes(::google::protobuf::internal::ConstantInitialized);

  GetRefFrameListRes(const GetRefFrameListRes& from);
  GetRefFrameListRes(GetRefFrameListRes&& from) noexcept
    : GetRefFrameListRes() {
    *this = ::std::move(from);
  }

  inline GetRefFrameListRes& operator=(const GetRefFrameListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRefFrameListRes& operator=(GetRefFrameListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRefFrameListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRefFrameListRes* internal_default_instance() {
    return reinterpret_cast<const GetRefFrameListRes*>(
               &_GetRefFrameListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetRefFrameListRes& a, GetRefFrameListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRefFrameListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRefFrameListRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRefFrameListRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRefFrameListRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetRefFrameListRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetRefFrameListRes& from) {
    GetRefFrameListRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRefFrameListRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.HRI.GetRefFrameListRes";
  }
  protected:
  explicit GetRefFrameListRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefFramesFieldNumber = 1,
    kDefaultNameFieldNumber = 2,
    kMsgFieldNumber = 100,
  };
  // repeated .IndyFramework.Protobuf.Shared.NamedReferencePosition ref_frames = 1;
  int ref_frames_size() const;
  private:
  int _internal_ref_frames_size() const;

  public:
  void clear_ref_frames() ;
  ::IndyFramework::Protobuf::Shared::NamedReferencePosition* mutable_ref_frames(int index);
  ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::NamedReferencePosition >*
      mutable_ref_frames();
  private:
  const ::google::protobuf::RepeatedPtrField<::IndyFramework::Protobuf::Shared::NamedReferencePosition>& _internal_ref_frames() const;
  ::google::protobuf::RepeatedPtrField<::IndyFramework::Protobuf::Shared::NamedReferencePosition>* _internal_mutable_ref_frames();
  public:
  const ::IndyFramework::Protobuf::Shared::NamedReferencePosition& ref_frames(int index) const;
  ::IndyFramework::Protobuf::Shared::NamedReferencePosition* add_ref_frames();
  const ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::NamedReferencePosition >&
      ref_frames() const;
  // string default_name = 2;
  void clear_default_name() ;
  const std::string& default_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_default_name(Arg_&& arg, Args_... args);
  std::string* mutable_default_name();
  PROTOBUF_NODISCARD std::string* release_default_name();
  void set_allocated_default_name(std::string* ptr);

  private:
  const std::string& _internal_default_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_name(
      const std::string& value);
  std::string* _internal_mutable_default_name();

  public:
  // string msg = 100;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.HRI.GetRefFrameListRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 69, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::NamedReferencePosition > ref_frames_;
    ::google::protobuf::internal::ArenaStringPtr default_name_;
    ::google::protobuf::internal::ArenaStringPtr msg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hri_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class SetRefFrameListReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.HRI.SetRefFrameListReq) */ {
 public:
  inline SetRefFrameListReq() : SetRefFrameListReq(nullptr) {}
  ~SetRefFrameListReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetRefFrameListReq(::google::protobuf::internal::ConstantInitialized);

  SetRefFrameListReq(const SetRefFrameListReq& from);
  SetRefFrameListReq(SetRefFrameListReq&& from) noexcept
    : SetRefFrameListReq() {
    *this = ::std::move(from);
  }

  inline SetRefFrameListReq& operator=(const SetRefFrameListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRefFrameListReq& operator=(SetRefFrameListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRefFrameListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRefFrameListReq* internal_default_instance() {
    return reinterpret_cast<const SetRefFrameListReq*>(
               &_SetRefFrameListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetRefFrameListReq& a, SetRefFrameListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRefFrameListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRefFrameListReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRefFrameListReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRefFrameListReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetRefFrameListReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetRefFrameListReq& from) {
    SetRefFrameListReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRefFrameListReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.HRI.SetRefFrameListReq";
  }
  protected:
  explicit SetRefFrameListReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefFramesFieldNumber = 1,
    kDefaultNameFieldNumber = 2,
  };
  // repeated .IndyFramework.Protobuf.Shared.NamedReferencePosition ref_frames = 1;
  int ref_frames_size() const;
  private:
  int _internal_ref_frames_size() const;

  public:
  void clear_ref_frames() ;
  ::IndyFramework::Protobuf::Shared::NamedReferencePosition* mutable_ref_frames(int index);
  ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::NamedReferencePosition >*
      mutable_ref_frames();
  private:
  const ::google::protobuf::RepeatedPtrField<::IndyFramework::Protobuf::Shared::NamedReferencePosition>& _internal_ref_frames() const;
  ::google::protobuf::RepeatedPtrField<::IndyFramework::Protobuf::Shared::NamedReferencePosition>* _internal_mutable_ref_frames();
  public:
  const ::IndyFramework::Protobuf::Shared::NamedReferencePosition& ref_frames(int index) const;
  ::IndyFramework::Protobuf::Shared::NamedReferencePosition* add_ref_frames();
  const ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::NamedReferencePosition >&
      ref_frames() const;
  // string default_name = 2;
  void clear_default_name() ;
  const std::string& default_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_default_name(Arg_&& arg, Args_... args);
  std::string* mutable_default_name();
  PROTOBUF_NODISCARD std::string* release_default_name();
  void set_allocated_default_name(std::string* ptr);

  private:
  const std::string& _internal_default_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_name(
      const std::string& value);
  std::string* _internal_mutable_default_name();

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.HRI.SetRefFrameListReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 66, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::NamedReferencePosition > ref_frames_;
    ::google::protobuf::internal::ArenaStringPtr default_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hri_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class SetRefFrameListRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.HRI.SetRefFrameListRes) */ {
 public:
  inline SetRefFrameListRes() : SetRefFrameListRes(nullptr) {}
  ~SetRefFrameListRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetRefFrameListRes(::google::protobuf::internal::ConstantInitialized);

  SetRefFrameListRes(const SetRefFrameListRes& from);
  SetRefFrameListRes(SetRefFrameListRes&& from) noexcept
    : SetRefFrameListRes() {
    *this = ::std::move(from);
  }

  inline SetRefFrameListRes& operator=(const SetRefFrameListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRefFrameListRes& operator=(SetRefFrameListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRefFrameListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRefFrameListRes* internal_default_instance() {
    return reinterpret_cast<const SetRefFrameListRes*>(
               &_SetRefFrameListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetRefFrameListRes& a, SetRefFrameListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRefFrameListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRefFrameListRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRefFrameListRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRefFrameListRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetRefFrameListRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetRefFrameListRes& from) {
    SetRefFrameListRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRefFrameListRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.HRI.SetRefFrameListRes";
  }
  protected:
  explicit SetRefFrameListRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 100,
  };
  // string msg = 100;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.HRI.SetRefFrameListRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 57, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr msg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hri_5fmsgs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetRefFrameListReq

// -------------------------------------------------------------------

// GetRefFrameListRes

// repeated .IndyFramework.Protobuf.Shared.NamedReferencePosition ref_frames = 1;
inline int GetRefFrameListRes::_internal_ref_frames_size() const {
  return _internal_ref_frames().size();
}
inline int GetRefFrameListRes::ref_frames_size() const {
  return _internal_ref_frames_size();
}
inline ::IndyFramework::Protobuf::Shared::NamedReferencePosition* GetRefFrameListRes::mutable_ref_frames(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.HRI.GetRefFrameListRes.ref_frames)
  return _internal_mutable_ref_frames()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::NamedReferencePosition >*
GetRefFrameListRes::mutable_ref_frames() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.HRI.GetRefFrameListRes.ref_frames)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ref_frames();
}
inline const ::IndyFramework::Protobuf::Shared::NamedReferencePosition& GetRefFrameListRes::ref_frames(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.HRI.GetRefFrameListRes.ref_frames)
    return _internal_ref_frames().Get(index);
}
inline ::IndyFramework::Protobuf::Shared::NamedReferencePosition* GetRefFrameListRes::add_ref_frames() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::IndyFramework::Protobuf::Shared::NamedReferencePosition* _add = _internal_mutable_ref_frames()->Add();
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.HRI.GetRefFrameListRes.ref_frames)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::NamedReferencePosition >&
GetRefFrameListRes::ref_frames() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.HRI.GetRefFrameListRes.ref_frames)
  return _internal_ref_frames();
}
inline const ::google::protobuf::RepeatedPtrField<::IndyFramework::Protobuf::Shared::NamedReferencePosition>&
GetRefFrameListRes::_internal_ref_frames() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ref_frames_;
}
inline ::google::protobuf::RepeatedPtrField<::IndyFramework::Protobuf::Shared::NamedReferencePosition>*
GetRefFrameListRes::_internal_mutable_ref_frames() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ref_frames_;
}

// string default_name = 2;
inline void GetRefFrameListRes::clear_default_name() {
  _impl_.default_name_.ClearToEmpty();
}
inline const std::string& GetRefFrameListRes::default_name() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.HRI.GetRefFrameListRes.default_name)
  return _internal_default_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetRefFrameListRes::set_default_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.default_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.HRI.GetRefFrameListRes.default_name)
}
inline std::string* GetRefFrameListRes::mutable_default_name() {
  std::string* _s = _internal_mutable_default_name();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.HRI.GetRefFrameListRes.default_name)
  return _s;
}
inline const std::string& GetRefFrameListRes::_internal_default_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.default_name_.Get();
}
inline void GetRefFrameListRes::_internal_set_default_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.default_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRefFrameListRes::_internal_mutable_default_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.default_name_.Mutable( GetArenaForAllocation());
}
inline std::string* GetRefFrameListRes::release_default_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.HRI.GetRefFrameListRes.default_name)
  return _impl_.default_name_.Release();
}
inline void GetRefFrameListRes::set_allocated_default_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.default_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.default_name_.IsDefault()) {
          _impl_.default_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.HRI.GetRefFrameListRes.default_name)
}

// string msg = 100;
inline void GetRefFrameListRes::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& GetRefFrameListRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.HRI.GetRefFrameListRes.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetRefFrameListRes::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.HRI.GetRefFrameListRes.msg)
}
inline std::string* GetRefFrameListRes::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.HRI.GetRefFrameListRes.msg)
  return _s;
}
inline const std::string& GetRefFrameListRes::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void GetRefFrameListRes::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRefFrameListRes::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* GetRefFrameListRes::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.HRI.GetRefFrameListRes.msg)
  return _impl_.msg_.Release();
}
inline void GetRefFrameListRes::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.HRI.GetRefFrameListRes.msg)
}

// -------------------------------------------------------------------

// SetRefFrameListReq

// repeated .IndyFramework.Protobuf.Shared.NamedReferencePosition ref_frames = 1;
inline int SetRefFrameListReq::_internal_ref_frames_size() const {
  return _internal_ref_frames().size();
}
inline int SetRefFrameListReq::ref_frames_size() const {
  return _internal_ref_frames_size();
}
inline ::IndyFramework::Protobuf::Shared::NamedReferencePosition* SetRefFrameListReq::mutable_ref_frames(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.HRI.SetRefFrameListReq.ref_frames)
  return _internal_mutable_ref_frames()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::NamedReferencePosition >*
SetRefFrameListReq::mutable_ref_frames() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.HRI.SetRefFrameListReq.ref_frames)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ref_frames();
}
inline const ::IndyFramework::Protobuf::Shared::NamedReferencePosition& SetRefFrameListReq::ref_frames(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.HRI.SetRefFrameListReq.ref_frames)
    return _internal_ref_frames().Get(index);
}
inline ::IndyFramework::Protobuf::Shared::NamedReferencePosition* SetRefFrameListReq::add_ref_frames() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::IndyFramework::Protobuf::Shared::NamedReferencePosition* _add = _internal_mutable_ref_frames()->Add();
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.HRI.SetRefFrameListReq.ref_frames)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::NamedReferencePosition >&
SetRefFrameListReq::ref_frames() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.HRI.SetRefFrameListReq.ref_frames)
  return _internal_ref_frames();
}
inline const ::google::protobuf::RepeatedPtrField<::IndyFramework::Protobuf::Shared::NamedReferencePosition>&
SetRefFrameListReq::_internal_ref_frames() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ref_frames_;
}
inline ::google::protobuf::RepeatedPtrField<::IndyFramework::Protobuf::Shared::NamedReferencePosition>*
SetRefFrameListReq::_internal_mutable_ref_frames() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ref_frames_;
}

// string default_name = 2;
inline void SetRefFrameListReq::clear_default_name() {
  _impl_.default_name_.ClearToEmpty();
}
inline const std::string& SetRefFrameListReq::default_name() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.HRI.SetRefFrameListReq.default_name)
  return _internal_default_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetRefFrameListReq::set_default_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.default_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.HRI.SetRefFrameListReq.default_name)
}
inline std::string* SetRefFrameListReq::mutable_default_name() {
  std::string* _s = _internal_mutable_default_name();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.HRI.SetRefFrameListReq.default_name)
  return _s;
}
inline const std::string& SetRefFrameListReq::_internal_default_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.default_name_.Get();
}
inline void SetRefFrameListReq::_internal_set_default_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.default_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetRefFrameListReq::_internal_mutable_default_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.default_name_.Mutable( GetArenaForAllocation());
}
inline std::string* SetRefFrameListReq::release_default_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.HRI.SetRefFrameListReq.default_name)
  return _impl_.default_name_.Release();
}
inline void SetRefFrameListReq::set_allocated_default_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.default_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.default_name_.IsDefault()) {
          _impl_.default_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.HRI.SetRefFrameListReq.default_name)
}

// -------------------------------------------------------------------

// SetRefFrameListRes

// string msg = 100;
inline void SetRefFrameListRes::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& SetRefFrameListRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.HRI.SetRefFrameListRes.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetRefFrameListRes::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.HRI.SetRefFrameListRes.msg)
}
inline std::string* SetRefFrameListRes::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.HRI.SetRefFrameListRes.msg)
  return _s;
}
inline const std::string& SetRefFrameListRes::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void SetRefFrameListRes::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* SetRefFrameListRes::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* SetRefFrameListRes::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.HRI.SetRefFrameListRes.msg)
  return _impl_.msg_.Release();
}
inline void SetRefFrameListRes::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.HRI.SetRefFrameListRes.msg)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace HRI
}  // namespace Protobuf
}  // namespace IndyFramework


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_hri_5fmsgs_2eproto_2epb_2eh
