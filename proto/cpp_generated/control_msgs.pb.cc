// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_msgs.proto

#include "control_msgs.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Nrmk {
namespace IndyFramework {
        template <typename>
PROTOBUF_CONSTEXPR ControlInfo::ControlInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.control_version_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.robot_model_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct ControlInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlInfoDefaultTypeInternal() {}
  union {
    ControlInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlInfoDefaultTypeInternal _ControlInfo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SDKLicenseInfo::SDKLicenseInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.license_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.expire_date_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SDKLicenseInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKLicenseInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKLicenseInfoDefaultTypeInternal() {}
  union {
    SDKLicenseInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKLicenseInfoDefaultTypeInternal _SDKLicenseInfo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SDKLicenseResp::SDKLicenseResp(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.activated_)*/ false,
    } {}
struct SDKLicenseRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKLicenseRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKLicenseRespDefaultTypeInternal() {}
  union {
    SDKLicenseResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKLicenseRespDefaultTypeInternal _SDKLicenseResp_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR VariableCondition::VariableCondition(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.i_vars_)*/ {},
      /*decltype(_impl_.f_vars_)*/ {},
      /*decltype(_impl_.b_vars_)*/ {},
      /*decltype(_impl_.m_vars_)*/ {},
      /*decltype(_impl_.j_vars_)*/ {},
      /*decltype(_impl_.t_vars_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct VariableConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VariableConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VariableConditionDefaultTypeInternal() {}
  union {
    VariableCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VariableConditionDefaultTypeInternal _VariableCondition_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR IOCondition::IOCondition(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.di_)*/ {},
      /*decltype(_impl_.end_di_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct IOConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IOConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IOConditionDefaultTypeInternal() {}
  union {
    IOCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IOConditionDefaultTypeInternal _IOCondition_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MotionCondition::MotionCondition(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.io_cond_)*/ nullptr,
      /*decltype(_impl_.var_cond_)*/ nullptr,
      /*decltype(_impl_.type_cond_)*/ 0,
      /*decltype(_impl_.type_react_)*/ 0,
      /*decltype(_impl_.const_cond_)*/ false,
    } {}
struct MotionConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotionConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotionConditionDefaultTypeInternal() {}
  union {
    MotionCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotionConditionDefaultTypeInternal _MotionCondition_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BlendingType::BlendingType(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_.blending_radius_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct BlendingTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlendingTypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlendingTypeDefaultTypeInternal() {}
  union {
    BlendingType _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlendingTypeDefaultTypeInternal _BlendingType_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TargetJ::TargetJ(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.j_start_)*/ {},
      /*decltype(_impl_.j_target_)*/ {},
      /*decltype(_impl_.base_type_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TargetJDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetJDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetJDefaultTypeInternal() {}
  union {
    TargetJ _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetJDefaultTypeInternal _TargetJ_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveJReq::MoveJReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.target_)*/ nullptr,
      /*decltype(_impl_.blending_)*/ nullptr,
      /*decltype(_impl_.post_condition_)*/ nullptr,
      /*decltype(_impl_.vel_ratio_)*/ 0,
      /*decltype(_impl_.acc_ratio_)*/ 0,
      /*decltype(_impl_.teaching_mode_)*/ false,
    } {}
struct MoveJReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveJReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveJReqDefaultTypeInternal() {}
  union {
    MoveJReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveJReqDefaultTypeInternal _MoveJReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveJCondReq::MoveJCondReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.target_)*/ nullptr,
      /*decltype(_impl_.blending_)*/ nullptr,
      /*decltype(_impl_.post_condition_)*/ nullptr,
      /*decltype(_impl_.vel_ratio_)*/ 0,
      /*decltype(_impl_.acc_ratio_)*/ 0,
      /*decltype(_impl_.teaching_mode_)*/ false,
    } {}
struct MoveJCondReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveJCondReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveJCondReqDefaultTypeInternal() {}
  union {
    MoveJCondReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveJCondReqDefaultTypeInternal _MoveJCondReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveJTReq::MoveJTReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.target_)*/ nullptr,
      /*decltype(_impl_.blending_)*/ nullptr,
      /*decltype(_impl_.post_condition_)*/ nullptr,
      /*decltype(_impl_.time_)*/ 0,
    } {}
struct MoveJTReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveJTReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveJTReqDefaultTypeInternal() {}
  union {
    MoveJTReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveJTReqDefaultTypeInternal _MoveJTReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TargetP::TargetP(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.t_start_)*/ {},
      /*decltype(_impl_.t_target_)*/ {},
      /*decltype(_impl_.base_type_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TargetPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetPDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetPDefaultTypeInternal() {}
  union {
    TargetP _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetPDefaultTypeInternal _TargetP_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TargetC::TargetC(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.t_start_)*/ {},
      /*decltype(_impl_.t_pos0_)*/ {},
      /*decltype(_impl_.t_pos1_)*/ {},
      /*decltype(_impl_.base_type_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TargetCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetCDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetCDefaultTypeInternal() {}
  union {
    TargetC _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetCDefaultTypeInternal _TargetC_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveLReq::MoveLReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.target_)*/ nullptr,
      /*decltype(_impl_.blending_)*/ nullptr,
      /*decltype(_impl_.post_condition_)*/ nullptr,
      /*decltype(_impl_.vel_ratio_)*/ 0,
      /*decltype(_impl_.acc_ratio_)*/ 0,
      /*decltype(_impl_.vel_type_)*/ 0,
      /*decltype(_impl_.teaching_mode_)*/ false,
      /*decltype(_impl_.bypass_singular_)*/ false,
    } {}
struct MoveLReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveLReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveLReqDefaultTypeInternal() {}
  union {
    MoveLReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveLReqDefaultTypeInternal _MoveLReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveLTReq::MoveLTReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.target_)*/ nullptr,
      /*decltype(_impl_.blending_)*/ nullptr,
      /*decltype(_impl_.post_condition_)*/ nullptr,
      /*decltype(_impl_.time_)*/ 0,
    } {}
struct MoveLTReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveLTReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveLTReqDefaultTypeInternal() {}
  union {
    MoveLTReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveLTReqDefaultTypeInternal _MoveLTReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveAxisReq::MoveAxisReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.start_mm_)*/ {},
      /*decltype(_impl_.target_mm_)*/ {},
      /*decltype(_impl_.vel_percentage_)*/ 0,
      /*decltype(_impl_.acc_percentage_)*/ 0,
      /*decltype(_impl_.is_absolute_)*/ false,
      /*decltype(_impl_.teaching_mode_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MoveAxisReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveAxisReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveAxisReqDefaultTypeInternal() {}
  union {
    MoveAxisReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveAxisReqDefaultTypeInternal _MoveAxisReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveCReq::MoveCReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.target_)*/ nullptr,
      /*decltype(_impl_.blending_)*/ nullptr,
      /*decltype(_impl_.post_condition_)*/ nullptr,
      /*decltype(_impl_.angle_)*/ 0,
      /*decltype(_impl_.setting_type_)*/ 0,
      /*decltype(_impl_.move_type_)*/ 0,
      /*decltype(_impl_.vel_ratio_)*/ 0,
      /*decltype(_impl_.acc_ratio_)*/ 0,
      /*decltype(_impl_.vel_type_)*/ 0,
      /*decltype(_impl_.teaching_mode_)*/ false,
      /*decltype(_impl_.bypass_singular_)*/ false,
    } {}
struct MoveCReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveCReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveCReqDefaultTypeInternal() {}
  union {
    MoveCReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveCReqDefaultTypeInternal _MoveCReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveCTReq::MoveCTReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.target_)*/ nullptr,
      /*decltype(_impl_.blending_)*/ nullptr,
      /*decltype(_impl_.post_condition_)*/ nullptr,
      /*decltype(_impl_.angle_)*/ 0,
      /*decltype(_impl_.setting_type_)*/ 0,
      /*decltype(_impl_.move_type_)*/ 0,
      /*decltype(_impl_.time_)*/ 0,
    } {}
struct MoveCTReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveCTReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveCTReqDefaultTypeInternal() {}
  union {
    MoveCTReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveCTReqDefaultTypeInternal _MoveCTReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveJointTrajReq::MoveJointTrajReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.q_list_)*/ {},
      /*decltype(_impl_.qdot_list_)*/ {},
      /*decltype(_impl_.qddot_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MoveJointTrajReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveJointTrajReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveJointTrajReqDefaultTypeInternal() {}
  union {
    MoveJointTrajReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveJointTrajReqDefaultTypeInternal _MoveJointTrajReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveTaskTrajReq::MoveTaskTrajReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.p_list_)*/ {},
      /*decltype(_impl_.pdot_list_)*/ {},
      /*decltype(_impl_.pddot_list_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MoveTaskTrajReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveTaskTrajReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveTaskTrajReqDefaultTypeInternal() {}
  union {
    MoveTaskTrajReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveTaskTrajReqDefaultTypeInternal _MoveTaskTrajReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveGcodeReq::MoveGcodeReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.gcode_file_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.is_smooth_mode_)*/ false,
      /*decltype(_impl_.smooth_radius_)*/ 0,
      /*decltype(_impl_.vel_ratio_)*/ 0,
      /*decltype(_impl_.acc_ratio_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MoveGcodeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveGcodeReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveGcodeReqDefaultTypeInternal() {}
  union {
    MoveGcodeReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveGcodeReqDefaultTypeInternal _MoveGcodeReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveConveyorReq::MoveConveyorReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.post_condition_)*/ nullptr,
      /*decltype(_impl_.teaching_mode_)*/ false,
      /*decltype(_impl_.bypass_singular_)*/ false,
      /*decltype(_impl_.acc_ratio_)*/ 0,
    } {}
struct MoveConveyorReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveConveyorReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveConveyorReqDefaultTypeInternal() {}
  union {
    MoveConveyorReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveConveyorReqDefaultTypeInternal _MoveConveyorReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR WaitIOReq::WaitIOReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.di_list_)*/ {},
      /*decltype(_impl_.do_list_)*/ {},
      /*decltype(_impl_.end_di_list_)*/ {},
      /*decltype(_impl_.end_do_list_)*/ {},
      /*decltype(_impl_.set_do_list_)*/ {},
      /*decltype(_impl_.set_end_do_list_)*/ {},
      /*decltype(_impl_.set_ao_list_)*/ {},
      /*decltype(_impl_.set_end_ao_list_)*/ {},
      /*decltype(_impl_.conjunction_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct WaitIOReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitIOReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitIOReqDefaultTypeInternal() {}
  union {
    WaitIOReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitIOReqDefaultTypeInternal _WaitIOReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR WaitTimeReq::WaitTimeReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.set_do_list_)*/ {},
      /*decltype(_impl_.set_end_do_list_)*/ {},
      /*decltype(_impl_.set_ao_list_)*/ {},
      /*decltype(_impl_.set_end_ao_list_)*/ {},
      /*decltype(_impl_.time_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct WaitTimeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitTimeReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitTimeReqDefaultTypeInternal() {}
  union {
    WaitTimeReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitTimeReqDefaultTypeInternal _WaitTimeReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR WaitProgressReq::WaitProgressReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.set_do_list_)*/ {},
      /*decltype(_impl_.set_end_do_list_)*/ {},
      /*decltype(_impl_.set_ao_list_)*/ {},
      /*decltype(_impl_.set_end_ao_list_)*/ {},
      /*decltype(_impl_.progress_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct WaitProgressReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitProgressReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitProgressReqDefaultTypeInternal() {}
  union {
    WaitProgressReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitProgressReqDefaultTypeInternal _WaitProgressReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR WaitTrajReq::WaitTrajReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.set_do_list_)*/ {},
      /*decltype(_impl_.set_end_do_list_)*/ {},
      /*decltype(_impl_.set_ao_list_)*/ {},
      /*decltype(_impl_.set_end_ao_list_)*/ {},
      /*decltype(_impl_.traj_condition_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct WaitTrajReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitTrajReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitTrajReqDefaultTypeInternal() {}
  union {
    WaitTrajReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitTrajReqDefaultTypeInternal _WaitTrajReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR WaitRadiusReq::WaitRadiusReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.set_do_list_)*/ {},
      /*decltype(_impl_.set_end_do_list_)*/ {},
      /*decltype(_impl_.set_ao_list_)*/ {},
      /*decltype(_impl_.set_end_ao_list_)*/ {},
      /*decltype(_impl_.radius_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct WaitRadiusReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitRadiusReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitRadiusReqDefaultTypeInternal() {}
  union {
    WaitRadiusReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitRadiusReqDefaultTypeInternal _WaitRadiusReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Program::Program(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.prog_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.prog_idx_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ProgramDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgramDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgramDefaultTypeInternal() {}
  union {
    Program _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgramDefaultTypeInternal _Program_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TuningProgram::TuningProgram(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.program_)*/ nullptr,
      /*decltype(_impl_.tuning_space_)*/ 0,
      /*decltype(_impl_.precision_)*/ 0,
      /*decltype(_impl_.vel_level_max_)*/ 0u,
    } {}
struct TuningProgramDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TuningProgramDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TuningProgramDefaultTypeInternal() {}
  union {
    TuningProgram _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TuningProgramDefaultTypeInternal _TuningProgram_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ProgramInfo::ProgramInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.path_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.timestamp_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.size_)*/ ::uint64_t{0u},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ProgramInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgramInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgramInfoDefaultTypeInternal() {}
  union {
    ProgramInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgramInfoDefaultTypeInternal _ProgramInfo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Variable::Variable(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.type_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.addr_)*/ 0,
      /*decltype(_impl_.in_watching_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct VariableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VariableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VariableDefaultTypeInternal() {}
  union {
    Variable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VariableDefaultTypeInternal _Variable_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR IntVariable::IntVariable(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.value_)*/ ::int64_t{0},
      /*decltype(_impl_.addr_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct IntVariableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntVariableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntVariableDefaultTypeInternal() {}
  union {
    IntVariable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntVariableDefaultTypeInternal _IntVariable_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ModbusVariable::ModbusVariable(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.addr_)*/ 0,
      /*decltype(_impl_.value_)*/ 0,
      /*decltype(_impl_.signal_type_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ModbusVariableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModbusVariableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModbusVariableDefaultTypeInternal() {}
  union {
    ModbusVariable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModbusVariableDefaultTypeInternal _ModbusVariable_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BoolVariable::BoolVariable(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.addr_)*/ 0,
      /*decltype(_impl_.value_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct BoolVariableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoolVariableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoolVariableDefaultTypeInternal() {}
  union {
    BoolVariable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoolVariableDefaultTypeInternal _BoolVariable_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FloatVariable::FloatVariable(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.addr_)*/ 0,
      /*decltype(_impl_.value_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct FloatVariableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FloatVariableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FloatVariableDefaultTypeInternal() {}
  union {
    FloatVariable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FloatVariableDefaultTypeInternal _FloatVariable_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR JPosVariable::JPosVariable(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.jpos_)*/ {},
      /*decltype(_impl_.addr_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct JPosVariableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JPosVariableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JPosVariableDefaultTypeInternal() {}
  union {
    JPosVariable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JPosVariableDefaultTypeInternal _JPosVariable_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TPosVariable::TPosVariable(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.tpos_)*/ {},
      /*decltype(_impl_.addr_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TPosVariableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TPosVariableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TPosVariableDefaultTypeInternal() {}
  union {
    TPosVariable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TPosVariableDefaultTypeInternal _TPosVariable_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ModbusServer::ModbusServer(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.variable_list_)*/ {},
      /*decltype(_impl_.server_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.ip_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.port_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ModbusServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModbusServerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModbusServerDefaultTypeInternal() {}
  union {
    ModbusServer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModbusServerDefaultTypeInternal _ModbusServer_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ModbusVariableList::ModbusVariableList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.modbus_variables_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ModbusVariableListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModbusVariableListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModbusVariableListDefaultTypeInternal() {}
  union {
    ModbusVariableList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModbusVariableListDefaultTypeInternal _ModbusVariableList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AllVars::AllVars(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.variables_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AllVarsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllVarsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllVarsDefaultTypeInternal() {}
  union {
    AllVars _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllVarsDefaultTypeInternal _AllVars_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR IntVars::IntVars(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.variables_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct IntVarsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntVarsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntVarsDefaultTypeInternal() {}
  union {
    IntVars _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntVarsDefaultTypeInternal _IntVars_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ModbusVars::ModbusVars(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.variables_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ModbusVarsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModbusVarsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModbusVarsDefaultTypeInternal() {}
  union {
    ModbusVars _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModbusVarsDefaultTypeInternal _ModbusVars_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BoolVars::BoolVars(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.variables_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct BoolVarsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoolVarsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoolVarsDefaultTypeInternal() {}
  union {
    BoolVars _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoolVarsDefaultTypeInternal _BoolVars_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FloatVars::FloatVars(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.variables_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct FloatVarsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FloatVarsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FloatVarsDefaultTypeInternal() {}
  union {
    FloatVars _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FloatVarsDefaultTypeInternal _FloatVars_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR JPosVars::JPosVars(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.variables_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct JPosVarsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JPosVarsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JPosVarsDefaultTypeInternal() {}
  union {
    JPosVars _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JPosVarsDefaultTypeInternal _JPosVars_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TPosVars::TPosVars(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.variables_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TPosVarsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TPosVarsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TPosVarsDefaultTypeInternal() {}
  union {
    TPosVars _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TPosVarsDefaultTypeInternal _TPosVars_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR InverseKinematicsReq::InverseKinematicsReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.tpos_)*/ {},
      /*decltype(_impl_.init_jpos_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct InverseKinematicsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InverseKinematicsReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InverseKinematicsReqDefaultTypeInternal() {}
  union {
    InverseKinematicsReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InverseKinematicsReqDefaultTypeInternal _InverseKinematicsReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR InverseKinematicsRes::InverseKinematicsRes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.jpos_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct InverseKinematicsResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InverseKinematicsResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InverseKinematicsResDefaultTypeInternal() {}
  union {
    InverseKinematicsRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InverseKinematicsResDefaultTypeInternal _InverseKinematicsRes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ForwardKinematicsReq::ForwardKinematicsReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.jpos_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ForwardKinematicsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForwardKinematicsReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForwardKinematicsReqDefaultTypeInternal() {}
  union {
    ForwardKinematicsReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForwardKinematicsReqDefaultTypeInternal _ForwardKinematicsReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ForwardKinematicsRes::ForwardKinematicsRes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.tpos_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct ForwardKinematicsResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForwardKinematicsResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForwardKinematicsResDefaultTypeInternal() {}
  union {
    ForwardKinematicsRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForwardKinematicsResDefaultTypeInternal _ForwardKinematicsRes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CheckAproachRetractValidReq::CheckAproachRetractValidReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.tpos_)*/ {},
      /*decltype(_impl_.init_jpos_)*/ {},
      /*decltype(_impl_.pre_tpos_)*/ {},
      /*decltype(_impl_.post_tpos_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CheckAproachRetractValidReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckAproachRetractValidReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckAproachRetractValidReqDefaultTypeInternal() {}
  union {
    CheckAproachRetractValidReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckAproachRetractValidReqDefaultTypeInternal _CheckAproachRetractValidReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CheckAproachRetractValidRes::CheckAproachRetractValidRes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.tar_pos_)*/ {},
      /*decltype(_impl_.approach_pos_)*/ {},
      /*decltype(_impl_.retract_pos_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.is_valid_)*/ false,
    } {}
struct CheckAproachRetractValidResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckAproachRetractValidResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckAproachRetractValidResDefaultTypeInternal() {}
  union {
    CheckAproachRetractValidRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckAproachRetractValidResDefaultTypeInternal _CheckAproachRetractValidRes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GetPalletPointListReq::GetPalletPointListReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.tpos_)*/ {},
      /*decltype(_impl_.jpos_)*/ {},
      /*decltype(_impl_.pre_tpos_)*/ {},
      /*decltype(_impl_.post_tpos_)*/ {},
      /*decltype(_impl_.pallet_pattern_)*/ 0,
      /*decltype(_impl_.width_)*/ 0,
      /*decltype(_impl_.height_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct GetPalletPointListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPalletPointListReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPalletPointListReqDefaultTypeInternal() {}
  union {
    GetPalletPointListReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPalletPointListReqDefaultTypeInternal _GetPalletPointListReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR PalletPoint::PalletPoint(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.tar_pos_)*/ {},
      /*decltype(_impl_.approach_pos_)*/ {},
      /*decltype(_impl_.retract_pos_)*/ {},
      /*decltype(_impl_.tar_jpos_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct PalletPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PalletPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PalletPointDefaultTypeInternal() {}
  union {
    PalletPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PalletPointDefaultTypeInternal _PalletPoint_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GetPalletPointListRes::GetPalletPointListRes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.pallet_points_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct GetPalletPointListResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPalletPointListResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPalletPointListResDefaultTypeInternal() {}
  union {
    GetPalletPointListRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPalletPointListResDefaultTypeInternal _GetPalletPointListRes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CalculateRelativePoseReq::CalculateRelativePoseReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.start_pos_)*/ {},
      /*decltype(_impl_.end_pos_)*/ {},
      /*decltype(_impl_.base_type_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CalculateRelativePoseReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalculateRelativePoseReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalculateRelativePoseReqDefaultTypeInternal() {}
  union {
    CalculateRelativePoseReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalculateRelativePoseReqDefaultTypeInternal _CalculateRelativePoseReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CalculateRelativePoseRes::CalculateRelativePoseRes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.relative_pos_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct CalculateRelativePoseResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalculateRelativePoseResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalculateRelativePoseResDefaultTypeInternal() {}
  union {
    CalculateRelativePoseRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalculateRelativePoseResDefaultTypeInternal _CalculateRelativePoseRes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CalculateCurrentPoseRelReq::CalculateCurrentPoseRelReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.current_pos_)*/ {},
      /*decltype(_impl_.relative_pos_)*/ {},
      /*decltype(_impl_.base_type_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CalculateCurrentPoseRelReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalculateCurrentPoseRelReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalculateCurrentPoseRelReqDefaultTypeInternal() {}
  union {
    CalculateCurrentPoseRelReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalculateCurrentPoseRelReqDefaultTypeInternal _CalculateCurrentPoseRelReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CalculateCurrentPoseRelRes::CalculateCurrentPoseRelRes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.calculated_pos_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct CalculateCurrentPoseRelResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalculateCurrentPoseRelResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalculateCurrentPoseRelResDefaultTypeInternal() {}
  union {
    CalculateCurrentPoseRelRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalculateCurrentPoseRelResDefaultTypeInternal _CalculateCurrentPoseRelRes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TeleOpDevice::TeleOpDevice(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.ip_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_.port_)*/ 0u,
      /*decltype(_impl_.connected_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TeleOpDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeleOpDeviceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeleOpDeviceDefaultTypeInternal() {}
  union {
    TeleOpDevice _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeleOpDeviceDefaultTypeInternal _TeleOpDevice_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TeleOpState::TeleOpState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.mode_)*/ 0,
      /*decltype(_impl_.method_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TeleOpStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeleOpStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeleOpStateDefaultTypeInternal() {}
  union {
    TeleOpState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeleOpStateDefaultTypeInternal _TeleOpState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TeleP::TeleP(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.tpos_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct TelePDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TelePDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TelePDefaultTypeInternal() {}
  union {
    TeleP _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TelePDefaultTypeInternal _TeleP_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TeleOpFileList::TeleOpFileList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.files_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct TeleOpFileListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeleOpFileListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeleOpFileListDefaultTypeInternal() {}
  union {
    TeleOpFileList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeleOpFileListDefaultTypeInternal _TeleOpFileList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TeleFileReq::TeleFileReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TeleFileReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeleFileReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeleFileReqDefaultTypeInternal() {}
  union {
    TeleFileReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeleFileReqDefaultTypeInternal _TeleFileReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TelePlayRate::TelePlayRate(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.rate_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TelePlayRateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TelePlayRateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TelePlayRateDefaultTypeInternal() {}
  union {
    TelePlayRate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TelePlayRateDefaultTypeInternal _TelePlayRate_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveTeleJReq::MoveTeleJReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.jpos_)*/ {},
      /*decltype(_impl_.vel_ratio_)*/ 0,
      /*decltype(_impl_.acc_ratio_)*/ 0,
      /*decltype(_impl_.method_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MoveTeleJReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveTeleJReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveTeleJReqDefaultTypeInternal() {}
  union {
    MoveTeleJReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveTeleJReqDefaultTypeInternal _MoveTeleJReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveTeleLReq::MoveTeleLReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.tpos_)*/ {},
      /*decltype(_impl_.vel_ratio_)*/ 0,
      /*decltype(_impl_.acc_ratio_)*/ 0,
      /*decltype(_impl_.method_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MoveTeleLReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveTeleLReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveTeleLReqDefaultTypeInternal() {}
  union {
    MoveTeleLReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveTeleLReqDefaultTypeInternal _MoveTeleLReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveLFReq::MoveLFReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.des_force_)*/ {},
      /*decltype(_impl_.enabled_force_)*/ {},
      /*decltype(_impl_.target_)*/ nullptr,
      /*decltype(_impl_.blending_)*/ nullptr,
      /*decltype(_impl_.post_condition_)*/ nullptr,
      /*decltype(_impl_.vel_ratio_)*/ 0,
      /*decltype(_impl_.acc_ratio_)*/ 0,
      /*decltype(_impl_.vel_type_)*/ 0,
      /*decltype(_impl_.teaching_mode_)*/ false,
    } {}
struct MoveLFReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveLFReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveLFReqDefaultTypeInternal() {}
  union {
    MoveLFReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveLFReqDefaultTypeInternal _MoveLFReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MoveFLRes::MoveFLRes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.msg_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MoveFLResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveFLResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveFLResDefaultTypeInternal() {}
  union {
    MoveFLRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveFLResDefaultTypeInternal _MoveFLRes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TransformedFTSensorData::TransformedFTSensorData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.ft_fx_)*/ 0,
      /*decltype(_impl_.ft_fy_)*/ 0,
      /*decltype(_impl_.ft_fz_)*/ 0,
      /*decltype(_impl_.ft_tx_)*/ 0,
      /*decltype(_impl_.ft_ty_)*/ 0,
      /*decltype(_impl_.ft_tz_)*/ 0,
    } {}
struct TransformedFTSensorDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformedFTSensorDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformedFTSensorDataDefaultTypeInternal() {}
  union {
    TransformedFTSensorData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformedFTSensorDataDefaultTypeInternal _TransformedFTSensorData_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
static ::_pb::Metadata file_level_metadata_control_5fmsgs_2eproto[70];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_control_5fmsgs_2eproto[12];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_control_5fmsgs_2eproto = nullptr;
const ::uint32_t TableStruct_control_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlInfo, _impl_.control_version_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlInfo, _impl_.robot_model_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlInfo, _impl_.response_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SDKLicenseInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SDKLicenseInfo, _impl_.license_key_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SDKLicenseInfo, _impl_.expire_date_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SDKLicenseResp, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SDKLicenseResp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SDKLicenseResp, _impl_.activated_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SDKLicenseResp, _impl_.response_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VariableCondition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VariableCondition, _impl_.i_vars_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VariableCondition, _impl_.f_vars_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VariableCondition, _impl_.b_vars_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VariableCondition, _impl_.m_vars_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VariableCondition, _impl_.j_vars_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VariableCondition, _impl_.t_vars_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOCondition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOCondition, _impl_.di_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOCondition, _impl_.end_di_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionCondition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionCondition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionCondition, _impl_.type_cond_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionCondition, _impl_.type_react_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionCondition, _impl_.const_cond_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionCondition, _impl_.io_cond_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionCondition, _impl_.var_cond_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BlendingType, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BlendingType, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BlendingType, _impl_.blending_radius_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetJ, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetJ, _impl_.j_start_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetJ, _impl_.j_target_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetJ, _impl_.base_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, _impl_.target_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, _impl_.blending_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, _impl_.vel_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, _impl_.acc_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, _impl_.post_condition_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, _impl_.teaching_mode_),
    0,
    1,
    ~0u,
    ~0u,
    2,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, _impl_.target_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, _impl_.blending_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, _impl_.vel_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, _impl_.acc_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, _impl_.post_condition_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, _impl_.teaching_mode_),
    0,
    1,
    ~0u,
    ~0u,
    2,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJTReq, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJTReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJTReq, _impl_.target_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJTReq, _impl_.blending_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJTReq, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJTReq, _impl_.post_condition_),
    0,
    1,
    ~0u,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetP, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetP, _impl_.t_start_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetP, _impl_.t_target_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetP, _impl_.base_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetC, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetC, _impl_.t_start_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetC, _impl_.t_pos0_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetC, _impl_.t_pos1_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetC, _impl_.base_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, _impl_.target_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, _impl_.blending_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, _impl_.vel_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, _impl_.acc_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, _impl_.vel_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, _impl_.post_condition_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, _impl_.teaching_mode_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, _impl_.bypass_singular_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    2,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLTReq, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLTReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLTReq, _impl_.target_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLTReq, _impl_.blending_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLTReq, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLTReq, _impl_.post_condition_),
    0,
    1,
    ~0u,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveAxisReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveAxisReq, _impl_.start_mm_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveAxisReq, _impl_.target_mm_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveAxisReq, _impl_.vel_percentage_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveAxisReq, _impl_.acc_percentage_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveAxisReq, _impl_.is_absolute_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveAxisReq, _impl_.teaching_mode_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, _impl_.target_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, _impl_.blending_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, _impl_.angle_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, _impl_.setting_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, _impl_.move_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, _impl_.vel_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, _impl_.acc_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, _impl_.vel_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, _impl_.post_condition_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, _impl_.teaching_mode_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, _impl_.bypass_singular_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    2,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, _impl_.target_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, _impl_.blending_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, _impl_.angle_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, _impl_.setting_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, _impl_.move_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, _impl_.post_condition_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJointTrajReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJointTrajReq, _impl_.q_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJointTrajReq, _impl_.qdot_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJointTrajReq, _impl_.qddot_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTaskTrajReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTaskTrajReq, _impl_.p_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTaskTrajReq, _impl_.pdot_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTaskTrajReq, _impl_.pddot_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveGcodeReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveGcodeReq, _impl_.gcode_file_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveGcodeReq, _impl_.is_smooth_mode_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveGcodeReq, _impl_.smooth_radius_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveGcodeReq, _impl_.vel_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveGcodeReq, _impl_.acc_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveConveyorReq, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveConveyorReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveConveyorReq, _impl_.teaching_mode_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveConveyorReq, _impl_.bypass_singular_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveConveyorReq, _impl_.acc_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveConveyorReq, _impl_.post_condition_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, _impl_.di_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, _impl_.do_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, _impl_.end_di_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, _impl_.end_do_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, _impl_.conjunction_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, _impl_.set_do_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, _impl_.set_end_do_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, _impl_.set_ao_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, _impl_.set_end_ao_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTimeReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTimeReq, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTimeReq, _impl_.set_do_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTimeReq, _impl_.set_end_do_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTimeReq, _impl_.set_ao_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTimeReq, _impl_.set_end_ao_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitProgressReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitProgressReq, _impl_.progress_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitProgressReq, _impl_.set_do_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitProgressReq, _impl_.set_end_do_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitProgressReq, _impl_.set_ao_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitProgressReq, _impl_.set_end_ao_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTrajReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTrajReq, _impl_.traj_condition_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTrajReq, _impl_.set_do_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTrajReq, _impl_.set_end_do_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTrajReq, _impl_.set_ao_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTrajReq, _impl_.set_end_ao_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitRadiusReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitRadiusReq, _impl_.radius_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitRadiusReq, _impl_.set_do_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitRadiusReq, _impl_.set_end_do_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitRadiusReq, _impl_.set_ao_list_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitRadiusReq, _impl_.set_end_ao_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Program, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Program, _impl_.prog_name_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Program, _impl_.prog_idx_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TuningProgram, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TuningProgram, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TuningProgram, _impl_.program_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TuningProgram, _impl_.tuning_space_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TuningProgram, _impl_.precision_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TuningProgram, _impl_.vel_level_max_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramInfo, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramInfo, _impl_.size_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramInfo, _impl_.timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Variable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Variable, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Variable, _impl_.addr_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Variable, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Variable, _impl_.in_watching_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IntVariable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IntVariable, _impl_.addr_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IntVariable, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVariable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVariable, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVariable, _impl_.addr_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVariable, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVariable, _impl_.signal_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BoolVariable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BoolVariable, _impl_.addr_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BoolVariable, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FloatVariable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FloatVariable, _impl_.addr_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FloatVariable, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JPosVariable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JPosVariable, _impl_.addr_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JPosVariable, _impl_.jpos_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TPosVariable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TPosVariable, _impl_.addr_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TPosVariable, _impl_.tpos_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusServer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusServer, _impl_.server_name_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusServer, _impl_.ip_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusServer, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusServer, _impl_.variable_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVariableList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVariableList, _impl_.modbus_variables_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AllVars, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AllVars, _impl_.variables_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IntVars, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IntVars, _impl_.variables_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVars, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVars, _impl_.variables_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BoolVars, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BoolVars, _impl_.variables_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FloatVars, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FloatVars, _impl_.variables_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JPosVars, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JPosVars, _impl_.variables_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TPosVars, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TPosVars, _impl_.variables_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::InverseKinematicsReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::InverseKinematicsReq, _impl_.tpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::InverseKinematicsReq, _impl_.init_jpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::InverseKinematicsRes, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::InverseKinematicsRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::InverseKinematicsRes, _impl_.jpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::InverseKinematicsRes, _impl_.response_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForwardKinematicsReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForwardKinematicsReq, _impl_.jpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForwardKinematicsRes, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForwardKinematicsRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForwardKinematicsRes, _impl_.tpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForwardKinematicsRes, _impl_.response_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidReq, _impl_.tpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidReq, _impl_.init_jpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidReq, _impl_.pre_tpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidReq, _impl_.post_tpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidRes, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidRes, _impl_.is_valid_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidRes, _impl_.tar_pos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidRes, _impl_.approach_pos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidRes, _impl_.retract_pos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidRes, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, _impl_.tpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, _impl_.jpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, _impl_.pre_tpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, _impl_.post_tpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, _impl_.pallet_pattern_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, _impl_.height_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::PalletPoint, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::PalletPoint, _impl_.tar_pos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::PalletPoint, _impl_.approach_pos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::PalletPoint, _impl_.retract_pos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::PalletPoint, _impl_.tar_jpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListRes, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListRes, _impl_.pallet_points_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListRes, _impl_.response_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseReq, _impl_.start_pos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseReq, _impl_.end_pos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseReq, _impl_.base_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseRes, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseRes, _impl_.relative_pos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseRes, _impl_.response_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelReq, _impl_.current_pos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelReq, _impl_.relative_pos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelReq, _impl_.base_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelRes, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelRes, _impl_.calculated_pos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelRes, _impl_.response_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpDevice, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpDevice, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpDevice, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpDevice, _impl_.ip_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpDevice, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpDevice, _impl_.connected_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpState, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpState, _impl_.method_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleP, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleP, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleP, _impl_.tpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleP, _impl_.response_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpFileList, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpFileList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpFileList, _impl_.files_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpFileList, _impl_.response_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleFileReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleFileReq, _impl_.name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TelePlayRate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TelePlayRate, _impl_.rate_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleJReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleJReq, _impl_.jpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleJReq, _impl_.vel_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleJReq, _impl_.acc_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleJReq, _impl_.method_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleLReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleLReq, _impl_.tpos_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleLReq, _impl_.vel_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleLReq, _impl_.acc_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleLReq, _impl_.method_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, _impl_.target_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, _impl_.blending_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, _impl_.vel_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, _impl_.acc_ratio_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, _impl_.vel_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, _impl_.des_force_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, _impl_.enabled_force_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, _impl_.post_condition_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, _impl_.teaching_mode_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    2,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveFLRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveFLRes, _impl_.msg_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, _impl_.ft_fx_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, _impl_.ft_fy_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, _impl_.ft_fz_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, _impl_.ft_tx_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, _impl_.ft_ty_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, _impl_.ft_tz_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::Nrmk::IndyFramework::ControlInfo)},
        {14, -1, -1, sizeof(::Nrmk::IndyFramework::SDKLicenseInfo)},
        {24, 34, -1, sizeof(::Nrmk::IndyFramework::SDKLicenseResp)},
        {36, -1, -1, sizeof(::Nrmk::IndyFramework::VariableCondition)},
        {50, -1, -1, sizeof(::Nrmk::IndyFramework::IOCondition)},
        {60, 73, -1, sizeof(::Nrmk::IndyFramework::MotionCondition)},
        {78, -1, -1, sizeof(::Nrmk::IndyFramework::BlendingType)},
        {88, -1, -1, sizeof(::Nrmk::IndyFramework::TargetJ)},
        {99, 113, -1, sizeof(::Nrmk::IndyFramework::MoveJReq)},
        {119, 133, -1, sizeof(::Nrmk::IndyFramework::MoveJCondReq)},
        {139, 151, -1, sizeof(::Nrmk::IndyFramework::MoveJTReq)},
        {155, -1, -1, sizeof(::Nrmk::IndyFramework::TargetP)},
        {166, -1, -1, sizeof(::Nrmk::IndyFramework::TargetC)},
        {178, 194, -1, sizeof(::Nrmk::IndyFramework::MoveLReq)},
        {202, 214, -1, sizeof(::Nrmk::IndyFramework::MoveLTReq)},
        {218, -1, -1, sizeof(::Nrmk::IndyFramework::MoveAxisReq)},
        {232, 251, -1, sizeof(::Nrmk::IndyFramework::MoveCReq)},
        {262, 277, -1, sizeof(::Nrmk::IndyFramework::MoveCTReq)},
        {284, -1, -1, sizeof(::Nrmk::IndyFramework::MoveJointTrajReq)},
        {295, -1, -1, sizeof(::Nrmk::IndyFramework::MoveTaskTrajReq)},
        {306, -1, -1, sizeof(::Nrmk::IndyFramework::MoveGcodeReq)},
        {319, 331, -1, sizeof(::Nrmk::IndyFramework::MoveConveyorReq)},
        {335, -1, -1, sizeof(::Nrmk::IndyFramework::WaitIOReq)},
        {352, -1, -1, sizeof(::Nrmk::IndyFramework::WaitTimeReq)},
        {365, -1, -1, sizeof(::Nrmk::IndyFramework::WaitProgressReq)},
        {378, -1, -1, sizeof(::Nrmk::IndyFramework::WaitTrajReq)},
        {391, -1, -1, sizeof(::Nrmk::IndyFramework::WaitRadiusReq)},
        {404, -1, -1, sizeof(::Nrmk::IndyFramework::Program)},
        {414, 426, -1, sizeof(::Nrmk::IndyFramework::TuningProgram)},
        {430, -1, -1, sizeof(::Nrmk::IndyFramework::ProgramInfo)},
        {441, -1, -1, sizeof(::Nrmk::IndyFramework::Variable)},
        {453, -1, -1, sizeof(::Nrmk::IndyFramework::IntVariable)},
        {463, -1, -1, sizeof(::Nrmk::IndyFramework::ModbusVariable)},
        {475, -1, -1, sizeof(::Nrmk::IndyFramework::BoolVariable)},
        {485, -1, -1, sizeof(::Nrmk::IndyFramework::FloatVariable)},
        {495, -1, -1, sizeof(::Nrmk::IndyFramework::JPosVariable)},
        {505, -1, -1, sizeof(::Nrmk::IndyFramework::TPosVariable)},
        {515, -1, -1, sizeof(::Nrmk::IndyFramework::ModbusServer)},
        {527, -1, -1, sizeof(::Nrmk::IndyFramework::ModbusVariableList)},
        {536, -1, -1, sizeof(::Nrmk::IndyFramework::AllVars)},
        {545, -1, -1, sizeof(::Nrmk::IndyFramework::IntVars)},
        {554, -1, -1, sizeof(::Nrmk::IndyFramework::ModbusVars)},
        {563, -1, -1, sizeof(::Nrmk::IndyFramework::BoolVars)},
        {572, -1, -1, sizeof(::Nrmk::IndyFramework::FloatVars)},
        {581, -1, -1, sizeof(::Nrmk::IndyFramework::JPosVars)},
        {590, -1, -1, sizeof(::Nrmk::IndyFramework::TPosVars)},
        {599, -1, -1, sizeof(::Nrmk::IndyFramework::InverseKinematicsReq)},
        {609, 619, -1, sizeof(::Nrmk::IndyFramework::InverseKinematicsRes)},
        {621, -1, -1, sizeof(::Nrmk::IndyFramework::ForwardKinematicsReq)},
        {630, 640, -1, sizeof(::Nrmk::IndyFramework::ForwardKinematicsRes)},
        {642, -1, -1, sizeof(::Nrmk::IndyFramework::CheckAproachRetractValidReq)},
        {654, 667, -1, sizeof(::Nrmk::IndyFramework::CheckAproachRetractValidRes)},
        {672, -1, -1, sizeof(::Nrmk::IndyFramework::GetPalletPointListReq)},
        {687, -1, -1, sizeof(::Nrmk::IndyFramework::PalletPoint)},
        {699, 709, -1, sizeof(::Nrmk::IndyFramework::GetPalletPointListRes)},
        {711, -1, -1, sizeof(::Nrmk::IndyFramework::CalculateRelativePoseReq)},
        {722, 732, -1, sizeof(::Nrmk::IndyFramework::CalculateRelativePoseRes)},
        {734, -1, -1, sizeof(::Nrmk::IndyFramework::CalculateCurrentPoseRelReq)},
        {745, 755, -1, sizeof(::Nrmk::IndyFramework::CalculateCurrentPoseRelRes)},
        {757, -1, -1, sizeof(::Nrmk::IndyFramework::TeleOpDevice)},
        {770, -1, -1, sizeof(::Nrmk::IndyFramework::TeleOpState)},
        {780, 790, -1, sizeof(::Nrmk::IndyFramework::TeleP)},
        {792, 802, -1, sizeof(::Nrmk::IndyFramework::TeleOpFileList)},
        {804, -1, -1, sizeof(::Nrmk::IndyFramework::TeleFileReq)},
        {813, -1, -1, sizeof(::Nrmk::IndyFramework::TelePlayRate)},
        {822, -1, -1, sizeof(::Nrmk::IndyFramework::MoveTeleJReq)},
        {834, -1, -1, sizeof(::Nrmk::IndyFramework::MoveTeleLReq)},
        {846, 863, -1, sizeof(::Nrmk::IndyFramework::MoveLFReq)},
        {872, -1, -1, sizeof(::Nrmk::IndyFramework::MoveFLRes)},
        {881, 896, -1, sizeof(::Nrmk::IndyFramework::TransformedFTSensorData)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::Nrmk::IndyFramework::_ControlInfo_default_instance_._instance,
    &::Nrmk::IndyFramework::_SDKLicenseInfo_default_instance_._instance,
    &::Nrmk::IndyFramework::_SDKLicenseResp_default_instance_._instance,
    &::Nrmk::IndyFramework::_VariableCondition_default_instance_._instance,
    &::Nrmk::IndyFramework::_IOCondition_default_instance_._instance,
    &::Nrmk::IndyFramework::_MotionCondition_default_instance_._instance,
    &::Nrmk::IndyFramework::_BlendingType_default_instance_._instance,
    &::Nrmk::IndyFramework::_TargetJ_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveJReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveJCondReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveJTReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_TargetP_default_instance_._instance,
    &::Nrmk::IndyFramework::_TargetC_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveLReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveLTReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveAxisReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveCReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveCTReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveJointTrajReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveTaskTrajReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveGcodeReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveConveyorReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_WaitIOReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_WaitTimeReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_WaitProgressReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_WaitTrajReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_WaitRadiusReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_Program_default_instance_._instance,
    &::Nrmk::IndyFramework::_TuningProgram_default_instance_._instance,
    &::Nrmk::IndyFramework::_ProgramInfo_default_instance_._instance,
    &::Nrmk::IndyFramework::_Variable_default_instance_._instance,
    &::Nrmk::IndyFramework::_IntVariable_default_instance_._instance,
    &::Nrmk::IndyFramework::_ModbusVariable_default_instance_._instance,
    &::Nrmk::IndyFramework::_BoolVariable_default_instance_._instance,
    &::Nrmk::IndyFramework::_FloatVariable_default_instance_._instance,
    &::Nrmk::IndyFramework::_JPosVariable_default_instance_._instance,
    &::Nrmk::IndyFramework::_TPosVariable_default_instance_._instance,
    &::Nrmk::IndyFramework::_ModbusServer_default_instance_._instance,
    &::Nrmk::IndyFramework::_ModbusVariableList_default_instance_._instance,
    &::Nrmk::IndyFramework::_AllVars_default_instance_._instance,
    &::Nrmk::IndyFramework::_IntVars_default_instance_._instance,
    &::Nrmk::IndyFramework::_ModbusVars_default_instance_._instance,
    &::Nrmk::IndyFramework::_BoolVars_default_instance_._instance,
    &::Nrmk::IndyFramework::_FloatVars_default_instance_._instance,
    &::Nrmk::IndyFramework::_JPosVars_default_instance_._instance,
    &::Nrmk::IndyFramework::_TPosVars_default_instance_._instance,
    &::Nrmk::IndyFramework::_InverseKinematicsReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_InverseKinematicsRes_default_instance_._instance,
    &::Nrmk::IndyFramework::_ForwardKinematicsReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_ForwardKinematicsRes_default_instance_._instance,
    &::Nrmk::IndyFramework::_CheckAproachRetractValidReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_CheckAproachRetractValidRes_default_instance_._instance,
    &::Nrmk::IndyFramework::_GetPalletPointListReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_PalletPoint_default_instance_._instance,
    &::Nrmk::IndyFramework::_GetPalletPointListRes_default_instance_._instance,
    &::Nrmk::IndyFramework::_CalculateRelativePoseReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_CalculateRelativePoseRes_default_instance_._instance,
    &::Nrmk::IndyFramework::_CalculateCurrentPoseRelReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_CalculateCurrentPoseRelRes_default_instance_._instance,
    &::Nrmk::IndyFramework::_TeleOpDevice_default_instance_._instance,
    &::Nrmk::IndyFramework::_TeleOpState_default_instance_._instance,
    &::Nrmk::IndyFramework::_TeleP_default_instance_._instance,
    &::Nrmk::IndyFramework::_TeleOpFileList_default_instance_._instance,
    &::Nrmk::IndyFramework::_TeleFileReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_TelePlayRate_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveTeleJReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveTeleLReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveLFReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_MoveFLRes_default_instance_._instance,
    &::Nrmk::IndyFramework::_TransformedFTSensorData_default_instance_._instance,
};
const char descriptor_table_protodef_control_5fmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022control_msgs.proto\022\022Nrmk.IndyFramework"
    "\032\021device_msgs.proto\032\021common_msgs.proto\"k"
    "\n\013ControlInfo\022\027\n\017control_version\030\001 \001(\t\022\023"
    "\n\013robot_model\030\002 \001(\t\022.\n\010response\030d \001(\0132\034."
    "Nrmk.IndyFramework.Response\":\n\016SDKLicens"
    "eInfo\022\023\n\013license_key\030\001 \001(\t\022\023\n\013expire_dat"
    "e\030\002 \001(\t\"S\n\016SDKLicenseResp\022\021\n\tactivated\030\001"
    " \001(\010\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFramew"
    "ork.Response\"\301\002\n\021VariableCondition\022/\n\006i_"
    "vars\030\001 \003(\0132\037.Nrmk.IndyFramework.IntVaria"
    "ble\0221\n\006f_vars\030\002 \003(\0132!.Nrmk.IndyFramework"
    ".FloatVariable\0220\n\006b_vars\030\003 \003(\0132 .Nrmk.In"
    "dyFramework.BoolVariable\0222\n\006m_vars\030\004 \003(\013"
    "2\".Nrmk.IndyFramework.ModbusVariable\0220\n\006"
    "j_vars\030\005 \003(\0132 .Nrmk.IndyFramework.JPosVa"
    "riable\0220\n\006t_vars\030\006 \003(\0132 .Nrmk.IndyFramew"
    "ork.TPosVariable\"o\n\013IOCondition\022-\n\002di\030\001 "
    "\003(\0132!.Nrmk.IndyFramework.DigitalSignal\0221"
    "\n\006end_di\030\002 \003(\0132!.Nrmk.IndyFramework.Digi"
    "talSignal\"\226\003\n\017MotionCondition\022D\n\ttype_co"
    "nd\030\001 \001(\01621.Nrmk.IndyFramework.MotionCond"
    "ition.ConditionType\022D\n\ntype_react\030\002 \001(\0162"
    "0.Nrmk.IndyFramework.MotionCondition.Rea"
    "ctionType\022\022\n\nconst_cond\030\003 \001(\010\0220\n\007io_cond"
    "\030\004 \001(\0132\037.Nrmk.IndyFramework.IOCondition\022"
    "7\n\010var_cond\030\005 \001(\0132%.Nrmk.IndyFramework.V"
    "ariableCondition\":\n\rConditionType\022\016\n\nCON"
    "ST_COND\020\000\022\013\n\007IO_COND\020\001\022\014\n\010VAR_COND\020\002\"<\n\014"
    "ReactionType\022\r\n\tNONE_COND\020\000\022\r\n\tSTOP_COND"
    "\020\001\022\016\n\nPAUSE_COND\020\002\"\213\001\n\014BlendingType\0223\n\004t"
    "ype\030\001 \001(\0162%.Nrmk.IndyFramework.BlendingT"
    "ype.Type\022\027\n\017blending_radius\030\002 \001(\002\"-\n\004Typ"
    "e\022\010\n\004NONE\020\000\022\014\n\010OVERRIDE\020\001\022\r\n\tDUPLICATE\020\002"
    "\"b\n\007TargetJ\022\017\n\007j_start\030\001 \003(\002\022\020\n\010j_target"
    "\030\002 \003(\002\0224\n\tbase_type\030\003 \001(\0162!.Nrmk.IndyFra"
    "mework.JointBaseType\"\345\001\n\010MoveJReq\022+\n\006tar"
    "get\030\001 \001(\0132\033.Nrmk.IndyFramework.TargetJ\0222"
    "\n\010blending\030\002 \001(\0132 .Nrmk.IndyFramework.Bl"
    "endingType\022\021\n\tvel_ratio\030\003 \001(\002\022\021\n\tacc_rat"
    "io\030\004 \001(\002\022;\n\016post_condition\030\024 \001(\0132#.Nrmk."
    "IndyFramework.MotionCondition\022\025\n\rteachin"
    "g_mode\030\036 \001(\010\"\351\001\n\014MoveJCondReq\022+\n\006target\030"
    "\001 \001(\0132\033.Nrmk.IndyFramework.TargetJ\0222\n\010bl"
    "ending\030\002 \001(\0132 .Nrmk.IndyFramework.Blendi"
    "ngType\022\021\n\tvel_ratio\030\003 \001(\002\022\021\n\tacc_ratio\030\004"
    " \001(\002\022;\n\016post_condition\030\024 \001(\0132#.Nrmk.Indy"
    "Framework.MotionCondition\022\025\n\rteaching_mo"
    "de\030\036 \001(\010\"\267\001\n\tMoveJTReq\022+\n\006target\030\001 \001(\0132\033"
    ".Nrmk.IndyFramework.TargetJ\0222\n\010blending\030"
    "\002 \001(\0132 .Nrmk.IndyFramework.BlendingType\022"
    "\014\n\004time\030\003 \001(\002\022;\n\016post_condition\030\024 \001(\0132#."
    "Nrmk.IndyFramework.MotionCondition\"a\n\007Ta"
    "rgetP\022\017\n\007t_start\030\001 \003(\002\022\020\n\010t_target\030\002 \003(\002"
    "\0223\n\tbase_type\030\003 \001(\0162 .Nrmk.IndyFramework"
    ".TaskBaseType\"o\n\007TargetC\022\017\n\007t_start\030\001 \003("
    "\002\022\016\n\006t_pos0\030\002 \003(\002\022\016\n\006t_pos1\030\003 \003(\002\0223\n\tbas"
    "e_type\030\004 \001(\0162 .Nrmk.IndyFramework.TaskBa"
    "seType\"\266\002\n\010MoveLReq\022+\n\006target\030\001 \001(\0132\033.Nr"
    "mk.IndyFramework.TargetP\0222\n\010blending\030\002 \001"
    "(\0132 .Nrmk.IndyFramework.BlendingType\022\021\n\t"
    "vel_ratio\030\003 \001(\002\022\021\n\tacc_ratio\030\004 \001(\002\0226\n\010ve"
    "l_type\030\005 \001(\0162$.Nrmk.IndyFramework.Veloci"
    "tyModeType\022;\n\016post_condition\030\024 \001(\0132#.Nrm"
    "k.IndyFramework.MotionCondition\022\025\n\rteach"
    "ing_mode\030\036 \001(\010\022\027\n\017bypass_singular\030( \001(\010\""
    "\267\001\n\tMoveLTReq\022+\n\006target\030\001 \001(\0132\033.Nrmk.Ind"
    "yFramework.TargetP\0222\n\010blending\030\002 \001(\0132 .N"
    "rmk.IndyFramework.BlendingType\022\014\n\004time\030\003"
    " \001(\002\022;\n\016post_condition\030\024 \001(\0132#.Nrmk.Indy"
    "Framework.MotionCondition\"\216\001\n\013MoveAxisRe"
    "q\022\020\n\010start_mm\030\001 \003(\002\022\021\n\ttarget_mm\030\002 \003(\002\022\026"
    "\n\016vel_percentage\030\003 \001(\002\022\026\n\016acc_percentage"
    "\030\004 \001(\002\022\023\n\013is_absolute\030\005 \001(\010\022\025\n\rteaching_"
    "mode\030\n \001(\010\"\277\003\n\010MoveCReq\022+\n\006target\030\001 \001(\0132"
    "\033.Nrmk.IndyFramework.TargetC\0222\n\010blending"
    "\030\002 \001(\0132 .Nrmk.IndyFramework.BlendingType"
    "\022\r\n\005angle\030\003 \001(\002\022=\n\014setting_type\030\n \001(\0162\'."
    "Nrmk.IndyFramework.CircularSettingType\0229"
    "\n\tmove_type\030\013 \001(\0162&.Nrmk.IndyFramework.C"
    "ircularMovingType\022\021\n\tvel_ratio\030\024 \001(\002\022\021\n\t"
    "acc_ratio\030\025 \001(\002\0226\n\010vel_type\030\026 \001(\0162$.Nrmk"
    ".IndyFramework.VelocityModeType\022;\n\016post_"
    "condition\030\031 \001(\0132#.Nrmk.IndyFramework.Mot"
    "ionCondition\022\025\n\rteaching_mode\030\036 \001(\010\022\027\n\017b"
    "ypass_singular\030( \001(\010\"\300\002\n\tMoveCTReq\022+\n\006ta"
    "rget\030\001 \001(\0132\033.Nrmk.IndyFramework.TargetC\022"
    "2\n\010blending\030\002 \001(\0132 .Nrmk.IndyFramework.B"
    "lendingType\022\r\n\005angle\030\003 \001(\002\022=\n\014setting_ty"
    "pe\030\n \001(\0162\'.Nrmk.IndyFramework.CircularSe"
    "ttingType\0229\n\tmove_type\030\013 \001(\0162&.Nrmk.Indy"
    "Framework.CircularMovingType\022\014\n\004time\030\024 \001"
    "(\002\022;\n\016post_condition\030\031 \001(\0132#.Nrmk.IndyFr"
    "amework.MotionCondition\"\235\001\n\020MoveJointTra"
    "jReq\022*\n\006q_list\030\001 \003(\0132\032.Nrmk.IndyFramewor"
    "k.Vector\022-\n\tqdot_list\030\002 \003(\0132\032.Nrmk.IndyF"
    "ramework.Vector\022.\n\nqddot_list\030\003 \003(\0132\032.Nr"
    "mk.IndyFramework.Vector\"\234\001\n\017MoveTaskTraj"
    "Req\022*\n\006p_list\030\001 \003(\0132\032.Nrmk.IndyFramework"
    ".Vector\022-\n\tpdot_list\030\002 \003(\0132\032.Nrmk.IndyFr"
    "amework.Vector\022.\n\npddot_list\030\003 \003(\0132\032.Nrm"
    "k.IndyFramework.Vector\"w\n\014MoveGcodeReq\022\022"
    "\n\ngcode_file\030\001 \001(\t\022\026\n\016is_smooth_mode\030\002 \001"
    "(\010\022\025\n\rsmooth_radius\030\003 \001(\002\022\021\n\tvel_ratio\030\004"
    " \001(\002\022\021\n\tacc_ratio\030\005 \001(\002\"\221\001\n\017MoveConveyor"
    "Req\022\025\n\rteaching_mode\030\001 \001(\010\022\027\n\017bypass_sin"
    "gular\030\002 \001(\010\022\021\n\tacc_ratio\030\003 \001(\002\022;\n\016post_c"
    "ondition\030\n \001(\0132#.Nrmk.IndyFramework.Moti"
    "onCondition\"\336\003\n\tWaitIOReq\0222\n\007di_list\030\001 \003"
    "(\0132!.Nrmk.IndyFramework.DigitalSignal\0222\n"
    "\007do_list\030\002 \003(\0132!.Nrmk.IndyFramework.Digi"
    "talSignal\0226\n\013end_di_list\030\003 \003(\0132!.Nrmk.In"
    "dyFramework.DigitalSignal\0226\n\013end_do_list"
    "\030\004 \003(\0132!.Nrmk.IndyFramework.DigitalSigna"
    "l\022\023\n\013conjunction\030\005 \001(\005\0226\n\013set_do_list\030\006 "
    "\003(\0132!.Nrmk.IndyFramework.DigitalSignal\022:"
    "\n\017set_end_do_list\030\007 \003(\0132!.Nrmk.IndyFrame"
    "work.DigitalSignal\0225\n\013set_ao_list\030\010 \003(\0132"
    " .Nrmk.IndyFramework.AnalogSignal\0229\n\017set"
    "_end_ao_list\030\t \003(\0132 .Nrmk.IndyFramework."
    "AnalogSignal\"\201\002\n\013WaitTimeReq\022\014\n\004time\030\001 \001"
    "(\002\0226\n\013set_do_list\030\002 \003(\0132!.Nrmk.IndyFrame"
    "work.DigitalSignal\022:\n\017set_end_do_list\030\003 "
    "\003(\0132!.Nrmk.IndyFramework.DigitalSignal\0225"
    "\n\013set_ao_list\030\004 \003(\0132 .Nrmk.IndyFramework"
    ".AnalogSignal\0229\n\017set_end_ao_list\030\005 \003(\0132 "
    ".Nrmk.IndyFramework.AnalogSignal\"\211\002\n\017Wai"
    "tProgressReq\022\020\n\010progress\030\001 \001(\005\0226\n\013set_do"
    "_list\030\002 \003(\0132!.Nrmk.IndyFramework.Digital"
    "Signal\022:\n\017set_end_do_list\030\003 \003(\0132!.Nrmk.I"
    "ndyFramework.DigitalSignal\0225\n\013set_ao_lis"
    "t\030\004 \003(\0132 .Nrmk.IndyFramework.AnalogSigna"
    "l\0229\n\017set_end_ao_list\030\005 \003(\0132 .Nrmk.IndyFr"
    "amework.AnalogSignal\"\256\002\n\013WaitTrajReq\0229\n\016"
    "traj_condition\030\001 \001(\0162!.Nrmk.IndyFramewor"
    "k.TrajCondition\0226\n\013set_do_list\030\002 \003(\0132!.N"
    "rmk.IndyFramework.DigitalSignal\022:\n\017set_e"
    "nd_do_list\030\003 \003(\0132!.Nrmk.IndyFramework.Di"
    "gitalSignal\0225\n\013set_ao_list\030\004 \003(\0132 .Nrmk."
    "IndyFramework.AnalogSignal\0229\n\017set_end_ao"
    "_list\030\005 \003(\0132 .Nrmk.IndyFramework.AnalogS"
    "ignal\"\205\002\n\rWaitRadiusReq\022\016\n\006radius\030\001 \001(\005\022"
    "6\n\013set_do_list\030\002 \003(\0132!.Nrmk.IndyFramewor"
    "k.DigitalSignal\022:\n\017set_end_do_list\030\003 \003(\013"
    "2!.Nrmk.IndyFramework.DigitalSignal\0225\n\013s"
    "et_ao_list\030\004 \003(\0132 .Nrmk.IndyFramework.An"
    "alogSignal\0229\n\017set_end_ao_list\030\005 \003(\0132 .Nr"
    "mk.IndyFramework.AnalogSignal\".\n\007Program"
    "\022\021\n\tprog_name\030\001 \001(\t\022\020\n\010prog_idx\030\002 \001(\005\"\303\001"
    "\n\rTuningProgram\022,\n\007program\030\001 \001(\0132\033.Nrmk."
    "IndyFramework.Program\0225\n\014tuning_space\030\002 "
    "\001(\0162\037.Nrmk.IndyFramework.TuningSpace\0226\n\t"
    "precision\030\003 \001(\0162#.Nrmk.IndyFramework.Tun"
    "ingPrecision\022\025\n\rvel_level_max\030\004 \001(\r\"<\n\013P"
    "rogramInfo\022\014\n\004path\030\001 \001(\t\022\014\n\004size\030\002 \001(\004\022\021"
    "\n\ttimestamp\030\003 \001(\t\"I\n\010Variable\022\014\n\004name\030\001 "
    "\001(\t\022\014\n\004addr\030\002 \001(\005\022\014\n\004type\030\003 \001(\t\022\023\n\013in_wa"
    "tching\030\004 \001(\010\"*\n\013IntVariable\022\014\n\004addr\030\001 \001("
    "\005\022\r\n\005value\030\002 \001(\003\"\317\001\n\016ModbusVariable\022\014\n\004n"
    "ame\030\001 \001(\t\022\014\n\004addr\030\002 \001(\005\022\r\n\005value\030\003 \001(\005\022B"
    "\n\013signal_type\030\004 \001(\0162-.Nrmk.IndyFramework"
    ".ModbusVariable.SignalType\"N\n\nSignalType"
    "\022\014\n\010ReadCoil\020\000\022\r\n\tWriteCoil\020\001\022\020\n\014ReadReg"
    "ister\020\002\022\021\n\rWriteRegister\020\003\"+\n\014BoolVariab"
    "le\022\014\n\004addr\030\001 \001(\005\022\r\n\005value\030\002 \001(\010\",\n\rFloat"
    "Variable\022\014\n\004addr\030\001 \001(\005\022\r\n\005value\030\002 \001(\002\"*\n"
    "\014JPosVariable\022\014\n\004addr\030\001 \001(\005\022\014\n\004jpos\030\002 \003("
    "\002\"*\n\014TPosVariable\022\014\n\004addr\030\001 \001(\005\022\014\n\004tpos\030"
    "\002 \003(\002\"x\n\014ModbusServer\022\023\n\013server_name\030\001 \001"
    "(\t\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\0229\n\rvariable"
    "_list\030\004 \003(\0132\".Nrmk.IndyFramework.ModbusV"
    "ariable\"P\n\022ModbusVariableList\022:\n\020modbus_"
    "variables\030\001 \003(\0132 .Nrmk.IndyFramework.Mod"
    "busServer\":\n\007AllVars\022/\n\tvariables\030\001 \003(\0132"
    "\034.Nrmk.IndyFramework.Variable\"=\n\007IntVars"
    "\0222\n\tvariables\030\001 \003(\0132\037.Nrmk.IndyFramework"
    ".IntVariable\"C\n\nModbusVars\0225\n\tvariables\030"
    "\001 \003(\0132\".Nrmk.IndyFramework.ModbusVariabl"
    "e\"\?\n\010BoolVars\0223\n\tvariables\030\001 \003(\0132 .Nrmk."
    "IndyFramework.BoolVariable\"A\n\tFloatVars\022"
    "4\n\tvariables\030\001 \003(\0132!.Nrmk.IndyFramework."
    "FloatVariable\"\?\n\010JPosVars\0223\n\tvariables\030\001"
    " \003(\0132 .Nrmk.IndyFramework.JPosVariable\"\?"
    "\n\010TPosVars\0223\n\tvariables\030\001 \003(\0132 .Nrmk.Ind"
    "yFramework.TPosVariable\"7\n\024InverseKinema"
    "ticsReq\022\014\n\004tpos\030\001 \003(\002\022\021\n\tinit_jpos\030\002 \003(\002"
    "\"T\n\024InverseKinematicsRes\022\014\n\004jpos\030\001 \003(\002\022."
    "\n\010response\030d \001(\0132\034.Nrmk.IndyFramework.Re"
    "sponse\"$\n\024ForwardKinematicsReq\022\014\n\004jpos\030\001"
    " \003(\002\"T\n\024ForwardKinematicsRes\022\014\n\004tpos\030\001 \003"
    "(\002\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFramewor"
    "k.Response\"c\n\033CheckAproachRetractValidRe"
    "q\022\014\n\004tpos\030\001 \003(\002\022\021\n\tinit_jpos\030\002 \003(\002\022\020\n\010pr"
    "e_tpos\030\003 \003(\002\022\021\n\tpost_tpos\030\004 \003(\002\"\233\001\n\033Chec"
    "kAproachRetractValidRes\022\020\n\010is_valid\030\001 \001("
    "\010\022\017\n\007tar_pos\030\002 \003(\002\022\024\n\014approach_pos\030\003 \003(\002"
    "\022\023\n\013retract_pos\030\004 \003(\002\022.\n\010response\030d \001(\0132"
    "\034.Nrmk.IndyFramework.Response\"\217\001\n\025GetPal"
    "letPointListReq\022\014\n\004tpos\030\001 \003(\002\022\014\n\004jpos\030\002 "
    "\003(\002\022\020\n\010pre_tpos\030\003 \003(\002\022\021\n\tpost_tpos\030\004 \003(\002"
    "\022\026\n\016pallet_pattern\030\005 \001(\005\022\r\n\005width\030\006 \001(\005\022"
    "\016\n\006height\030\007 \001(\005\"[\n\013PalletPoint\022\017\n\007tar_po"
    "s\030\001 \003(\002\022\024\n\014approach_pos\030\002 \003(\002\022\023\n\013retract"
    "_pos\030\003 \003(\002\022\020\n\010tar_jpos\030\004 \003(\002\"\177\n\025GetPalle"
    "tPointListRes\0226\n\rpallet_points\030\001 \003(\0132\037.N"
    "rmk.IndyFramework.PalletPoint\022.\n\010respons"
    "e\030d \001(\0132\034.Nrmk.IndyFramework.Response\"s\n"
    "\030CalculateRelativePoseReq\022\021\n\tstart_pos\030\001"
    " \003(\002\022\017\n\007end_pos\030\002 \003(\002\0223\n\tbase_type\030\003 \001(\016"
    "2 .Nrmk.IndyFramework.TaskBaseType\"`\n\030Ca"
    "lculateRelativePoseRes\022\024\n\014relative_pos\030\001"
    " \003(\002\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFramew"
    "ork.Response\"|\n\032CalculateCurrentPoseRelR"
    "eq\022\023\n\013current_pos\030\001 \003(\002\022\024\n\014relative_pos\030"
    "\002 \003(\002\0223\n\tbase_type\030\003 \001(\0162 .Nrmk.IndyFram"
    "ework.TaskBaseType\"d\n\032CalculateCurrentPo"
    "seRelRes\022\026\n\016calculated_pos\030\001 \003(\002\022.\n\010resp"
    "onse\030d \001(\0132\034.Nrmk.IndyFramework.Response"
    "\"\262\001\n\014TeleOpDevice\022\014\n\004name\030\001 \001(\t\022\?\n\004type\030"
    "\002 \001(\01621.Nrmk.IndyFramework.TeleOpDevice."
    "TeleOpDeviceType\022\n\n\002ip\030\003 \001(\t\022\014\n\004port\030\004 \001"
    "(\r\022\021\n\tconnected\030\005 \001(\010\"&\n\020TeleOpDeviceTyp"
    "e\022\010\n\004NONE\020\000\022\010\n\004VIVE\020\001\"i\n\013TeleOpState\022*\n\004"
    "mode\030\001 \001(\0162\034.Nrmk.IndyFramework.TeleMode"
    "\022.\n\006method\030\002 \001(\0162\036.Nrmk.IndyFramework.Te"
    "leMethod\"E\n\005TeleP\022\014\n\004tpos\030\001 \003(\002\022.\n\010respo"
    "nse\030d \001(\0132\034.Nrmk.IndyFramework.Response\""
    "O\n\016TeleOpFileList\022\r\n\005files\030\001 \003(\t\022.\n\010resp"
    "onse\030d \001(\0132\034.Nrmk.IndyFramework.Response"
    "\"\033\n\013TeleFileReq\022\014\n\004name\030\001 \001(\t\"\034\n\014TelePla"
    "yRate\022\014\n\004rate\030\001 \001(\002\"r\n\014MoveTeleJReq\022\014\n\004j"
    "pos\030\001 \003(\002\022\021\n\tvel_ratio\030\002 \001(\002\022\021\n\tacc_rati"
    "o\030\003 \001(\002\022.\n\006method\030\n \001(\0162\036.Nrmk.IndyFrame"
    "work.TeleMethod\"r\n\014MoveTeleLReq\022\014\n\004tpos\030"
    "\001 \003(\002\022\021\n\tvel_ratio\030\002 \001(\002\022\021\n\tacc_ratio\030\003 "
    "\001(\002\022.\n\006method\030\n \001(\0162\036.Nrmk.IndyFramework"
    ".TeleMethod\"\310\002\n\tMoveLFReq\022+\n\006target\030\001 \001("
    "\0132\033.Nrmk.IndyFramework.TargetP\0222\n\010blendi"
    "ng\030\002 \001(\0132 .Nrmk.IndyFramework.BlendingTy"
    "pe\022\021\n\tvel_ratio\030\003 \001(\002\022\021\n\tacc_ratio\030\004 \001(\002"
    "\0226\n\010vel_type\030\005 \001(\0162$.Nrmk.IndyFramework."
    "VelocityModeType\022\021\n\tdes_force\030\006 \003(\002\022\025\n\re"
    "nabled_force\030\007 \003(\010\022;\n\016post_condition\030\024 \001"
    "(\0132#.Nrmk.IndyFramework.MotionCondition\022"
    "\025\n\rteaching_mode\030\036 \001(\010\"\030\n\tMoveFLRes\022\013\n\003m"
    "sg\030d \001(\t\"\243\001\n\027TransformedFTSensorData\022\r\n\005"
    "ft_Fx\030\001 \001(\002\022\r\n\005ft_Fy\030\002 \001(\002\022\r\n\005ft_Fz\030\003 \001("
    "\002\022\r\n\005ft_Tx\030\004 \001(\002\022\r\n\005ft_Ty\030\005 \001(\002\022\r\n\005ft_Tz"
    "\030\006 \001(\002\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFram"
    "ework.Response*7\n\rJointBaseType\022\022\n\016ABSOL"
    "UTE_JOINT\020\000\022\022\n\016RELATIVE_JOINT\020\001*B\n\014TaskB"
    "aseType\022\021\n\rABSOLUTE_TASK\020\000\022\021\n\rRELATIVE_T"
    "ASK\020\001\022\014\n\010TCP_TASK\020\002*J\n\020VelocityModeType\022"
    "\021\n\rTIME_ORIENTED\020\000\022\021\n\rDISP_ORIENTED\020\001\022\020\n"
    "\014ROT_ORIENTED\020\002*5\n\023CircularSettingType\022\r"
    "\n\tPOINT_SET\020\000\022\017\n\013CENTER_AXIS\020\001*:\n\022Circul"
    "arMovingType\022\014\n\010CONSTANT\020\000\022\n\n\006RADIAL\020\001\022\n"
    "\n\006SMOOTH\020\002*j\n\010TeleMode\022\021\n\rTELE_INACTIVE\020"
    "\000\022\016\n\nTELE_CALIB\020\001\022\017\n\013TELE_RECORD\020\002\022\r\n\tTE"
    "LE_PLAY\020\003\022\014\n\010TELE_RAW\020\n\022\r\n\tTELE_MOVE\020\024*\233"
    "\001\n\nTeleMethod\022\026\n\022TELE_TASK_ABSOLUTE\020\000\022\026\n"
    "\022TELE_TASK_RELATIVE\020\001\022\021\n\rTELE_TASK_TCP\020\002"
    "\022\027\n\023TELE_JOINT_ABSOLUTE\020\n\022\027\n\023TELE_JOINT_"
    "RELATIVE\020\013\022\030\n\024TELE_RECORD_ABSOLUTE\020\024b\006pr"
    "oto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_control_5fmsgs_2eproto_deps[2] =
    {
        &::descriptor_table_common_5fmsgs_2eproto,
        &::descriptor_table_device_5fmsgs_2eproto,
};
static ::absl::once_flag descriptor_table_control_5fmsgs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_control_5fmsgs_2eproto = {
    false,
    false,
    10524,
    descriptor_table_protodef_control_5fmsgs_2eproto,
    "control_msgs.proto",
    &descriptor_table_control_5fmsgs_2eproto_once,
    descriptor_table_control_5fmsgs_2eproto_deps,
    2,
    70,
    schemas,
    file_default_instances,
    TableStruct_control_5fmsgs_2eproto::offsets,
    file_level_metadata_control_5fmsgs_2eproto,
    file_level_enum_descriptors_control_5fmsgs_2eproto,
    file_level_service_descriptors_control_5fmsgs_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_control_5fmsgs_2eproto_getter() {
  return &descriptor_table_control_5fmsgs_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_control_5fmsgs_2eproto(&descriptor_table_control_5fmsgs_2eproto);
namespace Nrmk {
namespace IndyFramework {
const ::google::protobuf::EnumDescriptor* MotionCondition_ConditionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[0];
}
bool MotionCondition_ConditionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MotionCondition_ConditionType MotionCondition::CONST_COND;
constexpr MotionCondition_ConditionType MotionCondition::IO_COND;
constexpr MotionCondition_ConditionType MotionCondition::VAR_COND;
constexpr MotionCondition_ConditionType MotionCondition::ConditionType_MIN;
constexpr MotionCondition_ConditionType MotionCondition::ConditionType_MAX;
constexpr int MotionCondition::ConditionType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* MotionCondition_ReactionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[1];
}
bool MotionCondition_ReactionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MotionCondition_ReactionType MotionCondition::NONE_COND;
constexpr MotionCondition_ReactionType MotionCondition::STOP_COND;
constexpr MotionCondition_ReactionType MotionCondition::PAUSE_COND;
constexpr MotionCondition_ReactionType MotionCondition::ReactionType_MIN;
constexpr MotionCondition_ReactionType MotionCondition::ReactionType_MAX;
constexpr int MotionCondition::ReactionType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* BlendingType_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[2];
}
bool BlendingType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr BlendingType_Type BlendingType::NONE;
constexpr BlendingType_Type BlendingType::OVERRIDE;
constexpr BlendingType_Type BlendingType::DUPLICATE;
constexpr BlendingType_Type BlendingType::Type_MIN;
constexpr BlendingType_Type BlendingType::Type_MAX;
constexpr int BlendingType::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* ModbusVariable_SignalType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[3];
}
bool ModbusVariable_SignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ModbusVariable_SignalType ModbusVariable::ReadCoil;
constexpr ModbusVariable_SignalType ModbusVariable::WriteCoil;
constexpr ModbusVariable_SignalType ModbusVariable::ReadRegister;
constexpr ModbusVariable_SignalType ModbusVariable::WriteRegister;
constexpr ModbusVariable_SignalType ModbusVariable::SignalType_MIN;
constexpr ModbusVariable_SignalType ModbusVariable::SignalType_MAX;
constexpr int ModbusVariable::SignalType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TeleOpDevice_TeleOpDeviceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[4];
}
bool TeleOpDevice_TeleOpDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TeleOpDevice_TeleOpDeviceType TeleOpDevice::NONE;
constexpr TeleOpDevice_TeleOpDeviceType TeleOpDevice::VIVE;
constexpr TeleOpDevice_TeleOpDeviceType TeleOpDevice::TeleOpDeviceType_MIN;
constexpr TeleOpDevice_TeleOpDeviceType TeleOpDevice::TeleOpDeviceType_MAX;
constexpr int TeleOpDevice::TeleOpDeviceType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* JointBaseType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[5];
}
bool JointBaseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* TaskBaseType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[6];
}
bool TaskBaseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* VelocityModeType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[7];
}
bool VelocityModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* CircularSettingType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[8];
}
bool CircularSettingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* CircularMovingType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[9];
}
bool CircularMovingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* TeleMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[10];
}
bool TeleMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 20:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* TeleMethod_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[11];
}
bool TeleMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
    case 20:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class ControlInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ControlInfo, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const ControlInfo* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& ControlInfo::_Internal::response(const ControlInfo* msg) {
  return *msg->_impl_.response_;
}
void ControlInfo::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ControlInfo::ControlInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ControlInfo)
}
ControlInfo::ControlInfo(const ControlInfo& from) : ::google::protobuf::Message() {
  ControlInfo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.control_version_){},
      decltype(_impl_.robot_model_){},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.control_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.control_version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_control_version().empty()) {
    _this->_impl_.control_version_.Set(from._internal_control_version(), _this->GetArenaForAllocation());
  }
  _impl_.robot_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.robot_model_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robot_model().empty()) {
    _this->_impl_.robot_model_.Set(from._internal_robot_model(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ControlInfo)
}
inline void ControlInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.control_version_){},
      decltype(_impl_.robot_model_){},
      decltype(_impl_.response_){nullptr},
  };
  _impl_.control_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.control_version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.robot_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.robot_model_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ControlInfo::~ControlInfo() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ControlInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ControlInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.control_version_.Destroy();
  _impl_.robot_model_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void ControlInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ControlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ControlInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.control_version_.ClearToEmpty();
  _impl_.robot_model_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ControlInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 65, 7> ControlInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ControlInfo, _impl_._has_bits_),
    0, // no _extensions_
    100, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ControlInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 0, PROTOBUF_FIELD_OFFSET(ControlInfo, _impl_.response_)}},
    // string control_version = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ControlInfo, _impl_.control_version_)}},
    // string robot_model = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ControlInfo, _impl_.robot_model_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 2,
    65535, 65535
  }}, {{
    // string control_version = 1;
    {PROTOBUF_FIELD_OFFSET(ControlInfo, _impl_.control_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string robot_model = 2;
    {PROTOBUF_FIELD_OFFSET(ControlInfo, _impl_.robot_model_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(ControlInfo, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
    "\36\17\13\0\0\0\0\0"
    "Nrmk.IndyFramework.ControlInfo"
    "control_version"
    "robot_model"
  }},
};

::uint8_t* ControlInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ControlInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string control_version = 1;
  if (!this->_internal_control_version().empty()) {
    const std::string& _s = this->_internal_control_version();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.ControlInfo.control_version");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string robot_model = 2;
  if (!this->_internal_robot_model().empty()) {
    const std::string& _s = this->_internal_robot_model();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.ControlInfo.robot_model");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ControlInfo)
  return target;
}

::size_t ControlInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ControlInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string control_version = 1;
  if (!this->_internal_control_version().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_control_version());
  }

  // string robot_model = 2;
  if (!this->_internal_robot_model().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_robot_model());
  }

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ControlInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ControlInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*ControlInfo::GetClassData() const { return &_class_data_; }


void ControlInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ControlInfo*>(&to_msg);
  auto& from = static_cast<const ControlInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ControlInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_control_version().empty()) {
    _this->_internal_set_control_version(from._internal_control_version());
  }
  if (!from._internal_robot_model().empty()) {
    _this->_internal_set_robot_model(from._internal_robot_model());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ControlInfo::CopyFrom(const ControlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ControlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ControlInfo::IsInitialized() const {
  return true;
}

void ControlInfo::InternalSwap(ControlInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.control_version_, lhs_arena,
                                       &other->_impl_.control_version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.robot_model_, lhs_arena,
                                       &other->_impl_.robot_model_, rhs_arena);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata ControlInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[0]);
}
// ===================================================================

class SDKLicenseInfo::_Internal {
 public:
};

SDKLicenseInfo::SDKLicenseInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.SDKLicenseInfo)
}
SDKLicenseInfo::SDKLicenseInfo(const SDKLicenseInfo& from) : ::google::protobuf::Message() {
  SDKLicenseInfo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.license_key_){},
      decltype(_impl_.expire_date_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.license_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.license_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_license_key().empty()) {
    _this->_impl_.license_key_.Set(from._internal_license_key(), _this->GetArenaForAllocation());
  }
  _impl_.expire_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.expire_date_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_expire_date().empty()) {
    _this->_impl_.expire_date_.Set(from._internal_expire_date(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.SDKLicenseInfo)
}
inline void SDKLicenseInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.license_key_){},
      decltype(_impl_.expire_date_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.license_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.license_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.expire_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.expire_date_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
SDKLicenseInfo::~SDKLicenseInfo() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.SDKLicenseInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SDKLicenseInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.license_key_.Destroy();
  _impl_.expire_date_.Destroy();
}
void SDKLicenseInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SDKLicenseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.SDKLicenseInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.license_key_.ClearToEmpty();
  _impl_.expire_date_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SDKLicenseInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 64, 2> SDKLicenseInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SDKLicenseInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string expire_date = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SDKLicenseInfo, _impl_.expire_date_)}},
    // string license_key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SDKLicenseInfo, _impl_.license_key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string license_key = 1;
    {PROTOBUF_FIELD_OFFSET(SDKLicenseInfo, _impl_.license_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string expire_date = 2;
    {PROTOBUF_FIELD_OFFSET(SDKLicenseInfo, _impl_.expire_date_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\41\13\13\0\0\0\0\0"
    "Nrmk.IndyFramework.SDKLicenseInfo"
    "license_key"
    "expire_date"
  }},
};

::uint8_t* SDKLicenseInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.SDKLicenseInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string license_key = 1;
  if (!this->_internal_license_key().empty()) {
    const std::string& _s = this->_internal_license_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.SDKLicenseInfo.license_key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string expire_date = 2;
  if (!this->_internal_expire_date().empty()) {
    const std::string& _s = this->_internal_expire_date();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.SDKLicenseInfo.expire_date");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.SDKLicenseInfo)
  return target;
}

::size_t SDKLicenseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.SDKLicenseInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string license_key = 1;
  if (!this->_internal_license_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_license_key());
  }

  // string expire_date = 2;
  if (!this->_internal_expire_date().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_expire_date());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SDKLicenseInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SDKLicenseInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*SDKLicenseInfo::GetClassData() const { return &_class_data_; }


void SDKLicenseInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SDKLicenseInfo*>(&to_msg);
  auto& from = static_cast<const SDKLicenseInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.SDKLicenseInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_license_key().empty()) {
    _this->_internal_set_license_key(from._internal_license_key());
  }
  if (!from._internal_expire_date().empty()) {
    _this->_internal_set_expire_date(from._internal_expire_date());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SDKLicenseInfo::CopyFrom(const SDKLicenseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.SDKLicenseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SDKLicenseInfo::IsInitialized() const {
  return true;
}

void SDKLicenseInfo::InternalSwap(SDKLicenseInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.license_key_, lhs_arena,
                                       &other->_impl_.license_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.expire_date_, lhs_arena,
                                       &other->_impl_.expire_date_, rhs_arena);
}

::google::protobuf::Metadata SDKLicenseInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[1]);
}
// ===================================================================

class SDKLicenseResp::_Internal {
 public:
  using HasBits = decltype(std::declval<SDKLicenseResp>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SDKLicenseResp, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const SDKLicenseResp* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& SDKLicenseResp::_Internal::response(const SDKLicenseResp* msg) {
  return *msg->_impl_.response_;
}
void SDKLicenseResp::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SDKLicenseResp::SDKLicenseResp(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.SDKLicenseResp)
}
SDKLicenseResp::SDKLicenseResp(const SDKLicenseResp& from) : ::google::protobuf::Message() {
  SDKLicenseResp* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.activated_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  _this->_impl_.activated_ = from._impl_.activated_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.SDKLicenseResp)
}
inline void SDKLicenseResp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.activated_){false},
  };
}
SDKLicenseResp::~SDKLicenseResp() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.SDKLicenseResp)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SDKLicenseResp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}
void SDKLicenseResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SDKLicenseResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.SDKLicenseResp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_.activated_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SDKLicenseResp::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 7> SDKLicenseResp::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SDKLicenseResp, _impl_._has_bits_),
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SDKLicenseResp_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 0, PROTOBUF_FIELD_OFFSET(SDKLicenseResp, _impl_.response_)}},
    // bool activated = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SDKLicenseResp, _impl_.activated_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SDKLicenseResp, _impl_.activated_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // bool activated = 1;
    {PROTOBUF_FIELD_OFFSET(SDKLicenseResp, _impl_.activated_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(SDKLicenseResp, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* SDKLicenseResp::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.SDKLicenseResp)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool activated = 1;
  if (this->_internal_activated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_activated(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.SDKLicenseResp)
  return target;
}

::size_t SDKLicenseResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.SDKLicenseResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // bool activated = 1;
  if (this->_internal_activated() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SDKLicenseResp::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SDKLicenseResp::MergeImpl
};
const ::google::protobuf::Message::ClassData*SDKLicenseResp::GetClassData() const { return &_class_data_; }


void SDKLicenseResp::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SDKLicenseResp*>(&to_msg);
  auto& from = static_cast<const SDKLicenseResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.SDKLicenseResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_activated() != 0) {
    _this->_internal_set_activated(from._internal_activated());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SDKLicenseResp::CopyFrom(const SDKLicenseResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.SDKLicenseResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SDKLicenseResp::IsInitialized() const {
  return true;
}

void SDKLicenseResp::InternalSwap(SDKLicenseResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SDKLicenseResp, _impl_.activated_)
      + sizeof(SDKLicenseResp::_impl_.activated_)
      - PROTOBUF_FIELD_OFFSET(SDKLicenseResp, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata SDKLicenseResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[2]);
}
// ===================================================================

class VariableCondition::_Internal {
 public:
};

VariableCondition::VariableCondition(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.VariableCondition)
}
VariableCondition::VariableCondition(const VariableCondition& from) : ::google::protobuf::Message() {
  VariableCondition* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.i_vars_){from._impl_.i_vars_},
      decltype(_impl_.f_vars_){from._impl_.f_vars_},
      decltype(_impl_.b_vars_){from._impl_.b_vars_},
      decltype(_impl_.m_vars_){from._impl_.m_vars_},
      decltype(_impl_.j_vars_){from._impl_.j_vars_},
      decltype(_impl_.t_vars_){from._impl_.t_vars_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.VariableCondition)
}
inline void VariableCondition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.i_vars_){arena},
      decltype(_impl_.f_vars_){arena},
      decltype(_impl_.b_vars_){arena},
      decltype(_impl_.m_vars_){arena},
      decltype(_impl_.j_vars_){arena},
      decltype(_impl_.t_vars_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
VariableCondition::~VariableCondition() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.VariableCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VariableCondition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.i_vars_.~RepeatedPtrField();
  _impl_.f_vars_.~RepeatedPtrField();
  _impl_.b_vars_.~RepeatedPtrField();
  _impl_.m_vars_.~RepeatedPtrField();
  _impl_.j_vars_.~RepeatedPtrField();
  _impl_.t_vars_.~RepeatedPtrField();
}
void VariableCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void VariableCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.VariableCondition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_i_vars()->Clear();
  _internal_mutable_f_vars()->Clear();
  _internal_mutable_b_vars()->Clear();
  _internal_mutable_m_vars()->Clear();
  _internal_mutable_j_vars()->Clear();
  _internal_mutable_t_vars()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VariableCondition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 6, 0, 2> VariableCondition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VariableCondition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .Nrmk.IndyFramework.IntVariable i_vars = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VariableCondition, _impl_.i_vars_)}},
    // repeated .Nrmk.IndyFramework.FloatVariable f_vars = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(VariableCondition, _impl_.f_vars_)}},
    // repeated .Nrmk.IndyFramework.BoolVariable b_vars = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(VariableCondition, _impl_.b_vars_)}},
    // repeated .Nrmk.IndyFramework.ModbusVariable m_vars = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(VariableCondition, _impl_.m_vars_)}},
    // repeated .Nrmk.IndyFramework.JPosVariable j_vars = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 4, PROTOBUF_FIELD_OFFSET(VariableCondition, _impl_.j_vars_)}},
    // repeated .Nrmk.IndyFramework.TPosVariable t_vars = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 5, PROTOBUF_FIELD_OFFSET(VariableCondition, _impl_.t_vars_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.IntVariable i_vars = 1;
    {PROTOBUF_FIELD_OFFSET(VariableCondition, _impl_.i_vars_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.FloatVariable f_vars = 2;
    {PROTOBUF_FIELD_OFFSET(VariableCondition, _impl_.f_vars_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.BoolVariable b_vars = 3;
    {PROTOBUF_FIELD_OFFSET(VariableCondition, _impl_.b_vars_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.ModbusVariable m_vars = 4;
    {PROTOBUF_FIELD_OFFSET(VariableCondition, _impl_.m_vars_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.JPosVariable j_vars = 5;
    {PROTOBUF_FIELD_OFFSET(VariableCondition, _impl_.j_vars_), 0, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.TPosVariable t_vars = 6;
    {PROTOBUF_FIELD_OFFSET(VariableCondition, _impl_.t_vars_), 0, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::IntVariable>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::FloatVariable>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::BoolVariable>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::ModbusVariable>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::JPosVariable>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::TPosVariable>()},
  }}, {{
  }},
};

::uint8_t* VariableCondition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.VariableCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.IntVariable i_vars = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_i_vars_size()); i < n; i++) {
    const auto& repfield = this->_internal_i_vars().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.FloatVariable f_vars = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_f_vars_size()); i < n; i++) {
    const auto& repfield = this->_internal_f_vars().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.BoolVariable b_vars = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_b_vars_size()); i < n; i++) {
    const auto& repfield = this->_internal_b_vars().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.ModbusVariable m_vars = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_vars_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_vars().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.JPosVariable j_vars = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_j_vars_size()); i < n; i++) {
    const auto& repfield = this->_internal_j_vars().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.TPosVariable t_vars = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_t_vars_size()); i < n; i++) {
    const auto& repfield = this->_internal_t_vars().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.VariableCondition)
  return target;
}

::size_t VariableCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.VariableCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.IntVariable i_vars = 1;
  total_size += 1UL * this->_internal_i_vars_size();
  for (const auto& msg : this->_internal_i_vars()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.FloatVariable f_vars = 2;
  total_size += 1UL * this->_internal_f_vars_size();
  for (const auto& msg : this->_internal_f_vars()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.BoolVariable b_vars = 3;
  total_size += 1UL * this->_internal_b_vars_size();
  for (const auto& msg : this->_internal_b_vars()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.ModbusVariable m_vars = 4;
  total_size += 1UL * this->_internal_m_vars_size();
  for (const auto& msg : this->_internal_m_vars()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.JPosVariable j_vars = 5;
  total_size += 1UL * this->_internal_j_vars_size();
  for (const auto& msg : this->_internal_j_vars()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.TPosVariable t_vars = 6;
  total_size += 1UL * this->_internal_t_vars_size();
  for (const auto& msg : this->_internal_t_vars()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VariableCondition::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    VariableCondition::MergeImpl
};
const ::google::protobuf::Message::ClassData*VariableCondition::GetClassData() const { return &_class_data_; }


void VariableCondition::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VariableCondition*>(&to_msg);
  auto& from = static_cast<const VariableCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.VariableCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_i_vars()->MergeFrom(from._internal_i_vars());
  _this->_internal_mutable_f_vars()->MergeFrom(from._internal_f_vars());
  _this->_internal_mutable_b_vars()->MergeFrom(from._internal_b_vars());
  _this->_internal_mutable_m_vars()->MergeFrom(from._internal_m_vars());
  _this->_internal_mutable_j_vars()->MergeFrom(from._internal_j_vars());
  _this->_internal_mutable_t_vars()->MergeFrom(from._internal_t_vars());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VariableCondition::CopyFrom(const VariableCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.VariableCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VariableCondition::IsInitialized() const {
  return true;
}

void VariableCondition::InternalSwap(VariableCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.i_vars_.InternalSwap(&other->_impl_.i_vars_);
  _impl_.f_vars_.InternalSwap(&other->_impl_.f_vars_);
  _impl_.b_vars_.InternalSwap(&other->_impl_.b_vars_);
  _impl_.m_vars_.InternalSwap(&other->_impl_.m_vars_);
  _impl_.j_vars_.InternalSwap(&other->_impl_.j_vars_);
  _impl_.t_vars_.InternalSwap(&other->_impl_.t_vars_);
}

::google::protobuf::Metadata VariableCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[3]);
}
// ===================================================================

class IOCondition::_Internal {
 public:
};

void IOCondition::clear_di() {
  _internal_mutable_di()->Clear();
}
void IOCondition::clear_end_di() {
  _internal_mutable_end_di()->Clear();
}
IOCondition::IOCondition(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.IOCondition)
}
IOCondition::IOCondition(const IOCondition& from) : ::google::protobuf::Message() {
  IOCondition* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.di_){from._impl_.di_},
      decltype(_impl_.end_di_){from._impl_.end_di_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.IOCondition)
}
inline void IOCondition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.di_){arena},
      decltype(_impl_.end_di_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
IOCondition::~IOCondition() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.IOCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IOCondition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.di_.~RepeatedPtrField();
  _impl_.end_di_.~RepeatedPtrField();
}
void IOCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void IOCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.IOCondition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_di()->Clear();
  _internal_mutable_end_di()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* IOCondition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> IOCondition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_IOCondition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.DigitalSignal end_di = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(IOCondition, _impl_.end_di_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(IOCondition, _impl_.di_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
    {PROTOBUF_FIELD_OFFSET(IOCondition, _impl_.di_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.DigitalSignal end_di = 2;
    {PROTOBUF_FIELD_OFFSET(IOCondition, _impl_.end_di_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
  }}, {{
  }},
};

::uint8_t* IOCondition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.IOCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_di_size()); i < n; i++) {
    const auto& repfield = this->_internal_di().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal end_di = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_end_di_size()); i < n; i++) {
    const auto& repfield = this->_internal_end_di().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.IOCondition)
  return target;
}

::size_t IOCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.IOCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
  total_size += 1UL * this->_internal_di_size();
  for (const auto& msg : this->_internal_di()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.DigitalSignal end_di = 2;
  total_size += 1UL * this->_internal_end_di_size();
  for (const auto& msg : this->_internal_end_di()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData IOCondition::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    IOCondition::MergeImpl
};
const ::google::protobuf::Message::ClassData*IOCondition::GetClassData() const { return &_class_data_; }


void IOCondition::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<IOCondition*>(&to_msg);
  auto& from = static_cast<const IOCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.IOCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_di()->MergeFrom(from._internal_di());
  _this->_internal_mutable_end_di()->MergeFrom(from._internal_end_di());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IOCondition::CopyFrom(const IOCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.IOCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IOCondition::IsInitialized() const {
  return true;
}

void IOCondition::InternalSwap(IOCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.di_.InternalSwap(&other->_impl_.di_);
  _impl_.end_di_.InternalSwap(&other->_impl_.end_di_);
}

::google::protobuf::Metadata IOCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[4]);
}
// ===================================================================

class MotionCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MotionCondition, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::IOCondition& io_cond(const MotionCondition* msg);
  static void set_has_io_cond(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Nrmk::IndyFramework::VariableCondition& var_cond(const MotionCondition* msg);
  static void set_has_var_cond(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Nrmk::IndyFramework::IOCondition& MotionCondition::_Internal::io_cond(const MotionCondition* msg) {
  return *msg->_impl_.io_cond_;
}
const ::Nrmk::IndyFramework::VariableCondition& MotionCondition::_Internal::var_cond(const MotionCondition* msg) {
  return *msg->_impl_.var_cond_;
}
MotionCondition::MotionCondition(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MotionCondition)
}
MotionCondition::MotionCondition(const MotionCondition& from) : ::google::protobuf::Message() {
  MotionCondition* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.io_cond_){nullptr},
      decltype(_impl_.var_cond_){nullptr},
      decltype(_impl_.type_cond_){},
      decltype(_impl_.type_react_){},
      decltype(_impl_.const_cond_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.io_cond_ = new ::Nrmk::IndyFramework::IOCondition(*from._impl_.io_cond_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.var_cond_ = new ::Nrmk::IndyFramework::VariableCondition(*from._impl_.var_cond_);
  }
  ::memcpy(&_impl_.type_cond_, &from._impl_.type_cond_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.const_cond_) -
    reinterpret_cast<char*>(&_impl_.type_cond_)) + sizeof(_impl_.const_cond_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MotionCondition)
}
inline void MotionCondition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.io_cond_){nullptr},
      decltype(_impl_.var_cond_){nullptr},
      decltype(_impl_.type_cond_){0},
      decltype(_impl_.type_react_){0},
      decltype(_impl_.const_cond_){false},
  };
}
MotionCondition::~MotionCondition() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MotionCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MotionCondition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.io_cond_;
  if (this != internal_default_instance()) delete _impl_.var_cond_;
}
void MotionCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MotionCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MotionCondition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.io_cond_ != nullptr);
      _impl_.io_cond_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.var_cond_ != nullptr);
      _impl_.var_cond_->Clear();
    }
  }
  ::memset(&_impl_.type_cond_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.const_cond_) -
      reinterpret_cast<char*>(&_impl_.type_cond_)) + sizeof(_impl_.const_cond_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MotionCondition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 0, 2> MotionCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MotionCondition, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MotionCondition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.MotionCondition.ConditionType type_cond = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MotionCondition, _impl_.type_cond_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MotionCondition, _impl_.type_cond_)}},
    // .Nrmk.IndyFramework.MotionCondition.ReactionType type_react = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MotionCondition, _impl_.type_react_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MotionCondition, _impl_.type_react_)}},
    // bool const_cond = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MotionCondition, _impl_.const_cond_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MotionCondition, _impl_.const_cond_)}},
    // .Nrmk.IndyFramework.IOCondition io_cond = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(MotionCondition, _impl_.io_cond_)}},
    // .Nrmk.IndyFramework.VariableCondition var_cond = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(MotionCondition, _impl_.var_cond_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.MotionCondition.ConditionType type_cond = 1;
    {PROTOBUF_FIELD_OFFSET(MotionCondition, _impl_.type_cond_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.MotionCondition.ReactionType type_react = 2;
    {PROTOBUF_FIELD_OFFSET(MotionCondition, _impl_.type_react_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool const_cond = 3;
    {PROTOBUF_FIELD_OFFSET(MotionCondition, _impl_.const_cond_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .Nrmk.IndyFramework.IOCondition io_cond = 4;
    {PROTOBUF_FIELD_OFFSET(MotionCondition, _impl_.io_cond_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.VariableCondition var_cond = 5;
    {PROTOBUF_FIELD_OFFSET(MotionCondition, _impl_.var_cond_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::IOCondition>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::VariableCondition>()},
  }}, {{
  }},
};

::uint8_t* MotionCondition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MotionCondition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.MotionCondition.ConditionType type_cond = 1;
  if (this->_internal_type_cond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type_cond(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition.ReactionType type_react = 2;
  if (this->_internal_type_react() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type_react(), target);
  }

  // bool const_cond = 3;
  if (this->_internal_const_cond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_const_cond(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.IOCondition io_cond = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::io_cond(this),
        _Internal::io_cond(this).GetCachedSize(), target, stream);
  }

  // .Nrmk.IndyFramework.VariableCondition var_cond = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::var_cond(this),
        _Internal::var_cond(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MotionCondition)
  return target;
}

::size_t MotionCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MotionCondition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .Nrmk.IndyFramework.IOCondition io_cond = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.io_cond_);
    }

    // .Nrmk.IndyFramework.VariableCondition var_cond = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.var_cond_);
    }

  }
  // .Nrmk.IndyFramework.MotionCondition.ConditionType type_cond = 1;
  if (this->_internal_type_cond() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type_cond());
  }

  // .Nrmk.IndyFramework.MotionCondition.ReactionType type_react = 2;
  if (this->_internal_type_react() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type_react());
  }

  // bool const_cond = 3;
  if (this->_internal_const_cond() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MotionCondition::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MotionCondition::MergeImpl
};
const ::google::protobuf::Message::ClassData*MotionCondition::GetClassData() const { return &_class_data_; }


void MotionCondition::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MotionCondition*>(&to_msg);
  auto& from = static_cast<const MotionCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MotionCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_io_cond()->::Nrmk::IndyFramework::IOCondition::MergeFrom(
          from._internal_io_cond());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_var_cond()->::Nrmk::IndyFramework::VariableCondition::MergeFrom(
          from._internal_var_cond());
    }
  }
  if (from._internal_type_cond() != 0) {
    _this->_internal_set_type_cond(from._internal_type_cond());
  }
  if (from._internal_type_react() != 0) {
    _this->_internal_set_type_react(from._internal_type_react());
  }
  if (from._internal_const_cond() != 0) {
    _this->_internal_set_const_cond(from._internal_const_cond());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MotionCondition::CopyFrom(const MotionCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MotionCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MotionCondition::IsInitialized() const {
  return true;
}

void MotionCondition::InternalSwap(MotionCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionCondition, _impl_.const_cond_)
      + sizeof(MotionCondition::_impl_.const_cond_)
      - PROTOBUF_FIELD_OFFSET(MotionCondition, _impl_.io_cond_)>(
          reinterpret_cast<char*>(&_impl_.io_cond_),
          reinterpret_cast<char*>(&other->_impl_.io_cond_));
}

::google::protobuf::Metadata MotionCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[5]);
}
// ===================================================================

class BlendingType::_Internal {
 public:
};

BlendingType::BlendingType(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.BlendingType)
}
BlendingType::BlendingType(const BlendingType& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.BlendingType)
}
inline void BlendingType::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0},
      decltype(_impl_.blending_radius_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
BlendingType::~BlendingType() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.BlendingType)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BlendingType::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void BlendingType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BlendingType::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.BlendingType)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.blending_radius_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.blending_radius_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BlendingType::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> BlendingType::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BlendingType_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float blending_radius = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(BlendingType, _impl_.blending_radius_)}},
    // .Nrmk.IndyFramework.BlendingType.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlendingType, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BlendingType, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.BlendingType.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(BlendingType, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float blending_radius = 2;
    {PROTOBUF_FIELD_OFFSET(BlendingType, _impl_.blending_radius_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* BlendingType::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.BlendingType)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.BlendingType.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // float blending_radius = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_blending_radius = this->_internal_blending_radius();
  ::uint32_t raw_blending_radius;
  memcpy(&raw_blending_radius, &tmp_blending_radius, sizeof(tmp_blending_radius));
  if (raw_blending_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_blending_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.BlendingType)
  return target;
}

::size_t BlendingType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.BlendingType)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.BlendingType.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float blending_radius = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_blending_radius = this->_internal_blending_radius();
  ::uint32_t raw_blending_radius;
  memcpy(&raw_blending_radius, &tmp_blending_radius, sizeof(tmp_blending_radius));
  if (raw_blending_radius != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BlendingType::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BlendingType::MergeImpl
};
const ::google::protobuf::Message::ClassData*BlendingType::GetClassData() const { return &_class_data_; }


void BlendingType::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BlendingType*>(&to_msg);
  auto& from = static_cast<const BlendingType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.BlendingType)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_blending_radius = from._internal_blending_radius();
  ::uint32_t raw_blending_radius;
  memcpy(&raw_blending_radius, &tmp_blending_radius, sizeof(tmp_blending_radius));
  if (raw_blending_radius != 0) {
    _this->_internal_set_blending_radius(from._internal_blending_radius());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BlendingType::CopyFrom(const BlendingType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.BlendingType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BlendingType::IsInitialized() const {
  return true;
}

void BlendingType::InternalSwap(BlendingType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlendingType, _impl_.blending_radius_)
      + sizeof(BlendingType::_impl_.blending_radius_)
      - PROTOBUF_FIELD_OFFSET(BlendingType, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::google::protobuf::Metadata BlendingType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[6]);
}
// ===================================================================

class TargetJ::_Internal {
 public:
};

TargetJ::TargetJ(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TargetJ)
}
TargetJ::TargetJ(const TargetJ& from) : ::google::protobuf::Message() {
  TargetJ* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.j_start_){from._impl_.j_start_},
      decltype(_impl_.j_target_){from._impl_.j_target_},
      decltype(_impl_.base_type_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.base_type_ = from._impl_.base_type_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TargetJ)
}
inline void TargetJ::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.j_start_){arena},
      decltype(_impl_.j_target_){arena},
      decltype(_impl_.base_type_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TargetJ::~TargetJ() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TargetJ)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TargetJ::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.j_start_.~RepeatedField();
  _impl_.j_target_.~RepeatedField();
}
void TargetJ::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TargetJ::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TargetJ)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_j_start()->Clear();
  _internal_mutable_j_target()->Clear();
  _impl_.base_type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TargetJ::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> TargetJ::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TargetJ_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float j_start = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TargetJ, _impl_.j_start_)}},
    // repeated float j_target = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TargetJ, _impl_.j_target_)}},
    // .Nrmk.IndyFramework.JointBaseType base_type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TargetJ, _impl_.base_type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TargetJ, _impl_.base_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float j_start = 1;
    {PROTOBUF_FIELD_OFFSET(TargetJ, _impl_.j_start_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float j_target = 2;
    {PROTOBUF_FIELD_OFFSET(TargetJ, _impl_.j_target_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.JointBaseType base_type = 3;
    {PROTOBUF_FIELD_OFFSET(TargetJ, _impl_.base_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TargetJ::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TargetJ)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float j_start = 1;
  if (this->_internal_j_start_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_j_start(), target);
  }

  // repeated float j_target = 2;
  if (this->_internal_j_target_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_j_target(), target);
  }

  // .Nrmk.IndyFramework.JointBaseType base_type = 3;
  if (this->_internal_base_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_base_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TargetJ)
  return target;
}

::size_t TargetJ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TargetJ)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float j_start = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_j_start_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float j_target = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_j_target_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.JointBaseType base_type = 3;
  if (this->_internal_base_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_base_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TargetJ::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TargetJ::MergeImpl
};
const ::google::protobuf::Message::ClassData*TargetJ::GetClassData() const { return &_class_data_; }


void TargetJ::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TargetJ*>(&to_msg);
  auto& from = static_cast<const TargetJ&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TargetJ)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_j_start()->MergeFrom(from._internal_j_start());
  _this->_internal_mutable_j_target()->MergeFrom(from._internal_j_target());
  if (from._internal_base_type() != 0) {
    _this->_internal_set_base_type(from._internal_base_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TargetJ::CopyFrom(const TargetJ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TargetJ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TargetJ::IsInitialized() const {
  return true;
}

void TargetJ::InternalSwap(TargetJ* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.j_start_.InternalSwap(&other->_impl_.j_start_);
  _impl_.j_target_.InternalSwap(&other->_impl_.j_target_);
  swap(_impl_.base_type_, other->_impl_.base_type_);
}

::google::protobuf::Metadata TargetJ::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[7]);
}
// ===================================================================

class MoveJReq::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveJReq>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::TargetJ& target(const MoveJReq* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveJReq* msg);
  static void set_has_blending(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveJReq* msg);
  static void set_has_post_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Nrmk::IndyFramework::TargetJ& MoveJReq::_Internal::target(const MoveJReq* msg) {
  return *msg->_impl_.target_;
}
const ::Nrmk::IndyFramework::BlendingType& MoveJReq::_Internal::blending(const MoveJReq* msg) {
  return *msg->_impl_.blending_;
}
const ::Nrmk::IndyFramework::MotionCondition& MoveJReq::_Internal::post_condition(const MoveJReq* msg) {
  return *msg->_impl_.post_condition_;
}
MoveJReq::MoveJReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveJReq)
}
MoveJReq::MoveJReq(const MoveJReq& from) : ::google::protobuf::Message() {
  MoveJReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.vel_ratio_){},
      decltype(_impl_.acc_ratio_){},
      decltype(_impl_.teaching_mode_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.target_ = new ::Nrmk::IndyFramework::TargetJ(*from._impl_.target_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.blending_ = new ::Nrmk::IndyFramework::BlendingType(*from._impl_.blending_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from._impl_.post_condition_);
  }
  ::memcpy(&_impl_.vel_ratio_, &from._impl_.vel_ratio_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.teaching_mode_) -
    reinterpret_cast<char*>(&_impl_.vel_ratio_)) + sizeof(_impl_.teaching_mode_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveJReq)
}
inline void MoveJReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.vel_ratio_){0},
      decltype(_impl_.acc_ratio_){0},
      decltype(_impl_.teaching_mode_){false},
  };
}
MoveJReq::~MoveJReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveJReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveJReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_;
  if (this != internal_default_instance()) delete _impl_.blending_;
  if (this != internal_default_instance()) delete _impl_.post_condition_;
}
void MoveJReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveJReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveJReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.target_ != nullptr);
      _impl_.target_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.blending_ != nullptr);
      _impl_.blending_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.post_condition_ != nullptr);
      _impl_.post_condition_->Clear();
    }
  }
  ::memset(&_impl_.vel_ratio_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.teaching_mode_) -
      reinterpret_cast<char*>(&_impl_.vel_ratio_)) + sizeof(_impl_.teaching_mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveJReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 0, 2> MoveJReq::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_._has_bits_),
    0, // no _extensions_
    30, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3757572080,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MoveJReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.TargetJ target = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_.target_)}},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_.blending_)}},
    // float vel_ratio = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_.vel_ratio_)}},
    // float acc_ratio = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_.acc_ratio_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool teaching_mode = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_.teaching_mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.TargetJ target = 1;
    {PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_.target_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_.blending_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float vel_ratio = 3;
    {PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_.vel_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float acc_ratio = 4;
    {PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_.acc_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
    {PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_.post_condition_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool teaching_mode = 30;
    {PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_.teaching_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::TargetJ>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::BlendingType>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::MotionCondition>()},
  }}, {{
  }},
};

::uint8_t* MoveJReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveJReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.TargetJ target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::blending(this),
        _Internal::blending(this).GetCachedSize(), target, stream);
  }

  // float vel_ratio = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_vel_ratio(), target);
  }

  // float acc_ratio = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::post_condition(this),
        _Internal::post_condition(this).GetCachedSize(), target, stream);
  }

  // bool teaching_mode = 30;
  if (this->_internal_teaching_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        30, this->_internal_teaching_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveJReq)
  return target;
}

::size_t MoveJReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveJReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .Nrmk.IndyFramework.TargetJ target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.target_);
    }

    // .Nrmk.IndyFramework.BlendingType blending = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.blending_);
    }

    // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.post_condition_);
    }

  }
  // float vel_ratio = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    total_size += 5;
  }

  // float acc_ratio = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    total_size += 5;
  }

  // bool teaching_mode = 30;
  if (this->_internal_teaching_mode() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveJReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveJReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveJReq::GetClassData() const { return &_class_data_; }


void MoveJReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveJReq*>(&to_msg);
  auto& from = static_cast<const MoveJReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveJReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target()->::Nrmk::IndyFramework::TargetJ::MergeFrom(
          from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(
          from._internal_blending());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(
          from._internal_post_condition());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = from._internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    _this->_internal_set_vel_ratio(from._internal_vel_ratio());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = from._internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    _this->_internal_set_acc_ratio(from._internal_acc_ratio());
  }
  if (from._internal_teaching_mode() != 0) {
    _this->_internal_set_teaching_mode(from._internal_teaching_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveJReq::CopyFrom(const MoveJReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveJReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveJReq::IsInitialized() const {
  return true;
}

void MoveJReq::InternalSwap(MoveJReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_.teaching_mode_)
      + sizeof(MoveJReq::_impl_.teaching_mode_)
      - PROTOBUF_FIELD_OFFSET(MoveJReq, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::google::protobuf::Metadata MoveJReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[8]);
}
// ===================================================================

class MoveJCondReq::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveJCondReq>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::TargetJ& target(const MoveJCondReq* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveJCondReq* msg);
  static void set_has_blending(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveJCondReq* msg);
  static void set_has_post_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Nrmk::IndyFramework::TargetJ& MoveJCondReq::_Internal::target(const MoveJCondReq* msg) {
  return *msg->_impl_.target_;
}
const ::Nrmk::IndyFramework::BlendingType& MoveJCondReq::_Internal::blending(const MoveJCondReq* msg) {
  return *msg->_impl_.blending_;
}
const ::Nrmk::IndyFramework::MotionCondition& MoveJCondReq::_Internal::post_condition(const MoveJCondReq* msg) {
  return *msg->_impl_.post_condition_;
}
MoveJCondReq::MoveJCondReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveJCondReq)
}
MoveJCondReq::MoveJCondReq(const MoveJCondReq& from) : ::google::protobuf::Message() {
  MoveJCondReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.vel_ratio_){},
      decltype(_impl_.acc_ratio_){},
      decltype(_impl_.teaching_mode_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.target_ = new ::Nrmk::IndyFramework::TargetJ(*from._impl_.target_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.blending_ = new ::Nrmk::IndyFramework::BlendingType(*from._impl_.blending_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from._impl_.post_condition_);
  }
  ::memcpy(&_impl_.vel_ratio_, &from._impl_.vel_ratio_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.teaching_mode_) -
    reinterpret_cast<char*>(&_impl_.vel_ratio_)) + sizeof(_impl_.teaching_mode_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveJCondReq)
}
inline void MoveJCondReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.vel_ratio_){0},
      decltype(_impl_.acc_ratio_){0},
      decltype(_impl_.teaching_mode_){false},
  };
}
MoveJCondReq::~MoveJCondReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveJCondReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveJCondReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_;
  if (this != internal_default_instance()) delete _impl_.blending_;
  if (this != internal_default_instance()) delete _impl_.post_condition_;
}
void MoveJCondReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveJCondReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveJCondReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.target_ != nullptr);
      _impl_.target_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.blending_ != nullptr);
      _impl_.blending_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.post_condition_ != nullptr);
      _impl_.post_condition_->Clear();
    }
  }
  ::memset(&_impl_.vel_ratio_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.teaching_mode_) -
      reinterpret_cast<char*>(&_impl_.vel_ratio_)) + sizeof(_impl_.teaching_mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveJCondReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 0, 2> MoveJCondReq::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_._has_bits_),
    0, // no _extensions_
    30, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3757572080,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MoveJCondReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.TargetJ target = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_.target_)}},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_.blending_)}},
    // float vel_ratio = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_.vel_ratio_)}},
    // float acc_ratio = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_.acc_ratio_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool teaching_mode = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_.teaching_mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.TargetJ target = 1;
    {PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_.target_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_.blending_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float vel_ratio = 3;
    {PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_.vel_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float acc_ratio = 4;
    {PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_.acc_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
    {PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_.post_condition_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool teaching_mode = 30;
    {PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_.teaching_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::TargetJ>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::BlendingType>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::MotionCondition>()},
  }}, {{
  }},
};

::uint8_t* MoveJCondReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveJCondReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.TargetJ target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::blending(this),
        _Internal::blending(this).GetCachedSize(), target, stream);
  }

  // float vel_ratio = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_vel_ratio(), target);
  }

  // float acc_ratio = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::post_condition(this),
        _Internal::post_condition(this).GetCachedSize(), target, stream);
  }

  // bool teaching_mode = 30;
  if (this->_internal_teaching_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        30, this->_internal_teaching_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveJCondReq)
  return target;
}

::size_t MoveJCondReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveJCondReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .Nrmk.IndyFramework.TargetJ target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.target_);
    }

    // .Nrmk.IndyFramework.BlendingType blending = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.blending_);
    }

    // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.post_condition_);
    }

  }
  // float vel_ratio = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    total_size += 5;
  }

  // float acc_ratio = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    total_size += 5;
  }

  // bool teaching_mode = 30;
  if (this->_internal_teaching_mode() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveJCondReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveJCondReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveJCondReq::GetClassData() const { return &_class_data_; }


void MoveJCondReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveJCondReq*>(&to_msg);
  auto& from = static_cast<const MoveJCondReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveJCondReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target()->::Nrmk::IndyFramework::TargetJ::MergeFrom(
          from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(
          from._internal_blending());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(
          from._internal_post_condition());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = from._internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    _this->_internal_set_vel_ratio(from._internal_vel_ratio());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = from._internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    _this->_internal_set_acc_ratio(from._internal_acc_ratio());
  }
  if (from._internal_teaching_mode() != 0) {
    _this->_internal_set_teaching_mode(from._internal_teaching_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveJCondReq::CopyFrom(const MoveJCondReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveJCondReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveJCondReq::IsInitialized() const {
  return true;
}

void MoveJCondReq::InternalSwap(MoveJCondReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_.teaching_mode_)
      + sizeof(MoveJCondReq::_impl_.teaching_mode_)
      - PROTOBUF_FIELD_OFFSET(MoveJCondReq, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::google::protobuf::Metadata MoveJCondReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[9]);
}
// ===================================================================

class MoveJTReq::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveJTReq>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MoveJTReq, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::TargetJ& target(const MoveJTReq* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveJTReq* msg);
  static void set_has_blending(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveJTReq* msg);
  static void set_has_post_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Nrmk::IndyFramework::TargetJ& MoveJTReq::_Internal::target(const MoveJTReq* msg) {
  return *msg->_impl_.target_;
}
const ::Nrmk::IndyFramework::BlendingType& MoveJTReq::_Internal::blending(const MoveJTReq* msg) {
  return *msg->_impl_.blending_;
}
const ::Nrmk::IndyFramework::MotionCondition& MoveJTReq::_Internal::post_condition(const MoveJTReq* msg) {
  return *msg->_impl_.post_condition_;
}
MoveJTReq::MoveJTReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveJTReq)
}
MoveJTReq::MoveJTReq(const MoveJTReq& from) : ::google::protobuf::Message() {
  MoveJTReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.time_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.target_ = new ::Nrmk::IndyFramework::TargetJ(*from._impl_.target_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.blending_ = new ::Nrmk::IndyFramework::BlendingType(*from._impl_.blending_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from._impl_.post_condition_);
  }
  _this->_impl_.time_ = from._impl_.time_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveJTReq)
}
inline void MoveJTReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.time_){0},
  };
}
MoveJTReq::~MoveJTReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveJTReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveJTReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_;
  if (this != internal_default_instance()) delete _impl_.blending_;
  if (this != internal_default_instance()) delete _impl_.post_condition_;
}
void MoveJTReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveJTReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveJTReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.target_ != nullptr);
      _impl_.target_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.blending_ != nullptr);
      _impl_.blending_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.post_condition_ != nullptr);
      _impl_.post_condition_->Clear();
    }
  }
  _impl_.time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveJTReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> MoveJTReq::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MoveJTReq, _impl_._has_bits_),
    0, // no _extensions_
    20, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294443000,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MoveJTReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 2, 2, PROTOBUF_FIELD_OFFSET(MoveJTReq, _impl_.post_condition_)}},
    // .Nrmk.IndyFramework.TargetJ target = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MoveJTReq, _impl_.target_)}},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MoveJTReq, _impl_.blending_)}},
    // float time = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MoveJTReq, _impl_.time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.TargetJ target = 1;
    {PROTOBUF_FIELD_OFFSET(MoveJTReq, _impl_.target_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {PROTOBUF_FIELD_OFFSET(MoveJTReq, _impl_.blending_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float time = 3;
    {PROTOBUF_FIELD_OFFSET(MoveJTReq, _impl_.time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
    {PROTOBUF_FIELD_OFFSET(MoveJTReq, _impl_.post_condition_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::TargetJ>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::BlendingType>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::MotionCondition>()},
  }}, {{
  }},
};

::uint8_t* MoveJTReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveJTReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.TargetJ target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::blending(this),
        _Internal::blending(this).GetCachedSize(), target, stream);
  }

  // float time = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_time(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::post_condition(this),
        _Internal::post_condition(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveJTReq)
  return target;
}

::size_t MoveJTReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveJTReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .Nrmk.IndyFramework.TargetJ target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.target_);
    }

    // .Nrmk.IndyFramework.BlendingType blending = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.blending_);
    }

    // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.post_condition_);
    }

  }
  // float time = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveJTReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveJTReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveJTReq::GetClassData() const { return &_class_data_; }


void MoveJTReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveJTReq*>(&to_msg);
  auto& from = static_cast<const MoveJTReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveJTReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target()->::Nrmk::IndyFramework::TargetJ::MergeFrom(
          from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(
          from._internal_blending());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(
          from._internal_post_condition());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = from._internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveJTReq::CopyFrom(const MoveJTReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveJTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveJTReq::IsInitialized() const {
  return true;
}

void MoveJTReq::InternalSwap(MoveJTReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveJTReq, _impl_.time_)
      + sizeof(MoveJTReq::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(MoveJTReq, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::google::protobuf::Metadata MoveJTReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[10]);
}
// ===================================================================

class TargetP::_Internal {
 public:
};

TargetP::TargetP(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TargetP)
}
TargetP::TargetP(const TargetP& from) : ::google::protobuf::Message() {
  TargetP* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.t_start_){from._impl_.t_start_},
      decltype(_impl_.t_target_){from._impl_.t_target_},
      decltype(_impl_.base_type_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.base_type_ = from._impl_.base_type_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TargetP)
}
inline void TargetP::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.t_start_){arena},
      decltype(_impl_.t_target_){arena},
      decltype(_impl_.base_type_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TargetP::~TargetP() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TargetP)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TargetP::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.t_start_.~RepeatedField();
  _impl_.t_target_.~RepeatedField();
}
void TargetP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TargetP::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TargetP)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_t_start()->Clear();
  _internal_mutable_t_target()->Clear();
  _impl_.base_type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TargetP::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> TargetP::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TargetP_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float t_start = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TargetP, _impl_.t_start_)}},
    // repeated float t_target = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TargetP, _impl_.t_target_)}},
    // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TargetP, _impl_.base_type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TargetP, _impl_.base_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float t_start = 1;
    {PROTOBUF_FIELD_OFFSET(TargetP, _impl_.t_start_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float t_target = 2;
    {PROTOBUF_FIELD_OFFSET(TargetP, _impl_.t_target_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
    {PROTOBUF_FIELD_OFFSET(TargetP, _impl_.base_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TargetP::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TargetP)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float t_start = 1;
  if (this->_internal_t_start_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_t_start(), target);
  }

  // repeated float t_target = 2;
  if (this->_internal_t_target_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_t_target(), target);
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->_internal_base_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_base_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TargetP)
  return target;
}

::size_t TargetP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TargetP)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float t_start = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_t_start_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float t_target = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_t_target_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->_internal_base_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_base_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TargetP::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TargetP::MergeImpl
};
const ::google::protobuf::Message::ClassData*TargetP::GetClassData() const { return &_class_data_; }


void TargetP::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TargetP*>(&to_msg);
  auto& from = static_cast<const TargetP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TargetP)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_t_start()->MergeFrom(from._internal_t_start());
  _this->_internal_mutable_t_target()->MergeFrom(from._internal_t_target());
  if (from._internal_base_type() != 0) {
    _this->_internal_set_base_type(from._internal_base_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TargetP::CopyFrom(const TargetP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TargetP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TargetP::IsInitialized() const {
  return true;
}

void TargetP::InternalSwap(TargetP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.t_start_.InternalSwap(&other->_impl_.t_start_);
  _impl_.t_target_.InternalSwap(&other->_impl_.t_target_);
  swap(_impl_.base_type_, other->_impl_.base_type_);
}

::google::protobuf::Metadata TargetP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[11]);
}
// ===================================================================

class TargetC::_Internal {
 public:
};

TargetC::TargetC(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TargetC)
}
TargetC::TargetC(const TargetC& from) : ::google::protobuf::Message() {
  TargetC* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.t_start_){from._impl_.t_start_},
      decltype(_impl_.t_pos0_){from._impl_.t_pos0_},
      decltype(_impl_.t_pos1_){from._impl_.t_pos1_},
      decltype(_impl_.base_type_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.base_type_ = from._impl_.base_type_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TargetC)
}
inline void TargetC::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.t_start_){arena},
      decltype(_impl_.t_pos0_){arena},
      decltype(_impl_.t_pos1_){arena},
      decltype(_impl_.base_type_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TargetC::~TargetC() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TargetC)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TargetC::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.t_start_.~RepeatedField();
  _impl_.t_pos0_.~RepeatedField();
  _impl_.t_pos1_.~RepeatedField();
}
void TargetC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TargetC::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TargetC)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_t_start()->Clear();
  _internal_mutable_t_pos0()->Clear();
  _internal_mutable_t_pos1()->Clear();
  _impl_.base_type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TargetC::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> TargetC::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TargetC_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.TaskBaseType base_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TargetC, _impl_.base_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TargetC, _impl_.base_type_)}},
    // repeated float t_start = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TargetC, _impl_.t_start_)}},
    // repeated float t_pos0 = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TargetC, _impl_.t_pos0_)}},
    // repeated float t_pos1 = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TargetC, _impl_.t_pos1_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float t_start = 1;
    {PROTOBUF_FIELD_OFFSET(TargetC, _impl_.t_start_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float t_pos0 = 2;
    {PROTOBUF_FIELD_OFFSET(TargetC, _impl_.t_pos0_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float t_pos1 = 3;
    {PROTOBUF_FIELD_OFFSET(TargetC, _impl_.t_pos1_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.TaskBaseType base_type = 4;
    {PROTOBUF_FIELD_OFFSET(TargetC, _impl_.base_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TargetC::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TargetC)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float t_start = 1;
  if (this->_internal_t_start_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_t_start(), target);
  }

  // repeated float t_pos0 = 2;
  if (this->_internal_t_pos0_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_t_pos0(), target);
  }

  // repeated float t_pos1 = 3;
  if (this->_internal_t_pos1_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_t_pos1(), target);
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 4;
  if (this->_internal_base_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_base_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TargetC)
  return target;
}

::size_t TargetC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TargetC)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float t_start = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_t_start_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float t_pos0 = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_t_pos0_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float t_pos1 = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_t_pos1_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.TaskBaseType base_type = 4;
  if (this->_internal_base_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_base_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TargetC::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TargetC::MergeImpl
};
const ::google::protobuf::Message::ClassData*TargetC::GetClassData() const { return &_class_data_; }


void TargetC::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TargetC*>(&to_msg);
  auto& from = static_cast<const TargetC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TargetC)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_t_start()->MergeFrom(from._internal_t_start());
  _this->_internal_mutable_t_pos0()->MergeFrom(from._internal_t_pos0());
  _this->_internal_mutable_t_pos1()->MergeFrom(from._internal_t_pos1());
  if (from._internal_base_type() != 0) {
    _this->_internal_set_base_type(from._internal_base_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TargetC::CopyFrom(const TargetC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TargetC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TargetC::IsInitialized() const {
  return true;
}

void TargetC::InternalSwap(TargetC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.t_start_.InternalSwap(&other->_impl_.t_start_);
  _impl_.t_pos0_.InternalSwap(&other->_impl_.t_pos0_);
  _impl_.t_pos1_.InternalSwap(&other->_impl_.t_pos1_);
  swap(_impl_.base_type_, other->_impl_.base_type_);
}

::google::protobuf::Metadata TargetC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[12]);
}
// ===================================================================

class MoveLReq::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveLReq>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::TargetP& target(const MoveLReq* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveLReq* msg);
  static void set_has_blending(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveLReq* msg);
  static void set_has_post_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Nrmk::IndyFramework::TargetP& MoveLReq::_Internal::target(const MoveLReq* msg) {
  return *msg->_impl_.target_;
}
const ::Nrmk::IndyFramework::BlendingType& MoveLReq::_Internal::blending(const MoveLReq* msg) {
  return *msg->_impl_.blending_;
}
const ::Nrmk::IndyFramework::MotionCondition& MoveLReq::_Internal::post_condition(const MoveLReq* msg) {
  return *msg->_impl_.post_condition_;
}
MoveLReq::MoveLReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveLReq)
}
MoveLReq::MoveLReq(const MoveLReq& from) : ::google::protobuf::Message() {
  MoveLReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.vel_ratio_){},
      decltype(_impl_.acc_ratio_){},
      decltype(_impl_.vel_type_){},
      decltype(_impl_.teaching_mode_){},
      decltype(_impl_.bypass_singular_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.target_ = new ::Nrmk::IndyFramework::TargetP(*from._impl_.target_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.blending_ = new ::Nrmk::IndyFramework::BlendingType(*from._impl_.blending_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from._impl_.post_condition_);
  }
  ::memcpy(&_impl_.vel_ratio_, &from._impl_.vel_ratio_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.bypass_singular_) -
    reinterpret_cast<char*>(&_impl_.vel_ratio_)) + sizeof(_impl_.bypass_singular_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveLReq)
}
inline void MoveLReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.vel_ratio_){0},
      decltype(_impl_.acc_ratio_){0},
      decltype(_impl_.vel_type_){0},
      decltype(_impl_.teaching_mode_){false},
      decltype(_impl_.bypass_singular_){false},
  };
}
MoveLReq::~MoveLReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveLReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveLReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_;
  if (this != internal_default_instance()) delete _impl_.blending_;
  if (this != internal_default_instance()) delete _impl_.post_condition_;
}
void MoveLReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveLReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveLReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.target_ != nullptr);
      _impl_.target_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.blending_ != nullptr);
      _impl_.blending_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.post_condition_ != nullptr);
      _impl_.post_condition_->Clear();
    }
  }
  ::memset(&_impl_.vel_ratio_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.bypass_singular_) -
      reinterpret_cast<char*>(&_impl_.vel_ratio_)) + sizeof(_impl_.bypass_singular_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveLReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 3, 0, 7> MoveLReq::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_._has_bits_),
    0, // no _extensions_
    40, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3757572064,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MoveLReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool bypass_singular = 40;
    {::_pbi::TcParser::FastV8S2,
     {704, 63, 0, PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.bypass_singular_)}},
    // .Nrmk.IndyFramework.TargetP target = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.target_)}},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.blending_)}},
    // float vel_ratio = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.vel_ratio_)}},
    // float acc_ratio = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.acc_ratio_)}},
    // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MoveLReq, _impl_.vel_type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.vel_type_)}},
    // bool teaching_mode = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.teaching_mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    40, 0, 1,
    65534, 7,
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.TargetP target = 1;
    {PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.target_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.blending_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float vel_ratio = 3;
    {PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.vel_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float acc_ratio = 4;
    {PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.acc_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
    {PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.vel_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
    {PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.post_condition_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool teaching_mode = 30;
    {PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.teaching_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool bypass_singular = 40;
    {PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.bypass_singular_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::TargetP>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::BlendingType>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::MotionCondition>()},
  }}, {{
  }},
};

::uint8_t* MoveLReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveLReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.TargetP target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::blending(this),
        _Internal::blending(this).GetCachedSize(), target, stream);
  }

  // float vel_ratio = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_vel_ratio(), target);
  }

  // float acc_ratio = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
  if (this->_internal_vel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_vel_type(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::post_condition(this),
        _Internal::post_condition(this).GetCachedSize(), target, stream);
  }

  // bool teaching_mode = 30;
  if (this->_internal_teaching_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        30, this->_internal_teaching_mode(), target);
  }

  // bool bypass_singular = 40;
  if (this->_internal_bypass_singular() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        40, this->_internal_bypass_singular(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveLReq)
  return target;
}

::size_t MoveLReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveLReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .Nrmk.IndyFramework.TargetP target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.target_);
    }

    // .Nrmk.IndyFramework.BlendingType blending = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.blending_);
    }

    // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.post_condition_);
    }

  }
  // float vel_ratio = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    total_size += 5;
  }

  // float acc_ratio = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    total_size += 5;
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
  if (this->_internal_vel_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_vel_type());
  }

  // bool teaching_mode = 30;
  if (this->_internal_teaching_mode() != 0) {
    total_size += 3;
  }

  // bool bypass_singular = 40;
  if (this->_internal_bypass_singular() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveLReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveLReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveLReq::GetClassData() const { return &_class_data_; }


void MoveLReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveLReq*>(&to_msg);
  auto& from = static_cast<const MoveLReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveLReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target()->::Nrmk::IndyFramework::TargetP::MergeFrom(
          from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(
          from._internal_blending());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(
          from._internal_post_condition());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = from._internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    _this->_internal_set_vel_ratio(from._internal_vel_ratio());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = from._internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    _this->_internal_set_acc_ratio(from._internal_acc_ratio());
  }
  if (from._internal_vel_type() != 0) {
    _this->_internal_set_vel_type(from._internal_vel_type());
  }
  if (from._internal_teaching_mode() != 0) {
    _this->_internal_set_teaching_mode(from._internal_teaching_mode());
  }
  if (from._internal_bypass_singular() != 0) {
    _this->_internal_set_bypass_singular(from._internal_bypass_singular());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveLReq::CopyFrom(const MoveLReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveLReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveLReq::IsInitialized() const {
  return true;
}

void MoveLReq::InternalSwap(MoveLReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.bypass_singular_)
      + sizeof(MoveLReq::_impl_.bypass_singular_)
      - PROTOBUF_FIELD_OFFSET(MoveLReq, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::google::protobuf::Metadata MoveLReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[13]);
}
// ===================================================================

class MoveLTReq::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveLTReq>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MoveLTReq, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::TargetP& target(const MoveLTReq* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveLTReq* msg);
  static void set_has_blending(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveLTReq* msg);
  static void set_has_post_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Nrmk::IndyFramework::TargetP& MoveLTReq::_Internal::target(const MoveLTReq* msg) {
  return *msg->_impl_.target_;
}
const ::Nrmk::IndyFramework::BlendingType& MoveLTReq::_Internal::blending(const MoveLTReq* msg) {
  return *msg->_impl_.blending_;
}
const ::Nrmk::IndyFramework::MotionCondition& MoveLTReq::_Internal::post_condition(const MoveLTReq* msg) {
  return *msg->_impl_.post_condition_;
}
MoveLTReq::MoveLTReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveLTReq)
}
MoveLTReq::MoveLTReq(const MoveLTReq& from) : ::google::protobuf::Message() {
  MoveLTReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.time_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.target_ = new ::Nrmk::IndyFramework::TargetP(*from._impl_.target_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.blending_ = new ::Nrmk::IndyFramework::BlendingType(*from._impl_.blending_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from._impl_.post_condition_);
  }
  _this->_impl_.time_ = from._impl_.time_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveLTReq)
}
inline void MoveLTReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.time_){0},
  };
}
MoveLTReq::~MoveLTReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveLTReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveLTReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_;
  if (this != internal_default_instance()) delete _impl_.blending_;
  if (this != internal_default_instance()) delete _impl_.post_condition_;
}
void MoveLTReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveLTReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveLTReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.target_ != nullptr);
      _impl_.target_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.blending_ != nullptr);
      _impl_.blending_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.post_condition_ != nullptr);
      _impl_.post_condition_->Clear();
    }
  }
  _impl_.time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveLTReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> MoveLTReq::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MoveLTReq, _impl_._has_bits_),
    0, // no _extensions_
    20, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294443000,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MoveLTReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 2, 2, PROTOBUF_FIELD_OFFSET(MoveLTReq, _impl_.post_condition_)}},
    // .Nrmk.IndyFramework.TargetP target = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MoveLTReq, _impl_.target_)}},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MoveLTReq, _impl_.blending_)}},
    // float time = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MoveLTReq, _impl_.time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.TargetP target = 1;
    {PROTOBUF_FIELD_OFFSET(MoveLTReq, _impl_.target_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {PROTOBUF_FIELD_OFFSET(MoveLTReq, _impl_.blending_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float time = 3;
    {PROTOBUF_FIELD_OFFSET(MoveLTReq, _impl_.time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
    {PROTOBUF_FIELD_OFFSET(MoveLTReq, _impl_.post_condition_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::TargetP>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::BlendingType>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::MotionCondition>()},
  }}, {{
  }},
};

::uint8_t* MoveLTReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveLTReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.TargetP target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::blending(this),
        _Internal::blending(this).GetCachedSize(), target, stream);
  }

  // float time = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_time(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::post_condition(this),
        _Internal::post_condition(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveLTReq)
  return target;
}

::size_t MoveLTReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveLTReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .Nrmk.IndyFramework.TargetP target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.target_);
    }

    // .Nrmk.IndyFramework.BlendingType blending = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.blending_);
    }

    // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.post_condition_);
    }

  }
  // float time = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveLTReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveLTReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveLTReq::GetClassData() const { return &_class_data_; }


void MoveLTReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveLTReq*>(&to_msg);
  auto& from = static_cast<const MoveLTReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveLTReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target()->::Nrmk::IndyFramework::TargetP::MergeFrom(
          from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(
          from._internal_blending());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(
          from._internal_post_condition());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = from._internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveLTReq::CopyFrom(const MoveLTReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveLTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveLTReq::IsInitialized() const {
  return true;
}

void MoveLTReq::InternalSwap(MoveLTReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveLTReq, _impl_.time_)
      + sizeof(MoveLTReq::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(MoveLTReq, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::google::protobuf::Metadata MoveLTReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[14]);
}
// ===================================================================

class MoveAxisReq::_Internal {
 public:
};

MoveAxisReq::MoveAxisReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveAxisReq)
}
MoveAxisReq::MoveAxisReq(const MoveAxisReq& from) : ::google::protobuf::Message() {
  MoveAxisReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_mm_){from._impl_.start_mm_},
      decltype(_impl_.target_mm_){from._impl_.target_mm_},
      decltype(_impl_.vel_percentage_){},
      decltype(_impl_.acc_percentage_){},
      decltype(_impl_.is_absolute_){},
      decltype(_impl_.teaching_mode_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.vel_percentage_, &from._impl_.vel_percentage_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.teaching_mode_) -
    reinterpret_cast<char*>(&_impl_.vel_percentage_)) + sizeof(_impl_.teaching_mode_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveAxisReq)
}
inline void MoveAxisReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.start_mm_){arena},
      decltype(_impl_.target_mm_){arena},
      decltype(_impl_.vel_percentage_){0},
      decltype(_impl_.acc_percentage_){0},
      decltype(_impl_.is_absolute_){false},
      decltype(_impl_.teaching_mode_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
MoveAxisReq::~MoveAxisReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveAxisReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveAxisReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.start_mm_.~RepeatedField();
  _impl_.target_mm_.~RepeatedField();
}
void MoveAxisReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveAxisReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveAxisReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_start_mm()->Clear();
  _internal_mutable_target_mm()->Clear();
  ::memset(&_impl_.vel_percentage_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.teaching_mode_) -
      reinterpret_cast<char*>(&_impl_.vel_percentage_)) + sizeof(_impl_.teaching_mode_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveAxisReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> MoveAxisReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966752,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MoveAxisReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float start_mm = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MoveAxisReq, _impl_.start_mm_)}},
    // repeated float target_mm = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MoveAxisReq, _impl_.target_mm_)}},
    // float vel_percentage = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MoveAxisReq, _impl_.vel_percentage_)}},
    // float acc_percentage = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(MoveAxisReq, _impl_.acc_percentage_)}},
    // bool is_absolute = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MoveAxisReq, _impl_.is_absolute_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MoveAxisReq, _impl_.is_absolute_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float start_mm = 1;
    {PROTOBUF_FIELD_OFFSET(MoveAxisReq, _impl_.start_mm_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float target_mm = 2;
    {PROTOBUF_FIELD_OFFSET(MoveAxisReq, _impl_.target_mm_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // float vel_percentage = 3;
    {PROTOBUF_FIELD_OFFSET(MoveAxisReq, _impl_.vel_percentage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float acc_percentage = 4;
    {PROTOBUF_FIELD_OFFSET(MoveAxisReq, _impl_.acc_percentage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool is_absolute = 5;
    {PROTOBUF_FIELD_OFFSET(MoveAxisReq, _impl_.is_absolute_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool teaching_mode = 10;
    {PROTOBUF_FIELD_OFFSET(MoveAxisReq, _impl_.teaching_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* MoveAxisReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveAxisReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float start_mm = 1;
  if (this->_internal_start_mm_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_start_mm(), target);
  }

  // repeated float target_mm = 2;
  if (this->_internal_target_mm_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_target_mm(), target);
  }

  // float vel_percentage = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_percentage = this->_internal_vel_percentage();
  ::uint32_t raw_vel_percentage;
  memcpy(&raw_vel_percentage, &tmp_vel_percentage, sizeof(tmp_vel_percentage));
  if (raw_vel_percentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_vel_percentage(), target);
  }

  // float acc_percentage = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_percentage = this->_internal_acc_percentage();
  ::uint32_t raw_acc_percentage;
  memcpy(&raw_acc_percentage, &tmp_acc_percentage, sizeof(tmp_acc_percentage));
  if (raw_acc_percentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_acc_percentage(), target);
  }

  // bool is_absolute = 5;
  if (this->_internal_is_absolute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_absolute(), target);
  }

  // bool teaching_mode = 10;
  if (this->_internal_teaching_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_teaching_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveAxisReq)
  return target;
}

::size_t MoveAxisReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveAxisReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float start_mm = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_start_mm_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float target_mm = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_target_mm_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // float vel_percentage = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_percentage = this->_internal_vel_percentage();
  ::uint32_t raw_vel_percentage;
  memcpy(&raw_vel_percentage, &tmp_vel_percentage, sizeof(tmp_vel_percentage));
  if (raw_vel_percentage != 0) {
    total_size += 5;
  }

  // float acc_percentage = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_percentage = this->_internal_acc_percentage();
  ::uint32_t raw_acc_percentage;
  memcpy(&raw_acc_percentage, &tmp_acc_percentage, sizeof(tmp_acc_percentage));
  if (raw_acc_percentage != 0) {
    total_size += 5;
  }

  // bool is_absolute = 5;
  if (this->_internal_is_absolute() != 0) {
    total_size += 2;
  }

  // bool teaching_mode = 10;
  if (this->_internal_teaching_mode() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveAxisReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveAxisReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveAxisReq::GetClassData() const { return &_class_data_; }


void MoveAxisReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveAxisReq*>(&to_msg);
  auto& from = static_cast<const MoveAxisReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveAxisReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_start_mm()->MergeFrom(from._internal_start_mm());
  _this->_internal_mutable_target_mm()->MergeFrom(from._internal_target_mm());
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_percentage = from._internal_vel_percentage();
  ::uint32_t raw_vel_percentage;
  memcpy(&raw_vel_percentage, &tmp_vel_percentage, sizeof(tmp_vel_percentage));
  if (raw_vel_percentage != 0) {
    _this->_internal_set_vel_percentage(from._internal_vel_percentage());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_percentage = from._internal_acc_percentage();
  ::uint32_t raw_acc_percentage;
  memcpy(&raw_acc_percentage, &tmp_acc_percentage, sizeof(tmp_acc_percentage));
  if (raw_acc_percentage != 0) {
    _this->_internal_set_acc_percentage(from._internal_acc_percentage());
  }
  if (from._internal_is_absolute() != 0) {
    _this->_internal_set_is_absolute(from._internal_is_absolute());
  }
  if (from._internal_teaching_mode() != 0) {
    _this->_internal_set_teaching_mode(from._internal_teaching_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveAxisReq::CopyFrom(const MoveAxisReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveAxisReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveAxisReq::IsInitialized() const {
  return true;
}

void MoveAxisReq::InternalSwap(MoveAxisReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.start_mm_.InternalSwap(&other->_impl_.start_mm_);
  _impl_.target_mm_.InternalSwap(&other->_impl_.target_mm_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveAxisReq, _impl_.teaching_mode_)
      + sizeof(MoveAxisReq::_impl_.teaching_mode_)
      - PROTOBUF_FIELD_OFFSET(MoveAxisReq, _impl_.vel_percentage_)>(
          reinterpret_cast<char*>(&_impl_.vel_percentage_),
          reinterpret_cast<char*>(&other->_impl_.vel_percentage_));
}

::google::protobuf::Metadata MoveAxisReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[15]);
}
// ===================================================================

class MoveCReq::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveCReq>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::TargetC& target(const MoveCReq* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveCReq* msg);
  static void set_has_blending(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveCReq* msg);
  static void set_has_post_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Nrmk::IndyFramework::TargetC& MoveCReq::_Internal::target(const MoveCReq* msg) {
  return *msg->_impl_.target_;
}
const ::Nrmk::IndyFramework::BlendingType& MoveCReq::_Internal::blending(const MoveCReq* msg) {
  return *msg->_impl_.blending_;
}
const ::Nrmk::IndyFramework::MotionCondition& MoveCReq::_Internal::post_condition(const MoveCReq* msg) {
  return *msg->_impl_.post_condition_;
}
MoveCReq::MoveCReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveCReq)
}
MoveCReq::MoveCReq(const MoveCReq& from) : ::google::protobuf::Message() {
  MoveCReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.angle_){},
      decltype(_impl_.setting_type_){},
      decltype(_impl_.move_type_){},
      decltype(_impl_.vel_ratio_){},
      decltype(_impl_.acc_ratio_){},
      decltype(_impl_.vel_type_){},
      decltype(_impl_.teaching_mode_){},
      decltype(_impl_.bypass_singular_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.target_ = new ::Nrmk::IndyFramework::TargetC(*from._impl_.target_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.blending_ = new ::Nrmk::IndyFramework::BlendingType(*from._impl_.blending_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from._impl_.post_condition_);
  }
  ::memcpy(&_impl_.angle_, &from._impl_.angle_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.bypass_singular_) -
    reinterpret_cast<char*>(&_impl_.angle_)) + sizeof(_impl_.bypass_singular_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveCReq)
}
inline void MoveCReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.angle_){0},
      decltype(_impl_.setting_type_){0},
      decltype(_impl_.move_type_){0},
      decltype(_impl_.vel_ratio_){0},
      decltype(_impl_.acc_ratio_){0},
      decltype(_impl_.vel_type_){0},
      decltype(_impl_.teaching_mode_){false},
      decltype(_impl_.bypass_singular_){false},
  };
}
MoveCReq::~MoveCReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveCReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveCReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_;
  if (this != internal_default_instance()) delete _impl_.blending_;
  if (this != internal_default_instance()) delete _impl_.post_condition_;
}
void MoveCReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveCReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveCReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.target_ != nullptr);
      _impl_.target_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.blending_ != nullptr);
      _impl_.blending_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.post_condition_ != nullptr);
      _impl_.post_condition_->Clear();
    }
  }
  ::memset(&_impl_.angle_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.bypass_singular_) -
      reinterpret_cast<char*>(&_impl_.angle_)) + sizeof(_impl_.bypass_singular_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveCReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 3, 0, 7> MoveCReq::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_._has_bits_),
    0, // no _extensions_
    40, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3737647608,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MoveCReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.TargetC target = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.target_)}},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.blending_)}},
    // float angle = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.angle_)}},
    // float vel_ratio = 20;
    {::_pbi::TcParser::FastF32S2,
     {421, 63, 0, PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.vel_ratio_)}},
    // float acc_ratio = 21;
    {::_pbi::TcParser::FastF32S2,
     {429, 63, 0, PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.acc_ratio_)}},
    // .Nrmk.IndyFramework.VelocityModeType vel_type = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.vel_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool bypass_singular = 40;
    {::_pbi::TcParser::FastV8S2,
     {704, 63, 0, PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.bypass_singular_)}},
    // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
    {::_pbi::TcParser::FastMtS2,
     {458, 2, 2, PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.post_condition_)}},
    // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MoveCReq, _impl_.setting_type_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.setting_type_)}},
    // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MoveCReq, _impl_.move_type_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.move_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool teaching_mode = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.teaching_mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    40, 0, 1,
    65534, 10,
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.TargetC target = 1;
    {PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.target_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.blending_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float angle = 3;
    {PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
    {PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.setting_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
    {PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.move_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float vel_ratio = 20;
    {PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.vel_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float acc_ratio = 21;
    {PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.acc_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.VelocityModeType vel_type = 22;
    {PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.vel_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
    {PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.post_condition_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool teaching_mode = 30;
    {PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.teaching_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool bypass_singular = 40;
    {PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.bypass_singular_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::TargetC>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::BlendingType>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::MotionCondition>()},
  }}, {{
  }},
};

::uint8_t* MoveCReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveCReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.TargetC target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::blending(this),
        _Internal::blending(this).GetCachedSize(), target, stream);
  }

  // float angle = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  ::uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_angle(), target);
  }

  // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
  if (this->_internal_setting_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_setting_type(), target);
  }

  // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
  if (this->_internal_move_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_move_type(), target);
  }

  // float vel_ratio = 20;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        20, this->_internal_vel_ratio(), target);
  }

  // float acc_ratio = 21;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        21, this->_internal_acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 22;
  if (this->_internal_vel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        22, this->_internal_vel_type(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::post_condition(this),
        _Internal::post_condition(this).GetCachedSize(), target, stream);
  }

  // bool teaching_mode = 30;
  if (this->_internal_teaching_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        30, this->_internal_teaching_mode(), target);
  }

  // bool bypass_singular = 40;
  if (this->_internal_bypass_singular() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        40, this->_internal_bypass_singular(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveCReq)
  return target;
}

::size_t MoveCReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveCReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .Nrmk.IndyFramework.TargetC target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.target_);
    }

    // .Nrmk.IndyFramework.BlendingType blending = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.blending_);
    }

    // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.post_condition_);
    }

  }
  // float angle = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  ::uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 5;
  }

  // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
  if (this->_internal_setting_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_setting_type());
  }

  // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
  if (this->_internal_move_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_move_type());
  }

  // float vel_ratio = 20;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    total_size += 6;
  }

  // float acc_ratio = 21;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    total_size += 6;
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 22;
  if (this->_internal_vel_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_vel_type());
  }

  // bool teaching_mode = 30;
  if (this->_internal_teaching_mode() != 0) {
    total_size += 3;
  }

  // bool bypass_singular = 40;
  if (this->_internal_bypass_singular() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveCReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveCReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveCReq::GetClassData() const { return &_class_data_; }


void MoveCReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveCReq*>(&to_msg);
  auto& from = static_cast<const MoveCReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveCReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target()->::Nrmk::IndyFramework::TargetC::MergeFrom(
          from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(
          from._internal_blending());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(
          from._internal_post_condition());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angle = from._internal_angle();
  ::uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _this->_internal_set_angle(from._internal_angle());
  }
  if (from._internal_setting_type() != 0) {
    _this->_internal_set_setting_type(from._internal_setting_type());
  }
  if (from._internal_move_type() != 0) {
    _this->_internal_set_move_type(from._internal_move_type());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = from._internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    _this->_internal_set_vel_ratio(from._internal_vel_ratio());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = from._internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    _this->_internal_set_acc_ratio(from._internal_acc_ratio());
  }
  if (from._internal_vel_type() != 0) {
    _this->_internal_set_vel_type(from._internal_vel_type());
  }
  if (from._internal_teaching_mode() != 0) {
    _this->_internal_set_teaching_mode(from._internal_teaching_mode());
  }
  if (from._internal_bypass_singular() != 0) {
    _this->_internal_set_bypass_singular(from._internal_bypass_singular());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveCReq::CopyFrom(const MoveCReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveCReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveCReq::IsInitialized() const {
  return true;
}

void MoveCReq::InternalSwap(MoveCReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.bypass_singular_)
      + sizeof(MoveCReq::_impl_.bypass_singular_)
      - PROTOBUF_FIELD_OFFSET(MoveCReq, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::google::protobuf::Metadata MoveCReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[16]);
}
// ===================================================================

class MoveCTReq::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveCTReq>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::TargetC& target(const MoveCTReq* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveCTReq* msg);
  static void set_has_blending(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveCTReq* msg);
  static void set_has_post_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Nrmk::IndyFramework::TargetC& MoveCTReq::_Internal::target(const MoveCTReq* msg) {
  return *msg->_impl_.target_;
}
const ::Nrmk::IndyFramework::BlendingType& MoveCTReq::_Internal::blending(const MoveCTReq* msg) {
  return *msg->_impl_.blending_;
}
const ::Nrmk::IndyFramework::MotionCondition& MoveCTReq::_Internal::post_condition(const MoveCTReq* msg) {
  return *msg->_impl_.post_condition_;
}
MoveCTReq::MoveCTReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveCTReq)
}
MoveCTReq::MoveCTReq(const MoveCTReq& from) : ::google::protobuf::Message() {
  MoveCTReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.angle_){},
      decltype(_impl_.setting_type_){},
      decltype(_impl_.move_type_){},
      decltype(_impl_.time_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.target_ = new ::Nrmk::IndyFramework::TargetC(*from._impl_.target_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.blending_ = new ::Nrmk::IndyFramework::BlendingType(*from._impl_.blending_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from._impl_.post_condition_);
  }
  ::memcpy(&_impl_.angle_, &from._impl_.angle_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.angle_)) + sizeof(_impl_.time_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveCTReq)
}
inline void MoveCTReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.angle_){0},
      decltype(_impl_.setting_type_){0},
      decltype(_impl_.move_type_){0},
      decltype(_impl_.time_){0},
  };
}
MoveCTReq::~MoveCTReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveCTReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveCTReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_;
  if (this != internal_default_instance()) delete _impl_.blending_;
  if (this != internal_default_instance()) delete _impl_.post_condition_;
}
void MoveCTReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveCTReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveCTReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.target_ != nullptr);
      _impl_.target_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.blending_ != nullptr);
      _impl_.blending_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.post_condition_ != nullptr);
      _impl_.post_condition_->Clear();
    }
  }
  ::memset(&_impl_.angle_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.angle_)) + sizeof(_impl_.time_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveCTReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 7, 3, 0, 2> MoveCTReq::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_._has_bits_),
    0, // no _extensions_
    25, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4277664248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MoveCTReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float time = 20;
    {::_pbi::TcParser::FastF32S2,
     {421, 63, 0, PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_.time_)}},
    // .Nrmk.IndyFramework.TargetC target = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_.target_)}},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_.blending_)}},
    // float angle = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_.angle_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.TargetC target = 1;
    {PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_.target_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_.blending_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float angle = 3;
    {PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_.angle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
    {PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_.setting_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
    {PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_.move_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float time = 20;
    {PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_.time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
    {PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_.post_condition_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::TargetC>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::BlendingType>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::MotionCondition>()},
  }}, {{
  }},
};

::uint8_t* MoveCTReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveCTReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.TargetC target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::blending(this),
        _Internal::blending(this).GetCachedSize(), target, stream);
  }

  // float angle = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  ::uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_angle(), target);
  }

  // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
  if (this->_internal_setting_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_setting_type(), target);
  }

  // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
  if (this->_internal_move_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_move_type(), target);
  }

  // float time = 20;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        20, this->_internal_time(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::post_condition(this),
        _Internal::post_condition(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveCTReq)
  return target;
}

::size_t MoveCTReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveCTReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .Nrmk.IndyFramework.TargetC target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.target_);
    }

    // .Nrmk.IndyFramework.BlendingType blending = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.blending_);
    }

    // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.post_condition_);
    }

  }
  // float angle = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  ::uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 5;
  }

  // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
  if (this->_internal_setting_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_setting_type());
  }

  // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
  if (this->_internal_move_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_move_type());
  }

  // float time = 20;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 6;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveCTReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveCTReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveCTReq::GetClassData() const { return &_class_data_; }


void MoveCTReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveCTReq*>(&to_msg);
  auto& from = static_cast<const MoveCTReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveCTReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target()->::Nrmk::IndyFramework::TargetC::MergeFrom(
          from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(
          from._internal_blending());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(
          from._internal_post_condition());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angle = from._internal_angle();
  ::uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _this->_internal_set_angle(from._internal_angle());
  }
  if (from._internal_setting_type() != 0) {
    _this->_internal_set_setting_type(from._internal_setting_type());
  }
  if (from._internal_move_type() != 0) {
    _this->_internal_set_move_type(from._internal_move_type());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = from._internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveCTReq::CopyFrom(const MoveCTReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveCTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveCTReq::IsInitialized() const {
  return true;
}

void MoveCTReq::InternalSwap(MoveCTReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_.time_)
      + sizeof(MoveCTReq::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(MoveCTReq, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::google::protobuf::Metadata MoveCTReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[17]);
}
// ===================================================================

class MoveJointTrajReq::_Internal {
 public:
};

void MoveJointTrajReq::clear_q_list() {
  _internal_mutable_q_list()->Clear();
}
void MoveJointTrajReq::clear_qdot_list() {
  _internal_mutable_qdot_list()->Clear();
}
void MoveJointTrajReq::clear_qddot_list() {
  _internal_mutable_qddot_list()->Clear();
}
MoveJointTrajReq::MoveJointTrajReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveJointTrajReq)
}
MoveJointTrajReq::MoveJointTrajReq(const MoveJointTrajReq& from) : ::google::protobuf::Message() {
  MoveJointTrajReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.q_list_){from._impl_.q_list_},
      decltype(_impl_.qdot_list_){from._impl_.qdot_list_},
      decltype(_impl_.qddot_list_){from._impl_.qddot_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveJointTrajReq)
}
inline void MoveJointTrajReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.q_list_){arena},
      decltype(_impl_.qdot_list_){arena},
      decltype(_impl_.qddot_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
MoveJointTrajReq::~MoveJointTrajReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveJointTrajReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveJointTrajReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.q_list_.~RepeatedPtrField();
  _impl_.qdot_list_.~RepeatedPtrField();
  _impl_.qddot_list_.~RepeatedPtrField();
}
void MoveJointTrajReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveJointTrajReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveJointTrajReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_q_list()->Clear();
  _internal_mutable_qdot_list()->Clear();
  _internal_mutable_qddot_list()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveJointTrajReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> MoveJointTrajReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MoveJointTrajReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .Nrmk.IndyFramework.Vector q_list = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MoveJointTrajReq, _impl_.q_list_)}},
    // repeated .Nrmk.IndyFramework.Vector qdot_list = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(MoveJointTrajReq, _impl_.qdot_list_)}},
    // repeated .Nrmk.IndyFramework.Vector qddot_list = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(MoveJointTrajReq, _impl_.qddot_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.Vector q_list = 1;
    {PROTOBUF_FIELD_OFFSET(MoveJointTrajReq, _impl_.q_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.Vector qdot_list = 2;
    {PROTOBUF_FIELD_OFFSET(MoveJointTrajReq, _impl_.qdot_list_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.Vector qddot_list = 3;
    {PROTOBUF_FIELD_OFFSET(MoveJointTrajReq, _impl_.qddot_list_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Vector>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Vector>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Vector>()},
  }}, {{
  }},
};

::uint8_t* MoveJointTrajReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveJointTrajReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.Vector q_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_q_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_q_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.Vector qdot_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_qdot_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_qdot_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.Vector qddot_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_qddot_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_qddot_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveJointTrajReq)
  return target;
}

::size_t MoveJointTrajReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveJointTrajReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.Vector q_list = 1;
  total_size += 1UL * this->_internal_q_list_size();
  for (const auto& msg : this->_internal_q_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.Vector qdot_list = 2;
  total_size += 1UL * this->_internal_qdot_list_size();
  for (const auto& msg : this->_internal_qdot_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.Vector qddot_list = 3;
  total_size += 1UL * this->_internal_qddot_list_size();
  for (const auto& msg : this->_internal_qddot_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveJointTrajReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveJointTrajReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveJointTrajReq::GetClassData() const { return &_class_data_; }


void MoveJointTrajReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveJointTrajReq*>(&to_msg);
  auto& from = static_cast<const MoveJointTrajReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveJointTrajReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_q_list()->MergeFrom(from._internal_q_list());
  _this->_internal_mutable_qdot_list()->MergeFrom(from._internal_qdot_list());
  _this->_internal_mutable_qddot_list()->MergeFrom(from._internal_qddot_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveJointTrajReq::CopyFrom(const MoveJointTrajReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveJointTrajReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveJointTrajReq::IsInitialized() const {
  return true;
}

void MoveJointTrajReq::InternalSwap(MoveJointTrajReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.q_list_.InternalSwap(&other->_impl_.q_list_);
  _impl_.qdot_list_.InternalSwap(&other->_impl_.qdot_list_);
  _impl_.qddot_list_.InternalSwap(&other->_impl_.qddot_list_);
}

::google::protobuf::Metadata MoveJointTrajReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[18]);
}
// ===================================================================

class MoveTaskTrajReq::_Internal {
 public:
};

void MoveTaskTrajReq::clear_p_list() {
  _internal_mutable_p_list()->Clear();
}
void MoveTaskTrajReq::clear_pdot_list() {
  _internal_mutable_pdot_list()->Clear();
}
void MoveTaskTrajReq::clear_pddot_list() {
  _internal_mutable_pddot_list()->Clear();
}
MoveTaskTrajReq::MoveTaskTrajReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveTaskTrajReq)
}
MoveTaskTrajReq::MoveTaskTrajReq(const MoveTaskTrajReq& from) : ::google::protobuf::Message() {
  MoveTaskTrajReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.p_list_){from._impl_.p_list_},
      decltype(_impl_.pdot_list_){from._impl_.pdot_list_},
      decltype(_impl_.pddot_list_){from._impl_.pddot_list_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveTaskTrajReq)
}
inline void MoveTaskTrajReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.p_list_){arena},
      decltype(_impl_.pdot_list_){arena},
      decltype(_impl_.pddot_list_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
MoveTaskTrajReq::~MoveTaskTrajReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveTaskTrajReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveTaskTrajReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.p_list_.~RepeatedPtrField();
  _impl_.pdot_list_.~RepeatedPtrField();
  _impl_.pddot_list_.~RepeatedPtrField();
}
void MoveTaskTrajReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveTaskTrajReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveTaskTrajReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_p_list()->Clear();
  _internal_mutable_pdot_list()->Clear();
  _internal_mutable_pddot_list()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveTaskTrajReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> MoveTaskTrajReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MoveTaskTrajReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .Nrmk.IndyFramework.Vector p_list = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MoveTaskTrajReq, _impl_.p_list_)}},
    // repeated .Nrmk.IndyFramework.Vector pdot_list = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(MoveTaskTrajReq, _impl_.pdot_list_)}},
    // repeated .Nrmk.IndyFramework.Vector pddot_list = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(MoveTaskTrajReq, _impl_.pddot_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.Vector p_list = 1;
    {PROTOBUF_FIELD_OFFSET(MoveTaskTrajReq, _impl_.p_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.Vector pdot_list = 2;
    {PROTOBUF_FIELD_OFFSET(MoveTaskTrajReq, _impl_.pdot_list_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.Vector pddot_list = 3;
    {PROTOBUF_FIELD_OFFSET(MoveTaskTrajReq, _impl_.pddot_list_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Vector>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Vector>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Vector>()},
  }}, {{
  }},
};

::uint8_t* MoveTaskTrajReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveTaskTrajReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.Vector p_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_p_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_p_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.Vector pdot_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pdot_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_pdot_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.Vector pddot_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pddot_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_pddot_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveTaskTrajReq)
  return target;
}

::size_t MoveTaskTrajReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveTaskTrajReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.Vector p_list = 1;
  total_size += 1UL * this->_internal_p_list_size();
  for (const auto& msg : this->_internal_p_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.Vector pdot_list = 2;
  total_size += 1UL * this->_internal_pdot_list_size();
  for (const auto& msg : this->_internal_pdot_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.Vector pddot_list = 3;
  total_size += 1UL * this->_internal_pddot_list_size();
  for (const auto& msg : this->_internal_pddot_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveTaskTrajReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveTaskTrajReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveTaskTrajReq::GetClassData() const { return &_class_data_; }


void MoveTaskTrajReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveTaskTrajReq*>(&to_msg);
  auto& from = static_cast<const MoveTaskTrajReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveTaskTrajReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_p_list()->MergeFrom(from._internal_p_list());
  _this->_internal_mutable_pdot_list()->MergeFrom(from._internal_pdot_list());
  _this->_internal_mutable_pddot_list()->MergeFrom(from._internal_pddot_list());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveTaskTrajReq::CopyFrom(const MoveTaskTrajReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveTaskTrajReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveTaskTrajReq::IsInitialized() const {
  return true;
}

void MoveTaskTrajReq::InternalSwap(MoveTaskTrajReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.p_list_.InternalSwap(&other->_impl_.p_list_);
  _impl_.pdot_list_.InternalSwap(&other->_impl_.pdot_list_);
  _impl_.pddot_list_.InternalSwap(&other->_impl_.pddot_list_);
}

::google::protobuf::Metadata MoveTaskTrajReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[19]);
}
// ===================================================================

class MoveGcodeReq::_Internal {
 public:
};

MoveGcodeReq::MoveGcodeReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveGcodeReq)
}
MoveGcodeReq::MoveGcodeReq(const MoveGcodeReq& from) : ::google::protobuf::Message() {
  MoveGcodeReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gcode_file_){},
      decltype(_impl_.is_smooth_mode_){},
      decltype(_impl_.smooth_radius_){},
      decltype(_impl_.vel_ratio_){},
      decltype(_impl_.acc_ratio_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.gcode_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gcode_file_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gcode_file().empty()) {
    _this->_impl_.gcode_file_.Set(from._internal_gcode_file(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_smooth_mode_, &from._impl_.is_smooth_mode_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.acc_ratio_) -
    reinterpret_cast<char*>(&_impl_.is_smooth_mode_)) + sizeof(_impl_.acc_ratio_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveGcodeReq)
}
inline void MoveGcodeReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.gcode_file_){},
      decltype(_impl_.is_smooth_mode_){false},
      decltype(_impl_.smooth_radius_){0},
      decltype(_impl_.vel_ratio_){0},
      decltype(_impl_.acc_ratio_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.gcode_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gcode_file_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
MoveGcodeReq::~MoveGcodeReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveGcodeReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveGcodeReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gcode_file_.Destroy();
}
void MoveGcodeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveGcodeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveGcodeReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gcode_file_.ClearToEmpty();
  ::memset(&_impl_.is_smooth_mode_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.acc_ratio_) -
      reinterpret_cast<char*>(&_impl_.is_smooth_mode_)) + sizeof(_impl_.acc_ratio_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveGcodeReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 50, 2> MoveGcodeReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MoveGcodeReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string gcode_file = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MoveGcodeReq, _impl_.gcode_file_)}},
    // bool is_smooth_mode = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MoveGcodeReq, _impl_.is_smooth_mode_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MoveGcodeReq, _impl_.is_smooth_mode_)}},
    // float smooth_radius = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MoveGcodeReq, _impl_.smooth_radius_)}},
    // float vel_ratio = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(MoveGcodeReq, _impl_.vel_ratio_)}},
    // float acc_ratio = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(MoveGcodeReq, _impl_.acc_ratio_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string gcode_file = 1;
    {PROTOBUF_FIELD_OFFSET(MoveGcodeReq, _impl_.gcode_file_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_smooth_mode = 2;
    {PROTOBUF_FIELD_OFFSET(MoveGcodeReq, _impl_.is_smooth_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float smooth_radius = 3;
    {PROTOBUF_FIELD_OFFSET(MoveGcodeReq, _impl_.smooth_radius_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float vel_ratio = 4;
    {PROTOBUF_FIELD_OFFSET(MoveGcodeReq, _impl_.vel_ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float acc_ratio = 5;
    {PROTOBUF_FIELD_OFFSET(MoveGcodeReq, _impl_.acc_ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\37\12\0\0\0\0\0\0"
    "Nrmk.IndyFramework.MoveGcodeReq"
    "gcode_file"
  }},
};

::uint8_t* MoveGcodeReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveGcodeReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string gcode_file = 1;
  if (!this->_internal_gcode_file().empty()) {
    const std::string& _s = this->_internal_gcode_file();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.MoveGcodeReq.gcode_file");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool is_smooth_mode = 2;
  if (this->_internal_is_smooth_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_smooth_mode(), target);
  }

  // float smooth_radius = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_smooth_radius = this->_internal_smooth_radius();
  ::uint32_t raw_smooth_radius;
  memcpy(&raw_smooth_radius, &tmp_smooth_radius, sizeof(tmp_smooth_radius));
  if (raw_smooth_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_smooth_radius(), target);
  }

  // float vel_ratio = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_vel_ratio(), target);
  }

  // float acc_ratio = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_acc_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveGcodeReq)
  return target;
}

::size_t MoveGcodeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveGcodeReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gcode_file = 1;
  if (!this->_internal_gcode_file().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_gcode_file());
  }

  // bool is_smooth_mode = 2;
  if (this->_internal_is_smooth_mode() != 0) {
    total_size += 2;
  }

  // float smooth_radius = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_smooth_radius = this->_internal_smooth_radius();
  ::uint32_t raw_smooth_radius;
  memcpy(&raw_smooth_radius, &tmp_smooth_radius, sizeof(tmp_smooth_radius));
  if (raw_smooth_radius != 0) {
    total_size += 5;
  }

  // float vel_ratio = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    total_size += 5;
  }

  // float acc_ratio = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveGcodeReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveGcodeReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveGcodeReq::GetClassData() const { return &_class_data_; }


void MoveGcodeReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveGcodeReq*>(&to_msg);
  auto& from = static_cast<const MoveGcodeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveGcodeReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gcode_file().empty()) {
    _this->_internal_set_gcode_file(from._internal_gcode_file());
  }
  if (from._internal_is_smooth_mode() != 0) {
    _this->_internal_set_is_smooth_mode(from._internal_is_smooth_mode());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_smooth_radius = from._internal_smooth_radius();
  ::uint32_t raw_smooth_radius;
  memcpy(&raw_smooth_radius, &tmp_smooth_radius, sizeof(tmp_smooth_radius));
  if (raw_smooth_radius != 0) {
    _this->_internal_set_smooth_radius(from._internal_smooth_radius());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = from._internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    _this->_internal_set_vel_ratio(from._internal_vel_ratio());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = from._internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    _this->_internal_set_acc_ratio(from._internal_acc_ratio());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveGcodeReq::CopyFrom(const MoveGcodeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveGcodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveGcodeReq::IsInitialized() const {
  return true;
}

void MoveGcodeReq::InternalSwap(MoveGcodeReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gcode_file_, lhs_arena,
                                       &other->_impl_.gcode_file_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveGcodeReq, _impl_.acc_ratio_)
      + sizeof(MoveGcodeReq::_impl_.acc_ratio_)
      - PROTOBUF_FIELD_OFFSET(MoveGcodeReq, _impl_.is_smooth_mode_)>(
          reinterpret_cast<char*>(&_impl_.is_smooth_mode_),
          reinterpret_cast<char*>(&other->_impl_.is_smooth_mode_));
}

::google::protobuf::Metadata MoveGcodeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[20]);
}
// ===================================================================

class MoveConveyorReq::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveConveyorReq>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MoveConveyorReq, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveConveyorReq* msg);
  static void set_has_post_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::MotionCondition& MoveConveyorReq::_Internal::post_condition(const MoveConveyorReq* msg) {
  return *msg->_impl_.post_condition_;
}
MoveConveyorReq::MoveConveyorReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveConveyorReq)
}
MoveConveyorReq::MoveConveyorReq(const MoveConveyorReq& from) : ::google::protobuf::Message() {
  MoveConveyorReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.teaching_mode_){},
      decltype(_impl_.bypass_singular_){},
      decltype(_impl_.acc_ratio_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from._impl_.post_condition_);
  }
  ::memcpy(&_impl_.teaching_mode_, &from._impl_.teaching_mode_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.acc_ratio_) -
    reinterpret_cast<char*>(&_impl_.teaching_mode_)) + sizeof(_impl_.acc_ratio_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveConveyorReq)
}
inline void MoveConveyorReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.teaching_mode_){false},
      decltype(_impl_.bypass_singular_){false},
      decltype(_impl_.acc_ratio_){0},
  };
}
MoveConveyorReq::~MoveConveyorReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveConveyorReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveConveyorReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.post_condition_;
}
void MoveConveyorReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveConveyorReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveConveyorReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.post_condition_ != nullptr);
    _impl_.post_condition_->Clear();
  }
  ::memset(&_impl_.teaching_mode_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.acc_ratio_) -
      reinterpret_cast<char*>(&_impl_.teaching_mode_)) + sizeof(_impl_.acc_ratio_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveConveyorReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> MoveConveyorReq::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MoveConveyorReq, _impl_._has_bits_),
    0, // no _extensions_
    10, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966776,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MoveConveyorReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool teaching_mode = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MoveConveyorReq, _impl_.teaching_mode_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MoveConveyorReq, _impl_.teaching_mode_)}},
    // bool bypass_singular = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MoveConveyorReq, _impl_.bypass_singular_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MoveConveyorReq, _impl_.bypass_singular_)}},
    // float acc_ratio = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MoveConveyorReq, _impl_.acc_ratio_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool teaching_mode = 1;
    {PROTOBUF_FIELD_OFFSET(MoveConveyorReq, _impl_.teaching_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool bypass_singular = 2;
    {PROTOBUF_FIELD_OFFSET(MoveConveyorReq, _impl_.bypass_singular_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float acc_ratio = 3;
    {PROTOBUF_FIELD_OFFSET(MoveConveyorReq, _impl_.acc_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.MotionCondition post_condition = 10;
    {PROTOBUF_FIELD_OFFSET(MoveConveyorReq, _impl_.post_condition_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::MotionCondition>()},
  }}, {{
  }},
};

::uint8_t* MoveConveyorReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveConveyorReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool teaching_mode = 1;
  if (this->_internal_teaching_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_teaching_mode(), target);
  }

  // bool bypass_singular = 2;
  if (this->_internal_bypass_singular() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_bypass_singular(), target);
  }

  // float acc_ratio = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_acc_ratio(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.MotionCondition post_condition = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::post_condition(this),
        _Internal::post_condition(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveConveyorReq)
  return target;
}

::size_t MoveConveyorReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveConveyorReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.MotionCondition post_condition = 10;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.post_condition_);
  }

  // bool teaching_mode = 1;
  if (this->_internal_teaching_mode() != 0) {
    total_size += 2;
  }

  // bool bypass_singular = 2;
  if (this->_internal_bypass_singular() != 0) {
    total_size += 2;
  }

  // float acc_ratio = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveConveyorReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveConveyorReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveConveyorReq::GetClassData() const { return &_class_data_; }


void MoveConveyorReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveConveyorReq*>(&to_msg);
  auto& from = static_cast<const MoveConveyorReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveConveyorReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(
        from._internal_post_condition());
  }
  if (from._internal_teaching_mode() != 0) {
    _this->_internal_set_teaching_mode(from._internal_teaching_mode());
  }
  if (from._internal_bypass_singular() != 0) {
    _this->_internal_set_bypass_singular(from._internal_bypass_singular());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = from._internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    _this->_internal_set_acc_ratio(from._internal_acc_ratio());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveConveyorReq::CopyFrom(const MoveConveyorReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveConveyorReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveConveyorReq::IsInitialized() const {
  return true;
}

void MoveConveyorReq::InternalSwap(MoveConveyorReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveConveyorReq, _impl_.acc_ratio_)
      + sizeof(MoveConveyorReq::_impl_.acc_ratio_)
      - PROTOBUF_FIELD_OFFSET(MoveConveyorReq, _impl_.post_condition_)>(
          reinterpret_cast<char*>(&_impl_.post_condition_),
          reinterpret_cast<char*>(&other->_impl_.post_condition_));
}

::google::protobuf::Metadata MoveConveyorReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[21]);
}
// ===================================================================

class WaitIOReq::_Internal {
 public:
};

void WaitIOReq::clear_di_list() {
  _internal_mutable_di_list()->Clear();
}
void WaitIOReq::clear_do_list() {
  _internal_mutable_do_list()->Clear();
}
void WaitIOReq::clear_end_di_list() {
  _internal_mutable_end_di_list()->Clear();
}
void WaitIOReq::clear_end_do_list() {
  _internal_mutable_end_do_list()->Clear();
}
void WaitIOReq::clear_set_do_list() {
  _internal_mutable_set_do_list()->Clear();
}
void WaitIOReq::clear_set_end_do_list() {
  _internal_mutable_set_end_do_list()->Clear();
}
void WaitIOReq::clear_set_ao_list() {
  _internal_mutable_set_ao_list()->Clear();
}
void WaitIOReq::clear_set_end_ao_list() {
  _internal_mutable_set_end_ao_list()->Clear();
}
WaitIOReq::WaitIOReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.WaitIOReq)
}
WaitIOReq::WaitIOReq(const WaitIOReq& from) : ::google::protobuf::Message() {
  WaitIOReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.di_list_){from._impl_.di_list_},
      decltype(_impl_.do_list_){from._impl_.do_list_},
      decltype(_impl_.end_di_list_){from._impl_.end_di_list_},
      decltype(_impl_.end_do_list_){from._impl_.end_do_list_},
      decltype(_impl_.set_do_list_){from._impl_.set_do_list_},
      decltype(_impl_.set_end_do_list_){from._impl_.set_end_do_list_},
      decltype(_impl_.set_ao_list_){from._impl_.set_ao_list_},
      decltype(_impl_.set_end_ao_list_){from._impl_.set_end_ao_list_},
      decltype(_impl_.conjunction_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.conjunction_ = from._impl_.conjunction_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.WaitIOReq)
}
inline void WaitIOReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.di_list_){arena},
      decltype(_impl_.do_list_){arena},
      decltype(_impl_.end_di_list_){arena},
      decltype(_impl_.end_do_list_){arena},
      decltype(_impl_.set_do_list_){arena},
      decltype(_impl_.set_end_do_list_){arena},
      decltype(_impl_.set_ao_list_){arena},
      decltype(_impl_.set_end_ao_list_){arena},
      decltype(_impl_.conjunction_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
WaitIOReq::~WaitIOReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.WaitIOReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WaitIOReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.di_list_.~RepeatedPtrField();
  _impl_.do_list_.~RepeatedPtrField();
  _impl_.end_di_list_.~RepeatedPtrField();
  _impl_.end_do_list_.~RepeatedPtrField();
  _impl_.set_do_list_.~RepeatedPtrField();
  _impl_.set_end_do_list_.~RepeatedPtrField();
  _impl_.set_ao_list_.~RepeatedPtrField();
  _impl_.set_end_ao_list_.~RepeatedPtrField();
}
void WaitIOReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void WaitIOReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.WaitIOReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_di_list()->Clear();
  _internal_mutable_do_list()->Clear();
  _internal_mutable_end_di_list()->Clear();
  _internal_mutable_end_do_list()->Clear();
  _internal_mutable_set_do_list()->Clear();
  _internal_mutable_set_end_do_list()->Clear();
  _internal_mutable_set_ao_list()->Clear();
  _internal_mutable_set_end_ao_list()->Clear();
  _impl_.conjunction_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* WaitIOReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 8, 0, 2> WaitIOReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_WaitIOReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .Nrmk.IndyFramework.DigitalSignal di_list = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.di_list_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal do_list = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.do_list_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal end_di_list = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.end_di_list_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal end_do_list = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.end_do_list_)}},
    // int32 conjunction = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WaitIOReq, _impl_.conjunction_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.conjunction_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 4, PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.set_do_list_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 5, PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.set_end_do_list_)}},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 6, PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.set_ao_list_)}},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 7, PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.set_end_ao_list_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.DigitalSignal di_list = 1;
    {PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.di_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.DigitalSignal do_list = 2;
    {PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.do_list_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.DigitalSignal end_di_list = 3;
    {PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.end_di_list_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.DigitalSignal end_do_list = 4;
    {PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.end_do_list_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 conjunction = 5;
    {PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.conjunction_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 6;
    {PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.set_do_list_), 0, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 7;
    {PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.set_end_do_list_), 0, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 8;
    {PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.set_ao_list_), 0, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 9;
    {PROTOBUF_FIELD_OFFSET(WaitIOReq, _impl_.set_end_ao_list_), 0, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
  }}, {{
  }},
};

::uint8_t* WaitIOReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.WaitIOReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_di_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_di_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal do_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_do_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_do_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal end_di_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_end_di_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_end_di_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal end_do_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_end_do_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_end_do_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 conjunction = 5;
  if (this->_internal_conjunction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_conjunction(), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_do_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_do_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_end_do_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_end_do_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_ao_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_ao_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_end_ao_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_end_ao_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.WaitIOReq)
  return target;
}

::size_t WaitIOReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.WaitIOReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di_list = 1;
  total_size += 1UL * this->_internal_di_list_size();
  for (const auto& msg : this->_internal_di_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.DigitalSignal do_list = 2;
  total_size += 1UL * this->_internal_do_list_size();
  for (const auto& msg : this->_internal_do_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.DigitalSignal end_di_list = 3;
  total_size += 1UL * this->_internal_end_di_list_size();
  for (const auto& msg : this->_internal_end_di_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.DigitalSignal end_do_list = 4;
  total_size += 1UL * this->_internal_end_do_list_size();
  for (const auto& msg : this->_internal_end_do_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 6;
  total_size += 1UL * this->_internal_set_do_list_size();
  for (const auto& msg : this->_internal_set_do_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 7;
  total_size += 1UL * this->_internal_set_end_do_list_size();
  for (const auto& msg : this->_internal_set_end_do_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 8;
  total_size += 1UL * this->_internal_set_ao_list_size();
  for (const auto& msg : this->_internal_set_ao_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 9;
  total_size += 1UL * this->_internal_set_end_ao_list_size();
  for (const auto& msg : this->_internal_set_end_ao_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // int32 conjunction = 5;
  if (this->_internal_conjunction() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_conjunction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData WaitIOReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    WaitIOReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*WaitIOReq::GetClassData() const { return &_class_data_; }


void WaitIOReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<WaitIOReq*>(&to_msg);
  auto& from = static_cast<const WaitIOReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.WaitIOReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_di_list()->MergeFrom(from._internal_di_list());
  _this->_internal_mutable_do_list()->MergeFrom(from._internal_do_list());
  _this->_internal_mutable_end_di_list()->MergeFrom(from._internal_end_di_list());
  _this->_internal_mutable_end_do_list()->MergeFrom(from._internal_end_do_list());
  _this->_internal_mutable_set_do_list()->MergeFrom(from._internal_set_do_list());
  _this->_internal_mutable_set_end_do_list()->MergeFrom(from._internal_set_end_do_list());
  _this->_internal_mutable_set_ao_list()->MergeFrom(from._internal_set_ao_list());
  _this->_internal_mutable_set_end_ao_list()->MergeFrom(from._internal_set_end_ao_list());
  if (from._internal_conjunction() != 0) {
    _this->_internal_set_conjunction(from._internal_conjunction());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WaitIOReq::CopyFrom(const WaitIOReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.WaitIOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool WaitIOReq::IsInitialized() const {
  return true;
}

void WaitIOReq::InternalSwap(WaitIOReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.di_list_.InternalSwap(&other->_impl_.di_list_);
  _impl_.do_list_.InternalSwap(&other->_impl_.do_list_);
  _impl_.end_di_list_.InternalSwap(&other->_impl_.end_di_list_);
  _impl_.end_do_list_.InternalSwap(&other->_impl_.end_do_list_);
  _impl_.set_do_list_.InternalSwap(&other->_impl_.set_do_list_);
  _impl_.set_end_do_list_.InternalSwap(&other->_impl_.set_end_do_list_);
  _impl_.set_ao_list_.InternalSwap(&other->_impl_.set_ao_list_);
  _impl_.set_end_ao_list_.InternalSwap(&other->_impl_.set_end_ao_list_);
        swap(_impl_.conjunction_, other->_impl_.conjunction_);
}

::google::protobuf::Metadata WaitIOReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[22]);
}
// ===================================================================

class WaitTimeReq::_Internal {
 public:
};

void WaitTimeReq::clear_set_do_list() {
  _internal_mutable_set_do_list()->Clear();
}
void WaitTimeReq::clear_set_end_do_list() {
  _internal_mutable_set_end_do_list()->Clear();
}
void WaitTimeReq::clear_set_ao_list() {
  _internal_mutable_set_ao_list()->Clear();
}
void WaitTimeReq::clear_set_end_ao_list() {
  _internal_mutable_set_end_ao_list()->Clear();
}
WaitTimeReq::WaitTimeReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.WaitTimeReq)
}
WaitTimeReq::WaitTimeReq(const WaitTimeReq& from) : ::google::protobuf::Message() {
  WaitTimeReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.set_do_list_){from._impl_.set_do_list_},
      decltype(_impl_.set_end_do_list_){from._impl_.set_end_do_list_},
      decltype(_impl_.set_ao_list_){from._impl_.set_ao_list_},
      decltype(_impl_.set_end_ao_list_){from._impl_.set_end_ao_list_},
      decltype(_impl_.time_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.time_ = from._impl_.time_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.WaitTimeReq)
}
inline void WaitTimeReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.set_do_list_){arena},
      decltype(_impl_.set_end_do_list_){arena},
      decltype(_impl_.set_ao_list_){arena},
      decltype(_impl_.set_end_ao_list_){arena},
      decltype(_impl_.time_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
WaitTimeReq::~WaitTimeReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.WaitTimeReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WaitTimeReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.set_do_list_.~RepeatedPtrField();
  _impl_.set_end_do_list_.~RepeatedPtrField();
  _impl_.set_ao_list_.~RepeatedPtrField();
  _impl_.set_end_ao_list_.~RepeatedPtrField();
}
void WaitTimeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void WaitTimeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.WaitTimeReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_set_do_list()->Clear();
  _internal_mutable_set_end_do_list()->Clear();
  _internal_mutable_set_ao_list()->Clear();
  _internal_mutable_set_end_ao_list()->Clear();
  _impl_.time_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* WaitTimeReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 0, 2> WaitTimeReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_WaitTimeReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float time = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(WaitTimeReq, _impl_.time_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(WaitTimeReq, _impl_.set_do_list_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(WaitTimeReq, _impl_.set_end_do_list_)}},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(WaitTimeReq, _impl_.set_ao_list_)}},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 3, PROTOBUF_FIELD_OFFSET(WaitTimeReq, _impl_.set_end_ao_list_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float time = 1;
    {PROTOBUF_FIELD_OFFSET(WaitTimeReq, _impl_.time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
    {PROTOBUF_FIELD_OFFSET(WaitTimeReq, _impl_.set_do_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
    {PROTOBUF_FIELD_OFFSET(WaitTimeReq, _impl_.set_end_do_list_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
    {PROTOBUF_FIELD_OFFSET(WaitTimeReq, _impl_.set_ao_list_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
    {PROTOBUF_FIELD_OFFSET(WaitTimeReq, _impl_.set_end_ao_list_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
  }}, {{
  }},
};

::uint8_t* WaitTimeReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.WaitTimeReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float time = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_time(), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_do_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_do_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_end_do_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_end_do_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_ao_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_ao_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_end_ao_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_end_ao_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.WaitTimeReq)
  return target;
}

::size_t WaitTimeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.WaitTimeReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  total_size += 1UL * this->_internal_set_do_list_size();
  for (const auto& msg : this->_internal_set_do_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  total_size += 1UL * this->_internal_set_end_do_list_size();
  for (const auto& msg : this->_internal_set_end_do_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  total_size += 1UL * this->_internal_set_ao_list_size();
  for (const auto& msg : this->_internal_set_ao_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  total_size += 1UL * this->_internal_set_end_ao_list_size();
  for (const auto& msg : this->_internal_set_end_ao_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // float time = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData WaitTimeReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    WaitTimeReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*WaitTimeReq::GetClassData() const { return &_class_data_; }


void WaitTimeReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<WaitTimeReq*>(&to_msg);
  auto& from = static_cast<const WaitTimeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.WaitTimeReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_set_do_list()->MergeFrom(from._internal_set_do_list());
  _this->_internal_mutable_set_end_do_list()->MergeFrom(from._internal_set_end_do_list());
  _this->_internal_mutable_set_ao_list()->MergeFrom(from._internal_set_ao_list());
  _this->_internal_mutable_set_end_ao_list()->MergeFrom(from._internal_set_end_ao_list());
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_time = from._internal_time();
  ::uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WaitTimeReq::CopyFrom(const WaitTimeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.WaitTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool WaitTimeReq::IsInitialized() const {
  return true;
}

void WaitTimeReq::InternalSwap(WaitTimeReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.set_do_list_.InternalSwap(&other->_impl_.set_do_list_);
  _impl_.set_end_do_list_.InternalSwap(&other->_impl_.set_end_do_list_);
  _impl_.set_ao_list_.InternalSwap(&other->_impl_.set_ao_list_);
  _impl_.set_end_ao_list_.InternalSwap(&other->_impl_.set_end_ao_list_);
        swap(_impl_.time_, other->_impl_.time_);
}

::google::protobuf::Metadata WaitTimeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[23]);
}
// ===================================================================

class WaitProgressReq::_Internal {
 public:
};

void WaitProgressReq::clear_set_do_list() {
  _internal_mutable_set_do_list()->Clear();
}
void WaitProgressReq::clear_set_end_do_list() {
  _internal_mutable_set_end_do_list()->Clear();
}
void WaitProgressReq::clear_set_ao_list() {
  _internal_mutable_set_ao_list()->Clear();
}
void WaitProgressReq::clear_set_end_ao_list() {
  _internal_mutable_set_end_ao_list()->Clear();
}
WaitProgressReq::WaitProgressReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.WaitProgressReq)
}
WaitProgressReq::WaitProgressReq(const WaitProgressReq& from) : ::google::protobuf::Message() {
  WaitProgressReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.set_do_list_){from._impl_.set_do_list_},
      decltype(_impl_.set_end_do_list_){from._impl_.set_end_do_list_},
      decltype(_impl_.set_ao_list_){from._impl_.set_ao_list_},
      decltype(_impl_.set_end_ao_list_){from._impl_.set_end_ao_list_},
      decltype(_impl_.progress_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.progress_ = from._impl_.progress_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.WaitProgressReq)
}
inline void WaitProgressReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.set_do_list_){arena},
      decltype(_impl_.set_end_do_list_){arena},
      decltype(_impl_.set_ao_list_){arena},
      decltype(_impl_.set_end_ao_list_){arena},
      decltype(_impl_.progress_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
WaitProgressReq::~WaitProgressReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.WaitProgressReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WaitProgressReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.set_do_list_.~RepeatedPtrField();
  _impl_.set_end_do_list_.~RepeatedPtrField();
  _impl_.set_ao_list_.~RepeatedPtrField();
  _impl_.set_end_ao_list_.~RepeatedPtrField();
}
void WaitProgressReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void WaitProgressReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.WaitProgressReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_set_do_list()->Clear();
  _internal_mutable_set_end_do_list()->Clear();
  _internal_mutable_set_ao_list()->Clear();
  _internal_mutable_set_end_ao_list()->Clear();
  _impl_.progress_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* WaitProgressReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 0, 2> WaitProgressReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_WaitProgressReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 progress = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WaitProgressReq, _impl_.progress_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(WaitProgressReq, _impl_.progress_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(WaitProgressReq, _impl_.set_do_list_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(WaitProgressReq, _impl_.set_end_do_list_)}},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(WaitProgressReq, _impl_.set_ao_list_)}},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 3, PROTOBUF_FIELD_OFFSET(WaitProgressReq, _impl_.set_end_ao_list_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 progress = 1;
    {PROTOBUF_FIELD_OFFSET(WaitProgressReq, _impl_.progress_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
    {PROTOBUF_FIELD_OFFSET(WaitProgressReq, _impl_.set_do_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
    {PROTOBUF_FIELD_OFFSET(WaitProgressReq, _impl_.set_end_do_list_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
    {PROTOBUF_FIELD_OFFSET(WaitProgressReq, _impl_.set_ao_list_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
    {PROTOBUF_FIELD_OFFSET(WaitProgressReq, _impl_.set_end_ao_list_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
  }}, {{
  }},
};

::uint8_t* WaitProgressReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.WaitProgressReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 progress = 1;
  if (this->_internal_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_progress(), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_do_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_do_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_end_do_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_end_do_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_ao_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_ao_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_end_ao_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_end_ao_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.WaitProgressReq)
  return target;
}

::size_t WaitProgressReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.WaitProgressReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  total_size += 1UL * this->_internal_set_do_list_size();
  for (const auto& msg : this->_internal_set_do_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  total_size += 1UL * this->_internal_set_end_do_list_size();
  for (const auto& msg : this->_internal_set_end_do_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  total_size += 1UL * this->_internal_set_ao_list_size();
  for (const auto& msg : this->_internal_set_ao_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  total_size += 1UL * this->_internal_set_end_ao_list_size();
  for (const auto& msg : this->_internal_set_end_ao_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // int32 progress = 1;
  if (this->_internal_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_progress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData WaitProgressReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    WaitProgressReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*WaitProgressReq::GetClassData() const { return &_class_data_; }


void WaitProgressReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<WaitProgressReq*>(&to_msg);
  auto& from = static_cast<const WaitProgressReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.WaitProgressReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_set_do_list()->MergeFrom(from._internal_set_do_list());
  _this->_internal_mutable_set_end_do_list()->MergeFrom(from._internal_set_end_do_list());
  _this->_internal_mutable_set_ao_list()->MergeFrom(from._internal_set_ao_list());
  _this->_internal_mutable_set_end_ao_list()->MergeFrom(from._internal_set_end_ao_list());
  if (from._internal_progress() != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WaitProgressReq::CopyFrom(const WaitProgressReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.WaitProgressReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool WaitProgressReq::IsInitialized() const {
  return true;
}

void WaitProgressReq::InternalSwap(WaitProgressReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.set_do_list_.InternalSwap(&other->_impl_.set_do_list_);
  _impl_.set_end_do_list_.InternalSwap(&other->_impl_.set_end_do_list_);
  _impl_.set_ao_list_.InternalSwap(&other->_impl_.set_ao_list_);
  _impl_.set_end_ao_list_.InternalSwap(&other->_impl_.set_end_ao_list_);
        swap(_impl_.progress_, other->_impl_.progress_);
}

::google::protobuf::Metadata WaitProgressReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[24]);
}
// ===================================================================

class WaitTrajReq::_Internal {
 public:
};

void WaitTrajReq::clear_set_do_list() {
  _internal_mutable_set_do_list()->Clear();
}
void WaitTrajReq::clear_set_end_do_list() {
  _internal_mutable_set_end_do_list()->Clear();
}
void WaitTrajReq::clear_set_ao_list() {
  _internal_mutable_set_ao_list()->Clear();
}
void WaitTrajReq::clear_set_end_ao_list() {
  _internal_mutable_set_end_ao_list()->Clear();
}
WaitTrajReq::WaitTrajReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.WaitTrajReq)
}
WaitTrajReq::WaitTrajReq(const WaitTrajReq& from) : ::google::protobuf::Message() {
  WaitTrajReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.set_do_list_){from._impl_.set_do_list_},
      decltype(_impl_.set_end_do_list_){from._impl_.set_end_do_list_},
      decltype(_impl_.set_ao_list_){from._impl_.set_ao_list_},
      decltype(_impl_.set_end_ao_list_){from._impl_.set_end_ao_list_},
      decltype(_impl_.traj_condition_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.traj_condition_ = from._impl_.traj_condition_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.WaitTrajReq)
}
inline void WaitTrajReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.set_do_list_){arena},
      decltype(_impl_.set_end_do_list_){arena},
      decltype(_impl_.set_ao_list_){arena},
      decltype(_impl_.set_end_ao_list_){arena},
      decltype(_impl_.traj_condition_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
WaitTrajReq::~WaitTrajReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.WaitTrajReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WaitTrajReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.set_do_list_.~RepeatedPtrField();
  _impl_.set_end_do_list_.~RepeatedPtrField();
  _impl_.set_ao_list_.~RepeatedPtrField();
  _impl_.set_end_ao_list_.~RepeatedPtrField();
}
void WaitTrajReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void WaitTrajReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.WaitTrajReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_set_do_list()->Clear();
  _internal_mutable_set_end_do_list()->Clear();
  _internal_mutable_set_ao_list()->Clear();
  _internal_mutable_set_end_ao_list()->Clear();
  _impl_.traj_condition_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* WaitTrajReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 0, 2> WaitTrajReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_WaitTrajReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.TrajCondition traj_condition = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WaitTrajReq, _impl_.traj_condition_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(WaitTrajReq, _impl_.traj_condition_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(WaitTrajReq, _impl_.set_do_list_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(WaitTrajReq, _impl_.set_end_do_list_)}},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(WaitTrajReq, _impl_.set_ao_list_)}},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 3, PROTOBUF_FIELD_OFFSET(WaitTrajReq, _impl_.set_end_ao_list_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.TrajCondition traj_condition = 1;
    {PROTOBUF_FIELD_OFFSET(WaitTrajReq, _impl_.traj_condition_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
    {PROTOBUF_FIELD_OFFSET(WaitTrajReq, _impl_.set_do_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
    {PROTOBUF_FIELD_OFFSET(WaitTrajReq, _impl_.set_end_do_list_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
    {PROTOBUF_FIELD_OFFSET(WaitTrajReq, _impl_.set_ao_list_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
    {PROTOBUF_FIELD_OFFSET(WaitTrajReq, _impl_.set_end_ao_list_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
  }}, {{
  }},
};

::uint8_t* WaitTrajReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.WaitTrajReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.TrajCondition traj_condition = 1;
  if (this->_internal_traj_condition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_traj_condition(), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_do_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_do_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_end_do_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_end_do_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_ao_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_ao_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_end_ao_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_end_ao_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.WaitTrajReq)
  return target;
}

::size_t WaitTrajReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.WaitTrajReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  total_size += 1UL * this->_internal_set_do_list_size();
  for (const auto& msg : this->_internal_set_do_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  total_size += 1UL * this->_internal_set_end_do_list_size();
  for (const auto& msg : this->_internal_set_end_do_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  total_size += 1UL * this->_internal_set_ao_list_size();
  for (const auto& msg : this->_internal_set_ao_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  total_size += 1UL * this->_internal_set_end_ao_list_size();
  for (const auto& msg : this->_internal_set_end_ao_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .Nrmk.IndyFramework.TrajCondition traj_condition = 1;
  if (this->_internal_traj_condition() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_traj_condition());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData WaitTrajReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    WaitTrajReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*WaitTrajReq::GetClassData() const { return &_class_data_; }


void WaitTrajReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<WaitTrajReq*>(&to_msg);
  auto& from = static_cast<const WaitTrajReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.WaitTrajReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_set_do_list()->MergeFrom(from._internal_set_do_list());
  _this->_internal_mutable_set_end_do_list()->MergeFrom(from._internal_set_end_do_list());
  _this->_internal_mutable_set_ao_list()->MergeFrom(from._internal_set_ao_list());
  _this->_internal_mutable_set_end_ao_list()->MergeFrom(from._internal_set_end_ao_list());
  if (from._internal_traj_condition() != 0) {
    _this->_internal_set_traj_condition(from._internal_traj_condition());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WaitTrajReq::CopyFrom(const WaitTrajReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.WaitTrajReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool WaitTrajReq::IsInitialized() const {
  return true;
}

void WaitTrajReq::InternalSwap(WaitTrajReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.set_do_list_.InternalSwap(&other->_impl_.set_do_list_);
  _impl_.set_end_do_list_.InternalSwap(&other->_impl_.set_end_do_list_);
  _impl_.set_ao_list_.InternalSwap(&other->_impl_.set_ao_list_);
  _impl_.set_end_ao_list_.InternalSwap(&other->_impl_.set_end_ao_list_);
  swap(_impl_.traj_condition_, other->_impl_.traj_condition_);
}

::google::protobuf::Metadata WaitTrajReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[25]);
}
// ===================================================================

class WaitRadiusReq::_Internal {
 public:
};

void WaitRadiusReq::clear_set_do_list() {
  _internal_mutable_set_do_list()->Clear();
}
void WaitRadiusReq::clear_set_end_do_list() {
  _internal_mutable_set_end_do_list()->Clear();
}
void WaitRadiusReq::clear_set_ao_list() {
  _internal_mutable_set_ao_list()->Clear();
}
void WaitRadiusReq::clear_set_end_ao_list() {
  _internal_mutable_set_end_ao_list()->Clear();
}
WaitRadiusReq::WaitRadiusReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.WaitRadiusReq)
}
WaitRadiusReq::WaitRadiusReq(const WaitRadiusReq& from) : ::google::protobuf::Message() {
  WaitRadiusReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.set_do_list_){from._impl_.set_do_list_},
      decltype(_impl_.set_end_do_list_){from._impl_.set_end_do_list_},
      decltype(_impl_.set_ao_list_){from._impl_.set_ao_list_},
      decltype(_impl_.set_end_ao_list_){from._impl_.set_end_ao_list_},
      decltype(_impl_.radius_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.radius_ = from._impl_.radius_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.WaitRadiusReq)
}
inline void WaitRadiusReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.set_do_list_){arena},
      decltype(_impl_.set_end_do_list_){arena},
      decltype(_impl_.set_ao_list_){arena},
      decltype(_impl_.set_end_ao_list_){arena},
      decltype(_impl_.radius_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
WaitRadiusReq::~WaitRadiusReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.WaitRadiusReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WaitRadiusReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.set_do_list_.~RepeatedPtrField();
  _impl_.set_end_do_list_.~RepeatedPtrField();
  _impl_.set_ao_list_.~RepeatedPtrField();
  _impl_.set_end_ao_list_.~RepeatedPtrField();
}
void WaitRadiusReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void WaitRadiusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.WaitRadiusReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_set_do_list()->Clear();
  _internal_mutable_set_end_do_list()->Clear();
  _internal_mutable_set_ao_list()->Clear();
  _internal_mutable_set_end_ao_list()->Clear();
  _impl_.radius_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* WaitRadiusReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 0, 2> WaitRadiusReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_WaitRadiusReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 radius = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WaitRadiusReq, _impl_.radius_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(WaitRadiusReq, _impl_.radius_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(WaitRadiusReq, _impl_.set_do_list_)}},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(WaitRadiusReq, _impl_.set_end_do_list_)}},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(WaitRadiusReq, _impl_.set_ao_list_)}},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 3, PROTOBUF_FIELD_OFFSET(WaitRadiusReq, _impl_.set_end_ao_list_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 radius = 1;
    {PROTOBUF_FIELD_OFFSET(WaitRadiusReq, _impl_.radius_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
    {PROTOBUF_FIELD_OFFSET(WaitRadiusReq, _impl_.set_do_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
    {PROTOBUF_FIELD_OFFSET(WaitRadiusReq, _impl_.set_end_do_list_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
    {PROTOBUF_FIELD_OFFSET(WaitRadiusReq, _impl_.set_ao_list_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
    {PROTOBUF_FIELD_OFFSET(WaitRadiusReq, _impl_.set_end_ao_list_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
  }}, {{
  }},
};

::uint8_t* WaitRadiusReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.WaitRadiusReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 radius = 1;
  if (this->_internal_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_radius(), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_do_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_do_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_end_do_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_end_do_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_ao_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_ao_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_set_end_ao_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_set_end_ao_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.WaitRadiusReq)
  return target;
}

::size_t WaitRadiusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.WaitRadiusReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  total_size += 1UL * this->_internal_set_do_list_size();
  for (const auto& msg : this->_internal_set_do_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  total_size += 1UL * this->_internal_set_end_do_list_size();
  for (const auto& msg : this->_internal_set_end_do_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  total_size += 1UL * this->_internal_set_ao_list_size();
  for (const auto& msg : this->_internal_set_ao_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  total_size += 1UL * this->_internal_set_end_ao_list_size();
  for (const auto& msg : this->_internal_set_end_ao_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // int32 radius = 1;
  if (this->_internal_radius() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_radius());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData WaitRadiusReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    WaitRadiusReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*WaitRadiusReq::GetClassData() const { return &_class_data_; }


void WaitRadiusReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<WaitRadiusReq*>(&to_msg);
  auto& from = static_cast<const WaitRadiusReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.WaitRadiusReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_set_do_list()->MergeFrom(from._internal_set_do_list());
  _this->_internal_mutable_set_end_do_list()->MergeFrom(from._internal_set_end_do_list());
  _this->_internal_mutable_set_ao_list()->MergeFrom(from._internal_set_ao_list());
  _this->_internal_mutable_set_end_ao_list()->MergeFrom(from._internal_set_end_ao_list());
  if (from._internal_radius() != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WaitRadiusReq::CopyFrom(const WaitRadiusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.WaitRadiusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool WaitRadiusReq::IsInitialized() const {
  return true;
}

void WaitRadiusReq::InternalSwap(WaitRadiusReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.set_do_list_.InternalSwap(&other->_impl_.set_do_list_);
  _impl_.set_end_do_list_.InternalSwap(&other->_impl_.set_end_do_list_);
  _impl_.set_ao_list_.InternalSwap(&other->_impl_.set_ao_list_);
  _impl_.set_end_ao_list_.InternalSwap(&other->_impl_.set_end_ao_list_);
        swap(_impl_.radius_, other->_impl_.radius_);
}

::google::protobuf::Metadata WaitRadiusReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[26]);
}
// ===================================================================

class Program::_Internal {
 public:
};

Program::Program(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.Program)
}
Program::Program(const Program& from) : ::google::protobuf::Message() {
  Program* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prog_name_){},
      decltype(_impl_.prog_idx_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.prog_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.prog_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prog_name().empty()) {
    _this->_impl_.prog_name_.Set(from._internal_prog_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.prog_idx_ = from._impl_.prog_idx_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.Program)
}
inline void Program::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.prog_name_){},
      decltype(_impl_.prog_idx_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.prog_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.prog_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Program::~Program() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.Program)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Program::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prog_name_.Destroy();
}
void Program::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Program::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.Program)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prog_name_.ClearToEmpty();
  _impl_.prog_idx_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Program::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 44, 2> Program::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Program_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 prog_idx = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Program, _impl_.prog_idx_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Program, _impl_.prog_idx_)}},
    // string prog_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Program, _impl_.prog_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string prog_name = 1;
    {PROTOBUF_FIELD_OFFSET(Program, _impl_.prog_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 prog_idx = 2;
    {PROTOBUF_FIELD_OFFSET(Program, _impl_.prog_idx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\32\11\0\0\0\0\0\0"
    "Nrmk.IndyFramework.Program"
    "prog_name"
  }},
};

::uint8_t* Program::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.Program)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string prog_name = 1;
  if (!this->_internal_prog_name().empty()) {
    const std::string& _s = this->_internal_prog_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.Program.prog_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 prog_idx = 2;
  if (this->_internal_prog_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_prog_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.Program)
  return target;
}

::size_t Program::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.Program)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prog_name = 1;
  if (!this->_internal_prog_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_prog_name());
  }

  // int32 prog_idx = 2;
  if (this->_internal_prog_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_prog_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Program::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Program::MergeImpl
};
const ::google::protobuf::Message::ClassData*Program::GetClassData() const { return &_class_data_; }


void Program::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Program*>(&to_msg);
  auto& from = static_cast<const Program&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.Program)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prog_name().empty()) {
    _this->_internal_set_prog_name(from._internal_prog_name());
  }
  if (from._internal_prog_idx() != 0) {
    _this->_internal_set_prog_idx(from._internal_prog_idx());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Program::CopyFrom(const Program& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.Program)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Program::IsInitialized() const {
  return true;
}

void Program::InternalSwap(Program* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.prog_name_, lhs_arena,
                                       &other->_impl_.prog_name_, rhs_arena);
        swap(_impl_.prog_idx_, other->_impl_.prog_idx_);
}

::google::protobuf::Metadata Program::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[27]);
}
// ===================================================================

class TuningProgram::_Internal {
 public:
  using HasBits = decltype(std::declval<TuningProgram>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TuningProgram, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Program& program(const TuningProgram* msg);
  static void set_has_program(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Program& TuningProgram::_Internal::program(const TuningProgram* msg) {
  return *msg->_impl_.program_;
}
TuningProgram::TuningProgram(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TuningProgram)
}
TuningProgram::TuningProgram(const TuningProgram& from) : ::google::protobuf::Message() {
  TuningProgram* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.program_){nullptr},
      decltype(_impl_.tuning_space_){},
      decltype(_impl_.precision_){},
      decltype(_impl_.vel_level_max_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.program_ = new ::Nrmk::IndyFramework::Program(*from._impl_.program_);
  }
  ::memcpy(&_impl_.tuning_space_, &from._impl_.tuning_space_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.vel_level_max_) -
    reinterpret_cast<char*>(&_impl_.tuning_space_)) + sizeof(_impl_.vel_level_max_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TuningProgram)
}
inline void TuningProgram::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.program_){nullptr},
      decltype(_impl_.tuning_space_){0},
      decltype(_impl_.precision_){0},
      decltype(_impl_.vel_level_max_){0u},
  };
}
TuningProgram::~TuningProgram() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TuningProgram)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TuningProgram::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.program_;
}
void TuningProgram::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TuningProgram::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TuningProgram)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.program_ != nullptr);
    _impl_.program_->Clear();
  }
  ::memset(&_impl_.tuning_space_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.vel_level_max_) -
      reinterpret_cast<char*>(&_impl_.tuning_space_)) + sizeof(_impl_.vel_level_max_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TuningProgram::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> TuningProgram::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TuningProgram, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TuningProgram_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 vel_level_max = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TuningProgram, _impl_.vel_level_max_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TuningProgram, _impl_.vel_level_max_)}},
    // .Nrmk.IndyFramework.Program program = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TuningProgram, _impl_.program_)}},
    // .Nrmk.IndyFramework.TuningSpace tuning_space = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TuningProgram, _impl_.tuning_space_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TuningProgram, _impl_.tuning_space_)}},
    // .Nrmk.IndyFramework.TuningPrecision precision = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TuningProgram, _impl_.precision_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TuningProgram, _impl_.precision_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.Program program = 1;
    {PROTOBUF_FIELD_OFFSET(TuningProgram, _impl_.program_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.TuningSpace tuning_space = 2;
    {PROTOBUF_FIELD_OFFSET(TuningProgram, _impl_.tuning_space_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.TuningPrecision precision = 3;
    {PROTOBUF_FIELD_OFFSET(TuningProgram, _impl_.precision_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint32 vel_level_max = 4;
    {PROTOBUF_FIELD_OFFSET(TuningProgram, _impl_.vel_level_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Program>()},
  }}, {{
  }},
};

::uint8_t* TuningProgram::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TuningProgram)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Program program = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::program(this),
        _Internal::program(this).GetCachedSize(), target, stream);
  }

  // .Nrmk.IndyFramework.TuningSpace tuning_space = 2;
  if (this->_internal_tuning_space() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_tuning_space(), target);
  }

  // .Nrmk.IndyFramework.TuningPrecision precision = 3;
  if (this->_internal_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_precision(), target);
  }

  // uint32 vel_level_max = 4;
  if (this->_internal_vel_level_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_vel_level_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TuningProgram)
  return target;
}

::size_t TuningProgram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TuningProgram)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Program program = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.program_);
  }

  // .Nrmk.IndyFramework.TuningSpace tuning_space = 2;
  if (this->_internal_tuning_space() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_tuning_space());
  }

  // .Nrmk.IndyFramework.TuningPrecision precision = 3;
  if (this->_internal_precision() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_precision());
  }

  // uint32 vel_level_max = 4;
  if (this->_internal_vel_level_max() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_vel_level_max());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TuningProgram::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TuningProgram::MergeImpl
};
const ::google::protobuf::Message::ClassData*TuningProgram::GetClassData() const { return &_class_data_; }


void TuningProgram::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TuningProgram*>(&to_msg);
  auto& from = static_cast<const TuningProgram&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TuningProgram)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_program()->::Nrmk::IndyFramework::Program::MergeFrom(
        from._internal_program());
  }
  if (from._internal_tuning_space() != 0) {
    _this->_internal_set_tuning_space(from._internal_tuning_space());
  }
  if (from._internal_precision() != 0) {
    _this->_internal_set_precision(from._internal_precision());
  }
  if (from._internal_vel_level_max() != 0) {
    _this->_internal_set_vel_level_max(from._internal_vel_level_max());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TuningProgram::CopyFrom(const TuningProgram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TuningProgram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TuningProgram::IsInitialized() const {
  return true;
}

void TuningProgram::InternalSwap(TuningProgram* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TuningProgram, _impl_.vel_level_max_)
      + sizeof(TuningProgram::_impl_.vel_level_max_)
      - PROTOBUF_FIELD_OFFSET(TuningProgram, _impl_.program_)>(
          reinterpret_cast<char*>(&_impl_.program_),
          reinterpret_cast<char*>(&other->_impl_.program_));
}

::google::protobuf::Metadata TuningProgram::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[28]);
}
// ===================================================================

class ProgramInfo::_Internal {
 public:
};

ProgramInfo::ProgramInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ProgramInfo)
}
ProgramInfo::ProgramInfo(const ProgramInfo& from) : ::google::protobuf::Message() {
  ProgramInfo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){},
      decltype(_impl_.timestamp_){},
      decltype(_impl_.size_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), _this->GetArenaForAllocation());
  }
  _this->_impl_.size_ = from._impl_.size_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ProgramInfo)
}
inline void ProgramInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){},
      decltype(_impl_.timestamp_){},
      decltype(_impl_.size_){::uint64_t{0u}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ProgramInfo::~ProgramInfo() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ProgramInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ProgramInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  _impl_.timestamp_.Destroy();
}
void ProgramInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ProgramInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ProgramInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  _impl_.size_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ProgramInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 52, 2> ProgramInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ProgramInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string path = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ProgramInfo, _impl_.path_)}},
    // uint64 size = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ProgramInfo, _impl_.size_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ProgramInfo, _impl_.size_)}},
    // string timestamp = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ProgramInfo, _impl_.timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string path = 1;
    {PROTOBUF_FIELD_OFFSET(ProgramInfo, _impl_.path_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 size = 2;
    {PROTOBUF_FIELD_OFFSET(ProgramInfo, _impl_.size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // string timestamp = 3;
    {PROTOBUF_FIELD_OFFSET(ProgramInfo, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\36\4\0\11\0\0\0\0"
    "Nrmk.IndyFramework.ProgramInfo"
    "path"
    "timestamp"
  }},
};

::uint8_t* ProgramInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ProgramInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.ProgramInfo.path");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_size(), target);
  }

  // string timestamp = 3;
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.ProgramInfo.timestamp");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ProgramInfo)
  return target;
}

::size_t ProgramInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ProgramInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_path());
  }

  // string timestamp = 3;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // uint64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ProgramInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ProgramInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*ProgramInfo::GetClassData() const { return &_class_data_; }


void ProgramInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ProgramInfo*>(&to_msg);
  auto& from = static_cast<const ProgramInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ProgramInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProgramInfo::CopyFrom(const ProgramInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ProgramInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ProgramInfo::IsInitialized() const {
  return true;
}

void ProgramInfo::InternalSwap(ProgramInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, lhs_arena,
                                       &other->_impl_.timestamp_, rhs_arena);
        swap(_impl_.size_, other->_impl_.size_);
}

::google::protobuf::Metadata ProgramInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[29]);
}
// ===================================================================

class Variable::_Internal {
 public:
};

Variable::Variable(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.Variable)
}
Variable::Variable(const Variable& from) : ::google::protobuf::Message() {
  Variable* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.type_){},
      decltype(_impl_.addr_){},
      decltype(_impl_.in_watching_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.addr_, &from._impl_.addr_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.in_watching_) -
    reinterpret_cast<char*>(&_impl_.addr_)) + sizeof(_impl_.in_watching_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.Variable)
}
inline void Variable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.type_){},
      decltype(_impl_.addr_){0},
      decltype(_impl_.in_watching_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Variable::~Variable() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.Variable)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Variable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
}
void Variable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Variable::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.Variable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  ::memset(&_impl_.addr_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.in_watching_) -
      reinterpret_cast<char*>(&_impl_.addr_)) + sizeof(_impl_.in_watching_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Variable::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 44, 2> Variable::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Variable_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool in_watching = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Variable, _impl_.in_watching_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Variable, _impl_.in_watching_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Variable, _impl_.name_)}},
    // int32 addr = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Variable, _impl_.addr_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Variable, _impl_.addr_)}},
    // string type = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Variable, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(Variable, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 addr = 2;
    {PROTOBUF_FIELD_OFFSET(Variable, _impl_.addr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string type = 3;
    {PROTOBUF_FIELD_OFFSET(Variable, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool in_watching = 4;
    {PROTOBUF_FIELD_OFFSET(Variable, _impl_.in_watching_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\33\4\0\4\0\0\0\0"
    "Nrmk.IndyFramework.Variable"
    "name"
    "type"
  }},
};

::uint8_t* Variable::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.Variable)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.Variable.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 addr = 2;
  if (this->_internal_addr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_addr(), target);
  }

  // string type = 3;
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.Variable.type");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool in_watching = 4;
  if (this->_internal_in_watching() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_in_watching(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.Variable)
  return target;
}

::size_t Variable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.Variable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string type = 3;
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // int32 addr = 2;
  if (this->_internal_addr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_addr());
  }

  // bool in_watching = 4;
  if (this->_internal_in_watching() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Variable::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Variable::MergeImpl
};
const ::google::protobuf::Message::ClassData*Variable::GetClassData() const { return &_class_data_; }


void Variable::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Variable*>(&to_msg);
  auto& from = static_cast<const Variable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.Variable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_addr() != 0) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_in_watching() != 0) {
    _this->_internal_set_in_watching(from._internal_in_watching());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Variable::CopyFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Variable::IsInitialized() const {
  return true;
}

void Variable::InternalSwap(Variable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Variable, _impl_.in_watching_)
      + sizeof(Variable::_impl_.in_watching_)
      - PROTOBUF_FIELD_OFFSET(Variable, _impl_.addr_)>(
          reinterpret_cast<char*>(&_impl_.addr_),
          reinterpret_cast<char*>(&other->_impl_.addr_));
}

::google::protobuf::Metadata Variable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[30]);
}
// ===================================================================

class IntVariable::_Internal {
 public:
};

IntVariable::IntVariable(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.IntVariable)
}
IntVariable::IntVariable(const IntVariable& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.IntVariable)
}
inline void IntVariable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){::int64_t{0}},
      decltype(_impl_.addr_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
IntVariable::~IntVariable() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.IntVariable)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IntVariable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void IntVariable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void IntVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.IntVariable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.value_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.addr_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.addr_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* IntVariable::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> IntVariable::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_IntVariable_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(IntVariable, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(IntVariable, _impl_.value_)}},
    // int32 addr = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IntVariable, _impl_.addr_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(IntVariable, _impl_.addr_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 addr = 1;
    {PROTOBUF_FIELD_OFFSET(IntVariable, _impl_.addr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 value = 2;
    {PROTOBUF_FIELD_OFFSET(IntVariable, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* IntVariable::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.IntVariable)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 addr = 1;
  if (this->_internal_addr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_addr(), target);
  }

  // int64 value = 2;
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.IntVariable)
  return target;
}

::size_t IntVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.IntVariable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_value());
  }

  // int32 addr = 1;
  if (this->_internal_addr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_addr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData IntVariable::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    IntVariable::MergeImpl
};
const ::google::protobuf::Message::ClassData*IntVariable::GetClassData() const { return &_class_data_; }


void IntVariable::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<IntVariable*>(&to_msg);
  auto& from = static_cast<const IntVariable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.IntVariable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_addr() != 0) {
    _this->_internal_set_addr(from._internal_addr());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IntVariable::CopyFrom(const IntVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.IntVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IntVariable::IsInitialized() const {
  return true;
}

void IntVariable::InternalSwap(IntVariable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntVariable, _impl_.addr_)
      + sizeof(IntVariable::_impl_.addr_)
      - PROTOBUF_FIELD_OFFSET(IntVariable, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::google::protobuf::Metadata IntVariable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[31]);
}
// ===================================================================

class ModbusVariable::_Internal {
 public:
};

ModbusVariable::ModbusVariable(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ModbusVariable)
}
ModbusVariable::ModbusVariable(const ModbusVariable& from) : ::google::protobuf::Message() {
  ModbusVariable* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.addr_){},
      decltype(_impl_.value_){},
      decltype(_impl_.signal_type_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.addr_, &from._impl_.addr_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.signal_type_) -
    reinterpret_cast<char*>(&_impl_.addr_)) + sizeof(_impl_.signal_type_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ModbusVariable)
}
inline void ModbusVariable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.addr_){0},
      decltype(_impl_.value_){0},
      decltype(_impl_.signal_type_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ModbusVariable::~ModbusVariable() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ModbusVariable)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ModbusVariable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}
void ModbusVariable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ModbusVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ModbusVariable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.addr_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.signal_type_) -
      reinterpret_cast<char*>(&_impl_.addr_)) + sizeof(_impl_.signal_type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ModbusVariable::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 46, 2> ModbusVariable::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ModbusVariable_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.ModbusVariable.SignalType signal_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ModbusVariable, _impl_.signal_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ModbusVariable, _impl_.signal_type_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ModbusVariable, _impl_.name_)}},
    // int32 addr = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ModbusVariable, _impl_.addr_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ModbusVariable, _impl_.addr_)}},
    // int32 value = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ModbusVariable, _impl_.value_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ModbusVariable, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(ModbusVariable, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 addr = 2;
    {PROTOBUF_FIELD_OFFSET(ModbusVariable, _impl_.addr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 value = 3;
    {PROTOBUF_FIELD_OFFSET(ModbusVariable, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .Nrmk.IndyFramework.ModbusVariable.SignalType signal_type = 4;
    {PROTOBUF_FIELD_OFFSET(ModbusVariable, _impl_.signal_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\41\4\0\0\0\0\0\0"
    "Nrmk.IndyFramework.ModbusVariable"
    "name"
  }},
};

::uint8_t* ModbusVariable::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ModbusVariable)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.ModbusVariable.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 addr = 2;
  if (this->_internal_addr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_addr(), target);
  }

  // int32 value = 3;
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_value(), target);
  }

  // .Nrmk.IndyFramework.ModbusVariable.SignalType signal_type = 4;
  if (this->_internal_signal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_signal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ModbusVariable)
  return target;
}

::size_t ModbusVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ModbusVariable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // int32 addr = 2;
  if (this->_internal_addr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_addr());
  }

  // int32 value = 3;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());
  }

  // .Nrmk.IndyFramework.ModbusVariable.SignalType signal_type = 4;
  if (this->_internal_signal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_signal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ModbusVariable::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ModbusVariable::MergeImpl
};
const ::google::protobuf::Message::ClassData*ModbusVariable::GetClassData() const { return &_class_data_; }


void ModbusVariable::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ModbusVariable*>(&to_msg);
  auto& from = static_cast<const ModbusVariable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ModbusVariable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_addr() != 0) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_signal_type() != 0) {
    _this->_internal_set_signal_type(from._internal_signal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ModbusVariable::CopyFrom(const ModbusVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ModbusVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ModbusVariable::IsInitialized() const {
  return true;
}

void ModbusVariable::InternalSwap(ModbusVariable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModbusVariable, _impl_.signal_type_)
      + sizeof(ModbusVariable::_impl_.signal_type_)
      - PROTOBUF_FIELD_OFFSET(ModbusVariable, _impl_.addr_)>(
          reinterpret_cast<char*>(&_impl_.addr_),
          reinterpret_cast<char*>(&other->_impl_.addr_));
}

::google::protobuf::Metadata ModbusVariable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[32]);
}
// ===================================================================

class BoolVariable::_Internal {
 public:
};

BoolVariable::BoolVariable(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.BoolVariable)
}
BoolVariable::BoolVariable(const BoolVariable& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.BoolVariable)
}
inline void BoolVariable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){0},
      decltype(_impl_.value_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
BoolVariable::~BoolVariable() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.BoolVariable)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BoolVariable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void BoolVariable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BoolVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.BoolVariable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.addr_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.addr_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BoolVariable::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> BoolVariable::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BoolVariable_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BoolVariable, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BoolVariable, _impl_.value_)}},
    // int32 addr = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BoolVariable, _impl_.addr_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BoolVariable, _impl_.addr_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 addr = 1;
    {PROTOBUF_FIELD_OFFSET(BoolVariable, _impl_.addr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool value = 2;
    {PROTOBUF_FIELD_OFFSET(BoolVariable, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* BoolVariable::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.BoolVariable)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 addr = 1;
  if (this->_internal_addr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_addr(), target);
  }

  // bool value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.BoolVariable)
  return target;
}

::size_t BoolVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.BoolVariable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->_internal_addr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_addr());
  }

  // bool value = 2;
  if (this->_internal_value() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BoolVariable::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BoolVariable::MergeImpl
};
const ::google::protobuf::Message::ClassData*BoolVariable::GetClassData() const { return &_class_data_; }


void BoolVariable::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BoolVariable*>(&to_msg);
  auto& from = static_cast<const BoolVariable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.BoolVariable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_addr() != 0) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BoolVariable::CopyFrom(const BoolVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.BoolVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BoolVariable::IsInitialized() const {
  return true;
}

void BoolVariable::InternalSwap(BoolVariable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoolVariable, _impl_.value_)
      + sizeof(BoolVariable::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(BoolVariable, _impl_.addr_)>(
          reinterpret_cast<char*>(&_impl_.addr_),
          reinterpret_cast<char*>(&other->_impl_.addr_));
}

::google::protobuf::Metadata BoolVariable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[33]);
}
// ===================================================================

class FloatVariable::_Internal {
 public:
};

FloatVariable::FloatVariable(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.FloatVariable)
}
FloatVariable::FloatVariable(const FloatVariable& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.FloatVariable)
}
inline void FloatVariable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){0},
      decltype(_impl_.value_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
FloatVariable::~FloatVariable() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.FloatVariable)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FloatVariable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void FloatVariable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FloatVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.FloatVariable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.addr_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.addr_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FloatVariable::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> FloatVariable::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FloatVariable_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float value = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(FloatVariable, _impl_.value_)}},
    // int32 addr = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FloatVariable, _impl_.addr_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FloatVariable, _impl_.addr_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 addr = 1;
    {PROTOBUF_FIELD_OFFSET(FloatVariable, _impl_.addr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float value = 2;
    {PROTOBUF_FIELD_OFFSET(FloatVariable, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FloatVariable::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.FloatVariable)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 addr = 1;
  if (this->_internal_addr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_addr(), target);
  }

  // float value = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.FloatVariable)
  return target;
}

::size_t FloatVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.FloatVariable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->_internal_addr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_addr());
  }

  // float value = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FloatVariable::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FloatVariable::MergeImpl
};
const ::google::protobuf::Message::ClassData*FloatVariable::GetClassData() const { return &_class_data_; }


void FloatVariable::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FloatVariable*>(&to_msg);
  auto& from = static_cast<const FloatVariable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.FloatVariable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_addr() != 0) {
    _this->_internal_set_addr(from._internal_addr());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FloatVariable::CopyFrom(const FloatVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.FloatVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FloatVariable::IsInitialized() const {
  return true;
}

void FloatVariable::InternalSwap(FloatVariable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FloatVariable, _impl_.value_)
      + sizeof(FloatVariable::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(FloatVariable, _impl_.addr_)>(
          reinterpret_cast<char*>(&_impl_.addr_),
          reinterpret_cast<char*>(&other->_impl_.addr_));
}

::google::protobuf::Metadata FloatVariable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[34]);
}
// ===================================================================

class JPosVariable::_Internal {
 public:
};

JPosVariable::JPosVariable(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.JPosVariable)
}
JPosVariable::JPosVariable(const JPosVariable& from) : ::google::protobuf::Message() {
  JPosVariable* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.jpos_){from._impl_.jpos_},
      decltype(_impl_.addr_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.addr_ = from._impl_.addr_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.JPosVariable)
}
inline void JPosVariable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.jpos_){arena},
      decltype(_impl_.addr_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
JPosVariable::~JPosVariable() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.JPosVariable)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void JPosVariable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jpos_.~RepeatedField();
}
void JPosVariable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void JPosVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.JPosVariable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_jpos()->Clear();
  _impl_.addr_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* JPosVariable::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> JPosVariable::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_JPosVariable_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float jpos = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(JPosVariable, _impl_.jpos_)}},
    // int32 addr = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JPosVariable, _impl_.addr_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(JPosVariable, _impl_.addr_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 addr = 1;
    {PROTOBUF_FIELD_OFFSET(JPosVariable, _impl_.addr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated float jpos = 2;
    {PROTOBUF_FIELD_OFFSET(JPosVariable, _impl_.jpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* JPosVariable::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.JPosVariable)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 addr = 1;
  if (this->_internal_addr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_addr(), target);
  }

  // repeated float jpos = 2;
  if (this->_internal_jpos_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_jpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.JPosVariable)
  return target;
}

::size_t JPosVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.JPosVariable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_jpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // int32 addr = 1;
  if (this->_internal_addr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_addr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData JPosVariable::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    JPosVariable::MergeImpl
};
const ::google::protobuf::Message::ClassData*JPosVariable::GetClassData() const { return &_class_data_; }


void JPosVariable::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<JPosVariable*>(&to_msg);
  auto& from = static_cast<const JPosVariable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.JPosVariable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_jpos()->MergeFrom(from._internal_jpos());
  if (from._internal_addr() != 0) {
    _this->_internal_set_addr(from._internal_addr());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JPosVariable::CopyFrom(const JPosVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.JPosVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool JPosVariable::IsInitialized() const {
  return true;
}

void JPosVariable::InternalSwap(JPosVariable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.jpos_.InternalSwap(&other->_impl_.jpos_);
        swap(_impl_.addr_, other->_impl_.addr_);
}

::google::protobuf::Metadata JPosVariable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[35]);
}
// ===================================================================

class TPosVariable::_Internal {
 public:
};

TPosVariable::TPosVariable(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TPosVariable)
}
TPosVariable::TPosVariable(const TPosVariable& from) : ::google::protobuf::Message() {
  TPosVariable* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tpos_){from._impl_.tpos_},
      decltype(_impl_.addr_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.addr_ = from._impl_.addr_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TPosVariable)
}
inline void TPosVariable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tpos_){arena},
      decltype(_impl_.addr_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TPosVariable::~TPosVariable() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TPosVariable)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TPosVariable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tpos_.~RepeatedField();
}
void TPosVariable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TPosVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TPosVariable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tpos()->Clear();
  _impl_.addr_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TPosVariable::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TPosVariable::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TPosVariable_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float tpos = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TPosVariable, _impl_.tpos_)}},
    // int32 addr = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TPosVariable, _impl_.addr_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TPosVariable, _impl_.addr_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 addr = 1;
    {PROTOBUF_FIELD_OFFSET(TPosVariable, _impl_.addr_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated float tpos = 2;
    {PROTOBUF_FIELD_OFFSET(TPosVariable, _impl_.tpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TPosVariable::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TPosVariable)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 addr = 1;
  if (this->_internal_addr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_addr(), target);
  }

  // repeated float tpos = 2;
  if (this->_internal_tpos_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_tpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TPosVariable)
  return target;
}

::size_t TPosVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TPosVariable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // int32 addr = 1;
  if (this->_internal_addr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_addr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TPosVariable::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TPosVariable::MergeImpl
};
const ::google::protobuf::Message::ClassData*TPosVariable::GetClassData() const { return &_class_data_; }


void TPosVariable::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TPosVariable*>(&to_msg);
  auto& from = static_cast<const TPosVariable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TPosVariable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tpos()->MergeFrom(from._internal_tpos());
  if (from._internal_addr() != 0) {
    _this->_internal_set_addr(from._internal_addr());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TPosVariable::CopyFrom(const TPosVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TPosVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TPosVariable::IsInitialized() const {
  return true;
}

void TPosVariable::InternalSwap(TPosVariable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tpos_.InternalSwap(&other->_impl_.tpos_);
        swap(_impl_.addr_, other->_impl_.addr_);
}

::google::protobuf::Metadata TPosVariable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[36]);
}
// ===================================================================

class ModbusServer::_Internal {
 public:
};

ModbusServer::ModbusServer(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ModbusServer)
}
ModbusServer::ModbusServer(const ModbusServer& from) : ::google::protobuf::Message() {
  ModbusServer* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variable_list_){from._impl_.variable_list_},
      decltype(_impl_.server_name_){},
      decltype(_impl_.ip_){},
      decltype(_impl_.port_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.server_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.server_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_name().empty()) {
    _this->_impl_.server_name_.Set(from._internal_server_name(), _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ModbusServer)
}
inline void ModbusServer::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.variable_list_){arena},
      decltype(_impl_.server_name_){},
      decltype(_impl_.ip_){},
      decltype(_impl_.port_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.server_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.server_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ModbusServer::~ModbusServer() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ModbusServer)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ModbusServer::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variable_list_.~RepeatedPtrField();
  _impl_.server_name_.Destroy();
  _impl_.ip_.Destroy();
}
void ModbusServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ModbusServer::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ModbusServer)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_variable_list()->Clear();
  _impl_.server_name_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.port_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ModbusServer::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 53, 2> ModbusServer::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ModbusServer_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.ModbusVariable variable_list = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ModbusServer, _impl_.variable_list_)}},
    // string server_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ModbusServer, _impl_.server_name_)}},
    // string ip = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ModbusServer, _impl_.ip_)}},
    // int32 port = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ModbusServer, _impl_.port_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ModbusServer, _impl_.port_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string server_name = 1;
    {PROTOBUF_FIELD_OFFSET(ModbusServer, _impl_.server_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ip = 2;
    {PROTOBUF_FIELD_OFFSET(ModbusServer, _impl_.ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 port = 3;
    {PROTOBUF_FIELD_OFFSET(ModbusServer, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .Nrmk.IndyFramework.ModbusVariable variable_list = 4;
    {PROTOBUF_FIELD_OFFSET(ModbusServer, _impl_.variable_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::ModbusVariable>()},
  }}, {{
    "\37\13\2\0\0\0\0\0"
    "Nrmk.IndyFramework.ModbusServer"
    "server_name"
    "ip"
  }},
};

::uint8_t* ModbusServer::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ModbusServer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string server_name = 1;
  if (!this->_internal_server_name().empty()) {
    const std::string& _s = this->_internal_server_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.ModbusServer.server_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    const std::string& _s = this->_internal_ip();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.ModbusServer.ip");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_port(), target);
  }

  // repeated .Nrmk.IndyFramework.ModbusVariable variable_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variable_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_variable_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ModbusServer)
  return target;
}

::size_t ModbusServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ModbusServer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.ModbusVariable variable_list = 4;
  total_size += 1UL * this->_internal_variable_list_size();
  for (const auto& msg : this->_internal_variable_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string server_name = 1;
  if (!this->_internal_server_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_server_name());
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ip());
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ModbusServer::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ModbusServer::MergeImpl
};
const ::google::protobuf::Message::ClassData*ModbusServer::GetClassData() const { return &_class_data_; }


void ModbusServer::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ModbusServer*>(&to_msg);
  auto& from = static_cast<const ModbusServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ModbusServer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_variable_list()->MergeFrom(from._internal_variable_list());
  if (!from._internal_server_name().empty()) {
    _this->_internal_set_server_name(from._internal_server_name());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ModbusServer::CopyFrom(const ModbusServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ModbusServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ModbusServer::IsInitialized() const {
  return true;
}

void ModbusServer::InternalSwap(ModbusServer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variable_list_.InternalSwap(&other->_impl_.variable_list_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.server_name_, lhs_arena,
                                       &other->_impl_.server_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, lhs_arena,
                                       &other->_impl_.ip_, rhs_arena);
        swap(_impl_.port_, other->_impl_.port_);
}

::google::protobuf::Metadata ModbusServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[37]);
}
// ===================================================================

class ModbusVariableList::_Internal {
 public:
};

ModbusVariableList::ModbusVariableList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ModbusVariableList)
}
ModbusVariableList::ModbusVariableList(const ModbusVariableList& from) : ::google::protobuf::Message() {
  ModbusVariableList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.modbus_variables_){from._impl_.modbus_variables_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ModbusVariableList)
}
inline void ModbusVariableList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.modbus_variables_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
ModbusVariableList::~ModbusVariableList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ModbusVariableList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ModbusVariableList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modbus_variables_.~RepeatedPtrField();
}
void ModbusVariableList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ModbusVariableList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ModbusVariableList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_modbus_variables()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ModbusVariableList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ModbusVariableList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ModbusVariableList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.ModbusServer modbus_variables = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ModbusVariableList, _impl_.modbus_variables_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.ModbusServer modbus_variables = 1;
    {PROTOBUF_FIELD_OFFSET(ModbusVariableList, _impl_.modbus_variables_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::ModbusServer>()},
  }}, {{
  }},
};

::uint8_t* ModbusVariableList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ModbusVariableList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.ModbusServer modbus_variables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_modbus_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_modbus_variables().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ModbusVariableList)
  return target;
}

::size_t ModbusVariableList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ModbusVariableList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.ModbusServer modbus_variables = 1;
  total_size += 1UL * this->_internal_modbus_variables_size();
  for (const auto& msg : this->_internal_modbus_variables()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ModbusVariableList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ModbusVariableList::MergeImpl
};
const ::google::protobuf::Message::ClassData*ModbusVariableList::GetClassData() const { return &_class_data_; }


void ModbusVariableList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ModbusVariableList*>(&to_msg);
  auto& from = static_cast<const ModbusVariableList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ModbusVariableList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_modbus_variables()->MergeFrom(from._internal_modbus_variables());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ModbusVariableList::CopyFrom(const ModbusVariableList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ModbusVariableList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ModbusVariableList::IsInitialized() const {
  return true;
}

void ModbusVariableList::InternalSwap(ModbusVariableList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.modbus_variables_.InternalSwap(&other->_impl_.modbus_variables_);
}

::google::protobuf::Metadata ModbusVariableList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[38]);
}
// ===================================================================

class AllVars::_Internal {
 public:
};

AllVars::AllVars(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.AllVars)
}
AllVars::AllVars(const AllVars& from) : ::google::protobuf::Message() {
  AllVars* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){from._impl_.variables_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.AllVars)
}
inline void AllVars::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AllVars::~AllVars() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.AllVars)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AllVars::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.~RepeatedPtrField();
}
void AllVars::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AllVars::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.AllVars)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_variables()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AllVars::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AllVars::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AllVars_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.Variable variables = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AllVars, _impl_.variables_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.Variable variables = 1;
    {PROTOBUF_FIELD_OFFSET(AllVars, _impl_.variables_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Variable>()},
  }}, {{
  }},
};

::uint8_t* AllVars::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.AllVars)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.Variable variables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.AllVars)
  return target;
}

::size_t AllVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.AllVars)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.Variable variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_internal_variables()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AllVars::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AllVars::MergeImpl
};
const ::google::protobuf::Message::ClassData*AllVars::GetClassData() const { return &_class_data_; }


void AllVars::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AllVars*>(&to_msg);
  auto& from = static_cast<const AllVars&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.AllVars)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_variables()->MergeFrom(from._internal_variables());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AllVars::CopyFrom(const AllVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.AllVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AllVars::IsInitialized() const {
  return true;
}

void AllVars::InternalSwap(AllVars* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
}

::google::protobuf::Metadata AllVars::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[39]);
}
// ===================================================================

class IntVars::_Internal {
 public:
};

IntVars::IntVars(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.IntVars)
}
IntVars::IntVars(const IntVars& from) : ::google::protobuf::Message() {
  IntVars* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){from._impl_.variables_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.IntVars)
}
inline void IntVars::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
IntVars::~IntVars() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.IntVars)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IntVars::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.~RepeatedPtrField();
}
void IntVars::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void IntVars::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.IntVars)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_variables()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* IntVars::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> IntVars::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_IntVars_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.IntVariable variables = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(IntVars, _impl_.variables_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.IntVariable variables = 1;
    {PROTOBUF_FIELD_OFFSET(IntVars, _impl_.variables_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::IntVariable>()},
  }}, {{
  }},
};

::uint8_t* IntVars::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.IntVars)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.IntVariable variables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.IntVars)
  return target;
}

::size_t IntVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.IntVars)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.IntVariable variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_internal_variables()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData IntVars::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    IntVars::MergeImpl
};
const ::google::protobuf::Message::ClassData*IntVars::GetClassData() const { return &_class_data_; }


void IntVars::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<IntVars*>(&to_msg);
  auto& from = static_cast<const IntVars&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.IntVars)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_variables()->MergeFrom(from._internal_variables());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IntVars::CopyFrom(const IntVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.IntVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IntVars::IsInitialized() const {
  return true;
}

void IntVars::InternalSwap(IntVars* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
}

::google::protobuf::Metadata IntVars::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[40]);
}
// ===================================================================

class ModbusVars::_Internal {
 public:
};

ModbusVars::ModbusVars(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ModbusVars)
}
ModbusVars::ModbusVars(const ModbusVars& from) : ::google::protobuf::Message() {
  ModbusVars* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){from._impl_.variables_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ModbusVars)
}
inline void ModbusVars::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
ModbusVars::~ModbusVars() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ModbusVars)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ModbusVars::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.~RepeatedPtrField();
}
void ModbusVars::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ModbusVars::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ModbusVars)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_variables()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ModbusVars::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ModbusVars::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ModbusVars_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.ModbusVariable variables = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ModbusVars, _impl_.variables_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.ModbusVariable variables = 1;
    {PROTOBUF_FIELD_OFFSET(ModbusVars, _impl_.variables_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::ModbusVariable>()},
  }}, {{
  }},
};

::uint8_t* ModbusVars::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ModbusVars)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.ModbusVariable variables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ModbusVars)
  return target;
}

::size_t ModbusVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ModbusVars)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.ModbusVariable variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_internal_variables()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ModbusVars::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ModbusVars::MergeImpl
};
const ::google::protobuf::Message::ClassData*ModbusVars::GetClassData() const { return &_class_data_; }


void ModbusVars::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ModbusVars*>(&to_msg);
  auto& from = static_cast<const ModbusVars&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ModbusVars)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_variables()->MergeFrom(from._internal_variables());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ModbusVars::CopyFrom(const ModbusVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ModbusVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ModbusVars::IsInitialized() const {
  return true;
}

void ModbusVars::InternalSwap(ModbusVars* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
}

::google::protobuf::Metadata ModbusVars::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[41]);
}
// ===================================================================

class BoolVars::_Internal {
 public:
};

BoolVars::BoolVars(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.BoolVars)
}
BoolVars::BoolVars(const BoolVars& from) : ::google::protobuf::Message() {
  BoolVars* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){from._impl_.variables_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.BoolVars)
}
inline void BoolVars::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
BoolVars::~BoolVars() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.BoolVars)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BoolVars::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.~RepeatedPtrField();
}
void BoolVars::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BoolVars::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.BoolVars)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_variables()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BoolVars::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> BoolVars::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BoolVars_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.BoolVariable variables = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BoolVars, _impl_.variables_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.BoolVariable variables = 1;
    {PROTOBUF_FIELD_OFFSET(BoolVars, _impl_.variables_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::BoolVariable>()},
  }}, {{
  }},
};

::uint8_t* BoolVars::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.BoolVars)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.BoolVariable variables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.BoolVars)
  return target;
}

::size_t BoolVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.BoolVars)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.BoolVariable variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_internal_variables()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BoolVars::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BoolVars::MergeImpl
};
const ::google::protobuf::Message::ClassData*BoolVars::GetClassData() const { return &_class_data_; }


void BoolVars::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BoolVars*>(&to_msg);
  auto& from = static_cast<const BoolVars&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.BoolVars)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_variables()->MergeFrom(from._internal_variables());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BoolVars::CopyFrom(const BoolVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.BoolVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BoolVars::IsInitialized() const {
  return true;
}

void BoolVars::InternalSwap(BoolVars* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
}

::google::protobuf::Metadata BoolVars::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[42]);
}
// ===================================================================

class FloatVars::_Internal {
 public:
};

FloatVars::FloatVars(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.FloatVars)
}
FloatVars::FloatVars(const FloatVars& from) : ::google::protobuf::Message() {
  FloatVars* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){from._impl_.variables_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.FloatVars)
}
inline void FloatVars::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
FloatVars::~FloatVars() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.FloatVars)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FloatVars::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.~RepeatedPtrField();
}
void FloatVars::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FloatVars::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.FloatVars)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_variables()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FloatVars::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> FloatVars::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FloatVars_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.FloatVariable variables = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FloatVars, _impl_.variables_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.FloatVariable variables = 1;
    {PROTOBUF_FIELD_OFFSET(FloatVars, _impl_.variables_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::FloatVariable>()},
  }}, {{
  }},
};

::uint8_t* FloatVars::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.FloatVars)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.FloatVariable variables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.FloatVars)
  return target;
}

::size_t FloatVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.FloatVars)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.FloatVariable variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_internal_variables()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FloatVars::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FloatVars::MergeImpl
};
const ::google::protobuf::Message::ClassData*FloatVars::GetClassData() const { return &_class_data_; }


void FloatVars::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FloatVars*>(&to_msg);
  auto& from = static_cast<const FloatVars&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.FloatVars)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_variables()->MergeFrom(from._internal_variables());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FloatVars::CopyFrom(const FloatVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.FloatVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FloatVars::IsInitialized() const {
  return true;
}

void FloatVars::InternalSwap(FloatVars* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
}

::google::protobuf::Metadata FloatVars::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[43]);
}
// ===================================================================

class JPosVars::_Internal {
 public:
};

JPosVars::JPosVars(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.JPosVars)
}
JPosVars::JPosVars(const JPosVars& from) : ::google::protobuf::Message() {
  JPosVars* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){from._impl_.variables_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.JPosVars)
}
inline void JPosVars::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
JPosVars::~JPosVars() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.JPosVars)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void JPosVars::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.~RepeatedPtrField();
}
void JPosVars::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void JPosVars::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.JPosVars)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_variables()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* JPosVars::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> JPosVars::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_JPosVars_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.JPosVariable variables = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(JPosVars, _impl_.variables_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.JPosVariable variables = 1;
    {PROTOBUF_FIELD_OFFSET(JPosVars, _impl_.variables_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::JPosVariable>()},
  }}, {{
  }},
};

::uint8_t* JPosVars::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.JPosVars)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.JPosVariable variables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.JPosVars)
  return target;
}

::size_t JPosVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.JPosVars)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.JPosVariable variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_internal_variables()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData JPosVars::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    JPosVars::MergeImpl
};
const ::google::protobuf::Message::ClassData*JPosVars::GetClassData() const { return &_class_data_; }


void JPosVars::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<JPosVars*>(&to_msg);
  auto& from = static_cast<const JPosVars&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.JPosVars)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_variables()->MergeFrom(from._internal_variables());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JPosVars::CopyFrom(const JPosVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.JPosVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool JPosVars::IsInitialized() const {
  return true;
}

void JPosVars::InternalSwap(JPosVars* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
}

::google::protobuf::Metadata JPosVars::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[44]);
}
// ===================================================================

class TPosVars::_Internal {
 public:
};

TPosVars::TPosVars(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TPosVars)
}
TPosVars::TPosVars(const TPosVars& from) : ::google::protobuf::Message() {
  TPosVars* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){from._impl_.variables_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TPosVars)
}
inline void TPosVars::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TPosVars::~TPosVars() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TPosVars)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TPosVars::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.~RepeatedPtrField();
}
void TPosVars::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TPosVars::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TPosVars)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_variables()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TPosVars::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TPosVars::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TPosVars_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.TPosVariable variables = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TPosVars, _impl_.variables_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.TPosVariable variables = 1;
    {PROTOBUF_FIELD_OFFSET(TPosVars, _impl_.variables_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::TPosVariable>()},
  }}, {{
  }},
};

::uint8_t* TPosVars::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TPosVars)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.TPosVariable variables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TPosVars)
  return target;
}

::size_t TPosVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TPosVars)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.TPosVariable variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_internal_variables()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TPosVars::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TPosVars::MergeImpl
};
const ::google::protobuf::Message::ClassData*TPosVars::GetClassData() const { return &_class_data_; }


void TPosVars::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TPosVars*>(&to_msg);
  auto& from = static_cast<const TPosVars&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TPosVars)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_variables()->MergeFrom(from._internal_variables());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TPosVars::CopyFrom(const TPosVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TPosVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TPosVars::IsInitialized() const {
  return true;
}

void TPosVars::InternalSwap(TPosVars* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
}

::google::protobuf::Metadata TPosVars::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[45]);
}
// ===================================================================

class InverseKinematicsReq::_Internal {
 public:
};

InverseKinematicsReq::InverseKinematicsReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.InverseKinematicsReq)
}
InverseKinematicsReq::InverseKinematicsReq(const InverseKinematicsReq& from) : ::google::protobuf::Message() {
  InverseKinematicsReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tpos_){from._impl_.tpos_},
      decltype(_impl_.init_jpos_){from._impl_.init_jpos_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.InverseKinematicsReq)
}
inline void InverseKinematicsReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tpos_){arena},
      decltype(_impl_.init_jpos_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
InverseKinematicsReq::~InverseKinematicsReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.InverseKinematicsReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InverseKinematicsReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tpos_.~RepeatedField();
  _impl_.init_jpos_.~RepeatedField();
}
void InverseKinematicsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void InverseKinematicsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.InverseKinematicsReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tpos()->Clear();
  _internal_mutable_init_jpos()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InverseKinematicsReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> InverseKinematicsReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_InverseKinematicsReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float init_jpos = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(InverseKinematicsReq, _impl_.init_jpos_)}},
    // repeated float tpos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InverseKinematicsReq, _impl_.tpos_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float tpos = 1;
    {PROTOBUF_FIELD_OFFSET(InverseKinematicsReq, _impl_.tpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float init_jpos = 2;
    {PROTOBUF_FIELD_OFFSET(InverseKinematicsReq, _impl_.init_jpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* InverseKinematicsReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.InverseKinematicsReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float tpos = 1;
  if (this->_internal_tpos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_tpos(), target);
  }

  // repeated float init_jpos = 2;
  if (this->_internal_init_jpos_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_init_jpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.InverseKinematicsReq)
  return target;
}

::size_t InverseKinematicsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.InverseKinematicsReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float init_jpos = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_init_jpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InverseKinematicsReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    InverseKinematicsReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*InverseKinematicsReq::GetClassData() const { return &_class_data_; }


void InverseKinematicsReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InverseKinematicsReq*>(&to_msg);
  auto& from = static_cast<const InverseKinematicsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.InverseKinematicsReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tpos()->MergeFrom(from._internal_tpos());
  _this->_internal_mutable_init_jpos()->MergeFrom(from._internal_init_jpos());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InverseKinematicsReq::CopyFrom(const InverseKinematicsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.InverseKinematicsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InverseKinematicsReq::IsInitialized() const {
  return true;
}

void InverseKinematicsReq::InternalSwap(InverseKinematicsReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tpos_.InternalSwap(&other->_impl_.tpos_);
  _impl_.init_jpos_.InternalSwap(&other->_impl_.init_jpos_);
}

::google::protobuf::Metadata InverseKinematicsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[46]);
}
// ===================================================================

class InverseKinematicsRes::_Internal {
 public:
  using HasBits = decltype(std::declval<InverseKinematicsRes>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InverseKinematicsRes, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const InverseKinematicsRes* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& InverseKinematicsRes::_Internal::response(const InverseKinematicsRes* msg) {
  return *msg->_impl_.response_;
}
void InverseKinematicsRes::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
InverseKinematicsRes::InverseKinematicsRes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.InverseKinematicsRes)
}
InverseKinematicsRes::InverseKinematicsRes(const InverseKinematicsRes& from) : ::google::protobuf::Message() {
  InverseKinematicsRes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.jpos_){from._impl_.jpos_},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.InverseKinematicsRes)
}
inline void InverseKinematicsRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.jpos_){arena},
      decltype(_impl_.response_){nullptr},
  };
}
InverseKinematicsRes::~InverseKinematicsRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.InverseKinematicsRes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InverseKinematicsRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jpos_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void InverseKinematicsRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void InverseKinematicsRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.InverseKinematicsRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_jpos()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InverseKinematicsRes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 7> InverseKinematicsRes::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InverseKinematicsRes, _impl_._has_bits_),
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_InverseKinematicsRes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 0, PROTOBUF_FIELD_OFFSET(InverseKinematicsRes, _impl_.response_)}},
    // repeated float jpos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InverseKinematicsRes, _impl_.jpos_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // repeated float jpos = 1;
    {PROTOBUF_FIELD_OFFSET(InverseKinematicsRes, _impl_.jpos_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(InverseKinematicsRes, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* InverseKinematicsRes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.InverseKinematicsRes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float jpos = 1;
  if (this->_internal_jpos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_jpos(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.InverseKinematicsRes)
  return target;
}

::size_t InverseKinematicsRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.InverseKinematicsRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_jpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InverseKinematicsRes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    InverseKinematicsRes::MergeImpl
};
const ::google::protobuf::Message::ClassData*InverseKinematicsRes::GetClassData() const { return &_class_data_; }


void InverseKinematicsRes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InverseKinematicsRes*>(&to_msg);
  auto& from = static_cast<const InverseKinematicsRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.InverseKinematicsRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_jpos()->MergeFrom(from._internal_jpos());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InverseKinematicsRes::CopyFrom(const InverseKinematicsRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.InverseKinematicsRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InverseKinematicsRes::IsInitialized() const {
  return true;
}

void InverseKinematicsRes::InternalSwap(InverseKinematicsRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.jpos_.InternalSwap(&other->_impl_.jpos_);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata InverseKinematicsRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[47]);
}
// ===================================================================

class ForwardKinematicsReq::_Internal {
 public:
};

ForwardKinematicsReq::ForwardKinematicsReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ForwardKinematicsReq)
}
ForwardKinematicsReq::ForwardKinematicsReq(const ForwardKinematicsReq& from) : ::google::protobuf::Message() {
  ForwardKinematicsReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.jpos_){from._impl_.jpos_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ForwardKinematicsReq)
}
inline void ForwardKinematicsReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.jpos_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
ForwardKinematicsReq::~ForwardKinematicsReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ForwardKinematicsReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ForwardKinematicsReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jpos_.~RepeatedField();
}
void ForwardKinematicsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ForwardKinematicsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ForwardKinematicsReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_jpos()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ForwardKinematicsReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ForwardKinematicsReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ForwardKinematicsReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float jpos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ForwardKinematicsReq, _impl_.jpos_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float jpos = 1;
    {PROTOBUF_FIELD_OFFSET(ForwardKinematicsReq, _impl_.jpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ForwardKinematicsReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ForwardKinematicsReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float jpos = 1;
  if (this->_internal_jpos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_jpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ForwardKinematicsReq)
  return target;
}

::size_t ForwardKinematicsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ForwardKinematicsReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_jpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ForwardKinematicsReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ForwardKinematicsReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*ForwardKinematicsReq::GetClassData() const { return &_class_data_; }


void ForwardKinematicsReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ForwardKinematicsReq*>(&to_msg);
  auto& from = static_cast<const ForwardKinematicsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ForwardKinematicsReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_jpos()->MergeFrom(from._internal_jpos());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ForwardKinematicsReq::CopyFrom(const ForwardKinematicsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ForwardKinematicsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ForwardKinematicsReq::IsInitialized() const {
  return true;
}

void ForwardKinematicsReq::InternalSwap(ForwardKinematicsReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.jpos_.InternalSwap(&other->_impl_.jpos_);
}

::google::protobuf::Metadata ForwardKinematicsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[48]);
}
// ===================================================================

class ForwardKinematicsRes::_Internal {
 public:
  using HasBits = decltype(std::declval<ForwardKinematicsRes>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ForwardKinematicsRes, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const ForwardKinematicsRes* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& ForwardKinematicsRes::_Internal::response(const ForwardKinematicsRes* msg) {
  return *msg->_impl_.response_;
}
void ForwardKinematicsRes::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ForwardKinematicsRes::ForwardKinematicsRes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ForwardKinematicsRes)
}
ForwardKinematicsRes::ForwardKinematicsRes(const ForwardKinematicsRes& from) : ::google::protobuf::Message() {
  ForwardKinematicsRes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.tpos_){from._impl_.tpos_},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ForwardKinematicsRes)
}
inline void ForwardKinematicsRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.tpos_){arena},
      decltype(_impl_.response_){nullptr},
  };
}
ForwardKinematicsRes::~ForwardKinematicsRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ForwardKinematicsRes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ForwardKinematicsRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tpos_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void ForwardKinematicsRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ForwardKinematicsRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ForwardKinematicsRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tpos()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ForwardKinematicsRes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 7> ForwardKinematicsRes::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ForwardKinematicsRes, _impl_._has_bits_),
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ForwardKinematicsRes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 0, PROTOBUF_FIELD_OFFSET(ForwardKinematicsRes, _impl_.response_)}},
    // repeated float tpos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ForwardKinematicsRes, _impl_.tpos_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // repeated float tpos = 1;
    {PROTOBUF_FIELD_OFFSET(ForwardKinematicsRes, _impl_.tpos_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(ForwardKinematicsRes, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* ForwardKinematicsRes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ForwardKinematicsRes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float tpos = 1;
  if (this->_internal_tpos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_tpos(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ForwardKinematicsRes)
  return target;
}

::size_t ForwardKinematicsRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ForwardKinematicsRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ForwardKinematicsRes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ForwardKinematicsRes::MergeImpl
};
const ::google::protobuf::Message::ClassData*ForwardKinematicsRes::GetClassData() const { return &_class_data_; }


void ForwardKinematicsRes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ForwardKinematicsRes*>(&to_msg);
  auto& from = static_cast<const ForwardKinematicsRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ForwardKinematicsRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tpos()->MergeFrom(from._internal_tpos());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ForwardKinematicsRes::CopyFrom(const ForwardKinematicsRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ForwardKinematicsRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ForwardKinematicsRes::IsInitialized() const {
  return true;
}

void ForwardKinematicsRes::InternalSwap(ForwardKinematicsRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tpos_.InternalSwap(&other->_impl_.tpos_);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata ForwardKinematicsRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[49]);
}
// ===================================================================

class CheckAproachRetractValidReq::_Internal {
 public:
};

CheckAproachRetractValidReq::CheckAproachRetractValidReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CheckAproachRetractValidReq)
}
CheckAproachRetractValidReq::CheckAproachRetractValidReq(const CheckAproachRetractValidReq& from) : ::google::protobuf::Message() {
  CheckAproachRetractValidReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tpos_){from._impl_.tpos_},
      decltype(_impl_.init_jpos_){from._impl_.init_jpos_},
      decltype(_impl_.pre_tpos_){from._impl_.pre_tpos_},
      decltype(_impl_.post_tpos_){from._impl_.post_tpos_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CheckAproachRetractValidReq)
}
inline void CheckAproachRetractValidReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tpos_){arena},
      decltype(_impl_.init_jpos_){arena},
      decltype(_impl_.pre_tpos_){arena},
      decltype(_impl_.post_tpos_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
CheckAproachRetractValidReq::~CheckAproachRetractValidReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CheckAproachRetractValidReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tpos_.~RepeatedField();
  _impl_.init_jpos_.~RepeatedField();
  _impl_.pre_tpos_.~RepeatedField();
  _impl_.post_tpos_.~RepeatedField();
}
void CheckAproachRetractValidReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CheckAproachRetractValidReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tpos()->Clear();
  _internal_mutable_init_jpos()->Clear();
  _internal_mutable_pre_tpos()->Clear();
  _internal_mutable_post_tpos()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CheckAproachRetractValidReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> CheckAproachRetractValidReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CheckAproachRetractValidReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float post_tpos = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidReq, _impl_.post_tpos_)}},
    // repeated float tpos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidReq, _impl_.tpos_)}},
    // repeated float init_jpos = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidReq, _impl_.init_jpos_)}},
    // repeated float pre_tpos = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidReq, _impl_.pre_tpos_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float tpos = 1;
    {PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidReq, _impl_.tpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float init_jpos = 2;
    {PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidReq, _impl_.init_jpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float pre_tpos = 3;
    {PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidReq, _impl_.pre_tpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float post_tpos = 4;
    {PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidReq, _impl_.post_tpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CheckAproachRetractValidReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float tpos = 1;
  if (this->_internal_tpos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_tpos(), target);
  }

  // repeated float init_jpos = 2;
  if (this->_internal_init_jpos_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_init_jpos(), target);
  }

  // repeated float pre_tpos = 3;
  if (this->_internal_pre_tpos_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_pre_tpos(), target);
  }

  // repeated float post_tpos = 4;
  if (this->_internal_post_tpos_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_post_tpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  return target;
}

::size_t CheckAproachRetractValidReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float init_jpos = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_init_jpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float pre_tpos = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_pre_tpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float post_tpos = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_post_tpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CheckAproachRetractValidReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CheckAproachRetractValidReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*CheckAproachRetractValidReq::GetClassData() const { return &_class_data_; }


void CheckAproachRetractValidReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CheckAproachRetractValidReq*>(&to_msg);
  auto& from = static_cast<const CheckAproachRetractValidReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tpos()->MergeFrom(from._internal_tpos());
  _this->_internal_mutable_init_jpos()->MergeFrom(from._internal_init_jpos());
  _this->_internal_mutable_pre_tpos()->MergeFrom(from._internal_pre_tpos());
  _this->_internal_mutable_post_tpos()->MergeFrom(from._internal_post_tpos());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CheckAproachRetractValidReq::CopyFrom(const CheckAproachRetractValidReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CheckAproachRetractValidReq::IsInitialized() const {
  return true;
}

void CheckAproachRetractValidReq::InternalSwap(CheckAproachRetractValidReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tpos_.InternalSwap(&other->_impl_.tpos_);
  _impl_.init_jpos_.InternalSwap(&other->_impl_.init_jpos_);
  _impl_.pre_tpos_.InternalSwap(&other->_impl_.pre_tpos_);
  _impl_.post_tpos_.InternalSwap(&other->_impl_.post_tpos_);
}

::google::protobuf::Metadata CheckAproachRetractValidReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[50]);
}
// ===================================================================

class CheckAproachRetractValidRes::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckAproachRetractValidRes>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidRes, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const CheckAproachRetractValidRes* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& CheckAproachRetractValidRes::_Internal::response(const CheckAproachRetractValidRes* msg) {
  return *msg->_impl_.response_;
}
void CheckAproachRetractValidRes::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CheckAproachRetractValidRes::CheckAproachRetractValidRes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CheckAproachRetractValidRes)
}
CheckAproachRetractValidRes::CheckAproachRetractValidRes(const CheckAproachRetractValidRes& from) : ::google::protobuf::Message() {
  CheckAproachRetractValidRes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.tar_pos_){from._impl_.tar_pos_},
      decltype(_impl_.approach_pos_){from._impl_.approach_pos_},
      decltype(_impl_.retract_pos_){from._impl_.retract_pos_},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.is_valid_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  _this->_impl_.is_valid_ = from._impl_.is_valid_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CheckAproachRetractValidRes)
}
inline void CheckAproachRetractValidRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.tar_pos_){arena},
      decltype(_impl_.approach_pos_){arena},
      decltype(_impl_.retract_pos_){arena},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.is_valid_){false},
  };
}
CheckAproachRetractValidRes::~CheckAproachRetractValidRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CheckAproachRetractValidRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tar_pos_.~RepeatedField();
  _impl_.approach_pos_.~RepeatedField();
  _impl_.retract_pos_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void CheckAproachRetractValidRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CheckAproachRetractValidRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tar_pos()->Clear();
  _internal_mutable_approach_pos()->Clear();
  _internal_mutable_retract_pos()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_.is_valid_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CheckAproachRetractValidRes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 1, 0, 7> CheckAproachRetractValidRes::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidRes, _impl_._has_bits_),
    0, // no _extensions_
    100, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CheckAproachRetractValidRes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float retract_pos = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidRes, _impl_.retract_pos_)}},
    // bool is_valid = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CheckAproachRetractValidRes, _impl_.is_valid_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidRes, _impl_.is_valid_)}},
    // repeated float tar_pos = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidRes, _impl_.tar_pos_)}},
    // repeated float approach_pos = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidRes, _impl_.approach_pos_)}},
  }}, {{
    100, 0, 1,
    65534, 4,
    65535, 65535
  }}, {{
    // bool is_valid = 1;
    {PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidRes, _impl_.is_valid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated float tar_pos = 2;
    {PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidRes, _impl_.tar_pos_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float approach_pos = 3;
    {PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidRes, _impl_.approach_pos_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float retract_pos = 4;
    {PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidRes, _impl_.retract_pos_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidRes, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* CheckAproachRetractValidRes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool is_valid = 1;
  if (this->_internal_is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_valid(), target);
  }

  // repeated float tar_pos = 2;
  if (this->_internal_tar_pos_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_tar_pos(), target);
  }

  // repeated float approach_pos = 3;
  if (this->_internal_approach_pos_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_approach_pos(), target);
  }

  // repeated float retract_pos = 4;
  if (this->_internal_retract_pos_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_retract_pos(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  return target;
}

::size_t CheckAproachRetractValidRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tar_pos = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tar_pos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float approach_pos = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_approach_pos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float retract_pos = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_retract_pos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // bool is_valid = 1;
  if (this->_internal_is_valid() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CheckAproachRetractValidRes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CheckAproachRetractValidRes::MergeImpl
};
const ::google::protobuf::Message::ClassData*CheckAproachRetractValidRes::GetClassData() const { return &_class_data_; }


void CheckAproachRetractValidRes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CheckAproachRetractValidRes*>(&to_msg);
  auto& from = static_cast<const CheckAproachRetractValidRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tar_pos()->MergeFrom(from._internal_tar_pos());
  _this->_internal_mutable_approach_pos()->MergeFrom(from._internal_approach_pos());
  _this->_internal_mutable_retract_pos()->MergeFrom(from._internal_retract_pos());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_is_valid() != 0) {
    _this->_internal_set_is_valid(from._internal_is_valid());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CheckAproachRetractValidRes::CopyFrom(const CheckAproachRetractValidRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CheckAproachRetractValidRes::IsInitialized() const {
  return true;
}

void CheckAproachRetractValidRes::InternalSwap(CheckAproachRetractValidRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tar_pos_.InternalSwap(&other->_impl_.tar_pos_);
  _impl_.approach_pos_.InternalSwap(&other->_impl_.approach_pos_);
  _impl_.retract_pos_.InternalSwap(&other->_impl_.retract_pos_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidRes, _impl_.is_valid_)
      + sizeof(CheckAproachRetractValidRes::_impl_.is_valid_)
      - PROTOBUF_FIELD_OFFSET(CheckAproachRetractValidRes, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata CheckAproachRetractValidRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[51]);
}
// ===================================================================

class GetPalletPointListReq::_Internal {
 public:
};

GetPalletPointListReq::GetPalletPointListReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.GetPalletPointListReq)
}
GetPalletPointListReq::GetPalletPointListReq(const GetPalletPointListReq& from) : ::google::protobuf::Message() {
  GetPalletPointListReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tpos_){from._impl_.tpos_},
      decltype(_impl_.jpos_){from._impl_.jpos_},
      decltype(_impl_.pre_tpos_){from._impl_.pre_tpos_},
      decltype(_impl_.post_tpos_){from._impl_.post_tpos_},
      decltype(_impl_.pallet_pattern_){},
      decltype(_impl_.width_){},
      decltype(_impl_.height_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.pallet_pattern_, &from._impl_.pallet_pattern_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.pallet_pattern_)) + sizeof(_impl_.height_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.GetPalletPointListReq)
}
inline void GetPalletPointListReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tpos_){arena},
      decltype(_impl_.jpos_){arena},
      decltype(_impl_.pre_tpos_){arena},
      decltype(_impl_.post_tpos_){arena},
      decltype(_impl_.pallet_pattern_){0},
      decltype(_impl_.width_){0},
      decltype(_impl_.height_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
GetPalletPointListReq::~GetPalletPointListReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.GetPalletPointListReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetPalletPointListReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tpos_.~RepeatedField();
  _impl_.jpos_.~RepeatedField();
  _impl_.pre_tpos_.~RepeatedField();
  _impl_.post_tpos_.~RepeatedField();
}
void GetPalletPointListReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GetPalletPointListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.GetPalletPointListReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tpos()->Clear();
  _internal_mutable_jpos()->Clear();
  _internal_mutable_pre_tpos()->Clear();
  _internal_mutable_post_tpos()->Clear();
  ::memset(&_impl_.pallet_pattern_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.pallet_pattern_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetPalletPointListReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> GetPalletPointListReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetPalletPointListReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float tpos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.tpos_)}},
    // repeated float jpos = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.jpos_)}},
    // repeated float pre_tpos = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.pre_tpos_)}},
    // repeated float post_tpos = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.post_tpos_)}},
    // int32 pallet_pattern = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetPalletPointListReq, _impl_.pallet_pattern_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.pallet_pattern_)}},
    // int32 width = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetPalletPointListReq, _impl_.width_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.width_)}},
    // int32 height = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetPalletPointListReq, _impl_.height_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.height_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float tpos = 1;
    {PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.tpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float jpos = 2;
    {PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.jpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float pre_tpos = 3;
    {PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.pre_tpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float post_tpos = 4;
    {PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.post_tpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // int32 pallet_pattern = 5;
    {PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.pallet_pattern_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 width = 6;
    {PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 height = 7;
    {PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GetPalletPointListReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.GetPalletPointListReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float tpos = 1;
  if (this->_internal_tpos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_tpos(), target);
  }

  // repeated float jpos = 2;
  if (this->_internal_jpos_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_jpos(), target);
  }

  // repeated float pre_tpos = 3;
  if (this->_internal_pre_tpos_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_pre_tpos(), target);
  }

  // repeated float post_tpos = 4;
  if (this->_internal_post_tpos_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_post_tpos(), target);
  }

  // int32 pallet_pattern = 5;
  if (this->_internal_pallet_pattern() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_pallet_pattern(), target);
  }

  // int32 width = 6;
  if (this->_internal_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_width(), target);
  }

  // int32 height = 7;
  if (this->_internal_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.GetPalletPointListReq)
  return target;
}

::size_t GetPalletPointListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.GetPalletPointListReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float jpos = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_jpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float pre_tpos = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_pre_tpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float post_tpos = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_post_tpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // int32 pallet_pattern = 5;
  if (this->_internal_pallet_pattern() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_pallet_pattern());
  }

  // int32 width = 6;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_width());
  }

  // int32 height = 7;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetPalletPointListReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GetPalletPointListReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*GetPalletPointListReq::GetClassData() const { return &_class_data_; }


void GetPalletPointListReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetPalletPointListReq*>(&to_msg);
  auto& from = static_cast<const GetPalletPointListReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.GetPalletPointListReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tpos()->MergeFrom(from._internal_tpos());
  _this->_internal_mutable_jpos()->MergeFrom(from._internal_jpos());
  _this->_internal_mutable_pre_tpos()->MergeFrom(from._internal_pre_tpos());
  _this->_internal_mutable_post_tpos()->MergeFrom(from._internal_post_tpos());
  if (from._internal_pallet_pattern() != 0) {
    _this->_internal_set_pallet_pattern(from._internal_pallet_pattern());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetPalletPointListReq::CopyFrom(const GetPalletPointListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.GetPalletPointListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetPalletPointListReq::IsInitialized() const {
  return true;
}

void GetPalletPointListReq::InternalSwap(GetPalletPointListReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tpos_.InternalSwap(&other->_impl_.tpos_);
  _impl_.jpos_.InternalSwap(&other->_impl_.jpos_);
  _impl_.pre_tpos_.InternalSwap(&other->_impl_.pre_tpos_);
  _impl_.post_tpos_.InternalSwap(&other->_impl_.post_tpos_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.height_)
      + sizeof(GetPalletPointListReq::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(GetPalletPointListReq, _impl_.pallet_pattern_)>(
          reinterpret_cast<char*>(&_impl_.pallet_pattern_),
          reinterpret_cast<char*>(&other->_impl_.pallet_pattern_));
}

::google::protobuf::Metadata GetPalletPointListReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[52]);
}
// ===================================================================

class PalletPoint::_Internal {
 public:
};

PalletPoint::PalletPoint(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.PalletPoint)
}
PalletPoint::PalletPoint(const PalletPoint& from) : ::google::protobuf::Message() {
  PalletPoint* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tar_pos_){from._impl_.tar_pos_},
      decltype(_impl_.approach_pos_){from._impl_.approach_pos_},
      decltype(_impl_.retract_pos_){from._impl_.retract_pos_},
      decltype(_impl_.tar_jpos_){from._impl_.tar_jpos_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.PalletPoint)
}
inline void PalletPoint::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tar_pos_){arena},
      decltype(_impl_.approach_pos_){arena},
      decltype(_impl_.retract_pos_){arena},
      decltype(_impl_.tar_jpos_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
PalletPoint::~PalletPoint() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.PalletPoint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PalletPoint::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tar_pos_.~RepeatedField();
  _impl_.approach_pos_.~RepeatedField();
  _impl_.retract_pos_.~RepeatedField();
  _impl_.tar_jpos_.~RepeatedField();
}
void PalletPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void PalletPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.PalletPoint)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tar_pos()->Clear();
  _internal_mutable_approach_pos()->Clear();
  _internal_mutable_retract_pos()->Clear();
  _internal_mutable_tar_jpos()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PalletPoint::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> PalletPoint::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PalletPoint_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated float tar_jpos = 4;
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(PalletPoint, _impl_.tar_jpos_)}},
    // repeated float tar_pos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PalletPoint, _impl_.tar_pos_)}},
    // repeated float approach_pos = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PalletPoint, _impl_.approach_pos_)}},
    // repeated float retract_pos = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PalletPoint, _impl_.retract_pos_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float tar_pos = 1;
    {PROTOBUF_FIELD_OFFSET(PalletPoint, _impl_.tar_pos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float approach_pos = 2;
    {PROTOBUF_FIELD_OFFSET(PalletPoint, _impl_.approach_pos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float retract_pos = 3;
    {PROTOBUF_FIELD_OFFSET(PalletPoint, _impl_.retract_pos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float tar_jpos = 4;
    {PROTOBUF_FIELD_OFFSET(PalletPoint, _impl_.tar_jpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PalletPoint::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.PalletPoint)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float tar_pos = 1;
  if (this->_internal_tar_pos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_tar_pos(), target);
  }

  // repeated float approach_pos = 2;
  if (this->_internal_approach_pos_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_approach_pos(), target);
  }

  // repeated float retract_pos = 3;
  if (this->_internal_retract_pos_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_retract_pos(), target);
  }

  // repeated float tar_jpos = 4;
  if (this->_internal_tar_jpos_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_tar_jpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.PalletPoint)
  return target;
}

::size_t PalletPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.PalletPoint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tar_pos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tar_pos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float approach_pos = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_approach_pos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float retract_pos = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_retract_pos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float tar_jpos = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tar_jpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PalletPoint::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    PalletPoint::MergeImpl
};
const ::google::protobuf::Message::ClassData*PalletPoint::GetClassData() const { return &_class_data_; }


void PalletPoint::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PalletPoint*>(&to_msg);
  auto& from = static_cast<const PalletPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.PalletPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tar_pos()->MergeFrom(from._internal_tar_pos());
  _this->_internal_mutable_approach_pos()->MergeFrom(from._internal_approach_pos());
  _this->_internal_mutable_retract_pos()->MergeFrom(from._internal_retract_pos());
  _this->_internal_mutable_tar_jpos()->MergeFrom(from._internal_tar_jpos());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PalletPoint::CopyFrom(const PalletPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.PalletPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PalletPoint::IsInitialized() const {
  return true;
}

void PalletPoint::InternalSwap(PalletPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tar_pos_.InternalSwap(&other->_impl_.tar_pos_);
  _impl_.approach_pos_.InternalSwap(&other->_impl_.approach_pos_);
  _impl_.retract_pos_.InternalSwap(&other->_impl_.retract_pos_);
  _impl_.tar_jpos_.InternalSwap(&other->_impl_.tar_jpos_);
}

::google::protobuf::Metadata PalletPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[53]);
}
// ===================================================================

class GetPalletPointListRes::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPalletPointListRes>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetPalletPointListRes, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const GetPalletPointListRes* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& GetPalletPointListRes::_Internal::response(const GetPalletPointListRes* msg) {
  return *msg->_impl_.response_;
}
void GetPalletPointListRes::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetPalletPointListRes::GetPalletPointListRes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.GetPalletPointListRes)
}
GetPalletPointListRes::GetPalletPointListRes(const GetPalletPointListRes& from) : ::google::protobuf::Message() {
  GetPalletPointListRes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.pallet_points_){from._impl_.pallet_points_},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.GetPalletPointListRes)
}
inline void GetPalletPointListRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.pallet_points_){arena},
      decltype(_impl_.response_){nullptr},
  };
}
GetPalletPointListRes::~GetPalletPointListRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.GetPalletPointListRes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetPalletPointListRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pallet_points_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void GetPalletPointListRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GetPalletPointListRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.GetPalletPointListRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_pallet_points()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetPalletPointListRes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 7> GetPalletPointListRes::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetPalletPointListRes, _impl_._has_bits_),
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetPalletPointListRes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 1, PROTOBUF_FIELD_OFFSET(GetPalletPointListRes, _impl_.response_)}},
    // repeated .Nrmk.IndyFramework.PalletPoint pallet_points = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetPalletPointListRes, _impl_.pallet_points_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.PalletPoint pallet_points = 1;
    {PROTOBUF_FIELD_OFFSET(GetPalletPointListRes, _impl_.pallet_points_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(GetPalletPointListRes, _impl_.response_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::PalletPoint>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* GetPalletPointListRes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.GetPalletPointListRes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.PalletPoint pallet_points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pallet_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_pallet_points().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.GetPalletPointListRes)
  return target;
}

::size_t GetPalletPointListRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.GetPalletPointListRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.PalletPoint pallet_points = 1;
  total_size += 1UL * this->_internal_pallet_points_size();
  for (const auto& msg : this->_internal_pallet_points()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetPalletPointListRes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GetPalletPointListRes::MergeImpl
};
const ::google::protobuf::Message::ClassData*GetPalletPointListRes::GetClassData() const { return &_class_data_; }


void GetPalletPointListRes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetPalletPointListRes*>(&to_msg);
  auto& from = static_cast<const GetPalletPointListRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.GetPalletPointListRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_pallet_points()->MergeFrom(from._internal_pallet_points());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetPalletPointListRes::CopyFrom(const GetPalletPointListRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.GetPalletPointListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetPalletPointListRes::IsInitialized() const {
  return true;
}

void GetPalletPointListRes::InternalSwap(GetPalletPointListRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pallet_points_.InternalSwap(&other->_impl_.pallet_points_);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata GetPalletPointListRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[54]);
}
// ===================================================================

class CalculateRelativePoseReq::_Internal {
 public:
};

CalculateRelativePoseReq::CalculateRelativePoseReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CalculateRelativePoseReq)
}
CalculateRelativePoseReq::CalculateRelativePoseReq(const CalculateRelativePoseReq& from) : ::google::protobuf::Message() {
  CalculateRelativePoseReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_pos_){from._impl_.start_pos_},
      decltype(_impl_.end_pos_){from._impl_.end_pos_},
      decltype(_impl_.base_type_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.base_type_ = from._impl_.base_type_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CalculateRelativePoseReq)
}
inline void CalculateRelativePoseReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.start_pos_){arena},
      decltype(_impl_.end_pos_){arena},
      decltype(_impl_.base_type_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
CalculateRelativePoseReq::~CalculateRelativePoseReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CalculateRelativePoseReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CalculateRelativePoseReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.start_pos_.~RepeatedField();
  _impl_.end_pos_.~RepeatedField();
}
void CalculateRelativePoseReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CalculateRelativePoseReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CalculateRelativePoseReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_start_pos()->Clear();
  _internal_mutable_end_pos()->Clear();
  _impl_.base_type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CalculateRelativePoseReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> CalculateRelativePoseReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CalculateRelativePoseReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float start_pos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CalculateRelativePoseReq, _impl_.start_pos_)}},
    // repeated float end_pos = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CalculateRelativePoseReq, _impl_.end_pos_)}},
    // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CalculateRelativePoseReq, _impl_.base_type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CalculateRelativePoseReq, _impl_.base_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float start_pos = 1;
    {PROTOBUF_FIELD_OFFSET(CalculateRelativePoseReq, _impl_.start_pos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float end_pos = 2;
    {PROTOBUF_FIELD_OFFSET(CalculateRelativePoseReq, _impl_.end_pos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
    {PROTOBUF_FIELD_OFFSET(CalculateRelativePoseReq, _impl_.base_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CalculateRelativePoseReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CalculateRelativePoseReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float start_pos = 1;
  if (this->_internal_start_pos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_start_pos(), target);
  }

  // repeated float end_pos = 2;
  if (this->_internal_end_pos_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_end_pos(), target);
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->_internal_base_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_base_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CalculateRelativePoseReq)
  return target;
}

::size_t CalculateRelativePoseReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CalculateRelativePoseReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float start_pos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_start_pos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float end_pos = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_end_pos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->_internal_base_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_base_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CalculateRelativePoseReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CalculateRelativePoseReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*CalculateRelativePoseReq::GetClassData() const { return &_class_data_; }


void CalculateRelativePoseReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CalculateRelativePoseReq*>(&to_msg);
  auto& from = static_cast<const CalculateRelativePoseReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CalculateRelativePoseReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_start_pos()->MergeFrom(from._internal_start_pos());
  _this->_internal_mutable_end_pos()->MergeFrom(from._internal_end_pos());
  if (from._internal_base_type() != 0) {
    _this->_internal_set_base_type(from._internal_base_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CalculateRelativePoseReq::CopyFrom(const CalculateRelativePoseReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CalculateRelativePoseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CalculateRelativePoseReq::IsInitialized() const {
  return true;
}

void CalculateRelativePoseReq::InternalSwap(CalculateRelativePoseReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.start_pos_.InternalSwap(&other->_impl_.start_pos_);
  _impl_.end_pos_.InternalSwap(&other->_impl_.end_pos_);
  swap(_impl_.base_type_, other->_impl_.base_type_);
}

::google::protobuf::Metadata CalculateRelativePoseReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[55]);
}
// ===================================================================

class CalculateRelativePoseRes::_Internal {
 public:
  using HasBits = decltype(std::declval<CalculateRelativePoseRes>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CalculateRelativePoseRes, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const CalculateRelativePoseRes* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& CalculateRelativePoseRes::_Internal::response(const CalculateRelativePoseRes* msg) {
  return *msg->_impl_.response_;
}
void CalculateRelativePoseRes::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CalculateRelativePoseRes::CalculateRelativePoseRes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CalculateRelativePoseRes)
}
CalculateRelativePoseRes::CalculateRelativePoseRes(const CalculateRelativePoseRes& from) : ::google::protobuf::Message() {
  CalculateRelativePoseRes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.relative_pos_){from._impl_.relative_pos_},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CalculateRelativePoseRes)
}
inline void CalculateRelativePoseRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.relative_pos_){arena},
      decltype(_impl_.response_){nullptr},
  };
}
CalculateRelativePoseRes::~CalculateRelativePoseRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CalculateRelativePoseRes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CalculateRelativePoseRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relative_pos_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void CalculateRelativePoseRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CalculateRelativePoseRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CalculateRelativePoseRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_relative_pos()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CalculateRelativePoseRes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 7> CalculateRelativePoseRes::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CalculateRelativePoseRes, _impl_._has_bits_),
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CalculateRelativePoseRes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 0, PROTOBUF_FIELD_OFFSET(CalculateRelativePoseRes, _impl_.response_)}},
    // repeated float relative_pos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CalculateRelativePoseRes, _impl_.relative_pos_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // repeated float relative_pos = 1;
    {PROTOBUF_FIELD_OFFSET(CalculateRelativePoseRes, _impl_.relative_pos_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(CalculateRelativePoseRes, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* CalculateRelativePoseRes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CalculateRelativePoseRes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float relative_pos = 1;
  if (this->_internal_relative_pos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_relative_pos(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CalculateRelativePoseRes)
  return target;
}

::size_t CalculateRelativePoseRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CalculateRelativePoseRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float relative_pos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_relative_pos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CalculateRelativePoseRes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CalculateRelativePoseRes::MergeImpl
};
const ::google::protobuf::Message::ClassData*CalculateRelativePoseRes::GetClassData() const { return &_class_data_; }


void CalculateRelativePoseRes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CalculateRelativePoseRes*>(&to_msg);
  auto& from = static_cast<const CalculateRelativePoseRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CalculateRelativePoseRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_relative_pos()->MergeFrom(from._internal_relative_pos());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CalculateRelativePoseRes::CopyFrom(const CalculateRelativePoseRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CalculateRelativePoseRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CalculateRelativePoseRes::IsInitialized() const {
  return true;
}

void CalculateRelativePoseRes::InternalSwap(CalculateRelativePoseRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.relative_pos_.InternalSwap(&other->_impl_.relative_pos_);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata CalculateRelativePoseRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[56]);
}
// ===================================================================

class CalculateCurrentPoseRelReq::_Internal {
 public:
};

CalculateCurrentPoseRelReq::CalculateCurrentPoseRelReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
}
CalculateCurrentPoseRelReq::CalculateCurrentPoseRelReq(const CalculateCurrentPoseRelReq& from) : ::google::protobuf::Message() {
  CalculateCurrentPoseRelReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.current_pos_){from._impl_.current_pos_},
      decltype(_impl_.relative_pos_){from._impl_.relative_pos_},
      decltype(_impl_.base_type_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.base_type_ = from._impl_.base_type_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
}
inline void CalculateCurrentPoseRelReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.current_pos_){arena},
      decltype(_impl_.relative_pos_){arena},
      decltype(_impl_.base_type_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
CalculateCurrentPoseRelReq::~CalculateCurrentPoseRelReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CalculateCurrentPoseRelReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.current_pos_.~RepeatedField();
  _impl_.relative_pos_.~RepeatedField();
}
void CalculateCurrentPoseRelReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CalculateCurrentPoseRelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_current_pos()->Clear();
  _internal_mutable_relative_pos()->Clear();
  _impl_.base_type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CalculateCurrentPoseRelReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> CalculateCurrentPoseRelReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CalculateCurrentPoseRelReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float current_pos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CalculateCurrentPoseRelReq, _impl_.current_pos_)}},
    // repeated float relative_pos = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CalculateCurrentPoseRelReq, _impl_.relative_pos_)}},
    // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CalculateCurrentPoseRelReq, _impl_.base_type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CalculateCurrentPoseRelReq, _impl_.base_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float current_pos = 1;
    {PROTOBUF_FIELD_OFFSET(CalculateCurrentPoseRelReq, _impl_.current_pos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float relative_pos = 2;
    {PROTOBUF_FIELD_OFFSET(CalculateCurrentPoseRelReq, _impl_.relative_pos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
    {PROTOBUF_FIELD_OFFSET(CalculateCurrentPoseRelReq, _impl_.base_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CalculateCurrentPoseRelReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float current_pos = 1;
  if (this->_internal_current_pos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_current_pos(), target);
  }

  // repeated float relative_pos = 2;
  if (this->_internal_relative_pos_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_relative_pos(), target);
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->_internal_base_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_base_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  return target;
}

::size_t CalculateCurrentPoseRelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float current_pos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_current_pos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float relative_pos = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_relative_pos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->_internal_base_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_base_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CalculateCurrentPoseRelReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CalculateCurrentPoseRelReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*CalculateCurrentPoseRelReq::GetClassData() const { return &_class_data_; }


void CalculateCurrentPoseRelReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CalculateCurrentPoseRelReq*>(&to_msg);
  auto& from = static_cast<const CalculateCurrentPoseRelReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_current_pos()->MergeFrom(from._internal_current_pos());
  _this->_internal_mutable_relative_pos()->MergeFrom(from._internal_relative_pos());
  if (from._internal_base_type() != 0) {
    _this->_internal_set_base_type(from._internal_base_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CalculateCurrentPoseRelReq::CopyFrom(const CalculateCurrentPoseRelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CalculateCurrentPoseRelReq::IsInitialized() const {
  return true;
}

void CalculateCurrentPoseRelReq::InternalSwap(CalculateCurrentPoseRelReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.current_pos_.InternalSwap(&other->_impl_.current_pos_);
  _impl_.relative_pos_.InternalSwap(&other->_impl_.relative_pos_);
  swap(_impl_.base_type_, other->_impl_.base_type_);
}

::google::protobuf::Metadata CalculateCurrentPoseRelReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[57]);
}
// ===================================================================

class CalculateCurrentPoseRelRes::_Internal {
 public:
  using HasBits = decltype(std::declval<CalculateCurrentPoseRelRes>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CalculateCurrentPoseRelRes, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const CalculateCurrentPoseRelRes* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& CalculateCurrentPoseRelRes::_Internal::response(const CalculateCurrentPoseRelRes* msg) {
  return *msg->_impl_.response_;
}
void CalculateCurrentPoseRelRes::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CalculateCurrentPoseRelRes::CalculateCurrentPoseRelRes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
}
CalculateCurrentPoseRelRes::CalculateCurrentPoseRelRes(const CalculateCurrentPoseRelRes& from) : ::google::protobuf::Message() {
  CalculateCurrentPoseRelRes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.calculated_pos_){from._impl_.calculated_pos_},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
}
inline void CalculateCurrentPoseRelRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.calculated_pos_){arena},
      decltype(_impl_.response_){nullptr},
  };
}
CalculateCurrentPoseRelRes::~CalculateCurrentPoseRelRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CalculateCurrentPoseRelRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.calculated_pos_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void CalculateCurrentPoseRelRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CalculateCurrentPoseRelRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_calculated_pos()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CalculateCurrentPoseRelRes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 7> CalculateCurrentPoseRelRes::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CalculateCurrentPoseRelRes, _impl_._has_bits_),
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CalculateCurrentPoseRelRes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 0, PROTOBUF_FIELD_OFFSET(CalculateCurrentPoseRelRes, _impl_.response_)}},
    // repeated float calculated_pos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CalculateCurrentPoseRelRes, _impl_.calculated_pos_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // repeated float calculated_pos = 1;
    {PROTOBUF_FIELD_OFFSET(CalculateCurrentPoseRelRes, _impl_.calculated_pos_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(CalculateCurrentPoseRelRes, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* CalculateCurrentPoseRelRes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float calculated_pos = 1;
  if (this->_internal_calculated_pos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_calculated_pos(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  return target;
}

::size_t CalculateCurrentPoseRelRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float calculated_pos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_calculated_pos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CalculateCurrentPoseRelRes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CalculateCurrentPoseRelRes::MergeImpl
};
const ::google::protobuf::Message::ClassData*CalculateCurrentPoseRelRes::GetClassData() const { return &_class_data_; }


void CalculateCurrentPoseRelRes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CalculateCurrentPoseRelRes*>(&to_msg);
  auto& from = static_cast<const CalculateCurrentPoseRelRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_calculated_pos()->MergeFrom(from._internal_calculated_pos());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CalculateCurrentPoseRelRes::CopyFrom(const CalculateCurrentPoseRelRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CalculateCurrentPoseRelRes::IsInitialized() const {
  return true;
}

void CalculateCurrentPoseRelRes::InternalSwap(CalculateCurrentPoseRelRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.calculated_pos_.InternalSwap(&other->_impl_.calculated_pos_);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata CalculateCurrentPoseRelRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[58]);
}
// ===================================================================

class TeleOpDevice::_Internal {
 public:
};

TeleOpDevice::TeleOpDevice(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TeleOpDevice)
}
TeleOpDevice::TeleOpDevice(const TeleOpDevice& from) : ::google::protobuf::Message() {
  TeleOpDevice* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.ip_){},
      decltype(_impl_.type_){},
      decltype(_impl_.port_){},
      decltype(_impl_.connected_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.connected_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.connected_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TeleOpDevice)
}
inline void TeleOpDevice::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.ip_){},
      decltype(_impl_.type_){0},
      decltype(_impl_.port_){0u},
      decltype(_impl_.connected_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TeleOpDevice::~TeleOpDevice() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TeleOpDevice)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TeleOpDevice::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.ip_.Destroy();
}
void TeleOpDevice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TeleOpDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TeleOpDevice)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.connected_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.connected_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TeleOpDevice::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 46, 2> TeleOpDevice::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TeleOpDevice_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TeleOpDevice, _impl_.name_)}},
    // .Nrmk.IndyFramework.TeleOpDevice.TeleOpDeviceType type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TeleOpDevice, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TeleOpDevice, _impl_.type_)}},
    // string ip = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TeleOpDevice, _impl_.ip_)}},
    // uint32 port = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TeleOpDevice, _impl_.port_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TeleOpDevice, _impl_.port_)}},
    // bool connected = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TeleOpDevice, _impl_.connected_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TeleOpDevice, _impl_.connected_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(TeleOpDevice, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .Nrmk.IndyFramework.TeleOpDevice.TeleOpDeviceType type = 2;
    {PROTOBUF_FIELD_OFFSET(TeleOpDevice, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string ip = 3;
    {PROTOBUF_FIELD_OFFSET(TeleOpDevice, _impl_.ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 port = 4;
    {PROTOBUF_FIELD_OFFSET(TeleOpDevice, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool connected = 5;
    {PROTOBUF_FIELD_OFFSET(TeleOpDevice, _impl_.connected_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\37\4\0\2\0\0\0\0"
    "Nrmk.IndyFramework.TeleOpDevice"
    "name"
    "ip"
  }},
};

::uint8_t* TeleOpDevice::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TeleOpDevice)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.TeleOpDevice.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .Nrmk.IndyFramework.TeleOpDevice.TeleOpDeviceType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    const std::string& _s = this->_internal_ip();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.TeleOpDevice.ip");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_port(), target);
  }

  // bool connected = 5;
  if (this->_internal_connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_connected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TeleOpDevice)
  return target;
}

::size_t TeleOpDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TeleOpDevice)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ip());
  }

  // .Nrmk.IndyFramework.TeleOpDevice.TeleOpDeviceType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_port());
  }

  // bool connected = 5;
  if (this->_internal_connected() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TeleOpDevice::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TeleOpDevice::MergeImpl
};
const ::google::protobuf::Message::ClassData*TeleOpDevice::GetClassData() const { return &_class_data_; }


void TeleOpDevice::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TeleOpDevice*>(&to_msg);
  auto& from = static_cast<const TeleOpDevice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TeleOpDevice)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_connected() != 0) {
    _this->_internal_set_connected(from._internal_connected());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TeleOpDevice::CopyFrom(const TeleOpDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TeleOpDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TeleOpDevice::IsInitialized() const {
  return true;
}

void TeleOpDevice::InternalSwap(TeleOpDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, lhs_arena,
                                       &other->_impl_.ip_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeleOpDevice, _impl_.connected_)
      + sizeof(TeleOpDevice::_impl_.connected_)
      - PROTOBUF_FIELD_OFFSET(TeleOpDevice, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::google::protobuf::Metadata TeleOpDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[59]);
}
// ===================================================================

class TeleOpState::_Internal {
 public:
};

TeleOpState::TeleOpState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TeleOpState)
}
TeleOpState::TeleOpState(const TeleOpState& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TeleOpState)
}
inline void TeleOpState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.mode_){0},
      decltype(_impl_.method_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TeleOpState::~TeleOpState() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TeleOpState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TeleOpState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TeleOpState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TeleOpState::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TeleOpState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.mode_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.method_) -
      reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.method_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TeleOpState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TeleOpState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TeleOpState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.TeleMethod method = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TeleOpState, _impl_.method_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TeleOpState, _impl_.method_)}},
    // .Nrmk.IndyFramework.TeleMode mode = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TeleOpState, _impl_.mode_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TeleOpState, _impl_.mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.TeleMode mode = 1;
    {PROTOBUF_FIELD_OFFSET(TeleOpState, _impl_.mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.TeleMethod method = 2;
    {PROTOBUF_FIELD_OFFSET(TeleOpState, _impl_.method_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TeleOpState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TeleOpState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.TeleMode mode = 1;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_mode(), target);
  }

  // .Nrmk.IndyFramework.TeleMethod method = 2;
  if (this->_internal_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TeleOpState)
  return target;
}

::size_t TeleOpState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TeleOpState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TeleMode mode = 1;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // .Nrmk.IndyFramework.TeleMethod method = 2;
  if (this->_internal_method() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_method());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TeleOpState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TeleOpState::MergeImpl
};
const ::google::protobuf::Message::ClassData*TeleOpState::GetClassData() const { return &_class_data_; }


void TeleOpState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TeleOpState*>(&to_msg);
  auto& from = static_cast<const TeleOpState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TeleOpState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_method() != 0) {
    _this->_internal_set_method(from._internal_method());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TeleOpState::CopyFrom(const TeleOpState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TeleOpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TeleOpState::IsInitialized() const {
  return true;
}

void TeleOpState::InternalSwap(TeleOpState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeleOpState, _impl_.method_)
      + sizeof(TeleOpState::_impl_.method_)
      - PROTOBUF_FIELD_OFFSET(TeleOpState, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

::google::protobuf::Metadata TeleOpState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[60]);
}
// ===================================================================

class TeleP::_Internal {
 public:
  using HasBits = decltype(std::declval<TeleP>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TeleP, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const TeleP* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& TeleP::_Internal::response(const TeleP* msg) {
  return *msg->_impl_.response_;
}
void TeleP::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TeleP::TeleP(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TeleP)
}
TeleP::TeleP(const TeleP& from) : ::google::protobuf::Message() {
  TeleP* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.tpos_){from._impl_.tpos_},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TeleP)
}
inline void TeleP::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.tpos_){arena},
      decltype(_impl_.response_){nullptr},
  };
}
TeleP::~TeleP() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TeleP)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TeleP::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tpos_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void TeleP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TeleP::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TeleP)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tpos()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TeleP::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 7> TeleP::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TeleP, _impl_._has_bits_),
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TeleP_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 0, PROTOBUF_FIELD_OFFSET(TeleP, _impl_.response_)}},
    // repeated float tpos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TeleP, _impl_.tpos_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // repeated float tpos = 1;
    {PROTOBUF_FIELD_OFFSET(TeleP, _impl_.tpos_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(TeleP, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* TeleP::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TeleP)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float tpos = 1;
  if (this->_internal_tpos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_tpos(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TeleP)
  return target;
}

::size_t TeleP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TeleP)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TeleP::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TeleP::MergeImpl
};
const ::google::protobuf::Message::ClassData*TeleP::GetClassData() const { return &_class_data_; }


void TeleP::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TeleP*>(&to_msg);
  auto& from = static_cast<const TeleP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TeleP)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tpos()->MergeFrom(from._internal_tpos());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TeleP::CopyFrom(const TeleP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TeleP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TeleP::IsInitialized() const {
  return true;
}

void TeleP::InternalSwap(TeleP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tpos_.InternalSwap(&other->_impl_.tpos_);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata TeleP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[61]);
}
// ===================================================================

class TeleOpFileList::_Internal {
 public:
  using HasBits = decltype(std::declval<TeleOpFileList>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TeleOpFileList, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const TeleOpFileList* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& TeleOpFileList::_Internal::response(const TeleOpFileList* msg) {
  return *msg->_impl_.response_;
}
void TeleOpFileList::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TeleOpFileList::TeleOpFileList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TeleOpFileList)
}
TeleOpFileList::TeleOpFileList(const TeleOpFileList& from) : ::google::protobuf::Message() {
  TeleOpFileList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.files_){from._impl_.files_},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TeleOpFileList)
}
inline void TeleOpFileList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.files_){arena},
      decltype(_impl_.response_){nullptr},
  };
}
TeleOpFileList::~TeleOpFileList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TeleOpFileList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TeleOpFileList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_files()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void TeleOpFileList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TeleOpFileList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TeleOpFileList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_files()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TeleOpFileList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 47, 7> TeleOpFileList::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TeleOpFileList, _impl_._has_bits_),
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TeleOpFileList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 0, PROTOBUF_FIELD_OFFSET(TeleOpFileList, _impl_.response_)}},
    // repeated string files = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TeleOpFileList, _impl_.files_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // repeated string files = 1;
    {PROTOBUF_FIELD_OFFSET(TeleOpFileList, _impl_.files_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(TeleOpFileList, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
    "\41\5\0\0\0\0\0\0"
    "Nrmk.IndyFramework.TeleOpFileList"
    "files"
  }},
};

::uint8_t* TeleOpFileList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TeleOpFileList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string files = 1;
  for (int i = 0, n = this->_internal_files_size(); i < n; ++i) {
    const auto& s = this->_internal_files().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.TeleOpFileList.files");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TeleOpFileList)
  return target;
}

::size_t TeleOpFileList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TeleOpFileList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string files = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_files().size());
  for (int i = 0, n = _internal_files().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_files().Get(i));
  }
  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TeleOpFileList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TeleOpFileList::MergeImpl
};
const ::google::protobuf::Message::ClassData*TeleOpFileList::GetClassData() const { return &_class_data_; }


void TeleOpFileList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TeleOpFileList*>(&to_msg);
  auto& from = static_cast<const TeleOpFileList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TeleOpFileList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_files()->MergeFrom(from._internal_files());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TeleOpFileList::CopyFrom(const TeleOpFileList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TeleOpFileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TeleOpFileList::IsInitialized() const {
  return true;
}

void TeleOpFileList::InternalSwap(TeleOpFileList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata TeleOpFileList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[62]);
}
// ===================================================================

class TeleFileReq::_Internal {
 public:
};

TeleFileReq::TeleFileReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TeleFileReq)
}
TeleFileReq::TeleFileReq(const TeleFileReq& from) : ::google::protobuf::Message() {
  TeleFileReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TeleFileReq)
}
inline void TeleFileReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TeleFileReq::~TeleFileReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TeleFileReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TeleFileReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}
void TeleFileReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TeleFileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TeleFileReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TeleFileReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 43, 2> TeleFileReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TeleFileReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TeleFileReq, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(TeleFileReq, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\36\4\0\0\0\0\0\0"
    "Nrmk.IndyFramework.TeleFileReq"
    "name"
  }},
};

::uint8_t* TeleFileReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TeleFileReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.TeleFileReq.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TeleFileReq)
  return target;
}

::size_t TeleFileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TeleFileReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TeleFileReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TeleFileReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*TeleFileReq::GetClassData() const { return &_class_data_; }


void TeleFileReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TeleFileReq*>(&to_msg);
  auto& from = static_cast<const TeleFileReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TeleFileReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TeleFileReq::CopyFrom(const TeleFileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TeleFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TeleFileReq::IsInitialized() const {
  return true;
}

void TeleFileReq::InternalSwap(TeleFileReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::google::protobuf::Metadata TeleFileReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[63]);
}
// ===================================================================

class TelePlayRate::_Internal {
 public:
};

TelePlayRate::TelePlayRate(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TelePlayRate)
}
TelePlayRate::TelePlayRate(const TelePlayRate& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TelePlayRate)
}
inline void TelePlayRate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rate_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TelePlayRate::~TelePlayRate() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TelePlayRate)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TelePlayRate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void TelePlayRate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TelePlayRate::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TelePlayRate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TelePlayRate::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> TelePlayRate::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TelePlayRate_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float rate = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(TelePlayRate, _impl_.rate_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float rate = 1;
    {PROTOBUF_FIELD_OFFSET(TelePlayRate, _impl_.rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TelePlayRate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TelePlayRate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float rate = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  ::uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TelePlayRate)
  return target;
}

::size_t TelePlayRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TelePlayRate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float rate = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  ::uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TelePlayRate::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TelePlayRate::MergeImpl
};
const ::google::protobuf::Message::ClassData*TelePlayRate::GetClassData() const { return &_class_data_; }


void TelePlayRate::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TelePlayRate*>(&to_msg);
  auto& from = static_cast<const TelePlayRate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TelePlayRate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rate = from._internal_rate();
  ::uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    _this->_internal_set_rate(from._internal_rate());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TelePlayRate::CopyFrom(const TelePlayRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TelePlayRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TelePlayRate::IsInitialized() const {
  return true;
}

void TelePlayRate::InternalSwap(TelePlayRate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.rate_, other->_impl_.rate_);
}

::google::protobuf::Metadata TelePlayRate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[64]);
}
// ===================================================================

class MoveTeleJReq::_Internal {
 public:
};

MoveTeleJReq::MoveTeleJReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveTeleJReq)
}
MoveTeleJReq::MoveTeleJReq(const MoveTeleJReq& from) : ::google::protobuf::Message() {
  MoveTeleJReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.jpos_){from._impl_.jpos_},
      decltype(_impl_.vel_ratio_){},
      decltype(_impl_.acc_ratio_){},
      decltype(_impl_.method_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.vel_ratio_, &from._impl_.vel_ratio_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.method_) -
    reinterpret_cast<char*>(&_impl_.vel_ratio_)) + sizeof(_impl_.method_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveTeleJReq)
}
inline void MoveTeleJReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.jpos_){arena},
      decltype(_impl_.vel_ratio_){0},
      decltype(_impl_.acc_ratio_){0},
      decltype(_impl_.method_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
MoveTeleJReq::~MoveTeleJReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveTeleJReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveTeleJReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jpos_.~RepeatedField();
}
void MoveTeleJReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveTeleJReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveTeleJReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_jpos()->Clear();
  ::memset(&_impl_.vel_ratio_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.method_) -
      reinterpret_cast<char*>(&_impl_.vel_ratio_)) + sizeof(_impl_.method_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveTeleJReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> MoveTeleJReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966776,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MoveTeleJReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float jpos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MoveTeleJReq, _impl_.jpos_)}},
    // float vel_ratio = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(MoveTeleJReq, _impl_.vel_ratio_)}},
    // float acc_ratio = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MoveTeleJReq, _impl_.acc_ratio_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float jpos = 1;
    {PROTOBUF_FIELD_OFFSET(MoveTeleJReq, _impl_.jpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // float vel_ratio = 2;
    {PROTOBUF_FIELD_OFFSET(MoveTeleJReq, _impl_.vel_ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float acc_ratio = 3;
    {PROTOBUF_FIELD_OFFSET(MoveTeleJReq, _impl_.acc_ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.TeleMethod method = 10;
    {PROTOBUF_FIELD_OFFSET(MoveTeleJReq, _impl_.method_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* MoveTeleJReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveTeleJReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float jpos = 1;
  if (this->_internal_jpos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_jpos(), target);
  }

  // float vel_ratio = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_vel_ratio(), target);
  }

  // float acc_ratio = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.TeleMethod method = 10;
  if (this->_internal_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveTeleJReq)
  return target;
}

::size_t MoveTeleJReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveTeleJReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_jpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // float vel_ratio = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    total_size += 5;
  }

  // float acc_ratio = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    total_size += 5;
  }

  // .Nrmk.IndyFramework.TeleMethod method = 10;
  if (this->_internal_method() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_method());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveTeleJReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveTeleJReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveTeleJReq::GetClassData() const { return &_class_data_; }


void MoveTeleJReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveTeleJReq*>(&to_msg);
  auto& from = static_cast<const MoveTeleJReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveTeleJReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_jpos()->MergeFrom(from._internal_jpos());
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = from._internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    _this->_internal_set_vel_ratio(from._internal_vel_ratio());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = from._internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    _this->_internal_set_acc_ratio(from._internal_acc_ratio());
  }
  if (from._internal_method() != 0) {
    _this->_internal_set_method(from._internal_method());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveTeleJReq::CopyFrom(const MoveTeleJReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveTeleJReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveTeleJReq::IsInitialized() const {
  return true;
}

void MoveTeleJReq::InternalSwap(MoveTeleJReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.jpos_.InternalSwap(&other->_impl_.jpos_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveTeleJReq, _impl_.method_)
      + sizeof(MoveTeleJReq::_impl_.method_)
      - PROTOBUF_FIELD_OFFSET(MoveTeleJReq, _impl_.vel_ratio_)>(
          reinterpret_cast<char*>(&_impl_.vel_ratio_),
          reinterpret_cast<char*>(&other->_impl_.vel_ratio_));
}

::google::protobuf::Metadata MoveTeleJReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[65]);
}
// ===================================================================

class MoveTeleLReq::_Internal {
 public:
};

MoveTeleLReq::MoveTeleLReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveTeleLReq)
}
MoveTeleLReq::MoveTeleLReq(const MoveTeleLReq& from) : ::google::protobuf::Message() {
  MoveTeleLReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tpos_){from._impl_.tpos_},
      decltype(_impl_.vel_ratio_){},
      decltype(_impl_.acc_ratio_){},
      decltype(_impl_.method_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.vel_ratio_, &from._impl_.vel_ratio_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.method_) -
    reinterpret_cast<char*>(&_impl_.vel_ratio_)) + sizeof(_impl_.method_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveTeleLReq)
}
inline void MoveTeleLReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tpos_){arena},
      decltype(_impl_.vel_ratio_){0},
      decltype(_impl_.acc_ratio_){0},
      decltype(_impl_.method_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
MoveTeleLReq::~MoveTeleLReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveTeleLReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveTeleLReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tpos_.~RepeatedField();
}
void MoveTeleLReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveTeleLReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveTeleLReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tpos()->Clear();
  ::memset(&_impl_.vel_ratio_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.method_) -
      reinterpret_cast<char*>(&_impl_.vel_ratio_)) + sizeof(_impl_.method_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveTeleLReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> MoveTeleLReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966776,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MoveTeleLReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float tpos = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MoveTeleLReq, _impl_.tpos_)}},
    // float vel_ratio = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(MoveTeleLReq, _impl_.vel_ratio_)}},
    // float acc_ratio = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MoveTeleLReq, _impl_.acc_ratio_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float tpos = 1;
    {PROTOBUF_FIELD_OFFSET(MoveTeleLReq, _impl_.tpos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // float vel_ratio = 2;
    {PROTOBUF_FIELD_OFFSET(MoveTeleLReq, _impl_.vel_ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float acc_ratio = 3;
    {PROTOBUF_FIELD_OFFSET(MoveTeleLReq, _impl_.acc_ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.TeleMethod method = 10;
    {PROTOBUF_FIELD_OFFSET(MoveTeleLReq, _impl_.method_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* MoveTeleLReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveTeleLReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float tpos = 1;
  if (this->_internal_tpos_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_tpos(), target);
  }

  // float vel_ratio = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_vel_ratio(), target);
  }

  // float acc_ratio = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.TeleMethod method = 10;
  if (this->_internal_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveTeleLReq)
  return target;
}

::size_t MoveTeleLReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveTeleLReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tpos_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // float vel_ratio = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    total_size += 5;
  }

  // float acc_ratio = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    total_size += 5;
  }

  // .Nrmk.IndyFramework.TeleMethod method = 10;
  if (this->_internal_method() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_method());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveTeleLReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveTeleLReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveTeleLReq::GetClassData() const { return &_class_data_; }


void MoveTeleLReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveTeleLReq*>(&to_msg);
  auto& from = static_cast<const MoveTeleLReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveTeleLReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tpos()->MergeFrom(from._internal_tpos());
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = from._internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    _this->_internal_set_vel_ratio(from._internal_vel_ratio());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = from._internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    _this->_internal_set_acc_ratio(from._internal_acc_ratio());
  }
  if (from._internal_method() != 0) {
    _this->_internal_set_method(from._internal_method());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveTeleLReq::CopyFrom(const MoveTeleLReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveTeleLReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveTeleLReq::IsInitialized() const {
  return true;
}

void MoveTeleLReq::InternalSwap(MoveTeleLReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tpos_.InternalSwap(&other->_impl_.tpos_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveTeleLReq, _impl_.method_)
      + sizeof(MoveTeleLReq::_impl_.method_)
      - PROTOBUF_FIELD_OFFSET(MoveTeleLReq, _impl_.vel_ratio_)>(
          reinterpret_cast<char*>(&_impl_.vel_ratio_),
          reinterpret_cast<char*>(&other->_impl_.vel_ratio_));
}

::google::protobuf::Metadata MoveTeleLReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[66]);
}
// ===================================================================

class MoveLFReq::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveLFReq>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::TargetP& target(const MoveLFReq* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveLFReq* msg);
  static void set_has_blending(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveLFReq* msg);
  static void set_has_post_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Nrmk::IndyFramework::TargetP& MoveLFReq::_Internal::target(const MoveLFReq* msg) {
  return *msg->_impl_.target_;
}
const ::Nrmk::IndyFramework::BlendingType& MoveLFReq::_Internal::blending(const MoveLFReq* msg) {
  return *msg->_impl_.blending_;
}
const ::Nrmk::IndyFramework::MotionCondition& MoveLFReq::_Internal::post_condition(const MoveLFReq* msg) {
  return *msg->_impl_.post_condition_;
}
MoveLFReq::MoveLFReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveLFReq)
}
MoveLFReq::MoveLFReq(const MoveLFReq& from) : ::google::protobuf::Message() {
  MoveLFReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.des_force_){from._impl_.des_force_},
      decltype(_impl_.enabled_force_){from._impl_.enabled_force_},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.vel_ratio_){},
      decltype(_impl_.acc_ratio_){},
      decltype(_impl_.vel_type_){},
      decltype(_impl_.teaching_mode_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.target_ = new ::Nrmk::IndyFramework::TargetP(*from._impl_.target_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.blending_ = new ::Nrmk::IndyFramework::BlendingType(*from._impl_.blending_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from._impl_.post_condition_);
  }
  ::memcpy(&_impl_.vel_ratio_, &from._impl_.vel_ratio_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.teaching_mode_) -
    reinterpret_cast<char*>(&_impl_.vel_ratio_)) + sizeof(_impl_.teaching_mode_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveLFReq)
}
inline void MoveLFReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.des_force_){arena},
      decltype(_impl_.enabled_force_){arena},
      decltype(_impl_.target_){nullptr},
      decltype(_impl_.blending_){nullptr},
      decltype(_impl_.post_condition_){nullptr},
      decltype(_impl_.vel_ratio_){0},
      decltype(_impl_.acc_ratio_){0},
      decltype(_impl_.vel_type_){0},
      decltype(_impl_.teaching_mode_){false},
  };
}
MoveLFReq::~MoveLFReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveLFReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveLFReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.des_force_.~RepeatedField();
  _impl_.enabled_force_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.target_;
  if (this != internal_default_instance()) delete _impl_.blending_;
  if (this != internal_default_instance()) delete _impl_.post_condition_;
}
void MoveLFReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveLFReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveLFReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_des_force()->Clear();
  _internal_mutable_enabled_force()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.target_ != nullptr);
      _impl_.target_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.blending_ != nullptr);
      _impl_.blending_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.post_condition_ != nullptr);
      _impl_.post_condition_->Clear();
    }
  }
  ::memset(&_impl_.vel_ratio_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.teaching_mode_) -
      reinterpret_cast<char*>(&_impl_.vel_ratio_)) + sizeof(_impl_.teaching_mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveLFReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 3, 0, 2> MoveLFReq::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_._has_bits_),
    0, // no _extensions_
    30, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3757571968,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MoveLFReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.TargetP target = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.target_)}},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.blending_)}},
    // float vel_ratio = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.vel_ratio_)}},
    // float acc_ratio = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.acc_ratio_)}},
    // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MoveLFReq, _impl_.vel_type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.vel_type_)}},
    // repeated float des_force = 6;
    {::_pbi::TcParser::FastF32P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.des_force_)}},
    // repeated bool enabled_force = 7;
    {::_pbi::TcParser::FastV8P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.enabled_force_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool teaching_mode = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.teaching_mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.TargetP target = 1;
    {PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.target_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.BlendingType blending = 2;
    {PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.blending_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float vel_ratio = 3;
    {PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.vel_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float acc_ratio = 4;
    {PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.acc_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
    {PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.vel_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated float des_force = 6;
    {PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.des_force_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated bool enabled_force = 7;
    {PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.enabled_force_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
    // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
    {PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.post_condition_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool teaching_mode = 30;
    {PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.teaching_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::TargetP>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::BlendingType>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::MotionCondition>()},
  }}, {{
  }},
};

::uint8_t* MoveLFReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveLFReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.TargetP target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::blending(this),
        _Internal::blending(this).GetCachedSize(), target, stream);
  }

  // float vel_ratio = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_vel_ratio(), target);
  }

  // float acc_ratio = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
  if (this->_internal_vel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_vel_type(), target);
  }

  // repeated float des_force = 6;
  if (this->_internal_des_force_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_des_force(), target);
  }

  // repeated bool enabled_force = 7;
  if (this->_internal_enabled_force_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_enabled_force(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::post_condition(this),
        _Internal::post_condition(this).GetCachedSize(), target, stream);
  }

  // bool teaching_mode = 30;
  if (this->_internal_teaching_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        30, this->_internal_teaching_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveLFReq)
  return target;
}

::size_t MoveLFReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveLFReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float des_force = 6;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_des_force_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated bool enabled_force = 7;
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_enabled_force_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .Nrmk.IndyFramework.TargetP target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.target_);
    }

    // .Nrmk.IndyFramework.BlendingType blending = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.blending_);
    }

    // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.post_condition_);
    }

  }
  // float vel_ratio = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = this->_internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    total_size += 5;
  }

  // float acc_ratio = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = this->_internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    total_size += 5;
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
  if (this->_internal_vel_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_vel_type());
  }

  // bool teaching_mode = 30;
  if (this->_internal_teaching_mode() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveLFReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveLFReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveLFReq::GetClassData() const { return &_class_data_; }


void MoveLFReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveLFReq*>(&to_msg);
  auto& from = static_cast<const MoveLFReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveLFReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_des_force()->MergeFrom(from._internal_des_force());
  _this->_internal_mutable_enabled_force()->MergeFrom(from._internal_enabled_force());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target()->::Nrmk::IndyFramework::TargetP::MergeFrom(
          from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(
          from._internal_blending());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(
          from._internal_post_condition());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_ratio = from._internal_vel_ratio();
  ::uint32_t raw_vel_ratio;
  memcpy(&raw_vel_ratio, &tmp_vel_ratio, sizeof(tmp_vel_ratio));
  if (raw_vel_ratio != 0) {
    _this->_internal_set_vel_ratio(from._internal_vel_ratio());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_acc_ratio = from._internal_acc_ratio();
  ::uint32_t raw_acc_ratio;
  memcpy(&raw_acc_ratio, &tmp_acc_ratio, sizeof(tmp_acc_ratio));
  if (raw_acc_ratio != 0) {
    _this->_internal_set_acc_ratio(from._internal_acc_ratio());
  }
  if (from._internal_vel_type() != 0) {
    _this->_internal_set_vel_type(from._internal_vel_type());
  }
  if (from._internal_teaching_mode() != 0) {
    _this->_internal_set_teaching_mode(from._internal_teaching_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveLFReq::CopyFrom(const MoveLFReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveLFReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveLFReq::IsInitialized() const {
  return true;
}

void MoveLFReq::InternalSwap(MoveLFReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.des_force_.InternalSwap(&other->_impl_.des_force_);
  _impl_.enabled_force_.InternalSwap(&other->_impl_.enabled_force_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.teaching_mode_)
      + sizeof(MoveLFReq::_impl_.teaching_mode_)
      - PROTOBUF_FIELD_OFFSET(MoveLFReq, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::google::protobuf::Metadata MoveLFReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[67]);
}
// ===================================================================

class MoveFLRes::_Internal {
 public:
};

MoveFLRes::MoveFLRes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MoveFLRes)
}
MoveFLRes::MoveFLRes(const MoveFLRes& from) : ::google::protobuf::Message() {
  MoveFLRes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveFLRes)
}
inline void MoveFLRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
MoveFLRes::~MoveFLRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveFLRes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MoveFLRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}
void MoveFLRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MoveFLRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveFLRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MoveFLRes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 40, 7> MoveFLRes::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    100, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MoveFLRes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string msg = 100;
    {::_pbi::TcParser::FastUS2,
     {1698, 63, 0, PROTOBUF_FIELD_OFFSET(MoveFLRes, _impl_.msg_)}},
  }}, {{
    100, 0, 1,
    65534, 0,
    65535, 65535
  }}, {{
    // string msg = 100;
    {PROTOBUF_FIELD_OFFSET(MoveFLRes, _impl_.msg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\34\3\0\0\0\0\0\0"
    "Nrmk.IndyFramework.MoveFLRes"
    "msg"
  }},
};

::uint8_t* MoveFLRes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveFLRes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.MoveFLRes.msg");
    target = stream->WriteStringMaybeAliased(100, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveFLRes)
  return target;
}

::size_t MoveFLRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveFLRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MoveFLRes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MoveFLRes::MergeImpl
};
const ::google::protobuf::Message::ClassData*MoveFLRes::GetClassData() const { return &_class_data_; }


void MoveFLRes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MoveFLRes*>(&to_msg);
  auto& from = static_cast<const MoveFLRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveFLRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveFLRes::CopyFrom(const MoveFLRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveFLRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MoveFLRes::IsInitialized() const {
  return true;
}

void MoveFLRes::InternalSwap(MoveFLRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
}

::google::protobuf::Metadata MoveFLRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[68]);
}
// ===================================================================

class TransformedFTSensorData::_Internal {
 public:
  using HasBits = decltype(std::declval<TransformedFTSensorData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const TransformedFTSensorData* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& TransformedFTSensorData::_Internal::response(const TransformedFTSensorData* msg) {
  return *msg->_impl_.response_;
}
void TransformedFTSensorData::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TransformedFTSensorData::TransformedFTSensorData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.TransformedFTSensorData)
}
TransformedFTSensorData::TransformedFTSensorData(const TransformedFTSensorData& from) : ::google::protobuf::Message() {
  TransformedFTSensorData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.ft_fx_){},
      decltype(_impl_.ft_fy_){},
      decltype(_impl_.ft_fz_){},
      decltype(_impl_.ft_tx_){},
      decltype(_impl_.ft_ty_){},
      decltype(_impl_.ft_tz_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.ft_fx_, &from._impl_.ft_fx_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ft_tz_) -
    reinterpret_cast<char*>(&_impl_.ft_fx_)) + sizeof(_impl_.ft_tz_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TransformedFTSensorData)
}
inline void TransformedFTSensorData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.ft_fx_){0},
      decltype(_impl_.ft_fy_){0},
      decltype(_impl_.ft_fz_){0},
      decltype(_impl_.ft_tx_){0},
      decltype(_impl_.ft_ty_){0},
      decltype(_impl_.ft_tz_){0},
  };
}
TransformedFTSensorData::~TransformedFTSensorData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TransformedFTSensorData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TransformedFTSensorData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}
void TransformedFTSensorData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TransformedFTSensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TransformedFTSensorData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  ::memset(&_impl_.ft_fx_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ft_tz_) -
      reinterpret_cast<char*>(&_impl_.ft_fx_)) + sizeof(_impl_.ft_tz_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TransformedFTSensorData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 0, 7> TransformedFTSensorData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_._has_bits_),
    0, // no _extensions_
    100, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TransformedFTSensorData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float ft_Fx = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.ft_fx_)}},
    // float ft_Fy = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.ft_fy_)}},
    // float ft_Fz = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.ft_fz_)}},
    // float ft_Tx = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.ft_tx_)}},
    // float ft_Ty = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.ft_ty_)}},
    // float ft_Tz = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.ft_tz_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 6,
    65535, 65535
  }}, {{
    // float ft_Fx = 1;
    {PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.ft_fx_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Fy = 2;
    {PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.ft_fy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Fz = 3;
    {PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.ft_fz_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Tx = 4;
    {PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.ft_tx_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Ty = 5;
    {PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.ft_ty_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Tz = 6;
    {PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.ft_tz_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* TransformedFTSensorData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TransformedFTSensorData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float ft_Fx = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fx = this->_internal_ft_fx();
  ::uint32_t raw_ft_fx;
  memcpy(&raw_ft_fx, &tmp_ft_fx, sizeof(tmp_ft_fx));
  if (raw_ft_fx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_ft_fx(), target);
  }

  // float ft_Fy = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fy = this->_internal_ft_fy();
  ::uint32_t raw_ft_fy;
  memcpy(&raw_ft_fy, &tmp_ft_fy, sizeof(tmp_ft_fy));
  if (raw_ft_fy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_ft_fy(), target);
  }

  // float ft_Fz = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fz = this->_internal_ft_fz();
  ::uint32_t raw_ft_fz;
  memcpy(&raw_ft_fz, &tmp_ft_fz, sizeof(tmp_ft_fz));
  if (raw_ft_fz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_ft_fz(), target);
  }

  // float ft_Tx = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tx = this->_internal_ft_tx();
  ::uint32_t raw_ft_tx;
  memcpy(&raw_ft_tx, &tmp_ft_tx, sizeof(tmp_ft_tx));
  if (raw_ft_tx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_ft_tx(), target);
  }

  // float ft_Ty = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_ty = this->_internal_ft_ty();
  ::uint32_t raw_ft_ty;
  memcpy(&raw_ft_ty, &tmp_ft_ty, sizeof(tmp_ft_ty));
  if (raw_ft_ty != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_ft_ty(), target);
  }

  // float ft_Tz = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tz = this->_internal_ft_tz();
  ::uint32_t raw_ft_tz;
  memcpy(&raw_ft_tz, &tmp_ft_tz, sizeof(tmp_ft_tz));
  if (raw_ft_tz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_ft_tz(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TransformedFTSensorData)
  return target;
}

::size_t TransformedFTSensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TransformedFTSensorData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // float ft_Fx = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fx = this->_internal_ft_fx();
  ::uint32_t raw_ft_fx;
  memcpy(&raw_ft_fx, &tmp_ft_fx, sizeof(tmp_ft_fx));
  if (raw_ft_fx != 0) {
    total_size += 5;
  }

  // float ft_Fy = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fy = this->_internal_ft_fy();
  ::uint32_t raw_ft_fy;
  memcpy(&raw_ft_fy, &tmp_ft_fy, sizeof(tmp_ft_fy));
  if (raw_ft_fy != 0) {
    total_size += 5;
  }

  // float ft_Fz = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fz = this->_internal_ft_fz();
  ::uint32_t raw_ft_fz;
  memcpy(&raw_ft_fz, &tmp_ft_fz, sizeof(tmp_ft_fz));
  if (raw_ft_fz != 0) {
    total_size += 5;
  }

  // float ft_Tx = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tx = this->_internal_ft_tx();
  ::uint32_t raw_ft_tx;
  memcpy(&raw_ft_tx, &tmp_ft_tx, sizeof(tmp_ft_tx));
  if (raw_ft_tx != 0) {
    total_size += 5;
  }

  // float ft_Ty = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_ty = this->_internal_ft_ty();
  ::uint32_t raw_ft_ty;
  memcpy(&raw_ft_ty, &tmp_ft_ty, sizeof(tmp_ft_ty));
  if (raw_ft_ty != 0) {
    total_size += 5;
  }

  // float ft_Tz = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tz = this->_internal_ft_tz();
  ::uint32_t raw_ft_tz;
  memcpy(&raw_ft_tz, &tmp_ft_tz, sizeof(tmp_ft_tz));
  if (raw_ft_tz != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TransformedFTSensorData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TransformedFTSensorData::MergeImpl
};
const ::google::protobuf::Message::ClassData*TransformedFTSensorData::GetClassData() const { return &_class_data_; }


void TransformedFTSensorData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TransformedFTSensorData*>(&to_msg);
  auto& from = static_cast<const TransformedFTSensorData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TransformedFTSensorData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fx = from._internal_ft_fx();
  ::uint32_t raw_ft_fx;
  memcpy(&raw_ft_fx, &tmp_ft_fx, sizeof(tmp_ft_fx));
  if (raw_ft_fx != 0) {
    _this->_internal_set_ft_fx(from._internal_ft_fx());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fy = from._internal_ft_fy();
  ::uint32_t raw_ft_fy;
  memcpy(&raw_ft_fy, &tmp_ft_fy, sizeof(tmp_ft_fy));
  if (raw_ft_fy != 0) {
    _this->_internal_set_ft_fy(from._internal_ft_fy());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fz = from._internal_ft_fz();
  ::uint32_t raw_ft_fz;
  memcpy(&raw_ft_fz, &tmp_ft_fz, sizeof(tmp_ft_fz));
  if (raw_ft_fz != 0) {
    _this->_internal_set_ft_fz(from._internal_ft_fz());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tx = from._internal_ft_tx();
  ::uint32_t raw_ft_tx;
  memcpy(&raw_ft_tx, &tmp_ft_tx, sizeof(tmp_ft_tx));
  if (raw_ft_tx != 0) {
    _this->_internal_set_ft_tx(from._internal_ft_tx());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_ty = from._internal_ft_ty();
  ::uint32_t raw_ft_ty;
  memcpy(&raw_ft_ty, &tmp_ft_ty, sizeof(tmp_ft_ty));
  if (raw_ft_ty != 0) {
    _this->_internal_set_ft_ty(from._internal_ft_ty());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tz = from._internal_ft_tz();
  ::uint32_t raw_ft_tz;
  memcpy(&raw_ft_tz, &tmp_ft_tz, sizeof(tmp_ft_tz));
  if (raw_ft_tz != 0) {
    _this->_internal_set_ft_tz(from._internal_ft_tz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TransformedFTSensorData::CopyFrom(const TransformedFTSensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TransformedFTSensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TransformedFTSensorData::IsInitialized() const {
  return true;
}

void TransformedFTSensorData::InternalSwap(TransformedFTSensorData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.ft_tz_)
      + sizeof(TransformedFTSensorData::_impl_.ft_tz_)
      - PROTOBUF_FIELD_OFFSET(TransformedFTSensorData, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata TransformedFTSensorData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_control_5fmsgs_2eproto_getter, &descriptor_table_control_5fmsgs_2eproto_once,
      file_level_metadata_control_5fmsgs_2eproto[69]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
