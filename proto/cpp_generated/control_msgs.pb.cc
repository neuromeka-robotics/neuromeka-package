// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_msgs.proto

#include "control_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_device_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnalogSignal_device_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlendingType_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolVariable_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitalSignal_device_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatVariable_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IOCondition_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntVariable_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JPosVariable_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModbusServer_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModbusVariable_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MotionCondition_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PalletPoint_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Program_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_common_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TPosVariable_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetC_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetJ_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetP_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Variable_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_VariableCondition_control_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector_common_5fmsgs_2eproto;
namespace Nrmk {
namespace IndyFramework {
class ControlInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlInfo> _instance;
} _ControlInfo_default_instance_;
class SDKLicenseInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SDKLicenseInfo> _instance;
} _SDKLicenseInfo_default_instance_;
class SDKLicenseRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SDKLicenseResp> _instance;
} _SDKLicenseResp_default_instance_;
class VariableConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VariableCondition> _instance;
} _VariableCondition_default_instance_;
class IOConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IOCondition> _instance;
} _IOCondition_default_instance_;
class MotionConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotionCondition> _instance;
} _MotionCondition_default_instance_;
class BlendingTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlendingType> _instance;
} _BlendingType_default_instance_;
class TargetJDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetJ> _instance;
} _TargetJ_default_instance_;
class MoveJReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveJReq> _instance;
} _MoveJReq_default_instance_;
class MoveJCondReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveJCondReq> _instance;
} _MoveJCondReq_default_instance_;
class MoveJTReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveJTReq> _instance;
} _MoveJTReq_default_instance_;
class TargetPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetP> _instance;
} _TargetP_default_instance_;
class TargetCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetC> _instance;
} _TargetC_default_instance_;
class MoveLReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveLReq> _instance;
} _MoveLReq_default_instance_;
class MoveLTReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveLTReq> _instance;
} _MoveLTReq_default_instance_;
class MoveAxisReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveAxisReq> _instance;
} _MoveAxisReq_default_instance_;
class MoveCReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveCReq> _instance;
} _MoveCReq_default_instance_;
class MoveCTReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveCTReq> _instance;
} _MoveCTReq_default_instance_;
class MoveJointTrajReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveJointTrajReq> _instance;
} _MoveJointTrajReq_default_instance_;
class MoveTaskTrajReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveTaskTrajReq> _instance;
} _MoveTaskTrajReq_default_instance_;
class MoveConveyorReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveConveyorReq> _instance;
} _MoveConveyorReq_default_instance_;
class WaitIOReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WaitIOReq> _instance;
} _WaitIOReq_default_instance_;
class WaitTimeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WaitTimeReq> _instance;
} _WaitTimeReq_default_instance_;
class WaitProgressReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WaitProgressReq> _instance;
} _WaitProgressReq_default_instance_;
class WaitTrajReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WaitTrajReq> _instance;
} _WaitTrajReq_default_instance_;
class WaitRadiusReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WaitRadiusReq> _instance;
} _WaitRadiusReq_default_instance_;
class ProgramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Program> _instance;
} _Program_default_instance_;
class TuningProgramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TuningProgram> _instance;
} _TuningProgram_default_instance_;
class ProgramInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProgramInfo> _instance;
} _ProgramInfo_default_instance_;
class VariableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Variable> _instance;
} _Variable_default_instance_;
class IntVariableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntVariable> _instance;
} _IntVariable_default_instance_;
class ModbusVariableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModbusVariable> _instance;
} _ModbusVariable_default_instance_;
class BoolVariableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoolVariable> _instance;
} _BoolVariable_default_instance_;
class FloatVariableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatVariable> _instance;
} _FloatVariable_default_instance_;
class JPosVariableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JPosVariable> _instance;
} _JPosVariable_default_instance_;
class TPosVariableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TPosVariable> _instance;
} _TPosVariable_default_instance_;
class ModbusServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModbusServer> _instance;
} _ModbusServer_default_instance_;
class ModbusVariableListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModbusVariableList> _instance;
} _ModbusVariableList_default_instance_;
class AllVarsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllVars> _instance;
} _AllVars_default_instance_;
class IntVarsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntVars> _instance;
} _IntVars_default_instance_;
class ModbusVarsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModbusVars> _instance;
} _ModbusVars_default_instance_;
class BoolVarsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoolVars> _instance;
} _BoolVars_default_instance_;
class FloatVarsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatVars> _instance;
} _FloatVars_default_instance_;
class JPosVarsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JPosVars> _instance;
} _JPosVars_default_instance_;
class TPosVarsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TPosVars> _instance;
} _TPosVars_default_instance_;
class InverseKinematicsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InverseKinematicsReq> _instance;
} _InverseKinematicsReq_default_instance_;
class InverseKinematicsResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InverseKinematicsRes> _instance;
} _InverseKinematicsRes_default_instance_;
class ForwardKinematicsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForwardKinematicsReq> _instance;
} _ForwardKinematicsReq_default_instance_;
class ForwardKinematicsResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForwardKinematicsRes> _instance;
} _ForwardKinematicsRes_default_instance_;
class CheckAproachRetractValidReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckAproachRetractValidReq> _instance;
} _CheckAproachRetractValidReq_default_instance_;
class CheckAproachRetractValidResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckAproachRetractValidRes> _instance;
} _CheckAproachRetractValidRes_default_instance_;
class GetPalletPointListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPalletPointListReq> _instance;
} _GetPalletPointListReq_default_instance_;
class PalletPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PalletPoint> _instance;
} _PalletPoint_default_instance_;
class GetPalletPointListResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPalletPointListRes> _instance;
} _GetPalletPointListRes_default_instance_;
class CalculateRelativePoseReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalculateRelativePoseReq> _instance;
} _CalculateRelativePoseReq_default_instance_;
class CalculateRelativePoseResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalculateRelativePoseRes> _instance;
} _CalculateRelativePoseRes_default_instance_;
class CalculateCurrentPoseRelReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalculateCurrentPoseRelReq> _instance;
} _CalculateCurrentPoseRelReq_default_instance_;
class CalculateCurrentPoseRelResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalculateCurrentPoseRelRes> _instance;
} _CalculateCurrentPoseRelRes_default_instance_;
class TeleOpDeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeleOpDevice> _instance;
} _TeleOpDevice_default_instance_;
class TeleOpStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeleOpState> _instance;
} _TeleOpState_default_instance_;
class TelePDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeleP> _instance;
} _TeleP_default_instance_;
class TeleOpFileListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeleOpFileList> _instance;
} _TeleOpFileList_default_instance_;
class TeleFileReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeleFileReq> _instance;
} _TeleFileReq_default_instance_;
class TelePlayRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TelePlayRate> _instance;
} _TelePlayRate_default_instance_;
class MoveTeleJReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveTeleJReq> _instance;
} _MoveTeleJReq_default_instance_;
class MoveTeleLReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveTeleLReq> _instance;
} _MoveTeleLReq_default_instance_;
class MoveLFReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveLFReq> _instance;
} _MoveLFReq_default_instance_;
class MoveFLResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveFLRes> _instance;
} _MoveFLRes_default_instance_;
class TransformedFTSensorDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransformedFTSensorData> _instance;
} _TransformedFTSensorData_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
static void InitDefaultsscc_info_AllVars_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_AllVars_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::AllVars();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::AllVars::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllVars_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AllVars_control_5fmsgs_2eproto}, {
      &scc_info_Variable_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_BlendingType_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_BlendingType_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::BlendingType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::BlendingType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlendingType_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BlendingType_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_BoolVariable_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_BoolVariable_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::BoolVariable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::BoolVariable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolVariable_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BoolVariable_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_BoolVars_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_BoolVars_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::BoolVars();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::BoolVars::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoolVars_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BoolVars_control_5fmsgs_2eproto}, {
      &scc_info_BoolVariable_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_CalculateCurrentPoseRelReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_CalculateCurrentPoseRelReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::CalculateCurrentPoseRelReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::CalculateCurrentPoseRelReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalculateCurrentPoseRelReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CalculateCurrentPoseRelReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_CalculateCurrentPoseRelRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_CalculateCurrentPoseRelRes_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CalculateCurrentPoseRelRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CalculateCurrentPoseRelRes_control_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_CalculateRelativePoseReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_CalculateRelativePoseReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::CalculateRelativePoseReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::CalculateRelativePoseReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalculateRelativePoseReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CalculateRelativePoseReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_CalculateRelativePoseRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_CalculateRelativePoseRes_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::CalculateRelativePoseRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::CalculateRelativePoseRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CalculateRelativePoseRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CalculateRelativePoseRes_control_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_CheckAproachRetractValidReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_CheckAproachRetractValidReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::CheckAproachRetractValidReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::CheckAproachRetractValidReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckAproachRetractValidReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CheckAproachRetractValidReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_CheckAproachRetractValidRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_CheckAproachRetractValidRes_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::CheckAproachRetractValidRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::CheckAproachRetractValidRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckAproachRetractValidRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CheckAproachRetractValidRes_control_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_ControlInfo_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_ControlInfo_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::ControlInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::ControlInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControlInfo_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ControlInfo_control_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_FloatVariable_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_FloatVariable_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::FloatVariable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::FloatVariable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatVariable_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FloatVariable_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_FloatVars_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_FloatVars_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::FloatVars();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::FloatVars::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FloatVars_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FloatVars_control_5fmsgs_2eproto}, {
      &scc_info_FloatVariable_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_ForwardKinematicsReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_ForwardKinematicsReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::ForwardKinematicsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::ForwardKinematicsReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForwardKinematicsReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ForwardKinematicsReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_ForwardKinematicsRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_ForwardKinematicsRes_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::ForwardKinematicsRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::ForwardKinematicsRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ForwardKinematicsRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ForwardKinematicsRes_control_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_GetPalletPointListReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_GetPalletPointListReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::GetPalletPointListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::GetPalletPointListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPalletPointListReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetPalletPointListReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetPalletPointListRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_GetPalletPointListRes_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::GetPalletPointListRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::GetPalletPointListRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetPalletPointListRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetPalletPointListRes_control_5fmsgs_2eproto}, {
      &scc_info_PalletPoint_control_5fmsgs_2eproto.base,
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_IOCondition_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_IOCondition_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::IOCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::IOCondition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IOCondition_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IOCondition_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_device_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_IntVariable_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_IntVariable_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::IntVariable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::IntVariable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntVariable_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IntVariable_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_IntVars_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_IntVars_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::IntVars();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::IntVars::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntVars_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IntVars_control_5fmsgs_2eproto}, {
      &scc_info_IntVariable_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_InverseKinematicsReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_InverseKinematicsReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::InverseKinematicsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::InverseKinematicsReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InverseKinematicsReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InverseKinematicsReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_InverseKinematicsRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_InverseKinematicsRes_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::InverseKinematicsRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::InverseKinematicsRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InverseKinematicsRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InverseKinematicsRes_control_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_JPosVariable_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_JPosVariable_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::JPosVariable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::JPosVariable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JPosVariable_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JPosVariable_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_JPosVars_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_JPosVars_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::JPosVars();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::JPosVars::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JPosVars_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_JPosVars_control_5fmsgs_2eproto}, {
      &scc_info_JPosVariable_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_ModbusServer_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_ModbusServer_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::ModbusServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::ModbusServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModbusServer_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ModbusServer_control_5fmsgs_2eproto}, {
      &scc_info_ModbusVariable_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_ModbusVariable_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_ModbusVariable_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::ModbusVariable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::ModbusVariable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModbusVariable_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ModbusVariable_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_ModbusVariableList_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_ModbusVariableList_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::ModbusVariableList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::ModbusVariableList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModbusVariableList_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ModbusVariableList_control_5fmsgs_2eproto}, {
      &scc_info_ModbusServer_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_ModbusVars_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_ModbusVars_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::ModbusVars();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::ModbusVars::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModbusVars_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ModbusVars_control_5fmsgs_2eproto}, {
      &scc_info_ModbusVariable_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MotionCondition_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MotionCondition_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MotionCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MotionCondition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MotionCondition_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MotionCondition_control_5fmsgs_2eproto}, {
      &scc_info_IOCondition_control_5fmsgs_2eproto.base,
      &scc_info_VariableCondition_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveAxisReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveAxisReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveAxisReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveAxisReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveAxisReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveAxisReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_MoveCReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveCReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveCReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveCReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MoveCReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MoveCReq_control_5fmsgs_2eproto}, {
      &scc_info_TargetC_control_5fmsgs_2eproto.base,
      &scc_info_BlendingType_control_5fmsgs_2eproto.base,
      &scc_info_MotionCondition_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveCTReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveCTReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveCTReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveCTReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MoveCTReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MoveCTReq_control_5fmsgs_2eproto}, {
      &scc_info_TargetC_control_5fmsgs_2eproto.base,
      &scc_info_BlendingType_control_5fmsgs_2eproto.base,
      &scc_info_MotionCondition_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveConveyorReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveConveyorReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveConveyorReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveConveyorReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveConveyorReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MoveConveyorReq_control_5fmsgs_2eproto}, {
      &scc_info_MotionCondition_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveFLRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveFLRes_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveFLRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveFLRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveFLRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveFLRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_MoveJCondReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveJCondReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveJCondReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveJCondReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MoveJCondReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MoveJCondReq_control_5fmsgs_2eproto}, {
      &scc_info_TargetJ_control_5fmsgs_2eproto.base,
      &scc_info_BlendingType_control_5fmsgs_2eproto.base,
      &scc_info_MotionCondition_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveJReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveJReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveJReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveJReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MoveJReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MoveJReq_control_5fmsgs_2eproto}, {
      &scc_info_TargetJ_control_5fmsgs_2eproto.base,
      &scc_info_BlendingType_control_5fmsgs_2eproto.base,
      &scc_info_MotionCondition_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveJTReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveJTReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveJTReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveJTReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MoveJTReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MoveJTReq_control_5fmsgs_2eproto}, {
      &scc_info_TargetJ_control_5fmsgs_2eproto.base,
      &scc_info_BlendingType_control_5fmsgs_2eproto.base,
      &scc_info_MotionCondition_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveJointTrajReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveJointTrajReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveJointTrajReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveJointTrajReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveJointTrajReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MoveJointTrajReq_control_5fmsgs_2eproto}, {
      &scc_info_Vector_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveLFReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveLFReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveLFReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveLFReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MoveLFReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MoveLFReq_control_5fmsgs_2eproto}, {
      &scc_info_TargetP_control_5fmsgs_2eproto.base,
      &scc_info_BlendingType_control_5fmsgs_2eproto.base,
      &scc_info_MotionCondition_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveLReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveLReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveLReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveLReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MoveLReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MoveLReq_control_5fmsgs_2eproto}, {
      &scc_info_TargetP_control_5fmsgs_2eproto.base,
      &scc_info_BlendingType_control_5fmsgs_2eproto.base,
      &scc_info_MotionCondition_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveLTReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveLTReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveLTReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveLTReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MoveLTReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MoveLTReq_control_5fmsgs_2eproto}, {
      &scc_info_TargetP_control_5fmsgs_2eproto.base,
      &scc_info_BlendingType_control_5fmsgs_2eproto.base,
      &scc_info_MotionCondition_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveTaskTrajReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveTaskTrajReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveTaskTrajReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveTaskTrajReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveTaskTrajReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MoveTaskTrajReq_control_5fmsgs_2eproto}, {
      &scc_info_Vector_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveTeleJReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveTeleJReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveTeleJReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveTeleJReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveTeleJReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveTeleJReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_MoveTeleLReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MoveTeleLReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MoveTeleLReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MoveTeleLReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveTeleLReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveTeleLReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_PalletPoint_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_PalletPoint_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::PalletPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::PalletPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PalletPoint_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PalletPoint_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_Program_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_Program_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::Program();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::Program::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Program_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Program_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_ProgramInfo_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_ProgramInfo_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::ProgramInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::ProgramInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProgramInfo_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ProgramInfo_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SDKLicenseInfo_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_SDKLicenseInfo_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::SDKLicenseInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::SDKLicenseInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SDKLicenseInfo_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SDKLicenseInfo_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SDKLicenseResp_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_SDKLicenseResp_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::SDKLicenseResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::SDKLicenseResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SDKLicenseResp_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SDKLicenseResp_control_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_TPosVariable_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TPosVariable_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TPosVariable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TPosVariable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TPosVariable_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TPosVariable_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_TPosVars_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TPosVars_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TPosVars();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TPosVars::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TPosVars_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TPosVars_control_5fmsgs_2eproto}, {
      &scc_info_TPosVariable_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_TargetC_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TargetC_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TargetC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TargetC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetC_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TargetC_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_TargetJ_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TargetJ_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TargetJ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TargetJ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetJ_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TargetJ_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_TargetP_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TargetP_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TargetP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TargetP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetP_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TargetP_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_TeleFileReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TeleFileReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TeleFileReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TeleFileReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeleFileReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TeleFileReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_TeleOpDevice_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TeleOpDevice_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TeleOpDevice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TeleOpDevice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeleOpDevice_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TeleOpDevice_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_TeleOpFileList_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TeleOpFileList_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TeleOpFileList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TeleOpFileList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeleOpFileList_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TeleOpFileList_control_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_TeleOpState_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TeleOpState_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TeleOpState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TeleOpState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeleOpState_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TeleOpState_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_TeleP_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TeleP_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TeleP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TeleP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeleP_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TeleP_control_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_TelePlayRate_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TelePlayRate_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TelePlayRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TelePlayRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TelePlayRate_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TelePlayRate_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_TransformedFTSensorData_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TransformedFTSensorData_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TransformedFTSensorData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TransformedFTSensorData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransformedFTSensorData_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TransformedFTSensorData_control_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_TuningProgram_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TuningProgram_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TuningProgram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TuningProgram::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TuningProgram_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TuningProgram_control_5fmsgs_2eproto}, {
      &scc_info_Program_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Variable_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_Variable_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::Variable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::Variable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Variable_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Variable_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_VariableCondition_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_VariableCondition_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::VariableCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::VariableCondition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_VariableCondition_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_VariableCondition_control_5fmsgs_2eproto}, {
      &scc_info_IntVariable_control_5fmsgs_2eproto.base,
      &scc_info_FloatVariable_control_5fmsgs_2eproto.base,
      &scc_info_BoolVariable_control_5fmsgs_2eproto.base,
      &scc_info_ModbusVariable_control_5fmsgs_2eproto.base,
      &scc_info_JPosVariable_control_5fmsgs_2eproto.base,
      &scc_info_TPosVariable_control_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_WaitIOReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_WaitIOReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::WaitIOReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::WaitIOReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WaitIOReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_WaitIOReq_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_device_5fmsgs_2eproto.base,
      &scc_info_AnalogSignal_device_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_WaitProgressReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_WaitProgressReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::WaitProgressReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::WaitProgressReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WaitProgressReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_WaitProgressReq_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_device_5fmsgs_2eproto.base,
      &scc_info_AnalogSignal_device_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_WaitRadiusReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_WaitRadiusReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::WaitRadiusReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::WaitRadiusReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WaitRadiusReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_WaitRadiusReq_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_device_5fmsgs_2eproto.base,
      &scc_info_AnalogSignal_device_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_WaitTimeReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_WaitTimeReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::WaitTimeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::WaitTimeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WaitTimeReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_WaitTimeReq_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_device_5fmsgs_2eproto.base,
      &scc_info_AnalogSignal_device_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_WaitTrajReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_WaitTrajReq_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::WaitTrajReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::WaitTrajReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WaitTrajReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_WaitTrajReq_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_device_5fmsgs_2eproto.base,
      &scc_info_AnalogSignal_device_5fmsgs_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_5fmsgs_2eproto[69];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_control_5fmsgs_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_5fmsgs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlInfo, control_version_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlInfo, robot_model_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlInfo, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SDKLicenseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SDKLicenseInfo, license_key_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SDKLicenseInfo, expire_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SDKLicenseResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SDKLicenseResp, activated_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SDKLicenseResp, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VariableCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VariableCondition, i_vars_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VariableCondition, f_vars_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VariableCondition, b_vars_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VariableCondition, m_vars_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VariableCondition, j_vars_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VariableCondition, t_vars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOCondition, di_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOCondition, end_di_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionCondition, type_cond_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionCondition, type_react_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionCondition, const_cond_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionCondition, io_cond_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionCondition, var_cond_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BlendingType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BlendingType, type_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BlendingType, blending_radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetJ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetJ, j_start_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetJ, j_target_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetJ, base_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, target_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, blending_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, vel_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, acc_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, post_condition_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJReq, teaching_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, target_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, blending_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, vel_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, acc_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, post_condition_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJCondReq, teaching_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJTReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJTReq, target_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJTReq, blending_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJTReq, time_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJTReq, post_condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetP, t_start_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetP, t_target_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetP, base_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetC, t_start_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetC, t_pos0_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetC, t_pos1_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TargetC, base_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, target_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, blending_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, vel_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, acc_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, vel_type_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, post_condition_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, teaching_mode_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLReq, bypass_singular_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLTReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLTReq, target_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLTReq, blending_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLTReq, time_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLTReq, post_condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveAxisReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveAxisReq, start_mm_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveAxisReq, target_mm_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveAxisReq, vel_percentage_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveAxisReq, acc_percentage_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveAxisReq, is_absolute_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveAxisReq, teaching_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, target_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, blending_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, angle_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, setting_type_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, move_type_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, vel_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, acc_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, vel_type_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, post_condition_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, teaching_mode_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCReq, bypass_singular_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, target_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, blending_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, angle_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, setting_type_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, move_type_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, time_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveCTReq, post_condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJointTrajReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJointTrajReq, q_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJointTrajReq, qdot_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveJointTrajReq, qddot_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTaskTrajReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTaskTrajReq, p_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTaskTrajReq, pdot_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTaskTrajReq, pddot_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveConveyorReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveConveyorReq, teaching_mode_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveConveyorReq, bypass_singular_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveConveyorReq, acc_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveConveyorReq, post_condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, di_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, do_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, end_di_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, end_do_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, conjunction_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, set_do_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, set_end_do_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, set_ao_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitIOReq, set_end_ao_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTimeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTimeReq, time_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTimeReq, set_do_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTimeReq, set_end_do_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTimeReq, set_ao_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTimeReq, set_end_ao_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitProgressReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitProgressReq, progress_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitProgressReq, set_do_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitProgressReq, set_end_do_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitProgressReq, set_ao_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitProgressReq, set_end_ao_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTrajReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTrajReq, traj_condition_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTrajReq, set_do_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTrajReq, set_end_do_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTrajReq, set_ao_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitTrajReq, set_end_ao_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitRadiusReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitRadiusReq, radius_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitRadiusReq, set_do_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitRadiusReq, set_end_do_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitRadiusReq, set_ao_list_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::WaitRadiusReq, set_end_ao_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Program, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Program, prog_name_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Program, prog_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TuningProgram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TuningProgram, program_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TuningProgram, tuning_space_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TuningProgram, precision_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TuningProgram, vel_level_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramInfo, path_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramInfo, size_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramInfo, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Variable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Variable, name_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Variable, addr_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Variable, type_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Variable, in_watching_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IntVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IntVariable, addr_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IntVariable, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVariable, name_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVariable, addr_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVariable, value_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVariable, signal_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BoolVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BoolVariable, addr_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BoolVariable, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FloatVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FloatVariable, addr_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FloatVariable, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JPosVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JPosVariable, addr_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JPosVariable, jpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TPosVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TPosVariable, addr_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TPosVariable, tpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusServer, server_name_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusServer, ip_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusServer, port_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusServer, variable_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVariableList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVariableList, modbus_variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AllVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AllVars, variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IntVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IntVars, variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ModbusVars, variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BoolVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BoolVars, variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FloatVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FloatVars, variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JPosVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::JPosVars, variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TPosVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TPosVars, variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::InverseKinematicsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::InverseKinematicsReq, tpos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::InverseKinematicsReq, init_jpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::InverseKinematicsRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::InverseKinematicsRes, jpos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::InverseKinematicsRes, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForwardKinematicsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForwardKinematicsReq, jpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForwardKinematicsRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForwardKinematicsRes, tpos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ForwardKinematicsRes, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidReq, tpos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidReq, init_jpos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidReq, pre_tpos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidReq, post_tpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidRes, is_valid_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidRes, tar_pos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidRes, approach_pos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidRes, retract_pos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAproachRetractValidRes, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, tpos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, jpos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, pre_tpos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, post_tpos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, pallet_pattern_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, width_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListReq, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::PalletPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::PalletPoint, tar_pos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::PalletPoint, approach_pos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::PalletPoint, retract_pos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::PalletPoint, tar_jpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListRes, pallet_points_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetPalletPointListRes, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseReq, start_pos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseReq, end_pos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseReq, base_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseRes, relative_pos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateRelativePoseRes, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelReq, current_pos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelReq, relative_pos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelReq, base_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelRes, calculated_pos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CalculateCurrentPoseRelRes, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpDevice, name_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpDevice, type_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpDevice, ip_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpDevice, port_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpDevice, connected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpState, mode_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpState, method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleP, tpos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleP, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpFileList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpFileList, files_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleOpFileList, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleFileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TeleFileReq, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TelePlayRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TelePlayRate, rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleJReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleJReq, jpos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleJReq, vel_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleJReq, acc_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleJReq, method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleLReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleLReq, tpos_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleLReq, vel_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleLReq, acc_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveTeleLReq, method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, target_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, blending_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, vel_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, acc_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, vel_type_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, des_force_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, enabled_force_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, post_condition_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveLFReq, teaching_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveFLRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MoveFLRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, ft_fx_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, ft_fy_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, ft_fz_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, ft_tx_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, ft_ty_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, ft_tz_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TransformedFTSensorData, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Nrmk::IndyFramework::ControlInfo)},
  { 8, -1, sizeof(::Nrmk::IndyFramework::SDKLicenseInfo)},
  { 15, -1, sizeof(::Nrmk::IndyFramework::SDKLicenseResp)},
  { 22, -1, sizeof(::Nrmk::IndyFramework::VariableCondition)},
  { 33, -1, sizeof(::Nrmk::IndyFramework::IOCondition)},
  { 40, -1, sizeof(::Nrmk::IndyFramework::MotionCondition)},
  { 50, -1, sizeof(::Nrmk::IndyFramework::BlendingType)},
  { 57, -1, sizeof(::Nrmk::IndyFramework::TargetJ)},
  { 65, -1, sizeof(::Nrmk::IndyFramework::MoveJReq)},
  { 76, -1, sizeof(::Nrmk::IndyFramework::MoveJCondReq)},
  { 87, -1, sizeof(::Nrmk::IndyFramework::MoveJTReq)},
  { 96, -1, sizeof(::Nrmk::IndyFramework::TargetP)},
  { 104, -1, sizeof(::Nrmk::IndyFramework::TargetC)},
  { 113, -1, sizeof(::Nrmk::IndyFramework::MoveLReq)},
  { 126, -1, sizeof(::Nrmk::IndyFramework::MoveLTReq)},
  { 135, -1, sizeof(::Nrmk::IndyFramework::MoveAxisReq)},
  { 146, -1, sizeof(::Nrmk::IndyFramework::MoveCReq)},
  { 162, -1, sizeof(::Nrmk::IndyFramework::MoveCTReq)},
  { 174, -1, sizeof(::Nrmk::IndyFramework::MoveJointTrajReq)},
  { 182, -1, sizeof(::Nrmk::IndyFramework::MoveTaskTrajReq)},
  { 190, -1, sizeof(::Nrmk::IndyFramework::MoveConveyorReq)},
  { 199, -1, sizeof(::Nrmk::IndyFramework::WaitIOReq)},
  { 213, -1, sizeof(::Nrmk::IndyFramework::WaitTimeReq)},
  { 223, -1, sizeof(::Nrmk::IndyFramework::WaitProgressReq)},
  { 233, -1, sizeof(::Nrmk::IndyFramework::WaitTrajReq)},
  { 243, -1, sizeof(::Nrmk::IndyFramework::WaitRadiusReq)},
  { 253, -1, sizeof(::Nrmk::IndyFramework::Program)},
  { 260, -1, sizeof(::Nrmk::IndyFramework::TuningProgram)},
  { 269, -1, sizeof(::Nrmk::IndyFramework::ProgramInfo)},
  { 277, -1, sizeof(::Nrmk::IndyFramework::Variable)},
  { 286, -1, sizeof(::Nrmk::IndyFramework::IntVariable)},
  { 293, -1, sizeof(::Nrmk::IndyFramework::ModbusVariable)},
  { 302, -1, sizeof(::Nrmk::IndyFramework::BoolVariable)},
  { 309, -1, sizeof(::Nrmk::IndyFramework::FloatVariable)},
  { 316, -1, sizeof(::Nrmk::IndyFramework::JPosVariable)},
  { 323, -1, sizeof(::Nrmk::IndyFramework::TPosVariable)},
  { 330, -1, sizeof(::Nrmk::IndyFramework::ModbusServer)},
  { 339, -1, sizeof(::Nrmk::IndyFramework::ModbusVariableList)},
  { 345, -1, sizeof(::Nrmk::IndyFramework::AllVars)},
  { 351, -1, sizeof(::Nrmk::IndyFramework::IntVars)},
  { 357, -1, sizeof(::Nrmk::IndyFramework::ModbusVars)},
  { 363, -1, sizeof(::Nrmk::IndyFramework::BoolVars)},
  { 369, -1, sizeof(::Nrmk::IndyFramework::FloatVars)},
  { 375, -1, sizeof(::Nrmk::IndyFramework::JPosVars)},
  { 381, -1, sizeof(::Nrmk::IndyFramework::TPosVars)},
  { 387, -1, sizeof(::Nrmk::IndyFramework::InverseKinematicsReq)},
  { 394, -1, sizeof(::Nrmk::IndyFramework::InverseKinematicsRes)},
  { 401, -1, sizeof(::Nrmk::IndyFramework::ForwardKinematicsReq)},
  { 407, -1, sizeof(::Nrmk::IndyFramework::ForwardKinematicsRes)},
  { 414, -1, sizeof(::Nrmk::IndyFramework::CheckAproachRetractValidReq)},
  { 423, -1, sizeof(::Nrmk::IndyFramework::CheckAproachRetractValidRes)},
  { 433, -1, sizeof(::Nrmk::IndyFramework::GetPalletPointListReq)},
  { 445, -1, sizeof(::Nrmk::IndyFramework::PalletPoint)},
  { 454, -1, sizeof(::Nrmk::IndyFramework::GetPalletPointListRes)},
  { 461, -1, sizeof(::Nrmk::IndyFramework::CalculateRelativePoseReq)},
  { 469, -1, sizeof(::Nrmk::IndyFramework::CalculateRelativePoseRes)},
  { 476, -1, sizeof(::Nrmk::IndyFramework::CalculateCurrentPoseRelReq)},
  { 484, -1, sizeof(::Nrmk::IndyFramework::CalculateCurrentPoseRelRes)},
  { 491, -1, sizeof(::Nrmk::IndyFramework::TeleOpDevice)},
  { 501, -1, sizeof(::Nrmk::IndyFramework::TeleOpState)},
  { 508, -1, sizeof(::Nrmk::IndyFramework::TeleP)},
  { 515, -1, sizeof(::Nrmk::IndyFramework::TeleOpFileList)},
  { 522, -1, sizeof(::Nrmk::IndyFramework::TeleFileReq)},
  { 528, -1, sizeof(::Nrmk::IndyFramework::TelePlayRate)},
  { 534, -1, sizeof(::Nrmk::IndyFramework::MoveTeleJReq)},
  { 543, -1, sizeof(::Nrmk::IndyFramework::MoveTeleLReq)},
  { 552, -1, sizeof(::Nrmk::IndyFramework::MoveLFReq)},
  { 566, -1, sizeof(::Nrmk::IndyFramework::MoveFLRes)},
  { 572, -1, sizeof(::Nrmk::IndyFramework::TransformedFTSensorData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_ControlInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_SDKLicenseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_SDKLicenseResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_VariableCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_IOCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MotionCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_BlendingType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TargetJ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveJReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveJCondReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveJTReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TargetP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TargetC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveLReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveLTReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveAxisReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveCReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveCTReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveJointTrajReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveTaskTrajReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveConveyorReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_WaitIOReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_WaitTimeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_WaitProgressReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_WaitTrajReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_WaitRadiusReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_Program_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TuningProgram_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_ProgramInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_Variable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_IntVariable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_ModbusVariable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_BoolVariable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_FloatVariable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_JPosVariable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TPosVariable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_ModbusServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_ModbusVariableList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_AllVars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_IntVars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_ModbusVars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_BoolVars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_FloatVars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_JPosVars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TPosVars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_InverseKinematicsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_InverseKinematicsRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_ForwardKinematicsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_ForwardKinematicsRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_CheckAproachRetractValidReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_CheckAproachRetractValidRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_GetPalletPointListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_PalletPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_GetPalletPointListRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_CalculateRelativePoseReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_CalculateRelativePoseRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_CalculateCurrentPoseRelReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_CalculateCurrentPoseRelRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TeleOpDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TeleOpState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TeleP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TeleOpFileList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TeleFileReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TelePlayRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveTeleJReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveTeleLReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveLFReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MoveFLRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TransformedFTSensorData_default_instance_),
};

const char descriptor_table_protodef_control_5fmsgs_2eproto[] =
  "\n\022control_msgs.proto\022\022Nrmk.IndyFramework"
  "\032\021device_msgs.proto\032\021common_msgs.proto\"k"
  "\n\013ControlInfo\022\027\n\017control_version\030\001 \001(\t\022\023"
  "\n\013robot_model\030\002 \001(\t\022.\n\010response\030d \001(\0132\034."
  "Nrmk.IndyFramework.Response\":\n\016SDKLicens"
  "eInfo\022\023\n\013license_key\030\001 \001(\t\022\023\n\013expire_dat"
  "e\030\002 \001(\t\"S\n\016SDKLicenseResp\022\021\n\tactivated\030\001"
  " \001(\010\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFramew"
  "ork.Response\"\301\002\n\021VariableCondition\022/\n\006i_"
  "vars\030\001 \003(\0132\037.Nrmk.IndyFramework.IntVaria"
  "ble\0221\n\006f_vars\030\002 \003(\0132!.Nrmk.IndyFramework"
  ".FloatVariable\0220\n\006b_vars\030\003 \003(\0132 .Nrmk.In"
  "dyFramework.BoolVariable\0222\n\006m_vars\030\004 \003(\013"
  "2\".Nrmk.IndyFramework.ModbusVariable\0220\n\006"
  "j_vars\030\005 \003(\0132 .Nrmk.IndyFramework.JPosVa"
  "riable\0220\n\006t_vars\030\006 \003(\0132 .Nrmk.IndyFramew"
  "ork.TPosVariable\"o\n\013IOCondition\022-\n\002di\030\001 "
  "\003(\0132!.Nrmk.IndyFramework.DigitalSignal\0221"
  "\n\006end_di\030\002 \003(\0132!.Nrmk.IndyFramework.Digi"
  "talSignal\"\226\003\n\017MotionCondition\022D\n\ttype_co"
  "nd\030\001 \001(\01621.Nrmk.IndyFramework.MotionCond"
  "ition.ConditionType\022D\n\ntype_react\030\002 \001(\0162"
  "0.Nrmk.IndyFramework.MotionCondition.Rea"
  "ctionType\022\022\n\nconst_cond\030\003 \001(\010\0220\n\007io_cond"
  "\030\004 \001(\0132\037.Nrmk.IndyFramework.IOCondition\022"
  "7\n\010var_cond\030\005 \001(\0132%.Nrmk.IndyFramework.V"
  "ariableCondition\":\n\rConditionType\022\016\n\nCON"
  "ST_COND\020\000\022\013\n\007IO_COND\020\001\022\014\n\010VAR_COND\020\002\"<\n\014"
  "ReactionType\022\r\n\tNONE_COND\020\000\022\r\n\tSTOP_COND"
  "\020\001\022\016\n\nPAUSE_COND\020\002\"\213\001\n\014BlendingType\0223\n\004t"
  "ype\030\001 \001(\0162%.Nrmk.IndyFramework.BlendingT"
  "ype.Type\022\027\n\017blending_radius\030\002 \001(\002\"-\n\004Typ"
  "e\022\010\n\004NONE\020\000\022\014\n\010OVERRIDE\020\001\022\r\n\tDUPLICATE\020\002"
  "\"b\n\007TargetJ\022\017\n\007j_start\030\001 \003(\002\022\020\n\010j_target"
  "\030\002 \003(\002\0224\n\tbase_type\030\003 \001(\0162!.Nrmk.IndyFra"
  "mework.JointBaseType\"\345\001\n\010MoveJReq\022+\n\006tar"
  "get\030\001 \001(\0132\033.Nrmk.IndyFramework.TargetJ\0222"
  "\n\010blending\030\002 \001(\0132 .Nrmk.IndyFramework.Bl"
  "endingType\022\021\n\tvel_ratio\030\003 \001(\002\022\021\n\tacc_rat"
  "io\030\004 \001(\002\022;\n\016post_condition\030\024 \001(\0132#.Nrmk."
  "IndyFramework.MotionCondition\022\025\n\rteachin"
  "g_mode\030\036 \001(\010\"\351\001\n\014MoveJCondReq\022+\n\006target\030"
  "\001 \001(\0132\033.Nrmk.IndyFramework.TargetJ\0222\n\010bl"
  "ending\030\002 \001(\0132 .Nrmk.IndyFramework.Blendi"
  "ngType\022\021\n\tvel_ratio\030\003 \001(\002\022\021\n\tacc_ratio\030\004"
  " \001(\002\022;\n\016post_condition\030\024 \001(\0132#.Nrmk.Indy"
  "Framework.MotionCondition\022\025\n\rteaching_mo"
  "de\030\036 \001(\010\"\267\001\n\tMoveJTReq\022+\n\006target\030\001 \001(\0132\033"
  ".Nrmk.IndyFramework.TargetJ\0222\n\010blending\030"
  "\002 \001(\0132 .Nrmk.IndyFramework.BlendingType\022"
  "\014\n\004time\030\003 \001(\002\022;\n\016post_condition\030\024 \001(\0132#."
  "Nrmk.IndyFramework.MotionCondition\"a\n\007Ta"
  "rgetP\022\017\n\007t_start\030\001 \003(\002\022\020\n\010t_target\030\002 \003(\002"
  "\0223\n\tbase_type\030\003 \001(\0162 .Nrmk.IndyFramework"
  ".TaskBaseType\"o\n\007TargetC\022\017\n\007t_start\030\001 \003("
  "\002\022\016\n\006t_pos0\030\002 \003(\002\022\016\n\006t_pos1\030\003 \003(\002\0223\n\tbas"
  "e_type\030\004 \001(\0162 .Nrmk.IndyFramework.TaskBa"
  "seType\"\266\002\n\010MoveLReq\022+\n\006target\030\001 \001(\0132\033.Nr"
  "mk.IndyFramework.TargetP\0222\n\010blending\030\002 \001"
  "(\0132 .Nrmk.IndyFramework.BlendingType\022\021\n\t"
  "vel_ratio\030\003 \001(\002\022\021\n\tacc_ratio\030\004 \001(\002\0226\n\010ve"
  "l_type\030\005 \001(\0162$.Nrmk.IndyFramework.Veloci"
  "tyModeType\022;\n\016post_condition\030\024 \001(\0132#.Nrm"
  "k.IndyFramework.MotionCondition\022\025\n\rteach"
  "ing_mode\030\036 \001(\010\022\027\n\017bypass_singular\030( \001(\010\""
  "\267\001\n\tMoveLTReq\022+\n\006target\030\001 \001(\0132\033.Nrmk.Ind"
  "yFramework.TargetP\0222\n\010blending\030\002 \001(\0132 .N"
  "rmk.IndyFramework.BlendingType\022\014\n\004time\030\003"
  " \001(\002\022;\n\016post_condition\030\024 \001(\0132#.Nrmk.Indy"
  "Framework.MotionCondition\"\216\001\n\013MoveAxisRe"
  "q\022\020\n\010start_mm\030\001 \003(\002\022\021\n\ttarget_mm\030\002 \003(\002\022\026"
  "\n\016vel_percentage\030\003 \001(\002\022\026\n\016acc_percentage"
  "\030\004 \001(\002\022\023\n\013is_absolute\030\005 \001(\010\022\025\n\rteaching_"
  "mode\030\n \001(\010\"\277\003\n\010MoveCReq\022+\n\006target\030\001 \001(\0132"
  "\033.Nrmk.IndyFramework.TargetC\0222\n\010blending"
  "\030\002 \001(\0132 .Nrmk.IndyFramework.BlendingType"
  "\022\r\n\005angle\030\003 \001(\002\022=\n\014setting_type\030\n \001(\0162\'."
  "Nrmk.IndyFramework.CircularSettingType\0229"
  "\n\tmove_type\030\013 \001(\0162&.Nrmk.IndyFramework.C"
  "ircularMovingType\022\021\n\tvel_ratio\030\024 \001(\002\022\021\n\t"
  "acc_ratio\030\025 \001(\002\0226\n\010vel_type\030\026 \001(\0162$.Nrmk"
  ".IndyFramework.VelocityModeType\022;\n\016post_"
  "condition\030\031 \001(\0132#.Nrmk.IndyFramework.Mot"
  "ionCondition\022\025\n\rteaching_mode\030\036 \001(\010\022\027\n\017b"
  "ypass_singular\030( \001(\010\"\300\002\n\tMoveCTReq\022+\n\006ta"
  "rget\030\001 \001(\0132\033.Nrmk.IndyFramework.TargetC\022"
  "2\n\010blending\030\002 \001(\0132 .Nrmk.IndyFramework.B"
  "lendingType\022\r\n\005angle\030\003 \001(\002\022=\n\014setting_ty"
  "pe\030\n \001(\0162\'.Nrmk.IndyFramework.CircularSe"
  "ttingType\0229\n\tmove_type\030\013 \001(\0162&.Nrmk.Indy"
  "Framework.CircularMovingType\022\014\n\004time\030\024 \001"
  "(\002\022;\n\016post_condition\030\031 \001(\0132#.Nrmk.IndyFr"
  "amework.MotionCondition\"\235\001\n\020MoveJointTra"
  "jReq\022*\n\006q_list\030\001 \003(\0132\032.Nrmk.IndyFramewor"
  "k.Vector\022-\n\tqdot_list\030\002 \003(\0132\032.Nrmk.IndyF"
  "ramework.Vector\022.\n\nqddot_list\030\003 \003(\0132\032.Nr"
  "mk.IndyFramework.Vector\"\234\001\n\017MoveTaskTraj"
  "Req\022*\n\006p_list\030\001 \003(\0132\032.Nrmk.IndyFramework"
  ".Vector\022-\n\tpdot_list\030\002 \003(\0132\032.Nrmk.IndyFr"
  "amework.Vector\022.\n\npddot_list\030\003 \003(\0132\032.Nrm"
  "k.IndyFramework.Vector\"\221\001\n\017MoveConveyorR"
  "eq\022\025\n\rteaching_mode\030\001 \001(\010\022\027\n\017bypass_sing"
  "ular\030\002 \001(\010\022\021\n\tacc_ratio\030\003 \001(\002\022;\n\016post_co"
  "ndition\030\n \001(\0132#.Nrmk.IndyFramework.Motio"
  "nCondition\"\336\003\n\tWaitIOReq\0222\n\007di_list\030\001 \003("
  "\0132!.Nrmk.IndyFramework.DigitalSignal\0222\n\007"
  "do_list\030\002 \003(\0132!.Nrmk.IndyFramework.Digit"
  "alSignal\0226\n\013end_di_list\030\003 \003(\0132!.Nrmk.Ind"
  "yFramework.DigitalSignal\0226\n\013end_do_list\030"
  "\004 \003(\0132!.Nrmk.IndyFramework.DigitalSignal"
  "\022\023\n\013conjunction\030\005 \001(\005\0226\n\013set_do_list\030\006 \003"
  "(\0132!.Nrmk.IndyFramework.DigitalSignal\022:\n"
  "\017set_end_do_list\030\007 \003(\0132!.Nrmk.IndyFramew"
  "ork.DigitalSignal\0225\n\013set_ao_list\030\010 \003(\0132 "
  ".Nrmk.IndyFramework.AnalogSignal\0229\n\017set_"
  "end_ao_list\030\t \003(\0132 .Nrmk.IndyFramework.A"
  "nalogSignal\"\201\002\n\013WaitTimeReq\022\014\n\004time\030\001 \001("
  "\002\0226\n\013set_do_list\030\002 \003(\0132!.Nrmk.IndyFramew"
  "ork.DigitalSignal\022:\n\017set_end_do_list\030\003 \003"
  "(\0132!.Nrmk.IndyFramework.DigitalSignal\0225\n"
  "\013set_ao_list\030\004 \003(\0132 .Nrmk.IndyFramework."
  "AnalogSignal\0229\n\017set_end_ao_list\030\005 \003(\0132 ."
  "Nrmk.IndyFramework.AnalogSignal\"\211\002\n\017Wait"
  "ProgressReq\022\020\n\010progress\030\001 \001(\005\0226\n\013set_do_"
  "list\030\002 \003(\0132!.Nrmk.IndyFramework.DigitalS"
  "ignal\022:\n\017set_end_do_list\030\003 \003(\0132!.Nrmk.In"
  "dyFramework.DigitalSignal\0225\n\013set_ao_list"
  "\030\004 \003(\0132 .Nrmk.IndyFramework.AnalogSignal"
  "\0229\n\017set_end_ao_list\030\005 \003(\0132 .Nrmk.IndyFra"
  "mework.AnalogSignal\"\256\002\n\013WaitTrajReq\0229\n\016t"
  "raj_condition\030\001 \001(\0162!.Nrmk.IndyFramework"
  ".TrajCondition\0226\n\013set_do_list\030\002 \003(\0132!.Nr"
  "mk.IndyFramework.DigitalSignal\022:\n\017set_en"
  "d_do_list\030\003 \003(\0132!.Nrmk.IndyFramework.Dig"
  "italSignal\0225\n\013set_ao_list\030\004 \003(\0132 .Nrmk.I"
  "ndyFramework.AnalogSignal\0229\n\017set_end_ao_"
  "list\030\005 \003(\0132 .Nrmk.IndyFramework.AnalogSi"
  "gnal\"\205\002\n\rWaitRadiusReq\022\016\n\006radius\030\001 \001(\005\0226"
  "\n\013set_do_list\030\002 \003(\0132!.Nrmk.IndyFramework"
  ".DigitalSignal\022:\n\017set_end_do_list\030\003 \003(\0132"
  "!.Nrmk.IndyFramework.DigitalSignal\0225\n\013se"
  "t_ao_list\030\004 \003(\0132 .Nrmk.IndyFramework.Ana"
  "logSignal\0229\n\017set_end_ao_list\030\005 \003(\0132 .Nrm"
  "k.IndyFramework.AnalogSignal\".\n\007Program\022"
  "\021\n\tprog_name\030\001 \001(\t\022\020\n\010prog_idx\030\002 \001(\005\"\303\001\n"
  "\rTuningProgram\022,\n\007program\030\001 \001(\0132\033.Nrmk.I"
  "ndyFramework.Program\0225\n\014tuning_space\030\002 \001"
  "(\0162\037.Nrmk.IndyFramework.TuningSpace\0226\n\tp"
  "recision\030\003 \001(\0162#.Nrmk.IndyFramework.Tuni"
  "ngPrecision\022\025\n\rvel_level_max\030\004 \001(\r\"<\n\013Pr"
  "ogramInfo\022\014\n\004path\030\001 \001(\t\022\014\n\004size\030\002 \001(\004\022\021\n"
  "\ttimestamp\030\003 \001(\t\"I\n\010Variable\022\014\n\004name\030\001 \001"
  "(\t\022\014\n\004addr\030\002 \001(\005\022\014\n\004type\030\003 \001(\t\022\023\n\013in_wat"
  "ching\030\004 \001(\010\"*\n\013IntVariable\022\014\n\004addr\030\001 \001(\005"
  "\022\r\n\005value\030\002 \001(\003\"\317\001\n\016ModbusVariable\022\014\n\004na"
  "me\030\001 \001(\t\022\014\n\004addr\030\002 \001(\005\022\r\n\005value\030\003 \001(\005\022B\n"
  "\013signal_type\030\004 \001(\0162-.Nrmk.IndyFramework."
  "ModbusVariable.SignalType\"N\n\nSignalType\022"
  "\014\n\010ReadCoil\020\000\022\r\n\tWriteCoil\020\001\022\020\n\014ReadRegi"
  "ster\020\002\022\021\n\rWriteRegister\020\003\"+\n\014BoolVariabl"
  "e\022\014\n\004addr\030\001 \001(\005\022\r\n\005value\030\002 \001(\010\",\n\rFloatV"
  "ariable\022\014\n\004addr\030\001 \001(\005\022\r\n\005value\030\002 \001(\002\"*\n\014"
  "JPosVariable\022\014\n\004addr\030\001 \001(\005\022\014\n\004jpos\030\002 \003(\002"
  "\"*\n\014TPosVariable\022\014\n\004addr\030\001 \001(\005\022\014\n\004tpos\030\002"
  " \003(\002\"x\n\014ModbusServer\022\023\n\013server_name\030\001 \001("
  "\t\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\0229\n\rvariable_"
  "list\030\004 \003(\0132\".Nrmk.IndyFramework.ModbusVa"
  "riable\"P\n\022ModbusVariableList\022:\n\020modbus_v"
  "ariables\030\001 \003(\0132 .Nrmk.IndyFramework.Modb"
  "usServer\":\n\007AllVars\022/\n\tvariables\030\001 \003(\0132\034"
  ".Nrmk.IndyFramework.Variable\"=\n\007IntVars\022"
  "2\n\tvariables\030\001 \003(\0132\037.Nrmk.IndyFramework."
  "IntVariable\"C\n\nModbusVars\0225\n\tvariables\030\001"
  " \003(\0132\".Nrmk.IndyFramework.ModbusVariable"
  "\"\?\n\010BoolVars\0223\n\tvariables\030\001 \003(\0132 .Nrmk.I"
  "ndyFramework.BoolVariable\"A\n\tFloatVars\0224"
  "\n\tvariables\030\001 \003(\0132!.Nrmk.IndyFramework.F"
  "loatVariable\"\?\n\010JPosVars\0223\n\tvariables\030\001 "
  "\003(\0132 .Nrmk.IndyFramework.JPosVariable\"\?\n"
  "\010TPosVars\0223\n\tvariables\030\001 \003(\0132 .Nrmk.Indy"
  "Framework.TPosVariable\"7\n\024InverseKinemat"
  "icsReq\022\014\n\004tpos\030\001 \003(\002\022\021\n\tinit_jpos\030\002 \003(\002\""
  "T\n\024InverseKinematicsRes\022\014\n\004jpos\030\001 \003(\002\022.\n"
  "\010response\030d \001(\0132\034.Nrmk.IndyFramework.Res"
  "ponse\"$\n\024ForwardKinematicsReq\022\014\n\004jpos\030\001 "
  "\003(\002\"T\n\024ForwardKinematicsRes\022\014\n\004tpos\030\001 \003("
  "\002\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFramework"
  ".Response\"c\n\033CheckAproachRetractValidReq"
  "\022\014\n\004tpos\030\001 \003(\002\022\021\n\tinit_jpos\030\002 \003(\002\022\020\n\010pre"
  "_tpos\030\003 \003(\002\022\021\n\tpost_tpos\030\004 \003(\002\"\233\001\n\033Check"
  "AproachRetractValidRes\022\020\n\010is_valid\030\001 \001(\010"
  "\022\017\n\007tar_pos\030\002 \003(\002\022\024\n\014approach_pos\030\003 \003(\002\022"
  "\023\n\013retract_pos\030\004 \003(\002\022.\n\010response\030d \001(\0132\034"
  ".Nrmk.IndyFramework.Response\"\217\001\n\025GetPall"
  "etPointListReq\022\014\n\004tpos\030\001 \003(\002\022\014\n\004jpos\030\002 \003"
  "(\002\022\020\n\010pre_tpos\030\003 \003(\002\022\021\n\tpost_tpos\030\004 \003(\002\022"
  "\026\n\016pallet_pattern\030\005 \001(\005\022\r\n\005width\030\006 \001(\005\022\016"
  "\n\006height\030\007 \001(\005\"[\n\013PalletPoint\022\017\n\007tar_pos"
  "\030\001 \003(\002\022\024\n\014approach_pos\030\002 \003(\002\022\023\n\013retract_"
  "pos\030\003 \003(\002\022\020\n\010tar_jpos\030\004 \003(\002\"\177\n\025GetPallet"
  "PointListRes\0226\n\rpallet_points\030\001 \003(\0132\037.Nr"
  "mk.IndyFramework.PalletPoint\022.\n\010response"
  "\030d \001(\0132\034.Nrmk.IndyFramework.Response\"s\n\030"
  "CalculateRelativePoseReq\022\021\n\tstart_pos\030\001 "
  "\003(\002\022\017\n\007end_pos\030\002 \003(\002\0223\n\tbase_type\030\003 \001(\0162"
  " .Nrmk.IndyFramework.TaskBaseType\"`\n\030Cal"
  "culateRelativePoseRes\022\024\n\014relative_pos\030\001 "
  "\003(\002\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFramewo"
  "rk.Response\"|\n\032CalculateCurrentPoseRelRe"
  "q\022\023\n\013current_pos\030\001 \003(\002\022\024\n\014relative_pos\030\002"
  " \003(\002\0223\n\tbase_type\030\003 \001(\0162 .Nrmk.IndyFrame"
  "work.TaskBaseType\"d\n\032CalculateCurrentPos"
  "eRelRes\022\026\n\016calculated_pos\030\001 \003(\002\022.\n\010respo"
  "nse\030d \001(\0132\034.Nrmk.IndyFramework.Response\""
  "\262\001\n\014TeleOpDevice\022\014\n\004name\030\001 \001(\t\022\?\n\004type\030\002"
  " \001(\01621.Nrmk.IndyFramework.TeleOpDevice.T"
  "eleOpDeviceType\022\n\n\002ip\030\003 \001(\t\022\014\n\004port\030\004 \001("
  "\r\022\021\n\tconnected\030\005 \001(\010\"&\n\020TeleOpDeviceType"
  "\022\010\n\004NONE\020\000\022\010\n\004VIVE\020\001\"i\n\013TeleOpState\022*\n\004m"
  "ode\030\001 \001(\0162\034.Nrmk.IndyFramework.TeleMode\022"
  ".\n\006method\030\002 \001(\0162\036.Nrmk.IndyFramework.Tel"
  "eMethod\"E\n\005TeleP\022\014\n\004tpos\030\001 \003(\002\022.\n\010respon"
  "se\030d \001(\0132\034.Nrmk.IndyFramework.Response\"O"
  "\n\016TeleOpFileList\022\r\n\005files\030\001 \003(\t\022.\n\010respo"
  "nse\030d \001(\0132\034.Nrmk.IndyFramework.Response\""
  "\033\n\013TeleFileReq\022\014\n\004name\030\001 \001(\t\"\034\n\014TelePlay"
  "Rate\022\014\n\004rate\030\001 \001(\002\"r\n\014MoveTeleJReq\022\014\n\004jp"
  "os\030\001 \003(\002\022\021\n\tvel_ratio\030\002 \001(\002\022\021\n\tacc_ratio"
  "\030\003 \001(\002\022.\n\006method\030\n \001(\0162\036.Nrmk.IndyFramew"
  "ork.TeleMethod\"r\n\014MoveTeleLReq\022\014\n\004tpos\030\001"
  " \003(\002\022\021\n\tvel_ratio\030\002 \001(\002\022\021\n\tacc_ratio\030\003 \001"
  "(\002\022.\n\006method\030\n \001(\0162\036.Nrmk.IndyFramework."
  "TeleMethod\"\310\002\n\tMoveLFReq\022+\n\006target\030\001 \001(\013"
  "2\033.Nrmk.IndyFramework.TargetP\0222\n\010blendin"
  "g\030\002 \001(\0132 .Nrmk.IndyFramework.BlendingTyp"
  "e\022\021\n\tvel_ratio\030\003 \001(\002\022\021\n\tacc_ratio\030\004 \001(\002\022"
  "6\n\010vel_type\030\005 \001(\0162$.Nrmk.IndyFramework.V"
  "elocityModeType\022\021\n\tdes_force\030\006 \003(\002\022\025\n\ren"
  "abled_force\030\007 \003(\010\022;\n\016post_condition\030\024 \001("
  "\0132#.Nrmk.IndyFramework.MotionCondition\022\025"
  "\n\rteaching_mode\030\036 \001(\010\"\030\n\tMoveFLRes\022\013\n\003ms"
  "g\030d \001(\t\"\243\001\n\027TransformedFTSensorData\022\r\n\005f"
  "t_Fx\030\001 \001(\002\022\r\n\005ft_Fy\030\002 \001(\002\022\r\n\005ft_Fz\030\003 \001(\002"
  "\022\r\n\005ft_Tx\030\004 \001(\002\022\r\n\005ft_Ty\030\005 \001(\002\022\r\n\005ft_Tz\030"
  "\006 \001(\002\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFrame"
  "work.Response*7\n\rJointBaseType\022\022\n\016ABSOLU"
  "TE_JOINT\020\000\022\022\n\016RELATIVE_JOINT\020\001*B\n\014TaskBa"
  "seType\022\021\n\rABSOLUTE_TASK\020\000\022\021\n\rRELATIVE_TA"
  "SK\020\001\022\014\n\010TCP_TASK\020\002*J\n\020VelocityModeType\022\021"
  "\n\rTIME_ORIENTED\020\000\022\021\n\rDISP_ORIENTED\020\001\022\020\n\014"
  "ROT_ORIENTED\020\002*5\n\023CircularSettingType\022\r\n"
  "\tPOINT_SET\020\000\022\017\n\013CENTER_AXIS\020\001*:\n\022Circula"
  "rMovingType\022\014\n\010CONSTANT\020\000\022\n\n\006RADIAL\020\001\022\n\n"
  "\006SMOOTH\020\002*j\n\010TeleMode\022\021\n\rTELE_INACTIVE\020\000"
  "\022\016\n\nTELE_CALIB\020\001\022\017\n\013TELE_RECORD\020\002\022\r\n\tTEL"
  "E_PLAY\020\003\022\014\n\010TELE_RAW\020\n\022\r\n\tTELE_MOVE\020\024*\233\001"
  "\n\nTeleMethod\022\026\n\022TELE_TASK_ABSOLUTE\020\000\022\026\n\022"
  "TELE_TASK_RELATIVE\020\001\022\021\n\rTELE_TASK_TCP\020\002\022"
  "\027\n\023TELE_JOINT_ABSOLUTE\020\n\022\027\n\023TELE_JOINT_R"
  "ELATIVE\020\013\022\030\n\024TELE_RECORD_ABSOLUTE\020\024b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fmsgs_2eproto_deps[2] = {
  &::descriptor_table_common_5fmsgs_2eproto,
  &::descriptor_table_device_5fmsgs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_control_5fmsgs_2eproto_sccs[69] = {
  &scc_info_AllVars_control_5fmsgs_2eproto.base,
  &scc_info_BlendingType_control_5fmsgs_2eproto.base,
  &scc_info_BoolVariable_control_5fmsgs_2eproto.base,
  &scc_info_BoolVars_control_5fmsgs_2eproto.base,
  &scc_info_CalculateCurrentPoseRelReq_control_5fmsgs_2eproto.base,
  &scc_info_CalculateCurrentPoseRelRes_control_5fmsgs_2eproto.base,
  &scc_info_CalculateRelativePoseReq_control_5fmsgs_2eproto.base,
  &scc_info_CalculateRelativePoseRes_control_5fmsgs_2eproto.base,
  &scc_info_CheckAproachRetractValidReq_control_5fmsgs_2eproto.base,
  &scc_info_CheckAproachRetractValidRes_control_5fmsgs_2eproto.base,
  &scc_info_ControlInfo_control_5fmsgs_2eproto.base,
  &scc_info_FloatVariable_control_5fmsgs_2eproto.base,
  &scc_info_FloatVars_control_5fmsgs_2eproto.base,
  &scc_info_ForwardKinematicsReq_control_5fmsgs_2eproto.base,
  &scc_info_ForwardKinematicsRes_control_5fmsgs_2eproto.base,
  &scc_info_GetPalletPointListReq_control_5fmsgs_2eproto.base,
  &scc_info_GetPalletPointListRes_control_5fmsgs_2eproto.base,
  &scc_info_IOCondition_control_5fmsgs_2eproto.base,
  &scc_info_IntVariable_control_5fmsgs_2eproto.base,
  &scc_info_IntVars_control_5fmsgs_2eproto.base,
  &scc_info_InverseKinematicsReq_control_5fmsgs_2eproto.base,
  &scc_info_InverseKinematicsRes_control_5fmsgs_2eproto.base,
  &scc_info_JPosVariable_control_5fmsgs_2eproto.base,
  &scc_info_JPosVars_control_5fmsgs_2eproto.base,
  &scc_info_ModbusServer_control_5fmsgs_2eproto.base,
  &scc_info_ModbusVariable_control_5fmsgs_2eproto.base,
  &scc_info_ModbusVariableList_control_5fmsgs_2eproto.base,
  &scc_info_ModbusVars_control_5fmsgs_2eproto.base,
  &scc_info_MotionCondition_control_5fmsgs_2eproto.base,
  &scc_info_MoveAxisReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveCReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveCTReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveConveyorReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveFLRes_control_5fmsgs_2eproto.base,
  &scc_info_MoveJCondReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveJReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveJTReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveJointTrajReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveLFReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveLReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveLTReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveTaskTrajReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveTeleJReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveTeleLReq_control_5fmsgs_2eproto.base,
  &scc_info_PalletPoint_control_5fmsgs_2eproto.base,
  &scc_info_Program_control_5fmsgs_2eproto.base,
  &scc_info_ProgramInfo_control_5fmsgs_2eproto.base,
  &scc_info_SDKLicenseInfo_control_5fmsgs_2eproto.base,
  &scc_info_SDKLicenseResp_control_5fmsgs_2eproto.base,
  &scc_info_TPosVariable_control_5fmsgs_2eproto.base,
  &scc_info_TPosVars_control_5fmsgs_2eproto.base,
  &scc_info_TargetC_control_5fmsgs_2eproto.base,
  &scc_info_TargetJ_control_5fmsgs_2eproto.base,
  &scc_info_TargetP_control_5fmsgs_2eproto.base,
  &scc_info_TeleFileReq_control_5fmsgs_2eproto.base,
  &scc_info_TeleOpDevice_control_5fmsgs_2eproto.base,
  &scc_info_TeleOpFileList_control_5fmsgs_2eproto.base,
  &scc_info_TeleOpState_control_5fmsgs_2eproto.base,
  &scc_info_TeleP_control_5fmsgs_2eproto.base,
  &scc_info_TelePlayRate_control_5fmsgs_2eproto.base,
  &scc_info_TransformedFTSensorData_control_5fmsgs_2eproto.base,
  &scc_info_TuningProgram_control_5fmsgs_2eproto.base,
  &scc_info_Variable_control_5fmsgs_2eproto.base,
  &scc_info_VariableCondition_control_5fmsgs_2eproto.base,
  &scc_info_WaitIOReq_control_5fmsgs_2eproto.base,
  &scc_info_WaitProgressReq_control_5fmsgs_2eproto.base,
  &scc_info_WaitRadiusReq_control_5fmsgs_2eproto.base,
  &scc_info_WaitTimeReq_control_5fmsgs_2eproto.base,
  &scc_info_WaitTrajReq_control_5fmsgs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_5fmsgs_2eproto_once;
static bool descriptor_table_control_5fmsgs_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fmsgs_2eproto = {
  &descriptor_table_control_5fmsgs_2eproto_initialized, descriptor_table_protodef_control_5fmsgs_2eproto, "control_msgs.proto", 10403,
  &descriptor_table_control_5fmsgs_2eproto_once, descriptor_table_control_5fmsgs_2eproto_sccs, descriptor_table_control_5fmsgs_2eproto_deps, 69, 2,
  schemas, file_default_instances, TableStruct_control_5fmsgs_2eproto::offsets,
  file_level_metadata_control_5fmsgs_2eproto, 69, file_level_enum_descriptors_control_5fmsgs_2eproto, file_level_service_descriptors_control_5fmsgs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_5fmsgs_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_control_5fmsgs_2eproto), true);
namespace Nrmk {
namespace IndyFramework {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionCondition_ConditionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[0];
}
bool MotionCondition_ConditionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MotionCondition_ConditionType MotionCondition::CONST_COND;
constexpr MotionCondition_ConditionType MotionCondition::IO_COND;
constexpr MotionCondition_ConditionType MotionCondition::VAR_COND;
constexpr MotionCondition_ConditionType MotionCondition::ConditionType_MIN;
constexpr MotionCondition_ConditionType MotionCondition::ConditionType_MAX;
constexpr int MotionCondition::ConditionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionCondition_ReactionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[1];
}
bool MotionCondition_ReactionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MotionCondition_ReactionType MotionCondition::NONE_COND;
constexpr MotionCondition_ReactionType MotionCondition::STOP_COND;
constexpr MotionCondition_ReactionType MotionCondition::PAUSE_COND;
constexpr MotionCondition_ReactionType MotionCondition::ReactionType_MIN;
constexpr MotionCondition_ReactionType MotionCondition::ReactionType_MAX;
constexpr int MotionCondition::ReactionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlendingType_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[2];
}
bool BlendingType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BlendingType_Type BlendingType::NONE;
constexpr BlendingType_Type BlendingType::OVERRIDE;
constexpr BlendingType_Type BlendingType::DUPLICATE;
constexpr BlendingType_Type BlendingType::Type_MIN;
constexpr BlendingType_Type BlendingType::Type_MAX;
constexpr int BlendingType::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModbusVariable_SignalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[3];
}
bool ModbusVariable_SignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModbusVariable_SignalType ModbusVariable::ReadCoil;
constexpr ModbusVariable_SignalType ModbusVariable::WriteCoil;
constexpr ModbusVariable_SignalType ModbusVariable::ReadRegister;
constexpr ModbusVariable_SignalType ModbusVariable::WriteRegister;
constexpr ModbusVariable_SignalType ModbusVariable::SignalType_MIN;
constexpr ModbusVariable_SignalType ModbusVariable::SignalType_MAX;
constexpr int ModbusVariable::SignalType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeleOpDevice_TeleOpDeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[4];
}
bool TeleOpDevice_TeleOpDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TeleOpDevice_TeleOpDeviceType TeleOpDevice::NONE;
constexpr TeleOpDevice_TeleOpDeviceType TeleOpDevice::VIVE;
constexpr TeleOpDevice_TeleOpDeviceType TeleOpDevice::TeleOpDeviceType_MIN;
constexpr TeleOpDevice_TeleOpDeviceType TeleOpDevice::TeleOpDeviceType_MAX;
constexpr int TeleOpDevice::TeleOpDeviceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JointBaseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[5];
}
bool JointBaseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskBaseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[6];
}
bool TaskBaseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VelocityModeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[7];
}
bool VelocityModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CircularSettingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[8];
}
bool CircularSettingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CircularMovingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[9];
}
bool CircularMovingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeleMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[10];
}
bool TeleMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeleMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_5fmsgs_2eproto);
  return file_level_enum_descriptors_control_5fmsgs_2eproto[11];
}
bool TeleMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ControlInfo::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_ControlInfo_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class ControlInfo::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const ControlInfo* msg);
};

const ::Nrmk::IndyFramework::Response&
ControlInfo::HasBitSetters::response(const ControlInfo* msg) {
  return *msg->response_;
}
void ControlInfo::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlInfo::kControlVersionFieldNumber;
const int ControlInfo::kRobotModelFieldNumber;
const int ControlInfo::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlInfo::ControlInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.ControlInfo)
}
ControlInfo::ControlInfo(const ControlInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  control_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.control_version().size() > 0) {
    control_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.control_version_);
  }
  robot_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.robot_model().size() > 0) {
    robot_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.robot_model_);
  }
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ControlInfo)
}

void ControlInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlInfo_control_5fmsgs_2eproto.base);
  control_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  robot_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_ = nullptr;
}

ControlInfo::~ControlInfo() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ControlInfo)
  SharedDtor();
}

void ControlInfo::SharedDtor() {
  control_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  robot_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_;
}

void ControlInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlInfo& ControlInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlInfo_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ControlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ControlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  robot_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ControlInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string control_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_control_version(), ptr, ctx, "Nrmk.IndyFramework.ControlInfo.control_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string robot_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_robot_model(), ptr, ctx, "Nrmk.IndyFramework.ControlInfo.robot_model");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ControlInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.ControlInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string control_version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_control_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->control_version().data(), static_cast<int>(this->control_version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.ControlInfo.control_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string robot_model = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_model()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->robot_model().data(), static_cast<int>(this->robot_model().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.ControlInfo.robot_model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.ControlInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.ControlInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ControlInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.ControlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string control_version = 1;
  if (this->control_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->control_version().data(), static_cast<int>(this->control_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ControlInfo.control_version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->control_version(), output);
  }

  // string robot_model = 2;
  if (this->robot_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->robot_model().data(), static_cast<int>(this->robot_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ControlInfo.robot_model");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->robot_model(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.ControlInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ControlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string control_version = 1;
  if (this->control_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->control_version().data(), static_cast<int>(this->control_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ControlInfo.control_version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->control_version(), target);
  }

  // string robot_model = 2;
  if (this->robot_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->robot_model().data(), static_cast<int>(this->robot_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ControlInfo.robot_model");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->robot_model(), target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ControlInfo)
  return target;
}

size_t ControlInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ControlInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string control_version = 1;
  if (this->control_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->control_version());
  }

  // string robot_model = 2;
  if (this->robot_model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->robot_model());
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.ControlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.ControlInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.ControlInfo)
    MergeFrom(*source);
  }
}

void ControlInfo::MergeFrom(const ControlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ControlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.control_version().size() > 0) {

    control_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.control_version_);
  }
  if (from.robot_model().size() > 0) {

    robot_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.robot_model_);
  }
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
}

void ControlInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.ControlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlInfo::CopyFrom(const ControlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ControlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlInfo::IsInitialized() const {
  return true;
}

void ControlInfo::Swap(ControlInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlInfo::InternalSwap(ControlInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  control_version_.Swap(&other->control_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  robot_model_.Swap(&other->robot_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SDKLicenseInfo::InitAsDefaultInstance() {
}
class SDKLicenseInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SDKLicenseInfo::kLicenseKeyFieldNumber;
const int SDKLicenseInfo::kExpireDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SDKLicenseInfo::SDKLicenseInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.SDKLicenseInfo)
}
SDKLicenseInfo::SDKLicenseInfo(const SDKLicenseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  license_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.license_key().size() > 0) {
    license_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.license_key_);
  }
  expire_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.expire_date().size() > 0) {
    expire_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expire_date_);
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.SDKLicenseInfo)
}

void SDKLicenseInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SDKLicenseInfo_control_5fmsgs_2eproto.base);
  license_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SDKLicenseInfo::~SDKLicenseInfo() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.SDKLicenseInfo)
  SharedDtor();
}

void SDKLicenseInfo::SharedDtor() {
  license_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SDKLicenseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SDKLicenseInfo& SDKLicenseInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SDKLicenseInfo_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SDKLicenseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.SDKLicenseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  license_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SDKLicenseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string license_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_license_key(), ptr, ctx, "Nrmk.IndyFramework.SDKLicenseInfo.license_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expire_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_expire_date(), ptr, ctx, "Nrmk.IndyFramework.SDKLicenseInfo.expire_date");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SDKLicenseInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.SDKLicenseInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string license_key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_license_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->license_key().data(), static_cast<int>(this->license_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.SDKLicenseInfo.license_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string expire_date = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_expire_date()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->expire_date().data(), static_cast<int>(this->expire_date().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.SDKLicenseInfo.expire_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.SDKLicenseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.SDKLicenseInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SDKLicenseInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.SDKLicenseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string license_key = 1;
  if (this->license_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->license_key().data(), static_cast<int>(this->license_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.SDKLicenseInfo.license_key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->license_key(), output);
  }

  // string expire_date = 2;
  if (this->expire_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->expire_date().data(), static_cast<int>(this->expire_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.SDKLicenseInfo.expire_date");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->expire_date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.SDKLicenseInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* SDKLicenseInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.SDKLicenseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string license_key = 1;
  if (this->license_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->license_key().data(), static_cast<int>(this->license_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.SDKLicenseInfo.license_key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->license_key(), target);
  }

  // string expire_date = 2;
  if (this->expire_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->expire_date().data(), static_cast<int>(this->expire_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.SDKLicenseInfo.expire_date");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->expire_date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.SDKLicenseInfo)
  return target;
}

size_t SDKLicenseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.SDKLicenseInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string license_key = 1;
  if (this->license_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->license_key());
  }

  // string expire_date = 2;
  if (this->expire_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->expire_date());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDKLicenseInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.SDKLicenseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SDKLicenseInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SDKLicenseInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.SDKLicenseInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.SDKLicenseInfo)
    MergeFrom(*source);
  }
}

void SDKLicenseInfo::MergeFrom(const SDKLicenseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.SDKLicenseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.license_key().size() > 0) {

    license_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.license_key_);
  }
  if (from.expire_date().size() > 0) {

    expire_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expire_date_);
  }
}

void SDKLicenseInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.SDKLicenseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDKLicenseInfo::CopyFrom(const SDKLicenseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.SDKLicenseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKLicenseInfo::IsInitialized() const {
  return true;
}

void SDKLicenseInfo::Swap(SDKLicenseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SDKLicenseInfo::InternalSwap(SDKLicenseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  license_key_.Swap(&other->license_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expire_date_.Swap(&other->expire_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKLicenseInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SDKLicenseResp::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_SDKLicenseResp_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class SDKLicenseResp::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const SDKLicenseResp* msg);
};

const ::Nrmk::IndyFramework::Response&
SDKLicenseResp::HasBitSetters::response(const SDKLicenseResp* msg) {
  return *msg->response_;
}
void SDKLicenseResp::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SDKLicenseResp::kActivatedFieldNumber;
const int SDKLicenseResp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SDKLicenseResp::SDKLicenseResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.SDKLicenseResp)
}
SDKLicenseResp::SDKLicenseResp(const SDKLicenseResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  activated_ = from.activated_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.SDKLicenseResp)
}

void SDKLicenseResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SDKLicenseResp_control_5fmsgs_2eproto.base);
  ::memset(&response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activated_) -
      reinterpret_cast<char*>(&response_)) + sizeof(activated_));
}

SDKLicenseResp::~SDKLicenseResp() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.SDKLicenseResp)
  SharedDtor();
}

void SDKLicenseResp::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void SDKLicenseResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SDKLicenseResp& SDKLicenseResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SDKLicenseResp_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SDKLicenseResp::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.SDKLicenseResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  activated_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SDKLicenseResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool activated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SDKLicenseResp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.SDKLicenseResp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool activated = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.SDKLicenseResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.SDKLicenseResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SDKLicenseResp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.SDKLicenseResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool activated = 1;
  if (this->activated() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->activated(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.SDKLicenseResp)
}

::PROTOBUF_NAMESPACE_ID::uint8* SDKLicenseResp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.SDKLicenseResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool activated = 1;
  if (this->activated() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->activated(), target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.SDKLicenseResp)
  return target;
}

size_t SDKLicenseResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.SDKLicenseResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // bool activated = 1;
  if (this->activated() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDKLicenseResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.SDKLicenseResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SDKLicenseResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SDKLicenseResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.SDKLicenseResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.SDKLicenseResp)
    MergeFrom(*source);
  }
}

void SDKLicenseResp::MergeFrom(const SDKLicenseResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.SDKLicenseResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
  if (from.activated() != 0) {
    set_activated(from.activated());
  }
}

void SDKLicenseResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.SDKLicenseResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDKLicenseResp::CopyFrom(const SDKLicenseResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.SDKLicenseResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKLicenseResp::IsInitialized() const {
  return true;
}

void SDKLicenseResp::Swap(SDKLicenseResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SDKLicenseResp::InternalSwap(SDKLicenseResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(activated_, other->activated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SDKLicenseResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VariableCondition::InitAsDefaultInstance() {
}
class VariableCondition::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariableCondition::kIVarsFieldNumber;
const int VariableCondition::kFVarsFieldNumber;
const int VariableCondition::kBVarsFieldNumber;
const int VariableCondition::kMVarsFieldNumber;
const int VariableCondition::kJVarsFieldNumber;
const int VariableCondition::kTVarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariableCondition::VariableCondition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.VariableCondition)
}
VariableCondition::VariableCondition(const VariableCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      i_vars_(from.i_vars_),
      f_vars_(from.f_vars_),
      b_vars_(from.b_vars_),
      m_vars_(from.m_vars_),
      j_vars_(from.j_vars_),
      t_vars_(from.t_vars_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.VariableCondition)
}

void VariableCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VariableCondition_control_5fmsgs_2eproto.base);
}

VariableCondition::~VariableCondition() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.VariableCondition)
  SharedDtor();
}

void VariableCondition::SharedDtor() {
}

void VariableCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VariableCondition& VariableCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VariableCondition_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void VariableCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.VariableCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i_vars_.Clear();
  f_vars_.Clear();
  b_vars_.Clear();
  m_vars_.Clear();
  j_vars_.Clear();
  t_vars_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VariableCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.IntVariable i_vars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_i_vars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.FloatVariable f_vars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_f_vars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.BoolVariable b_vars = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_b_vars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.ModbusVariable m_vars = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_m_vars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.JPosVariable j_vars = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_j_vars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.TPosVariable t_vars = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_t_vars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VariableCondition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.VariableCondition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.IntVariable i_vars = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_i_vars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.FloatVariable f_vars = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_f_vars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.BoolVariable b_vars = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_b_vars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.ModbusVariable m_vars = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_m_vars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.JPosVariable j_vars = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_j_vars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.TPosVariable t_vars = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_t_vars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.VariableCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.VariableCondition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VariableCondition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.VariableCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.IntVariable i_vars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->i_vars_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->i_vars(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.FloatVariable f_vars = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->f_vars_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->f_vars(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.BoolVariable b_vars = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->b_vars_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->b_vars(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.ModbusVariable m_vars = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->m_vars_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->m_vars(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.JPosVariable j_vars = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->j_vars_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->j_vars(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.TPosVariable t_vars = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->t_vars_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->t_vars(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.VariableCondition)
}

::PROTOBUF_NAMESPACE_ID::uint8* VariableCondition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.VariableCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.IntVariable i_vars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->i_vars_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->i_vars(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.FloatVariable f_vars = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->f_vars_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->f_vars(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.BoolVariable b_vars = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->b_vars_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->b_vars(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.ModbusVariable m_vars = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->m_vars_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->m_vars(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.JPosVariable j_vars = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->j_vars_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->j_vars(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.TPosVariable t_vars = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->t_vars_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->t_vars(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.VariableCondition)
  return target;
}

size_t VariableCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.VariableCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.IntVariable i_vars = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->i_vars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->i_vars(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.FloatVariable f_vars = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->f_vars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->f_vars(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.BoolVariable b_vars = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->b_vars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->b_vars(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.ModbusVariable m_vars = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->m_vars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->m_vars(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.JPosVariable j_vars = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->j_vars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->j_vars(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.TPosVariable t_vars = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->t_vars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->t_vars(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariableCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.VariableCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const VariableCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VariableCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.VariableCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.VariableCondition)
    MergeFrom(*source);
  }
}

void VariableCondition::MergeFrom(const VariableCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.VariableCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  i_vars_.MergeFrom(from.i_vars_);
  f_vars_.MergeFrom(from.f_vars_);
  b_vars_.MergeFrom(from.b_vars_);
  m_vars_.MergeFrom(from.m_vars_);
  j_vars_.MergeFrom(from.j_vars_);
  t_vars_.MergeFrom(from.t_vars_);
}

void VariableCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.VariableCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableCondition::CopyFrom(const VariableCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.VariableCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableCondition::IsInitialized() const {
  return true;
}

void VariableCondition::Swap(VariableCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VariableCondition::InternalSwap(VariableCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&i_vars_)->InternalSwap(CastToBase(&other->i_vars_));
  CastToBase(&f_vars_)->InternalSwap(CastToBase(&other->f_vars_));
  CastToBase(&b_vars_)->InternalSwap(CastToBase(&other->b_vars_));
  CastToBase(&m_vars_)->InternalSwap(CastToBase(&other->m_vars_));
  CastToBase(&j_vars_)->InternalSwap(CastToBase(&other->j_vars_));
  CastToBase(&t_vars_)->InternalSwap(CastToBase(&other->t_vars_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IOCondition::InitAsDefaultInstance() {
}
class IOCondition::HasBitSetters {
 public:
};

void IOCondition::clear_di() {
  di_.Clear();
}
void IOCondition::clear_end_di() {
  end_di_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IOCondition::kDiFieldNumber;
const int IOCondition::kEndDiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IOCondition::IOCondition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.IOCondition)
}
IOCondition::IOCondition(const IOCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      di_(from.di_),
      end_di_(from.end_di_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.IOCondition)
}

void IOCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IOCondition_control_5fmsgs_2eproto.base);
}

IOCondition::~IOCondition() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.IOCondition)
  SharedDtor();
}

void IOCondition::SharedDtor() {
}

void IOCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IOCondition& IOCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IOCondition_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void IOCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.IOCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  di_.Clear();
  end_di_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IOCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_di(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal end_di = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_end_di(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IOCondition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.IOCondition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_di()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal end_di = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_end_di()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.IOCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.IOCondition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IOCondition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.IOCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->di_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->di(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal end_di = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_di_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->end_di(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.IOCondition)
}

::PROTOBUF_NAMESPACE_ID::uint8* IOCondition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.IOCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->di_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->di(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal end_di = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_di_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->end_di(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.IOCondition)
  return target;
}

size_t IOCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.IOCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->di_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->di(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal end_di = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->end_di_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->end_di(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IOCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.IOCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const IOCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IOCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.IOCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.IOCondition)
    MergeFrom(*source);
  }
}

void IOCondition::MergeFrom(const IOCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.IOCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  di_.MergeFrom(from.di_);
  end_di_.MergeFrom(from.end_di_);
}

void IOCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.IOCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOCondition::CopyFrom(const IOCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.IOCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOCondition::IsInitialized() const {
  return true;
}

void IOCondition::Swap(IOCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IOCondition::InternalSwap(IOCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&di_)->InternalSwap(CastToBase(&other->di_));
  CastToBase(&end_di_)->InternalSwap(CastToBase(&other->end_di_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IOCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MotionCondition::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_MotionCondition_default_instance_._instance.get_mutable()->io_cond_ = const_cast< ::Nrmk::IndyFramework::IOCondition*>(
      ::Nrmk::IndyFramework::IOCondition::internal_default_instance());
  ::Nrmk::IndyFramework::_MotionCondition_default_instance_._instance.get_mutable()->var_cond_ = const_cast< ::Nrmk::IndyFramework::VariableCondition*>(
      ::Nrmk::IndyFramework::VariableCondition::internal_default_instance());
}
class MotionCondition::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::IOCondition& io_cond(const MotionCondition* msg);
  static const ::Nrmk::IndyFramework::VariableCondition& var_cond(const MotionCondition* msg);
};

const ::Nrmk::IndyFramework::IOCondition&
MotionCondition::HasBitSetters::io_cond(const MotionCondition* msg) {
  return *msg->io_cond_;
}
const ::Nrmk::IndyFramework::VariableCondition&
MotionCondition::HasBitSetters::var_cond(const MotionCondition* msg) {
  return *msg->var_cond_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotionCondition::kTypeCondFieldNumber;
const int MotionCondition::kTypeReactFieldNumber;
const int MotionCondition::kConstCondFieldNumber;
const int MotionCondition::kIoCondFieldNumber;
const int MotionCondition::kVarCondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotionCondition::MotionCondition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MotionCondition)
}
MotionCondition::MotionCondition(const MotionCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_io_cond()) {
    io_cond_ = new ::Nrmk::IndyFramework::IOCondition(*from.io_cond_);
  } else {
    io_cond_ = nullptr;
  }
  if (from.has_var_cond()) {
    var_cond_ = new ::Nrmk::IndyFramework::VariableCondition(*from.var_cond_);
  } else {
    var_cond_ = nullptr;
  }
  ::memcpy(&type_cond_, &from.type_cond_,
    static_cast<size_t>(reinterpret_cast<char*>(&const_cond_) -
    reinterpret_cast<char*>(&type_cond_)) + sizeof(const_cond_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MotionCondition)
}

void MotionCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MotionCondition_control_5fmsgs_2eproto.base);
  ::memset(&io_cond_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&const_cond_) -
      reinterpret_cast<char*>(&io_cond_)) + sizeof(const_cond_));
}

MotionCondition::~MotionCondition() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MotionCondition)
  SharedDtor();
}

void MotionCondition::SharedDtor() {
  if (this != internal_default_instance()) delete io_cond_;
  if (this != internal_default_instance()) delete var_cond_;
}

void MotionCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotionCondition& MotionCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotionCondition_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MotionCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MotionCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && io_cond_ != nullptr) {
    delete io_cond_;
  }
  io_cond_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && var_cond_ != nullptr) {
    delete var_cond_;
  }
  var_cond_ = nullptr;
  ::memset(&type_cond_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&const_cond_) -
      reinterpret_cast<char*>(&type_cond_)) + sizeof(const_cond_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotionCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.MotionCondition.ConditionType type_cond = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type_cond(static_cast<::Nrmk::IndyFramework::MotionCondition_ConditionType>(val));
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.MotionCondition.ReactionType type_react = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type_react(static_cast<::Nrmk::IndyFramework::MotionCondition_ReactionType>(val));
        } else goto handle_unusual;
        continue;
      // bool const_cond = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          const_cond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.IOCondition io_cond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_io_cond(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.VariableCondition var_cond = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_var_cond(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotionCondition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MotionCondition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.MotionCondition.ConditionType type_cond = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type_cond(static_cast< ::Nrmk::IndyFramework::MotionCondition_ConditionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.MotionCondition.ReactionType type_react = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type_react(static_cast< ::Nrmk::IndyFramework::MotionCondition_ReactionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool const_cond = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &const_cond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.IOCondition io_cond = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_io_cond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.VariableCondition var_cond = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_var_cond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MotionCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MotionCondition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotionCondition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MotionCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.MotionCondition.ConditionType type_cond = 1;
  if (this->type_cond() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type_cond(), output);
  }

  // .Nrmk.IndyFramework.MotionCondition.ReactionType type_react = 2;
  if (this->type_react() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type_react(), output);
  }

  // bool const_cond = 3;
  if (this->const_cond() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->const_cond(), output);
  }

  // .Nrmk.IndyFramework.IOCondition io_cond = 4;
  if (this->has_io_cond()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::io_cond(this), output);
  }

  // .Nrmk.IndyFramework.VariableCondition var_cond = 5;
  if (this->has_var_cond()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::var_cond(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MotionCondition)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionCondition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MotionCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.MotionCondition.ConditionType type_cond = 1;
  if (this->type_cond() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type_cond(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition.ReactionType type_react = 2;
  if (this->type_react() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type_react(), target);
  }

  // bool const_cond = 3;
  if (this->const_cond() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->const_cond(), target);
  }

  // .Nrmk.IndyFramework.IOCondition io_cond = 4;
  if (this->has_io_cond()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::io_cond(this), target);
  }

  // .Nrmk.IndyFramework.VariableCondition var_cond = 5;
  if (this->has_var_cond()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::var_cond(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MotionCondition)
  return target;
}

size_t MotionCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MotionCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.IOCondition io_cond = 4;
  if (this->has_io_cond()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *io_cond_);
  }

  // .Nrmk.IndyFramework.VariableCondition var_cond = 5;
  if (this->has_var_cond()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *var_cond_);
  }

  // .Nrmk.IndyFramework.MotionCondition.ConditionType type_cond = 1;
  if (this->type_cond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type_cond());
  }

  // .Nrmk.IndyFramework.MotionCondition.ReactionType type_react = 2;
  if (this->type_react() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type_react());
  }

  // bool const_cond = 3;
  if (this->const_cond() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MotionCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MotionCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MotionCondition)
    MergeFrom(*source);
  }
}

void MotionCondition::MergeFrom(const MotionCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MotionCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_io_cond()) {
    mutable_io_cond()->::Nrmk::IndyFramework::IOCondition::MergeFrom(from.io_cond());
  }
  if (from.has_var_cond()) {
    mutable_var_cond()->::Nrmk::IndyFramework::VariableCondition::MergeFrom(from.var_cond());
  }
  if (from.type_cond() != 0) {
    set_type_cond(from.type_cond());
  }
  if (from.type_react() != 0) {
    set_type_react(from.type_react());
  }
  if (from.const_cond() != 0) {
    set_const_cond(from.const_cond());
  }
}

void MotionCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MotionCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionCondition::CopyFrom(const MotionCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MotionCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionCondition::IsInitialized() const {
  return true;
}

void MotionCondition::Swap(MotionCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotionCondition::InternalSwap(MotionCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(io_cond_, other->io_cond_);
  swap(var_cond_, other->var_cond_);
  swap(type_cond_, other->type_cond_);
  swap(type_react_, other->type_react_);
  swap(const_cond_, other->const_cond_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlendingType::InitAsDefaultInstance() {
}
class BlendingType::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlendingType::kTypeFieldNumber;
const int BlendingType::kBlendingRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlendingType::BlendingType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.BlendingType)
}
BlendingType::BlendingType(const BlendingType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&blending_radius_) -
    reinterpret_cast<char*>(&type_)) + sizeof(blending_radius_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.BlendingType)
}

void BlendingType::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blending_radius_) -
      reinterpret_cast<char*>(&type_)) + sizeof(blending_radius_));
}

BlendingType::~BlendingType() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.BlendingType)
  SharedDtor();
}

void BlendingType::SharedDtor() {
}

void BlendingType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlendingType& BlendingType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlendingType_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void BlendingType::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.BlendingType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blending_radius_) -
      reinterpret_cast<char*>(&type_)) + sizeof(blending_radius_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlendingType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.BlendingType.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::Nrmk::IndyFramework::BlendingType_Type>(val));
        } else goto handle_unusual;
        continue;
      // float blending_radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          blending_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlendingType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.BlendingType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.BlendingType.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Nrmk::IndyFramework::BlendingType_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.BlendingType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.BlendingType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlendingType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.BlendingType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.BlendingType.Type type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->blending_radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.BlendingType)
}

::PROTOBUF_NAMESPACE_ID::uint8* BlendingType::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.BlendingType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.BlendingType.Type type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->blending_radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.BlendingType)
  return target;
}

size_t BlendingType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.BlendingType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.BlendingType.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlendingType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.BlendingType)
  GOOGLE_DCHECK_NE(&from, this);
  const BlendingType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlendingType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.BlendingType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.BlendingType)
    MergeFrom(*source);
  }
}

void BlendingType::MergeFrom(const BlendingType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.BlendingType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (!(from.blending_radius() <= 0 && from.blending_radius() >= 0)) {
    set_blending_radius(from.blending_radius());
  }
}

void BlendingType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.BlendingType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlendingType::CopyFrom(const BlendingType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.BlendingType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlendingType::IsInitialized() const {
  return true;
}

void BlendingType::Swap(BlendingType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlendingType::InternalSwap(BlendingType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(blending_radius_, other->blending_radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlendingType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetJ::InitAsDefaultInstance() {
}
class TargetJ::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetJ::kJStartFieldNumber;
const int TargetJ::kJTargetFieldNumber;
const int TargetJ::kBaseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetJ::TargetJ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TargetJ)
}
TargetJ::TargetJ(const TargetJ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      j_start_(from.j_start_),
      j_target_(from.j_target_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_type_ = from.base_type_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TargetJ)
}

void TargetJ::SharedCtor() {
  base_type_ = 0;
}

TargetJ::~TargetJ() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TargetJ)
  SharedDtor();
}

void TargetJ::SharedDtor() {
}

void TargetJ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetJ& TargetJ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetJ_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TargetJ::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TargetJ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  j_start_.Clear();
  j_target_.Clear();
  base_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TargetJ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float j_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_j_start(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_j_start(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float j_target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_j_target(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_j_target(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.JointBaseType base_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::Nrmk::IndyFramework::JointBaseType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TargetJ::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TargetJ)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float j_start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_j_start())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_j_start())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float j_target = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_j_target())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_j_target())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.JointBaseType base_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::Nrmk::IndyFramework::JointBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TargetJ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TargetJ)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TargetJ::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TargetJ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float j_start = 1;
  if (this->j_start_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_j_start_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->j_start().data(), this->j_start_size(), output);
  }

  // repeated float j_target = 2;
  if (this->j_target_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_j_target_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->j_target().data(), this->j_target_size(), output);
  }

  // .Nrmk.IndyFramework.JointBaseType base_type = 3;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->base_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TargetJ)
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetJ::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TargetJ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float j_start = 1;
  if (this->j_start_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _j_start_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->j_start_, target);
  }

  // repeated float j_target = 2;
  if (this->j_target_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _j_target_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->j_target_, target);
  }

  // .Nrmk.IndyFramework.JointBaseType base_type = 3;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->base_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TargetJ)
  return target;
}

size_t TargetJ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TargetJ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float j_start = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->j_start_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _j_start_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float j_target = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->j_target_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _j_target_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.JointBaseType base_type = 3;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetJ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TargetJ)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetJ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetJ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TargetJ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TargetJ)
    MergeFrom(*source);
  }
}

void TargetJ::MergeFrom(const TargetJ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TargetJ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  j_start_.MergeFrom(from.j_start_);
  j_target_.MergeFrom(from.j_target_);
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
}

void TargetJ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TargetJ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetJ::CopyFrom(const TargetJ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TargetJ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetJ::IsInitialized() const {
  return true;
}

void TargetJ::Swap(TargetJ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetJ::InternalSwap(TargetJ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  j_start_.InternalSwap(&other->j_start_);
  j_target_.InternalSwap(&other->j_target_);
  swap(base_type_, other->base_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetJ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveJReq::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_MoveJReq_default_instance_._instance.get_mutable()->target_ = const_cast< ::Nrmk::IndyFramework::TargetJ*>(
      ::Nrmk::IndyFramework::TargetJ::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveJReq_default_instance_._instance.get_mutable()->blending_ = const_cast< ::Nrmk::IndyFramework::BlendingType*>(
      ::Nrmk::IndyFramework::BlendingType::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveJReq_default_instance_._instance.get_mutable()->post_condition_ = const_cast< ::Nrmk::IndyFramework::MotionCondition*>(
      ::Nrmk::IndyFramework::MotionCondition::internal_default_instance());
}
class MoveJReq::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::TargetJ& target(const MoveJReq* msg);
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveJReq* msg);
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveJReq* msg);
};

const ::Nrmk::IndyFramework::TargetJ&
MoveJReq::HasBitSetters::target(const MoveJReq* msg) {
  return *msg->target_;
}
const ::Nrmk::IndyFramework::BlendingType&
MoveJReq::HasBitSetters::blending(const MoveJReq* msg) {
  return *msg->blending_;
}
const ::Nrmk::IndyFramework::MotionCondition&
MoveJReq::HasBitSetters::post_condition(const MoveJReq* msg) {
  return *msg->post_condition_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveJReq::kTargetFieldNumber;
const int MoveJReq::kBlendingFieldNumber;
const int MoveJReq::kVelRatioFieldNumber;
const int MoveJReq::kAccRatioFieldNumber;
const int MoveJReq::kPostConditionFieldNumber;
const int MoveJReq::kTeachingModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveJReq::MoveJReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveJReq)
}
MoveJReq::MoveJReq(const MoveJReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::Nrmk::IndyFramework::TargetJ(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from.has_blending()) {
    blending_ = new ::Nrmk::IndyFramework::BlendingType(*from.blending_);
  } else {
    blending_ = nullptr;
  }
  if (from.has_post_condition()) {
    post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from.post_condition_);
  } else {
    post_condition_ = nullptr;
  }
  ::memcpy(&vel_ratio_, &from.vel_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&teaching_mode_) -
    reinterpret_cast<char*>(&vel_ratio_)) + sizeof(teaching_mode_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveJReq)
}

void MoveJReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveJReq_control_5fmsgs_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teaching_mode_) -
      reinterpret_cast<char*>(&target_)) + sizeof(teaching_mode_));
}

MoveJReq::~MoveJReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveJReq)
  SharedDtor();
}

void MoveJReq::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete blending_;
  if (this != internal_default_instance()) delete post_condition_;
}

void MoveJReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveJReq& MoveJReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveJReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveJReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveJReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
  ::memset(&vel_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teaching_mode_) -
      reinterpret_cast<char*>(&vel_ratio_)) + sizeof(teaching_mode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveJReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.TargetJ target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_blending(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float vel_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          vel_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          acc_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_post_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool teaching_mode = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          teaching_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveJReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveJReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.TargetJ target = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blending()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_ratio = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_ratio = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_post_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool teaching_mode = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &teaching_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveJReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveJReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveJReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveJReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetJ target = 1;
  if (this->has_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::target(this), output);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::blending(this), output);
  }

  // float vel_ratio = 3;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->vel_ratio(), output);
  }

  // float acc_ratio = 4;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->acc_ratio(), output);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::post_condition(this), output);
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(30, this->teaching_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveJReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveJReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveJReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetJ target = 1;
  if (this->has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::target(this), target);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::blending(this), target);
  }

  // float vel_ratio = 3;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->vel_ratio(), target);
  }

  // float acc_ratio = 4;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::post_condition(this), target);
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->teaching_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveJReq)
  return target;
}

size_t MoveJReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveJReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetJ target = 1;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blending_);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_condition_);
  }

  // float vel_ratio = 3;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc_ratio = 4;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveJReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveJReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveJReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveJReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveJReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveJReq)
    MergeFrom(*source);
  }
}

void MoveJReq::MergeFrom(const MoveJReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveJReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    mutable_target()->::Nrmk::IndyFramework::TargetJ::MergeFrom(from.target());
  }
  if (from.has_blending()) {
    mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(from.blending());
  }
  if (from.has_post_condition()) {
    mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(from.post_condition());
  }
  if (!(from.vel_ratio() <= 0 && from.vel_ratio() >= 0)) {
    set_vel_ratio(from.vel_ratio());
  }
  if (!(from.acc_ratio() <= 0 && from.acc_ratio() >= 0)) {
    set_acc_ratio(from.acc_ratio());
  }
  if (from.teaching_mode() != 0) {
    set_teaching_mode(from.teaching_mode());
  }
}

void MoveJReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveJReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveJReq::CopyFrom(const MoveJReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveJReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveJReq::IsInitialized() const {
  return true;
}

void MoveJReq::Swap(MoveJReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveJReq::InternalSwap(MoveJReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(blending_, other->blending_);
  swap(post_condition_, other->post_condition_);
  swap(vel_ratio_, other->vel_ratio_);
  swap(acc_ratio_, other->acc_ratio_);
  swap(teaching_mode_, other->teaching_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveJReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveJCondReq::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_MoveJCondReq_default_instance_._instance.get_mutable()->target_ = const_cast< ::Nrmk::IndyFramework::TargetJ*>(
      ::Nrmk::IndyFramework::TargetJ::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveJCondReq_default_instance_._instance.get_mutable()->blending_ = const_cast< ::Nrmk::IndyFramework::BlendingType*>(
      ::Nrmk::IndyFramework::BlendingType::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveJCondReq_default_instance_._instance.get_mutable()->post_condition_ = const_cast< ::Nrmk::IndyFramework::MotionCondition*>(
      ::Nrmk::IndyFramework::MotionCondition::internal_default_instance());
}
class MoveJCondReq::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::TargetJ& target(const MoveJCondReq* msg);
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveJCondReq* msg);
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveJCondReq* msg);
};

const ::Nrmk::IndyFramework::TargetJ&
MoveJCondReq::HasBitSetters::target(const MoveJCondReq* msg) {
  return *msg->target_;
}
const ::Nrmk::IndyFramework::BlendingType&
MoveJCondReq::HasBitSetters::blending(const MoveJCondReq* msg) {
  return *msg->blending_;
}
const ::Nrmk::IndyFramework::MotionCondition&
MoveJCondReq::HasBitSetters::post_condition(const MoveJCondReq* msg) {
  return *msg->post_condition_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveJCondReq::kTargetFieldNumber;
const int MoveJCondReq::kBlendingFieldNumber;
const int MoveJCondReq::kVelRatioFieldNumber;
const int MoveJCondReq::kAccRatioFieldNumber;
const int MoveJCondReq::kPostConditionFieldNumber;
const int MoveJCondReq::kTeachingModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveJCondReq::MoveJCondReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveJCondReq)
}
MoveJCondReq::MoveJCondReq(const MoveJCondReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::Nrmk::IndyFramework::TargetJ(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from.has_blending()) {
    blending_ = new ::Nrmk::IndyFramework::BlendingType(*from.blending_);
  } else {
    blending_ = nullptr;
  }
  if (from.has_post_condition()) {
    post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from.post_condition_);
  } else {
    post_condition_ = nullptr;
  }
  ::memcpy(&vel_ratio_, &from.vel_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&teaching_mode_) -
    reinterpret_cast<char*>(&vel_ratio_)) + sizeof(teaching_mode_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveJCondReq)
}

void MoveJCondReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveJCondReq_control_5fmsgs_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teaching_mode_) -
      reinterpret_cast<char*>(&target_)) + sizeof(teaching_mode_));
}

MoveJCondReq::~MoveJCondReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveJCondReq)
  SharedDtor();
}

void MoveJCondReq::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete blending_;
  if (this != internal_default_instance()) delete post_condition_;
}

void MoveJCondReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveJCondReq& MoveJCondReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveJCondReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveJCondReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveJCondReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
  ::memset(&vel_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teaching_mode_) -
      reinterpret_cast<char*>(&vel_ratio_)) + sizeof(teaching_mode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveJCondReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.TargetJ target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_blending(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float vel_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          vel_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          acc_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_post_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool teaching_mode = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          teaching_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveJCondReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveJCondReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.TargetJ target = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blending()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_ratio = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_ratio = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_post_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool teaching_mode = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &teaching_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveJCondReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveJCondReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveJCondReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveJCondReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetJ target = 1;
  if (this->has_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::target(this), output);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::blending(this), output);
  }

  // float vel_ratio = 3;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->vel_ratio(), output);
  }

  // float acc_ratio = 4;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->acc_ratio(), output);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::post_condition(this), output);
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(30, this->teaching_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveJCondReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveJCondReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveJCondReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetJ target = 1;
  if (this->has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::target(this), target);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::blending(this), target);
  }

  // float vel_ratio = 3;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->vel_ratio(), target);
  }

  // float acc_ratio = 4;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::post_condition(this), target);
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->teaching_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveJCondReq)
  return target;
}

size_t MoveJCondReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveJCondReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetJ target = 1;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blending_);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_condition_);
  }

  // float vel_ratio = 3;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc_ratio = 4;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveJCondReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveJCondReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveJCondReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveJCondReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveJCondReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveJCondReq)
    MergeFrom(*source);
  }
}

void MoveJCondReq::MergeFrom(const MoveJCondReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveJCondReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    mutable_target()->::Nrmk::IndyFramework::TargetJ::MergeFrom(from.target());
  }
  if (from.has_blending()) {
    mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(from.blending());
  }
  if (from.has_post_condition()) {
    mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(from.post_condition());
  }
  if (!(from.vel_ratio() <= 0 && from.vel_ratio() >= 0)) {
    set_vel_ratio(from.vel_ratio());
  }
  if (!(from.acc_ratio() <= 0 && from.acc_ratio() >= 0)) {
    set_acc_ratio(from.acc_ratio());
  }
  if (from.teaching_mode() != 0) {
    set_teaching_mode(from.teaching_mode());
  }
}

void MoveJCondReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveJCondReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveJCondReq::CopyFrom(const MoveJCondReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveJCondReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveJCondReq::IsInitialized() const {
  return true;
}

void MoveJCondReq::Swap(MoveJCondReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveJCondReq::InternalSwap(MoveJCondReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(blending_, other->blending_);
  swap(post_condition_, other->post_condition_);
  swap(vel_ratio_, other->vel_ratio_);
  swap(acc_ratio_, other->acc_ratio_);
  swap(teaching_mode_, other->teaching_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveJCondReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveJTReq::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_MoveJTReq_default_instance_._instance.get_mutable()->target_ = const_cast< ::Nrmk::IndyFramework::TargetJ*>(
      ::Nrmk::IndyFramework::TargetJ::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveJTReq_default_instance_._instance.get_mutable()->blending_ = const_cast< ::Nrmk::IndyFramework::BlendingType*>(
      ::Nrmk::IndyFramework::BlendingType::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveJTReq_default_instance_._instance.get_mutable()->post_condition_ = const_cast< ::Nrmk::IndyFramework::MotionCondition*>(
      ::Nrmk::IndyFramework::MotionCondition::internal_default_instance());
}
class MoveJTReq::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::TargetJ& target(const MoveJTReq* msg);
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveJTReq* msg);
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveJTReq* msg);
};

const ::Nrmk::IndyFramework::TargetJ&
MoveJTReq::HasBitSetters::target(const MoveJTReq* msg) {
  return *msg->target_;
}
const ::Nrmk::IndyFramework::BlendingType&
MoveJTReq::HasBitSetters::blending(const MoveJTReq* msg) {
  return *msg->blending_;
}
const ::Nrmk::IndyFramework::MotionCondition&
MoveJTReq::HasBitSetters::post_condition(const MoveJTReq* msg) {
  return *msg->post_condition_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveJTReq::kTargetFieldNumber;
const int MoveJTReq::kBlendingFieldNumber;
const int MoveJTReq::kTimeFieldNumber;
const int MoveJTReq::kPostConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveJTReq::MoveJTReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveJTReq)
}
MoveJTReq::MoveJTReq(const MoveJTReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::Nrmk::IndyFramework::TargetJ(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from.has_blending()) {
    blending_ = new ::Nrmk::IndyFramework::BlendingType(*from.blending_);
  } else {
    blending_ = nullptr;
  }
  if (from.has_post_condition()) {
    post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from.post_condition_);
  } else {
    post_condition_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveJTReq)
}

void MoveJTReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveJTReq_control_5fmsgs_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&target_)) + sizeof(time_));
}

MoveJTReq::~MoveJTReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveJTReq)
  SharedDtor();
}

void MoveJTReq::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete blending_;
  if (this != internal_default_instance()) delete post_condition_;
}

void MoveJTReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveJTReq& MoveJTReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveJTReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveJTReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveJTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
  time_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveJTReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.TargetJ target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_blending(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_post_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveJTReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveJTReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.TargetJ target = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blending()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_post_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveJTReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveJTReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveJTReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveJTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetJ target = 1;
  if (this->has_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::target(this), output);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::blending(this), output);
  }

  // float time = 3;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->time(), output);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::post_condition(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveJTReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveJTReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveJTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetJ target = 1;
  if (this->has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::target(this), target);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::blending(this), target);
  }

  // float time = 3;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->time(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::post_condition(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveJTReq)
  return target;
}

size_t MoveJTReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveJTReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetJ target = 1;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blending_);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_condition_);
  }

  // float time = 3;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveJTReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveJTReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveJTReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveJTReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveJTReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveJTReq)
    MergeFrom(*source);
  }
}

void MoveJTReq::MergeFrom(const MoveJTReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveJTReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    mutable_target()->::Nrmk::IndyFramework::TargetJ::MergeFrom(from.target());
  }
  if (from.has_blending()) {
    mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(from.blending());
  }
  if (from.has_post_condition()) {
    mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(from.post_condition());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    set_time(from.time());
  }
}

void MoveJTReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveJTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveJTReq::CopyFrom(const MoveJTReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveJTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveJTReq::IsInitialized() const {
  return true;
}

void MoveJTReq::Swap(MoveJTReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveJTReq::InternalSwap(MoveJTReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(blending_, other->blending_);
  swap(post_condition_, other->post_condition_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveJTReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetP::InitAsDefaultInstance() {
}
class TargetP::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetP::kTStartFieldNumber;
const int TargetP::kTTargetFieldNumber;
const int TargetP::kBaseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetP::TargetP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TargetP)
}
TargetP::TargetP(const TargetP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      t_start_(from.t_start_),
      t_target_(from.t_target_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_type_ = from.base_type_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TargetP)
}

void TargetP::SharedCtor() {
  base_type_ = 0;
}

TargetP::~TargetP() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TargetP)
  SharedDtor();
}

void TargetP::SharedDtor() {
}

void TargetP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetP& TargetP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetP_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TargetP::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TargetP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  t_start_.Clear();
  t_target_.Clear();
  base_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TargetP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float t_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_start(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_t_start(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_target(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_t_target(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::Nrmk::IndyFramework::TaskBaseType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TargetP::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TargetP)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float t_start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_start())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_t_start())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_target = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_target())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_t_target())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::Nrmk::IndyFramework::TaskBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TargetP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TargetP)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TargetP::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TargetP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float t_start = 1;
  if (this->t_start_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_start_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_start().data(), this->t_start_size(), output);
  }

  // repeated float t_target = 2;
  if (this->t_target_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_target_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_target().data(), this->t_target_size(), output);
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->base_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TargetP)
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetP::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TargetP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float t_start = 1;
  if (this->t_start_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_start_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_start_, target);
  }

  // repeated float t_target = 2;
  if (this->t_target_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_target_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_target_, target);
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->base_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TargetP)
  return target;
}

size_t TargetP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TargetP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float t_start = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->t_start_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_start_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_target = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->t_target_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_target_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TargetP)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TargetP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TargetP)
    MergeFrom(*source);
  }
}

void TargetP::MergeFrom(const TargetP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TargetP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  t_start_.MergeFrom(from.t_start_);
  t_target_.MergeFrom(from.t_target_);
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
}

void TargetP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TargetP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetP::CopyFrom(const TargetP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TargetP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetP::IsInitialized() const {
  return true;
}

void TargetP::Swap(TargetP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetP::InternalSwap(TargetP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  t_start_.InternalSwap(&other->t_start_);
  t_target_.InternalSwap(&other->t_target_);
  swap(base_type_, other->base_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetC::InitAsDefaultInstance() {
}
class TargetC::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetC::kTStartFieldNumber;
const int TargetC::kTPos0FieldNumber;
const int TargetC::kTPos1FieldNumber;
const int TargetC::kBaseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetC::TargetC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TargetC)
}
TargetC::TargetC(const TargetC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      t_start_(from.t_start_),
      t_pos0_(from.t_pos0_),
      t_pos1_(from.t_pos1_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_type_ = from.base_type_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TargetC)
}

void TargetC::SharedCtor() {
  base_type_ = 0;
}

TargetC::~TargetC() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TargetC)
  SharedDtor();
}

void TargetC::SharedDtor() {
}

void TargetC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetC& TargetC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetC_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TargetC::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TargetC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  t_start_.Clear();
  t_pos0_.Clear();
  t_pos1_.Clear();
  base_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TargetC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float t_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_start(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_t_start(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_pos0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_pos0(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_t_pos0(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_pos1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_pos1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_t_pos1(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.TaskBaseType base_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::Nrmk::IndyFramework::TaskBaseType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TargetC::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TargetC)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float t_start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_start())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_t_start())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_pos0 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_pos0())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_t_pos0())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_pos1 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_pos1())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_t_pos1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.TaskBaseType base_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::Nrmk::IndyFramework::TaskBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TargetC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TargetC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TargetC::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TargetC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float t_start = 1;
  if (this->t_start_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_start_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_start().data(), this->t_start_size(), output);
  }

  // repeated float t_pos0 = 2;
  if (this->t_pos0_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_pos0_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_pos0().data(), this->t_pos0_size(), output);
  }

  // repeated float t_pos1 = 3;
  if (this->t_pos1_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_pos1_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_pos1().data(), this->t_pos1_size(), output);
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->base_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TargetC)
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetC::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TargetC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float t_start = 1;
  if (this->t_start_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_start_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_start_, target);
  }

  // repeated float t_pos0 = 2;
  if (this->t_pos0_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_pos0_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_pos0_, target);
  }

  // repeated float t_pos1 = 3;
  if (this->t_pos1_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_pos1_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_pos1_, target);
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->base_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TargetC)
  return target;
}

size_t TargetC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TargetC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float t_start = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->t_start_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_start_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_pos0 = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->t_pos0_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_pos0_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_pos1 = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->t_pos1_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_pos1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TargetC)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TargetC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TargetC)
    MergeFrom(*source);
  }
}

void TargetC::MergeFrom(const TargetC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TargetC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  t_start_.MergeFrom(from.t_start_);
  t_pos0_.MergeFrom(from.t_pos0_);
  t_pos1_.MergeFrom(from.t_pos1_);
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
}

void TargetC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TargetC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetC::CopyFrom(const TargetC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TargetC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetC::IsInitialized() const {
  return true;
}

void TargetC::Swap(TargetC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetC::InternalSwap(TargetC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  t_start_.InternalSwap(&other->t_start_);
  t_pos0_.InternalSwap(&other->t_pos0_);
  t_pos1_.InternalSwap(&other->t_pos1_);
  swap(base_type_, other->base_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveLReq::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_MoveLReq_default_instance_._instance.get_mutable()->target_ = const_cast< ::Nrmk::IndyFramework::TargetP*>(
      ::Nrmk::IndyFramework::TargetP::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveLReq_default_instance_._instance.get_mutable()->blending_ = const_cast< ::Nrmk::IndyFramework::BlendingType*>(
      ::Nrmk::IndyFramework::BlendingType::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveLReq_default_instance_._instance.get_mutable()->post_condition_ = const_cast< ::Nrmk::IndyFramework::MotionCondition*>(
      ::Nrmk::IndyFramework::MotionCondition::internal_default_instance());
}
class MoveLReq::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::TargetP& target(const MoveLReq* msg);
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveLReq* msg);
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveLReq* msg);
};

const ::Nrmk::IndyFramework::TargetP&
MoveLReq::HasBitSetters::target(const MoveLReq* msg) {
  return *msg->target_;
}
const ::Nrmk::IndyFramework::BlendingType&
MoveLReq::HasBitSetters::blending(const MoveLReq* msg) {
  return *msg->blending_;
}
const ::Nrmk::IndyFramework::MotionCondition&
MoveLReq::HasBitSetters::post_condition(const MoveLReq* msg) {
  return *msg->post_condition_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveLReq::kTargetFieldNumber;
const int MoveLReq::kBlendingFieldNumber;
const int MoveLReq::kVelRatioFieldNumber;
const int MoveLReq::kAccRatioFieldNumber;
const int MoveLReq::kVelTypeFieldNumber;
const int MoveLReq::kPostConditionFieldNumber;
const int MoveLReq::kTeachingModeFieldNumber;
const int MoveLReq::kBypassSingularFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveLReq::MoveLReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveLReq)
}
MoveLReq::MoveLReq(const MoveLReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::Nrmk::IndyFramework::TargetP(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from.has_blending()) {
    blending_ = new ::Nrmk::IndyFramework::BlendingType(*from.blending_);
  } else {
    blending_ = nullptr;
  }
  if (from.has_post_condition()) {
    post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from.post_condition_);
  } else {
    post_condition_ = nullptr;
  }
  ::memcpy(&vel_ratio_, &from.vel_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&bypass_singular_) -
    reinterpret_cast<char*>(&vel_ratio_)) + sizeof(bypass_singular_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveLReq)
}

void MoveLReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveLReq_control_5fmsgs_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bypass_singular_) -
      reinterpret_cast<char*>(&target_)) + sizeof(bypass_singular_));
}

MoveLReq::~MoveLReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveLReq)
  SharedDtor();
}

void MoveLReq::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete blending_;
  if (this != internal_default_instance()) delete post_condition_;
}

void MoveLReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveLReq& MoveLReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveLReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveLReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveLReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
  ::memset(&vel_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bypass_singular_) -
      reinterpret_cast<char*>(&vel_ratio_)) + sizeof(bypass_singular_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveLReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.TargetP target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_blending(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float vel_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          vel_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          acc_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_vel_type(static_cast<::Nrmk::IndyFramework::VelocityModeType>(val));
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_post_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool teaching_mode = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          teaching_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bypass_singular = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          bypass_singular_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveLReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveLReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.TargetP target = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blending()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_ratio = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_ratio = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vel_type(static_cast< ::Nrmk::IndyFramework::VelocityModeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_post_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool teaching_mode = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &teaching_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bypass_singular = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (320 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bypass_singular_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveLReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveLReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveLReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveLReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetP target = 1;
  if (this->has_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::target(this), output);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::blending(this), output);
  }

  // float vel_ratio = 3;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->vel_ratio(), output);
  }

  // float acc_ratio = 4;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->acc_ratio(), output);
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
  if (this->vel_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->vel_type(), output);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::post_condition(this), output);
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(30, this->teaching_mode(), output);
  }

  // bool bypass_singular = 40;
  if (this->bypass_singular() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(40, this->bypass_singular(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveLReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveLReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveLReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetP target = 1;
  if (this->has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::target(this), target);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::blending(this), target);
  }

  // float vel_ratio = 3;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->vel_ratio(), target);
  }

  // float acc_ratio = 4;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
  if (this->vel_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->vel_type(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::post_condition(this), target);
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->teaching_mode(), target);
  }

  // bool bypass_singular = 40;
  if (this->bypass_singular() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->bypass_singular(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveLReq)
  return target;
}

size_t MoveLReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveLReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetP target = 1;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blending_);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_condition_);
  }

  // float vel_ratio = 3;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc_ratio = 4;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
  if (this->vel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->vel_type());
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    total_size += 2 + 1;
  }

  // bool bypass_singular = 40;
  if (this->bypass_singular() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveLReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveLReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveLReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveLReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveLReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveLReq)
    MergeFrom(*source);
  }
}

void MoveLReq::MergeFrom(const MoveLReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveLReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    mutable_target()->::Nrmk::IndyFramework::TargetP::MergeFrom(from.target());
  }
  if (from.has_blending()) {
    mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(from.blending());
  }
  if (from.has_post_condition()) {
    mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(from.post_condition());
  }
  if (!(from.vel_ratio() <= 0 && from.vel_ratio() >= 0)) {
    set_vel_ratio(from.vel_ratio());
  }
  if (!(from.acc_ratio() <= 0 && from.acc_ratio() >= 0)) {
    set_acc_ratio(from.acc_ratio());
  }
  if (from.vel_type() != 0) {
    set_vel_type(from.vel_type());
  }
  if (from.teaching_mode() != 0) {
    set_teaching_mode(from.teaching_mode());
  }
  if (from.bypass_singular() != 0) {
    set_bypass_singular(from.bypass_singular());
  }
}

void MoveLReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveLReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveLReq::CopyFrom(const MoveLReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveLReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveLReq::IsInitialized() const {
  return true;
}

void MoveLReq::Swap(MoveLReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveLReq::InternalSwap(MoveLReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(blending_, other->blending_);
  swap(post_condition_, other->post_condition_);
  swap(vel_ratio_, other->vel_ratio_);
  swap(acc_ratio_, other->acc_ratio_);
  swap(vel_type_, other->vel_type_);
  swap(teaching_mode_, other->teaching_mode_);
  swap(bypass_singular_, other->bypass_singular_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveLReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveLTReq::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_MoveLTReq_default_instance_._instance.get_mutable()->target_ = const_cast< ::Nrmk::IndyFramework::TargetP*>(
      ::Nrmk::IndyFramework::TargetP::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveLTReq_default_instance_._instance.get_mutable()->blending_ = const_cast< ::Nrmk::IndyFramework::BlendingType*>(
      ::Nrmk::IndyFramework::BlendingType::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveLTReq_default_instance_._instance.get_mutable()->post_condition_ = const_cast< ::Nrmk::IndyFramework::MotionCondition*>(
      ::Nrmk::IndyFramework::MotionCondition::internal_default_instance());
}
class MoveLTReq::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::TargetP& target(const MoveLTReq* msg);
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveLTReq* msg);
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveLTReq* msg);
};

const ::Nrmk::IndyFramework::TargetP&
MoveLTReq::HasBitSetters::target(const MoveLTReq* msg) {
  return *msg->target_;
}
const ::Nrmk::IndyFramework::BlendingType&
MoveLTReq::HasBitSetters::blending(const MoveLTReq* msg) {
  return *msg->blending_;
}
const ::Nrmk::IndyFramework::MotionCondition&
MoveLTReq::HasBitSetters::post_condition(const MoveLTReq* msg) {
  return *msg->post_condition_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveLTReq::kTargetFieldNumber;
const int MoveLTReq::kBlendingFieldNumber;
const int MoveLTReq::kTimeFieldNumber;
const int MoveLTReq::kPostConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveLTReq::MoveLTReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveLTReq)
}
MoveLTReq::MoveLTReq(const MoveLTReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::Nrmk::IndyFramework::TargetP(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from.has_blending()) {
    blending_ = new ::Nrmk::IndyFramework::BlendingType(*from.blending_);
  } else {
    blending_ = nullptr;
  }
  if (from.has_post_condition()) {
    post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from.post_condition_);
  } else {
    post_condition_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveLTReq)
}

void MoveLTReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveLTReq_control_5fmsgs_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&target_)) + sizeof(time_));
}

MoveLTReq::~MoveLTReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveLTReq)
  SharedDtor();
}

void MoveLTReq::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete blending_;
  if (this != internal_default_instance()) delete post_condition_;
}

void MoveLTReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveLTReq& MoveLTReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveLTReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveLTReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveLTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
  time_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveLTReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.TargetP target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_blending(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_post_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveLTReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveLTReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.TargetP target = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blending()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_post_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveLTReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveLTReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveLTReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveLTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetP target = 1;
  if (this->has_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::target(this), output);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::blending(this), output);
  }

  // float time = 3;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->time(), output);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::post_condition(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveLTReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveLTReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveLTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetP target = 1;
  if (this->has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::target(this), target);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::blending(this), target);
  }

  // float time = 3;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->time(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::post_condition(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveLTReq)
  return target;
}

size_t MoveLTReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveLTReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetP target = 1;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blending_);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_condition_);
  }

  // float time = 3;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveLTReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveLTReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveLTReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveLTReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveLTReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveLTReq)
    MergeFrom(*source);
  }
}

void MoveLTReq::MergeFrom(const MoveLTReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveLTReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    mutable_target()->::Nrmk::IndyFramework::TargetP::MergeFrom(from.target());
  }
  if (from.has_blending()) {
    mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(from.blending());
  }
  if (from.has_post_condition()) {
    mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(from.post_condition());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    set_time(from.time());
  }
}

void MoveLTReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveLTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveLTReq::CopyFrom(const MoveLTReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveLTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveLTReq::IsInitialized() const {
  return true;
}

void MoveLTReq::Swap(MoveLTReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveLTReq::InternalSwap(MoveLTReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(blending_, other->blending_);
  swap(post_condition_, other->post_condition_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveLTReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveAxisReq::InitAsDefaultInstance() {
}
class MoveAxisReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveAxisReq::kStartMmFieldNumber;
const int MoveAxisReq::kTargetMmFieldNumber;
const int MoveAxisReq::kVelPercentageFieldNumber;
const int MoveAxisReq::kAccPercentageFieldNumber;
const int MoveAxisReq::kIsAbsoluteFieldNumber;
const int MoveAxisReq::kTeachingModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveAxisReq::MoveAxisReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveAxisReq)
}
MoveAxisReq::MoveAxisReq(const MoveAxisReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      start_mm_(from.start_mm_),
      target_mm_(from.target_mm_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vel_percentage_, &from.vel_percentage_,
    static_cast<size_t>(reinterpret_cast<char*>(&teaching_mode_) -
    reinterpret_cast<char*>(&vel_percentage_)) + sizeof(teaching_mode_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveAxisReq)
}

void MoveAxisReq::SharedCtor() {
  ::memset(&vel_percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teaching_mode_) -
      reinterpret_cast<char*>(&vel_percentage_)) + sizeof(teaching_mode_));
}

MoveAxisReq::~MoveAxisReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveAxisReq)
  SharedDtor();
}

void MoveAxisReq::SharedDtor() {
}

void MoveAxisReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveAxisReq& MoveAxisReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveAxisReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveAxisReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveAxisReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_mm_.Clear();
  target_mm_.Clear();
  ::memset(&vel_percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teaching_mode_) -
      reinterpret_cast<char*>(&vel_percentage_)) + sizeof(teaching_mode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveAxisReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float start_mm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_start_mm(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_start_mm(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float target_mm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_target_mm(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_target_mm(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vel_percentage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          vel_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_percentage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          acc_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_absolute = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool teaching_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          teaching_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveAxisReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveAxisReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float start_mm = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_start_mm())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_start_mm())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float target_mm = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_target_mm())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_target_mm())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_percentage = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_percentage = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_absolute = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_absolute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool teaching_mode = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &teaching_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveAxisReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveAxisReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveAxisReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveAxisReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float start_mm = 1;
  if (this->start_mm_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_start_mm_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->start_mm().data(), this->start_mm_size(), output);
  }

  // repeated float target_mm = 2;
  if (this->target_mm_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_target_mm_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->target_mm().data(), this->target_mm_size(), output);
  }

  // float vel_percentage = 3;
  if (!(this->vel_percentage() <= 0 && this->vel_percentage() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->vel_percentage(), output);
  }

  // float acc_percentage = 4;
  if (!(this->acc_percentage() <= 0 && this->acc_percentage() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->acc_percentage(), output);
  }

  // bool is_absolute = 5;
  if (this->is_absolute() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_absolute(), output);
  }

  // bool teaching_mode = 10;
  if (this->teaching_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->teaching_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveAxisReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveAxisReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveAxisReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float start_mm = 1;
  if (this->start_mm_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _start_mm_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->start_mm_, target);
  }

  // repeated float target_mm = 2;
  if (this->target_mm_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _target_mm_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->target_mm_, target);
  }

  // float vel_percentage = 3;
  if (!(this->vel_percentage() <= 0 && this->vel_percentage() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->vel_percentage(), target);
  }

  // float acc_percentage = 4;
  if (!(this->acc_percentage() <= 0 && this->acc_percentage() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->acc_percentage(), target);
  }

  // bool is_absolute = 5;
  if (this->is_absolute() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->is_absolute(), target);
  }

  // bool teaching_mode = 10;
  if (this->teaching_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->teaching_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveAxisReq)
  return target;
}

size_t MoveAxisReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveAxisReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float start_mm = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->start_mm_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _start_mm_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float target_mm = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->target_mm_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _target_mm_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float vel_percentage = 3;
  if (!(this->vel_percentage() <= 0 && this->vel_percentage() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc_percentage = 4;
  if (!(this->acc_percentage() <= 0 && this->acc_percentage() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_absolute = 5;
  if (this->is_absolute() != 0) {
    total_size += 1 + 1;
  }

  // bool teaching_mode = 10;
  if (this->teaching_mode() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveAxisReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveAxisReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveAxisReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveAxisReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveAxisReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveAxisReq)
    MergeFrom(*source);
  }
}

void MoveAxisReq::MergeFrom(const MoveAxisReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveAxisReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  start_mm_.MergeFrom(from.start_mm_);
  target_mm_.MergeFrom(from.target_mm_);
  if (!(from.vel_percentage() <= 0 && from.vel_percentage() >= 0)) {
    set_vel_percentage(from.vel_percentage());
  }
  if (!(from.acc_percentage() <= 0 && from.acc_percentage() >= 0)) {
    set_acc_percentage(from.acc_percentage());
  }
  if (from.is_absolute() != 0) {
    set_is_absolute(from.is_absolute());
  }
  if (from.teaching_mode() != 0) {
    set_teaching_mode(from.teaching_mode());
  }
}

void MoveAxisReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveAxisReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveAxisReq::CopyFrom(const MoveAxisReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveAxisReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveAxisReq::IsInitialized() const {
  return true;
}

void MoveAxisReq::Swap(MoveAxisReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveAxisReq::InternalSwap(MoveAxisReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  start_mm_.InternalSwap(&other->start_mm_);
  target_mm_.InternalSwap(&other->target_mm_);
  swap(vel_percentage_, other->vel_percentage_);
  swap(acc_percentage_, other->acc_percentage_);
  swap(is_absolute_, other->is_absolute_);
  swap(teaching_mode_, other->teaching_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveAxisReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveCReq::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_MoveCReq_default_instance_._instance.get_mutable()->target_ = const_cast< ::Nrmk::IndyFramework::TargetC*>(
      ::Nrmk::IndyFramework::TargetC::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveCReq_default_instance_._instance.get_mutable()->blending_ = const_cast< ::Nrmk::IndyFramework::BlendingType*>(
      ::Nrmk::IndyFramework::BlendingType::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveCReq_default_instance_._instance.get_mutable()->post_condition_ = const_cast< ::Nrmk::IndyFramework::MotionCondition*>(
      ::Nrmk::IndyFramework::MotionCondition::internal_default_instance());
}
class MoveCReq::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::TargetC& target(const MoveCReq* msg);
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveCReq* msg);
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveCReq* msg);
};

const ::Nrmk::IndyFramework::TargetC&
MoveCReq::HasBitSetters::target(const MoveCReq* msg) {
  return *msg->target_;
}
const ::Nrmk::IndyFramework::BlendingType&
MoveCReq::HasBitSetters::blending(const MoveCReq* msg) {
  return *msg->blending_;
}
const ::Nrmk::IndyFramework::MotionCondition&
MoveCReq::HasBitSetters::post_condition(const MoveCReq* msg) {
  return *msg->post_condition_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveCReq::kTargetFieldNumber;
const int MoveCReq::kBlendingFieldNumber;
const int MoveCReq::kAngleFieldNumber;
const int MoveCReq::kSettingTypeFieldNumber;
const int MoveCReq::kMoveTypeFieldNumber;
const int MoveCReq::kVelRatioFieldNumber;
const int MoveCReq::kAccRatioFieldNumber;
const int MoveCReq::kVelTypeFieldNumber;
const int MoveCReq::kPostConditionFieldNumber;
const int MoveCReq::kTeachingModeFieldNumber;
const int MoveCReq::kBypassSingularFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveCReq::MoveCReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveCReq)
}
MoveCReq::MoveCReq(const MoveCReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::Nrmk::IndyFramework::TargetC(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from.has_blending()) {
    blending_ = new ::Nrmk::IndyFramework::BlendingType(*from.blending_);
  } else {
    blending_ = nullptr;
  }
  if (from.has_post_condition()) {
    post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from.post_condition_);
  } else {
    post_condition_ = nullptr;
  }
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&vel_type_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(vel_type_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveCReq)
}

void MoveCReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveCReq_control_5fmsgs_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vel_type_) -
      reinterpret_cast<char*>(&target_)) + sizeof(vel_type_));
}

MoveCReq::~MoveCReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveCReq)
  SharedDtor();
}

void MoveCReq::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete blending_;
  if (this != internal_default_instance()) delete post_condition_;
}

void MoveCReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveCReq& MoveCReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveCReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveCReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveCReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vel_type_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(vel_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveCReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.TargetC target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_blending(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_setting_type(static_cast<::Nrmk::IndyFramework::CircularSettingType>(val));
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_move_type(static_cast<::Nrmk::IndyFramework::CircularMovingType>(val));
        } else goto handle_unusual;
        continue;
      // float vel_ratio = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          vel_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_ratio = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          acc_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.VelocityModeType vel_type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_vel_type(static_cast<::Nrmk::IndyFramework::VelocityModeType>(val));
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_post_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool teaching_mode = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          teaching_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bypass_singular = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          bypass_singular_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveCReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveCReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.TargetC target = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blending()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_setting_type(static_cast< ::Nrmk::IndyFramework::CircularSettingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_move_type(static_cast< ::Nrmk::IndyFramework::CircularMovingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_ratio = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (165 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_ratio = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (173 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.VelocityModeType vel_type = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vel_type(static_cast< ::Nrmk::IndyFramework::VelocityModeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_post_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool teaching_mode = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &teaching_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bypass_singular = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (320 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bypass_singular_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveCReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveCReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveCReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveCReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetC target = 1;
  if (this->has_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::target(this), output);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::blending(this), output);
  }

  // float angle = 3;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->angle(), output);
  }

  // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
  if (this->setting_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->setting_type(), output);
  }

  // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
  if (this->move_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->move_type(), output);
  }

  // float vel_ratio = 20;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(20, this->vel_ratio(), output);
  }

  // float acc_ratio = 21;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(21, this->acc_ratio(), output);
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 22;
  if (this->vel_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      22, this->vel_type(), output);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
  if (this->has_post_condition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, HasBitSetters::post_condition(this), output);
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(30, this->teaching_mode(), output);
  }

  // bool bypass_singular = 40;
  if (this->bypass_singular() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(40, this->bypass_singular(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveCReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveCReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveCReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetC target = 1;
  if (this->has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::target(this), target);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::blending(this), target);
  }

  // float angle = 3;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->angle(), target);
  }

  // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
  if (this->setting_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->setting_type(), target);
  }

  // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
  if (this->move_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->move_type(), target);
  }

  // float vel_ratio = 20;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->vel_ratio(), target);
  }

  // float acc_ratio = 21;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 22;
  if (this->vel_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->vel_type(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
  if (this->has_post_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, HasBitSetters::post_condition(this), target);
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->teaching_mode(), target);
  }

  // bool bypass_singular = 40;
  if (this->bypass_singular() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->bypass_singular(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveCReq)
  return target;
}

size_t MoveCReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveCReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetC target = 1;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blending_);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
  if (this->has_post_condition()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_condition_);
  }

  // float angle = 3;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
  if (this->setting_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->setting_type());
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    total_size += 2 + 1;
  }

  // bool bypass_singular = 40;
  if (this->bypass_singular() != 0) {
    total_size += 2 + 1;
  }

  // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
  if (this->move_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->move_type());
  }

  // float vel_ratio = 20;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    total_size += 2 + 4;
  }

  // float acc_ratio = 21;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    total_size += 2 + 4;
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 22;
  if (this->vel_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->vel_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveCReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveCReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveCReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveCReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveCReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveCReq)
    MergeFrom(*source);
  }
}

void MoveCReq::MergeFrom(const MoveCReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveCReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    mutable_target()->::Nrmk::IndyFramework::TargetC::MergeFrom(from.target());
  }
  if (from.has_blending()) {
    mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(from.blending());
  }
  if (from.has_post_condition()) {
    mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(from.post_condition());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    set_angle(from.angle());
  }
  if (from.setting_type() != 0) {
    set_setting_type(from.setting_type());
  }
  if (from.teaching_mode() != 0) {
    set_teaching_mode(from.teaching_mode());
  }
  if (from.bypass_singular() != 0) {
    set_bypass_singular(from.bypass_singular());
  }
  if (from.move_type() != 0) {
    set_move_type(from.move_type());
  }
  if (!(from.vel_ratio() <= 0 && from.vel_ratio() >= 0)) {
    set_vel_ratio(from.vel_ratio());
  }
  if (!(from.acc_ratio() <= 0 && from.acc_ratio() >= 0)) {
    set_acc_ratio(from.acc_ratio());
  }
  if (from.vel_type() != 0) {
    set_vel_type(from.vel_type());
  }
}

void MoveCReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveCReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveCReq::CopyFrom(const MoveCReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveCReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveCReq::IsInitialized() const {
  return true;
}

void MoveCReq::Swap(MoveCReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveCReq::InternalSwap(MoveCReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(blending_, other->blending_);
  swap(post_condition_, other->post_condition_);
  swap(angle_, other->angle_);
  swap(setting_type_, other->setting_type_);
  swap(teaching_mode_, other->teaching_mode_);
  swap(bypass_singular_, other->bypass_singular_);
  swap(move_type_, other->move_type_);
  swap(vel_ratio_, other->vel_ratio_);
  swap(acc_ratio_, other->acc_ratio_);
  swap(vel_type_, other->vel_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveCReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveCTReq::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_MoveCTReq_default_instance_._instance.get_mutable()->target_ = const_cast< ::Nrmk::IndyFramework::TargetC*>(
      ::Nrmk::IndyFramework::TargetC::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveCTReq_default_instance_._instance.get_mutable()->blending_ = const_cast< ::Nrmk::IndyFramework::BlendingType*>(
      ::Nrmk::IndyFramework::BlendingType::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveCTReq_default_instance_._instance.get_mutable()->post_condition_ = const_cast< ::Nrmk::IndyFramework::MotionCondition*>(
      ::Nrmk::IndyFramework::MotionCondition::internal_default_instance());
}
class MoveCTReq::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::TargetC& target(const MoveCTReq* msg);
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveCTReq* msg);
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveCTReq* msg);
};

const ::Nrmk::IndyFramework::TargetC&
MoveCTReq::HasBitSetters::target(const MoveCTReq* msg) {
  return *msg->target_;
}
const ::Nrmk::IndyFramework::BlendingType&
MoveCTReq::HasBitSetters::blending(const MoveCTReq* msg) {
  return *msg->blending_;
}
const ::Nrmk::IndyFramework::MotionCondition&
MoveCTReq::HasBitSetters::post_condition(const MoveCTReq* msg) {
  return *msg->post_condition_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveCTReq::kTargetFieldNumber;
const int MoveCTReq::kBlendingFieldNumber;
const int MoveCTReq::kAngleFieldNumber;
const int MoveCTReq::kSettingTypeFieldNumber;
const int MoveCTReq::kMoveTypeFieldNumber;
const int MoveCTReq::kTimeFieldNumber;
const int MoveCTReq::kPostConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveCTReq::MoveCTReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveCTReq)
}
MoveCTReq::MoveCTReq(const MoveCTReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::Nrmk::IndyFramework::TargetC(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from.has_blending()) {
    blending_ = new ::Nrmk::IndyFramework::BlendingType(*from.blending_);
  } else {
    blending_ = nullptr;
  }
  if (from.has_post_condition()) {
    post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from.post_condition_);
  } else {
    post_condition_ = nullptr;
  }
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveCTReq)
}

void MoveCTReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveCTReq_control_5fmsgs_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&target_)) + sizeof(time_));
}

MoveCTReq::~MoveCTReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveCTReq)
  SharedDtor();
}

void MoveCTReq::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete blending_;
  if (this != internal_default_instance()) delete post_condition_;
}

void MoveCTReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveCTReq& MoveCTReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveCTReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveCTReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveCTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveCTReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.TargetC target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_blending(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_setting_type(static_cast<::Nrmk::IndyFramework::CircularSettingType>(val));
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_move_type(static_cast<::Nrmk::IndyFramework::CircularMovingType>(val));
        } else goto handle_unusual;
        continue;
      // float time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_post_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveCTReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveCTReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.TargetC target = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blending()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_setting_type(static_cast< ::Nrmk::IndyFramework::CircularSettingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_move_type(static_cast< ::Nrmk::IndyFramework::CircularMovingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (165 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_post_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveCTReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveCTReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveCTReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveCTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetC target = 1;
  if (this->has_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::target(this), output);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::blending(this), output);
  }

  // float angle = 3;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->angle(), output);
  }

  // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
  if (this->setting_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->setting_type(), output);
  }

  // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
  if (this->move_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->move_type(), output);
  }

  // float time = 20;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(20, this->time(), output);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
  if (this->has_post_condition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, HasBitSetters::post_condition(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveCTReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveCTReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveCTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetC target = 1;
  if (this->has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::target(this), target);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::blending(this), target);
  }

  // float angle = 3;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->angle(), target);
  }

  // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
  if (this->setting_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->setting_type(), target);
  }

  // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
  if (this->move_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->move_type(), target);
  }

  // float time = 20;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->time(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
  if (this->has_post_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, HasBitSetters::post_condition(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveCTReq)
  return target;
}

size_t MoveCTReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveCTReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetC target = 1;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blending_);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
  if (this->has_post_condition()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_condition_);
  }

  // float angle = 3;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
  if (this->setting_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->setting_type());
  }

  // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
  if (this->move_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->move_type());
  }

  // float time = 20;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 2 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveCTReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveCTReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveCTReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveCTReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveCTReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveCTReq)
    MergeFrom(*source);
  }
}

void MoveCTReq::MergeFrom(const MoveCTReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveCTReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    mutable_target()->::Nrmk::IndyFramework::TargetC::MergeFrom(from.target());
  }
  if (from.has_blending()) {
    mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(from.blending());
  }
  if (from.has_post_condition()) {
    mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(from.post_condition());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    set_angle(from.angle());
  }
  if (from.setting_type() != 0) {
    set_setting_type(from.setting_type());
  }
  if (from.move_type() != 0) {
    set_move_type(from.move_type());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    set_time(from.time());
  }
}

void MoveCTReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveCTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveCTReq::CopyFrom(const MoveCTReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveCTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveCTReq::IsInitialized() const {
  return true;
}

void MoveCTReq::Swap(MoveCTReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveCTReq::InternalSwap(MoveCTReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(blending_, other->blending_);
  swap(post_condition_, other->post_condition_);
  swap(angle_, other->angle_);
  swap(setting_type_, other->setting_type_);
  swap(move_type_, other->move_type_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveCTReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveJointTrajReq::InitAsDefaultInstance() {
}
class MoveJointTrajReq::HasBitSetters {
 public:
};

void MoveJointTrajReq::clear_q_list() {
  q_list_.Clear();
}
void MoveJointTrajReq::clear_qdot_list() {
  qdot_list_.Clear();
}
void MoveJointTrajReq::clear_qddot_list() {
  qddot_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveJointTrajReq::kQListFieldNumber;
const int MoveJointTrajReq::kQdotListFieldNumber;
const int MoveJointTrajReq::kQddotListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveJointTrajReq::MoveJointTrajReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveJointTrajReq)
}
MoveJointTrajReq::MoveJointTrajReq(const MoveJointTrajReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      q_list_(from.q_list_),
      qdot_list_(from.qdot_list_),
      qddot_list_(from.qddot_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveJointTrajReq)
}

void MoveJointTrajReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveJointTrajReq_control_5fmsgs_2eproto.base);
}

MoveJointTrajReq::~MoveJointTrajReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveJointTrajReq)
  SharedDtor();
}

void MoveJointTrajReq::SharedDtor() {
}

void MoveJointTrajReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveJointTrajReq& MoveJointTrajReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveJointTrajReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveJointTrajReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveJointTrajReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  q_list_.Clear();
  qdot_list_.Clear();
  qddot_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveJointTrajReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.Vector q_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_q_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.Vector qdot_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_qdot_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.Vector qddot_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_qddot_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveJointTrajReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveJointTrajReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.Vector q_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_q_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.Vector qdot_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_qdot_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.Vector qddot_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_qddot_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveJointTrajReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveJointTrajReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveJointTrajReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveJointTrajReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.Vector q_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->q_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->q_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.Vector qdot_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qdot_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->qdot_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.Vector qddot_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qddot_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->qddot_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveJointTrajReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveJointTrajReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveJointTrajReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.Vector q_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->q_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->q_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.Vector qdot_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qdot_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->qdot_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.Vector qddot_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qddot_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->qddot_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveJointTrajReq)
  return target;
}

size_t MoveJointTrajReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveJointTrajReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.Vector q_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->q_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->q_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.Vector qdot_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->qdot_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->qdot_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.Vector qddot_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->qddot_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->qddot_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveJointTrajReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveJointTrajReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveJointTrajReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveJointTrajReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveJointTrajReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveJointTrajReq)
    MergeFrom(*source);
  }
}

void MoveJointTrajReq::MergeFrom(const MoveJointTrajReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveJointTrajReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  q_list_.MergeFrom(from.q_list_);
  qdot_list_.MergeFrom(from.qdot_list_);
  qddot_list_.MergeFrom(from.qddot_list_);
}

void MoveJointTrajReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveJointTrajReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveJointTrajReq::CopyFrom(const MoveJointTrajReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveJointTrajReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveJointTrajReq::IsInitialized() const {
  return true;
}

void MoveJointTrajReq::Swap(MoveJointTrajReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveJointTrajReq::InternalSwap(MoveJointTrajReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&q_list_)->InternalSwap(CastToBase(&other->q_list_));
  CastToBase(&qdot_list_)->InternalSwap(CastToBase(&other->qdot_list_));
  CastToBase(&qddot_list_)->InternalSwap(CastToBase(&other->qddot_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveJointTrajReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveTaskTrajReq::InitAsDefaultInstance() {
}
class MoveTaskTrajReq::HasBitSetters {
 public:
};

void MoveTaskTrajReq::clear_p_list() {
  p_list_.Clear();
}
void MoveTaskTrajReq::clear_pdot_list() {
  pdot_list_.Clear();
}
void MoveTaskTrajReq::clear_pddot_list() {
  pddot_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveTaskTrajReq::kPListFieldNumber;
const int MoveTaskTrajReq::kPdotListFieldNumber;
const int MoveTaskTrajReq::kPddotListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveTaskTrajReq::MoveTaskTrajReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveTaskTrajReq)
}
MoveTaskTrajReq::MoveTaskTrajReq(const MoveTaskTrajReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      p_list_(from.p_list_),
      pdot_list_(from.pdot_list_),
      pddot_list_(from.pddot_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveTaskTrajReq)
}

void MoveTaskTrajReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveTaskTrajReq_control_5fmsgs_2eproto.base);
}

MoveTaskTrajReq::~MoveTaskTrajReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveTaskTrajReq)
  SharedDtor();
}

void MoveTaskTrajReq::SharedDtor() {
}

void MoveTaskTrajReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveTaskTrajReq& MoveTaskTrajReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveTaskTrajReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveTaskTrajReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveTaskTrajReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  p_list_.Clear();
  pdot_list_.Clear();
  pddot_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveTaskTrajReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.Vector p_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_p_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.Vector pdot_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pdot_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.Vector pddot_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pddot_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveTaskTrajReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveTaskTrajReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.Vector p_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_p_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.Vector pdot_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pdot_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.Vector pddot_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pddot_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveTaskTrajReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveTaskTrajReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveTaskTrajReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveTaskTrajReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.Vector p_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->p_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->p_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.Vector pdot_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pdot_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->pdot_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.Vector pddot_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pddot_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->pddot_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveTaskTrajReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveTaskTrajReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveTaskTrajReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.Vector p_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->p_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->p_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.Vector pdot_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pdot_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->pdot_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.Vector pddot_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pddot_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->pddot_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveTaskTrajReq)
  return target;
}

size_t MoveTaskTrajReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveTaskTrajReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.Vector p_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->p_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->p_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.Vector pdot_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->pdot_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pdot_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.Vector pddot_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->pddot_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pddot_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveTaskTrajReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveTaskTrajReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveTaskTrajReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveTaskTrajReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveTaskTrajReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveTaskTrajReq)
    MergeFrom(*source);
  }
}

void MoveTaskTrajReq::MergeFrom(const MoveTaskTrajReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveTaskTrajReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  p_list_.MergeFrom(from.p_list_);
  pdot_list_.MergeFrom(from.pdot_list_);
  pddot_list_.MergeFrom(from.pddot_list_);
}

void MoveTaskTrajReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveTaskTrajReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveTaskTrajReq::CopyFrom(const MoveTaskTrajReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveTaskTrajReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveTaskTrajReq::IsInitialized() const {
  return true;
}

void MoveTaskTrajReq::Swap(MoveTaskTrajReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveTaskTrajReq::InternalSwap(MoveTaskTrajReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&p_list_)->InternalSwap(CastToBase(&other->p_list_));
  CastToBase(&pdot_list_)->InternalSwap(CastToBase(&other->pdot_list_));
  CastToBase(&pddot_list_)->InternalSwap(CastToBase(&other->pddot_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveTaskTrajReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveConveyorReq::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_MoveConveyorReq_default_instance_._instance.get_mutable()->post_condition_ = const_cast< ::Nrmk::IndyFramework::MotionCondition*>(
      ::Nrmk::IndyFramework::MotionCondition::internal_default_instance());
}
class MoveConveyorReq::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveConveyorReq* msg);
};

const ::Nrmk::IndyFramework::MotionCondition&
MoveConveyorReq::HasBitSetters::post_condition(const MoveConveyorReq* msg) {
  return *msg->post_condition_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveConveyorReq::kTeachingModeFieldNumber;
const int MoveConveyorReq::kBypassSingularFieldNumber;
const int MoveConveyorReq::kAccRatioFieldNumber;
const int MoveConveyorReq::kPostConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveConveyorReq::MoveConveyorReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveConveyorReq)
}
MoveConveyorReq::MoveConveyorReq(const MoveConveyorReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_post_condition()) {
    post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from.post_condition_);
  } else {
    post_condition_ = nullptr;
  }
  ::memcpy(&teaching_mode_, &from.teaching_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&acc_ratio_) -
    reinterpret_cast<char*>(&teaching_mode_)) + sizeof(acc_ratio_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveConveyorReq)
}

void MoveConveyorReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveConveyorReq_control_5fmsgs_2eproto.base);
  ::memset(&post_condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_ratio_) -
      reinterpret_cast<char*>(&post_condition_)) + sizeof(acc_ratio_));
}

MoveConveyorReq::~MoveConveyorReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveConveyorReq)
  SharedDtor();
}

void MoveConveyorReq::SharedDtor() {
  if (this != internal_default_instance()) delete post_condition_;
}

void MoveConveyorReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveConveyorReq& MoveConveyorReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveConveyorReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveConveyorReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveConveyorReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
  ::memset(&teaching_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_ratio_) -
      reinterpret_cast<char*>(&teaching_mode_)) + sizeof(acc_ratio_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveConveyorReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool teaching_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          teaching_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bypass_singular = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bypass_singular_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float acc_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          acc_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.MotionCondition post_condition = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_post_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveConveyorReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveConveyorReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool teaching_mode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &teaching_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bypass_singular = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bypass_singular_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_ratio = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.MotionCondition post_condition = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_post_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveConveyorReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveConveyorReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveConveyorReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveConveyorReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool teaching_mode = 1;
  if (this->teaching_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->teaching_mode(), output);
  }

  // bool bypass_singular = 2;
  if (this->bypass_singular() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->bypass_singular(), output);
  }

  // float acc_ratio = 3;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->acc_ratio(), output);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 10;
  if (this->has_post_condition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::post_condition(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveConveyorReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveConveyorReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveConveyorReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool teaching_mode = 1;
  if (this->teaching_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->teaching_mode(), target);
  }

  // bool bypass_singular = 2;
  if (this->bypass_singular() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->bypass_singular(), target);
  }

  // float acc_ratio = 3;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 10;
  if (this->has_post_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::post_condition(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveConveyorReq)
  return target;
}

size_t MoveConveyorReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveConveyorReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.MotionCondition post_condition = 10;
  if (this->has_post_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_condition_);
  }

  // bool teaching_mode = 1;
  if (this->teaching_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool bypass_singular = 2;
  if (this->bypass_singular() != 0) {
    total_size += 1 + 1;
  }

  // float acc_ratio = 3;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveConveyorReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveConveyorReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveConveyorReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveConveyorReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveConveyorReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveConveyorReq)
    MergeFrom(*source);
  }
}

void MoveConveyorReq::MergeFrom(const MoveConveyorReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveConveyorReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_post_condition()) {
    mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(from.post_condition());
  }
  if (from.teaching_mode() != 0) {
    set_teaching_mode(from.teaching_mode());
  }
  if (from.bypass_singular() != 0) {
    set_bypass_singular(from.bypass_singular());
  }
  if (!(from.acc_ratio() <= 0 && from.acc_ratio() >= 0)) {
    set_acc_ratio(from.acc_ratio());
  }
}

void MoveConveyorReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveConveyorReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveConveyorReq::CopyFrom(const MoveConveyorReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveConveyorReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveConveyorReq::IsInitialized() const {
  return true;
}

void MoveConveyorReq::Swap(MoveConveyorReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveConveyorReq::InternalSwap(MoveConveyorReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(post_condition_, other->post_condition_);
  swap(teaching_mode_, other->teaching_mode_);
  swap(bypass_singular_, other->bypass_singular_);
  swap(acc_ratio_, other->acc_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveConveyorReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WaitIOReq::InitAsDefaultInstance() {
}
class WaitIOReq::HasBitSetters {
 public:
};

void WaitIOReq::clear_di_list() {
  di_list_.Clear();
}
void WaitIOReq::clear_do_list() {
  do_list_.Clear();
}
void WaitIOReq::clear_end_di_list() {
  end_di_list_.Clear();
}
void WaitIOReq::clear_end_do_list() {
  end_do_list_.Clear();
}
void WaitIOReq::clear_set_do_list() {
  set_do_list_.Clear();
}
void WaitIOReq::clear_set_end_do_list() {
  set_end_do_list_.Clear();
}
void WaitIOReq::clear_set_ao_list() {
  set_ao_list_.Clear();
}
void WaitIOReq::clear_set_end_ao_list() {
  set_end_ao_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaitIOReq::kDiListFieldNumber;
const int WaitIOReq::kDoListFieldNumber;
const int WaitIOReq::kEndDiListFieldNumber;
const int WaitIOReq::kEndDoListFieldNumber;
const int WaitIOReq::kConjunctionFieldNumber;
const int WaitIOReq::kSetDoListFieldNumber;
const int WaitIOReq::kSetEndDoListFieldNumber;
const int WaitIOReq::kSetAoListFieldNumber;
const int WaitIOReq::kSetEndAoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitIOReq::WaitIOReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.WaitIOReq)
}
WaitIOReq::WaitIOReq(const WaitIOReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      di_list_(from.di_list_),
      do_list_(from.do_list_),
      end_di_list_(from.end_di_list_),
      end_do_list_(from.end_do_list_),
      set_do_list_(from.set_do_list_),
      set_end_do_list_(from.set_end_do_list_),
      set_ao_list_(from.set_ao_list_),
      set_end_ao_list_(from.set_end_ao_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  conjunction_ = from.conjunction_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.WaitIOReq)
}

void WaitIOReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WaitIOReq_control_5fmsgs_2eproto.base);
  conjunction_ = 0;
}

WaitIOReq::~WaitIOReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.WaitIOReq)
  SharedDtor();
}

void WaitIOReq::SharedDtor() {
}

void WaitIOReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WaitIOReq& WaitIOReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WaitIOReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void WaitIOReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.WaitIOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  di_list_.Clear();
  do_list_.Clear();
  end_di_list_.Clear();
  end_do_list_.Clear();
  set_do_list_.Clear();
  set_end_do_list_.Clear();
  set_ao_list_.Clear();
  set_end_ao_list_.Clear();
  conjunction_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WaitIOReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.DigitalSignal di_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_di_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal do_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal end_di_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_end_di_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal end_do_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_end_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // int32 conjunction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          conjunction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WaitIOReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.WaitIOReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.DigitalSignal di_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_di_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal do_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal end_di_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_end_di_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal end_do_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_end_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 conjunction = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &conjunction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.WaitIOReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.WaitIOReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WaitIOReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.WaitIOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->di_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->di_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->do_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal end_di_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_di_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->end_di_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal end_do_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->end_do_list(static_cast<int>(i)),
      output);
  }

  // int32 conjunction = 5;
  if (this->conjunction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->conjunction(), output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->set_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->set_end_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->set_ao_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->set_end_ao_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.WaitIOReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitIOReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.WaitIOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->di_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->di_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->do_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal end_di_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_di_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->end_di_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal end_do_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->end_do_list(static_cast<int>(i)), target);
  }

  // int32 conjunction = 5;
  if (this->conjunction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->conjunction(), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->set_do_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->set_end_do_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->set_ao_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->set_end_ao_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.WaitIOReq)
  return target;
}

size_t WaitIOReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.WaitIOReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->di_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->di_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal do_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->do_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal end_di_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->end_di_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->end_di_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal end_do_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->end_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->end_do_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->set_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_do_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_do_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->set_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_ao_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_ao_list(static_cast<int>(i)));
    }
  }

  // int32 conjunction = 5;
  if (this->conjunction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->conjunction());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitIOReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.WaitIOReq)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitIOReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WaitIOReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.WaitIOReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.WaitIOReq)
    MergeFrom(*source);
  }
}

void WaitIOReq::MergeFrom(const WaitIOReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.WaitIOReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  di_list_.MergeFrom(from.di_list_);
  do_list_.MergeFrom(from.do_list_);
  end_di_list_.MergeFrom(from.end_di_list_);
  end_do_list_.MergeFrom(from.end_do_list_);
  set_do_list_.MergeFrom(from.set_do_list_);
  set_end_do_list_.MergeFrom(from.set_end_do_list_);
  set_ao_list_.MergeFrom(from.set_ao_list_);
  set_end_ao_list_.MergeFrom(from.set_end_ao_list_);
  if (from.conjunction() != 0) {
    set_conjunction(from.conjunction());
  }
}

void WaitIOReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.WaitIOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitIOReq::CopyFrom(const WaitIOReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.WaitIOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitIOReq::IsInitialized() const {
  return true;
}

void WaitIOReq::Swap(WaitIOReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitIOReq::InternalSwap(WaitIOReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&di_list_)->InternalSwap(CastToBase(&other->di_list_));
  CastToBase(&do_list_)->InternalSwap(CastToBase(&other->do_list_));
  CastToBase(&end_di_list_)->InternalSwap(CastToBase(&other->end_di_list_));
  CastToBase(&end_do_list_)->InternalSwap(CastToBase(&other->end_do_list_));
  CastToBase(&set_do_list_)->InternalSwap(CastToBase(&other->set_do_list_));
  CastToBase(&set_end_do_list_)->InternalSwap(CastToBase(&other->set_end_do_list_));
  CastToBase(&set_ao_list_)->InternalSwap(CastToBase(&other->set_ao_list_));
  CastToBase(&set_end_ao_list_)->InternalSwap(CastToBase(&other->set_end_ao_list_));
  swap(conjunction_, other->conjunction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitIOReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WaitTimeReq::InitAsDefaultInstance() {
}
class WaitTimeReq::HasBitSetters {
 public:
};

void WaitTimeReq::clear_set_do_list() {
  set_do_list_.Clear();
}
void WaitTimeReq::clear_set_end_do_list() {
  set_end_do_list_.Clear();
}
void WaitTimeReq::clear_set_ao_list() {
  set_ao_list_.Clear();
}
void WaitTimeReq::clear_set_end_ao_list() {
  set_end_ao_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaitTimeReq::kTimeFieldNumber;
const int WaitTimeReq::kSetDoListFieldNumber;
const int WaitTimeReq::kSetEndDoListFieldNumber;
const int WaitTimeReq::kSetAoListFieldNumber;
const int WaitTimeReq::kSetEndAoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitTimeReq::WaitTimeReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.WaitTimeReq)
}
WaitTimeReq::WaitTimeReq(const WaitTimeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      set_do_list_(from.set_do_list_),
      set_end_do_list_(from.set_end_do_list_),
      set_ao_list_(from.set_ao_list_),
      set_end_ao_list_(from.set_end_ao_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.WaitTimeReq)
}

void WaitTimeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WaitTimeReq_control_5fmsgs_2eproto.base);
  time_ = 0;
}

WaitTimeReq::~WaitTimeReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.WaitTimeReq)
  SharedDtor();
}

void WaitTimeReq::SharedDtor() {
}

void WaitTimeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WaitTimeReq& WaitTimeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WaitTimeReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void WaitTimeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.WaitTimeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_do_list_.Clear();
  set_end_do_list_.Clear();
  set_ao_list_.Clear();
  set_end_ao_list_.Clear();
  time_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WaitTimeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WaitTimeReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.WaitTimeReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.WaitTimeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.WaitTimeReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WaitTimeReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.WaitTimeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->time(), output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->set_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->set_end_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->set_ao_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->set_end_ao_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.WaitTimeReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitTimeReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.WaitTimeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->time(), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->set_do_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->set_end_do_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->set_ao_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->set_end_ao_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.WaitTimeReq)
  return target;
}

size_t WaitTimeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.WaitTimeReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->set_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_do_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_do_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->set_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_ao_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_ao_list(static_cast<int>(i)));
    }
  }

  // float time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitTimeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.WaitTimeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitTimeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WaitTimeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.WaitTimeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.WaitTimeReq)
    MergeFrom(*source);
  }
}

void WaitTimeReq::MergeFrom(const WaitTimeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.WaitTimeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  set_do_list_.MergeFrom(from.set_do_list_);
  set_end_do_list_.MergeFrom(from.set_end_do_list_);
  set_ao_list_.MergeFrom(from.set_ao_list_);
  set_end_ao_list_.MergeFrom(from.set_end_ao_list_);
  if (!(from.time() <= 0 && from.time() >= 0)) {
    set_time(from.time());
  }
}

void WaitTimeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.WaitTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitTimeReq::CopyFrom(const WaitTimeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.WaitTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitTimeReq::IsInitialized() const {
  return true;
}

void WaitTimeReq::Swap(WaitTimeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitTimeReq::InternalSwap(WaitTimeReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&set_do_list_)->InternalSwap(CastToBase(&other->set_do_list_));
  CastToBase(&set_end_do_list_)->InternalSwap(CastToBase(&other->set_end_do_list_));
  CastToBase(&set_ao_list_)->InternalSwap(CastToBase(&other->set_ao_list_));
  CastToBase(&set_end_ao_list_)->InternalSwap(CastToBase(&other->set_end_ao_list_));
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitTimeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WaitProgressReq::InitAsDefaultInstance() {
}
class WaitProgressReq::HasBitSetters {
 public:
};

void WaitProgressReq::clear_set_do_list() {
  set_do_list_.Clear();
}
void WaitProgressReq::clear_set_end_do_list() {
  set_end_do_list_.Clear();
}
void WaitProgressReq::clear_set_ao_list() {
  set_ao_list_.Clear();
}
void WaitProgressReq::clear_set_end_ao_list() {
  set_end_ao_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaitProgressReq::kProgressFieldNumber;
const int WaitProgressReq::kSetDoListFieldNumber;
const int WaitProgressReq::kSetEndDoListFieldNumber;
const int WaitProgressReq::kSetAoListFieldNumber;
const int WaitProgressReq::kSetEndAoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitProgressReq::WaitProgressReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.WaitProgressReq)
}
WaitProgressReq::WaitProgressReq(const WaitProgressReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      set_do_list_(from.set_do_list_),
      set_end_do_list_(from.set_end_do_list_),
      set_ao_list_(from.set_ao_list_),
      set_end_ao_list_(from.set_end_ao_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.WaitProgressReq)
}

void WaitProgressReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WaitProgressReq_control_5fmsgs_2eproto.base);
  progress_ = 0;
}

WaitProgressReq::~WaitProgressReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.WaitProgressReq)
  SharedDtor();
}

void WaitProgressReq::SharedDtor() {
}

void WaitProgressReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WaitProgressReq& WaitProgressReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WaitProgressReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void WaitProgressReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.WaitProgressReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_do_list_.Clear();
  set_end_do_list_.Clear();
  set_ao_list_.Clear();
  set_end_ao_list_.Clear();
  progress_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WaitProgressReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WaitProgressReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.WaitProgressReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 progress = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.WaitProgressReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.WaitProgressReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WaitProgressReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.WaitProgressReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 progress = 1;
  if (this->progress() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->progress(), output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->set_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->set_end_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->set_ao_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->set_end_ao_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.WaitProgressReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitProgressReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.WaitProgressReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 progress = 1;
  if (this->progress() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->progress(), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->set_do_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->set_end_do_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->set_ao_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->set_end_ao_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.WaitProgressReq)
  return target;
}

size_t WaitProgressReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.WaitProgressReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->set_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_do_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_do_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->set_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_ao_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_ao_list(static_cast<int>(i)));
    }
  }

  // int32 progress = 1;
  if (this->progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->progress());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitProgressReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.WaitProgressReq)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitProgressReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WaitProgressReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.WaitProgressReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.WaitProgressReq)
    MergeFrom(*source);
  }
}

void WaitProgressReq::MergeFrom(const WaitProgressReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.WaitProgressReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  set_do_list_.MergeFrom(from.set_do_list_);
  set_end_do_list_.MergeFrom(from.set_end_do_list_);
  set_ao_list_.MergeFrom(from.set_ao_list_);
  set_end_ao_list_.MergeFrom(from.set_end_ao_list_);
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
}

void WaitProgressReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.WaitProgressReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitProgressReq::CopyFrom(const WaitProgressReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.WaitProgressReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitProgressReq::IsInitialized() const {
  return true;
}

void WaitProgressReq::Swap(WaitProgressReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitProgressReq::InternalSwap(WaitProgressReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&set_do_list_)->InternalSwap(CastToBase(&other->set_do_list_));
  CastToBase(&set_end_do_list_)->InternalSwap(CastToBase(&other->set_end_do_list_));
  CastToBase(&set_ao_list_)->InternalSwap(CastToBase(&other->set_ao_list_));
  CastToBase(&set_end_ao_list_)->InternalSwap(CastToBase(&other->set_end_ao_list_));
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitProgressReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WaitTrajReq::InitAsDefaultInstance() {
}
class WaitTrajReq::HasBitSetters {
 public:
};

void WaitTrajReq::clear_set_do_list() {
  set_do_list_.Clear();
}
void WaitTrajReq::clear_set_end_do_list() {
  set_end_do_list_.Clear();
}
void WaitTrajReq::clear_set_ao_list() {
  set_ao_list_.Clear();
}
void WaitTrajReq::clear_set_end_ao_list() {
  set_end_ao_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaitTrajReq::kTrajConditionFieldNumber;
const int WaitTrajReq::kSetDoListFieldNumber;
const int WaitTrajReq::kSetEndDoListFieldNumber;
const int WaitTrajReq::kSetAoListFieldNumber;
const int WaitTrajReq::kSetEndAoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitTrajReq::WaitTrajReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.WaitTrajReq)
}
WaitTrajReq::WaitTrajReq(const WaitTrajReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      set_do_list_(from.set_do_list_),
      set_end_do_list_(from.set_end_do_list_),
      set_ao_list_(from.set_ao_list_),
      set_end_ao_list_(from.set_end_ao_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  traj_condition_ = from.traj_condition_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.WaitTrajReq)
}

void WaitTrajReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WaitTrajReq_control_5fmsgs_2eproto.base);
  traj_condition_ = 0;
}

WaitTrajReq::~WaitTrajReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.WaitTrajReq)
  SharedDtor();
}

void WaitTrajReq::SharedDtor() {
}

void WaitTrajReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WaitTrajReq& WaitTrajReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WaitTrajReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void WaitTrajReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.WaitTrajReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_do_list_.Clear();
  set_end_do_list_.Clear();
  set_ao_list_.Clear();
  set_end_ao_list_.Clear();
  traj_condition_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WaitTrajReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.TrajCondition traj_condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_traj_condition(static_cast<::Nrmk::IndyFramework::TrajCondition>(val));
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WaitTrajReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.WaitTrajReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.TrajCondition traj_condition = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_traj_condition(static_cast< ::Nrmk::IndyFramework::TrajCondition >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.WaitTrajReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.WaitTrajReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WaitTrajReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.WaitTrajReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TrajCondition traj_condition = 1;
  if (this->traj_condition() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->traj_condition(), output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->set_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->set_end_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->set_ao_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->set_end_ao_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.WaitTrajReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitTrajReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.WaitTrajReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TrajCondition traj_condition = 1;
  if (this->traj_condition() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->traj_condition(), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->set_do_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->set_end_do_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->set_ao_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->set_end_ao_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.WaitTrajReq)
  return target;
}

size_t WaitTrajReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.WaitTrajReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->set_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_do_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_do_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->set_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_ao_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_ao_list(static_cast<int>(i)));
    }
  }

  // .Nrmk.IndyFramework.TrajCondition traj_condition = 1;
  if (this->traj_condition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->traj_condition());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitTrajReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.WaitTrajReq)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitTrajReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WaitTrajReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.WaitTrajReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.WaitTrajReq)
    MergeFrom(*source);
  }
}

void WaitTrajReq::MergeFrom(const WaitTrajReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.WaitTrajReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  set_do_list_.MergeFrom(from.set_do_list_);
  set_end_do_list_.MergeFrom(from.set_end_do_list_);
  set_ao_list_.MergeFrom(from.set_ao_list_);
  set_end_ao_list_.MergeFrom(from.set_end_ao_list_);
  if (from.traj_condition() != 0) {
    set_traj_condition(from.traj_condition());
  }
}

void WaitTrajReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.WaitTrajReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitTrajReq::CopyFrom(const WaitTrajReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.WaitTrajReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitTrajReq::IsInitialized() const {
  return true;
}

void WaitTrajReq::Swap(WaitTrajReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitTrajReq::InternalSwap(WaitTrajReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&set_do_list_)->InternalSwap(CastToBase(&other->set_do_list_));
  CastToBase(&set_end_do_list_)->InternalSwap(CastToBase(&other->set_end_do_list_));
  CastToBase(&set_ao_list_)->InternalSwap(CastToBase(&other->set_ao_list_));
  CastToBase(&set_end_ao_list_)->InternalSwap(CastToBase(&other->set_end_ao_list_));
  swap(traj_condition_, other->traj_condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitTrajReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WaitRadiusReq::InitAsDefaultInstance() {
}
class WaitRadiusReq::HasBitSetters {
 public:
};

void WaitRadiusReq::clear_set_do_list() {
  set_do_list_.Clear();
}
void WaitRadiusReq::clear_set_end_do_list() {
  set_end_do_list_.Clear();
}
void WaitRadiusReq::clear_set_ao_list() {
  set_ao_list_.Clear();
}
void WaitRadiusReq::clear_set_end_ao_list() {
  set_end_ao_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaitRadiusReq::kRadiusFieldNumber;
const int WaitRadiusReq::kSetDoListFieldNumber;
const int WaitRadiusReq::kSetEndDoListFieldNumber;
const int WaitRadiusReq::kSetAoListFieldNumber;
const int WaitRadiusReq::kSetEndAoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaitRadiusReq::WaitRadiusReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.WaitRadiusReq)
}
WaitRadiusReq::WaitRadiusReq(const WaitRadiusReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      set_do_list_(from.set_do_list_),
      set_end_do_list_(from.set_end_do_list_),
      set_ao_list_(from.set_ao_list_),
      set_end_ao_list_(from.set_end_ao_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.WaitRadiusReq)
}

void WaitRadiusReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WaitRadiusReq_control_5fmsgs_2eproto.base);
  radius_ = 0;
}

WaitRadiusReq::~WaitRadiusReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.WaitRadiusReq)
  SharedDtor();
}

void WaitRadiusReq::SharedDtor() {
}

void WaitRadiusReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WaitRadiusReq& WaitRadiusReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WaitRadiusReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void WaitRadiusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.WaitRadiusReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_do_list_.Clear();
  set_end_do_list_.Clear();
  set_ao_list_.Clear();
  set_end_ao_list_.Clear();
  radius_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WaitRadiusReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WaitRadiusReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.WaitRadiusReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 radius = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.WaitRadiusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.WaitRadiusReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WaitRadiusReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.WaitRadiusReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 radius = 1;
  if (this->radius() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->radius(), output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->set_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->set_end_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->set_ao_list(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->set_end_ao_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.WaitRadiusReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitRadiusReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.WaitRadiusReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 radius = 1;
  if (this->radius() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->radius(), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->set_do_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->set_end_do_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->set_ao_list(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->set_end_ao_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.WaitRadiusReq)
  return target;
}

size_t WaitRadiusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.WaitRadiusReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->set_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_do_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_do_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->set_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_ao_list(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_ao_list(static_cast<int>(i)));
    }
  }

  // int32 radius = 1;
  if (this->radius() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->radius());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitRadiusReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.WaitRadiusReq)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitRadiusReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WaitRadiusReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.WaitRadiusReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.WaitRadiusReq)
    MergeFrom(*source);
  }
}

void WaitRadiusReq::MergeFrom(const WaitRadiusReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.WaitRadiusReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  set_do_list_.MergeFrom(from.set_do_list_);
  set_end_do_list_.MergeFrom(from.set_end_do_list_);
  set_ao_list_.MergeFrom(from.set_ao_list_);
  set_end_ao_list_.MergeFrom(from.set_end_ao_list_);
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void WaitRadiusReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.WaitRadiusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitRadiusReq::CopyFrom(const WaitRadiusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.WaitRadiusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitRadiusReq::IsInitialized() const {
  return true;
}

void WaitRadiusReq::Swap(WaitRadiusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaitRadiusReq::InternalSwap(WaitRadiusReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&set_do_list_)->InternalSwap(CastToBase(&other->set_do_list_));
  CastToBase(&set_end_do_list_)->InternalSwap(CastToBase(&other->set_end_do_list_));
  CastToBase(&set_ao_list_)->InternalSwap(CastToBase(&other->set_ao_list_));
  CastToBase(&set_end_ao_list_)->InternalSwap(CastToBase(&other->set_end_ao_list_));
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitRadiusReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Program::InitAsDefaultInstance() {
}
class Program::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Program::kProgNameFieldNumber;
const int Program::kProgIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Program::Program()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.Program)
}
Program::Program(const Program& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prog_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.prog_name().size() > 0) {
    prog_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prog_name_);
  }
  prog_idx_ = from.prog_idx_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.Program)
}

void Program::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Program_control_5fmsgs_2eproto.base);
  prog_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prog_idx_ = 0;
}

Program::~Program() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.Program)
  SharedDtor();
}

void Program::SharedDtor() {
  prog_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Program::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Program& Program::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Program_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Program::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.Program)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prog_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prog_idx_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Program::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string prog_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_prog_name(), ptr, ctx, "Nrmk.IndyFramework.Program.prog_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prog_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prog_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Program::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.Program)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string prog_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_prog_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->prog_name().data(), static_cast<int>(this->prog_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.Program.prog_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 prog_idx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &prog_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.Program)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.Program)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Program::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.Program)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prog_name = 1;
  if (this->prog_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->prog_name().data(), static_cast<int>(this->prog_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.Program.prog_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prog_name(), output);
  }

  // int32 prog_idx = 2;
  if (this->prog_idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->prog_idx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.Program)
}

::PROTOBUF_NAMESPACE_ID::uint8* Program::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.Program)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prog_name = 1;
  if (this->prog_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->prog_name().data(), static_cast<int>(this->prog_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.Program.prog_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->prog_name(), target);
  }

  // int32 prog_idx = 2;
  if (this->prog_idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->prog_idx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.Program)
  return target;
}

size_t Program::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.Program)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prog_name = 1;
  if (this->prog_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->prog_name());
  }

  // int32 prog_idx = 2;
  if (this->prog_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->prog_idx());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Program::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.Program)
  GOOGLE_DCHECK_NE(&from, this);
  const Program* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Program>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.Program)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.Program)
    MergeFrom(*source);
  }
}

void Program::MergeFrom(const Program& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.Program)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prog_name().size() > 0) {

    prog_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prog_name_);
  }
  if (from.prog_idx() != 0) {
    set_prog_idx(from.prog_idx());
  }
}

void Program::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.Program)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Program::CopyFrom(const Program& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.Program)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Program::IsInitialized() const {
  return true;
}

void Program::Swap(Program* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Program::InternalSwap(Program* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prog_name_.Swap(&other->prog_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prog_idx_, other->prog_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Program::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TuningProgram::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_TuningProgram_default_instance_._instance.get_mutable()->program_ = const_cast< ::Nrmk::IndyFramework::Program*>(
      ::Nrmk::IndyFramework::Program::internal_default_instance());
}
class TuningProgram::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Program& program(const TuningProgram* msg);
};

const ::Nrmk::IndyFramework::Program&
TuningProgram::HasBitSetters::program(const TuningProgram* msg) {
  return *msg->program_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TuningProgram::kProgramFieldNumber;
const int TuningProgram::kTuningSpaceFieldNumber;
const int TuningProgram::kPrecisionFieldNumber;
const int TuningProgram::kVelLevelMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TuningProgram::TuningProgram()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TuningProgram)
}
TuningProgram::TuningProgram(const TuningProgram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_program()) {
    program_ = new ::Nrmk::IndyFramework::Program(*from.program_);
  } else {
    program_ = nullptr;
  }
  ::memcpy(&tuning_space_, &from.tuning_space_,
    static_cast<size_t>(reinterpret_cast<char*>(&vel_level_max_) -
    reinterpret_cast<char*>(&tuning_space_)) + sizeof(vel_level_max_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TuningProgram)
}

void TuningProgram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TuningProgram_control_5fmsgs_2eproto.base);
  ::memset(&program_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vel_level_max_) -
      reinterpret_cast<char*>(&program_)) + sizeof(vel_level_max_));
}

TuningProgram::~TuningProgram() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TuningProgram)
  SharedDtor();
}

void TuningProgram::SharedDtor() {
  if (this != internal_default_instance()) delete program_;
}

void TuningProgram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TuningProgram& TuningProgram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TuningProgram_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TuningProgram::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TuningProgram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && program_ != nullptr) {
    delete program_;
  }
  program_ = nullptr;
  ::memset(&tuning_space_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vel_level_max_) -
      reinterpret_cast<char*>(&tuning_space_)) + sizeof(vel_level_max_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TuningProgram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.Program program = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_program(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.TuningSpace tuning_space = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_tuning_space(static_cast<::Nrmk::IndyFramework::TuningSpace>(val));
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.TuningPrecision precision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_precision(static_cast<::Nrmk::IndyFramework::TuningPrecision>(val));
        } else goto handle_unusual;
        continue;
      // uint32 vel_level_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vel_level_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TuningProgram::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TuningProgram)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.Program program = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_program()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.TuningSpace tuning_space = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tuning_space(static_cast< ::Nrmk::IndyFramework::TuningSpace >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.TuningPrecision precision = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_precision(static_cast< ::Nrmk::IndyFramework::TuningPrecision >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vel_level_max = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vel_level_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TuningProgram)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TuningProgram)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TuningProgram::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TuningProgram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Program program = 1;
  if (this->has_program()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::program(this), output);
  }

  // .Nrmk.IndyFramework.TuningSpace tuning_space = 2;
  if (this->tuning_space() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->tuning_space(), output);
  }

  // .Nrmk.IndyFramework.TuningPrecision precision = 3;
  if (this->precision() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->precision(), output);
  }

  // uint32 vel_level_max = 4;
  if (this->vel_level_max() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->vel_level_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TuningProgram)
}

::PROTOBUF_NAMESPACE_ID::uint8* TuningProgram::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TuningProgram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Program program = 1;
  if (this->has_program()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::program(this), target);
  }

  // .Nrmk.IndyFramework.TuningSpace tuning_space = 2;
  if (this->tuning_space() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->tuning_space(), target);
  }

  // .Nrmk.IndyFramework.TuningPrecision precision = 3;
  if (this->precision() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->precision(), target);
  }

  // uint32 vel_level_max = 4;
  if (this->vel_level_max() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->vel_level_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TuningProgram)
  return target;
}

size_t TuningProgram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TuningProgram)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Program program = 1;
  if (this->has_program()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *program_);
  }

  // .Nrmk.IndyFramework.TuningSpace tuning_space = 2;
  if (this->tuning_space() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tuning_space());
  }

  // .Nrmk.IndyFramework.TuningPrecision precision = 3;
  if (this->precision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->precision());
  }

  // uint32 vel_level_max = 4;
  if (this->vel_level_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->vel_level_max());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TuningProgram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TuningProgram)
  GOOGLE_DCHECK_NE(&from, this);
  const TuningProgram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TuningProgram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TuningProgram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TuningProgram)
    MergeFrom(*source);
  }
}

void TuningProgram::MergeFrom(const TuningProgram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TuningProgram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_program()) {
    mutable_program()->::Nrmk::IndyFramework::Program::MergeFrom(from.program());
  }
  if (from.tuning_space() != 0) {
    set_tuning_space(from.tuning_space());
  }
  if (from.precision() != 0) {
    set_precision(from.precision());
  }
  if (from.vel_level_max() != 0) {
    set_vel_level_max(from.vel_level_max());
  }
}

void TuningProgram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TuningProgram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TuningProgram::CopyFrom(const TuningProgram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TuningProgram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TuningProgram::IsInitialized() const {
  return true;
}

void TuningProgram::Swap(TuningProgram* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TuningProgram::InternalSwap(TuningProgram* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(program_, other->program_);
  swap(tuning_space_, other->tuning_space_);
  swap(precision_, other->precision_);
  swap(vel_level_max_, other->vel_level_max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TuningProgram::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProgramInfo::InitAsDefaultInstance() {
}
class ProgramInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProgramInfo::kPathFieldNumber;
const int ProgramInfo::kSizeFieldNumber;
const int ProgramInfo::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProgramInfo::ProgramInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.ProgramInfo)
}
ProgramInfo::ProgramInfo(const ProgramInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.timestamp().size() > 0) {
    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ProgramInfo)
}

void ProgramInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProgramInfo_control_5fmsgs_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = PROTOBUF_ULONGLONG(0);
}

ProgramInfo::~ProgramInfo() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ProgramInfo)
  SharedDtor();
}

void ProgramInfo::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProgramInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProgramInfo& ProgramInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProgramInfo_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ProgramInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ProgramInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProgramInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_path(), ptr, ctx, "Nrmk.IndyFramework.ProgramInfo.path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_timestamp(), ptr, ctx, "Nrmk.IndyFramework.ProgramInfo.timestamp");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProgramInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.ProgramInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.ProgramInfo.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), static_cast<int>(this->timestamp().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.ProgramInfo.timestamp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.ProgramInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.ProgramInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProgramInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.ProgramInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ProgramInfo.path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // string timestamp = 3;
  if (this->timestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ProgramInfo.timestamp");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.ProgramInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProgramInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ProgramInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ProgramInfo.path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // string timestamp = 3;
  if (this->timestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ProgramInfo.timestamp");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ProgramInfo)
  return target;
}

size_t ProgramInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ProgramInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string timestamp = 3;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProgramInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.ProgramInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProgramInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProgramInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.ProgramInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.ProgramInfo)
    MergeFrom(*source);
  }
}

void ProgramInfo::MergeFrom(const ProgramInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ProgramInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void ProgramInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.ProgramInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgramInfo::CopyFrom(const ProgramInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ProgramInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgramInfo::IsInitialized() const {
  return true;
}

void ProgramInfo::Swap(ProgramInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProgramInfo::InternalSwap(ProgramInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timestamp_.Swap(&other->timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProgramInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Variable::InitAsDefaultInstance() {
}
class Variable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Variable::kNameFieldNumber;
const int Variable::kAddrFieldNumber;
const int Variable::kTypeFieldNumber;
const int Variable::kInWatchingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Variable::Variable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.Variable)
}
Variable::Variable(const Variable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_watching_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(in_watching_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.Variable)
}

void Variable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Variable_control_5fmsgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_watching_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(in_watching_));
}

Variable::~Variable() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.Variable)
  SharedDtor();
}

void Variable::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Variable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Variable& Variable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Variable_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Variable::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.Variable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_watching_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(in_watching_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Variable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "Nrmk.IndyFramework.Variable.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_type(), ptr, ctx, "Nrmk.IndyFramework.Variable.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool in_watching = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          in_watching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Variable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.Variable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.Variable.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 addr = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.Variable.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_watching = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_watching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.Variable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.Variable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Variable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.Variable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.Variable.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 addr = 2;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->addr(), output);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.Variable.type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // bool in_watching = 4;
  if (this->in_watching() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->in_watching(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.Variable)
}

::PROTOBUF_NAMESPACE_ID::uint8* Variable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.Variable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.Variable.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 addr = 2;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->addr(), target);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.Variable.type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // bool in_watching = 4;
  if (this->in_watching() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->in_watching(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.Variable)
  return target;
}

size_t Variable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.Variable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->type());
  }

  // int32 addr = 2;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  // bool in_watching = 4;
  if (this->in_watching() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Variable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.Variable)
  GOOGLE_DCHECK_NE(&from, this);
  const Variable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Variable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.Variable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.Variable)
    MergeFrom(*source);
  }
}

void Variable::MergeFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.Variable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.addr() != 0) {
    set_addr(from.addr());
  }
  if (from.in_watching() != 0) {
    set_in_watching(from.in_watching());
  }
}

void Variable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Variable::CopyFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variable::IsInitialized() const {
  return true;
}

void Variable::Swap(Variable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Variable::InternalSwap(Variable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(addr_, other->addr_);
  swap(in_watching_, other->in_watching_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Variable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntVariable::InitAsDefaultInstance() {
}
class IntVariable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntVariable::kAddrFieldNumber;
const int IntVariable::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntVariable::IntVariable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.IntVariable)
}
IntVariable::IntVariable(const IntVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&addr_) -
    reinterpret_cast<char*>(&value_)) + sizeof(addr_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.IntVariable)
}

void IntVariable::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addr_) -
      reinterpret_cast<char*>(&value_)) + sizeof(addr_));
}

IntVariable::~IntVariable() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.IntVariable)
  SharedDtor();
}

void IntVariable::SharedDtor() {
}

void IntVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntVariable& IntVariable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntVariable_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void IntVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.IntVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addr_) -
      reinterpret_cast<char*>(&value_)) + sizeof(addr_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntVariable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.IntVariable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.IntVariable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.IntVariable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntVariable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.IntVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.IntVariable)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntVariable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.IntVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.IntVariable)
  return target;
}

size_t IntVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.IntVariable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->value());
  }

  // int32 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntVariable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.IntVariable)
  GOOGLE_DCHECK_NE(&from, this);
  const IntVariable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntVariable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.IntVariable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.IntVariable)
    MergeFrom(*source);
  }
}

void IntVariable::MergeFrom(const IntVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.IntVariable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.addr() != 0) {
    set_addr(from.addr());
  }
}

void IntVariable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.IntVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntVariable::CopyFrom(const IntVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.IntVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntVariable::IsInitialized() const {
  return true;
}

void IntVariable::Swap(IntVariable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntVariable::InternalSwap(IntVariable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(addr_, other->addr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntVariable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModbusVariable::InitAsDefaultInstance() {
}
class ModbusVariable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModbusVariable::kNameFieldNumber;
const int ModbusVariable::kAddrFieldNumber;
const int ModbusVariable::kValueFieldNumber;
const int ModbusVariable::kSignalTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModbusVariable::ModbusVariable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.ModbusVariable)
}
ModbusVariable::ModbusVariable(const ModbusVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_type_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(signal_type_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ModbusVariable)
}

void ModbusVariable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModbusVariable_control_5fmsgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_type_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(signal_type_));
}

ModbusVariable::~ModbusVariable() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ModbusVariable)
  SharedDtor();
}

void ModbusVariable::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModbusVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModbusVariable& ModbusVariable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModbusVariable_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ModbusVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ModbusVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_type_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(signal_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModbusVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "Nrmk.IndyFramework.ModbusVariable.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.ModbusVariable.SignalType signal_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_signal_type(static_cast<::Nrmk::IndyFramework::ModbusVariable_SignalType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModbusVariable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.ModbusVariable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.ModbusVariable.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 addr = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.ModbusVariable.SignalType signal_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_signal_type(static_cast< ::Nrmk::IndyFramework::ModbusVariable_SignalType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.ModbusVariable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.ModbusVariable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModbusVariable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.ModbusVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ModbusVariable.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 addr = 2;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->addr(), output);
  }

  // int32 value = 3;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  // .Nrmk.IndyFramework.ModbusVariable.SignalType signal_type = 4;
  if (this->signal_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->signal_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.ModbusVariable)
}

::PROTOBUF_NAMESPACE_ID::uint8* ModbusVariable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ModbusVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ModbusVariable.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 addr = 2;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->addr(), target);
  }

  // int32 value = 3;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  // .Nrmk.IndyFramework.ModbusVariable.SignalType signal_type = 4;
  if (this->signal_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->signal_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ModbusVariable)
  return target;
}

size_t ModbusVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ModbusVariable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 addr = 2;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  // int32 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->value());
  }

  // .Nrmk.IndyFramework.ModbusVariable.SignalType signal_type = 4;
  if (this->signal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->signal_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModbusVariable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.ModbusVariable)
  GOOGLE_DCHECK_NE(&from, this);
  const ModbusVariable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModbusVariable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.ModbusVariable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.ModbusVariable)
    MergeFrom(*source);
  }
}

void ModbusVariable::MergeFrom(const ModbusVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ModbusVariable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.addr() != 0) {
    set_addr(from.addr());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.signal_type() != 0) {
    set_signal_type(from.signal_type());
  }
}

void ModbusVariable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.ModbusVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModbusVariable::CopyFrom(const ModbusVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ModbusVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModbusVariable::IsInitialized() const {
  return true;
}

void ModbusVariable::Swap(ModbusVariable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModbusVariable::InternalSwap(ModbusVariable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(addr_, other->addr_);
  swap(value_, other->value_);
  swap(signal_type_, other->signal_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModbusVariable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoolVariable::InitAsDefaultInstance() {
}
class BoolVariable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoolVariable::kAddrFieldNumber;
const int BoolVariable::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoolVariable::BoolVariable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.BoolVariable)
}
BoolVariable::BoolVariable(const BoolVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.BoolVariable)
}

void BoolVariable::SharedCtor() {
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(value_));
}

BoolVariable::~BoolVariable() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.BoolVariable)
  SharedDtor();
}

void BoolVariable::SharedDtor() {
}

void BoolVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoolVariable& BoolVariable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoolVariable_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void BoolVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.BoolVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoolVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoolVariable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.BoolVariable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.BoolVariable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.BoolVariable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoolVariable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.BoolVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // bool value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.BoolVariable)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoolVariable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.BoolVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // bool value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.BoolVariable)
  return target;
}

size_t BoolVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.BoolVariable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  // bool value = 2;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolVariable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.BoolVariable)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolVariable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoolVariable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.BoolVariable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.BoolVariable)
    MergeFrom(*source);
  }
}

void BoolVariable::MergeFrom(const BoolVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.BoolVariable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr() != 0) {
    set_addr(from.addr());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void BoolVariable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.BoolVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolVariable::CopyFrom(const BoolVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.BoolVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolVariable::IsInitialized() const {
  return true;
}

void BoolVariable::Swap(BoolVariable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoolVariable::InternalSwap(BoolVariable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(addr_, other->addr_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolVariable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FloatVariable::InitAsDefaultInstance() {
}
class FloatVariable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatVariable::kAddrFieldNumber;
const int FloatVariable::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatVariable::FloatVariable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.FloatVariable)
}
FloatVariable::FloatVariable(const FloatVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.FloatVariable)
}

void FloatVariable::SharedCtor() {
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(value_));
}

FloatVariable::~FloatVariable() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.FloatVariable)
  SharedDtor();
}

void FloatVariable::SharedDtor() {
}

void FloatVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatVariable& FloatVariable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatVariable_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void FloatVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.FloatVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FloatVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FloatVariable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.FloatVariable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.FloatVariable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.FloatVariable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FloatVariable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.FloatVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.FloatVariable)
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatVariable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.FloatVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.FloatVariable)
  return target;
}

size_t FloatVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.FloatVariable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatVariable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.FloatVariable)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatVariable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatVariable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.FloatVariable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.FloatVariable)
    MergeFrom(*source);
  }
}

void FloatVariable::MergeFrom(const FloatVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.FloatVariable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr() != 0) {
    set_addr(from.addr());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
}

void FloatVariable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.FloatVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatVariable::CopyFrom(const FloatVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.FloatVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatVariable::IsInitialized() const {
  return true;
}

void FloatVariable::Swap(FloatVariable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatVariable::InternalSwap(FloatVariable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(addr_, other->addr_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatVariable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JPosVariable::InitAsDefaultInstance() {
}
class JPosVariable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JPosVariable::kAddrFieldNumber;
const int JPosVariable::kJposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JPosVariable::JPosVariable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.JPosVariable)
}
JPosVariable::JPosVariable(const JPosVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      jpos_(from.jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_ = from.addr_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.JPosVariable)
}

void JPosVariable::SharedCtor() {
  addr_ = 0;
}

JPosVariable::~JPosVariable() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.JPosVariable)
  SharedDtor();
}

void JPosVariable::SharedDtor() {
}

void JPosVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JPosVariable& JPosVariable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JPosVariable_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void JPosVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.JPosVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jpos_.Clear();
  addr_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JPosVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float jpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JPosVariable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.JPosVariable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float jpos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.JPosVariable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.JPosVariable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JPosVariable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.JPosVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // repeated float jpos = 2;
  if (this->jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->jpos().data(), this->jpos_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.JPosVariable)
}

::PROTOBUF_NAMESPACE_ID::uint8* JPosVariable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.JPosVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // repeated float jpos = 2;
  if (this->jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->jpos_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.JPosVariable)
  return target;
}

size_t JPosVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.JPosVariable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JPosVariable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.JPosVariable)
  GOOGLE_DCHECK_NE(&from, this);
  const JPosVariable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JPosVariable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.JPosVariable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.JPosVariable)
    MergeFrom(*source);
  }
}

void JPosVariable::MergeFrom(const JPosVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.JPosVariable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jpos_.MergeFrom(from.jpos_);
  if (from.addr() != 0) {
    set_addr(from.addr());
  }
}

void JPosVariable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.JPosVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JPosVariable::CopyFrom(const JPosVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.JPosVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JPosVariable::IsInitialized() const {
  return true;
}

void JPosVariable::Swap(JPosVariable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JPosVariable::InternalSwap(JPosVariable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jpos_.InternalSwap(&other->jpos_);
  swap(addr_, other->addr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JPosVariable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TPosVariable::InitAsDefaultInstance() {
}
class TPosVariable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TPosVariable::kAddrFieldNumber;
const int TPosVariable::kTposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TPosVariable::TPosVariable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TPosVariable)
}
TPosVariable::TPosVariable(const TPosVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_ = from.addr_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TPosVariable)
}

void TPosVariable::SharedCtor() {
  addr_ = 0;
}

TPosVariable::~TPosVariable() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TPosVariable)
  SharedDtor();
}

void TPosVariable::SharedDtor() {
}

void TPosVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TPosVariable& TPosVariable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TPosVariable_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TPosVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TPosVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  addr_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TPosVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float tpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TPosVariable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TPosVariable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tpos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TPosVariable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TPosVariable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TPosVariable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TPosVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // repeated float tpos = 2;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TPosVariable)
}

::PROTOBUF_NAMESPACE_ID::uint8* TPosVariable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TPosVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // repeated float tpos = 2;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TPosVariable)
  return target;
}

size_t TPosVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TPosVariable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TPosVariable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TPosVariable)
  GOOGLE_DCHECK_NE(&from, this);
  const TPosVariable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TPosVariable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TPosVariable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TPosVariable)
    MergeFrom(*source);
  }
}

void TPosVariable::MergeFrom(const TPosVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TPosVariable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  if (from.addr() != 0) {
    set_addr(from.addr());
  }
}

void TPosVariable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TPosVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPosVariable::CopyFrom(const TPosVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TPosVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPosVariable::IsInitialized() const {
  return true;
}

void TPosVariable::Swap(TPosVariable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TPosVariable::InternalSwap(TPosVariable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  swap(addr_, other->addr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TPosVariable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModbusServer::InitAsDefaultInstance() {
}
class ModbusServer::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModbusServer::kServerNameFieldNumber;
const int ModbusServer::kIpFieldNumber;
const int ModbusServer::kPortFieldNumber;
const int ModbusServer::kVariableListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModbusServer::ModbusServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.ModbusServer)
}
ModbusServer::ModbusServer(const ModbusServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      variable_list_(from.variable_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ModbusServer)
}

void ModbusServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModbusServer_control_5fmsgs_2eproto.base);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

ModbusServer::~ModbusServer() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ModbusServer)
  SharedDtor();
}

void ModbusServer::SharedDtor() {
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModbusServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModbusServer& ModbusServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModbusServer_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ModbusServer::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ModbusServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variable_list_.Clear();
  server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModbusServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string server_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_server_name(), ptr, ctx, "Nrmk.IndyFramework.ModbusServer.server_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ip(), ptr, ctx, "Nrmk.IndyFramework.ModbusServer.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.ModbusVariable variable_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_variable_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModbusServer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.ModbusServer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string server_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.ModbusServer.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.ModbusServer.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.ModbusVariable variable_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_variable_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.ModbusServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.ModbusServer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModbusServer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.ModbusServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_name = 1;
  if (this->server_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ModbusServer.server_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_name(), output);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ModbusServer.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // repeated .Nrmk.IndyFramework.ModbusVariable variable_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variable_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->variable_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.ModbusServer)
}

::PROTOBUF_NAMESPACE_ID::uint8* ModbusServer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ModbusServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_name = 1;
  if (this->server_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ModbusServer.server_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ModbusServer.ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // repeated .Nrmk.IndyFramework.ModbusVariable variable_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variable_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->variable_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ModbusServer)
  return target;
}

size_t ModbusServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ModbusServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.ModbusVariable variable_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->variable_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->variable_list(static_cast<int>(i)));
    }
  }

  // string server_name = 1;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModbusServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.ModbusServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ModbusServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModbusServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.ModbusServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.ModbusServer)
    MergeFrom(*source);
  }
}

void ModbusServer::MergeFrom(const ModbusServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ModbusServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variable_list_.MergeFrom(from.variable_list_);
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void ModbusServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.ModbusServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModbusServer::CopyFrom(const ModbusServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ModbusServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModbusServer::IsInitialized() const {
  return true;
}

void ModbusServer::Swap(ModbusServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModbusServer::InternalSwap(ModbusServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&variable_list_)->InternalSwap(CastToBase(&other->variable_list_));
  server_name_.Swap(&other->server_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModbusServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModbusVariableList::InitAsDefaultInstance() {
}
class ModbusVariableList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModbusVariableList::kModbusVariablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModbusVariableList::ModbusVariableList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.ModbusVariableList)
}
ModbusVariableList::ModbusVariableList(const ModbusVariableList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      modbus_variables_(from.modbus_variables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ModbusVariableList)
}

void ModbusVariableList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModbusVariableList_control_5fmsgs_2eproto.base);
}

ModbusVariableList::~ModbusVariableList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ModbusVariableList)
  SharedDtor();
}

void ModbusVariableList::SharedDtor() {
}

void ModbusVariableList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModbusVariableList& ModbusVariableList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModbusVariableList_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ModbusVariableList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ModbusVariableList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modbus_variables_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModbusVariableList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.ModbusServer modbus_variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_modbus_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModbusVariableList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.ModbusVariableList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.ModbusServer modbus_variables = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_modbus_variables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.ModbusVariableList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.ModbusVariableList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModbusVariableList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.ModbusVariableList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.ModbusServer modbus_variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->modbus_variables_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->modbus_variables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.ModbusVariableList)
}

::PROTOBUF_NAMESPACE_ID::uint8* ModbusVariableList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ModbusVariableList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.ModbusServer modbus_variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->modbus_variables_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->modbus_variables(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ModbusVariableList)
  return target;
}

size_t ModbusVariableList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ModbusVariableList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.ModbusServer modbus_variables = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->modbus_variables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->modbus_variables(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModbusVariableList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.ModbusVariableList)
  GOOGLE_DCHECK_NE(&from, this);
  const ModbusVariableList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModbusVariableList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.ModbusVariableList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.ModbusVariableList)
    MergeFrom(*source);
  }
}

void ModbusVariableList::MergeFrom(const ModbusVariableList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ModbusVariableList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modbus_variables_.MergeFrom(from.modbus_variables_);
}

void ModbusVariableList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.ModbusVariableList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModbusVariableList::CopyFrom(const ModbusVariableList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ModbusVariableList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModbusVariableList::IsInitialized() const {
  return true;
}

void ModbusVariableList::Swap(ModbusVariableList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModbusVariableList::InternalSwap(ModbusVariableList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&modbus_variables_)->InternalSwap(CastToBase(&other->modbus_variables_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModbusVariableList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllVars::InitAsDefaultInstance() {
}
class AllVars::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllVars::kVariablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllVars::AllVars()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.AllVars)
}
AllVars::AllVars(const AllVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.AllVars)
}

void AllVars::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllVars_control_5fmsgs_2eproto.base);
}

AllVars::~AllVars() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.AllVars)
  SharedDtor();
}

void AllVars::SharedDtor() {
}

void AllVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllVars& AllVars::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllVars_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AllVars::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.AllVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AllVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.Variable variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AllVars::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.AllVars)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.Variable variables = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_variables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.AllVars)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.AllVars)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AllVars::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.AllVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.Variable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->variables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.AllVars)
}

::PROTOBUF_NAMESPACE_ID::uint8* AllVars::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.AllVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.Variable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->variables(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.AllVars)
  return target;
}

size_t AllVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.AllVars)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.Variable variables = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->variables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->variables(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllVars::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.AllVars)
  GOOGLE_DCHECK_NE(&from, this);
  const AllVars* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllVars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.AllVars)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.AllVars)
    MergeFrom(*source);
  }
}

void AllVars::MergeFrom(const AllVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.AllVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
}

void AllVars::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.AllVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllVars::CopyFrom(const AllVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.AllVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllVars::IsInitialized() const {
  return true;
}

void AllVars::Swap(AllVars* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllVars::InternalSwap(AllVars* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&variables_)->InternalSwap(CastToBase(&other->variables_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllVars::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntVars::InitAsDefaultInstance() {
}
class IntVars::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntVars::kVariablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntVars::IntVars()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.IntVars)
}
IntVars::IntVars(const IntVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.IntVars)
}

void IntVars::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntVars_control_5fmsgs_2eproto.base);
}

IntVars::~IntVars() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.IntVars)
  SharedDtor();
}

void IntVars::SharedDtor() {
}

void IntVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntVars& IntVars::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntVars_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void IntVars::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.IntVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.IntVariable variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntVars::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.IntVars)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.IntVariable variables = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_variables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.IntVars)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.IntVars)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntVars::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.IntVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.IntVariable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->variables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.IntVars)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntVars::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.IntVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.IntVariable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->variables(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.IntVars)
  return target;
}

size_t IntVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.IntVars)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.IntVariable variables = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->variables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->variables(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntVars::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.IntVars)
  GOOGLE_DCHECK_NE(&from, this);
  const IntVars* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntVars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.IntVars)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.IntVars)
    MergeFrom(*source);
  }
}

void IntVars::MergeFrom(const IntVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.IntVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
}

void IntVars::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.IntVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntVars::CopyFrom(const IntVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.IntVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntVars::IsInitialized() const {
  return true;
}

void IntVars::Swap(IntVars* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntVars::InternalSwap(IntVars* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&variables_)->InternalSwap(CastToBase(&other->variables_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntVars::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModbusVars::InitAsDefaultInstance() {
}
class ModbusVars::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModbusVars::kVariablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModbusVars::ModbusVars()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.ModbusVars)
}
ModbusVars::ModbusVars(const ModbusVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ModbusVars)
}

void ModbusVars::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModbusVars_control_5fmsgs_2eproto.base);
}

ModbusVars::~ModbusVars() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ModbusVars)
  SharedDtor();
}

void ModbusVars::SharedDtor() {
}

void ModbusVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModbusVars& ModbusVars::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModbusVars_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ModbusVars::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ModbusVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModbusVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.ModbusVariable variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModbusVars::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.ModbusVars)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.ModbusVariable variables = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_variables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.ModbusVars)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.ModbusVars)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModbusVars::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.ModbusVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.ModbusVariable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->variables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.ModbusVars)
}

::PROTOBUF_NAMESPACE_ID::uint8* ModbusVars::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ModbusVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.ModbusVariable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->variables(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ModbusVars)
  return target;
}

size_t ModbusVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ModbusVars)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.ModbusVariable variables = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->variables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->variables(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModbusVars::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.ModbusVars)
  GOOGLE_DCHECK_NE(&from, this);
  const ModbusVars* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModbusVars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.ModbusVars)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.ModbusVars)
    MergeFrom(*source);
  }
}

void ModbusVars::MergeFrom(const ModbusVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ModbusVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
}

void ModbusVars::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.ModbusVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModbusVars::CopyFrom(const ModbusVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ModbusVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModbusVars::IsInitialized() const {
  return true;
}

void ModbusVars::Swap(ModbusVars* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModbusVars::InternalSwap(ModbusVars* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&variables_)->InternalSwap(CastToBase(&other->variables_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModbusVars::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoolVars::InitAsDefaultInstance() {
}
class BoolVars::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoolVars::kVariablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoolVars::BoolVars()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.BoolVars)
}
BoolVars::BoolVars(const BoolVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.BoolVars)
}

void BoolVars::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoolVars_control_5fmsgs_2eproto.base);
}

BoolVars::~BoolVars() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.BoolVars)
  SharedDtor();
}

void BoolVars::SharedDtor() {
}

void BoolVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoolVars& BoolVars::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoolVars_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void BoolVars::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.BoolVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoolVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.BoolVariable variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoolVars::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.BoolVars)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.BoolVariable variables = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_variables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.BoolVars)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.BoolVars)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoolVars::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.BoolVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.BoolVariable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->variables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.BoolVars)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoolVars::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.BoolVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.BoolVariable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->variables(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.BoolVars)
  return target;
}

size_t BoolVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.BoolVars)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.BoolVariable variables = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->variables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->variables(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolVars::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.BoolVars)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolVars* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoolVars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.BoolVars)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.BoolVars)
    MergeFrom(*source);
  }
}

void BoolVars::MergeFrom(const BoolVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.BoolVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
}

void BoolVars::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.BoolVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolVars::CopyFrom(const BoolVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.BoolVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolVars::IsInitialized() const {
  return true;
}

void BoolVars::Swap(BoolVars* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoolVars::InternalSwap(BoolVars* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&variables_)->InternalSwap(CastToBase(&other->variables_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolVars::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FloatVars::InitAsDefaultInstance() {
}
class FloatVars::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatVars::kVariablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatVars::FloatVars()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.FloatVars)
}
FloatVars::FloatVars(const FloatVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.FloatVars)
}

void FloatVars::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FloatVars_control_5fmsgs_2eproto.base);
}

FloatVars::~FloatVars() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.FloatVars)
  SharedDtor();
}

void FloatVars::SharedDtor() {
}

void FloatVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatVars& FloatVars::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatVars_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void FloatVars::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.FloatVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FloatVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.FloatVariable variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FloatVars::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.FloatVars)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.FloatVariable variables = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_variables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.FloatVars)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.FloatVars)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FloatVars::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.FloatVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.FloatVariable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->variables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.FloatVars)
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatVars::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.FloatVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.FloatVariable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->variables(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.FloatVars)
  return target;
}

size_t FloatVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.FloatVars)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.FloatVariable variables = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->variables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->variables(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatVars::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.FloatVars)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatVars* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatVars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.FloatVars)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.FloatVars)
    MergeFrom(*source);
  }
}

void FloatVars::MergeFrom(const FloatVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.FloatVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
}

void FloatVars::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.FloatVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatVars::CopyFrom(const FloatVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.FloatVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatVars::IsInitialized() const {
  return true;
}

void FloatVars::Swap(FloatVars* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatVars::InternalSwap(FloatVars* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&variables_)->InternalSwap(CastToBase(&other->variables_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatVars::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JPosVars::InitAsDefaultInstance() {
}
class JPosVars::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JPosVars::kVariablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JPosVars::JPosVars()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.JPosVars)
}
JPosVars::JPosVars(const JPosVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.JPosVars)
}

void JPosVars::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JPosVars_control_5fmsgs_2eproto.base);
}

JPosVars::~JPosVars() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.JPosVars)
  SharedDtor();
}

void JPosVars::SharedDtor() {
}

void JPosVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JPosVars& JPosVars::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JPosVars_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void JPosVars::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.JPosVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JPosVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.JPosVariable variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JPosVars::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.JPosVars)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.JPosVariable variables = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_variables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.JPosVars)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.JPosVars)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JPosVars::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.JPosVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.JPosVariable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->variables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.JPosVars)
}

::PROTOBUF_NAMESPACE_ID::uint8* JPosVars::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.JPosVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.JPosVariable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->variables(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.JPosVars)
  return target;
}

size_t JPosVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.JPosVars)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.JPosVariable variables = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->variables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->variables(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JPosVars::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.JPosVars)
  GOOGLE_DCHECK_NE(&from, this);
  const JPosVars* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JPosVars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.JPosVars)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.JPosVars)
    MergeFrom(*source);
  }
}

void JPosVars::MergeFrom(const JPosVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.JPosVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
}

void JPosVars::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.JPosVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JPosVars::CopyFrom(const JPosVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.JPosVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JPosVars::IsInitialized() const {
  return true;
}

void JPosVars::Swap(JPosVars* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JPosVars::InternalSwap(JPosVars* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&variables_)->InternalSwap(CastToBase(&other->variables_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JPosVars::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TPosVars::InitAsDefaultInstance() {
}
class TPosVars::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TPosVars::kVariablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TPosVars::TPosVars()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TPosVars)
}
TPosVars::TPosVars(const TPosVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TPosVars)
}

void TPosVars::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TPosVars_control_5fmsgs_2eproto.base);
}

TPosVars::~TPosVars() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TPosVars)
  SharedDtor();
}

void TPosVars::SharedDtor() {
}

void TPosVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TPosVars& TPosVars::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TPosVars_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TPosVars::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TPosVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TPosVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.TPosVariable variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TPosVars::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TPosVars)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.TPosVariable variables = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_variables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TPosVars)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TPosVars)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TPosVars::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TPosVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.TPosVariable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->variables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TPosVars)
}

::PROTOBUF_NAMESPACE_ID::uint8* TPosVars::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TPosVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.TPosVariable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variables_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->variables(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TPosVars)
  return target;
}

size_t TPosVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TPosVars)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.TPosVariable variables = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->variables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->variables(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TPosVars::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TPosVars)
  GOOGLE_DCHECK_NE(&from, this);
  const TPosVars* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TPosVars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TPosVars)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TPosVars)
    MergeFrom(*source);
  }
}

void TPosVars::MergeFrom(const TPosVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TPosVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
}

void TPosVars::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TPosVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPosVars::CopyFrom(const TPosVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TPosVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPosVars::IsInitialized() const {
  return true;
}

void TPosVars::Swap(TPosVars* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TPosVars::InternalSwap(TPosVars* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&variables_)->InternalSwap(CastToBase(&other->variables_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TPosVars::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InverseKinematicsReq::InitAsDefaultInstance() {
}
class InverseKinematicsReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InverseKinematicsReq::kTposFieldNumber;
const int InverseKinematicsReq::kInitJposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InverseKinematicsReq::InverseKinematicsReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.InverseKinematicsReq)
}
InverseKinematicsReq::InverseKinematicsReq(const InverseKinematicsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_),
      init_jpos_(from.init_jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.InverseKinematicsReq)
}

void InverseKinematicsReq::SharedCtor() {
}

InverseKinematicsReq::~InverseKinematicsReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.InverseKinematicsReq)
  SharedDtor();
}

void InverseKinematicsReq::SharedDtor() {
}

void InverseKinematicsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InverseKinematicsReq& InverseKinematicsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InverseKinematicsReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void InverseKinematicsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.InverseKinematicsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  init_jpos_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InverseKinematicsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float init_jpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_init_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_init_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InverseKinematicsReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.InverseKinematicsReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float init_jpos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_init_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_init_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.InverseKinematicsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.InverseKinematicsReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InverseKinematicsReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.InverseKinematicsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  // repeated float init_jpos = 2;
  if (this->init_jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_init_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->init_jpos().data(), this->init_jpos_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.InverseKinematicsReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* InverseKinematicsReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.InverseKinematicsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  // repeated float init_jpos = 2;
  if (this->init_jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _init_jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->init_jpos_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.InverseKinematicsReq)
  return target;
}

size_t InverseKinematicsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.InverseKinematicsReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float init_jpos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->init_jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _init_jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InverseKinematicsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.InverseKinematicsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const InverseKinematicsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InverseKinematicsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.InverseKinematicsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.InverseKinematicsReq)
    MergeFrom(*source);
  }
}

void InverseKinematicsReq::MergeFrom(const InverseKinematicsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.InverseKinematicsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  init_jpos_.MergeFrom(from.init_jpos_);
}

void InverseKinematicsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.InverseKinematicsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InverseKinematicsReq::CopyFrom(const InverseKinematicsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.InverseKinematicsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InverseKinematicsReq::IsInitialized() const {
  return true;
}

void InverseKinematicsReq::Swap(InverseKinematicsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InverseKinematicsReq::InternalSwap(InverseKinematicsReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  init_jpos_.InternalSwap(&other->init_jpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InverseKinematicsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InverseKinematicsRes::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_InverseKinematicsRes_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class InverseKinematicsRes::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const InverseKinematicsRes* msg);
};

const ::Nrmk::IndyFramework::Response&
InverseKinematicsRes::HasBitSetters::response(const InverseKinematicsRes* msg) {
  return *msg->response_;
}
void InverseKinematicsRes::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InverseKinematicsRes::kJposFieldNumber;
const int InverseKinematicsRes::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InverseKinematicsRes::InverseKinematicsRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.InverseKinematicsRes)
}
InverseKinematicsRes::InverseKinematicsRes(const InverseKinematicsRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      jpos_(from.jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.InverseKinematicsRes)
}

void InverseKinematicsRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InverseKinematicsRes_control_5fmsgs_2eproto.base);
  response_ = nullptr;
}

InverseKinematicsRes::~InverseKinematicsRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.InverseKinematicsRes)
  SharedDtor();
}

void InverseKinematicsRes::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void InverseKinematicsRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InverseKinematicsRes& InverseKinematicsRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InverseKinematicsRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void InverseKinematicsRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.InverseKinematicsRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jpos_.Clear();
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InverseKinematicsRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float jpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InverseKinematicsRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.InverseKinematicsRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float jpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.InverseKinematicsRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.InverseKinematicsRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InverseKinematicsRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.InverseKinematicsRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->jpos().data(), this->jpos_size(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.InverseKinematicsRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* InverseKinematicsRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.InverseKinematicsRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->jpos_, target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.InverseKinematicsRes)
  return target;
}

size_t InverseKinematicsRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.InverseKinematicsRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InverseKinematicsRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.InverseKinematicsRes)
  GOOGLE_DCHECK_NE(&from, this);
  const InverseKinematicsRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InverseKinematicsRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.InverseKinematicsRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.InverseKinematicsRes)
    MergeFrom(*source);
  }
}

void InverseKinematicsRes::MergeFrom(const InverseKinematicsRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.InverseKinematicsRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jpos_.MergeFrom(from.jpos_);
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
}

void InverseKinematicsRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.InverseKinematicsRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InverseKinematicsRes::CopyFrom(const InverseKinematicsRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.InverseKinematicsRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InverseKinematicsRes::IsInitialized() const {
  return true;
}

void InverseKinematicsRes::Swap(InverseKinematicsRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InverseKinematicsRes::InternalSwap(InverseKinematicsRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jpos_.InternalSwap(&other->jpos_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InverseKinematicsRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForwardKinematicsReq::InitAsDefaultInstance() {
}
class ForwardKinematicsReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardKinematicsReq::kJposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardKinematicsReq::ForwardKinematicsReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.ForwardKinematicsReq)
}
ForwardKinematicsReq::ForwardKinematicsReq(const ForwardKinematicsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      jpos_(from.jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ForwardKinematicsReq)
}

void ForwardKinematicsReq::SharedCtor() {
}

ForwardKinematicsReq::~ForwardKinematicsReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ForwardKinematicsReq)
  SharedDtor();
}

void ForwardKinematicsReq::SharedDtor() {
}

void ForwardKinematicsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForwardKinematicsReq& ForwardKinematicsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForwardKinematicsReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ForwardKinematicsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ForwardKinematicsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jpos_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ForwardKinematicsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float jpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ForwardKinematicsReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.ForwardKinematicsReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float jpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.ForwardKinematicsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.ForwardKinematicsReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ForwardKinematicsReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.ForwardKinematicsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->jpos().data(), this->jpos_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.ForwardKinematicsReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* ForwardKinematicsReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ForwardKinematicsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->jpos_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ForwardKinematicsReq)
  return target;
}

size_t ForwardKinematicsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ForwardKinematicsReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForwardKinematicsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.ForwardKinematicsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardKinematicsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForwardKinematicsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.ForwardKinematicsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.ForwardKinematicsReq)
    MergeFrom(*source);
  }
}

void ForwardKinematicsReq::MergeFrom(const ForwardKinematicsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ForwardKinematicsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jpos_.MergeFrom(from.jpos_);
}

void ForwardKinematicsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.ForwardKinematicsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardKinematicsReq::CopyFrom(const ForwardKinematicsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ForwardKinematicsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardKinematicsReq::IsInitialized() const {
  return true;
}

void ForwardKinematicsReq::Swap(ForwardKinematicsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardKinematicsReq::InternalSwap(ForwardKinematicsReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jpos_.InternalSwap(&other->jpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardKinematicsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForwardKinematicsRes::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_ForwardKinematicsRes_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class ForwardKinematicsRes::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const ForwardKinematicsRes* msg);
};

const ::Nrmk::IndyFramework::Response&
ForwardKinematicsRes::HasBitSetters::response(const ForwardKinematicsRes* msg) {
  return *msg->response_;
}
void ForwardKinematicsRes::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardKinematicsRes::kTposFieldNumber;
const int ForwardKinematicsRes::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardKinematicsRes::ForwardKinematicsRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.ForwardKinematicsRes)
}
ForwardKinematicsRes::ForwardKinematicsRes(const ForwardKinematicsRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ForwardKinematicsRes)
}

void ForwardKinematicsRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ForwardKinematicsRes_control_5fmsgs_2eproto.base);
  response_ = nullptr;
}

ForwardKinematicsRes::~ForwardKinematicsRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ForwardKinematicsRes)
  SharedDtor();
}

void ForwardKinematicsRes::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void ForwardKinematicsRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForwardKinematicsRes& ForwardKinematicsRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForwardKinematicsRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ForwardKinematicsRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ForwardKinematicsRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ForwardKinematicsRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ForwardKinematicsRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.ForwardKinematicsRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.ForwardKinematicsRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.ForwardKinematicsRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ForwardKinematicsRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.ForwardKinematicsRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.ForwardKinematicsRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* ForwardKinematicsRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ForwardKinematicsRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ForwardKinematicsRes)
  return target;
}

size_t ForwardKinematicsRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ForwardKinematicsRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForwardKinematicsRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.ForwardKinematicsRes)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardKinematicsRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForwardKinematicsRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.ForwardKinematicsRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.ForwardKinematicsRes)
    MergeFrom(*source);
  }
}

void ForwardKinematicsRes::MergeFrom(const ForwardKinematicsRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ForwardKinematicsRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
}

void ForwardKinematicsRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.ForwardKinematicsRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardKinematicsRes::CopyFrom(const ForwardKinematicsRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ForwardKinematicsRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardKinematicsRes::IsInitialized() const {
  return true;
}

void ForwardKinematicsRes::Swap(ForwardKinematicsRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardKinematicsRes::InternalSwap(ForwardKinematicsRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardKinematicsRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckAproachRetractValidReq::InitAsDefaultInstance() {
}
class CheckAproachRetractValidReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckAproachRetractValidReq::kTposFieldNumber;
const int CheckAproachRetractValidReq::kInitJposFieldNumber;
const int CheckAproachRetractValidReq::kPreTposFieldNumber;
const int CheckAproachRetractValidReq::kPostTposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAproachRetractValidReq::CheckAproachRetractValidReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.CheckAproachRetractValidReq)
}
CheckAproachRetractValidReq::CheckAproachRetractValidReq(const CheckAproachRetractValidReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_),
      init_jpos_(from.init_jpos_),
      pre_tpos_(from.pre_tpos_),
      post_tpos_(from.post_tpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CheckAproachRetractValidReq)
}

void CheckAproachRetractValidReq::SharedCtor() {
}

CheckAproachRetractValidReq::~CheckAproachRetractValidReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  SharedDtor();
}

void CheckAproachRetractValidReq::SharedDtor() {
}

void CheckAproachRetractValidReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckAproachRetractValidReq& CheckAproachRetractValidReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckAproachRetractValidReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void CheckAproachRetractValidReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  init_jpos_.Clear();
  pre_tpos_.Clear();
  post_tpos_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckAproachRetractValidReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float init_jpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_init_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_init_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pre_tpos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_pre_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_pre_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float post_tpos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_post_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_post_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckAproachRetractValidReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float init_jpos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_init_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_init_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pre_tpos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pre_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_pre_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float post_tpos = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_post_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_post_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckAproachRetractValidReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  // repeated float init_jpos = 2;
  if (this->init_jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_init_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->init_jpos().data(), this->init_jpos_size(), output);
  }

  // repeated float pre_tpos = 3;
  if (this->pre_tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pre_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->pre_tpos().data(), this->pre_tpos_size(), output);
  }

  // repeated float post_tpos = 4;
  if (this->post_tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_post_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->post_tpos().data(), this->post_tpos_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.CheckAproachRetractValidReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckAproachRetractValidReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  // repeated float init_jpos = 2;
  if (this->init_jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _init_jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->init_jpos_, target);
  }

  // repeated float pre_tpos = 3;
  if (this->pre_tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pre_tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pre_tpos_, target);
  }

  // repeated float post_tpos = 4;
  if (this->post_tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _post_tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->post_tpos_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  return target;
}

size_t CheckAproachRetractValidReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float init_jpos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->init_jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _init_jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float pre_tpos = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->pre_tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pre_tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float post_tpos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->post_tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _post_tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckAproachRetractValidReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckAproachRetractValidReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckAproachRetractValidReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.CheckAproachRetractValidReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.CheckAproachRetractValidReq)
    MergeFrom(*source);
  }
}

void CheckAproachRetractValidReq::MergeFrom(const CheckAproachRetractValidReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  init_jpos_.MergeFrom(from.init_jpos_);
  pre_tpos_.MergeFrom(from.pre_tpos_);
  post_tpos_.MergeFrom(from.post_tpos_);
}

void CheckAproachRetractValidReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAproachRetractValidReq::CopyFrom(const CheckAproachRetractValidReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CheckAproachRetractValidReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAproachRetractValidReq::IsInitialized() const {
  return true;
}

void CheckAproachRetractValidReq::Swap(CheckAproachRetractValidReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAproachRetractValidReq::InternalSwap(CheckAproachRetractValidReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  init_jpos_.InternalSwap(&other->init_jpos_);
  pre_tpos_.InternalSwap(&other->pre_tpos_);
  post_tpos_.InternalSwap(&other->post_tpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckAproachRetractValidReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckAproachRetractValidRes::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_CheckAproachRetractValidRes_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class CheckAproachRetractValidRes::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const CheckAproachRetractValidRes* msg);
};

const ::Nrmk::IndyFramework::Response&
CheckAproachRetractValidRes::HasBitSetters::response(const CheckAproachRetractValidRes* msg) {
  return *msg->response_;
}
void CheckAproachRetractValidRes::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckAproachRetractValidRes::kIsValidFieldNumber;
const int CheckAproachRetractValidRes::kTarPosFieldNumber;
const int CheckAproachRetractValidRes::kApproachPosFieldNumber;
const int CheckAproachRetractValidRes::kRetractPosFieldNumber;
const int CheckAproachRetractValidRes::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAproachRetractValidRes::CheckAproachRetractValidRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.CheckAproachRetractValidRes)
}
CheckAproachRetractValidRes::CheckAproachRetractValidRes(const CheckAproachRetractValidRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tar_pos_(from.tar_pos_),
      approach_pos_(from.approach_pos_),
      retract_pos_(from.retract_pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  is_valid_ = from.is_valid_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CheckAproachRetractValidRes)
}

void CheckAproachRetractValidRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckAproachRetractValidRes_control_5fmsgs_2eproto.base);
  ::memset(&response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&response_)) + sizeof(is_valid_));
}

CheckAproachRetractValidRes::~CheckAproachRetractValidRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  SharedDtor();
}

void CheckAproachRetractValidRes::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void CheckAproachRetractValidRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckAproachRetractValidRes& CheckAproachRetractValidRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckAproachRetractValidRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void CheckAproachRetractValidRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tar_pos_.Clear();
  approach_pos_.Clear();
  retract_pos_.Clear();
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  is_valid_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckAproachRetractValidRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float tar_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tar_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_tar_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float approach_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_approach_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_approach_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float retract_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_retract_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_retract_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckAproachRetractValidRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_valid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tar_pos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tar_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_tar_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float approach_pos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_approach_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_approach_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float retract_pos = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_retract_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_retract_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckAproachRetractValidRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_valid = 1;
  if (this->is_valid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_valid(), output);
  }

  // repeated float tar_pos = 2;
  if (this->tar_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tar_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tar_pos().data(), this->tar_pos_size(), output);
  }

  // repeated float approach_pos = 3;
  if (this->approach_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_approach_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->approach_pos().data(), this->approach_pos_size(), output);
  }

  // repeated float retract_pos = 4;
  if (this->retract_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_retract_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->retract_pos().data(), this->retract_pos_size(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.CheckAproachRetractValidRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckAproachRetractValidRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_valid = 1;
  if (this->is_valid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_valid(), target);
  }

  // repeated float tar_pos = 2;
  if (this->tar_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tar_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tar_pos_, target);
  }

  // repeated float approach_pos = 3;
  if (this->approach_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _approach_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->approach_pos_, target);
  }

  // repeated float retract_pos = 4;
  if (this->retract_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _retract_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->retract_pos_, target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  return target;
}

size_t CheckAproachRetractValidRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tar_pos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tar_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tar_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float approach_pos = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->approach_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _approach_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float retract_pos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->retract_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _retract_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // bool is_valid = 1;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckAproachRetractValidRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckAproachRetractValidRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckAproachRetractValidRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.CheckAproachRetractValidRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.CheckAproachRetractValidRes)
    MergeFrom(*source);
  }
}

void CheckAproachRetractValidRes::MergeFrom(const CheckAproachRetractValidRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tar_pos_.MergeFrom(from.tar_pos_);
  approach_pos_.MergeFrom(from.approach_pos_);
  retract_pos_.MergeFrom(from.retract_pos_);
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
}

void CheckAproachRetractValidRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAproachRetractValidRes::CopyFrom(const CheckAproachRetractValidRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CheckAproachRetractValidRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAproachRetractValidRes::IsInitialized() const {
  return true;
}

void CheckAproachRetractValidRes::Swap(CheckAproachRetractValidRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAproachRetractValidRes::InternalSwap(CheckAproachRetractValidRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tar_pos_.InternalSwap(&other->tar_pos_);
  approach_pos_.InternalSwap(&other->approach_pos_);
  retract_pos_.InternalSwap(&other->retract_pos_);
  swap(response_, other->response_);
  swap(is_valid_, other->is_valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckAproachRetractValidRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPalletPointListReq::InitAsDefaultInstance() {
}
class GetPalletPointListReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPalletPointListReq::kTposFieldNumber;
const int GetPalletPointListReq::kJposFieldNumber;
const int GetPalletPointListReq::kPreTposFieldNumber;
const int GetPalletPointListReq::kPostTposFieldNumber;
const int GetPalletPointListReq::kPalletPatternFieldNumber;
const int GetPalletPointListReq::kWidthFieldNumber;
const int GetPalletPointListReq::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPalletPointListReq::GetPalletPointListReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.GetPalletPointListReq)
}
GetPalletPointListReq::GetPalletPointListReq(const GetPalletPointListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_),
      jpos_(from.jpos_),
      pre_tpos_(from.pre_tpos_),
      post_tpos_(from.post_tpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pallet_pattern_, &from.pallet_pattern_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&pallet_pattern_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.GetPalletPointListReq)
}

void GetPalletPointListReq::SharedCtor() {
  ::memset(&pallet_pattern_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&pallet_pattern_)) + sizeof(height_));
}

GetPalletPointListReq::~GetPalletPointListReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.GetPalletPointListReq)
  SharedDtor();
}

void GetPalletPointListReq::SharedDtor() {
}

void GetPalletPointListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPalletPointListReq& GetPalletPointListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPalletPointListReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetPalletPointListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.GetPalletPointListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  jpos_.Clear();
  pre_tpos_.Clear();
  post_tpos_.Clear();
  ::memset(&pallet_pattern_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&pallet_pattern_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetPalletPointListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float jpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pre_tpos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_pre_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_pre_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float post_tpos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_post_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_post_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 pallet_pattern = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pallet_pattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetPalletPointListReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.GetPalletPointListReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float jpos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pre_tpos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pre_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_pre_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float post_tpos = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_post_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_post_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pallet_pattern = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pallet_pattern_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.GetPalletPointListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.GetPalletPointListReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetPalletPointListReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.GetPalletPointListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  // repeated float jpos = 2;
  if (this->jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->jpos().data(), this->jpos_size(), output);
  }

  // repeated float pre_tpos = 3;
  if (this->pre_tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pre_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->pre_tpos().data(), this->pre_tpos_size(), output);
  }

  // repeated float post_tpos = 4;
  if (this->post_tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_post_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->post_tpos().data(), this->post_tpos_size(), output);
  }

  // int32 pallet_pattern = 5;
  if (this->pallet_pattern() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->pallet_pattern(), output);
  }

  // int32 width = 6;
  if (this->width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->width(), output);
  }

  // int32 height = 7;
  if (this->height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.GetPalletPointListReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPalletPointListReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.GetPalletPointListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  // repeated float jpos = 2;
  if (this->jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->jpos_, target);
  }

  // repeated float pre_tpos = 3;
  if (this->pre_tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pre_tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pre_tpos_, target);
  }

  // repeated float post_tpos = 4;
  if (this->post_tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _post_tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->post_tpos_, target);
  }

  // int32 pallet_pattern = 5;
  if (this->pallet_pattern() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->pallet_pattern(), target);
  }

  // int32 width = 6;
  if (this->width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->width(), target);
  }

  // int32 height = 7;
  if (this->height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.GetPalletPointListReq)
  return target;
}

size_t GetPalletPointListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.GetPalletPointListReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float jpos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float pre_tpos = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->pre_tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pre_tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float post_tpos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->post_tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _post_tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 pallet_pattern = 5;
  if (this->pallet_pattern() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pallet_pattern());
  }

  // int32 width = 6;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 7;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPalletPointListReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.GetPalletPointListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPalletPointListReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPalletPointListReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.GetPalletPointListReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.GetPalletPointListReq)
    MergeFrom(*source);
  }
}

void GetPalletPointListReq::MergeFrom(const GetPalletPointListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.GetPalletPointListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  jpos_.MergeFrom(from.jpos_);
  pre_tpos_.MergeFrom(from.pre_tpos_);
  post_tpos_.MergeFrom(from.post_tpos_);
  if (from.pallet_pattern() != 0) {
    set_pallet_pattern(from.pallet_pattern());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void GetPalletPointListReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.GetPalletPointListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPalletPointListReq::CopyFrom(const GetPalletPointListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.GetPalletPointListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPalletPointListReq::IsInitialized() const {
  return true;
}

void GetPalletPointListReq::Swap(GetPalletPointListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPalletPointListReq::InternalSwap(GetPalletPointListReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  jpos_.InternalSwap(&other->jpos_);
  pre_tpos_.InternalSwap(&other->pre_tpos_);
  post_tpos_.InternalSwap(&other->post_tpos_);
  swap(pallet_pattern_, other->pallet_pattern_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPalletPointListReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PalletPoint::InitAsDefaultInstance() {
}
class PalletPoint::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PalletPoint::kTarPosFieldNumber;
const int PalletPoint::kApproachPosFieldNumber;
const int PalletPoint::kRetractPosFieldNumber;
const int PalletPoint::kTarJposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PalletPoint::PalletPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.PalletPoint)
}
PalletPoint::PalletPoint(const PalletPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tar_pos_(from.tar_pos_),
      approach_pos_(from.approach_pos_),
      retract_pos_(from.retract_pos_),
      tar_jpos_(from.tar_jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.PalletPoint)
}

void PalletPoint::SharedCtor() {
}

PalletPoint::~PalletPoint() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.PalletPoint)
  SharedDtor();
}

void PalletPoint::SharedDtor() {
}

void PalletPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PalletPoint& PalletPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PalletPoint_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void PalletPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.PalletPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tar_pos_.Clear();
  approach_pos_.Clear();
  retract_pos_.Clear();
  tar_jpos_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PalletPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tar_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tar_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tar_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float approach_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_approach_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_approach_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float retract_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_retract_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_retract_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tar_jpos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tar_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_tar_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PalletPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.PalletPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tar_pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tar_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tar_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float approach_pos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_approach_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_approach_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float retract_pos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_retract_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_retract_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tar_jpos = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tar_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_tar_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.PalletPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.PalletPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PalletPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.PalletPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tar_pos = 1;
  if (this->tar_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tar_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tar_pos().data(), this->tar_pos_size(), output);
  }

  // repeated float approach_pos = 2;
  if (this->approach_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_approach_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->approach_pos().data(), this->approach_pos_size(), output);
  }

  // repeated float retract_pos = 3;
  if (this->retract_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_retract_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->retract_pos().data(), this->retract_pos_size(), output);
  }

  // repeated float tar_jpos = 4;
  if (this->tar_jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tar_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tar_jpos().data(), this->tar_jpos_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.PalletPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* PalletPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.PalletPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tar_pos = 1;
  if (this->tar_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tar_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tar_pos_, target);
  }

  // repeated float approach_pos = 2;
  if (this->approach_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _approach_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->approach_pos_, target);
  }

  // repeated float retract_pos = 3;
  if (this->retract_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _retract_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->retract_pos_, target);
  }

  // repeated float tar_jpos = 4;
  if (this->tar_jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tar_jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tar_jpos_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.PalletPoint)
  return target;
}

size_t PalletPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.PalletPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tar_pos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tar_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tar_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float approach_pos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->approach_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _approach_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float retract_pos = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->retract_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _retract_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tar_jpos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tar_jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tar_jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PalletPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.PalletPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PalletPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PalletPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.PalletPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.PalletPoint)
    MergeFrom(*source);
  }
}

void PalletPoint::MergeFrom(const PalletPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.PalletPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tar_pos_.MergeFrom(from.tar_pos_);
  approach_pos_.MergeFrom(from.approach_pos_);
  retract_pos_.MergeFrom(from.retract_pos_);
  tar_jpos_.MergeFrom(from.tar_jpos_);
}

void PalletPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.PalletPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PalletPoint::CopyFrom(const PalletPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.PalletPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PalletPoint::IsInitialized() const {
  return true;
}

void PalletPoint::Swap(PalletPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PalletPoint::InternalSwap(PalletPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tar_pos_.InternalSwap(&other->tar_pos_);
  approach_pos_.InternalSwap(&other->approach_pos_);
  retract_pos_.InternalSwap(&other->retract_pos_);
  tar_jpos_.InternalSwap(&other->tar_jpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PalletPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPalletPointListRes::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_GetPalletPointListRes_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class GetPalletPointListRes::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const GetPalletPointListRes* msg);
};

const ::Nrmk::IndyFramework::Response&
GetPalletPointListRes::HasBitSetters::response(const GetPalletPointListRes* msg) {
  return *msg->response_;
}
void GetPalletPointListRes::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPalletPointListRes::kPalletPointsFieldNumber;
const int GetPalletPointListRes::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPalletPointListRes::GetPalletPointListRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.GetPalletPointListRes)
}
GetPalletPointListRes::GetPalletPointListRes(const GetPalletPointListRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pallet_points_(from.pallet_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.GetPalletPointListRes)
}

void GetPalletPointListRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPalletPointListRes_control_5fmsgs_2eproto.base);
  response_ = nullptr;
}

GetPalletPointListRes::~GetPalletPointListRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.GetPalletPointListRes)
  SharedDtor();
}

void GetPalletPointListRes::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void GetPalletPointListRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPalletPointListRes& GetPalletPointListRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPalletPointListRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetPalletPointListRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.GetPalletPointListRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pallet_points_.Clear();
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetPalletPointListRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.PalletPoint pallet_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pallet_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetPalletPointListRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.GetPalletPointListRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.PalletPoint pallet_points = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pallet_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.GetPalletPointListRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.GetPalletPointListRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetPalletPointListRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.GetPalletPointListRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.PalletPoint pallet_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pallet_points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->pallet_points(static_cast<int>(i)),
      output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.GetPalletPointListRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPalletPointListRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.GetPalletPointListRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.PalletPoint pallet_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pallet_points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pallet_points(static_cast<int>(i)), target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.GetPalletPointListRes)
  return target;
}

size_t GetPalletPointListRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.GetPalletPointListRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.PalletPoint pallet_points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pallet_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pallet_points(static_cast<int>(i)));
    }
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPalletPointListRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.GetPalletPointListRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPalletPointListRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPalletPointListRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.GetPalletPointListRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.GetPalletPointListRes)
    MergeFrom(*source);
  }
}

void GetPalletPointListRes::MergeFrom(const GetPalletPointListRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.GetPalletPointListRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pallet_points_.MergeFrom(from.pallet_points_);
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
}

void GetPalletPointListRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.GetPalletPointListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPalletPointListRes::CopyFrom(const GetPalletPointListRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.GetPalletPointListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPalletPointListRes::IsInitialized() const {
  return true;
}

void GetPalletPointListRes::Swap(GetPalletPointListRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPalletPointListRes::InternalSwap(GetPalletPointListRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&pallet_points_)->InternalSwap(CastToBase(&other->pallet_points_));
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPalletPointListRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalculateRelativePoseReq::InitAsDefaultInstance() {
}
class CalculateRelativePoseReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalculateRelativePoseReq::kStartPosFieldNumber;
const int CalculateRelativePoseReq::kEndPosFieldNumber;
const int CalculateRelativePoseReq::kBaseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalculateRelativePoseReq::CalculateRelativePoseReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.CalculateRelativePoseReq)
}
CalculateRelativePoseReq::CalculateRelativePoseReq(const CalculateRelativePoseReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      start_pos_(from.start_pos_),
      end_pos_(from.end_pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_type_ = from.base_type_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CalculateRelativePoseReq)
}

void CalculateRelativePoseReq::SharedCtor() {
  base_type_ = 0;
}

CalculateRelativePoseReq::~CalculateRelativePoseReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CalculateRelativePoseReq)
  SharedDtor();
}

void CalculateRelativePoseReq::SharedDtor() {
}

void CalculateRelativePoseReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalculateRelativePoseReq& CalculateRelativePoseReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalculateRelativePoseReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void CalculateRelativePoseReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CalculateRelativePoseReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_pos_.Clear();
  end_pos_.Clear();
  base_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalculateRelativePoseReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float start_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_start_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_start_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float end_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_end_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_end_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::Nrmk::IndyFramework::TaskBaseType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalculateRelativePoseReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.CalculateRelativePoseReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float start_pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_start_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_start_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float end_pos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_end_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_end_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::Nrmk::IndyFramework::TaskBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.CalculateRelativePoseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.CalculateRelativePoseReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalculateRelativePoseReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.CalculateRelativePoseReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float start_pos = 1;
  if (this->start_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_start_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->start_pos().data(), this->start_pos_size(), output);
  }

  // repeated float end_pos = 2;
  if (this->end_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_end_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->end_pos().data(), this->end_pos_size(), output);
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->base_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.CalculateRelativePoseReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* CalculateRelativePoseReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CalculateRelativePoseReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float start_pos = 1;
  if (this->start_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _start_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->start_pos_, target);
  }

  // repeated float end_pos = 2;
  if (this->end_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _end_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->end_pos_, target);
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->base_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CalculateRelativePoseReq)
  return target;
}

size_t CalculateRelativePoseReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CalculateRelativePoseReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float start_pos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->start_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _start_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float end_pos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->end_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _end_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculateRelativePoseReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.CalculateRelativePoseReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculateRelativePoseReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalculateRelativePoseReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.CalculateRelativePoseReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.CalculateRelativePoseReq)
    MergeFrom(*source);
  }
}

void CalculateRelativePoseReq::MergeFrom(const CalculateRelativePoseReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CalculateRelativePoseReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  start_pos_.MergeFrom(from.start_pos_);
  end_pos_.MergeFrom(from.end_pos_);
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
}

void CalculateRelativePoseReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.CalculateRelativePoseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculateRelativePoseReq::CopyFrom(const CalculateRelativePoseReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CalculateRelativePoseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculateRelativePoseReq::IsInitialized() const {
  return true;
}

void CalculateRelativePoseReq::Swap(CalculateRelativePoseReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalculateRelativePoseReq::InternalSwap(CalculateRelativePoseReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  start_pos_.InternalSwap(&other->start_pos_);
  end_pos_.InternalSwap(&other->end_pos_);
  swap(base_type_, other->base_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculateRelativePoseReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalculateRelativePoseRes::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_CalculateRelativePoseRes_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class CalculateRelativePoseRes::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const CalculateRelativePoseRes* msg);
};

const ::Nrmk::IndyFramework::Response&
CalculateRelativePoseRes::HasBitSetters::response(const CalculateRelativePoseRes* msg) {
  return *msg->response_;
}
void CalculateRelativePoseRes::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalculateRelativePoseRes::kRelativePosFieldNumber;
const int CalculateRelativePoseRes::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalculateRelativePoseRes::CalculateRelativePoseRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.CalculateRelativePoseRes)
}
CalculateRelativePoseRes::CalculateRelativePoseRes(const CalculateRelativePoseRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      relative_pos_(from.relative_pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CalculateRelativePoseRes)
}

void CalculateRelativePoseRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalculateRelativePoseRes_control_5fmsgs_2eproto.base);
  response_ = nullptr;
}

CalculateRelativePoseRes::~CalculateRelativePoseRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CalculateRelativePoseRes)
  SharedDtor();
}

void CalculateRelativePoseRes::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void CalculateRelativePoseRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalculateRelativePoseRes& CalculateRelativePoseRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalculateRelativePoseRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void CalculateRelativePoseRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CalculateRelativePoseRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relative_pos_.Clear();
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalculateRelativePoseRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float relative_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_relative_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_relative_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalculateRelativePoseRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.CalculateRelativePoseRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float relative_pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_relative_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_relative_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.CalculateRelativePoseRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.CalculateRelativePoseRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalculateRelativePoseRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.CalculateRelativePoseRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float relative_pos = 1;
  if (this->relative_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_relative_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->relative_pos().data(), this->relative_pos_size(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.CalculateRelativePoseRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* CalculateRelativePoseRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CalculateRelativePoseRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float relative_pos = 1;
  if (this->relative_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _relative_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->relative_pos_, target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CalculateRelativePoseRes)
  return target;
}

size_t CalculateRelativePoseRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CalculateRelativePoseRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float relative_pos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->relative_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _relative_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculateRelativePoseRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.CalculateRelativePoseRes)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculateRelativePoseRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalculateRelativePoseRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.CalculateRelativePoseRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.CalculateRelativePoseRes)
    MergeFrom(*source);
  }
}

void CalculateRelativePoseRes::MergeFrom(const CalculateRelativePoseRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CalculateRelativePoseRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relative_pos_.MergeFrom(from.relative_pos_);
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
}

void CalculateRelativePoseRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.CalculateRelativePoseRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculateRelativePoseRes::CopyFrom(const CalculateRelativePoseRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CalculateRelativePoseRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculateRelativePoseRes::IsInitialized() const {
  return true;
}

void CalculateRelativePoseRes::Swap(CalculateRelativePoseRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalculateRelativePoseRes::InternalSwap(CalculateRelativePoseRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  relative_pos_.InternalSwap(&other->relative_pos_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculateRelativePoseRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalculateCurrentPoseRelReq::InitAsDefaultInstance() {
}
class CalculateCurrentPoseRelReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalculateCurrentPoseRelReq::kCurrentPosFieldNumber;
const int CalculateCurrentPoseRelReq::kRelativePosFieldNumber;
const int CalculateCurrentPoseRelReq::kBaseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalculateCurrentPoseRelReq::CalculateCurrentPoseRelReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
}
CalculateCurrentPoseRelReq::CalculateCurrentPoseRelReq(const CalculateCurrentPoseRelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      current_pos_(from.current_pos_),
      relative_pos_(from.relative_pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_type_ = from.base_type_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
}

void CalculateCurrentPoseRelReq::SharedCtor() {
  base_type_ = 0;
}

CalculateCurrentPoseRelReq::~CalculateCurrentPoseRelReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  SharedDtor();
}

void CalculateCurrentPoseRelReq::SharedDtor() {
}

void CalculateCurrentPoseRelReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalculateCurrentPoseRelReq& CalculateCurrentPoseRelReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalculateCurrentPoseRelReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void CalculateCurrentPoseRelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_pos_.Clear();
  relative_pos_.Clear();
  base_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalculateCurrentPoseRelReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float current_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_current_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_current_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float relative_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_relative_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_relative_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::Nrmk::IndyFramework::TaskBaseType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalculateCurrentPoseRelReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float current_pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_current_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_current_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float relative_pos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_relative_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_relative_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::Nrmk::IndyFramework::TaskBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalculateCurrentPoseRelReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float current_pos = 1;
  if (this->current_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_current_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->current_pos().data(), this->current_pos_size(), output);
  }

  // repeated float relative_pos = 2;
  if (this->relative_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_relative_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->relative_pos().data(), this->relative_pos_size(), output);
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->base_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* CalculateCurrentPoseRelReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float current_pos = 1;
  if (this->current_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _current_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->current_pos_, target);
  }

  // repeated float relative_pos = 2;
  if (this->relative_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _relative_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->relative_pos_, target);
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->base_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  return target;
}

size_t CalculateCurrentPoseRelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float current_pos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->current_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _current_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float relative_pos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->relative_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _relative_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculateCurrentPoseRelReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculateCurrentPoseRelReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalculateCurrentPoseRelReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
    MergeFrom(*source);
  }
}

void CalculateCurrentPoseRelReq::MergeFrom(const CalculateCurrentPoseRelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_pos_.MergeFrom(from.current_pos_);
  relative_pos_.MergeFrom(from.relative_pos_);
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
}

void CalculateCurrentPoseRelReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculateCurrentPoseRelReq::CopyFrom(const CalculateCurrentPoseRelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculateCurrentPoseRelReq::IsInitialized() const {
  return true;
}

void CalculateCurrentPoseRelReq::Swap(CalculateCurrentPoseRelReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalculateCurrentPoseRelReq::InternalSwap(CalculateCurrentPoseRelReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  current_pos_.InternalSwap(&other->current_pos_);
  relative_pos_.InternalSwap(&other->relative_pos_);
  swap(base_type_, other->base_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculateCurrentPoseRelReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalculateCurrentPoseRelRes::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_CalculateCurrentPoseRelRes_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class CalculateCurrentPoseRelRes::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const CalculateCurrentPoseRelRes* msg);
};

const ::Nrmk::IndyFramework::Response&
CalculateCurrentPoseRelRes::HasBitSetters::response(const CalculateCurrentPoseRelRes* msg) {
  return *msg->response_;
}
void CalculateCurrentPoseRelRes::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalculateCurrentPoseRelRes::kCalculatedPosFieldNumber;
const int CalculateCurrentPoseRelRes::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalculateCurrentPoseRelRes::CalculateCurrentPoseRelRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
}
CalculateCurrentPoseRelRes::CalculateCurrentPoseRelRes(const CalculateCurrentPoseRelRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      calculated_pos_(from.calculated_pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
}

void CalculateCurrentPoseRelRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalculateCurrentPoseRelRes_control_5fmsgs_2eproto.base);
  response_ = nullptr;
}

CalculateCurrentPoseRelRes::~CalculateCurrentPoseRelRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  SharedDtor();
}

void CalculateCurrentPoseRelRes::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void CalculateCurrentPoseRelRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalculateCurrentPoseRelRes& CalculateCurrentPoseRelRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalculateCurrentPoseRelRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void CalculateCurrentPoseRelRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calculated_pos_.Clear();
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalculateCurrentPoseRelRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float calculated_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_calculated_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_calculated_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalculateCurrentPoseRelRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float calculated_pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_calculated_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_calculated_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalculateCurrentPoseRelRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float calculated_pos = 1;
  if (this->calculated_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_calculated_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->calculated_pos().data(), this->calculated_pos_size(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* CalculateCurrentPoseRelRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float calculated_pos = 1;
  if (this->calculated_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _calculated_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->calculated_pos_, target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  return target;
}

size_t CalculateCurrentPoseRelRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float calculated_pos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->calculated_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _calculated_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculateCurrentPoseRelRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculateCurrentPoseRelRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalculateCurrentPoseRelRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
    MergeFrom(*source);
  }
}

void CalculateCurrentPoseRelRes::MergeFrom(const CalculateCurrentPoseRelRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calculated_pos_.MergeFrom(from.calculated_pos_);
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
}

void CalculateCurrentPoseRelRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculateCurrentPoseRelRes::CopyFrom(const CalculateCurrentPoseRelRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculateCurrentPoseRelRes::IsInitialized() const {
  return true;
}

void CalculateCurrentPoseRelRes::Swap(CalculateCurrentPoseRelRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalculateCurrentPoseRelRes::InternalSwap(CalculateCurrentPoseRelRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  calculated_pos_.InternalSwap(&other->calculated_pos_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculateCurrentPoseRelRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeleOpDevice::InitAsDefaultInstance() {
}
class TeleOpDevice::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeleOpDevice::kNameFieldNumber;
const int TeleOpDevice::kTypeFieldNumber;
const int TeleOpDevice::kIpFieldNumber;
const int TeleOpDevice::kPortFieldNumber;
const int TeleOpDevice::kConnectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeleOpDevice::TeleOpDevice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TeleOpDevice)
}
TeleOpDevice::TeleOpDevice(const TeleOpDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&connected_) -
    reinterpret_cast<char*>(&type_)) + sizeof(connected_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TeleOpDevice)
}

void TeleOpDevice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeleOpDevice_control_5fmsgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connected_) -
      reinterpret_cast<char*>(&type_)) + sizeof(connected_));
}

TeleOpDevice::~TeleOpDevice() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TeleOpDevice)
  SharedDtor();
}

void TeleOpDevice::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TeleOpDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeleOpDevice& TeleOpDevice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeleOpDevice_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TeleOpDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TeleOpDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connected_) -
      reinterpret_cast<char*>(&type_)) + sizeof(connected_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TeleOpDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "Nrmk.IndyFramework.TeleOpDevice.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.TeleOpDevice.TeleOpDeviceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType>(val));
        } else goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ip(), ptr, ctx, "Nrmk.IndyFramework.TeleOpDevice.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool connected = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TeleOpDevice::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TeleOpDevice)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.TeleOpDevice.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.TeleOpDevice.TeleOpDeviceType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.TeleOpDevice.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool connected = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TeleOpDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TeleOpDevice)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TeleOpDevice::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TeleOpDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.TeleOpDevice.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .Nrmk.IndyFramework.TeleOpDevice.TeleOpDeviceType type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.TeleOpDevice.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // bool connected = 5;
  if (this->connected() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->connected(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TeleOpDevice)
}

::PROTOBUF_NAMESPACE_ID::uint8* TeleOpDevice::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TeleOpDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.TeleOpDevice.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .Nrmk.IndyFramework.TeleOpDevice.TeleOpDeviceType type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.TeleOpDevice.ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  // bool connected = 5;
  if (this->connected() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->connected(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TeleOpDevice)
  return target;
}

size_t TeleOpDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TeleOpDevice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // .Nrmk.IndyFramework.TeleOpDevice.TeleOpDeviceType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // bool connected = 5;
  if (this->connected() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleOpDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TeleOpDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleOpDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeleOpDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TeleOpDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TeleOpDevice)
    MergeFrom(*source);
  }
}

void TeleOpDevice::MergeFrom(const TeleOpDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TeleOpDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.connected() != 0) {
    set_connected(from.connected());
  }
}

void TeleOpDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TeleOpDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleOpDevice::CopyFrom(const TeleOpDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TeleOpDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleOpDevice::IsInitialized() const {
  return true;
}

void TeleOpDevice::Swap(TeleOpDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeleOpDevice::InternalSwap(TeleOpDevice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(port_, other->port_);
  swap(connected_, other->connected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleOpDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeleOpState::InitAsDefaultInstance() {
}
class TeleOpState::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeleOpState::kModeFieldNumber;
const int TeleOpState::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeleOpState::TeleOpState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TeleOpState)
}
TeleOpState::TeleOpState(const TeleOpState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TeleOpState)
}

void TeleOpState::SharedCtor() {
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(method_));
}

TeleOpState::~TeleOpState() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TeleOpState)
  SharedDtor();
}

void TeleOpState::SharedDtor() {
}

void TeleOpState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeleOpState& TeleOpState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeleOpState_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TeleOpState::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TeleOpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(method_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TeleOpState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.TeleMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_mode(static_cast<::Nrmk::IndyFramework::TeleMode>(val));
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.TeleMethod method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_method(static_cast<::Nrmk::IndyFramework::TeleMethod>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TeleOpState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TeleOpState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.TeleMode mode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::Nrmk::IndyFramework::TeleMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.TeleMethod method = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::Nrmk::IndyFramework::TeleMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TeleOpState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TeleOpState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TeleOpState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TeleOpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TeleMode mode = 1;
  if (this->mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // .Nrmk.IndyFramework.TeleMethod method = 2;
  if (this->method() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->method(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TeleOpState)
}

::PROTOBUF_NAMESPACE_ID::uint8* TeleOpState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TeleOpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TeleMode mode = 1;
  if (this->mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // .Nrmk.IndyFramework.TeleMethod method = 2;
  if (this->method() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->method(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TeleOpState)
  return target;
}

size_t TeleOpState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TeleOpState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TeleMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
  }

  // .Nrmk.IndyFramework.TeleMethod method = 2;
  if (this->method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->method());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleOpState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TeleOpState)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleOpState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeleOpState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TeleOpState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TeleOpState)
    MergeFrom(*source);
  }
}

void TeleOpState::MergeFrom(const TeleOpState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TeleOpState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.method() != 0) {
    set_method(from.method());
  }
}

void TeleOpState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TeleOpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleOpState::CopyFrom(const TeleOpState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TeleOpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleOpState::IsInitialized() const {
  return true;
}

void TeleOpState::Swap(TeleOpState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeleOpState::InternalSwap(TeleOpState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mode_, other->mode_);
  swap(method_, other->method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleOpState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeleP::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_TeleP_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class TeleP::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const TeleP* msg);
};

const ::Nrmk::IndyFramework::Response&
TeleP::HasBitSetters::response(const TeleP* msg) {
  return *msg->response_;
}
void TeleP::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeleP::kTposFieldNumber;
const int TeleP::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeleP::TeleP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TeleP)
}
TeleP::TeleP(const TeleP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TeleP)
}

void TeleP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeleP_control_5fmsgs_2eproto.base);
  response_ = nullptr;
}

TeleP::~TeleP() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TeleP)
  SharedDtor();
}

void TeleP::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void TeleP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeleP& TeleP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeleP_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TeleP::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TeleP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TeleP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TeleP::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TeleP)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TeleP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TeleP)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TeleP::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TeleP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TeleP)
}

::PROTOBUF_NAMESPACE_ID::uint8* TeleP::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TeleP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TeleP)
  return target;
}

size_t TeleP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TeleP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TeleP)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeleP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TeleP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TeleP)
    MergeFrom(*source);
  }
}

void TeleP::MergeFrom(const TeleP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TeleP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
}

void TeleP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TeleP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleP::CopyFrom(const TeleP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TeleP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleP::IsInitialized() const {
  return true;
}

void TeleP::Swap(TeleP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeleP::InternalSwap(TeleP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeleOpFileList::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_TeleOpFileList_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class TeleOpFileList::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const TeleOpFileList* msg);
};

const ::Nrmk::IndyFramework::Response&
TeleOpFileList::HasBitSetters::response(const TeleOpFileList* msg) {
  return *msg->response_;
}
void TeleOpFileList::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeleOpFileList::kFilesFieldNumber;
const int TeleOpFileList::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeleOpFileList::TeleOpFileList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TeleOpFileList)
}
TeleOpFileList::TeleOpFileList(const TeleOpFileList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TeleOpFileList)
}

void TeleOpFileList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeleOpFileList_control_5fmsgs_2eproto.base);
  response_ = nullptr;
}

TeleOpFileList::~TeleOpFileList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TeleOpFileList)
  SharedDtor();
}

void TeleOpFileList::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void TeleOpFileList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeleOpFileList& TeleOpFileList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeleOpFileList_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TeleOpFileList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TeleOpFileList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TeleOpFileList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_files(), ptr, ctx, "Nrmk.IndyFramework.TeleOpFileList.files");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TeleOpFileList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TeleOpFileList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string files = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_files()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->files(this->files_size() - 1).data(),
            static_cast<int>(this->files(this->files_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.TeleOpFileList.files"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TeleOpFileList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TeleOpFileList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TeleOpFileList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TeleOpFileList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string files = 1;
  for (int i = 0, n = this->files_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->files(i).data(), static_cast<int>(this->files(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.TeleOpFileList.files");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->files(i), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TeleOpFileList)
}

::PROTOBUF_NAMESPACE_ID::uint8* TeleOpFileList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TeleOpFileList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string files = 1;
  for (int i = 0, n = this->files_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->files(i).data(), static_cast<int>(this->files(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.TeleOpFileList.files");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->files(i), target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TeleOpFileList)
  return target;
}

size_t TeleOpFileList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TeleOpFileList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string files = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->files_size());
  for (int i = 0, n = this->files_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->files(i));
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleOpFileList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TeleOpFileList)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleOpFileList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeleOpFileList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TeleOpFileList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TeleOpFileList)
    MergeFrom(*source);
  }
}

void TeleOpFileList::MergeFrom(const TeleOpFileList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TeleOpFileList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
}

void TeleOpFileList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TeleOpFileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleOpFileList::CopyFrom(const TeleOpFileList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TeleOpFileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleOpFileList::IsInitialized() const {
  return true;
}

void TeleOpFileList::Swap(TeleOpFileList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeleOpFileList::InternalSwap(TeleOpFileList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  files_.InternalSwap(CastToBase(&other->files_));
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleOpFileList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeleFileReq::InitAsDefaultInstance() {
}
class TeleFileReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeleFileReq::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeleFileReq::TeleFileReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TeleFileReq)
}
TeleFileReq::TeleFileReq(const TeleFileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TeleFileReq)
}

void TeleFileReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeleFileReq_control_5fmsgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TeleFileReq::~TeleFileReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TeleFileReq)
  SharedDtor();
}

void TeleFileReq::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TeleFileReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeleFileReq& TeleFileReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeleFileReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TeleFileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TeleFileReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TeleFileReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "Nrmk.IndyFramework.TeleFileReq.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TeleFileReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TeleFileReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.TeleFileReq.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TeleFileReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TeleFileReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TeleFileReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TeleFileReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.TeleFileReq.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TeleFileReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* TeleFileReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TeleFileReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.TeleFileReq.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TeleFileReq)
  return target;
}

size_t TeleFileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TeleFileReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleFileReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TeleFileReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleFileReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeleFileReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TeleFileReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TeleFileReq)
    MergeFrom(*source);
  }
}

void TeleFileReq::MergeFrom(const TeleFileReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TeleFileReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void TeleFileReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TeleFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleFileReq::CopyFrom(const TeleFileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TeleFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleFileReq::IsInitialized() const {
  return true;
}

void TeleFileReq::Swap(TeleFileReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeleFileReq::InternalSwap(TeleFileReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleFileReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TelePlayRate::InitAsDefaultInstance() {
}
class TelePlayRate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelePlayRate::kRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelePlayRate::TelePlayRate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TelePlayRate)
}
TelePlayRate::TelePlayRate(const TelePlayRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_ = from.rate_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TelePlayRate)
}

void TelePlayRate::SharedCtor() {
  rate_ = 0;
}

TelePlayRate::~TelePlayRate() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TelePlayRate)
  SharedDtor();
}

void TelePlayRate::SharedDtor() {
}

void TelePlayRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TelePlayRate& TelePlayRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TelePlayRate_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TelePlayRate::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TelePlayRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TelePlayRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TelePlayRate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TelePlayRate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float rate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TelePlayRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TelePlayRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TelePlayRate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TelePlayRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float rate = 1;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TelePlayRate)
}

::PROTOBUF_NAMESPACE_ID::uint8* TelePlayRate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TelePlayRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float rate = 1;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TelePlayRate)
  return target;
}

size_t TelePlayRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TelePlayRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float rate = 1;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelePlayRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TelePlayRate)
  GOOGLE_DCHECK_NE(&from, this);
  const TelePlayRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TelePlayRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TelePlayRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TelePlayRate)
    MergeFrom(*source);
  }
}

void TelePlayRate::MergeFrom(const TelePlayRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TelePlayRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    set_rate(from.rate());
  }
}

void TelePlayRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TelePlayRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelePlayRate::CopyFrom(const TelePlayRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TelePlayRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelePlayRate::IsInitialized() const {
  return true;
}

void TelePlayRate::Swap(TelePlayRate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelePlayRate::InternalSwap(TelePlayRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_, other->rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelePlayRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveTeleJReq::InitAsDefaultInstance() {
}
class MoveTeleJReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveTeleJReq::kJposFieldNumber;
const int MoveTeleJReq::kVelRatioFieldNumber;
const int MoveTeleJReq::kAccRatioFieldNumber;
const int MoveTeleJReq::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveTeleJReq::MoveTeleJReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveTeleJReq)
}
MoveTeleJReq::MoveTeleJReq(const MoveTeleJReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      jpos_(from.jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vel_ratio_, &from.vel_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&vel_ratio_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveTeleJReq)
}

void MoveTeleJReq::SharedCtor() {
  ::memset(&vel_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&vel_ratio_)) + sizeof(method_));
}

MoveTeleJReq::~MoveTeleJReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveTeleJReq)
  SharedDtor();
}

void MoveTeleJReq::SharedDtor() {
}

void MoveTeleJReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveTeleJReq& MoveTeleJReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveTeleJReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveTeleJReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveTeleJReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jpos_.Clear();
  ::memset(&vel_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&vel_ratio_)) + sizeof(method_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveTeleJReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float jpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vel_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          vel_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          acc_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.TeleMethod method = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_method(static_cast<::Nrmk::IndyFramework::TeleMethod>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveTeleJReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveTeleJReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float jpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_ratio = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_ratio = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.TeleMethod method = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::Nrmk::IndyFramework::TeleMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveTeleJReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveTeleJReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveTeleJReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveTeleJReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->jpos().data(), this->jpos_size(), output);
  }

  // float vel_ratio = 2;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->vel_ratio(), output);
  }

  // float acc_ratio = 3;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->acc_ratio(), output);
  }

  // .Nrmk.IndyFramework.TeleMethod method = 10;
  if (this->method() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->method(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveTeleJReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveTeleJReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveTeleJReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->jpos_, target);
  }

  // float vel_ratio = 2;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->vel_ratio(), target);
  }

  // float acc_ratio = 3;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.TeleMethod method = 10;
  if (this->method() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->method(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveTeleJReq)
  return target;
}

size_t MoveTeleJReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveTeleJReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float vel_ratio = 2;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc_ratio = 3;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // .Nrmk.IndyFramework.TeleMethod method = 10;
  if (this->method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->method());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveTeleJReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveTeleJReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveTeleJReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveTeleJReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveTeleJReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveTeleJReq)
    MergeFrom(*source);
  }
}

void MoveTeleJReq::MergeFrom(const MoveTeleJReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveTeleJReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jpos_.MergeFrom(from.jpos_);
  if (!(from.vel_ratio() <= 0 && from.vel_ratio() >= 0)) {
    set_vel_ratio(from.vel_ratio());
  }
  if (!(from.acc_ratio() <= 0 && from.acc_ratio() >= 0)) {
    set_acc_ratio(from.acc_ratio());
  }
  if (from.method() != 0) {
    set_method(from.method());
  }
}

void MoveTeleJReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveTeleJReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveTeleJReq::CopyFrom(const MoveTeleJReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveTeleJReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveTeleJReq::IsInitialized() const {
  return true;
}

void MoveTeleJReq::Swap(MoveTeleJReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveTeleJReq::InternalSwap(MoveTeleJReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jpos_.InternalSwap(&other->jpos_);
  swap(vel_ratio_, other->vel_ratio_);
  swap(acc_ratio_, other->acc_ratio_);
  swap(method_, other->method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveTeleJReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveTeleLReq::InitAsDefaultInstance() {
}
class MoveTeleLReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveTeleLReq::kTposFieldNumber;
const int MoveTeleLReq::kVelRatioFieldNumber;
const int MoveTeleLReq::kAccRatioFieldNumber;
const int MoveTeleLReq::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveTeleLReq::MoveTeleLReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveTeleLReq)
}
MoveTeleLReq::MoveTeleLReq(const MoveTeleLReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vel_ratio_, &from.vel_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&vel_ratio_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveTeleLReq)
}

void MoveTeleLReq::SharedCtor() {
  ::memset(&vel_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&vel_ratio_)) + sizeof(method_));
}

MoveTeleLReq::~MoveTeleLReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveTeleLReq)
  SharedDtor();
}

void MoveTeleLReq::SharedDtor() {
}

void MoveTeleLReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveTeleLReq& MoveTeleLReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveTeleLReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveTeleLReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveTeleLReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  ::memset(&vel_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&vel_ratio_)) + sizeof(method_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveTeleLReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vel_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          vel_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          acc_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.TeleMethod method = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_method(static_cast<::Nrmk::IndyFramework::TeleMethod>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveTeleLReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveTeleLReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_ratio = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_ratio = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.TeleMethod method = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::Nrmk::IndyFramework::TeleMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveTeleLReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveTeleLReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveTeleLReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveTeleLReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  // float vel_ratio = 2;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->vel_ratio(), output);
  }

  // float acc_ratio = 3;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->acc_ratio(), output);
  }

  // .Nrmk.IndyFramework.TeleMethod method = 10;
  if (this->method() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->method(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveTeleLReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveTeleLReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveTeleLReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  // float vel_ratio = 2;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->vel_ratio(), target);
  }

  // float acc_ratio = 3;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.TeleMethod method = 10;
  if (this->method() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->method(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveTeleLReq)
  return target;
}

size_t MoveTeleLReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveTeleLReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float vel_ratio = 2;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc_ratio = 3;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // .Nrmk.IndyFramework.TeleMethod method = 10;
  if (this->method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->method());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveTeleLReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveTeleLReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveTeleLReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveTeleLReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveTeleLReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveTeleLReq)
    MergeFrom(*source);
  }
}

void MoveTeleLReq::MergeFrom(const MoveTeleLReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveTeleLReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  if (!(from.vel_ratio() <= 0 && from.vel_ratio() >= 0)) {
    set_vel_ratio(from.vel_ratio());
  }
  if (!(from.acc_ratio() <= 0 && from.acc_ratio() >= 0)) {
    set_acc_ratio(from.acc_ratio());
  }
  if (from.method() != 0) {
    set_method(from.method());
  }
}

void MoveTeleLReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveTeleLReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveTeleLReq::CopyFrom(const MoveTeleLReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveTeleLReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveTeleLReq::IsInitialized() const {
  return true;
}

void MoveTeleLReq::Swap(MoveTeleLReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveTeleLReq::InternalSwap(MoveTeleLReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  swap(vel_ratio_, other->vel_ratio_);
  swap(acc_ratio_, other->acc_ratio_);
  swap(method_, other->method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveTeleLReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveLFReq::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_MoveLFReq_default_instance_._instance.get_mutable()->target_ = const_cast< ::Nrmk::IndyFramework::TargetP*>(
      ::Nrmk::IndyFramework::TargetP::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveLFReq_default_instance_._instance.get_mutable()->blending_ = const_cast< ::Nrmk::IndyFramework::BlendingType*>(
      ::Nrmk::IndyFramework::BlendingType::internal_default_instance());
  ::Nrmk::IndyFramework::_MoveLFReq_default_instance_._instance.get_mutable()->post_condition_ = const_cast< ::Nrmk::IndyFramework::MotionCondition*>(
      ::Nrmk::IndyFramework::MotionCondition::internal_default_instance());
}
class MoveLFReq::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::TargetP& target(const MoveLFReq* msg);
  static const ::Nrmk::IndyFramework::BlendingType& blending(const MoveLFReq* msg);
  static const ::Nrmk::IndyFramework::MotionCondition& post_condition(const MoveLFReq* msg);
};

const ::Nrmk::IndyFramework::TargetP&
MoveLFReq::HasBitSetters::target(const MoveLFReq* msg) {
  return *msg->target_;
}
const ::Nrmk::IndyFramework::BlendingType&
MoveLFReq::HasBitSetters::blending(const MoveLFReq* msg) {
  return *msg->blending_;
}
const ::Nrmk::IndyFramework::MotionCondition&
MoveLFReq::HasBitSetters::post_condition(const MoveLFReq* msg) {
  return *msg->post_condition_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveLFReq::kTargetFieldNumber;
const int MoveLFReq::kBlendingFieldNumber;
const int MoveLFReq::kVelRatioFieldNumber;
const int MoveLFReq::kAccRatioFieldNumber;
const int MoveLFReq::kVelTypeFieldNumber;
const int MoveLFReq::kDesForceFieldNumber;
const int MoveLFReq::kEnabledForceFieldNumber;
const int MoveLFReq::kPostConditionFieldNumber;
const int MoveLFReq::kTeachingModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveLFReq::MoveLFReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveLFReq)
}
MoveLFReq::MoveLFReq(const MoveLFReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      des_force_(from.des_force_),
      enabled_force_(from.enabled_force_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::Nrmk::IndyFramework::TargetP(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from.has_blending()) {
    blending_ = new ::Nrmk::IndyFramework::BlendingType(*from.blending_);
  } else {
    blending_ = nullptr;
  }
  if (from.has_post_condition()) {
    post_condition_ = new ::Nrmk::IndyFramework::MotionCondition(*from.post_condition_);
  } else {
    post_condition_ = nullptr;
  }
  ::memcpy(&vel_ratio_, &from.vel_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&teaching_mode_) -
    reinterpret_cast<char*>(&vel_ratio_)) + sizeof(teaching_mode_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveLFReq)
}

void MoveLFReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveLFReq_control_5fmsgs_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teaching_mode_) -
      reinterpret_cast<char*>(&target_)) + sizeof(teaching_mode_));
}

MoveLFReq::~MoveLFReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveLFReq)
  SharedDtor();
}

void MoveLFReq::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete blending_;
  if (this != internal_default_instance()) delete post_condition_;
}

void MoveLFReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveLFReq& MoveLFReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveLFReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveLFReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveLFReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  des_force_.Clear();
  enabled_force_.Clear();
  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
  ::memset(&vel_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teaching_mode_) -
      reinterpret_cast<char*>(&vel_ratio_)) + sizeof(teaching_mode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveLFReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.TargetP target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_blending(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float vel_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          vel_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          acc_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_vel_type(static_cast<::Nrmk::IndyFramework::VelocityModeType>(val));
        } else goto handle_unusual;
        continue;
      // repeated float des_force = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_des_force(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          add_des_force(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated bool enabled_force = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_enabled_force(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          add_enabled_force(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_post_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool teaching_mode = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          teaching_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveLFReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveLFReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.TargetP target = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.BlendingType blending = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blending()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel_ratio = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_ratio = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vel_type(static_cast< ::Nrmk::IndyFramework::VelocityModeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float des_force = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_des_force())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_des_force())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool enabled_force = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_enabled_force())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 58u, input, this->mutable_enabled_force())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_post_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool teaching_mode = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &teaching_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveLFReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveLFReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveLFReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveLFReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetP target = 1;
  if (this->has_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::target(this), output);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::blending(this), output);
  }

  // float vel_ratio = 3;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->vel_ratio(), output);
  }

  // float acc_ratio = 4;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->acc_ratio(), output);
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
  if (this->vel_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->vel_type(), output);
  }

  // repeated float des_force = 6;
  if (this->des_force_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_des_force_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->des_force().data(), this->des_force_size(), output);
  }

  // repeated bool enabled_force = 7;
  if (this->enabled_force_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_enabled_force_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->enabled_force().data(), this->enabled_force_size(), output);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::post_condition(this), output);
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(30, this->teaching_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveLFReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveLFReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveLFReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TargetP target = 1;
  if (this->has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::target(this), target);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::blending(this), target);
  }

  // float vel_ratio = 3;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->vel_ratio(), target);
  }

  // float acc_ratio = 4;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->acc_ratio(), target);
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
  if (this->vel_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->vel_type(), target);
  }

  // repeated float des_force = 6;
  if (this->des_force_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      6,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _des_force_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->des_force_, target);
  }

  // repeated bool enabled_force = 7;
  if (this->enabled_force_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      7,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _enabled_force_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->enabled_force_, target);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::post_condition(this), target);
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->teaching_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveLFReq)
  return target;
}

size_t MoveLFReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveLFReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float des_force = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->des_force_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _des_force_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool enabled_force = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->enabled_force_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _enabled_force_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.TargetP target = 1;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  if (this->has_blending()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blending_);
  }

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  if (this->has_post_condition()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_condition_);
  }

  // float vel_ratio = 3;
  if (!(this->vel_ratio() <= 0 && this->vel_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc_ratio = 4;
  if (!(this->acc_ratio() <= 0 && this->acc_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
  if (this->vel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->vel_type());
  }

  // bool teaching_mode = 30;
  if (this->teaching_mode() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveLFReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveLFReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveLFReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveLFReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveLFReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveLFReq)
    MergeFrom(*source);
  }
}

void MoveLFReq::MergeFrom(const MoveLFReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveLFReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  des_force_.MergeFrom(from.des_force_);
  enabled_force_.MergeFrom(from.enabled_force_);
  if (from.has_target()) {
    mutable_target()->::Nrmk::IndyFramework::TargetP::MergeFrom(from.target());
  }
  if (from.has_blending()) {
    mutable_blending()->::Nrmk::IndyFramework::BlendingType::MergeFrom(from.blending());
  }
  if (from.has_post_condition()) {
    mutable_post_condition()->::Nrmk::IndyFramework::MotionCondition::MergeFrom(from.post_condition());
  }
  if (!(from.vel_ratio() <= 0 && from.vel_ratio() >= 0)) {
    set_vel_ratio(from.vel_ratio());
  }
  if (!(from.acc_ratio() <= 0 && from.acc_ratio() >= 0)) {
    set_acc_ratio(from.acc_ratio());
  }
  if (from.vel_type() != 0) {
    set_vel_type(from.vel_type());
  }
  if (from.teaching_mode() != 0) {
    set_teaching_mode(from.teaching_mode());
  }
}

void MoveLFReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveLFReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveLFReq::CopyFrom(const MoveLFReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveLFReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveLFReq::IsInitialized() const {
  return true;
}

void MoveLFReq::Swap(MoveLFReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveLFReq::InternalSwap(MoveLFReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  des_force_.InternalSwap(&other->des_force_);
  enabled_force_.InternalSwap(&other->enabled_force_);
  swap(target_, other->target_);
  swap(blending_, other->blending_);
  swap(post_condition_, other->post_condition_);
  swap(vel_ratio_, other->vel_ratio_);
  swap(acc_ratio_, other->acc_ratio_);
  swap(vel_type_, other->vel_type_);
  swap(teaching_mode_, other->teaching_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveLFReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveFLRes::InitAsDefaultInstance() {
}
class MoveFLRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveFLRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveFLRes::MoveFLRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MoveFLRes)
}
MoveFLRes::MoveFLRes(const MoveFLRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MoveFLRes)
}

void MoveFLRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveFLRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoveFLRes::~MoveFLRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MoveFLRes)
  SharedDtor();
}

void MoveFLRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveFLRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveFLRes& MoveFLRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveFLRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveFLRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MoveFLRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveFLRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "Nrmk.IndyFramework.MoveFLRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveFLRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MoveFLRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.MoveFLRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MoveFLRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MoveFLRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveFLRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MoveFLRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.MoveFLRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MoveFLRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveFLRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MoveFLRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.MoveFLRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MoveFLRes)
  return target;
}

size_t MoveFLRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MoveFLRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveFLRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MoveFLRes)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveFLRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveFLRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MoveFLRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MoveFLRes)
    MergeFrom(*source);
  }
}

void MoveFLRes::MergeFrom(const MoveFLRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MoveFLRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void MoveFLRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MoveFLRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveFLRes::CopyFrom(const MoveFLRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MoveFLRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveFLRes::IsInitialized() const {
  return true;
}

void MoveFLRes::Swap(MoveFLRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveFLRes::InternalSwap(MoveFLRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveFLRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransformedFTSensorData::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_TransformedFTSensorData_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class TransformedFTSensorData::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const TransformedFTSensorData* msg);
};

const ::Nrmk::IndyFramework::Response&
TransformedFTSensorData::HasBitSetters::response(const TransformedFTSensorData* msg) {
  return *msg->response_;
}
void TransformedFTSensorData::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformedFTSensorData::kFtFxFieldNumber;
const int TransformedFTSensorData::kFtFyFieldNumber;
const int TransformedFTSensorData::kFtFzFieldNumber;
const int TransformedFTSensorData::kFtTxFieldNumber;
const int TransformedFTSensorData::kFtTyFieldNumber;
const int TransformedFTSensorData::kFtTzFieldNumber;
const int TransformedFTSensorData::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformedFTSensorData::TransformedFTSensorData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TransformedFTSensorData)
}
TransformedFTSensorData::TransformedFTSensorData(const TransformedFTSensorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  ::memcpy(&ft_fx_, &from.ft_fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&ft_tz_) -
    reinterpret_cast<char*>(&ft_fx_)) + sizeof(ft_tz_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TransformedFTSensorData)
}

void TransformedFTSensorData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransformedFTSensorData_control_5fmsgs_2eproto.base);
  ::memset(&response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ft_tz_) -
      reinterpret_cast<char*>(&response_)) + sizeof(ft_tz_));
}

TransformedFTSensorData::~TransformedFTSensorData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TransformedFTSensorData)
  SharedDtor();
}

void TransformedFTSensorData::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void TransformedFTSensorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformedFTSensorData& TransformedFTSensorData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransformedFTSensorData_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TransformedFTSensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TransformedFTSensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  ::memset(&ft_fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ft_tz_) -
      reinterpret_cast<char*>(&ft_fx_)) + sizeof(ft_tz_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransformedFTSensorData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float ft_Fx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ft_fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ft_Fy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ft_fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ft_Fz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ft_fz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ft_Tx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ft_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ft_Ty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ft_ty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ft_Tz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ft_tz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransformedFTSensorData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TransformedFTSensorData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float ft_Fx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ft_fx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ft_Fy = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ft_fy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ft_Fz = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ft_fz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ft_Tx = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ft_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ft_Ty = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ft_ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ft_Tz = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ft_tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TransformedFTSensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TransformedFTSensorData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransformedFTSensorData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TransformedFTSensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ft_Fx = 1;
  if (!(this->ft_fx() <= 0 && this->ft_fx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->ft_fx(), output);
  }

  // float ft_Fy = 2;
  if (!(this->ft_fy() <= 0 && this->ft_fy() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->ft_fy(), output);
  }

  // float ft_Fz = 3;
  if (!(this->ft_fz() <= 0 && this->ft_fz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->ft_fz(), output);
  }

  // float ft_Tx = 4;
  if (!(this->ft_tx() <= 0 && this->ft_tx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->ft_tx(), output);
  }

  // float ft_Ty = 5;
  if (!(this->ft_ty() <= 0 && this->ft_ty() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->ft_ty(), output);
  }

  // float ft_Tz = 6;
  if (!(this->ft_tz() <= 0 && this->ft_tz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->ft_tz(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TransformedFTSensorData)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransformedFTSensorData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TransformedFTSensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ft_Fx = 1;
  if (!(this->ft_fx() <= 0 && this->ft_fx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->ft_fx(), target);
  }

  // float ft_Fy = 2;
  if (!(this->ft_fy() <= 0 && this->ft_fy() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->ft_fy(), target);
  }

  // float ft_Fz = 3;
  if (!(this->ft_fz() <= 0 && this->ft_fz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->ft_fz(), target);
  }

  // float ft_Tx = 4;
  if (!(this->ft_tx() <= 0 && this->ft_tx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->ft_tx(), target);
  }

  // float ft_Ty = 5;
  if (!(this->ft_ty() <= 0 && this->ft_ty() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->ft_ty(), target);
  }

  // float ft_Tz = 6;
  if (!(this->ft_tz() <= 0 && this->ft_tz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->ft_tz(), target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TransformedFTSensorData)
  return target;
}

size_t TransformedFTSensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TransformedFTSensorData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // float ft_Fx = 1;
  if (!(this->ft_fx() <= 0 && this->ft_fx() >= 0)) {
    total_size += 1 + 4;
  }

  // float ft_Fy = 2;
  if (!(this->ft_fy() <= 0 && this->ft_fy() >= 0)) {
    total_size += 1 + 4;
  }

  // float ft_Fz = 3;
  if (!(this->ft_fz() <= 0 && this->ft_fz() >= 0)) {
    total_size += 1 + 4;
  }

  // float ft_Tx = 4;
  if (!(this->ft_tx() <= 0 && this->ft_tx() >= 0)) {
    total_size += 1 + 4;
  }

  // float ft_Ty = 5;
  if (!(this->ft_ty() <= 0 && this->ft_ty() >= 0)) {
    total_size += 1 + 4;
  }

  // float ft_Tz = 6;
  if (!(this->ft_tz() <= 0 && this->ft_tz() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformedFTSensorData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TransformedFTSensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformedFTSensorData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransformedFTSensorData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TransformedFTSensorData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TransformedFTSensorData)
    MergeFrom(*source);
  }
}

void TransformedFTSensorData::MergeFrom(const TransformedFTSensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TransformedFTSensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
  if (!(from.ft_fx() <= 0 && from.ft_fx() >= 0)) {
    set_ft_fx(from.ft_fx());
  }
  if (!(from.ft_fy() <= 0 && from.ft_fy() >= 0)) {
    set_ft_fy(from.ft_fy());
  }
  if (!(from.ft_fz() <= 0 && from.ft_fz() >= 0)) {
    set_ft_fz(from.ft_fz());
  }
  if (!(from.ft_tx() <= 0 && from.ft_tx() >= 0)) {
    set_ft_tx(from.ft_tx());
  }
  if (!(from.ft_ty() <= 0 && from.ft_ty() >= 0)) {
    set_ft_ty(from.ft_ty());
  }
  if (!(from.ft_tz() <= 0 && from.ft_tz() >= 0)) {
    set_ft_tz(from.ft_tz());
  }
}

void TransformedFTSensorData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TransformedFTSensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformedFTSensorData::CopyFrom(const TransformedFTSensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TransformedFTSensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformedFTSensorData::IsInitialized() const {
  return true;
}

void TransformedFTSensorData::Swap(TransformedFTSensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformedFTSensorData::InternalSwap(TransformedFTSensorData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(ft_fx_, other->ft_fx_);
  swap(ft_fy_, other->ft_fy_);
  swap(ft_fz_, other->ft_fz_);
  swap(ft_tx_, other->ft_tx_);
  swap(ft_ty_, other->ft_ty_);
  swap(ft_tz_, other->ft_tz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformedFTSensorData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::ControlInfo* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::ControlInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::ControlInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::SDKLicenseInfo* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::SDKLicenseInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::SDKLicenseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::SDKLicenseResp* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::SDKLicenseResp >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::SDKLicenseResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::VariableCondition* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::VariableCondition >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::VariableCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::IOCondition* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::IOCondition >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::IOCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MotionCondition* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MotionCondition >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MotionCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::BlendingType* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::BlendingType >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::BlendingType >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TargetJ* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TargetJ >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TargetJ >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveJReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveJReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveJReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveJCondReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveJCondReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveJCondReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveJTReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveJTReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveJTReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TargetP* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TargetP >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TargetP >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TargetC* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TargetC >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TargetC >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveLReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveLReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveLReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveLTReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveLTReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveLTReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveAxisReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveAxisReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveAxisReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveCReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveCReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveCReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveCTReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveCTReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveCTReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveJointTrajReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveJointTrajReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveJointTrajReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveTaskTrajReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveTaskTrajReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveTaskTrajReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveConveyorReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveConveyorReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveConveyorReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::WaitIOReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::WaitIOReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::WaitIOReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::WaitTimeReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::WaitTimeReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::WaitTimeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::WaitProgressReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::WaitProgressReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::WaitProgressReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::WaitTrajReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::WaitTrajReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::WaitTrajReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::WaitRadiusReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::WaitRadiusReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::WaitRadiusReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::Program* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::Program >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::Program >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TuningProgram* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TuningProgram >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TuningProgram >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::ProgramInfo* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::ProgramInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::ProgramInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::Variable* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::Variable >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::Variable >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::IntVariable* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::IntVariable >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::IntVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::ModbusVariable* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::ModbusVariable >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::ModbusVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::BoolVariable* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::BoolVariable >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::BoolVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::FloatVariable* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::FloatVariable >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::FloatVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::JPosVariable* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::JPosVariable >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::JPosVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TPosVariable* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TPosVariable >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TPosVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::ModbusServer* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::ModbusServer >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::ModbusServer >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::ModbusVariableList* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::ModbusVariableList >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::ModbusVariableList >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::AllVars* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::AllVars >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::AllVars >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::IntVars* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::IntVars >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::IntVars >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::ModbusVars* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::ModbusVars >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::ModbusVars >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::BoolVars* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::BoolVars >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::BoolVars >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::FloatVars* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::FloatVars >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::FloatVars >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::JPosVars* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::JPosVars >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::JPosVars >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TPosVars* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TPosVars >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TPosVars >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::InverseKinematicsReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::InverseKinematicsReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::InverseKinematicsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::InverseKinematicsRes* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::InverseKinematicsRes >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::InverseKinematicsRes >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::ForwardKinematicsReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::ForwardKinematicsReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::ForwardKinematicsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::ForwardKinematicsRes* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::ForwardKinematicsRes >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::ForwardKinematicsRes >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::CheckAproachRetractValidReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::CheckAproachRetractValidReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::CheckAproachRetractValidReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::CheckAproachRetractValidRes* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::CheckAproachRetractValidRes >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::CheckAproachRetractValidRes >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::GetPalletPointListReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::GetPalletPointListReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::GetPalletPointListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::PalletPoint* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::PalletPoint >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::PalletPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::GetPalletPointListRes* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::GetPalletPointListRes >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::GetPalletPointListRes >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::CalculateRelativePoseReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::CalculateRelativePoseReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::CalculateRelativePoseReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::CalculateRelativePoseRes* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::CalculateRelativePoseRes >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::CalculateRelativePoseRes >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::CalculateCurrentPoseRelReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::CalculateCurrentPoseRelReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::CalculateCurrentPoseRelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TeleOpDevice* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TeleOpDevice >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TeleOpDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TeleOpState* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TeleOpState >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TeleOpState >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TeleP* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TeleP >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TeleP >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TeleOpFileList* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TeleOpFileList >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TeleOpFileList >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TeleFileReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TeleFileReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TeleFileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TelePlayRate* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TelePlayRate >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TelePlayRate >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveTeleJReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveTeleJReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveTeleJReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveTeleLReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveTeleLReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveTeleLReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveLFReq* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveLFReq >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveLFReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MoveFLRes* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MoveFLRes >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MoveFLRes >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TransformedFTSensorData* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TransformedFTSensorData >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TransformedFTSensorData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
