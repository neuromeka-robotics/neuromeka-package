// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common_msgs.pb.h"
#include "device_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[34]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_5fmsgs_2eproto;
namespace Nrmk {
namespace IndyFramework {
class AutoServoOffConfig;
class AutoServoOffConfigDefaultTypeInternal;
extern AutoServoOffConfigDefaultTypeInternal _AutoServoOffConfig_default_instance_;
class CollTuningConfig;
class CollTuningConfigDefaultTypeInternal;
extern CollTuningConfigDefaultTypeInternal _CollTuningConfig_default_instance_;
class CollisionPolicy;
class CollisionPolicyDefaultTypeInternal;
extern CollisionPolicyDefaultTypeInternal _CollisionPolicy_default_instance_;
class CollisionSensLevel;
class CollisionSensLevelDefaultTypeInternal;
extern CollisionSensLevelDefaultTypeInternal _CollisionSensLevel_default_instance_;
class CollisionThresholds;
class CollisionThresholdsDefaultTypeInternal;
extern CollisionThresholdsDefaultTypeInternal _CollisionThresholds_default_instance_;
class CustomGainSet;
class CustomGainSetDefaultTypeInternal;
extern CustomGainSetDefaultTypeInternal _CustomGainSet_default_instance_;
class DIConfig;
class DIConfigDefaultTypeInternal;
extern DIConfigDefaultTypeInternal _DIConfig_default_instance_;
class DIConfigList;
class DIConfigListDefaultTypeInternal;
extern DIConfigListDefaultTypeInternal _DIConfigList_default_instance_;
class DOConfig;
class DOConfigDefaultTypeInternal;
extern DOConfigDefaultTypeInternal _DOConfig_default_instance_;
class DOConfigList;
class DOConfigListDefaultTypeInternal;
extern DOConfigListDefaultTypeInternal _DOConfigList_default_instance_;
class FTSensorDevice;
class FTSensorDeviceDefaultTypeInternal;
extern FTSensorDeviceDefaultTypeInternal _FTSensorDevice_default_instance_;
class FTSensorDeviceRes;
class FTSensorDeviceResDefaultTypeInternal;
extern FTSensorDeviceResDefaultTypeInternal _FTSensorDeviceRes_default_instance_;
class ForceGainSet;
class ForceGainSetDefaultTypeInternal;
extern ForceGainSetDefaultTypeInternal _ForceGainSet_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class FrameResult;
class FrameResultDefaultTypeInternal;
extern FrameResultDefaultTypeInternal _FrameResult_default_instance_;
class FrictionCompSet;
class FrictionCompSetDefaultTypeInternal;
extern FrictionCompSetDefaultTypeInternal _FrictionCompSet_default_instance_;
class GetReducedRatioRes;
class GetReducedRatioResDefaultTypeInternal;
extern GetReducedRatioResDefaultTypeInternal _GetReducedRatioRes_default_instance_;
class GetReducedSpeedRes;
class GetReducedSpeedResDefaultTypeInternal;
extern GetReducedSpeedResDefaultTypeInternal _GetReducedSpeedRes_default_instance_;
class ImpedanceGainSet;
class ImpedanceGainSetDefaultTypeInternal;
extern ImpedanceGainSetDefaultTypeInternal _ImpedanceGainSet_default_instance_;
class JointGainSet;
class JointGainSetDefaultTypeInternal;
extern JointGainSetDefaultTypeInternal _JointGainSet_default_instance_;
class JointPos;
class JointPosDefaultTypeInternal;
extern JointPosDefaultTypeInternal _JointPos_default_instance_;
class KinematicsParams;
class KinematicsParamsDefaultTypeInternal;
extern KinematicsParamsDefaultTypeInternal _KinematicsParams_default_instance_;
class KinematicsParams_MDH;
class KinematicsParams_MDHDefaultTypeInternal;
extern KinematicsParams_MDHDefaultTypeInternal _KinematicsParams_MDH_default_instance_;
class MountingAngles;
class MountingAnglesDefaultTypeInternal;
extern MountingAnglesDefaultTypeInternal _MountingAngles_default_instance_;
class NewControllerTestState;
class NewControllerTestStateDefaultTypeInternal;
extern NewControllerTestStateDefaultTypeInternal _NewControllerTestState_default_instance_;
class PlanarFrame;
class PlanarFrameDefaultTypeInternal;
extern PlanarFrameDefaultTypeInternal _PlanarFrame_default_instance_;
class Ratio;
class RatioDefaultTypeInternal;
extern RatioDefaultTypeInternal _Ratio_default_instance_;
class SafetyLimits;
class SafetyLimitsDefaultTypeInternal;
extern SafetyLimitsDefaultTypeInternal _SafetyLimits_default_instance_;
class SafetyStopConfig;
class SafetyStopConfigDefaultTypeInternal;
extern SafetyStopConfigDefaultTypeInternal _SafetyStopConfig_default_instance_;
class SetReducedSpeedReq;
class SetReducedSpeedReqDefaultTypeInternal;
extern SetReducedSpeedReqDefaultTypeInternal _SetReducedSpeedReq_default_instance_;
class TaskGainSet;
class TaskGainSetDefaultTypeInternal;
extern TaskGainSetDefaultTypeInternal _TaskGainSet_default_instance_;
class TeleOpParams;
class TeleOpParamsDefaultTypeInternal;
extern TeleOpParamsDefaultTypeInternal _TeleOpParams_default_instance_;
class TestGainSet;
class TestGainSetDefaultTypeInternal;
extern TestGainSetDefaultTypeInternal _TestGainSet_default_instance_;
class ToolProperties;
class ToolPropertiesDefaultTypeInternal;
extern ToolPropertiesDefaultTypeInternal _ToolProperties_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
PROTOBUF_NAMESPACE_OPEN
template<> ::Nrmk::IndyFramework::AutoServoOffConfig* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::AutoServoOffConfig>(Arena*);
template<> ::Nrmk::IndyFramework::CollTuningConfig* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::CollTuningConfig>(Arena*);
template<> ::Nrmk::IndyFramework::CollisionPolicy* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::CollisionPolicy>(Arena*);
template<> ::Nrmk::IndyFramework::CollisionSensLevel* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::CollisionSensLevel>(Arena*);
template<> ::Nrmk::IndyFramework::CollisionThresholds* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::CollisionThresholds>(Arena*);
template<> ::Nrmk::IndyFramework::CustomGainSet* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::CustomGainSet>(Arena*);
template<> ::Nrmk::IndyFramework::DIConfig* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::DIConfig>(Arena*);
template<> ::Nrmk::IndyFramework::DIConfigList* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::DIConfigList>(Arena*);
template<> ::Nrmk::IndyFramework::DOConfig* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::DOConfig>(Arena*);
template<> ::Nrmk::IndyFramework::DOConfigList* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::DOConfigList>(Arena*);
template<> ::Nrmk::IndyFramework::FTSensorDevice* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::FTSensorDevice>(Arena*);
template<> ::Nrmk::IndyFramework::FTSensorDeviceRes* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::FTSensorDeviceRes>(Arena*);
template<> ::Nrmk::IndyFramework::ForceGainSet* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ForceGainSet>(Arena*);
template<> ::Nrmk::IndyFramework::Frame* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::Frame>(Arena*);
template<> ::Nrmk::IndyFramework::FrameResult* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::FrameResult>(Arena*);
template<> ::Nrmk::IndyFramework::FrictionCompSet* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::FrictionCompSet>(Arena*);
template<> ::Nrmk::IndyFramework::GetReducedRatioRes* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::GetReducedRatioRes>(Arena*);
template<> ::Nrmk::IndyFramework::GetReducedSpeedRes* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::GetReducedSpeedRes>(Arena*);
template<> ::Nrmk::IndyFramework::ImpedanceGainSet* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ImpedanceGainSet>(Arena*);
template<> ::Nrmk::IndyFramework::JointGainSet* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::JointGainSet>(Arena*);
template<> ::Nrmk::IndyFramework::JointPos* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::JointPos>(Arena*);
template<> ::Nrmk::IndyFramework::KinematicsParams* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::KinematicsParams>(Arena*);
template<> ::Nrmk::IndyFramework::KinematicsParams_MDH* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::KinematicsParams_MDH>(Arena*);
template<> ::Nrmk::IndyFramework::MountingAngles* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MountingAngles>(Arena*);
template<> ::Nrmk::IndyFramework::NewControllerTestState* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::NewControllerTestState>(Arena*);
template<> ::Nrmk::IndyFramework::PlanarFrame* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::PlanarFrame>(Arena*);
template<> ::Nrmk::IndyFramework::Ratio* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::Ratio>(Arena*);
template<> ::Nrmk::IndyFramework::SafetyLimits* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::SafetyLimits>(Arena*);
template<> ::Nrmk::IndyFramework::SafetyStopConfig* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::SafetyStopConfig>(Arena*);
template<> ::Nrmk::IndyFramework::SetReducedSpeedReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::SetReducedSpeedReq>(Arena*);
template<> ::Nrmk::IndyFramework::TaskGainSet* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TaskGainSet>(Arena*);
template<> ::Nrmk::IndyFramework::TeleOpParams* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TeleOpParams>(Arena*);
template<> ::Nrmk::IndyFramework::TestGainSet* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TestGainSet>(Arena*);
template<> ::Nrmk::IndyFramework::ToolProperties* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ToolProperties>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Nrmk {
namespace IndyFramework {

enum CollTuningConfig_TuningPrecision : int {
  CollTuningConfig_TuningPrecision_LOW_TUNE = 0,
  CollTuningConfig_TuningPrecision_MIDDLE_TUNE = 1,
  CollTuningConfig_TuningPrecision_HIGH_TUNE = 2,
  CollTuningConfig_TuningPrecision_CollTuningConfig_TuningPrecision_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CollTuningConfig_TuningPrecision_CollTuningConfig_TuningPrecision_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CollTuningConfig_TuningPrecision_IsValid(int value);
constexpr CollTuningConfig_TuningPrecision CollTuningConfig_TuningPrecision_TuningPrecision_MIN = CollTuningConfig_TuningPrecision_LOW_TUNE;
constexpr CollTuningConfig_TuningPrecision CollTuningConfig_TuningPrecision_TuningPrecision_MAX = CollTuningConfig_TuningPrecision_HIGH_TUNE;
constexpr int CollTuningConfig_TuningPrecision_TuningPrecision_ARRAYSIZE = CollTuningConfig_TuningPrecision_TuningPrecision_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollTuningConfig_TuningPrecision_descriptor();
template<typename T>
inline const std::string& CollTuningConfig_TuningPrecision_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CollTuningConfig_TuningPrecision>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CollTuningConfig_TuningPrecision_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CollTuningConfig_TuningPrecision_descriptor(), enum_t_value);
}
inline bool CollTuningConfig_TuningPrecision_Parse(
    const std::string& name, CollTuningConfig_TuningPrecision* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CollTuningConfig_TuningPrecision>(
    CollTuningConfig_TuningPrecision_descriptor(), name, value);
}
enum CollTuningConfig_TuningSpace : int {
  CollTuningConfig_TuningSpace_NO_TUNE = 0,
  CollTuningConfig_TuningSpace_JOINT_TUNE = 1,
  CollTuningConfig_TuningSpace_TASK_TUNE = 2,
  CollTuningConfig_TuningSpace_ALL_TUNE = 3,
  CollTuningConfig_TuningSpace_CollTuningConfig_TuningSpace_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CollTuningConfig_TuningSpace_CollTuningConfig_TuningSpace_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CollTuningConfig_TuningSpace_IsValid(int value);
constexpr CollTuningConfig_TuningSpace CollTuningConfig_TuningSpace_TuningSpace_MIN = CollTuningConfig_TuningSpace_NO_TUNE;
constexpr CollTuningConfig_TuningSpace CollTuningConfig_TuningSpace_TuningSpace_MAX = CollTuningConfig_TuningSpace_ALL_TUNE;
constexpr int CollTuningConfig_TuningSpace_TuningSpace_ARRAYSIZE = CollTuningConfig_TuningSpace_TuningSpace_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollTuningConfig_TuningSpace_descriptor();
template<typename T>
inline const std::string& CollTuningConfig_TuningSpace_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CollTuningConfig_TuningSpace>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CollTuningConfig_TuningSpace_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CollTuningConfig_TuningSpace_descriptor(), enum_t_value);
}
inline bool CollTuningConfig_TuningSpace_Parse(
    const std::string& name, CollTuningConfig_TuningSpace* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CollTuningConfig_TuningSpace>(
    CollTuningConfig_TuningSpace_descriptor(), name, value);
}
enum FTSensorDevice_FTSensorDeviceType : int {
  FTSensorDevice_FTSensorDeviceType_NONE = 0,
  FTSensorDevice_FTSensorDeviceType_AFT200_D80 = 1,
  FTSensorDevice_FTSensorDeviceType_AFT200_D80_EC = 2,
  FTSensorDevice_FTSensorDeviceType_RFT80_6A01 = 3,
  FTSensorDevice_FTSensorDeviceType_RFT60_HA01 = 4,
  FTSensorDevice_FTSensorDeviceType_HEX_E_H_QC = 5,
  FTSensorDevice_FTSensorDeviceType_FTSensorDevice_FTSensorDeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FTSensorDevice_FTSensorDeviceType_FTSensorDevice_FTSensorDeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FTSensorDevice_FTSensorDeviceType_IsValid(int value);
constexpr FTSensorDevice_FTSensorDeviceType FTSensorDevice_FTSensorDeviceType_FTSensorDeviceType_MIN = FTSensorDevice_FTSensorDeviceType_NONE;
constexpr FTSensorDevice_FTSensorDeviceType FTSensorDevice_FTSensorDeviceType_FTSensorDeviceType_MAX = FTSensorDevice_FTSensorDeviceType_HEX_E_H_QC;
constexpr int FTSensorDevice_FTSensorDeviceType_FTSensorDeviceType_ARRAYSIZE = FTSensorDevice_FTSensorDeviceType_FTSensorDeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FTSensorDevice_FTSensorDeviceType_descriptor();
template<typename T>
inline const std::string& FTSensorDevice_FTSensorDeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FTSensorDevice_FTSensorDeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FTSensorDevice_FTSensorDeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FTSensorDevice_FTSensorDeviceType_descriptor(), enum_t_value);
}
inline bool FTSensorDevice_FTSensorDeviceType_Parse(
    const std::string& name, FTSensorDevice_FTSensorDeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FTSensorDevice_FTSensorDeviceType>(
    FTSensorDevice_FTSensorDeviceType_descriptor(), name, value);
}
enum FTSensorDevice_FTSensorDeviceComType : int {
  FTSensorDevice_FTSensorDeviceComType_ENDTOOLCAN = 0,
  FTSensorDevice_FTSensorDeviceComType_CBCAN = 1,
  FTSensorDevice_FTSensorDeviceComType_MODBUSCLIENT = 2,
  FTSensorDevice_FTSensorDeviceComType_ETHERCAT = 3,
  FTSensorDevice_FTSensorDeviceComType_FTSensorDevice_FTSensorDeviceComType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FTSensorDevice_FTSensorDeviceComType_FTSensorDevice_FTSensorDeviceComType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FTSensorDevice_FTSensorDeviceComType_IsValid(int value);
constexpr FTSensorDevice_FTSensorDeviceComType FTSensorDevice_FTSensorDeviceComType_FTSensorDeviceComType_MIN = FTSensorDevice_FTSensorDeviceComType_ENDTOOLCAN;
constexpr FTSensorDevice_FTSensorDeviceComType FTSensorDevice_FTSensorDeviceComType_FTSensorDeviceComType_MAX = FTSensorDevice_FTSensorDeviceComType_ETHERCAT;
constexpr int FTSensorDevice_FTSensorDeviceComType_FTSensorDeviceComType_ARRAYSIZE = FTSensorDevice_FTSensorDeviceComType_FTSensorDeviceComType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FTSensorDevice_FTSensorDeviceComType_descriptor();
template<typename T>
inline const std::string& FTSensorDevice_FTSensorDeviceComType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FTSensorDevice_FTSensorDeviceComType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FTSensorDevice_FTSensorDeviceComType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FTSensorDevice_FTSensorDeviceComType_descriptor(), enum_t_value);
}
inline bool FTSensorDevice_FTSensorDeviceComType_Parse(
    const std::string& name, FTSensorDevice_FTSensorDeviceComType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FTSensorDevice_FTSensorDeviceComType>(
    FTSensorDevice_FTSensorDeviceComType_descriptor(), name, value);
}
enum KinematicsParams_JointType : int {
  KinematicsParams_JointType_REVOLUTE = 0,
  KinematicsParams_JointType_PRISMATIC = 1,
  KinematicsParams_JointType_KinematicsParams_JointType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  KinematicsParams_JointType_KinematicsParams_JointType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool KinematicsParams_JointType_IsValid(int value);
constexpr KinematicsParams_JointType KinematicsParams_JointType_JointType_MIN = KinematicsParams_JointType_REVOLUTE;
constexpr KinematicsParams_JointType KinematicsParams_JointType_JointType_MAX = KinematicsParams_JointType_PRISMATIC;
constexpr int KinematicsParams_JointType_JointType_ARRAYSIZE = KinematicsParams_JointType_JointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KinematicsParams_JointType_descriptor();
template<typename T>
inline const std::string& KinematicsParams_JointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KinematicsParams_JointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KinematicsParams_JointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KinematicsParams_JointType_descriptor(), enum_t_value);
}
inline bool KinematicsParams_JointType_Parse(
    const std::string& name, KinematicsParams_JointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KinematicsParams_JointType>(
    KinematicsParams_JointType_descriptor(), name, value);
}
// ===================================================================

class Frame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Frame* other);
  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.Frame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float fpos = 1;
  int fpos_size() const;
  void clear_fpos();
  static const int kFposFieldNumber = 1;
  float fpos(int index) const;
  void set_fpos(int index, float value);
  void add_fpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fpos();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Frame)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fpos_;
  mutable std::atomic<int> _fpos_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class JointPos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.JointPos) */ {
 public:
  JointPos();
  virtual ~JointPos();

  JointPos(const JointPos& from);
  JointPos(JointPos&& from) noexcept
    : JointPos() {
    *this = ::std::move(from);
  }

  inline JointPos& operator=(const JointPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointPos& operator=(JointPos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointPos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointPos* internal_default_instance() {
    return reinterpret_cast<const JointPos*>(
               &_JointPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(JointPos* other);
  friend void swap(JointPos& a, JointPos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JointPos* New() const final {
    return CreateMaybeMessage<JointPos>(nullptr);
  }

  JointPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointPos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointPos& from);
  void MergeFrom(const JointPos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointPos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.JointPos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float jpos = 1;
  int jpos_size() const;
  void clear_jpos();
  static const int kJposFieldNumber = 1;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_jpos();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.JointPos)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > jpos_;
  mutable std::atomic<int> _jpos_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PlanarFrame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.PlanarFrame) */ {
 public:
  PlanarFrame();
  virtual ~PlanarFrame();

  PlanarFrame(const PlanarFrame& from);
  PlanarFrame(PlanarFrame&& from) noexcept
    : PlanarFrame() {
    *this = ::std::move(from);
  }

  inline PlanarFrame& operator=(const PlanarFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanarFrame& operator=(PlanarFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanarFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanarFrame* internal_default_instance() {
    return reinterpret_cast<const PlanarFrame*>(
               &_PlanarFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlanarFrame* other);
  friend void swap(PlanarFrame& a, PlanarFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlanarFrame* New() const final {
    return CreateMaybeMessage<PlanarFrame>(nullptr);
  }

  PlanarFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanarFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanarFrame& from);
  void MergeFrom(const PlanarFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanarFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.PlanarFrame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float fpos0 = 1;
  int fpos0_size() const;
  void clear_fpos0();
  static const int kFpos0FieldNumber = 1;
  float fpos0(int index) const;
  void set_fpos0(int index, float value);
  void add_fpos0(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fpos0() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fpos0();

  // repeated float fpos1 = 2;
  int fpos1_size() const;
  void clear_fpos1();
  static const int kFpos1FieldNumber = 2;
  float fpos1(int index) const;
  void set_fpos1(int index, float value);
  void add_fpos1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fpos1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fpos1();

  // repeated float fpos2 = 3;
  int fpos2_size() const;
  void clear_fpos2();
  static const int kFpos2FieldNumber = 3;
  float fpos2(int index) const;
  void set_fpos2(int index, float value);
  void add_fpos2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fpos2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fpos2();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.PlanarFrame)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fpos0_;
  mutable std::atomic<int> _fpos0_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fpos1_;
  mutable std::atomic<int> _fpos1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fpos2_;
  mutable std::atomic<int> _fpos2_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class FrameResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FrameResult) */ {
 public:
  FrameResult();
  virtual ~FrameResult();

  FrameResult(const FrameResult& from);
  FrameResult(FrameResult&& from) noexcept
    : FrameResult() {
    *this = ::std::move(from);
  }

  inline FrameResult& operator=(const FrameResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameResult& operator=(FrameResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameResult* internal_default_instance() {
    return reinterpret_cast<const FrameResult*>(
               &_FrameResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FrameResult* other);
  friend void swap(FrameResult& a, FrameResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameResult* New() const final {
    return CreateMaybeMessage<FrameResult>(nullptr);
  }

  FrameResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameResult& from);
  void MergeFrom(const FrameResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.FrameResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float fpos = 1;
  int fpos_size() const;
  void clear_fpos();
  static const int kFposFieldNumber = 1;
  float fpos(int index) const;
  void set_fpos(int index, float value);
  void add_fpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fpos();

  // .Nrmk.IndyFramework.Response response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FrameResult)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fpos_;
  mutable std::atomic<int> _fpos_cached_byte_size_;
  ::Nrmk::IndyFramework::Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Ratio :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Ratio) */ {
 public:
  Ratio();
  virtual ~Ratio();

  Ratio(const Ratio& from);
  Ratio(Ratio&& from) noexcept
    : Ratio() {
    *this = ::std::move(from);
  }

  inline Ratio& operator=(const Ratio& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ratio& operator=(Ratio&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ratio& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ratio* internal_default_instance() {
    return reinterpret_cast<const Ratio*>(
               &_Ratio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Ratio* other);
  friend void swap(Ratio& a, Ratio& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ratio* New() const final {
    return CreateMaybeMessage<Ratio>(nullptr);
  }

  Ratio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ratio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ratio& from);
  void MergeFrom(const Ratio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ratio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.Ratio";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 ratio = 1;
  void clear_ratio();
  static const int kRatioFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Ratio)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AutoServoOffConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.AutoServoOffConfig) */ {
 public:
  AutoServoOffConfig();
  virtual ~AutoServoOffConfig();

  AutoServoOffConfig(const AutoServoOffConfig& from);
  AutoServoOffConfig(AutoServoOffConfig&& from) noexcept
    : AutoServoOffConfig() {
    *this = ::std::move(from);
  }

  inline AutoServoOffConfig& operator=(const AutoServoOffConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoServoOffConfig& operator=(AutoServoOffConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoServoOffConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoServoOffConfig* internal_default_instance() {
    return reinterpret_cast<const AutoServoOffConfig*>(
               &_AutoServoOffConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AutoServoOffConfig* other);
  friend void swap(AutoServoOffConfig& a, AutoServoOffConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AutoServoOffConfig* New() const final {
    return CreateMaybeMessage<AutoServoOffConfig>(nullptr);
  }

  AutoServoOffConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoServoOffConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoServoOffConfig& from);
  void MergeFrom(const AutoServoOffConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoServoOffConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.AutoServoOffConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // float time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.AutoServoOffConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool enable_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CollTuningConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CollTuningConfig) */ {
 public:
  CollTuningConfig();
  virtual ~CollTuningConfig();

  CollTuningConfig(const CollTuningConfig& from);
  CollTuningConfig(CollTuningConfig&& from) noexcept
    : CollTuningConfig() {
    *this = ::std::move(from);
  }

  inline CollTuningConfig& operator=(const CollTuningConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollTuningConfig& operator=(CollTuningConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollTuningConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollTuningConfig* internal_default_instance() {
    return reinterpret_cast<const CollTuningConfig*>(
               &_CollTuningConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CollTuningConfig* other);
  friend void swap(CollTuningConfig& a, CollTuningConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CollTuningConfig* New() const final {
    return CreateMaybeMessage<CollTuningConfig>(nullptr);
  }

  CollTuningConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollTuningConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollTuningConfig& from);
  void MergeFrom(const CollTuningConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollTuningConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.CollTuningConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CollTuningConfig_TuningPrecision TuningPrecision;
  static constexpr TuningPrecision LOW_TUNE =
    CollTuningConfig_TuningPrecision_LOW_TUNE;
  static constexpr TuningPrecision MIDDLE_TUNE =
    CollTuningConfig_TuningPrecision_MIDDLE_TUNE;
  static constexpr TuningPrecision HIGH_TUNE =
    CollTuningConfig_TuningPrecision_HIGH_TUNE;
  static inline bool TuningPrecision_IsValid(int value) {
    return CollTuningConfig_TuningPrecision_IsValid(value);
  }
  static constexpr TuningPrecision TuningPrecision_MIN =
    CollTuningConfig_TuningPrecision_TuningPrecision_MIN;
  static constexpr TuningPrecision TuningPrecision_MAX =
    CollTuningConfig_TuningPrecision_TuningPrecision_MAX;
  static constexpr int TuningPrecision_ARRAYSIZE =
    CollTuningConfig_TuningPrecision_TuningPrecision_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TuningPrecision_descriptor() {
    return CollTuningConfig_TuningPrecision_descriptor();
  }
  template<typename T>
  static inline const std::string& TuningPrecision_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TuningPrecision>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TuningPrecision_Name.");
    return CollTuningConfig_TuningPrecision_Name(enum_t_value);
  }
  static inline bool TuningPrecision_Parse(const std::string& name,
      TuningPrecision* value) {
    return CollTuningConfig_TuningPrecision_Parse(name, value);
  }

  typedef CollTuningConfig_TuningSpace TuningSpace;
  static constexpr TuningSpace NO_TUNE =
    CollTuningConfig_TuningSpace_NO_TUNE;
  static constexpr TuningSpace JOINT_TUNE =
    CollTuningConfig_TuningSpace_JOINT_TUNE;
  static constexpr TuningSpace TASK_TUNE =
    CollTuningConfig_TuningSpace_TASK_TUNE;
  static constexpr TuningSpace ALL_TUNE =
    CollTuningConfig_TuningSpace_ALL_TUNE;
  static inline bool TuningSpace_IsValid(int value) {
    return CollTuningConfig_TuningSpace_IsValid(value);
  }
  static constexpr TuningSpace TuningSpace_MIN =
    CollTuningConfig_TuningSpace_TuningSpace_MIN;
  static constexpr TuningSpace TuningSpace_MAX =
    CollTuningConfig_TuningSpace_TuningSpace_MAX;
  static constexpr int TuningSpace_ARRAYSIZE =
    CollTuningConfig_TuningSpace_TuningSpace_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TuningSpace_descriptor() {
    return CollTuningConfig_TuningSpace_descriptor();
  }
  template<typename T>
  static inline const std::string& TuningSpace_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TuningSpace>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TuningSpace_Name.");
    return CollTuningConfig_TuningSpace_Name(enum_t_value);
  }
  static inline bool TuningSpace_Parse(const std::string& name,
      TuningSpace* value) {
    return CollTuningConfig_TuningSpace_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.CollTuningConfig.TuningPrecision precision = 1;
  void clear_precision();
  static const int kPrecisionFieldNumber = 1;
  ::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision precision() const;
  void set_precision(::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision value);

  // .Nrmk.IndyFramework.CollTuningConfig.TuningSpace tuning_space = 2;
  void clear_tuning_space();
  static const int kTuningSpaceFieldNumber = 2;
  ::Nrmk::IndyFramework::CollTuningConfig_TuningSpace tuning_space() const;
  void set_tuning_space(::Nrmk::IndyFramework::CollTuningConfig_TuningSpace value);

  // int32 vel_level_max = 3;
  void clear_vel_level_max();
  static const int kVelLevelMaxFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 vel_level_max() const;
  void set_vel_level_max(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CollTuningConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int precision_;
  int tuning_space_;
  ::PROTOBUF_NAMESPACE_ID::int32 vel_level_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class JointGainSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.JointGainSet) */ {
 public:
  JointGainSet();
  virtual ~JointGainSet();

  JointGainSet(const JointGainSet& from);
  JointGainSet(JointGainSet&& from) noexcept
    : JointGainSet() {
    *this = ::std::move(from);
  }

  inline JointGainSet& operator=(const JointGainSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointGainSet& operator=(JointGainSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointGainSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointGainSet* internal_default_instance() {
    return reinterpret_cast<const JointGainSet*>(
               &_JointGainSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(JointGainSet* other);
  friend void swap(JointGainSet& a, JointGainSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JointGainSet* New() const final {
    return CreateMaybeMessage<JointGainSet>(nullptr);
  }

  JointGainSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointGainSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointGainSet& from);
  void MergeFrom(const JointGainSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointGainSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.JointGainSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float kp = 1;
  int kp_size() const;
  void clear_kp();
  static const int kKpFieldNumber = 1;
  float kp(int index) const;
  void set_kp(int index, float value);
  void add_kp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kp();

  // repeated float kv = 2;
  int kv_size() const;
  void clear_kv();
  static const int kKvFieldNumber = 2;
  float kv(int index) const;
  void set_kv(int index, float value);
  void add_kv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kv();

  // repeated float kl2 = 3;
  int kl2_size() const;
  void clear_kl2();
  static const int kKl2FieldNumber = 3;
  float kl2(int index) const;
  void set_kl2(int index, float value);
  void add_kl2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kl2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kl2();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.JointGainSet)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kp_;
  mutable std::atomic<int> _kp_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kv_;
  mutable std::atomic<int> _kv_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kl2_;
  mutable std::atomic<int> _kl2_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TaskGainSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TaskGainSet) */ {
 public:
  TaskGainSet();
  virtual ~TaskGainSet();

  TaskGainSet(const TaskGainSet& from);
  TaskGainSet(TaskGainSet&& from) noexcept
    : TaskGainSet() {
    *this = ::std::move(from);
  }

  inline TaskGainSet& operator=(const TaskGainSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskGainSet& operator=(TaskGainSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskGainSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskGainSet* internal_default_instance() {
    return reinterpret_cast<const TaskGainSet*>(
               &_TaskGainSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(TaskGainSet* other);
  friend void swap(TaskGainSet& a, TaskGainSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskGainSet* New() const final {
    return CreateMaybeMessage<TaskGainSet>(nullptr);
  }

  TaskGainSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskGainSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskGainSet& from);
  void MergeFrom(const TaskGainSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskGainSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TaskGainSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float kp = 1;
  int kp_size() const;
  void clear_kp();
  static const int kKpFieldNumber = 1;
  float kp(int index) const;
  void set_kp(int index, float value);
  void add_kp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kp();

  // repeated float kv = 2;
  int kv_size() const;
  void clear_kv();
  static const int kKvFieldNumber = 2;
  float kv(int index) const;
  void set_kv(int index, float value);
  void add_kv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kv();

  // repeated float kl2 = 3;
  int kl2_size() const;
  void clear_kl2();
  static const int kKl2FieldNumber = 3;
  float kl2(int index) const;
  void set_kl2(int index, float value);
  void add_kl2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kl2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kl2();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TaskGainSet)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kp_;
  mutable std::atomic<int> _kp_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kv_;
  mutable std::atomic<int> _kv_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kl2_;
  mutable std::atomic<int> _kl2_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ImpedanceGainSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ImpedanceGainSet) */ {
 public:
  ImpedanceGainSet();
  virtual ~ImpedanceGainSet();

  ImpedanceGainSet(const ImpedanceGainSet& from);
  ImpedanceGainSet(ImpedanceGainSet&& from) noexcept
    : ImpedanceGainSet() {
    *this = ::std::move(from);
  }

  inline ImpedanceGainSet& operator=(const ImpedanceGainSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImpedanceGainSet& operator=(ImpedanceGainSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImpedanceGainSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImpedanceGainSet* internal_default_instance() {
    return reinterpret_cast<const ImpedanceGainSet*>(
               &_ImpedanceGainSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ImpedanceGainSet* other);
  friend void swap(ImpedanceGainSet& a, ImpedanceGainSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImpedanceGainSet* New() const final {
    return CreateMaybeMessage<ImpedanceGainSet>(nullptr);
  }

  ImpedanceGainSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImpedanceGainSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImpedanceGainSet& from);
  void MergeFrom(const ImpedanceGainSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImpedanceGainSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ImpedanceGainSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float mass = 1;
  int mass_size() const;
  void clear_mass();
  static const int kMassFieldNumber = 1;
  float mass(int index) const;
  void set_mass(int index, float value);
  void add_mass(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mass() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mass();

  // repeated float damping = 2;
  int damping_size() const;
  void clear_damping();
  static const int kDampingFieldNumber = 2;
  float damping(int index) const;
  void set_damping(int index, float value);
  void add_damping(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      damping() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_damping();

  // repeated float stiffness = 3;
  int stiffness_size() const;
  void clear_stiffness();
  static const int kStiffnessFieldNumber = 3;
  float stiffness(int index) const;
  void set_stiffness(int index, float value);
  void add_stiffness(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      stiffness() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_stiffness();

  // repeated float kl2 = 4;
  int kl2_size() const;
  void clear_kl2();
  static const int kKl2FieldNumber = 4;
  float kl2(int index) const;
  void set_kl2(int index, float value);
  void add_kl2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kl2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kl2();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ImpedanceGainSet)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mass_;
  mutable std::atomic<int> _mass_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > damping_;
  mutable std::atomic<int> _damping_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > stiffness_;
  mutable std::atomic<int> _stiffness_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kl2_;
  mutable std::atomic<int> _kl2_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ForceGainSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ForceGainSet) */ {
 public:
  ForceGainSet();
  virtual ~ForceGainSet();

  ForceGainSet(const ForceGainSet& from);
  ForceGainSet(ForceGainSet&& from) noexcept
    : ForceGainSet() {
    *this = ::std::move(from);
  }

  inline ForceGainSet& operator=(const ForceGainSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForceGainSet& operator=(ForceGainSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForceGainSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForceGainSet* internal_default_instance() {
    return reinterpret_cast<const ForceGainSet*>(
               &_ForceGainSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ForceGainSet* other);
  friend void swap(ForceGainSet& a, ForceGainSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForceGainSet* New() const final {
    return CreateMaybeMessage<ForceGainSet>(nullptr);
  }

  ForceGainSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForceGainSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForceGainSet& from);
  void MergeFrom(const ForceGainSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForceGainSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ForceGainSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float kp = 1;
  int kp_size() const;
  void clear_kp();
  static const int kKpFieldNumber = 1;
  float kp(int index) const;
  void set_kp(int index, float value);
  void add_kp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kp();

  // repeated float kv = 2;
  int kv_size() const;
  void clear_kv();
  static const int kKvFieldNumber = 2;
  float kv(int index) const;
  void set_kv(int index, float value);
  void add_kv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kv();

  // repeated float kl2 = 3;
  int kl2_size() const;
  void clear_kl2();
  static const int kKl2FieldNumber = 3;
  float kl2(int index) const;
  void set_kl2(int index, float value);
  void add_kl2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kl2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kl2();

  // repeated float mass = 4;
  int mass_size() const;
  void clear_mass();
  static const int kMassFieldNumber = 4;
  float mass(int index) const;
  void set_mass(int index, float value);
  void add_mass(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mass() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mass();

  // repeated float damping = 5;
  int damping_size() const;
  void clear_damping();
  static const int kDampingFieldNumber = 5;
  float damping(int index) const;
  void set_damping(int index, float value);
  void add_damping(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      damping() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_damping();

  // repeated float stiffness = 6;
  int stiffness_size() const;
  void clear_stiffness();
  static const int kStiffnessFieldNumber = 6;
  float stiffness(int index) const;
  void set_stiffness(int index, float value);
  void add_stiffness(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      stiffness() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_stiffness();

  // repeated float kpf = 7;
  int kpf_size() const;
  void clear_kpf();
  static const int kKpfFieldNumber = 7;
  float kpf(int index) const;
  void set_kpf(int index, float value);
  void add_kpf(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kpf() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kpf();

  // repeated float kif = 8;
  int kif_size() const;
  void clear_kif();
  static const int kKifFieldNumber = 8;
  float kif(int index) const;
  void set_kif(int index, float value);
  void add_kif(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kif() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kif();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ForceGainSet)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kp_;
  mutable std::atomic<int> _kp_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kv_;
  mutable std::atomic<int> _kv_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kl2_;
  mutable std::atomic<int> _kl2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mass_;
  mutable std::atomic<int> _mass_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > damping_;
  mutable std::atomic<int> _damping_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > stiffness_;
  mutable std::atomic<int> _stiffness_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kpf_;
  mutable std::atomic<int> _kpf_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kif_;
  mutable std::atomic<int> _kif_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TestGainSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TestGainSet) */ {
 public:
  TestGainSet();
  virtual ~TestGainSet();

  TestGainSet(const TestGainSet& from);
  TestGainSet(TestGainSet&& from) noexcept
    : TestGainSet() {
    *this = ::std::move(from);
  }

  inline TestGainSet& operator=(const TestGainSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestGainSet& operator=(TestGainSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestGainSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestGainSet* internal_default_instance() {
    return reinterpret_cast<const TestGainSet*>(
               &_TestGainSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(TestGainSet* other);
  friend void swap(TestGainSet& a, TestGainSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestGainSet* New() const final {
    return CreateMaybeMessage<TestGainSet>(nullptr);
  }

  TestGainSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestGainSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestGainSet& from);
  void MergeFrom(const TestGainSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestGainSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TestGainSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float kpctc = 1;
  int kpctc_size() const;
  void clear_kpctc();
  static const int kKpctcFieldNumber = 1;
  float kpctc(int index) const;
  void set_kpctc(int index, float value);
  void add_kpctc(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kpctc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kpctc();

  // repeated float kvctc = 2;
  int kvctc_size() const;
  void clear_kvctc();
  static const int kKvctcFieldNumber = 2;
  float kvctc(int index) const;
  void set_kvctc(int index, float value);
  void add_kvctc(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kvctc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kvctc();

  // repeated float kictc = 3;
  int kictc_size() const;
  void clear_kictc();
  static const int kKictcFieldNumber = 3;
  float kictc(int index) const;
  void set_kictc(int index, float value);
  void add_kictc(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kictc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kictc();

  // repeated float knric = 4;
  int knric_size() const;
  void clear_knric();
  static const int kKnricFieldNumber = 4;
  float knric(int index) const;
  void set_knric(int index, float value);
  void add_knric(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      knric() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_knric();

  // repeated float kpnric = 5;
  int kpnric_size() const;
  void clear_kpnric();
  static const int kKpnricFieldNumber = 5;
  float kpnric(int index) const;
  void set_kpnric(int index, float value);
  void add_kpnric(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kpnric() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kpnric();

  // repeated float kinric = 6;
  int kinric_size() const;
  void clear_kinric();
  static const int kKinricFieldNumber = 6;
  float kinric(int index) const;
  void set_kinric(int index, float value);
  void add_kinric(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kinric() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kinric();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TestGainSet)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kpctc_;
  mutable std::atomic<int> _kpctc_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kvctc_;
  mutable std::atomic<int> _kvctc_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kictc_;
  mutable std::atomic<int> _kictc_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > knric_;
  mutable std::atomic<int> _knric_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kpnric_;
  mutable std::atomic<int> _kpnric_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kinric_;
  mutable std::atomic<int> _kinric_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CustomGainSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CustomGainSet) */ {
 public:
  CustomGainSet();
  virtual ~CustomGainSet();

  CustomGainSet(const CustomGainSet& from);
  CustomGainSet(CustomGainSet&& from) noexcept
    : CustomGainSet() {
    *this = ::std::move(from);
  }

  inline CustomGainSet& operator=(const CustomGainSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomGainSet& operator=(CustomGainSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomGainSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomGainSet* internal_default_instance() {
    return reinterpret_cast<const CustomGainSet*>(
               &_CustomGainSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CustomGainSet* other);
  friend void swap(CustomGainSet& a, CustomGainSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomGainSet* New() const final {
    return CreateMaybeMessage<CustomGainSet>(nullptr);
  }

  CustomGainSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomGainSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomGainSet& from);
  void MergeFrom(const CustomGainSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomGainSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.CustomGainSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float gain0 = 1;
  int gain0_size() const;
  void clear_gain0();
  static const int kGain0FieldNumber = 1;
  float gain0(int index) const;
  void set_gain0(int index, float value);
  void add_gain0(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      gain0() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_gain0();

  // repeated float gain1 = 2;
  int gain1_size() const;
  void clear_gain1();
  static const int kGain1FieldNumber = 2;
  float gain1(int index) const;
  void set_gain1(int index, float value);
  void add_gain1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      gain1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_gain1();

  // repeated float gain2 = 3;
  int gain2_size() const;
  void clear_gain2();
  static const int kGain2FieldNumber = 3;
  float gain2(int index) const;
  void set_gain2(int index, float value);
  void add_gain2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      gain2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_gain2();

  // repeated float gain3 = 4;
  int gain3_size() const;
  void clear_gain3();
  static const int kGain3FieldNumber = 4;
  float gain3(int index) const;
  void set_gain3(int index, float value);
  void add_gain3(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      gain3() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_gain3();

  // repeated float gain4 = 5;
  int gain4_size() const;
  void clear_gain4();
  static const int kGain4FieldNumber = 5;
  float gain4(int index) const;
  void set_gain4(int index, float value);
  void add_gain4(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      gain4() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_gain4();

  // repeated float gain5 = 6;
  int gain5_size() const;
  void clear_gain5();
  static const int kGain5FieldNumber = 6;
  float gain5(int index) const;
  void set_gain5(int index, float value);
  void add_gain5(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      gain5() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_gain5();

  // repeated float gain6 = 7;
  int gain6_size() const;
  void clear_gain6();
  static const int kGain6FieldNumber = 7;
  float gain6(int index) const;
  void set_gain6(int index, float value);
  void add_gain6(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      gain6() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_gain6();

  // repeated float gain7 = 8;
  int gain7_size() const;
  void clear_gain7();
  static const int kGain7FieldNumber = 8;
  float gain7(int index) const;
  void set_gain7(int index, float value);
  void add_gain7(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      gain7() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_gain7();

  // repeated float gain8 = 9;
  int gain8_size() const;
  void clear_gain8();
  static const int kGain8FieldNumber = 9;
  float gain8(int index) const;
  void set_gain8(int index, float value);
  void add_gain8(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      gain8() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_gain8();

  // repeated float gain9 = 10;
  int gain9_size() const;
  void clear_gain9();
  static const int kGain9FieldNumber = 10;
  float gain9(int index) const;
  void set_gain9(int index, float value);
  void add_gain9(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      gain9() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_gain9();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CustomGainSet)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > gain0_;
  mutable std::atomic<int> _gain0_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > gain1_;
  mutable std::atomic<int> _gain1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > gain2_;
  mutable std::atomic<int> _gain2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > gain3_;
  mutable std::atomic<int> _gain3_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > gain4_;
  mutable std::atomic<int> _gain4_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > gain5_;
  mutable std::atomic<int> _gain5_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > gain6_;
  mutable std::atomic<int> _gain6_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > gain7_;
  mutable std::atomic<int> _gain7_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > gain8_;
  mutable std::atomic<int> _gain8_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > gain9_;
  mutable std::atomic<int> _gain9_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class NewControllerTestState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.NewControllerTestState) */ {
 public:
  NewControllerTestState();
  virtual ~NewControllerTestState();

  NewControllerTestState(const NewControllerTestState& from);
  NewControllerTestState(NewControllerTestState&& from) noexcept
    : NewControllerTestState() {
    *this = ::std::move(from);
  }

  inline NewControllerTestState& operator=(const NewControllerTestState& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewControllerTestState& operator=(NewControllerTestState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewControllerTestState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewControllerTestState* internal_default_instance() {
    return reinterpret_cast<const NewControllerTestState*>(
               &_NewControllerTestState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(NewControllerTestState* other);
  friend void swap(NewControllerTestState& a, NewControllerTestState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewControllerTestState* New() const final {
    return CreateMaybeMessage<NewControllerTestState>(nullptr);
  }

  NewControllerTestState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewControllerTestState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewControllerTestState& from);
  void MergeFrom(const NewControllerTestState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewControllerTestState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.NewControllerTestState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool Jenable = 1;
  void clear_jenable();
  static const int kJenableFieldNumber = 1;
  bool jenable() const;
  void set_jenable(bool value);

  // bool Tenable = 2;
  void clear_tenable();
  static const int kTenableFieldNumber = 2;
  bool tenable() const;
  void set_tenable(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.NewControllerTestState)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool jenable_;
  bool tenable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class FrictionCompSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FrictionCompSet) */ {
 public:
  FrictionCompSet();
  virtual ~FrictionCompSet();

  FrictionCompSet(const FrictionCompSet& from);
  FrictionCompSet(FrictionCompSet&& from) noexcept
    : FrictionCompSet() {
    *this = ::std::move(from);
  }

  inline FrictionCompSet& operator=(const FrictionCompSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrictionCompSet& operator=(FrictionCompSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrictionCompSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrictionCompSet* internal_default_instance() {
    return reinterpret_cast<const FrictionCompSet*>(
               &_FrictionCompSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(FrictionCompSet* other);
  friend void swap(FrictionCompSet& a, FrictionCompSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrictionCompSet* New() const final {
    return CreateMaybeMessage<FrictionCompSet>(nullptr);
  }

  FrictionCompSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrictionCompSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrictionCompSet& from);
  void MergeFrom(const FrictionCompSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrictionCompSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.FrictionCompSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 control_comp_levels = 2;
  int control_comp_levels_size() const;
  void clear_control_comp_levels();
  static const int kControlCompLevelsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 control_comp_levels(int index) const;
  void set_control_comp_levels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_control_comp_levels(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      control_comp_levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_control_comp_levels();

  // repeated int32 teaching_comp_levels = 4;
  int teaching_comp_levels_size() const;
  void clear_teaching_comp_levels();
  static const int kTeachingCompLevelsFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 teaching_comp_levels(int index) const;
  void set_teaching_comp_levels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_teaching_comp_levels(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      teaching_comp_levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_teaching_comp_levels();

  // bool control_comp_enable = 1;
  void clear_control_comp_enable();
  static const int kControlCompEnableFieldNumber = 1;
  bool control_comp_enable() const;
  void set_control_comp_enable(bool value);

  // bool teaching_comp_enable = 3;
  void clear_teaching_comp_enable();
  static const int kTeachingCompEnableFieldNumber = 3;
  bool teaching_comp_enable() const;
  void set_teaching_comp_enable(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FrictionCompSet)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > control_comp_levels_;
  mutable std::atomic<int> _control_comp_levels_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > teaching_comp_levels_;
  mutable std::atomic<int> _teaching_comp_levels_cached_byte_size_;
  bool control_comp_enable_;
  bool teaching_comp_enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MountingAngles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MountingAngles) */ {
 public:
  MountingAngles();
  virtual ~MountingAngles();

  MountingAngles(const MountingAngles& from);
  MountingAngles(MountingAngles&& from) noexcept
    : MountingAngles() {
    *this = ::std::move(from);
  }

  inline MountingAngles& operator=(const MountingAngles& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountingAngles& operator=(MountingAngles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountingAngles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MountingAngles* internal_default_instance() {
    return reinterpret_cast<const MountingAngles*>(
               &_MountingAngles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(MountingAngles* other);
  friend void swap(MountingAngles& a, MountingAngles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MountingAngles* New() const final {
    return CreateMaybeMessage<MountingAngles>(nullptr);
  }

  MountingAngles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountingAngles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountingAngles& from);
  void MergeFrom(const MountingAngles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountingAngles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MountingAngles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float ry = 1;
  void clear_ry();
  static const int kRyFieldNumber = 1;
  float ry() const;
  void set_ry(float value);

  // float rz = 2;
  void clear_rz();
  static const int kRzFieldNumber = 2;
  float rz() const;
  void set_rz(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MountingAngles)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float ry_;
  float rz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ToolProperties :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ToolProperties) */ {
 public:
  ToolProperties();
  virtual ~ToolProperties();

  ToolProperties(const ToolProperties& from);
  ToolProperties(ToolProperties&& from) noexcept
    : ToolProperties() {
    *this = ::std::move(from);
  }

  inline ToolProperties& operator=(const ToolProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolProperties& operator=(ToolProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ToolProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToolProperties* internal_default_instance() {
    return reinterpret_cast<const ToolProperties*>(
               &_ToolProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ToolProperties* other);
  friend void swap(ToolProperties& a, ToolProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ToolProperties* New() const final {
    return CreateMaybeMessage<ToolProperties>(nullptr);
  }

  ToolProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToolProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToolProperties& from);
  void MergeFrom(const ToolProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToolProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ToolProperties";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float center_of_mass = 2;
  int center_of_mass_size() const;
  void clear_center_of_mass();
  static const int kCenterOfMassFieldNumber = 2;
  float center_of_mass(int index) const;
  void set_center_of_mass(int index, float value);
  void add_center_of_mass(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      center_of_mass() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_center_of_mass();

  // repeated float inertia = 3;
  int inertia_size() const;
  void clear_inertia();
  static const int kInertiaFieldNumber = 3;
  float inertia(int index) const;
  void set_inertia(int index, float value);
  void add_inertia(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      inertia() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_inertia();

  // float mass = 1;
  void clear_mass();
  static const int kMassFieldNumber = 1;
  float mass() const;
  void set_mass(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ToolProperties)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > center_of_mass_;
  mutable std::atomic<int> _center_of_mass_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > inertia_;
  mutable std::atomic<int> _inertia_cached_byte_size_;
  float mass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CollisionSensLevel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CollisionSensLevel) */ {
 public:
  CollisionSensLevel();
  virtual ~CollisionSensLevel();

  CollisionSensLevel(const CollisionSensLevel& from);
  CollisionSensLevel(CollisionSensLevel&& from) noexcept
    : CollisionSensLevel() {
    *this = ::std::move(from);
  }

  inline CollisionSensLevel& operator=(const CollisionSensLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollisionSensLevel& operator=(CollisionSensLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollisionSensLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollisionSensLevel* internal_default_instance() {
    return reinterpret_cast<const CollisionSensLevel*>(
               &_CollisionSensLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CollisionSensLevel* other);
  friend void swap(CollisionSensLevel& a, CollisionSensLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CollisionSensLevel* New() const final {
    return CreateMaybeMessage<CollisionSensLevel>(nullptr);
  }

  CollisionSensLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollisionSensLevel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollisionSensLevel& from);
  void MergeFrom(const CollisionSensLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollisionSensLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.CollisionSensLevel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CollisionSensLevel)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CollisionThresholds :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CollisionThresholds) */ {
 public:
  CollisionThresholds();
  virtual ~CollisionThresholds();

  CollisionThresholds(const CollisionThresholds& from);
  CollisionThresholds(CollisionThresholds&& from) noexcept
    : CollisionThresholds() {
    *this = ::std::move(from);
  }

  inline CollisionThresholds& operator=(const CollisionThresholds& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollisionThresholds& operator=(CollisionThresholds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollisionThresholds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollisionThresholds* internal_default_instance() {
    return reinterpret_cast<const CollisionThresholds*>(
               &_CollisionThresholds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CollisionThresholds* other);
  friend void swap(CollisionThresholds& a, CollisionThresholds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CollisionThresholds* New() const final {
    return CreateMaybeMessage<CollisionThresholds>(nullptr);
  }

  CollisionThresholds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollisionThresholds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollisionThresholds& from);
  void MergeFrom(const CollisionThresholds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollisionThresholds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.CollisionThresholds";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float j_torque_bases = 1;
  int j_torque_bases_size() const;
  void clear_j_torque_bases();
  static const int kJTorqueBasesFieldNumber = 1;
  float j_torque_bases(int index) const;
  void set_j_torque_bases(int index, float value);
  void add_j_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      j_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_j_torque_bases();

  // repeated float j_torque_tangents = 2;
  int j_torque_tangents_size() const;
  void clear_j_torque_tangents();
  static const int kJTorqueTangentsFieldNumber = 2;
  float j_torque_tangents(int index) const;
  void set_j_torque_tangents(int index, float value);
  void add_j_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      j_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_j_torque_tangents();

  // repeated float t_torque_bases = 3;
  int t_torque_bases_size() const;
  void clear_t_torque_bases();
  static const int kTTorqueBasesFieldNumber = 3;
  float t_torque_bases(int index) const;
  void set_t_torque_bases(int index, float value);
  void add_t_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_torque_bases();

  // repeated float t_torque_tangents = 4;
  int t_torque_tangents_size() const;
  void clear_t_torque_tangents();
  static const int kTTorqueTangentsFieldNumber = 4;
  float t_torque_tangents(int index) const;
  void set_t_torque_tangents(int index, float value);
  void add_t_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_torque_tangents();

  // repeated float error_bases = 5;
  int error_bases_size() const;
  void clear_error_bases();
  static const int kErrorBasesFieldNumber = 5;
  float error_bases(int index) const;
  void set_error_bases(int index, float value);
  void add_error_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      error_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_error_bases();

  // repeated float error_tangents = 6;
  int error_tangents_size() const;
  void clear_error_tangents();
  static const int kErrorTangentsFieldNumber = 6;
  float error_tangents(int index) const;
  void set_error_tangents(int index, float value);
  void add_error_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      error_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_error_tangents();

  // repeated float t_constvel_torque_bases = 7;
  int t_constvel_torque_bases_size() const;
  void clear_t_constvel_torque_bases();
  static const int kTConstvelTorqueBasesFieldNumber = 7;
  float t_constvel_torque_bases(int index) const;
  void set_t_constvel_torque_bases(int index, float value);
  void add_t_constvel_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_constvel_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_constvel_torque_bases();

  // repeated float t_constvel_torque_tangents = 8;
  int t_constvel_torque_tangents_size() const;
  void clear_t_constvel_torque_tangents();
  static const int kTConstvelTorqueTangentsFieldNumber = 8;
  float t_constvel_torque_tangents(int index) const;
  void set_t_constvel_torque_tangents(int index, float value);
  void add_t_constvel_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_constvel_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_constvel_torque_tangents();

  // repeated float t_conveyor_torque_bases = 9;
  int t_conveyor_torque_bases_size() const;
  void clear_t_conveyor_torque_bases();
  static const int kTConveyorTorqueBasesFieldNumber = 9;
  float t_conveyor_torque_bases(int index) const;
  void set_t_conveyor_torque_bases(int index, float value);
  void add_t_conveyor_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_conveyor_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_conveyor_torque_bases();

  // repeated float t_conveyor_torque_tangents = 10;
  int t_conveyor_torque_tangents_size() const;
  void clear_t_conveyor_torque_tangents();
  static const int kTConveyorTorqueTangentsFieldNumber = 10;
  float t_conveyor_torque_tangents(int index) const;
  void set_t_conveyor_torque_tangents(int index, float value);
  void add_t_conveyor_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_conveyor_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_conveyor_torque_tangents();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CollisionThresholds)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > j_torque_bases_;
  mutable std::atomic<int> _j_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > j_torque_tangents_;
  mutable std::atomic<int> _j_torque_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_torque_bases_;
  mutable std::atomic<int> _t_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_torque_tangents_;
  mutable std::atomic<int> _t_torque_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > error_bases_;
  mutable std::atomic<int> _error_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > error_tangents_;
  mutable std::atomic<int> _error_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_constvel_torque_bases_;
  mutable std::atomic<int> _t_constvel_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_constvel_torque_tangents_;
  mutable std::atomic<int> _t_constvel_torque_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_conveyor_torque_bases_;
  mutable std::atomic<int> _t_conveyor_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_conveyor_torque_tangents_;
  mutable std::atomic<int> _t_conveyor_torque_tangents_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CollisionPolicy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CollisionPolicy) */ {
 public:
  CollisionPolicy();
  virtual ~CollisionPolicy();

  CollisionPolicy(const CollisionPolicy& from);
  CollisionPolicy(CollisionPolicy&& from) noexcept
    : CollisionPolicy() {
    *this = ::std::move(from);
  }

  inline CollisionPolicy& operator=(const CollisionPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollisionPolicy& operator=(CollisionPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollisionPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollisionPolicy* internal_default_instance() {
    return reinterpret_cast<const CollisionPolicy*>(
               &_CollisionPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CollisionPolicy* other);
  friend void swap(CollisionPolicy& a, CollisionPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CollisionPolicy* New() const final {
    return CreateMaybeMessage<CollisionPolicy>(nullptr);
  }

  CollisionPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollisionPolicy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollisionPolicy& from);
  void MergeFrom(const CollisionPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollisionPolicy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.CollisionPolicy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.CollisionPolicyType policy = 1;
  void clear_policy();
  static const int kPolicyFieldNumber = 1;
  ::Nrmk::IndyFramework::CollisionPolicyType policy() const;
  void set_policy(::Nrmk::IndyFramework::CollisionPolicyType value);

  // float sleep_time = 2;
  void clear_sleep_time();
  static const int kSleepTimeFieldNumber = 2;
  float sleep_time() const;
  void set_sleep_time(float value);

  // float gravity_time = 3;
  void clear_gravity_time();
  static const int kGravityTimeFieldNumber = 3;
  float gravity_time() const;
  void set_gravity_time(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CollisionPolicy)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int policy_;
  float sleep_time_;
  float gravity_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SafetyLimits :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SafetyLimits) */ {
 public:
  SafetyLimits();
  virtual ~SafetyLimits();

  SafetyLimits(const SafetyLimits& from);
  SafetyLimits(SafetyLimits&& from) noexcept
    : SafetyLimits() {
    *this = ::std::move(from);
  }

  inline SafetyLimits& operator=(const SafetyLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline SafetyLimits& operator=(SafetyLimits&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SafetyLimits& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SafetyLimits* internal_default_instance() {
    return reinterpret_cast<const SafetyLimits*>(
               &_SafetyLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(SafetyLimits* other);
  friend void swap(SafetyLimits& a, SafetyLimits& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SafetyLimits* New() const final {
    return CreateMaybeMessage<SafetyLimits>(nullptr);
  }

  SafetyLimits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SafetyLimits>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SafetyLimits& from);
  void MergeFrom(const SafetyLimits& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SafetyLimits* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.SafetyLimits";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float joint_upper_limits = 7;
  int joint_upper_limits_size() const;
  void clear_joint_upper_limits();
  static const int kJointUpperLimitsFieldNumber = 7;
  float joint_upper_limits(int index) const;
  void set_joint_upper_limits(int index, float value);
  void add_joint_upper_limits(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      joint_upper_limits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_joint_upper_limits();

  // repeated float joint_lower_limits = 8;
  int joint_lower_limits_size() const;
  void clear_joint_lower_limits();
  static const int kJointLowerLimitsFieldNumber = 8;
  float joint_lower_limits(int index) const;
  void set_joint_lower_limits(int index, float value);
  void add_joint_lower_limits(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      joint_lower_limits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_joint_lower_limits();

  // float power_limit = 1;
  void clear_power_limit();
  static const int kPowerLimitFieldNumber = 1;
  float power_limit() const;
  void set_power_limit(float value);

  // float power_limit_ratio = 2;
  void clear_power_limit_ratio();
  static const int kPowerLimitRatioFieldNumber = 2;
  float power_limit_ratio() const;
  void set_power_limit_ratio(float value);

  // float tcp_force_limit = 3;
  void clear_tcp_force_limit();
  static const int kTcpForceLimitFieldNumber = 3;
  float tcp_force_limit() const;
  void set_tcp_force_limit(float value);

  // float tcp_force_limit_ratio = 4;
  void clear_tcp_force_limit_ratio();
  static const int kTcpForceLimitRatioFieldNumber = 4;
  float tcp_force_limit_ratio() const;
  void set_tcp_force_limit_ratio(float value);

  // float tcp_speed_limit = 5;
  void clear_tcp_speed_limit();
  static const int kTcpSpeedLimitFieldNumber = 5;
  float tcp_speed_limit() const;
  void set_tcp_speed_limit(float value);

  // float tcp_speed_limit_ratio = 6;
  void clear_tcp_speed_limit_ratio();
  static const int kTcpSpeedLimitRatioFieldNumber = 6;
  float tcp_speed_limit_ratio() const;
  void set_tcp_speed_limit_ratio(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SafetyLimits)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > joint_upper_limits_;
  mutable std::atomic<int> _joint_upper_limits_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > joint_lower_limits_;
  mutable std::atomic<int> _joint_lower_limits_cached_byte_size_;
  float power_limit_;
  float power_limit_ratio_;
  float tcp_force_limit_;
  float tcp_force_limit_ratio_;
  float tcp_speed_limit_;
  float tcp_speed_limit_ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SafetyStopConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SafetyStopConfig) */ {
 public:
  SafetyStopConfig();
  virtual ~SafetyStopConfig();

  SafetyStopConfig(const SafetyStopConfig& from);
  SafetyStopConfig(SafetyStopConfig&& from) noexcept
    : SafetyStopConfig() {
    *this = ::std::move(from);
  }

  inline SafetyStopConfig& operator=(const SafetyStopConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SafetyStopConfig& operator=(SafetyStopConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SafetyStopConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SafetyStopConfig* internal_default_instance() {
    return reinterpret_cast<const SafetyStopConfig*>(
               &_SafetyStopConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(SafetyStopConfig* other);
  friend void swap(SafetyStopConfig& a, SafetyStopConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SafetyStopConfig* New() const final {
    return CreateMaybeMessage<SafetyStopConfig>(nullptr);
  }

  SafetyStopConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SafetyStopConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SafetyStopConfig& from);
  void MergeFrom(const SafetyStopConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SafetyStopConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.SafetyStopConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.StopCategory joint_position_limit_stop_cat = 1;
  void clear_joint_position_limit_stop_cat();
  static const int kJointPositionLimitStopCatFieldNumber = 1;
  ::Nrmk::IndyFramework::StopCategory joint_position_limit_stop_cat() const;
  void set_joint_position_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  // .Nrmk.IndyFramework.StopCategory joint_speed_limit_stop_cat = 2;
  void clear_joint_speed_limit_stop_cat();
  static const int kJointSpeedLimitStopCatFieldNumber = 2;
  ::Nrmk::IndyFramework::StopCategory joint_speed_limit_stop_cat() const;
  void set_joint_speed_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  // .Nrmk.IndyFramework.StopCategory joint_torque_limit_stop_cat = 3;
  void clear_joint_torque_limit_stop_cat();
  static const int kJointTorqueLimitStopCatFieldNumber = 3;
  ::Nrmk::IndyFramework::StopCategory joint_torque_limit_stop_cat() const;
  void set_joint_torque_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  // .Nrmk.IndyFramework.StopCategory tcp_speed_limit_stop_cat = 4;
  void clear_tcp_speed_limit_stop_cat();
  static const int kTcpSpeedLimitStopCatFieldNumber = 4;
  ::Nrmk::IndyFramework::StopCategory tcp_speed_limit_stop_cat() const;
  void set_tcp_speed_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  // .Nrmk.IndyFramework.StopCategory tcp_force_limit_stop_cat = 5;
  void clear_tcp_force_limit_stop_cat();
  static const int kTcpForceLimitStopCatFieldNumber = 5;
  ::Nrmk::IndyFramework::StopCategory tcp_force_limit_stop_cat() const;
  void set_tcp_force_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  // .Nrmk.IndyFramework.StopCategory power_limit_stop_cat = 6;
  void clear_power_limit_stop_cat();
  static const int kPowerLimitStopCatFieldNumber = 6;
  ::Nrmk::IndyFramework::StopCategory power_limit_stop_cat() const;
  void set_power_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SafetyStopConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int joint_position_limit_stop_cat_;
  int joint_speed_limit_stop_cat_;
  int joint_torque_limit_stop_cat_;
  int tcp_speed_limit_stop_cat_;
  int tcp_force_limit_stop_cat_;
  int power_limit_stop_cat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DIConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DIConfig) */ {
 public:
  DIConfig();
  virtual ~DIConfig();

  DIConfig(const DIConfig& from);
  DIConfig(DIConfig&& from) noexcept
    : DIConfig() {
    *this = ::std::move(from);
  }

  inline DIConfig& operator=(const DIConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DIConfig& operator=(DIConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DIConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DIConfig* internal_default_instance() {
    return reinterpret_cast<const DIConfig*>(
               &_DIConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(DIConfig* other);
  friend void swap(DIConfig& a, DIConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DIConfig* New() const final {
    return CreateMaybeMessage<DIConfig>(nullptr);
  }

  DIConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DIConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DIConfig& from);
  void MergeFrom(const DIConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DIConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.DIConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.DigitalSignal triggerSignals = 3;
  int triggersignals_size() const;
  void clear_triggersignals();
  static const int kTriggerSignalsFieldNumber = 3;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_triggersignals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_triggersignals();
  const ::Nrmk::IndyFramework::DigitalSignal& triggersignals(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_triggersignals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      triggersignals() const;

  // repeated .Nrmk.IndyFramework.DigitalSignal successSignals = 4;
  int successsignals_size() const;
  void clear_successsignals();
  static const int kSuccessSignalsFieldNumber = 4;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_successsignals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_successsignals();
  const ::Nrmk::IndyFramework::DigitalSignal& successsignals(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_successsignals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      successsignals() const;

  // repeated .Nrmk.IndyFramework.DigitalSignal failureSignals = 5;
  int failuresignals_size() const;
  void clear_failuresignals();
  static const int kFailureSignalsFieldNumber = 5;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_failuresignals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_failuresignals();
  const ::Nrmk::IndyFramework::DigitalSignal& failuresignals(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_failuresignals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      failuresignals() const;

  // string function_name = 2;
  void clear_function_name();
  static const int kFunctionNameFieldNumber = 2;
  const std::string& function_name() const;
  void set_function_name(const std::string& value);
  void set_function_name(std::string&& value);
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  std::string* mutable_function_name();
  std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);

  // int32 function_code = 1;
  void clear_function_code();
  static const int kFunctionCodeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 function_code() const;
  void set_function_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DIConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > triggersignals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > successsignals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > failuresignals_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 function_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DIConfigList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DIConfigList) */ {
 public:
  DIConfigList();
  virtual ~DIConfigList();

  DIConfigList(const DIConfigList& from);
  DIConfigList(DIConfigList&& from) noexcept
    : DIConfigList() {
    *this = ::std::move(from);
  }

  inline DIConfigList& operator=(const DIConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DIConfigList& operator=(DIConfigList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DIConfigList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DIConfigList* internal_default_instance() {
    return reinterpret_cast<const DIConfigList*>(
               &_DIConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(DIConfigList* other);
  friend void swap(DIConfigList& a, DIConfigList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DIConfigList* New() const final {
    return CreateMaybeMessage<DIConfigList>(nullptr);
  }

  DIConfigList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DIConfigList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DIConfigList& from);
  void MergeFrom(const DIConfigList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DIConfigList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.DIConfigList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.DIConfig di_configs = 1;
  int di_configs_size() const;
  void clear_di_configs();
  static const int kDiConfigsFieldNumber = 1;
  ::Nrmk::IndyFramework::DIConfig* mutable_di_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DIConfig >*
      mutable_di_configs();
  const ::Nrmk::IndyFramework::DIConfig& di_configs(int index) const;
  ::Nrmk::IndyFramework::DIConfig* add_di_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DIConfig >&
      di_configs() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DIConfigList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DIConfig > di_configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DOConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DOConfig) */ {
 public:
  DOConfig();
  virtual ~DOConfig();

  DOConfig(const DOConfig& from);
  DOConfig(DOConfig&& from) noexcept
    : DOConfig() {
    *this = ::std::move(from);
  }

  inline DOConfig& operator=(const DOConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DOConfig& operator=(DOConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DOConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DOConfig* internal_default_instance() {
    return reinterpret_cast<const DOConfig*>(
               &_DOConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(DOConfig* other);
  friend void swap(DOConfig& a, DOConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DOConfig* New() const final {
    return CreateMaybeMessage<DOConfig>(nullptr);
  }

  DOConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DOConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DOConfig& from);
  void MergeFrom(const DOConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DOConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.DOConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.DigitalSignal onSignals = 3;
  int onsignals_size() const;
  void clear_onsignals();
  static const int kOnSignalsFieldNumber = 3;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_onsignals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_onsignals();
  const ::Nrmk::IndyFramework::DigitalSignal& onsignals(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_onsignals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      onsignals() const;

  // repeated .Nrmk.IndyFramework.DigitalSignal offSignals = 4;
  int offsignals_size() const;
  void clear_offsignals();
  static const int kOffSignalsFieldNumber = 4;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_offsignals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_offsignals();
  const ::Nrmk::IndyFramework::DigitalSignal& offsignals(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_offsignals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      offsignals() const;

  // string state_name = 2;
  void clear_state_name();
  static const int kStateNameFieldNumber = 2;
  const std::string& state_name() const;
  void set_state_name(const std::string& value);
  void set_state_name(std::string&& value);
  void set_state_name(const char* value);
  void set_state_name(const char* value, size_t size);
  std::string* mutable_state_name();
  std::string* release_state_name();
  void set_allocated_state_name(std::string* state_name);

  // int32 state_code = 1;
  void clear_state_code();
  static const int kStateCodeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 state_code() const;
  void set_state_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DOConfig)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > onsignals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > offsignals_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DOConfigList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DOConfigList) */ {
 public:
  DOConfigList();
  virtual ~DOConfigList();

  DOConfigList(const DOConfigList& from);
  DOConfigList(DOConfigList&& from) noexcept
    : DOConfigList() {
    *this = ::std::move(from);
  }

  inline DOConfigList& operator=(const DOConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DOConfigList& operator=(DOConfigList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DOConfigList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DOConfigList* internal_default_instance() {
    return reinterpret_cast<const DOConfigList*>(
               &_DOConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(DOConfigList* other);
  friend void swap(DOConfigList& a, DOConfigList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DOConfigList* New() const final {
    return CreateMaybeMessage<DOConfigList>(nullptr);
  }

  DOConfigList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DOConfigList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DOConfigList& from);
  void MergeFrom(const DOConfigList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DOConfigList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.DOConfigList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.DOConfig do_configs = 1;
  int do_configs_size() const;
  void clear_do_configs();
  static const int kDoConfigsFieldNumber = 1;
  ::Nrmk::IndyFramework::DOConfig* mutable_do_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DOConfig >*
      mutable_do_configs();
  const ::Nrmk::IndyFramework::DOConfig& do_configs(int index) const;
  ::Nrmk::IndyFramework::DOConfig* add_do_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DOConfig >&
      do_configs() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DOConfigList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DOConfig > do_configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetReducedRatioRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.GetReducedRatioRes) */ {
 public:
  GetReducedRatioRes();
  virtual ~GetReducedRatioRes();

  GetReducedRatioRes(const GetReducedRatioRes& from);
  GetReducedRatioRes(GetReducedRatioRes&& from) noexcept
    : GetReducedRatioRes() {
    *this = ::std::move(from);
  }

  inline GetReducedRatioRes& operator=(const GetReducedRatioRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReducedRatioRes& operator=(GetReducedRatioRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetReducedRatioRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetReducedRatioRes* internal_default_instance() {
    return reinterpret_cast<const GetReducedRatioRes*>(
               &_GetReducedRatioRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(GetReducedRatioRes* other);
  friend void swap(GetReducedRatioRes& a, GetReducedRatioRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetReducedRatioRes* New() const final {
    return CreateMaybeMessage<GetReducedRatioRes>(nullptr);
  }

  GetReducedRatioRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReducedRatioRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetReducedRatioRes& from);
  void MergeFrom(const GetReducedRatioRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReducedRatioRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.GetReducedRatioRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // float ratio = 1;
  void clear_ratio();
  static const int kRatioFieldNumber = 1;
  float ratio() const;
  void set_ratio(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.GetReducedRatioRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  float ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetReducedSpeedRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.GetReducedSpeedRes) */ {
 public:
  GetReducedSpeedRes();
  virtual ~GetReducedSpeedRes();

  GetReducedSpeedRes(const GetReducedSpeedRes& from);
  GetReducedSpeedRes(GetReducedSpeedRes&& from) noexcept
    : GetReducedSpeedRes() {
    *this = ::std::move(from);
  }

  inline GetReducedSpeedRes& operator=(const GetReducedSpeedRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReducedSpeedRes& operator=(GetReducedSpeedRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetReducedSpeedRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetReducedSpeedRes* internal_default_instance() {
    return reinterpret_cast<const GetReducedSpeedRes*>(
               &_GetReducedSpeedRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(GetReducedSpeedRes* other);
  friend void swap(GetReducedSpeedRes& a, GetReducedSpeedRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetReducedSpeedRes* New() const final {
    return CreateMaybeMessage<GetReducedSpeedRes>(nullptr);
  }

  GetReducedSpeedRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReducedSpeedRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetReducedSpeedRes& from);
  void MergeFrom(const GetReducedSpeedRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReducedSpeedRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.GetReducedSpeedRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // float speed = 1;
  void clear_speed();
  static const int kSpeedFieldNumber = 1;
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.GetReducedSpeedRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetReducedSpeedReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SetReducedSpeedReq) */ {
 public:
  SetReducedSpeedReq();
  virtual ~SetReducedSpeedReq();

  SetReducedSpeedReq(const SetReducedSpeedReq& from);
  SetReducedSpeedReq(SetReducedSpeedReq&& from) noexcept
    : SetReducedSpeedReq() {
    *this = ::std::move(from);
  }

  inline SetReducedSpeedReq& operator=(const SetReducedSpeedReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetReducedSpeedReq& operator=(SetReducedSpeedReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetReducedSpeedReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetReducedSpeedReq* internal_default_instance() {
    return reinterpret_cast<const SetReducedSpeedReq*>(
               &_SetReducedSpeedReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(SetReducedSpeedReq* other);
  friend void swap(SetReducedSpeedReq& a, SetReducedSpeedReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetReducedSpeedReq* New() const final {
    return CreateMaybeMessage<SetReducedSpeedReq>(nullptr);
  }

  SetReducedSpeedReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetReducedSpeedReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetReducedSpeedReq& from);
  void MergeFrom(const SetReducedSpeedReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetReducedSpeedReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.SetReducedSpeedReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float speed = 1;
  void clear_speed();
  static const int kSpeedFieldNumber = 1;
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SetReducedSpeedReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class FTSensorDevice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FTSensorDevice) */ {
 public:
  FTSensorDevice();
  virtual ~FTSensorDevice();

  FTSensorDevice(const FTSensorDevice& from);
  FTSensorDevice(FTSensorDevice&& from) noexcept
    : FTSensorDevice() {
    *this = ::std::move(from);
  }

  inline FTSensorDevice& operator=(const FTSensorDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline FTSensorDevice& operator=(FTSensorDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FTSensorDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FTSensorDevice* internal_default_instance() {
    return reinterpret_cast<const FTSensorDevice*>(
               &_FTSensorDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(FTSensorDevice* other);
  friend void swap(FTSensorDevice& a, FTSensorDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FTSensorDevice* New() const final {
    return CreateMaybeMessage<FTSensorDevice>(nullptr);
  }

  FTSensorDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FTSensorDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FTSensorDevice& from);
  void MergeFrom(const FTSensorDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FTSensorDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.FTSensorDevice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FTSensorDevice_FTSensorDeviceType FTSensorDeviceType;
  static constexpr FTSensorDeviceType NONE =
    FTSensorDevice_FTSensorDeviceType_NONE;
  static constexpr FTSensorDeviceType AFT200_D80 =
    FTSensorDevice_FTSensorDeviceType_AFT200_D80;
  static constexpr FTSensorDeviceType AFT200_D80_EC =
    FTSensorDevice_FTSensorDeviceType_AFT200_D80_EC;
  static constexpr FTSensorDeviceType RFT80_6A01 =
    FTSensorDevice_FTSensorDeviceType_RFT80_6A01;
  static constexpr FTSensorDeviceType RFT60_HA01 =
    FTSensorDevice_FTSensorDeviceType_RFT60_HA01;
  static constexpr FTSensorDeviceType HEX_E_H_QC =
    FTSensorDevice_FTSensorDeviceType_HEX_E_H_QC;
  static inline bool FTSensorDeviceType_IsValid(int value) {
    return FTSensorDevice_FTSensorDeviceType_IsValid(value);
  }
  static constexpr FTSensorDeviceType FTSensorDeviceType_MIN =
    FTSensorDevice_FTSensorDeviceType_FTSensorDeviceType_MIN;
  static constexpr FTSensorDeviceType FTSensorDeviceType_MAX =
    FTSensorDevice_FTSensorDeviceType_FTSensorDeviceType_MAX;
  static constexpr int FTSensorDeviceType_ARRAYSIZE =
    FTSensorDevice_FTSensorDeviceType_FTSensorDeviceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FTSensorDeviceType_descriptor() {
    return FTSensorDevice_FTSensorDeviceType_descriptor();
  }
  template<typename T>
  static inline const std::string& FTSensorDeviceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FTSensorDeviceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FTSensorDeviceType_Name.");
    return FTSensorDevice_FTSensorDeviceType_Name(enum_t_value);
  }
  static inline bool FTSensorDeviceType_Parse(const std::string& name,
      FTSensorDeviceType* value) {
    return FTSensorDevice_FTSensorDeviceType_Parse(name, value);
  }

  typedef FTSensorDevice_FTSensorDeviceComType FTSensorDeviceComType;
  static constexpr FTSensorDeviceComType ENDTOOLCAN =
    FTSensorDevice_FTSensorDeviceComType_ENDTOOLCAN;
  static constexpr FTSensorDeviceComType CBCAN =
    FTSensorDevice_FTSensorDeviceComType_CBCAN;
  static constexpr FTSensorDeviceComType MODBUSCLIENT =
    FTSensorDevice_FTSensorDeviceComType_MODBUSCLIENT;
  static constexpr FTSensorDeviceComType ETHERCAT =
    FTSensorDevice_FTSensorDeviceComType_ETHERCAT;
  static inline bool FTSensorDeviceComType_IsValid(int value) {
    return FTSensorDevice_FTSensorDeviceComType_IsValid(value);
  }
  static constexpr FTSensorDeviceComType FTSensorDeviceComType_MIN =
    FTSensorDevice_FTSensorDeviceComType_FTSensorDeviceComType_MIN;
  static constexpr FTSensorDeviceComType FTSensorDeviceComType_MAX =
    FTSensorDevice_FTSensorDeviceComType_FTSensorDeviceComType_MAX;
  static constexpr int FTSensorDeviceComType_ARRAYSIZE =
    FTSensorDevice_FTSensorDeviceComType_FTSensorDeviceComType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FTSensorDeviceComType_descriptor() {
    return FTSensorDevice_FTSensorDeviceComType_descriptor();
  }
  template<typename T>
  static inline const std::string& FTSensorDeviceComType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FTSensorDeviceComType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FTSensorDeviceComType_Name.");
    return FTSensorDevice_FTSensorDeviceComType_Name(enum_t_value);
  }
  static inline bool FTSensorDeviceComType_Parse(const std::string& name,
      FTSensorDeviceComType* value) {
    return FTSensorDevice_FTSensorDeviceComType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string ip_address = 3;
  void clear_ip_address();
  static const int kIpAddressFieldNumber = 3;
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);

  // .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceType dev_type = 1;
  void clear_dev_type();
  static const int kDevTypeFieldNumber = 1;
  ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType dev_type() const;
  void set_dev_type(::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType value);

  // .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceComType com_type = 2;
  void clear_com_type();
  static const int kComTypeFieldNumber = 2;
  ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType com_type() const;
  void set_com_type(::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType value);

  // float ft_frame_translation_offset_x = 11;
  void clear_ft_frame_translation_offset_x();
  static const int kFtFrameTranslationOffsetXFieldNumber = 11;
  float ft_frame_translation_offset_x() const;
  void set_ft_frame_translation_offset_x(float value);

  // float ft_frame_translation_offset_y = 12;
  void clear_ft_frame_translation_offset_y();
  static const int kFtFrameTranslationOffsetYFieldNumber = 12;
  float ft_frame_translation_offset_y() const;
  void set_ft_frame_translation_offset_y(float value);

  // float ft_frame_translation_offset_z = 13;
  void clear_ft_frame_translation_offset_z();
  static const int kFtFrameTranslationOffsetZFieldNumber = 13;
  float ft_frame_translation_offset_z() const;
  void set_ft_frame_translation_offset_z(float value);

  // float ft_frame_rotation_offset_r = 14;
  void clear_ft_frame_rotation_offset_r();
  static const int kFtFrameRotationOffsetRFieldNumber = 14;
  float ft_frame_rotation_offset_r() const;
  void set_ft_frame_rotation_offset_r(float value);

  // float ft_frame_rotation_offset_p = 15;
  void clear_ft_frame_rotation_offset_p();
  static const int kFtFrameRotationOffsetPFieldNumber = 15;
  float ft_frame_rotation_offset_p() const;
  void set_ft_frame_rotation_offset_p(float value);

  // float ft_frame_rotation_offset_y = 16;
  void clear_ft_frame_rotation_offset_y();
  static const int kFtFrameRotationOffsetYFieldNumber = 16;
  float ft_frame_rotation_offset_y() const;
  void set_ft_frame_rotation_offset_y(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FTSensorDevice)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  int dev_type_;
  int com_type_;
  float ft_frame_translation_offset_x_;
  float ft_frame_translation_offset_y_;
  float ft_frame_translation_offset_z_;
  float ft_frame_rotation_offset_r_;
  float ft_frame_rotation_offset_p_;
  float ft_frame_rotation_offset_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class FTSensorDeviceRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FTSensorDeviceRes) */ {
 public:
  FTSensorDeviceRes();
  virtual ~FTSensorDeviceRes();

  FTSensorDeviceRes(const FTSensorDeviceRes& from);
  FTSensorDeviceRes(FTSensorDeviceRes&& from) noexcept
    : FTSensorDeviceRes() {
    *this = ::std::move(from);
  }

  inline FTSensorDeviceRes& operator=(const FTSensorDeviceRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline FTSensorDeviceRes& operator=(FTSensorDeviceRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FTSensorDeviceRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FTSensorDeviceRes* internal_default_instance() {
    return reinterpret_cast<const FTSensorDeviceRes*>(
               &_FTSensorDeviceRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(FTSensorDeviceRes* other);
  friend void swap(FTSensorDeviceRes& a, FTSensorDeviceRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FTSensorDeviceRes* New() const final {
    return CreateMaybeMessage<FTSensorDeviceRes>(nullptr);
  }

  FTSensorDeviceRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FTSensorDeviceRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FTSensorDeviceRes& from);
  void MergeFrom(const FTSensorDeviceRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FTSensorDeviceRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.FTSensorDeviceRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FTSensorDeviceRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TeleOpParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TeleOpParams) */ {
 public:
  TeleOpParams();
  virtual ~TeleOpParams();

  TeleOpParams(const TeleOpParams& from);
  TeleOpParams(TeleOpParams&& from) noexcept
    : TeleOpParams() {
    *this = ::std::move(from);
  }

  inline TeleOpParams& operator=(const TeleOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleOpParams& operator=(TeleOpParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeleOpParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleOpParams* internal_default_instance() {
    return reinterpret_cast<const TeleOpParams*>(
               &_TeleOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(TeleOpParams* other);
  friend void swap(TeleOpParams& a, TeleOpParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeleOpParams* New() const final {
    return CreateMaybeMessage<TeleOpParams>(nullptr);
  }

  TeleOpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeleOpParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeleOpParams& from);
  void MergeFrom(const TeleOpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleOpParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TeleOpParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float smooth_factor = 1;
  void clear_smooth_factor();
  static const int kSmoothFactorFieldNumber = 1;
  float smooth_factor() const;
  void set_smooth_factor(float value);

  // float cutoff_freq = 2;
  void clear_cutoff_freq();
  static const int kCutoffFreqFieldNumber = 2;
  float cutoff_freq() const;
  void set_cutoff_freq(float value);

  // float error_gain = 3;
  void clear_error_gain();
  static const int kErrorGainFieldNumber = 3;
  float error_gain() const;
  void set_error_gain(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TeleOpParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float smooth_factor_;
  float cutoff_freq_;
  float error_gain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class KinematicsParams_MDH :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.KinematicsParams.MDH) */ {
 public:
  KinematicsParams_MDH();
  virtual ~KinematicsParams_MDH();

  KinematicsParams_MDH(const KinematicsParams_MDH& from);
  KinematicsParams_MDH(KinematicsParams_MDH&& from) noexcept
    : KinematicsParams_MDH() {
    *this = ::std::move(from);
  }

  inline KinematicsParams_MDH& operator=(const KinematicsParams_MDH& from) {
    CopyFrom(from);
    return *this;
  }
  inline KinematicsParams_MDH& operator=(KinematicsParams_MDH&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KinematicsParams_MDH& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KinematicsParams_MDH* internal_default_instance() {
    return reinterpret_cast<const KinematicsParams_MDH*>(
               &_KinematicsParams_MDH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(KinematicsParams_MDH* other);
  friend void swap(KinematicsParams_MDH& a, KinematicsParams_MDH& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KinematicsParams_MDH* New() const final {
    return CreateMaybeMessage<KinematicsParams_MDH>(nullptr);
  }

  KinematicsParams_MDH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KinematicsParams_MDH>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KinematicsParams_MDH& from);
  void MergeFrom(const KinematicsParams_MDH& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KinematicsParams_MDH* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.KinematicsParams.MDH";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float a = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  float a() const;
  void set_a(float value);

  // float alpha = 2;
  void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  float alpha() const;
  void set_alpha(float value);

  // float d0 = 3;
  void clear_d0();
  static const int kD0FieldNumber = 3;
  float d0() const;
  void set_d0(float value);

  // float theta0 = 4;
  void clear_theta0();
  static const int kTheta0FieldNumber = 4;
  float theta0() const;
  void set_theta0(float value);

  // .Nrmk.IndyFramework.KinematicsParams.JointType type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::Nrmk::IndyFramework::KinematicsParams_JointType type() const;
  void set_type(::Nrmk::IndyFramework::KinematicsParams_JointType value);

  // int32 index = 10;
  void clear_index();
  static const int kIndexFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 parent = 11;
  void clear_parent();
  static const int kParentFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int32 parent() const;
  void set_parent(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.KinematicsParams.MDH)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float a_;
  float alpha_;
  float d0_;
  float theta0_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 parent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class KinematicsParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.KinematicsParams) */ {
 public:
  KinematicsParams();
  virtual ~KinematicsParams();

  KinematicsParams(const KinematicsParams& from);
  KinematicsParams(KinematicsParams&& from) noexcept
    : KinematicsParams() {
    *this = ::std::move(from);
  }

  inline KinematicsParams& operator=(const KinematicsParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline KinematicsParams& operator=(KinematicsParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KinematicsParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KinematicsParams* internal_default_instance() {
    return reinterpret_cast<const KinematicsParams*>(
               &_KinematicsParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(KinematicsParams* other);
  friend void swap(KinematicsParams& a, KinematicsParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KinematicsParams* New() const final {
    return CreateMaybeMessage<KinematicsParams>(nullptr);
  }

  KinematicsParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KinematicsParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KinematicsParams& from);
  void MergeFrom(const KinematicsParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KinematicsParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.KinematicsParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmsgs_2eproto);
    return ::descriptor_table_config_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef KinematicsParams_MDH MDH;

  typedef KinematicsParams_JointType JointType;
  static constexpr JointType REVOLUTE =
    KinematicsParams_JointType_REVOLUTE;
  static constexpr JointType PRISMATIC =
    KinematicsParams_JointType_PRISMATIC;
  static inline bool JointType_IsValid(int value) {
    return KinematicsParams_JointType_IsValid(value);
  }
  static constexpr JointType JointType_MIN =
    KinematicsParams_JointType_JointType_MIN;
  static constexpr JointType JointType_MAX =
    KinematicsParams_JointType_JointType_MAX;
  static constexpr int JointType_ARRAYSIZE =
    KinematicsParams_JointType_JointType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JointType_descriptor() {
    return KinematicsParams_JointType_descriptor();
  }
  template<typename T>
  static inline const std::string& JointType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JointType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JointType_Name.");
    return KinematicsParams_JointType_Name(enum_t_value);
  }
  static inline bool JointType_Parse(const std::string& name,
      JointType* value) {
    return KinematicsParams_JointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.KinematicsParams.MDH mdh = 1;
  int mdh_size() const;
  void clear_mdh();
  static const int kMdhFieldNumber = 1;
  ::Nrmk::IndyFramework::KinematicsParams_MDH* mutable_mdh(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::KinematicsParams_MDH >*
      mutable_mdh();
  const ::Nrmk::IndyFramework::KinematicsParams_MDH& mdh(int index) const;
  ::Nrmk::IndyFramework::KinematicsParams_MDH* add_mdh();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::KinematicsParams_MDH >&
      mdh() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.KinematicsParams)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::KinematicsParams_MDH > mdh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Frame

// repeated float fpos = 1;
inline int Frame::fpos_size() const {
  return fpos_.size();
}
inline void Frame::clear_fpos() {
  fpos_.Clear();
}
inline float Frame::fpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Frame.fpos)
  return fpos_.Get(index);
}
inline void Frame::set_fpos(int index, float value) {
  fpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Frame.fpos)
}
inline void Frame::add_fpos(float value) {
  fpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.Frame.fpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Frame::fpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.Frame.fpos)
  return fpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Frame::mutable_fpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.Frame.fpos)
  return &fpos_;
}

// -------------------------------------------------------------------

// JointPos

// repeated float jpos = 1;
inline int JointPos::jpos_size() const {
  return jpos_.size();
}
inline void JointPos::clear_jpos() {
  jpos_.Clear();
}
inline float JointPos::jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.JointPos.jpos)
  return jpos_.Get(index);
}
inline void JointPos::set_jpos(int index, float value) {
  jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.JointPos.jpos)
}
inline void JointPos::add_jpos(float value) {
  jpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.JointPos.jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
JointPos::jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.JointPos.jpos)
  return jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
JointPos::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.JointPos.jpos)
  return &jpos_;
}

// -------------------------------------------------------------------

// PlanarFrame

// repeated float fpos0 = 1;
inline int PlanarFrame::fpos0_size() const {
  return fpos0_.size();
}
inline void PlanarFrame::clear_fpos0() {
  fpos0_.Clear();
}
inline float PlanarFrame::fpos0(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PlanarFrame.fpos0)
  return fpos0_.Get(index);
}
inline void PlanarFrame::set_fpos0(int index, float value) {
  fpos0_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PlanarFrame.fpos0)
}
inline void PlanarFrame::add_fpos0(float value) {
  fpos0_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PlanarFrame.fpos0)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PlanarFrame::fpos0() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PlanarFrame.fpos0)
  return fpos0_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PlanarFrame::mutable_fpos0() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PlanarFrame.fpos0)
  return &fpos0_;
}

// repeated float fpos1 = 2;
inline int PlanarFrame::fpos1_size() const {
  return fpos1_.size();
}
inline void PlanarFrame::clear_fpos1() {
  fpos1_.Clear();
}
inline float PlanarFrame::fpos1(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PlanarFrame.fpos1)
  return fpos1_.Get(index);
}
inline void PlanarFrame::set_fpos1(int index, float value) {
  fpos1_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PlanarFrame.fpos1)
}
inline void PlanarFrame::add_fpos1(float value) {
  fpos1_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PlanarFrame.fpos1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PlanarFrame::fpos1() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PlanarFrame.fpos1)
  return fpos1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PlanarFrame::mutable_fpos1() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PlanarFrame.fpos1)
  return &fpos1_;
}

// repeated float fpos2 = 3;
inline int PlanarFrame::fpos2_size() const {
  return fpos2_.size();
}
inline void PlanarFrame::clear_fpos2() {
  fpos2_.Clear();
}
inline float PlanarFrame::fpos2(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PlanarFrame.fpos2)
  return fpos2_.Get(index);
}
inline void PlanarFrame::set_fpos2(int index, float value) {
  fpos2_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PlanarFrame.fpos2)
}
inline void PlanarFrame::add_fpos2(float value) {
  fpos2_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PlanarFrame.fpos2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PlanarFrame::fpos2() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PlanarFrame.fpos2)
  return fpos2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PlanarFrame::mutable_fpos2() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PlanarFrame.fpos2)
  return &fpos2_;
}

// -------------------------------------------------------------------

// FrameResult

// repeated float fpos = 1;
inline int FrameResult::fpos_size() const {
  return fpos_.size();
}
inline void FrameResult::clear_fpos() {
  fpos_.Clear();
}
inline float FrameResult::fpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FrameResult.fpos)
  return fpos_.Get(index);
}
inline void FrameResult::set_fpos(int index, float value) {
  fpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FrameResult.fpos)
}
inline void FrameResult::add_fpos(float value) {
  fpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.FrameResult.fpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FrameResult::fpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.FrameResult.fpos)
  return fpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FrameResult::mutable_fpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.FrameResult.fpos)
  return &fpos_;
}

// .Nrmk.IndyFramework.Response response = 2;
inline bool FrameResult::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& FrameResult::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FrameResult.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* FrameResult::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.FrameResult.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* FrameResult::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.FrameResult.response)
  return response_;
}
inline void FrameResult::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.FrameResult.response)
}

// -------------------------------------------------------------------

// Ratio

// uint32 ratio = 1;
inline void Ratio::clear_ratio() {
  ratio_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ratio::ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Ratio.ratio)
  return ratio_;
}
inline void Ratio::set_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Ratio.ratio)
}

// -------------------------------------------------------------------

// AutoServoOffConfig

// bool enable = 1;
inline void AutoServoOffConfig::clear_enable() {
  enable_ = false;
}
inline bool AutoServoOffConfig::enable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.AutoServoOffConfig.enable)
  return enable_;
}
inline void AutoServoOffConfig::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.AutoServoOffConfig.enable)
}

// float time = 2;
inline void AutoServoOffConfig::clear_time() {
  time_ = 0;
}
inline float AutoServoOffConfig::time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.AutoServoOffConfig.time)
  return time_;
}
inline void AutoServoOffConfig::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.AutoServoOffConfig.time)
}

// -------------------------------------------------------------------

// CollTuningConfig

// .Nrmk.IndyFramework.CollTuningConfig.TuningPrecision precision = 1;
inline void CollTuningConfig::clear_precision() {
  precision_ = 0;
}
inline ::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision CollTuningConfig::precision() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollTuningConfig.precision)
  return static_cast< ::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision >(precision_);
}
inline void CollTuningConfig::set_precision(::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision value) {
  
  precision_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollTuningConfig.precision)
}

// .Nrmk.IndyFramework.CollTuningConfig.TuningSpace tuning_space = 2;
inline void CollTuningConfig::clear_tuning_space() {
  tuning_space_ = 0;
}
inline ::Nrmk::IndyFramework::CollTuningConfig_TuningSpace CollTuningConfig::tuning_space() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollTuningConfig.tuning_space)
  return static_cast< ::Nrmk::IndyFramework::CollTuningConfig_TuningSpace >(tuning_space_);
}
inline void CollTuningConfig::set_tuning_space(::Nrmk::IndyFramework::CollTuningConfig_TuningSpace value) {
  
  tuning_space_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollTuningConfig.tuning_space)
}

// int32 vel_level_max = 3;
inline void CollTuningConfig::clear_vel_level_max() {
  vel_level_max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CollTuningConfig::vel_level_max() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollTuningConfig.vel_level_max)
  return vel_level_max_;
}
inline void CollTuningConfig::set_vel_level_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vel_level_max_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollTuningConfig.vel_level_max)
}

// -------------------------------------------------------------------

// JointGainSet

// repeated float kp = 1;
inline int JointGainSet::kp_size() const {
  return kp_.size();
}
inline void JointGainSet::clear_kp() {
  kp_.Clear();
}
inline float JointGainSet::kp(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.JointGainSet.kp)
  return kp_.Get(index);
}
inline void JointGainSet::set_kp(int index, float value) {
  kp_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.JointGainSet.kp)
}
inline void JointGainSet::add_kp(float value) {
  kp_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.JointGainSet.kp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
JointGainSet::kp() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.JointGainSet.kp)
  return kp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
JointGainSet::mutable_kp() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.JointGainSet.kp)
  return &kp_;
}

// repeated float kv = 2;
inline int JointGainSet::kv_size() const {
  return kv_.size();
}
inline void JointGainSet::clear_kv() {
  kv_.Clear();
}
inline float JointGainSet::kv(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.JointGainSet.kv)
  return kv_.Get(index);
}
inline void JointGainSet::set_kv(int index, float value) {
  kv_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.JointGainSet.kv)
}
inline void JointGainSet::add_kv(float value) {
  kv_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.JointGainSet.kv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
JointGainSet::kv() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.JointGainSet.kv)
  return kv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
JointGainSet::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.JointGainSet.kv)
  return &kv_;
}

// repeated float kl2 = 3;
inline int JointGainSet::kl2_size() const {
  return kl2_.size();
}
inline void JointGainSet::clear_kl2() {
  kl2_.Clear();
}
inline float JointGainSet::kl2(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.JointGainSet.kl2)
  return kl2_.Get(index);
}
inline void JointGainSet::set_kl2(int index, float value) {
  kl2_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.JointGainSet.kl2)
}
inline void JointGainSet::add_kl2(float value) {
  kl2_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.JointGainSet.kl2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
JointGainSet::kl2() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.JointGainSet.kl2)
  return kl2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
JointGainSet::mutable_kl2() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.JointGainSet.kl2)
  return &kl2_;
}

// -------------------------------------------------------------------

// TaskGainSet

// repeated float kp = 1;
inline int TaskGainSet::kp_size() const {
  return kp_.size();
}
inline void TaskGainSet::clear_kp() {
  kp_.Clear();
}
inline float TaskGainSet::kp(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TaskGainSet.kp)
  return kp_.Get(index);
}
inline void TaskGainSet::set_kp(int index, float value) {
  kp_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TaskGainSet.kp)
}
inline void TaskGainSet::add_kp(float value) {
  kp_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TaskGainSet.kp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TaskGainSet::kp() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TaskGainSet.kp)
  return kp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TaskGainSet::mutable_kp() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TaskGainSet.kp)
  return &kp_;
}

// repeated float kv = 2;
inline int TaskGainSet::kv_size() const {
  return kv_.size();
}
inline void TaskGainSet::clear_kv() {
  kv_.Clear();
}
inline float TaskGainSet::kv(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TaskGainSet.kv)
  return kv_.Get(index);
}
inline void TaskGainSet::set_kv(int index, float value) {
  kv_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TaskGainSet.kv)
}
inline void TaskGainSet::add_kv(float value) {
  kv_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TaskGainSet.kv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TaskGainSet::kv() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TaskGainSet.kv)
  return kv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TaskGainSet::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TaskGainSet.kv)
  return &kv_;
}

// repeated float kl2 = 3;
inline int TaskGainSet::kl2_size() const {
  return kl2_.size();
}
inline void TaskGainSet::clear_kl2() {
  kl2_.Clear();
}
inline float TaskGainSet::kl2(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TaskGainSet.kl2)
  return kl2_.Get(index);
}
inline void TaskGainSet::set_kl2(int index, float value) {
  kl2_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TaskGainSet.kl2)
}
inline void TaskGainSet::add_kl2(float value) {
  kl2_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TaskGainSet.kl2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TaskGainSet::kl2() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TaskGainSet.kl2)
  return kl2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TaskGainSet::mutable_kl2() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TaskGainSet.kl2)
  return &kl2_;
}

// -------------------------------------------------------------------

// ImpedanceGainSet

// repeated float mass = 1;
inline int ImpedanceGainSet::mass_size() const {
  return mass_.size();
}
inline void ImpedanceGainSet::clear_mass() {
  mass_.Clear();
}
inline float ImpedanceGainSet::mass(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ImpedanceGainSet.mass)
  return mass_.Get(index);
}
inline void ImpedanceGainSet::set_mass(int index, float value) {
  mass_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ImpedanceGainSet.mass)
}
inline void ImpedanceGainSet::add_mass(float value) {
  mass_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ImpedanceGainSet.mass)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImpedanceGainSet::mass() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ImpedanceGainSet.mass)
  return mass_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImpedanceGainSet::mutable_mass() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ImpedanceGainSet.mass)
  return &mass_;
}

// repeated float damping = 2;
inline int ImpedanceGainSet::damping_size() const {
  return damping_.size();
}
inline void ImpedanceGainSet::clear_damping() {
  damping_.Clear();
}
inline float ImpedanceGainSet::damping(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ImpedanceGainSet.damping)
  return damping_.Get(index);
}
inline void ImpedanceGainSet::set_damping(int index, float value) {
  damping_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ImpedanceGainSet.damping)
}
inline void ImpedanceGainSet::add_damping(float value) {
  damping_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ImpedanceGainSet.damping)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImpedanceGainSet::damping() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ImpedanceGainSet.damping)
  return damping_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImpedanceGainSet::mutable_damping() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ImpedanceGainSet.damping)
  return &damping_;
}

// repeated float stiffness = 3;
inline int ImpedanceGainSet::stiffness_size() const {
  return stiffness_.size();
}
inline void ImpedanceGainSet::clear_stiffness() {
  stiffness_.Clear();
}
inline float ImpedanceGainSet::stiffness(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ImpedanceGainSet.stiffness)
  return stiffness_.Get(index);
}
inline void ImpedanceGainSet::set_stiffness(int index, float value) {
  stiffness_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ImpedanceGainSet.stiffness)
}
inline void ImpedanceGainSet::add_stiffness(float value) {
  stiffness_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ImpedanceGainSet.stiffness)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImpedanceGainSet::stiffness() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ImpedanceGainSet.stiffness)
  return stiffness_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImpedanceGainSet::mutable_stiffness() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ImpedanceGainSet.stiffness)
  return &stiffness_;
}

// repeated float kl2 = 4;
inline int ImpedanceGainSet::kl2_size() const {
  return kl2_.size();
}
inline void ImpedanceGainSet::clear_kl2() {
  kl2_.Clear();
}
inline float ImpedanceGainSet::kl2(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ImpedanceGainSet.kl2)
  return kl2_.Get(index);
}
inline void ImpedanceGainSet::set_kl2(int index, float value) {
  kl2_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ImpedanceGainSet.kl2)
}
inline void ImpedanceGainSet::add_kl2(float value) {
  kl2_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ImpedanceGainSet.kl2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImpedanceGainSet::kl2() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ImpedanceGainSet.kl2)
  return kl2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImpedanceGainSet::mutable_kl2() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ImpedanceGainSet.kl2)
  return &kl2_;
}

// -------------------------------------------------------------------

// ForceGainSet

// repeated float kp = 1;
inline int ForceGainSet::kp_size() const {
  return kp_.size();
}
inline void ForceGainSet::clear_kp() {
  kp_.Clear();
}
inline float ForceGainSet::kp(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.kp)
  return kp_.Get(index);
}
inline void ForceGainSet::set_kp(int index, float value) {
  kp_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.kp)
}
inline void ForceGainSet::add_kp(float value) {
  kp_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.kp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ForceGainSet::kp() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.kp)
  return kp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ForceGainSet::mutable_kp() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.kp)
  return &kp_;
}

// repeated float kv = 2;
inline int ForceGainSet::kv_size() const {
  return kv_.size();
}
inline void ForceGainSet::clear_kv() {
  kv_.Clear();
}
inline float ForceGainSet::kv(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.kv)
  return kv_.Get(index);
}
inline void ForceGainSet::set_kv(int index, float value) {
  kv_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.kv)
}
inline void ForceGainSet::add_kv(float value) {
  kv_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.kv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ForceGainSet::kv() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.kv)
  return kv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ForceGainSet::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.kv)
  return &kv_;
}

// repeated float kl2 = 3;
inline int ForceGainSet::kl2_size() const {
  return kl2_.size();
}
inline void ForceGainSet::clear_kl2() {
  kl2_.Clear();
}
inline float ForceGainSet::kl2(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.kl2)
  return kl2_.Get(index);
}
inline void ForceGainSet::set_kl2(int index, float value) {
  kl2_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.kl2)
}
inline void ForceGainSet::add_kl2(float value) {
  kl2_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.kl2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ForceGainSet::kl2() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.kl2)
  return kl2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ForceGainSet::mutable_kl2() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.kl2)
  return &kl2_;
}

// repeated float mass = 4;
inline int ForceGainSet::mass_size() const {
  return mass_.size();
}
inline void ForceGainSet::clear_mass() {
  mass_.Clear();
}
inline float ForceGainSet::mass(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.mass)
  return mass_.Get(index);
}
inline void ForceGainSet::set_mass(int index, float value) {
  mass_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.mass)
}
inline void ForceGainSet::add_mass(float value) {
  mass_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.mass)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ForceGainSet::mass() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.mass)
  return mass_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ForceGainSet::mutable_mass() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.mass)
  return &mass_;
}

// repeated float damping = 5;
inline int ForceGainSet::damping_size() const {
  return damping_.size();
}
inline void ForceGainSet::clear_damping() {
  damping_.Clear();
}
inline float ForceGainSet::damping(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.damping)
  return damping_.Get(index);
}
inline void ForceGainSet::set_damping(int index, float value) {
  damping_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.damping)
}
inline void ForceGainSet::add_damping(float value) {
  damping_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.damping)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ForceGainSet::damping() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.damping)
  return damping_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ForceGainSet::mutable_damping() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.damping)
  return &damping_;
}

// repeated float stiffness = 6;
inline int ForceGainSet::stiffness_size() const {
  return stiffness_.size();
}
inline void ForceGainSet::clear_stiffness() {
  stiffness_.Clear();
}
inline float ForceGainSet::stiffness(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.stiffness)
  return stiffness_.Get(index);
}
inline void ForceGainSet::set_stiffness(int index, float value) {
  stiffness_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.stiffness)
}
inline void ForceGainSet::add_stiffness(float value) {
  stiffness_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.stiffness)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ForceGainSet::stiffness() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.stiffness)
  return stiffness_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ForceGainSet::mutable_stiffness() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.stiffness)
  return &stiffness_;
}

// repeated float kpf = 7;
inline int ForceGainSet::kpf_size() const {
  return kpf_.size();
}
inline void ForceGainSet::clear_kpf() {
  kpf_.Clear();
}
inline float ForceGainSet::kpf(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.kpf)
  return kpf_.Get(index);
}
inline void ForceGainSet::set_kpf(int index, float value) {
  kpf_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.kpf)
}
inline void ForceGainSet::add_kpf(float value) {
  kpf_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.kpf)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ForceGainSet::kpf() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.kpf)
  return kpf_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ForceGainSet::mutable_kpf() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.kpf)
  return &kpf_;
}

// repeated float kif = 8;
inline int ForceGainSet::kif_size() const {
  return kif_.size();
}
inline void ForceGainSet::clear_kif() {
  kif_.Clear();
}
inline float ForceGainSet::kif(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.kif)
  return kif_.Get(index);
}
inline void ForceGainSet::set_kif(int index, float value) {
  kif_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.kif)
}
inline void ForceGainSet::add_kif(float value) {
  kif_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.kif)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ForceGainSet::kif() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.kif)
  return kif_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ForceGainSet::mutable_kif() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.kif)
  return &kif_;
}

// -------------------------------------------------------------------

// TestGainSet

// repeated float kpctc = 1;
inline int TestGainSet::kpctc_size() const {
  return kpctc_.size();
}
inline void TestGainSet::clear_kpctc() {
  kpctc_.Clear();
}
inline float TestGainSet::kpctc(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestGainSet.kpctc)
  return kpctc_.Get(index);
}
inline void TestGainSet::set_kpctc(int index, float value) {
  kpctc_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestGainSet.kpctc)
}
inline void TestGainSet::add_kpctc(float value) {
  kpctc_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TestGainSet.kpctc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestGainSet::kpctc() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TestGainSet.kpctc)
  return kpctc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestGainSet::mutable_kpctc() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TestGainSet.kpctc)
  return &kpctc_;
}

// repeated float kvctc = 2;
inline int TestGainSet::kvctc_size() const {
  return kvctc_.size();
}
inline void TestGainSet::clear_kvctc() {
  kvctc_.Clear();
}
inline float TestGainSet::kvctc(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestGainSet.kvctc)
  return kvctc_.Get(index);
}
inline void TestGainSet::set_kvctc(int index, float value) {
  kvctc_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestGainSet.kvctc)
}
inline void TestGainSet::add_kvctc(float value) {
  kvctc_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TestGainSet.kvctc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestGainSet::kvctc() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TestGainSet.kvctc)
  return kvctc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestGainSet::mutable_kvctc() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TestGainSet.kvctc)
  return &kvctc_;
}

// repeated float kictc = 3;
inline int TestGainSet::kictc_size() const {
  return kictc_.size();
}
inline void TestGainSet::clear_kictc() {
  kictc_.Clear();
}
inline float TestGainSet::kictc(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestGainSet.kictc)
  return kictc_.Get(index);
}
inline void TestGainSet::set_kictc(int index, float value) {
  kictc_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestGainSet.kictc)
}
inline void TestGainSet::add_kictc(float value) {
  kictc_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TestGainSet.kictc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestGainSet::kictc() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TestGainSet.kictc)
  return kictc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestGainSet::mutable_kictc() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TestGainSet.kictc)
  return &kictc_;
}

// repeated float knric = 4;
inline int TestGainSet::knric_size() const {
  return knric_.size();
}
inline void TestGainSet::clear_knric() {
  knric_.Clear();
}
inline float TestGainSet::knric(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestGainSet.knric)
  return knric_.Get(index);
}
inline void TestGainSet::set_knric(int index, float value) {
  knric_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestGainSet.knric)
}
inline void TestGainSet::add_knric(float value) {
  knric_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TestGainSet.knric)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestGainSet::knric() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TestGainSet.knric)
  return knric_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestGainSet::mutable_knric() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TestGainSet.knric)
  return &knric_;
}

// repeated float kpnric = 5;
inline int TestGainSet::kpnric_size() const {
  return kpnric_.size();
}
inline void TestGainSet::clear_kpnric() {
  kpnric_.Clear();
}
inline float TestGainSet::kpnric(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestGainSet.kpnric)
  return kpnric_.Get(index);
}
inline void TestGainSet::set_kpnric(int index, float value) {
  kpnric_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestGainSet.kpnric)
}
inline void TestGainSet::add_kpnric(float value) {
  kpnric_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TestGainSet.kpnric)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestGainSet::kpnric() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TestGainSet.kpnric)
  return kpnric_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestGainSet::mutable_kpnric() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TestGainSet.kpnric)
  return &kpnric_;
}

// repeated float kinric = 6;
inline int TestGainSet::kinric_size() const {
  return kinric_.size();
}
inline void TestGainSet::clear_kinric() {
  kinric_.Clear();
}
inline float TestGainSet::kinric(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestGainSet.kinric)
  return kinric_.Get(index);
}
inline void TestGainSet::set_kinric(int index, float value) {
  kinric_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestGainSet.kinric)
}
inline void TestGainSet::add_kinric(float value) {
  kinric_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TestGainSet.kinric)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestGainSet::kinric() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TestGainSet.kinric)
  return kinric_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestGainSet::mutable_kinric() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TestGainSet.kinric)
  return &kinric_;
}

// -------------------------------------------------------------------

// CustomGainSet

// repeated float gain0 = 1;
inline int CustomGainSet::gain0_size() const {
  return gain0_.size();
}
inline void CustomGainSet::clear_gain0() {
  gain0_.Clear();
}
inline float CustomGainSet::gain0(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain0)
  return gain0_.Get(index);
}
inline void CustomGainSet::set_gain0(int index, float value) {
  gain0_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain0)
}
inline void CustomGainSet::add_gain0(float value) {
  gain0_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain0)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CustomGainSet::gain0() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain0)
  return gain0_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CustomGainSet::mutable_gain0() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain0)
  return &gain0_;
}

// repeated float gain1 = 2;
inline int CustomGainSet::gain1_size() const {
  return gain1_.size();
}
inline void CustomGainSet::clear_gain1() {
  gain1_.Clear();
}
inline float CustomGainSet::gain1(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain1)
  return gain1_.Get(index);
}
inline void CustomGainSet::set_gain1(int index, float value) {
  gain1_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain1)
}
inline void CustomGainSet::add_gain1(float value) {
  gain1_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CustomGainSet::gain1() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain1)
  return gain1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CustomGainSet::mutable_gain1() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain1)
  return &gain1_;
}

// repeated float gain2 = 3;
inline int CustomGainSet::gain2_size() const {
  return gain2_.size();
}
inline void CustomGainSet::clear_gain2() {
  gain2_.Clear();
}
inline float CustomGainSet::gain2(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain2)
  return gain2_.Get(index);
}
inline void CustomGainSet::set_gain2(int index, float value) {
  gain2_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain2)
}
inline void CustomGainSet::add_gain2(float value) {
  gain2_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CustomGainSet::gain2() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain2)
  return gain2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CustomGainSet::mutable_gain2() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain2)
  return &gain2_;
}

// repeated float gain3 = 4;
inline int CustomGainSet::gain3_size() const {
  return gain3_.size();
}
inline void CustomGainSet::clear_gain3() {
  gain3_.Clear();
}
inline float CustomGainSet::gain3(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain3)
  return gain3_.Get(index);
}
inline void CustomGainSet::set_gain3(int index, float value) {
  gain3_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain3)
}
inline void CustomGainSet::add_gain3(float value) {
  gain3_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain3)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CustomGainSet::gain3() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain3)
  return gain3_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CustomGainSet::mutable_gain3() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain3)
  return &gain3_;
}

// repeated float gain4 = 5;
inline int CustomGainSet::gain4_size() const {
  return gain4_.size();
}
inline void CustomGainSet::clear_gain4() {
  gain4_.Clear();
}
inline float CustomGainSet::gain4(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain4)
  return gain4_.Get(index);
}
inline void CustomGainSet::set_gain4(int index, float value) {
  gain4_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain4)
}
inline void CustomGainSet::add_gain4(float value) {
  gain4_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain4)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CustomGainSet::gain4() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain4)
  return gain4_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CustomGainSet::mutable_gain4() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain4)
  return &gain4_;
}

// repeated float gain5 = 6;
inline int CustomGainSet::gain5_size() const {
  return gain5_.size();
}
inline void CustomGainSet::clear_gain5() {
  gain5_.Clear();
}
inline float CustomGainSet::gain5(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain5)
  return gain5_.Get(index);
}
inline void CustomGainSet::set_gain5(int index, float value) {
  gain5_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain5)
}
inline void CustomGainSet::add_gain5(float value) {
  gain5_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain5)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CustomGainSet::gain5() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain5)
  return gain5_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CustomGainSet::mutable_gain5() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain5)
  return &gain5_;
}

// repeated float gain6 = 7;
inline int CustomGainSet::gain6_size() const {
  return gain6_.size();
}
inline void CustomGainSet::clear_gain6() {
  gain6_.Clear();
}
inline float CustomGainSet::gain6(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain6)
  return gain6_.Get(index);
}
inline void CustomGainSet::set_gain6(int index, float value) {
  gain6_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain6)
}
inline void CustomGainSet::add_gain6(float value) {
  gain6_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain6)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CustomGainSet::gain6() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain6)
  return gain6_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CustomGainSet::mutable_gain6() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain6)
  return &gain6_;
}

// repeated float gain7 = 8;
inline int CustomGainSet::gain7_size() const {
  return gain7_.size();
}
inline void CustomGainSet::clear_gain7() {
  gain7_.Clear();
}
inline float CustomGainSet::gain7(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain7)
  return gain7_.Get(index);
}
inline void CustomGainSet::set_gain7(int index, float value) {
  gain7_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain7)
}
inline void CustomGainSet::add_gain7(float value) {
  gain7_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain7)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CustomGainSet::gain7() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain7)
  return gain7_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CustomGainSet::mutable_gain7() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain7)
  return &gain7_;
}

// repeated float gain8 = 9;
inline int CustomGainSet::gain8_size() const {
  return gain8_.size();
}
inline void CustomGainSet::clear_gain8() {
  gain8_.Clear();
}
inline float CustomGainSet::gain8(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain8)
  return gain8_.Get(index);
}
inline void CustomGainSet::set_gain8(int index, float value) {
  gain8_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain8)
}
inline void CustomGainSet::add_gain8(float value) {
  gain8_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain8)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CustomGainSet::gain8() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain8)
  return gain8_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CustomGainSet::mutable_gain8() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain8)
  return &gain8_;
}

// repeated float gain9 = 10;
inline int CustomGainSet::gain9_size() const {
  return gain9_.size();
}
inline void CustomGainSet::clear_gain9() {
  gain9_.Clear();
}
inline float CustomGainSet::gain9(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain9)
  return gain9_.Get(index);
}
inline void CustomGainSet::set_gain9(int index, float value) {
  gain9_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain9)
}
inline void CustomGainSet::add_gain9(float value) {
  gain9_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain9)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CustomGainSet::gain9() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain9)
  return gain9_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CustomGainSet::mutable_gain9() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain9)
  return &gain9_;
}

// -------------------------------------------------------------------

// NewControllerTestState

// bool Jenable = 1;
inline void NewControllerTestState::clear_jenable() {
  jenable_ = false;
}
inline bool NewControllerTestState::jenable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.NewControllerTestState.Jenable)
  return jenable_;
}
inline void NewControllerTestState::set_jenable(bool value) {
  
  jenable_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.NewControllerTestState.Jenable)
}

// bool Tenable = 2;
inline void NewControllerTestState::clear_tenable() {
  tenable_ = false;
}
inline bool NewControllerTestState::tenable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.NewControllerTestState.Tenable)
  return tenable_;
}
inline void NewControllerTestState::set_tenable(bool value) {
  
  tenable_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.NewControllerTestState.Tenable)
}

// -------------------------------------------------------------------

// FrictionCompSet

// bool control_comp_enable = 1;
inline void FrictionCompSet::clear_control_comp_enable() {
  control_comp_enable_ = false;
}
inline bool FrictionCompSet::control_comp_enable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FrictionCompSet.control_comp_enable)
  return control_comp_enable_;
}
inline void FrictionCompSet::set_control_comp_enable(bool value) {
  
  control_comp_enable_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FrictionCompSet.control_comp_enable)
}

// repeated int32 control_comp_levels = 2;
inline int FrictionCompSet::control_comp_levels_size() const {
  return control_comp_levels_.size();
}
inline void FrictionCompSet::clear_control_comp_levels() {
  control_comp_levels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrictionCompSet::control_comp_levels(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FrictionCompSet.control_comp_levels)
  return control_comp_levels_.Get(index);
}
inline void FrictionCompSet::set_control_comp_levels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  control_comp_levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FrictionCompSet.control_comp_levels)
}
inline void FrictionCompSet::add_control_comp_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  control_comp_levels_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.FrictionCompSet.control_comp_levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FrictionCompSet::control_comp_levels() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.FrictionCompSet.control_comp_levels)
  return control_comp_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FrictionCompSet::mutable_control_comp_levels() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.FrictionCompSet.control_comp_levels)
  return &control_comp_levels_;
}

// bool teaching_comp_enable = 3;
inline void FrictionCompSet::clear_teaching_comp_enable() {
  teaching_comp_enable_ = false;
}
inline bool FrictionCompSet::teaching_comp_enable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FrictionCompSet.teaching_comp_enable)
  return teaching_comp_enable_;
}
inline void FrictionCompSet::set_teaching_comp_enable(bool value) {
  
  teaching_comp_enable_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FrictionCompSet.teaching_comp_enable)
}

// repeated int32 teaching_comp_levels = 4;
inline int FrictionCompSet::teaching_comp_levels_size() const {
  return teaching_comp_levels_.size();
}
inline void FrictionCompSet::clear_teaching_comp_levels() {
  teaching_comp_levels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrictionCompSet::teaching_comp_levels(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FrictionCompSet.teaching_comp_levels)
  return teaching_comp_levels_.Get(index);
}
inline void FrictionCompSet::set_teaching_comp_levels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  teaching_comp_levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FrictionCompSet.teaching_comp_levels)
}
inline void FrictionCompSet::add_teaching_comp_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  teaching_comp_levels_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.FrictionCompSet.teaching_comp_levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FrictionCompSet::teaching_comp_levels() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.FrictionCompSet.teaching_comp_levels)
  return teaching_comp_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FrictionCompSet::mutable_teaching_comp_levels() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.FrictionCompSet.teaching_comp_levels)
  return &teaching_comp_levels_;
}

// -------------------------------------------------------------------

// MountingAngles

// float ry = 1;
inline void MountingAngles::clear_ry() {
  ry_ = 0;
}
inline float MountingAngles::ry() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MountingAngles.ry)
  return ry_;
}
inline void MountingAngles::set_ry(float value) {
  
  ry_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MountingAngles.ry)
}

// float rz = 2;
inline void MountingAngles::clear_rz() {
  rz_ = 0;
}
inline float MountingAngles::rz() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MountingAngles.rz)
  return rz_;
}
inline void MountingAngles::set_rz(float value) {
  
  rz_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MountingAngles.rz)
}

// -------------------------------------------------------------------

// ToolProperties

// float mass = 1;
inline void ToolProperties::clear_mass() {
  mass_ = 0;
}
inline float ToolProperties::mass() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ToolProperties.mass)
  return mass_;
}
inline void ToolProperties::set_mass(float value) {
  
  mass_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ToolProperties.mass)
}

// repeated float center_of_mass = 2;
inline int ToolProperties::center_of_mass_size() const {
  return center_of_mass_.size();
}
inline void ToolProperties::clear_center_of_mass() {
  center_of_mass_.Clear();
}
inline float ToolProperties::center_of_mass(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ToolProperties.center_of_mass)
  return center_of_mass_.Get(index);
}
inline void ToolProperties::set_center_of_mass(int index, float value) {
  center_of_mass_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ToolProperties.center_of_mass)
}
inline void ToolProperties::add_center_of_mass(float value) {
  center_of_mass_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ToolProperties.center_of_mass)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ToolProperties::center_of_mass() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ToolProperties.center_of_mass)
  return center_of_mass_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ToolProperties::mutable_center_of_mass() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ToolProperties.center_of_mass)
  return &center_of_mass_;
}

// repeated float inertia = 3;
inline int ToolProperties::inertia_size() const {
  return inertia_.size();
}
inline void ToolProperties::clear_inertia() {
  inertia_.Clear();
}
inline float ToolProperties::inertia(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ToolProperties.inertia)
  return inertia_.Get(index);
}
inline void ToolProperties::set_inertia(int index, float value) {
  inertia_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ToolProperties.inertia)
}
inline void ToolProperties::add_inertia(float value) {
  inertia_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ToolProperties.inertia)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ToolProperties::inertia() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ToolProperties.inertia)
  return inertia_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ToolProperties::mutable_inertia() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ToolProperties.inertia)
  return &inertia_;
}

// -------------------------------------------------------------------

// CollisionSensLevel

// uint32 level = 1;
inline void CollisionSensLevel::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CollisionSensLevel::level() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionSensLevel.level)
  return level_;
}
inline void CollisionSensLevel::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionSensLevel.level)
}

// -------------------------------------------------------------------

// CollisionThresholds

// repeated float j_torque_bases = 1;
inline int CollisionThresholds::j_torque_bases_size() const {
  return j_torque_bases_.size();
}
inline void CollisionThresholds::clear_j_torque_bases() {
  j_torque_bases_.Clear();
}
inline float CollisionThresholds::j_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.j_torque_bases)
  return j_torque_bases_.Get(index);
}
inline void CollisionThresholds::set_j_torque_bases(int index, float value) {
  j_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.j_torque_bases)
}
inline void CollisionThresholds::add_j_torque_bases(float value) {
  j_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.j_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CollisionThresholds::j_torque_bases() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.j_torque_bases)
  return j_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CollisionThresholds::mutable_j_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.j_torque_bases)
  return &j_torque_bases_;
}

// repeated float j_torque_tangents = 2;
inline int CollisionThresholds::j_torque_tangents_size() const {
  return j_torque_tangents_.size();
}
inline void CollisionThresholds::clear_j_torque_tangents() {
  j_torque_tangents_.Clear();
}
inline float CollisionThresholds::j_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.j_torque_tangents)
  return j_torque_tangents_.Get(index);
}
inline void CollisionThresholds::set_j_torque_tangents(int index, float value) {
  j_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.j_torque_tangents)
}
inline void CollisionThresholds::add_j_torque_tangents(float value) {
  j_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.j_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CollisionThresholds::j_torque_tangents() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.j_torque_tangents)
  return j_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CollisionThresholds::mutable_j_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.j_torque_tangents)
  return &j_torque_tangents_;
}

// repeated float t_torque_bases = 3;
inline int CollisionThresholds::t_torque_bases_size() const {
  return t_torque_bases_.size();
}
inline void CollisionThresholds::clear_t_torque_bases() {
  t_torque_bases_.Clear();
}
inline float CollisionThresholds::t_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.t_torque_bases)
  return t_torque_bases_.Get(index);
}
inline void CollisionThresholds::set_t_torque_bases(int index, float value) {
  t_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.t_torque_bases)
}
inline void CollisionThresholds::add_t_torque_bases(float value) {
  t_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.t_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CollisionThresholds::t_torque_bases() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.t_torque_bases)
  return t_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CollisionThresholds::mutable_t_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.t_torque_bases)
  return &t_torque_bases_;
}

// repeated float t_torque_tangents = 4;
inline int CollisionThresholds::t_torque_tangents_size() const {
  return t_torque_tangents_.size();
}
inline void CollisionThresholds::clear_t_torque_tangents() {
  t_torque_tangents_.Clear();
}
inline float CollisionThresholds::t_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.t_torque_tangents)
  return t_torque_tangents_.Get(index);
}
inline void CollisionThresholds::set_t_torque_tangents(int index, float value) {
  t_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.t_torque_tangents)
}
inline void CollisionThresholds::add_t_torque_tangents(float value) {
  t_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.t_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CollisionThresholds::t_torque_tangents() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.t_torque_tangents)
  return t_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CollisionThresholds::mutable_t_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.t_torque_tangents)
  return &t_torque_tangents_;
}

// repeated float error_bases = 5;
inline int CollisionThresholds::error_bases_size() const {
  return error_bases_.size();
}
inline void CollisionThresholds::clear_error_bases() {
  error_bases_.Clear();
}
inline float CollisionThresholds::error_bases(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.error_bases)
  return error_bases_.Get(index);
}
inline void CollisionThresholds::set_error_bases(int index, float value) {
  error_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.error_bases)
}
inline void CollisionThresholds::add_error_bases(float value) {
  error_bases_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.error_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CollisionThresholds::error_bases() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.error_bases)
  return error_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CollisionThresholds::mutable_error_bases() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.error_bases)
  return &error_bases_;
}

// repeated float error_tangents = 6;
inline int CollisionThresholds::error_tangents_size() const {
  return error_tangents_.size();
}
inline void CollisionThresholds::clear_error_tangents() {
  error_tangents_.Clear();
}
inline float CollisionThresholds::error_tangents(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.error_tangents)
  return error_tangents_.Get(index);
}
inline void CollisionThresholds::set_error_tangents(int index, float value) {
  error_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.error_tangents)
}
inline void CollisionThresholds::add_error_tangents(float value) {
  error_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.error_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CollisionThresholds::error_tangents() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.error_tangents)
  return error_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CollisionThresholds::mutable_error_tangents() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.error_tangents)
  return &error_tangents_;
}

// repeated float t_constvel_torque_bases = 7;
inline int CollisionThresholds::t_constvel_torque_bases_size() const {
  return t_constvel_torque_bases_.size();
}
inline void CollisionThresholds::clear_t_constvel_torque_bases() {
  t_constvel_torque_bases_.Clear();
}
inline float CollisionThresholds::t_constvel_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_bases)
  return t_constvel_torque_bases_.Get(index);
}
inline void CollisionThresholds::set_t_constvel_torque_bases(int index, float value) {
  t_constvel_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_bases)
}
inline void CollisionThresholds::add_t_constvel_torque_bases(float value) {
  t_constvel_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CollisionThresholds::t_constvel_torque_bases() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_bases)
  return t_constvel_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CollisionThresholds::mutable_t_constvel_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_bases)
  return &t_constvel_torque_bases_;
}

// repeated float t_constvel_torque_tangents = 8;
inline int CollisionThresholds::t_constvel_torque_tangents_size() const {
  return t_constvel_torque_tangents_.size();
}
inline void CollisionThresholds::clear_t_constvel_torque_tangents() {
  t_constvel_torque_tangents_.Clear();
}
inline float CollisionThresholds::t_constvel_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_tangents)
  return t_constvel_torque_tangents_.Get(index);
}
inline void CollisionThresholds::set_t_constvel_torque_tangents(int index, float value) {
  t_constvel_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_tangents)
}
inline void CollisionThresholds::add_t_constvel_torque_tangents(float value) {
  t_constvel_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CollisionThresholds::t_constvel_torque_tangents() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_tangents)
  return t_constvel_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CollisionThresholds::mutable_t_constvel_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_tangents)
  return &t_constvel_torque_tangents_;
}

// repeated float t_conveyor_torque_bases = 9;
inline int CollisionThresholds::t_conveyor_torque_bases_size() const {
  return t_conveyor_torque_bases_.size();
}
inline void CollisionThresholds::clear_t_conveyor_torque_bases() {
  t_conveyor_torque_bases_.Clear();
}
inline float CollisionThresholds::t_conveyor_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_bases)
  return t_conveyor_torque_bases_.Get(index);
}
inline void CollisionThresholds::set_t_conveyor_torque_bases(int index, float value) {
  t_conveyor_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_bases)
}
inline void CollisionThresholds::add_t_conveyor_torque_bases(float value) {
  t_conveyor_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CollisionThresholds::t_conveyor_torque_bases() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_bases)
  return t_conveyor_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CollisionThresholds::mutable_t_conveyor_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_bases)
  return &t_conveyor_torque_bases_;
}

// repeated float t_conveyor_torque_tangents = 10;
inline int CollisionThresholds::t_conveyor_torque_tangents_size() const {
  return t_conveyor_torque_tangents_.size();
}
inline void CollisionThresholds::clear_t_conveyor_torque_tangents() {
  t_conveyor_torque_tangents_.Clear();
}
inline float CollisionThresholds::t_conveyor_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_tangents)
  return t_conveyor_torque_tangents_.Get(index);
}
inline void CollisionThresholds::set_t_conveyor_torque_tangents(int index, float value) {
  t_conveyor_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_tangents)
}
inline void CollisionThresholds::add_t_conveyor_torque_tangents(float value) {
  t_conveyor_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CollisionThresholds::t_conveyor_torque_tangents() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_tangents)
  return t_conveyor_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CollisionThresholds::mutable_t_conveyor_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_tangents)
  return &t_conveyor_torque_tangents_;
}

// -------------------------------------------------------------------

// CollisionPolicy

// .Nrmk.IndyFramework.CollisionPolicyType policy = 1;
inline void CollisionPolicy::clear_policy() {
  policy_ = 0;
}
inline ::Nrmk::IndyFramework::CollisionPolicyType CollisionPolicy::policy() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionPolicy.policy)
  return static_cast< ::Nrmk::IndyFramework::CollisionPolicyType >(policy_);
}
inline void CollisionPolicy::set_policy(::Nrmk::IndyFramework::CollisionPolicyType value) {
  
  policy_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionPolicy.policy)
}

// float sleep_time = 2;
inline void CollisionPolicy::clear_sleep_time() {
  sleep_time_ = 0;
}
inline float CollisionPolicy::sleep_time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionPolicy.sleep_time)
  return sleep_time_;
}
inline void CollisionPolicy::set_sleep_time(float value) {
  
  sleep_time_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionPolicy.sleep_time)
}

// float gravity_time = 3;
inline void CollisionPolicy::clear_gravity_time() {
  gravity_time_ = 0;
}
inline float CollisionPolicy::gravity_time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionPolicy.gravity_time)
  return gravity_time_;
}
inline void CollisionPolicy::set_gravity_time(float value) {
  
  gravity_time_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionPolicy.gravity_time)
}

// -------------------------------------------------------------------

// SafetyLimits

// float power_limit = 1;
inline void SafetyLimits::clear_power_limit() {
  power_limit_ = 0;
}
inline float SafetyLimits::power_limit() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.power_limit)
  return power_limit_;
}
inline void SafetyLimits::set_power_limit(float value) {
  
  power_limit_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.power_limit)
}

// float power_limit_ratio = 2;
inline void SafetyLimits::clear_power_limit_ratio() {
  power_limit_ratio_ = 0;
}
inline float SafetyLimits::power_limit_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.power_limit_ratio)
  return power_limit_ratio_;
}
inline void SafetyLimits::set_power_limit_ratio(float value) {
  
  power_limit_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.power_limit_ratio)
}

// float tcp_force_limit = 3;
inline void SafetyLimits::clear_tcp_force_limit() {
  tcp_force_limit_ = 0;
}
inline float SafetyLimits::tcp_force_limit() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.tcp_force_limit)
  return tcp_force_limit_;
}
inline void SafetyLimits::set_tcp_force_limit(float value) {
  
  tcp_force_limit_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.tcp_force_limit)
}

// float tcp_force_limit_ratio = 4;
inline void SafetyLimits::clear_tcp_force_limit_ratio() {
  tcp_force_limit_ratio_ = 0;
}
inline float SafetyLimits::tcp_force_limit_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.tcp_force_limit_ratio)
  return tcp_force_limit_ratio_;
}
inline void SafetyLimits::set_tcp_force_limit_ratio(float value) {
  
  tcp_force_limit_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.tcp_force_limit_ratio)
}

// float tcp_speed_limit = 5;
inline void SafetyLimits::clear_tcp_speed_limit() {
  tcp_speed_limit_ = 0;
}
inline float SafetyLimits::tcp_speed_limit() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.tcp_speed_limit)
  return tcp_speed_limit_;
}
inline void SafetyLimits::set_tcp_speed_limit(float value) {
  
  tcp_speed_limit_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.tcp_speed_limit)
}

// float tcp_speed_limit_ratio = 6;
inline void SafetyLimits::clear_tcp_speed_limit_ratio() {
  tcp_speed_limit_ratio_ = 0;
}
inline float SafetyLimits::tcp_speed_limit_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.tcp_speed_limit_ratio)
  return tcp_speed_limit_ratio_;
}
inline void SafetyLimits::set_tcp_speed_limit_ratio(float value) {
  
  tcp_speed_limit_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.tcp_speed_limit_ratio)
}

// repeated float joint_upper_limits = 7;
inline int SafetyLimits::joint_upper_limits_size() const {
  return joint_upper_limits_.size();
}
inline void SafetyLimits::clear_joint_upper_limits() {
  joint_upper_limits_.Clear();
}
inline float SafetyLimits::joint_upper_limits(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.joint_upper_limits)
  return joint_upper_limits_.Get(index);
}
inline void SafetyLimits::set_joint_upper_limits(int index, float value) {
  joint_upper_limits_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.joint_upper_limits)
}
inline void SafetyLimits::add_joint_upper_limits(float value) {
  joint_upper_limits_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.SafetyLimits.joint_upper_limits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SafetyLimits::joint_upper_limits() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.SafetyLimits.joint_upper_limits)
  return joint_upper_limits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SafetyLimits::mutable_joint_upper_limits() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.SafetyLimits.joint_upper_limits)
  return &joint_upper_limits_;
}

// repeated float joint_lower_limits = 8;
inline int SafetyLimits::joint_lower_limits_size() const {
  return joint_lower_limits_.size();
}
inline void SafetyLimits::clear_joint_lower_limits() {
  joint_lower_limits_.Clear();
}
inline float SafetyLimits::joint_lower_limits(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.joint_lower_limits)
  return joint_lower_limits_.Get(index);
}
inline void SafetyLimits::set_joint_lower_limits(int index, float value) {
  joint_lower_limits_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.joint_lower_limits)
}
inline void SafetyLimits::add_joint_lower_limits(float value) {
  joint_lower_limits_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.SafetyLimits.joint_lower_limits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SafetyLimits::joint_lower_limits() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.SafetyLimits.joint_lower_limits)
  return joint_lower_limits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SafetyLimits::mutable_joint_lower_limits() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.SafetyLimits.joint_lower_limits)
  return &joint_lower_limits_;
}

// -------------------------------------------------------------------

// SafetyStopConfig

// .Nrmk.IndyFramework.StopCategory joint_position_limit_stop_cat = 1;
inline void SafetyStopConfig::clear_joint_position_limit_stop_cat() {
  joint_position_limit_stop_cat_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::joint_position_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyStopConfig.joint_position_limit_stop_cat)
  return static_cast< ::Nrmk::IndyFramework::StopCategory >(joint_position_limit_stop_cat_);
}
inline void SafetyStopConfig::set_joint_position_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  
  joint_position_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyStopConfig.joint_position_limit_stop_cat)
}

// .Nrmk.IndyFramework.StopCategory joint_speed_limit_stop_cat = 2;
inline void SafetyStopConfig::clear_joint_speed_limit_stop_cat() {
  joint_speed_limit_stop_cat_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::joint_speed_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyStopConfig.joint_speed_limit_stop_cat)
  return static_cast< ::Nrmk::IndyFramework::StopCategory >(joint_speed_limit_stop_cat_);
}
inline void SafetyStopConfig::set_joint_speed_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  
  joint_speed_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyStopConfig.joint_speed_limit_stop_cat)
}

// .Nrmk.IndyFramework.StopCategory joint_torque_limit_stop_cat = 3;
inline void SafetyStopConfig::clear_joint_torque_limit_stop_cat() {
  joint_torque_limit_stop_cat_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::joint_torque_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyStopConfig.joint_torque_limit_stop_cat)
  return static_cast< ::Nrmk::IndyFramework::StopCategory >(joint_torque_limit_stop_cat_);
}
inline void SafetyStopConfig::set_joint_torque_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  
  joint_torque_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyStopConfig.joint_torque_limit_stop_cat)
}

// .Nrmk.IndyFramework.StopCategory tcp_speed_limit_stop_cat = 4;
inline void SafetyStopConfig::clear_tcp_speed_limit_stop_cat() {
  tcp_speed_limit_stop_cat_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::tcp_speed_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyStopConfig.tcp_speed_limit_stop_cat)
  return static_cast< ::Nrmk::IndyFramework::StopCategory >(tcp_speed_limit_stop_cat_);
}
inline void SafetyStopConfig::set_tcp_speed_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  
  tcp_speed_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyStopConfig.tcp_speed_limit_stop_cat)
}

// .Nrmk.IndyFramework.StopCategory tcp_force_limit_stop_cat = 5;
inline void SafetyStopConfig::clear_tcp_force_limit_stop_cat() {
  tcp_force_limit_stop_cat_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::tcp_force_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyStopConfig.tcp_force_limit_stop_cat)
  return static_cast< ::Nrmk::IndyFramework::StopCategory >(tcp_force_limit_stop_cat_);
}
inline void SafetyStopConfig::set_tcp_force_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  
  tcp_force_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyStopConfig.tcp_force_limit_stop_cat)
}

// .Nrmk.IndyFramework.StopCategory power_limit_stop_cat = 6;
inline void SafetyStopConfig::clear_power_limit_stop_cat() {
  power_limit_stop_cat_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::power_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyStopConfig.power_limit_stop_cat)
  return static_cast< ::Nrmk::IndyFramework::StopCategory >(power_limit_stop_cat_);
}
inline void SafetyStopConfig::set_power_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  
  power_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyStopConfig.power_limit_stop_cat)
}

// -------------------------------------------------------------------

// DIConfig

// int32 function_code = 1;
inline void DIConfig::clear_function_code() {
  function_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DIConfig::function_code() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIConfig.function_code)
  return function_code_;
}
inline void DIConfig::set_function_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  function_code_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DIConfig.function_code)
}

// string function_name = 2;
inline void DIConfig::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DIConfig::function_name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIConfig.function_name)
  return function_name_.GetNoArena();
}
inline void DIConfig::set_function_name(const std::string& value) {
  
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DIConfig.function_name)
}
inline void DIConfig::set_function_name(std::string&& value) {
  
  function_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.DIConfig.function_name)
}
inline void DIConfig::set_function_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.DIConfig.function_name)
}
inline void DIConfig::set_function_name(const char* value, size_t size) {
  
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.DIConfig.function_name)
}
inline std::string* DIConfig::mutable_function_name() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DIConfig.function_name)
  return function_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DIConfig::release_function_name() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.DIConfig.function_name)
  
  return function_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DIConfig::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    
  } else {
    
  }
  function_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.DIConfig.function_name)
}

// repeated .Nrmk.IndyFramework.DigitalSignal triggerSignals = 3;
inline int DIConfig::triggersignals_size() const {
  return triggersignals_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* DIConfig::mutable_triggersignals(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DIConfig.triggerSignals)
  return triggersignals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
DIConfig::mutable_triggersignals() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DIConfig.triggerSignals)
  return &triggersignals_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& DIConfig::triggersignals(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIConfig.triggerSignals)
  return triggersignals_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* DIConfig::add_triggersignals() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DIConfig.triggerSignals)
  return triggersignals_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
DIConfig::triggersignals() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DIConfig.triggerSignals)
  return triggersignals_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal successSignals = 4;
inline int DIConfig::successsignals_size() const {
  return successsignals_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* DIConfig::mutable_successsignals(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DIConfig.successSignals)
  return successsignals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
DIConfig::mutable_successsignals() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DIConfig.successSignals)
  return &successsignals_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& DIConfig::successsignals(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIConfig.successSignals)
  return successsignals_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* DIConfig::add_successsignals() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DIConfig.successSignals)
  return successsignals_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
DIConfig::successsignals() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DIConfig.successSignals)
  return successsignals_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal failureSignals = 5;
inline int DIConfig::failuresignals_size() const {
  return failuresignals_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* DIConfig::mutable_failuresignals(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DIConfig.failureSignals)
  return failuresignals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
DIConfig::mutable_failuresignals() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DIConfig.failureSignals)
  return &failuresignals_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& DIConfig::failuresignals(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIConfig.failureSignals)
  return failuresignals_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* DIConfig::add_failuresignals() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DIConfig.failureSignals)
  return failuresignals_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
DIConfig::failuresignals() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DIConfig.failureSignals)
  return failuresignals_;
}

// -------------------------------------------------------------------

// DIConfigList

// repeated .Nrmk.IndyFramework.DIConfig di_configs = 1;
inline int DIConfigList::di_configs_size() const {
  return di_configs_.size();
}
inline void DIConfigList::clear_di_configs() {
  di_configs_.Clear();
}
inline ::Nrmk::IndyFramework::DIConfig* DIConfigList::mutable_di_configs(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DIConfigList.di_configs)
  return di_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DIConfig >*
DIConfigList::mutable_di_configs() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DIConfigList.di_configs)
  return &di_configs_;
}
inline const ::Nrmk::IndyFramework::DIConfig& DIConfigList::di_configs(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIConfigList.di_configs)
  return di_configs_.Get(index);
}
inline ::Nrmk::IndyFramework::DIConfig* DIConfigList::add_di_configs() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DIConfigList.di_configs)
  return di_configs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DIConfig >&
DIConfigList::di_configs() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DIConfigList.di_configs)
  return di_configs_;
}

// -------------------------------------------------------------------

// DOConfig

// int32 state_code = 1;
inline void DOConfig::clear_state_code() {
  state_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DOConfig::state_code() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DOConfig.state_code)
  return state_code_;
}
inline void DOConfig::set_state_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_code_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DOConfig.state_code)
}

// string state_name = 2;
inline void DOConfig::clear_state_name() {
  state_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DOConfig::state_name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DOConfig.state_name)
  return state_name_.GetNoArena();
}
inline void DOConfig::set_state_name(const std::string& value) {
  
  state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DOConfig.state_name)
}
inline void DOConfig::set_state_name(std::string&& value) {
  
  state_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.DOConfig.state_name)
}
inline void DOConfig::set_state_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.DOConfig.state_name)
}
inline void DOConfig::set_state_name(const char* value, size_t size) {
  
  state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.DOConfig.state_name)
}
inline std::string* DOConfig::mutable_state_name() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DOConfig.state_name)
  return state_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DOConfig::release_state_name() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.DOConfig.state_name)
  
  return state_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DOConfig::set_allocated_state_name(std::string* state_name) {
  if (state_name != nullptr) {
    
  } else {
    
  }
  state_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_name);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.DOConfig.state_name)
}

// repeated .Nrmk.IndyFramework.DigitalSignal onSignals = 3;
inline int DOConfig::onsignals_size() const {
  return onsignals_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* DOConfig::mutable_onsignals(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DOConfig.onSignals)
  return onsignals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
DOConfig::mutable_onsignals() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DOConfig.onSignals)
  return &onsignals_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& DOConfig::onsignals(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DOConfig.onSignals)
  return onsignals_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* DOConfig::add_onsignals() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DOConfig.onSignals)
  return onsignals_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
DOConfig::onsignals() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DOConfig.onSignals)
  return onsignals_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal offSignals = 4;
inline int DOConfig::offsignals_size() const {
  return offsignals_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* DOConfig::mutable_offsignals(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DOConfig.offSignals)
  return offsignals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
DOConfig::mutable_offsignals() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DOConfig.offSignals)
  return &offsignals_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& DOConfig::offsignals(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DOConfig.offSignals)
  return offsignals_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* DOConfig::add_offsignals() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DOConfig.offSignals)
  return offsignals_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
DOConfig::offsignals() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DOConfig.offSignals)
  return offsignals_;
}

// -------------------------------------------------------------------

// DOConfigList

// repeated .Nrmk.IndyFramework.DOConfig do_configs = 1;
inline int DOConfigList::do_configs_size() const {
  return do_configs_.size();
}
inline void DOConfigList::clear_do_configs() {
  do_configs_.Clear();
}
inline ::Nrmk::IndyFramework::DOConfig* DOConfigList::mutable_do_configs(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DOConfigList.do_configs)
  return do_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DOConfig >*
DOConfigList::mutable_do_configs() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DOConfigList.do_configs)
  return &do_configs_;
}
inline const ::Nrmk::IndyFramework::DOConfig& DOConfigList::do_configs(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DOConfigList.do_configs)
  return do_configs_.Get(index);
}
inline ::Nrmk::IndyFramework::DOConfig* DOConfigList::add_do_configs() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DOConfigList.do_configs)
  return do_configs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DOConfig >&
DOConfigList::do_configs() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DOConfigList.do_configs)
  return do_configs_;
}

// -------------------------------------------------------------------

// GetReducedRatioRes

// float ratio = 1;
inline void GetReducedRatioRes::clear_ratio() {
  ratio_ = 0;
}
inline float GetReducedRatioRes::ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetReducedRatioRes.ratio)
  return ratio_;
}
inline void GetReducedRatioRes::set_ratio(float value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetReducedRatioRes.ratio)
}

// string msg = 100;
inline void GetReducedRatioRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetReducedRatioRes::msg() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetReducedRatioRes.msg)
  return msg_.GetNoArena();
}
inline void GetReducedRatioRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetReducedRatioRes.msg)
}
inline void GetReducedRatioRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.GetReducedRatioRes.msg)
}
inline void GetReducedRatioRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.GetReducedRatioRes.msg)
}
inline void GetReducedRatioRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.GetReducedRatioRes.msg)
}
inline std::string* GetReducedRatioRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.GetReducedRatioRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetReducedRatioRes::release_msg() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.GetReducedRatioRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetReducedRatioRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.GetReducedRatioRes.msg)
}

// -------------------------------------------------------------------

// GetReducedSpeedRes

// float speed = 1;
inline void GetReducedSpeedRes::clear_speed() {
  speed_ = 0;
}
inline float GetReducedSpeedRes::speed() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetReducedSpeedRes.speed)
  return speed_;
}
inline void GetReducedSpeedRes::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetReducedSpeedRes.speed)
}

// string msg = 100;
inline void GetReducedSpeedRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetReducedSpeedRes::msg() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetReducedSpeedRes.msg)
  return msg_.GetNoArena();
}
inline void GetReducedSpeedRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetReducedSpeedRes.msg)
}
inline void GetReducedSpeedRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.GetReducedSpeedRes.msg)
}
inline void GetReducedSpeedRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.GetReducedSpeedRes.msg)
}
inline void GetReducedSpeedRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.GetReducedSpeedRes.msg)
}
inline std::string* GetReducedSpeedRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.GetReducedSpeedRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetReducedSpeedRes::release_msg() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.GetReducedSpeedRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetReducedSpeedRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.GetReducedSpeedRes.msg)
}

// -------------------------------------------------------------------

// SetReducedSpeedReq

// float speed = 1;
inline void SetReducedSpeedReq::clear_speed() {
  speed_ = 0;
}
inline float SetReducedSpeedReq::speed() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SetReducedSpeedReq.speed)
  return speed_;
}
inline void SetReducedSpeedReq::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SetReducedSpeedReq.speed)
}

// -------------------------------------------------------------------

// FTSensorDevice

// .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceType dev_type = 1;
inline void FTSensorDevice::clear_dev_type() {
  dev_type_ = 0;
}
inline ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType FTSensorDevice::dev_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.dev_type)
  return static_cast< ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType >(dev_type_);
}
inline void FTSensorDevice::set_dev_type(::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType value) {
  
  dev_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.dev_type)
}

// .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceComType com_type = 2;
inline void FTSensorDevice::clear_com_type() {
  com_type_ = 0;
}
inline ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType FTSensorDevice::com_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.com_type)
  return static_cast< ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType >(com_type_);
}
inline void FTSensorDevice::set_com_type(::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType value) {
  
  com_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.com_type)
}

// string ip_address = 3;
inline void FTSensorDevice::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FTSensorDevice::ip_address() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.ip_address)
  return ip_address_.GetNoArena();
}
inline void FTSensorDevice::set_ip_address(const std::string& value) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.ip_address)
}
inline void FTSensorDevice::set_ip_address(std::string&& value) {
  
  ip_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.FTSensorDevice.ip_address)
}
inline void FTSensorDevice::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.FTSensorDevice.ip_address)
}
inline void FTSensorDevice::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.FTSensorDevice.ip_address)
}
inline std::string* FTSensorDevice::mutable_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.FTSensorDevice.ip_address)
  return ip_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FTSensorDevice::release_ip_address() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.FTSensorDevice.ip_address)
  
  return ip_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FTSensorDevice::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.FTSensorDevice.ip_address)
}

// float ft_frame_translation_offset_x = 11;
inline void FTSensorDevice::clear_ft_frame_translation_offset_x() {
  ft_frame_translation_offset_x_ = 0;
}
inline float FTSensorDevice::ft_frame_translation_offset_x() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.ft_frame_translation_offset_x)
  return ft_frame_translation_offset_x_;
}
inline void FTSensorDevice::set_ft_frame_translation_offset_x(float value) {
  
  ft_frame_translation_offset_x_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.ft_frame_translation_offset_x)
}

// float ft_frame_translation_offset_y = 12;
inline void FTSensorDevice::clear_ft_frame_translation_offset_y() {
  ft_frame_translation_offset_y_ = 0;
}
inline float FTSensorDevice::ft_frame_translation_offset_y() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.ft_frame_translation_offset_y)
  return ft_frame_translation_offset_y_;
}
inline void FTSensorDevice::set_ft_frame_translation_offset_y(float value) {
  
  ft_frame_translation_offset_y_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.ft_frame_translation_offset_y)
}

// float ft_frame_translation_offset_z = 13;
inline void FTSensorDevice::clear_ft_frame_translation_offset_z() {
  ft_frame_translation_offset_z_ = 0;
}
inline float FTSensorDevice::ft_frame_translation_offset_z() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.ft_frame_translation_offset_z)
  return ft_frame_translation_offset_z_;
}
inline void FTSensorDevice::set_ft_frame_translation_offset_z(float value) {
  
  ft_frame_translation_offset_z_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.ft_frame_translation_offset_z)
}

// float ft_frame_rotation_offset_r = 14;
inline void FTSensorDevice::clear_ft_frame_rotation_offset_r() {
  ft_frame_rotation_offset_r_ = 0;
}
inline float FTSensorDevice::ft_frame_rotation_offset_r() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.ft_frame_rotation_offset_r)
  return ft_frame_rotation_offset_r_;
}
inline void FTSensorDevice::set_ft_frame_rotation_offset_r(float value) {
  
  ft_frame_rotation_offset_r_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.ft_frame_rotation_offset_r)
}

// float ft_frame_rotation_offset_p = 15;
inline void FTSensorDevice::clear_ft_frame_rotation_offset_p() {
  ft_frame_rotation_offset_p_ = 0;
}
inline float FTSensorDevice::ft_frame_rotation_offset_p() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.ft_frame_rotation_offset_p)
  return ft_frame_rotation_offset_p_;
}
inline void FTSensorDevice::set_ft_frame_rotation_offset_p(float value) {
  
  ft_frame_rotation_offset_p_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.ft_frame_rotation_offset_p)
}

// float ft_frame_rotation_offset_y = 16;
inline void FTSensorDevice::clear_ft_frame_rotation_offset_y() {
  ft_frame_rotation_offset_y_ = 0;
}
inline float FTSensorDevice::ft_frame_rotation_offset_y() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.ft_frame_rotation_offset_y)
  return ft_frame_rotation_offset_y_;
}
inline void FTSensorDevice::set_ft_frame_rotation_offset_y(float value) {
  
  ft_frame_rotation_offset_y_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.ft_frame_rotation_offset_y)
}

// -------------------------------------------------------------------

// FTSensorDeviceRes

// string msg = 100;
inline void FTSensorDeviceRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FTSensorDeviceRes::msg() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDeviceRes.msg)
  return msg_.GetNoArena();
}
inline void FTSensorDeviceRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDeviceRes.msg)
}
inline void FTSensorDeviceRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.FTSensorDeviceRes.msg)
}
inline void FTSensorDeviceRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.FTSensorDeviceRes.msg)
}
inline void FTSensorDeviceRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.FTSensorDeviceRes.msg)
}
inline std::string* FTSensorDeviceRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.FTSensorDeviceRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FTSensorDeviceRes::release_msg() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.FTSensorDeviceRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FTSensorDeviceRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.FTSensorDeviceRes.msg)
}

// -------------------------------------------------------------------

// TeleOpParams

// float smooth_factor = 1;
inline void TeleOpParams::clear_smooth_factor() {
  smooth_factor_ = 0;
}
inline float TeleOpParams::smooth_factor() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpParams.smooth_factor)
  return smooth_factor_;
}
inline void TeleOpParams::set_smooth_factor(float value) {
  
  smooth_factor_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpParams.smooth_factor)
}

// float cutoff_freq = 2;
inline void TeleOpParams::clear_cutoff_freq() {
  cutoff_freq_ = 0;
}
inline float TeleOpParams::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpParams.cutoff_freq)
  return cutoff_freq_;
}
inline void TeleOpParams::set_cutoff_freq(float value) {
  
  cutoff_freq_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpParams.cutoff_freq)
}

// float error_gain = 3;
inline void TeleOpParams::clear_error_gain() {
  error_gain_ = 0;
}
inline float TeleOpParams::error_gain() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpParams.error_gain)
  return error_gain_;
}
inline void TeleOpParams::set_error_gain(float value) {
  
  error_gain_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpParams.error_gain)
}

// -------------------------------------------------------------------

// KinematicsParams_MDH

// float a = 1;
inline void KinematicsParams_MDH::clear_a() {
  a_ = 0;
}
inline float KinematicsParams_MDH::a() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.MDH.a)
  return a_;
}
inline void KinematicsParams_MDH::set_a(float value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.KinematicsParams.MDH.a)
}

// float alpha = 2;
inline void KinematicsParams_MDH::clear_alpha() {
  alpha_ = 0;
}
inline float KinematicsParams_MDH::alpha() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.MDH.alpha)
  return alpha_;
}
inline void KinematicsParams_MDH::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.KinematicsParams.MDH.alpha)
}

// float d0 = 3;
inline void KinematicsParams_MDH::clear_d0() {
  d0_ = 0;
}
inline float KinematicsParams_MDH::d0() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.MDH.d0)
  return d0_;
}
inline void KinematicsParams_MDH::set_d0(float value) {
  
  d0_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.KinematicsParams.MDH.d0)
}

// float theta0 = 4;
inline void KinematicsParams_MDH::clear_theta0() {
  theta0_ = 0;
}
inline float KinematicsParams_MDH::theta0() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.MDH.theta0)
  return theta0_;
}
inline void KinematicsParams_MDH::set_theta0(float value) {
  
  theta0_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.KinematicsParams.MDH.theta0)
}

// .Nrmk.IndyFramework.KinematicsParams.JointType type = 5;
inline void KinematicsParams_MDH::clear_type() {
  type_ = 0;
}
inline ::Nrmk::IndyFramework::KinematicsParams_JointType KinematicsParams_MDH::type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.MDH.type)
  return static_cast< ::Nrmk::IndyFramework::KinematicsParams_JointType >(type_);
}
inline void KinematicsParams_MDH::set_type(::Nrmk::IndyFramework::KinematicsParams_JointType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.KinematicsParams.MDH.type)
}

// int32 index = 10;
inline void KinematicsParams_MDH::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KinematicsParams_MDH::index() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.MDH.index)
  return index_;
}
inline void KinematicsParams_MDH::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.KinematicsParams.MDH.index)
}

// int32 parent = 11;
inline void KinematicsParams_MDH::clear_parent() {
  parent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KinematicsParams_MDH::parent() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.MDH.parent)
  return parent_;
}
inline void KinematicsParams_MDH::set_parent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parent_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.KinematicsParams.MDH.parent)
}

// -------------------------------------------------------------------

// KinematicsParams

// repeated .Nrmk.IndyFramework.KinematicsParams.MDH mdh = 1;
inline int KinematicsParams::mdh_size() const {
  return mdh_.size();
}
inline void KinematicsParams::clear_mdh() {
  mdh_.Clear();
}
inline ::Nrmk::IndyFramework::KinematicsParams_MDH* KinematicsParams::mutable_mdh(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.KinematicsParams.mdh)
  return mdh_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::KinematicsParams_MDH >*
KinematicsParams::mutable_mdh() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.KinematicsParams.mdh)
  return &mdh_;
}
inline const ::Nrmk::IndyFramework::KinematicsParams_MDH& KinematicsParams::mdh(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.mdh)
  return mdh_.Get(index);
}
inline ::Nrmk::IndyFramework::KinematicsParams_MDH* KinematicsParams::add_mdh() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.KinematicsParams.mdh)
  return mdh_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::KinematicsParams_MDH >&
KinematicsParams::mdh() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.KinematicsParams.mdh)
  return mdh_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IndyFramework
}  // namespace Nrmk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision>() {
  return ::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::CollTuningConfig_TuningSpace> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::CollTuningConfig_TuningSpace>() {
  return ::Nrmk::IndyFramework::CollTuningConfig_TuningSpace_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType>() {
  return ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType>() {
  return ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::KinematicsParams_JointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::KinematicsParams_JointType>() {
  return ::Nrmk::IndyFramework::KinematicsParams_JointType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_5fmsgs_2eproto
