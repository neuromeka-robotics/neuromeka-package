// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_5fmsgs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_config_5fmsgs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common_msgs.pb.h"
#include "device_msgs.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_config_5fmsgs_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_config_5fmsgs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_config_5fmsgs_2eproto;
namespace Nrmk {
namespace IndyFramework {
class AutoServoOffConfig;
struct AutoServoOffConfigDefaultTypeInternal;
extern AutoServoOffConfigDefaultTypeInternal _AutoServoOffConfig_default_instance_;
class CollTuningConfig;
struct CollTuningConfigDefaultTypeInternal;
extern CollTuningConfigDefaultTypeInternal _CollTuningConfig_default_instance_;
class CollisionPolicy;
struct CollisionPolicyDefaultTypeInternal;
extern CollisionPolicyDefaultTypeInternal _CollisionPolicy_default_instance_;
class CollisionSensLevel;
struct CollisionSensLevelDefaultTypeInternal;
extern CollisionSensLevelDefaultTypeInternal _CollisionSensLevel_default_instance_;
class CollisionThresholds;
struct CollisionThresholdsDefaultTypeInternal;
extern CollisionThresholdsDefaultTypeInternal _CollisionThresholds_default_instance_;
class CustomGainSet;
struct CustomGainSetDefaultTypeInternal;
extern CustomGainSetDefaultTypeInternal _CustomGainSet_default_instance_;
class DIConfig;
struct DIConfigDefaultTypeInternal;
extern DIConfigDefaultTypeInternal _DIConfig_default_instance_;
class DIConfigList;
struct DIConfigListDefaultTypeInternal;
extern DIConfigListDefaultTypeInternal _DIConfigList_default_instance_;
class DOConfig;
struct DOConfigDefaultTypeInternal;
extern DOConfigDefaultTypeInternal _DOConfig_default_instance_;
class DOConfigList;
struct DOConfigListDefaultTypeInternal;
extern DOConfigListDefaultTypeInternal _DOConfigList_default_instance_;
class FTSensorDevice;
struct FTSensorDeviceDefaultTypeInternal;
extern FTSensorDeviceDefaultTypeInternal _FTSensorDevice_default_instance_;
class FTSensorDeviceRes;
struct FTSensorDeviceResDefaultTypeInternal;
extern FTSensorDeviceResDefaultTypeInternal _FTSensorDeviceRes_default_instance_;
class ForceGainSet;
struct ForceGainSetDefaultTypeInternal;
extern ForceGainSetDefaultTypeInternal _ForceGainSet_default_instance_;
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class FrameResult;
struct FrameResultDefaultTypeInternal;
extern FrameResultDefaultTypeInternal _FrameResult_default_instance_;
class FrictionCompSet;
struct FrictionCompSetDefaultTypeInternal;
extern FrictionCompSetDefaultTypeInternal _FrictionCompSet_default_instance_;
class GetReducedRatioRes;
struct GetReducedRatioResDefaultTypeInternal;
extern GetReducedRatioResDefaultTypeInternal _GetReducedRatioRes_default_instance_;
class GetReducedSpeedRes;
struct GetReducedSpeedResDefaultTypeInternal;
extern GetReducedSpeedResDefaultTypeInternal _GetReducedSpeedRes_default_instance_;
class ImpedanceGainSet;
struct ImpedanceGainSetDefaultTypeInternal;
extern ImpedanceGainSetDefaultTypeInternal _ImpedanceGainSet_default_instance_;
class JointGainSet;
struct JointGainSetDefaultTypeInternal;
extern JointGainSetDefaultTypeInternal _JointGainSet_default_instance_;
class JointPos;
struct JointPosDefaultTypeInternal;
extern JointPosDefaultTypeInternal _JointPos_default_instance_;
class KinematicsParams;
struct KinematicsParamsDefaultTypeInternal;
extern KinematicsParamsDefaultTypeInternal _KinematicsParams_default_instance_;
class KinematicsParams_MDH;
struct KinematicsParams_MDHDefaultTypeInternal;
extern KinematicsParams_MDHDefaultTypeInternal _KinematicsParams_MDH_default_instance_;
class MountingAngles;
struct MountingAnglesDefaultTypeInternal;
extern MountingAnglesDefaultTypeInternal _MountingAngles_default_instance_;
class NewControllerTestState;
struct NewControllerTestStateDefaultTypeInternal;
extern NewControllerTestStateDefaultTypeInternal _NewControllerTestState_default_instance_;
class PlanarFrame;
struct PlanarFrameDefaultTypeInternal;
extern PlanarFrameDefaultTypeInternal _PlanarFrame_default_instance_;
class Ratio;
struct RatioDefaultTypeInternal;
extern RatioDefaultTypeInternal _Ratio_default_instance_;
class SafetyLimits;
struct SafetyLimitsDefaultTypeInternal;
extern SafetyLimitsDefaultTypeInternal _SafetyLimits_default_instance_;
class SafetyStopConfig;
struct SafetyStopConfigDefaultTypeInternal;
extern SafetyStopConfigDefaultTypeInternal _SafetyStopConfig_default_instance_;
class SetReducedSpeedReq;
struct SetReducedSpeedReqDefaultTypeInternal;
extern SetReducedSpeedReqDefaultTypeInternal _SetReducedSpeedReq_default_instance_;
class TaskGainSet;
struct TaskGainSetDefaultTypeInternal;
extern TaskGainSetDefaultTypeInternal _TaskGainSet_default_instance_;
class TeleOpParams;
struct TeleOpParamsDefaultTypeInternal;
extern TeleOpParamsDefaultTypeInternal _TeleOpParams_default_instance_;
class TestGainSet;
struct TestGainSetDefaultTypeInternal;
extern TestGainSetDefaultTypeInternal _TestGainSet_default_instance_;
class ToolProperties;
struct ToolPropertiesDefaultTypeInternal;
extern ToolPropertiesDefaultTypeInternal _ToolProperties_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Nrmk {
namespace IndyFramework {
enum CollTuningConfig_TuningPrecision : int {
  CollTuningConfig_TuningPrecision_LOW_TUNE = 0,
  CollTuningConfig_TuningPrecision_MIDDLE_TUNE = 1,
  CollTuningConfig_TuningPrecision_HIGH_TUNE = 2,
  CollTuningConfig_TuningPrecision_CollTuningConfig_TuningPrecision_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CollTuningConfig_TuningPrecision_CollTuningConfig_TuningPrecision_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CollTuningConfig_TuningPrecision_IsValid(int value);
constexpr CollTuningConfig_TuningPrecision CollTuningConfig_TuningPrecision_TuningPrecision_MIN = static_cast<CollTuningConfig_TuningPrecision>(0);
constexpr CollTuningConfig_TuningPrecision CollTuningConfig_TuningPrecision_TuningPrecision_MAX = static_cast<CollTuningConfig_TuningPrecision>(2);
constexpr int CollTuningConfig_TuningPrecision_TuningPrecision_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
CollTuningConfig_TuningPrecision_descriptor();
template <typename T>
const std::string& CollTuningConfig_TuningPrecision_Name(T value) {
  static_assert(std::is_same<T, CollTuningConfig_TuningPrecision>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TuningPrecision_Name().");
  return CollTuningConfig_TuningPrecision_Name(static_cast<CollTuningConfig_TuningPrecision>(value));
}
template <>
inline const std::string& CollTuningConfig_TuningPrecision_Name(CollTuningConfig_TuningPrecision value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CollTuningConfig_TuningPrecision_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CollTuningConfig_TuningPrecision_Parse(absl::string_view name, CollTuningConfig_TuningPrecision* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CollTuningConfig_TuningPrecision>(
      CollTuningConfig_TuningPrecision_descriptor(), name, value);
}
enum CollTuningConfig_TuningSpace : int {
  CollTuningConfig_TuningSpace_NO_TUNE = 0,
  CollTuningConfig_TuningSpace_JOINT_TUNE = 1,
  CollTuningConfig_TuningSpace_TASK_TUNE = 2,
  CollTuningConfig_TuningSpace_ALL_TUNE = 3,
  CollTuningConfig_TuningSpace_CollTuningConfig_TuningSpace_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CollTuningConfig_TuningSpace_CollTuningConfig_TuningSpace_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CollTuningConfig_TuningSpace_IsValid(int value);
constexpr CollTuningConfig_TuningSpace CollTuningConfig_TuningSpace_TuningSpace_MIN = static_cast<CollTuningConfig_TuningSpace>(0);
constexpr CollTuningConfig_TuningSpace CollTuningConfig_TuningSpace_TuningSpace_MAX = static_cast<CollTuningConfig_TuningSpace>(3);
constexpr int CollTuningConfig_TuningSpace_TuningSpace_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
CollTuningConfig_TuningSpace_descriptor();
template <typename T>
const std::string& CollTuningConfig_TuningSpace_Name(T value) {
  static_assert(std::is_same<T, CollTuningConfig_TuningSpace>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TuningSpace_Name().");
  return CollTuningConfig_TuningSpace_Name(static_cast<CollTuningConfig_TuningSpace>(value));
}
template <>
inline const std::string& CollTuningConfig_TuningSpace_Name(CollTuningConfig_TuningSpace value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CollTuningConfig_TuningSpace_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool CollTuningConfig_TuningSpace_Parse(absl::string_view name, CollTuningConfig_TuningSpace* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CollTuningConfig_TuningSpace>(
      CollTuningConfig_TuningSpace_descriptor(), name, value);
}
enum FTSensorDevice_FTSensorDeviceType : int {
  FTSensorDevice_FTSensorDeviceType_NONE = 0,
  FTSensorDevice_FTSensorDeviceType_AFT200_D80 = 1,
  FTSensorDevice_FTSensorDeviceType_AFT200_D80_EC = 2,
  FTSensorDevice_FTSensorDeviceType_RFT80_6A01 = 3,
  FTSensorDevice_FTSensorDeviceType_RFT60_HA01 = 4,
  FTSensorDevice_FTSensorDeviceType_HEX_E_H_QC = 5,
  FTSensorDevice_FTSensorDeviceType_FTSensorDevice_FTSensorDeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FTSensorDevice_FTSensorDeviceType_FTSensorDevice_FTSensorDeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FTSensorDevice_FTSensorDeviceType_IsValid(int value);
constexpr FTSensorDevice_FTSensorDeviceType FTSensorDevice_FTSensorDeviceType_FTSensorDeviceType_MIN = static_cast<FTSensorDevice_FTSensorDeviceType>(0);
constexpr FTSensorDevice_FTSensorDeviceType FTSensorDevice_FTSensorDeviceType_FTSensorDeviceType_MAX = static_cast<FTSensorDevice_FTSensorDeviceType>(5);
constexpr int FTSensorDevice_FTSensorDeviceType_FTSensorDeviceType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
FTSensorDevice_FTSensorDeviceType_descriptor();
template <typename T>
const std::string& FTSensorDevice_FTSensorDeviceType_Name(T value) {
  static_assert(std::is_same<T, FTSensorDevice_FTSensorDeviceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FTSensorDeviceType_Name().");
  return FTSensorDevice_FTSensorDeviceType_Name(static_cast<FTSensorDevice_FTSensorDeviceType>(value));
}
template <>
inline const std::string& FTSensorDevice_FTSensorDeviceType_Name(FTSensorDevice_FTSensorDeviceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FTSensorDevice_FTSensorDeviceType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool FTSensorDevice_FTSensorDeviceType_Parse(absl::string_view name, FTSensorDevice_FTSensorDeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FTSensorDevice_FTSensorDeviceType>(
      FTSensorDevice_FTSensorDeviceType_descriptor(), name, value);
}
enum FTSensorDevice_FTSensorDeviceComType : int {
  FTSensorDevice_FTSensorDeviceComType_ENDTOOLCAN = 0,
  FTSensorDevice_FTSensorDeviceComType_CBCAN = 1,
  FTSensorDevice_FTSensorDeviceComType_MODBUSCLIENT = 2,
  FTSensorDevice_FTSensorDeviceComType_ETHERCAT = 3,
  FTSensorDevice_FTSensorDeviceComType_FTSensorDevice_FTSensorDeviceComType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FTSensorDevice_FTSensorDeviceComType_FTSensorDevice_FTSensorDeviceComType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FTSensorDevice_FTSensorDeviceComType_IsValid(int value);
constexpr FTSensorDevice_FTSensorDeviceComType FTSensorDevice_FTSensorDeviceComType_FTSensorDeviceComType_MIN = static_cast<FTSensorDevice_FTSensorDeviceComType>(0);
constexpr FTSensorDevice_FTSensorDeviceComType FTSensorDevice_FTSensorDeviceComType_FTSensorDeviceComType_MAX = static_cast<FTSensorDevice_FTSensorDeviceComType>(3);
constexpr int FTSensorDevice_FTSensorDeviceComType_FTSensorDeviceComType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
FTSensorDevice_FTSensorDeviceComType_descriptor();
template <typename T>
const std::string& FTSensorDevice_FTSensorDeviceComType_Name(T value) {
  static_assert(std::is_same<T, FTSensorDevice_FTSensorDeviceComType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FTSensorDeviceComType_Name().");
  return FTSensorDevice_FTSensorDeviceComType_Name(static_cast<FTSensorDevice_FTSensorDeviceComType>(value));
}
template <>
inline const std::string& FTSensorDevice_FTSensorDeviceComType_Name(FTSensorDevice_FTSensorDeviceComType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FTSensorDevice_FTSensorDeviceComType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool FTSensorDevice_FTSensorDeviceComType_Parse(absl::string_view name, FTSensorDevice_FTSensorDeviceComType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FTSensorDevice_FTSensorDeviceComType>(
      FTSensorDevice_FTSensorDeviceComType_descriptor(), name, value);
}
enum KinematicsParams_JointType : int {
  KinematicsParams_JointType_REVOLUTE = 0,
  KinematicsParams_JointType_PRISMATIC = 1,
  KinematicsParams_JointType_FIXED = 2,
  KinematicsParams_JointType_KinematicsParams_JointType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  KinematicsParams_JointType_KinematicsParams_JointType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool KinematicsParams_JointType_IsValid(int value);
constexpr KinematicsParams_JointType KinematicsParams_JointType_JointType_MIN = static_cast<KinematicsParams_JointType>(0);
constexpr KinematicsParams_JointType KinematicsParams_JointType_JointType_MAX = static_cast<KinematicsParams_JointType>(2);
constexpr int KinematicsParams_JointType_JointType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
KinematicsParams_JointType_descriptor();
template <typename T>
const std::string& KinematicsParams_JointType_Name(T value) {
  static_assert(std::is_same<T, KinematicsParams_JointType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JointType_Name().");
  return KinematicsParams_JointType_Name(static_cast<KinematicsParams_JointType>(value));
}
template <>
inline const std::string& KinematicsParams_JointType_Name(KinematicsParams_JointType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<KinematicsParams_JointType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool KinematicsParams_JointType_Parse(absl::string_view name, KinematicsParams_JointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KinematicsParams_JointType>(
      KinematicsParams_JointType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Frame final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  ~Frame() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Frame(::google::protobuf::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frame* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Frame& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Frame& from) {
    Frame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Frame";
  }
  protected:
  explicit Frame(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFposFieldNumber = 1,
  };
  // repeated float fpos = 1;
  int fpos_size() const;
  private:
  int _internal_fpos_size() const;

  public:
  void clear_fpos() ;
  float fpos(int index) const;
  void set_fpos(int index, float value);
  void add_fpos(float value);
  const ::google::protobuf::RepeatedField<float>& fpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_fpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_fpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_fpos();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Frame)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> fpos_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class JointPos final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.JointPos) */ {
 public:
  inline JointPos() : JointPos(nullptr) {}
  ~JointPos() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JointPos(::google::protobuf::internal::ConstantInitialized);

  JointPos(const JointPos& from);
  JointPos(JointPos&& from) noexcept
    : JointPos() {
    *this = ::std::move(from);
  }

  inline JointPos& operator=(const JointPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointPos& operator=(JointPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JointPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointPos* internal_default_instance() {
    return reinterpret_cast<const JointPos*>(
               &_JointPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JointPos& a, JointPos& b) {
    a.Swap(&b);
  }
  inline void Swap(JointPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointPos* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JointPos* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JointPos>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JointPos& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JointPos& from) {
    JointPos::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointPos* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.JointPos";
  }
  protected:
  explicit JointPos(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJposFieldNumber = 1,
  };
  // repeated float jpos = 1;
  int jpos_size() const;
  private:
  int _internal_jpos_size() const;

  public:
  void clear_jpos() ;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::google::protobuf::RepeatedField<float>& jpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_jpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_jpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_jpos();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.JointPos)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> jpos_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class PlanarFrame final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.PlanarFrame) */ {
 public:
  inline PlanarFrame() : PlanarFrame(nullptr) {}
  ~PlanarFrame() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlanarFrame(::google::protobuf::internal::ConstantInitialized);

  PlanarFrame(const PlanarFrame& from);
  PlanarFrame(PlanarFrame&& from) noexcept
    : PlanarFrame() {
    *this = ::std::move(from);
  }

  inline PlanarFrame& operator=(const PlanarFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanarFrame& operator=(PlanarFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanarFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlanarFrame* internal_default_instance() {
    return reinterpret_cast<const PlanarFrame*>(
               &_PlanarFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlanarFrame& a, PlanarFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanarFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanarFrame* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanarFrame* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlanarFrame>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlanarFrame& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PlanarFrame& from) {
    PlanarFrame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanarFrame* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.PlanarFrame";
  }
  protected:
  explicit PlanarFrame(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFpos0FieldNumber = 1,
    kFpos1FieldNumber = 2,
    kFpos2FieldNumber = 3,
  };
  // repeated float fpos0 = 1;
  int fpos0_size() const;
  private:
  int _internal_fpos0_size() const;

  public:
  void clear_fpos0() ;
  float fpos0(int index) const;
  void set_fpos0(int index, float value);
  void add_fpos0(float value);
  const ::google::protobuf::RepeatedField<float>& fpos0() const;
  ::google::protobuf::RepeatedField<float>* mutable_fpos0();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_fpos0() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_fpos0();

  public:
  // repeated float fpos1 = 2;
  int fpos1_size() const;
  private:
  int _internal_fpos1_size() const;

  public:
  void clear_fpos1() ;
  float fpos1(int index) const;
  void set_fpos1(int index, float value);
  void add_fpos1(float value);
  const ::google::protobuf::RepeatedField<float>& fpos1() const;
  ::google::protobuf::RepeatedField<float>* mutable_fpos1();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_fpos1() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_fpos1();

  public:
  // repeated float fpos2 = 3;
  int fpos2_size() const;
  private:
  int _internal_fpos2_size() const;

  public:
  void clear_fpos2() ;
  float fpos2(int index) const;
  void set_fpos2(int index, float value);
  void add_fpos2(float value);
  const ::google::protobuf::RepeatedField<float>& fpos2() const;
  ::google::protobuf::RepeatedField<float>* mutable_fpos2();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_fpos2() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_fpos2();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.PlanarFrame)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> fpos0_;
    ::google::protobuf::RepeatedField<float> fpos1_;
    ::google::protobuf::RepeatedField<float> fpos2_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class FrameResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FrameResult) */ {
 public:
  inline FrameResult() : FrameResult(nullptr) {}
  ~FrameResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameResult(::google::protobuf::internal::ConstantInitialized);

  FrameResult(const FrameResult& from);
  FrameResult(FrameResult&& from) noexcept
    : FrameResult() {
    *this = ::std::move(from);
  }

  inline FrameResult& operator=(const FrameResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameResult& operator=(FrameResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameResult* internal_default_instance() {
    return reinterpret_cast<const FrameResult*>(
               &_FrameResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrameResult& a, FrameResult& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FrameResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FrameResult& from) {
    FrameResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.FrameResult";
  }
  protected:
  explicit FrameResult(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFposFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // repeated float fpos = 1;
  int fpos_size() const;
  private:
  int _internal_fpos_size() const;

  public:
  void clear_fpos() ;
  float fpos(int index) const;
  void set_fpos(int index, float value);
  void add_fpos(float value);
  const ::google::protobuf::RepeatedField<float>& fpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_fpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_fpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_fpos();

  public:
  // .Nrmk.IndyFramework.Response response = 2;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FrameResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> fpos_;
    ::Nrmk::IndyFramework::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class Ratio final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Ratio) */ {
 public:
  inline Ratio() : Ratio(nullptr) {}
  ~Ratio() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ratio(::google::protobuf::internal::ConstantInitialized);

  Ratio(const Ratio& from);
  Ratio(Ratio&& from) noexcept
    : Ratio() {
    *this = ::std::move(from);
  }

  inline Ratio& operator=(const Ratio& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ratio& operator=(Ratio&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ratio& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ratio* internal_default_instance() {
    return reinterpret_cast<const Ratio*>(
               &_Ratio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Ratio& a, Ratio& b) {
    a.Swap(&b);
  }
  inline void Swap(Ratio* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ratio* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ratio* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ratio>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Ratio& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Ratio& from) {
    Ratio::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ratio* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Ratio";
  }
  protected:
  explicit Ratio(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioFieldNumber = 1,
  };
  // uint32 ratio = 1;
  void clear_ratio() ;
  ::uint32_t ratio() const;
  void set_ratio(::uint32_t value);

  private:
  ::uint32_t _internal_ratio() const;
  void _internal_set_ratio(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Ratio)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t ratio_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class AutoServoOffConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.AutoServoOffConfig) */ {
 public:
  inline AutoServoOffConfig() : AutoServoOffConfig(nullptr) {}
  ~AutoServoOffConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AutoServoOffConfig(::google::protobuf::internal::ConstantInitialized);

  AutoServoOffConfig(const AutoServoOffConfig& from);
  AutoServoOffConfig(AutoServoOffConfig&& from) noexcept
    : AutoServoOffConfig() {
    *this = ::std::move(from);
  }

  inline AutoServoOffConfig& operator=(const AutoServoOffConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoServoOffConfig& operator=(AutoServoOffConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoServoOffConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoServoOffConfig* internal_default_instance() {
    return reinterpret_cast<const AutoServoOffConfig*>(
               &_AutoServoOffConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AutoServoOffConfig& a, AutoServoOffConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoServoOffConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoServoOffConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutoServoOffConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutoServoOffConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AutoServoOffConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AutoServoOffConfig& from) {
    AutoServoOffConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoServoOffConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.AutoServoOffConfig";
  }
  protected:
  explicit AutoServoOffConfig(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // bool enable = 1;
  void clear_enable() ;
  bool enable() const;
  void set_enable(bool value);

  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);

  public:
  // float time = 2;
  void clear_time() ;
  float time() const;
  void set_time(float value);

  private:
  float _internal_time() const;
  void _internal_set_time(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.AutoServoOffConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool enable_;
    float time_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class CollTuningConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CollTuningConfig) */ {
 public:
  inline CollTuningConfig() : CollTuningConfig(nullptr) {}
  ~CollTuningConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CollTuningConfig(::google::protobuf::internal::ConstantInitialized);

  CollTuningConfig(const CollTuningConfig& from);
  CollTuningConfig(CollTuningConfig&& from) noexcept
    : CollTuningConfig() {
    *this = ::std::move(from);
  }

  inline CollTuningConfig& operator=(const CollTuningConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollTuningConfig& operator=(CollTuningConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollTuningConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollTuningConfig* internal_default_instance() {
    return reinterpret_cast<const CollTuningConfig*>(
               &_CollTuningConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CollTuningConfig& a, CollTuningConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CollTuningConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollTuningConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollTuningConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollTuningConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CollTuningConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CollTuningConfig& from) {
    CollTuningConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollTuningConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.CollTuningConfig";
  }
  protected:
  explicit CollTuningConfig(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using TuningPrecision = CollTuningConfig_TuningPrecision;
  static constexpr TuningPrecision LOW_TUNE = CollTuningConfig_TuningPrecision_LOW_TUNE;
  static constexpr TuningPrecision MIDDLE_TUNE = CollTuningConfig_TuningPrecision_MIDDLE_TUNE;
  static constexpr TuningPrecision HIGH_TUNE = CollTuningConfig_TuningPrecision_HIGH_TUNE;
  static inline bool TuningPrecision_IsValid(int value) {
    return CollTuningConfig_TuningPrecision_IsValid(value);
  }
  static constexpr TuningPrecision TuningPrecision_MIN = CollTuningConfig_TuningPrecision_TuningPrecision_MIN;
  static constexpr TuningPrecision TuningPrecision_MAX = CollTuningConfig_TuningPrecision_TuningPrecision_MAX;
  static constexpr int TuningPrecision_ARRAYSIZE = CollTuningConfig_TuningPrecision_TuningPrecision_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* TuningPrecision_descriptor() {
    return CollTuningConfig_TuningPrecision_descriptor();
  }
  template <typename T>
  static inline const std::string& TuningPrecision_Name(T value) {
    return CollTuningConfig_TuningPrecision_Name(value);
  }
  static inline bool TuningPrecision_Parse(absl::string_view name, TuningPrecision* value) {
    return CollTuningConfig_TuningPrecision_Parse(name, value);
  }

  using TuningSpace = CollTuningConfig_TuningSpace;
  static constexpr TuningSpace NO_TUNE = CollTuningConfig_TuningSpace_NO_TUNE;
  static constexpr TuningSpace JOINT_TUNE = CollTuningConfig_TuningSpace_JOINT_TUNE;
  static constexpr TuningSpace TASK_TUNE = CollTuningConfig_TuningSpace_TASK_TUNE;
  static constexpr TuningSpace ALL_TUNE = CollTuningConfig_TuningSpace_ALL_TUNE;
  static inline bool TuningSpace_IsValid(int value) {
    return CollTuningConfig_TuningSpace_IsValid(value);
  }
  static constexpr TuningSpace TuningSpace_MIN = CollTuningConfig_TuningSpace_TuningSpace_MIN;
  static constexpr TuningSpace TuningSpace_MAX = CollTuningConfig_TuningSpace_TuningSpace_MAX;
  static constexpr int TuningSpace_ARRAYSIZE = CollTuningConfig_TuningSpace_TuningSpace_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* TuningSpace_descriptor() {
    return CollTuningConfig_TuningSpace_descriptor();
  }
  template <typename T>
  static inline const std::string& TuningSpace_Name(T value) {
    return CollTuningConfig_TuningSpace_Name(value);
  }
  static inline bool TuningSpace_Parse(absl::string_view name, TuningSpace* value) {
    return CollTuningConfig_TuningSpace_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPrecisionFieldNumber = 1,
    kTuningSpaceFieldNumber = 2,
    kVelLevelMaxFieldNumber = 3,
  };
  // .Nrmk.IndyFramework.CollTuningConfig.TuningPrecision precision = 1;
  void clear_precision() ;
  ::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision precision() const;
  void set_precision(::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision value);

  private:
  ::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision _internal_precision() const;
  void _internal_set_precision(::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision value);

  public:
  // .Nrmk.IndyFramework.CollTuningConfig.TuningSpace tuning_space = 2;
  void clear_tuning_space() ;
  ::Nrmk::IndyFramework::CollTuningConfig_TuningSpace tuning_space() const;
  void set_tuning_space(::Nrmk::IndyFramework::CollTuningConfig_TuningSpace value);

  private:
  ::Nrmk::IndyFramework::CollTuningConfig_TuningSpace _internal_tuning_space() const;
  void _internal_set_tuning_space(::Nrmk::IndyFramework::CollTuningConfig_TuningSpace value);

  public:
  // int32 vel_level_max = 3;
  void clear_vel_level_max() ;
  ::int32_t vel_level_max() const;
  void set_vel_level_max(::int32_t value);

  private:
  ::int32_t _internal_vel_level_max() const;
  void _internal_set_vel_level_max(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CollTuningConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int precision_;
    int tuning_space_;
    ::int32_t vel_level_max_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class JointGainSet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.JointGainSet) */ {
 public:
  inline JointGainSet() : JointGainSet(nullptr) {}
  ~JointGainSet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JointGainSet(::google::protobuf::internal::ConstantInitialized);

  JointGainSet(const JointGainSet& from);
  JointGainSet(JointGainSet&& from) noexcept
    : JointGainSet() {
    *this = ::std::move(from);
  }

  inline JointGainSet& operator=(const JointGainSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointGainSet& operator=(JointGainSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JointGainSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointGainSet* internal_default_instance() {
    return reinterpret_cast<const JointGainSet*>(
               &_JointGainSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(JointGainSet& a, JointGainSet& b) {
    a.Swap(&b);
  }
  inline void Swap(JointGainSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointGainSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JointGainSet* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JointGainSet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JointGainSet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JointGainSet& from) {
    JointGainSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointGainSet* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.JointGainSet";
  }
  protected:
  explicit JointGainSet(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKpFieldNumber = 1,
    kKvFieldNumber = 2,
    kKl2FieldNumber = 3,
  };
  // repeated float kp = 1;
  int kp_size() const;
  private:
  int _internal_kp_size() const;

  public:
  void clear_kp() ;
  float kp(int index) const;
  void set_kp(int index, float value);
  void add_kp(float value);
  const ::google::protobuf::RepeatedField<float>& kp() const;
  ::google::protobuf::RepeatedField<float>* mutable_kp();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kp() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kp();

  public:
  // repeated float kv = 2;
  int kv_size() const;
  private:
  int _internal_kv_size() const;

  public:
  void clear_kv() ;
  float kv(int index) const;
  void set_kv(int index, float value);
  void add_kv(float value);
  const ::google::protobuf::RepeatedField<float>& kv() const;
  ::google::protobuf::RepeatedField<float>* mutable_kv();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kv() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kv();

  public:
  // repeated float kl2 = 3;
  int kl2_size() const;
  private:
  int _internal_kl2_size() const;

  public:
  void clear_kl2() ;
  float kl2(int index) const;
  void set_kl2(int index, float value);
  void add_kl2(float value);
  const ::google::protobuf::RepeatedField<float>& kl2() const;
  ::google::protobuf::RepeatedField<float>* mutable_kl2();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kl2() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kl2();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.JointGainSet)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> kp_;
    ::google::protobuf::RepeatedField<float> kv_;
    ::google::protobuf::RepeatedField<float> kl2_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TaskGainSet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TaskGainSet) */ {
 public:
  inline TaskGainSet() : TaskGainSet(nullptr) {}
  ~TaskGainSet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TaskGainSet(::google::protobuf::internal::ConstantInitialized);

  TaskGainSet(const TaskGainSet& from);
  TaskGainSet(TaskGainSet&& from) noexcept
    : TaskGainSet() {
    *this = ::std::move(from);
  }

  inline TaskGainSet& operator=(const TaskGainSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskGainSet& operator=(TaskGainSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskGainSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskGainSet* internal_default_instance() {
    return reinterpret_cast<const TaskGainSet*>(
               &_TaskGainSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TaskGainSet& a, TaskGainSet& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskGainSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskGainSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskGainSet* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskGainSet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TaskGainSet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TaskGainSet& from) {
    TaskGainSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskGainSet* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TaskGainSet";
  }
  protected:
  explicit TaskGainSet(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKpFieldNumber = 1,
    kKvFieldNumber = 2,
    kKl2FieldNumber = 3,
  };
  // repeated float kp = 1;
  int kp_size() const;
  private:
  int _internal_kp_size() const;

  public:
  void clear_kp() ;
  float kp(int index) const;
  void set_kp(int index, float value);
  void add_kp(float value);
  const ::google::protobuf::RepeatedField<float>& kp() const;
  ::google::protobuf::RepeatedField<float>* mutable_kp();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kp() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kp();

  public:
  // repeated float kv = 2;
  int kv_size() const;
  private:
  int _internal_kv_size() const;

  public:
  void clear_kv() ;
  float kv(int index) const;
  void set_kv(int index, float value);
  void add_kv(float value);
  const ::google::protobuf::RepeatedField<float>& kv() const;
  ::google::protobuf::RepeatedField<float>* mutable_kv();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kv() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kv();

  public:
  // repeated float kl2 = 3;
  int kl2_size() const;
  private:
  int _internal_kl2_size() const;

  public:
  void clear_kl2() ;
  float kl2(int index) const;
  void set_kl2(int index, float value);
  void add_kl2(float value);
  const ::google::protobuf::RepeatedField<float>& kl2() const;
  ::google::protobuf::RepeatedField<float>* mutable_kl2();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kl2() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kl2();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TaskGainSet)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> kp_;
    ::google::protobuf::RepeatedField<float> kv_;
    ::google::protobuf::RepeatedField<float> kl2_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ImpedanceGainSet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ImpedanceGainSet) */ {
 public:
  inline ImpedanceGainSet() : ImpedanceGainSet(nullptr) {}
  ~ImpedanceGainSet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ImpedanceGainSet(::google::protobuf::internal::ConstantInitialized);

  ImpedanceGainSet(const ImpedanceGainSet& from);
  ImpedanceGainSet(ImpedanceGainSet&& from) noexcept
    : ImpedanceGainSet() {
    *this = ::std::move(from);
  }

  inline ImpedanceGainSet& operator=(const ImpedanceGainSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImpedanceGainSet& operator=(ImpedanceGainSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImpedanceGainSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImpedanceGainSet* internal_default_instance() {
    return reinterpret_cast<const ImpedanceGainSet*>(
               &_ImpedanceGainSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ImpedanceGainSet& a, ImpedanceGainSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ImpedanceGainSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImpedanceGainSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImpedanceGainSet* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImpedanceGainSet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImpedanceGainSet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ImpedanceGainSet& from) {
    ImpedanceGainSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImpedanceGainSet* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ImpedanceGainSet";
  }
  protected:
  explicit ImpedanceGainSet(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMassFieldNumber = 1,
    kDampingFieldNumber = 2,
    kStiffnessFieldNumber = 3,
    kKl2FieldNumber = 4,
  };
  // repeated float mass = 1;
  int mass_size() const;
  private:
  int _internal_mass_size() const;

  public:
  void clear_mass() ;
  float mass(int index) const;
  void set_mass(int index, float value);
  void add_mass(float value);
  const ::google::protobuf::RepeatedField<float>& mass() const;
  ::google::protobuf::RepeatedField<float>* mutable_mass();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_mass() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_mass();

  public:
  // repeated float damping = 2;
  int damping_size() const;
  private:
  int _internal_damping_size() const;

  public:
  void clear_damping() ;
  float damping(int index) const;
  void set_damping(int index, float value);
  void add_damping(float value);
  const ::google::protobuf::RepeatedField<float>& damping() const;
  ::google::protobuf::RepeatedField<float>* mutable_damping();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_damping() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_damping();

  public:
  // repeated float stiffness = 3;
  int stiffness_size() const;
  private:
  int _internal_stiffness_size() const;

  public:
  void clear_stiffness() ;
  float stiffness(int index) const;
  void set_stiffness(int index, float value);
  void add_stiffness(float value);
  const ::google::protobuf::RepeatedField<float>& stiffness() const;
  ::google::protobuf::RepeatedField<float>* mutable_stiffness();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_stiffness() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_stiffness();

  public:
  // repeated float kl2 = 4;
  int kl2_size() const;
  private:
  int _internal_kl2_size() const;

  public:
  void clear_kl2() ;
  float kl2(int index) const;
  void set_kl2(int index, float value);
  void add_kl2(float value);
  const ::google::protobuf::RepeatedField<float>& kl2() const;
  ::google::protobuf::RepeatedField<float>* mutable_kl2();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kl2() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kl2();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ImpedanceGainSet)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> mass_;
    ::google::protobuf::RepeatedField<float> damping_;
    ::google::protobuf::RepeatedField<float> stiffness_;
    ::google::protobuf::RepeatedField<float> kl2_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ForceGainSet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ForceGainSet) */ {
 public:
  inline ForceGainSet() : ForceGainSet(nullptr) {}
  ~ForceGainSet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ForceGainSet(::google::protobuf::internal::ConstantInitialized);

  ForceGainSet(const ForceGainSet& from);
  ForceGainSet(ForceGainSet&& from) noexcept
    : ForceGainSet() {
    *this = ::std::move(from);
  }

  inline ForceGainSet& operator=(const ForceGainSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForceGainSet& operator=(ForceGainSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForceGainSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForceGainSet* internal_default_instance() {
    return reinterpret_cast<const ForceGainSet*>(
               &_ForceGainSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ForceGainSet& a, ForceGainSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ForceGainSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForceGainSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForceGainSet* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForceGainSet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ForceGainSet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ForceGainSet& from) {
    ForceGainSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForceGainSet* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ForceGainSet";
  }
  protected:
  explicit ForceGainSet(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKpFieldNumber = 1,
    kKvFieldNumber = 2,
    kKl2FieldNumber = 3,
    kMassFieldNumber = 4,
    kDampingFieldNumber = 5,
    kStiffnessFieldNumber = 6,
    kKpfFieldNumber = 7,
    kKifFieldNumber = 8,
  };
  // repeated float kp = 1;
  int kp_size() const;
  private:
  int _internal_kp_size() const;

  public:
  void clear_kp() ;
  float kp(int index) const;
  void set_kp(int index, float value);
  void add_kp(float value);
  const ::google::protobuf::RepeatedField<float>& kp() const;
  ::google::protobuf::RepeatedField<float>* mutable_kp();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kp() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kp();

  public:
  // repeated float kv = 2;
  int kv_size() const;
  private:
  int _internal_kv_size() const;

  public:
  void clear_kv() ;
  float kv(int index) const;
  void set_kv(int index, float value);
  void add_kv(float value);
  const ::google::protobuf::RepeatedField<float>& kv() const;
  ::google::protobuf::RepeatedField<float>* mutable_kv();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kv() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kv();

  public:
  // repeated float kl2 = 3;
  int kl2_size() const;
  private:
  int _internal_kl2_size() const;

  public:
  void clear_kl2() ;
  float kl2(int index) const;
  void set_kl2(int index, float value);
  void add_kl2(float value);
  const ::google::protobuf::RepeatedField<float>& kl2() const;
  ::google::protobuf::RepeatedField<float>* mutable_kl2();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kl2() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kl2();

  public:
  // repeated float mass = 4;
  int mass_size() const;
  private:
  int _internal_mass_size() const;

  public:
  void clear_mass() ;
  float mass(int index) const;
  void set_mass(int index, float value);
  void add_mass(float value);
  const ::google::protobuf::RepeatedField<float>& mass() const;
  ::google::protobuf::RepeatedField<float>* mutable_mass();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_mass() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_mass();

  public:
  // repeated float damping = 5;
  int damping_size() const;
  private:
  int _internal_damping_size() const;

  public:
  void clear_damping() ;
  float damping(int index) const;
  void set_damping(int index, float value);
  void add_damping(float value);
  const ::google::protobuf::RepeatedField<float>& damping() const;
  ::google::protobuf::RepeatedField<float>* mutable_damping();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_damping() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_damping();

  public:
  // repeated float stiffness = 6;
  int stiffness_size() const;
  private:
  int _internal_stiffness_size() const;

  public:
  void clear_stiffness() ;
  float stiffness(int index) const;
  void set_stiffness(int index, float value);
  void add_stiffness(float value);
  const ::google::protobuf::RepeatedField<float>& stiffness() const;
  ::google::protobuf::RepeatedField<float>* mutable_stiffness();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_stiffness() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_stiffness();

  public:
  // repeated float kpf = 7;
  int kpf_size() const;
  private:
  int _internal_kpf_size() const;

  public:
  void clear_kpf() ;
  float kpf(int index) const;
  void set_kpf(int index, float value);
  void add_kpf(float value);
  const ::google::protobuf::RepeatedField<float>& kpf() const;
  ::google::protobuf::RepeatedField<float>* mutable_kpf();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kpf() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kpf();

  public:
  // repeated float kif = 8;
  int kif_size() const;
  private:
  int _internal_kif_size() const;

  public:
  void clear_kif() ;
  float kif(int index) const;
  void set_kif(int index, float value);
  void add_kif(float value);
  const ::google::protobuf::RepeatedField<float>& kif() const;
  ::google::protobuf::RepeatedField<float>* mutable_kif();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kif() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kif();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ForceGainSet)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> kp_;
    ::google::protobuf::RepeatedField<float> kv_;
    ::google::protobuf::RepeatedField<float> kl2_;
    ::google::protobuf::RepeatedField<float> mass_;
    ::google::protobuf::RepeatedField<float> damping_;
    ::google::protobuf::RepeatedField<float> stiffness_;
    ::google::protobuf::RepeatedField<float> kpf_;
    ::google::protobuf::RepeatedField<float> kif_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TestGainSet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TestGainSet) */ {
 public:
  inline TestGainSet() : TestGainSet(nullptr) {}
  ~TestGainSet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestGainSet(::google::protobuf::internal::ConstantInitialized);

  TestGainSet(const TestGainSet& from);
  TestGainSet(TestGainSet&& from) noexcept
    : TestGainSet() {
    *this = ::std::move(from);
  }

  inline TestGainSet& operator=(const TestGainSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestGainSet& operator=(TestGainSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestGainSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestGainSet* internal_default_instance() {
    return reinterpret_cast<const TestGainSet*>(
               &_TestGainSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TestGainSet& a, TestGainSet& b) {
    a.Swap(&b);
  }
  inline void Swap(TestGainSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestGainSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestGainSet* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestGainSet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestGainSet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TestGainSet& from) {
    TestGainSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestGainSet* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TestGainSet";
  }
  protected:
  explicit TestGainSet(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKpctcFieldNumber = 1,
    kKvctcFieldNumber = 2,
    kKictcFieldNumber = 3,
    kKnricFieldNumber = 4,
    kKpnricFieldNumber = 5,
    kKinricFieldNumber = 6,
  };
  // repeated float kpctc = 1;
  int kpctc_size() const;
  private:
  int _internal_kpctc_size() const;

  public:
  void clear_kpctc() ;
  float kpctc(int index) const;
  void set_kpctc(int index, float value);
  void add_kpctc(float value);
  const ::google::protobuf::RepeatedField<float>& kpctc() const;
  ::google::protobuf::RepeatedField<float>* mutable_kpctc();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kpctc() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kpctc();

  public:
  // repeated float kvctc = 2;
  int kvctc_size() const;
  private:
  int _internal_kvctc_size() const;

  public:
  void clear_kvctc() ;
  float kvctc(int index) const;
  void set_kvctc(int index, float value);
  void add_kvctc(float value);
  const ::google::protobuf::RepeatedField<float>& kvctc() const;
  ::google::protobuf::RepeatedField<float>* mutable_kvctc();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kvctc() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kvctc();

  public:
  // repeated float kictc = 3;
  int kictc_size() const;
  private:
  int _internal_kictc_size() const;

  public:
  void clear_kictc() ;
  float kictc(int index) const;
  void set_kictc(int index, float value);
  void add_kictc(float value);
  const ::google::protobuf::RepeatedField<float>& kictc() const;
  ::google::protobuf::RepeatedField<float>* mutable_kictc();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kictc() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kictc();

  public:
  // repeated float knric = 4;
  int knric_size() const;
  private:
  int _internal_knric_size() const;

  public:
  void clear_knric() ;
  float knric(int index) const;
  void set_knric(int index, float value);
  void add_knric(float value);
  const ::google::protobuf::RepeatedField<float>& knric() const;
  ::google::protobuf::RepeatedField<float>* mutable_knric();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_knric() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_knric();

  public:
  // repeated float kpnric = 5;
  int kpnric_size() const;
  private:
  int _internal_kpnric_size() const;

  public:
  void clear_kpnric() ;
  float kpnric(int index) const;
  void set_kpnric(int index, float value);
  void add_kpnric(float value);
  const ::google::protobuf::RepeatedField<float>& kpnric() const;
  ::google::protobuf::RepeatedField<float>* mutable_kpnric();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kpnric() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kpnric();

  public:
  // repeated float kinric = 6;
  int kinric_size() const;
  private:
  int _internal_kinric_size() const;

  public:
  void clear_kinric() ;
  float kinric(int index) const;
  void set_kinric(int index, float value);
  void add_kinric(float value);
  const ::google::protobuf::RepeatedField<float>& kinric() const;
  ::google::protobuf::RepeatedField<float>* mutable_kinric();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_kinric() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_kinric();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TestGainSet)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> kpctc_;
    ::google::protobuf::RepeatedField<float> kvctc_;
    ::google::protobuf::RepeatedField<float> kictc_;
    ::google::protobuf::RepeatedField<float> knric_;
    ::google::protobuf::RepeatedField<float> kpnric_;
    ::google::protobuf::RepeatedField<float> kinric_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class CustomGainSet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CustomGainSet) */ {
 public:
  inline CustomGainSet() : CustomGainSet(nullptr) {}
  ~CustomGainSet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CustomGainSet(::google::protobuf::internal::ConstantInitialized);

  CustomGainSet(const CustomGainSet& from);
  CustomGainSet(CustomGainSet&& from) noexcept
    : CustomGainSet() {
    *this = ::std::move(from);
  }

  inline CustomGainSet& operator=(const CustomGainSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomGainSet& operator=(CustomGainSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomGainSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomGainSet* internal_default_instance() {
    return reinterpret_cast<const CustomGainSet*>(
               &_CustomGainSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CustomGainSet& a, CustomGainSet& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomGainSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomGainSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomGainSet* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomGainSet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CustomGainSet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CustomGainSet& from) {
    CustomGainSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomGainSet* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.CustomGainSet";
  }
  protected:
  explicit CustomGainSet(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGain0FieldNumber = 1,
    kGain1FieldNumber = 2,
    kGain2FieldNumber = 3,
    kGain3FieldNumber = 4,
    kGain4FieldNumber = 5,
    kGain5FieldNumber = 6,
    kGain6FieldNumber = 7,
    kGain7FieldNumber = 8,
    kGain8FieldNumber = 9,
    kGain9FieldNumber = 10,
  };
  // repeated float gain0 = 1;
  int gain0_size() const;
  private:
  int _internal_gain0_size() const;

  public:
  void clear_gain0() ;
  float gain0(int index) const;
  void set_gain0(int index, float value);
  void add_gain0(float value);
  const ::google::protobuf::RepeatedField<float>& gain0() const;
  ::google::protobuf::RepeatedField<float>* mutable_gain0();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_gain0() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_gain0();

  public:
  // repeated float gain1 = 2;
  int gain1_size() const;
  private:
  int _internal_gain1_size() const;

  public:
  void clear_gain1() ;
  float gain1(int index) const;
  void set_gain1(int index, float value);
  void add_gain1(float value);
  const ::google::protobuf::RepeatedField<float>& gain1() const;
  ::google::protobuf::RepeatedField<float>* mutable_gain1();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_gain1() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_gain1();

  public:
  // repeated float gain2 = 3;
  int gain2_size() const;
  private:
  int _internal_gain2_size() const;

  public:
  void clear_gain2() ;
  float gain2(int index) const;
  void set_gain2(int index, float value);
  void add_gain2(float value);
  const ::google::protobuf::RepeatedField<float>& gain2() const;
  ::google::protobuf::RepeatedField<float>* mutable_gain2();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_gain2() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_gain2();

  public:
  // repeated float gain3 = 4;
  int gain3_size() const;
  private:
  int _internal_gain3_size() const;

  public:
  void clear_gain3() ;
  float gain3(int index) const;
  void set_gain3(int index, float value);
  void add_gain3(float value);
  const ::google::protobuf::RepeatedField<float>& gain3() const;
  ::google::protobuf::RepeatedField<float>* mutable_gain3();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_gain3() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_gain3();

  public:
  // repeated float gain4 = 5;
  int gain4_size() const;
  private:
  int _internal_gain4_size() const;

  public:
  void clear_gain4() ;
  float gain4(int index) const;
  void set_gain4(int index, float value);
  void add_gain4(float value);
  const ::google::protobuf::RepeatedField<float>& gain4() const;
  ::google::protobuf::RepeatedField<float>* mutable_gain4();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_gain4() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_gain4();

  public:
  // repeated float gain5 = 6;
  int gain5_size() const;
  private:
  int _internal_gain5_size() const;

  public:
  void clear_gain5() ;
  float gain5(int index) const;
  void set_gain5(int index, float value);
  void add_gain5(float value);
  const ::google::protobuf::RepeatedField<float>& gain5() const;
  ::google::protobuf::RepeatedField<float>* mutable_gain5();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_gain5() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_gain5();

  public:
  // repeated float gain6 = 7;
  int gain6_size() const;
  private:
  int _internal_gain6_size() const;

  public:
  void clear_gain6() ;
  float gain6(int index) const;
  void set_gain6(int index, float value);
  void add_gain6(float value);
  const ::google::protobuf::RepeatedField<float>& gain6() const;
  ::google::protobuf::RepeatedField<float>* mutable_gain6();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_gain6() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_gain6();

  public:
  // repeated float gain7 = 8;
  int gain7_size() const;
  private:
  int _internal_gain7_size() const;

  public:
  void clear_gain7() ;
  float gain7(int index) const;
  void set_gain7(int index, float value);
  void add_gain7(float value);
  const ::google::protobuf::RepeatedField<float>& gain7() const;
  ::google::protobuf::RepeatedField<float>* mutable_gain7();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_gain7() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_gain7();

  public:
  // repeated float gain8 = 9;
  int gain8_size() const;
  private:
  int _internal_gain8_size() const;

  public:
  void clear_gain8() ;
  float gain8(int index) const;
  void set_gain8(int index, float value);
  void add_gain8(float value);
  const ::google::protobuf::RepeatedField<float>& gain8() const;
  ::google::protobuf::RepeatedField<float>* mutable_gain8();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_gain8() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_gain8();

  public:
  // repeated float gain9 = 10;
  int gain9_size() const;
  private:
  int _internal_gain9_size() const;

  public:
  void clear_gain9() ;
  float gain9(int index) const;
  void set_gain9(int index, float value);
  void add_gain9(float value);
  const ::google::protobuf::RepeatedField<float>& gain9() const;
  ::google::protobuf::RepeatedField<float>* mutable_gain9();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_gain9() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_gain9();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CustomGainSet)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> gain0_;
    ::google::protobuf::RepeatedField<float> gain1_;
    ::google::protobuf::RepeatedField<float> gain2_;
    ::google::protobuf::RepeatedField<float> gain3_;
    ::google::protobuf::RepeatedField<float> gain4_;
    ::google::protobuf::RepeatedField<float> gain5_;
    ::google::protobuf::RepeatedField<float> gain6_;
    ::google::protobuf::RepeatedField<float> gain7_;
    ::google::protobuf::RepeatedField<float> gain8_;
    ::google::protobuf::RepeatedField<float> gain9_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class NewControllerTestState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.NewControllerTestState) */ {
 public:
  inline NewControllerTestState() : NewControllerTestState(nullptr) {}
  ~NewControllerTestState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NewControllerTestState(::google::protobuf::internal::ConstantInitialized);

  NewControllerTestState(const NewControllerTestState& from);
  NewControllerTestState(NewControllerTestState&& from) noexcept
    : NewControllerTestState() {
    *this = ::std::move(from);
  }

  inline NewControllerTestState& operator=(const NewControllerTestState& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewControllerTestState& operator=(NewControllerTestState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewControllerTestState& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewControllerTestState* internal_default_instance() {
    return reinterpret_cast<const NewControllerTestState*>(
               &_NewControllerTestState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(NewControllerTestState& a, NewControllerTestState& b) {
    a.Swap(&b);
  }
  inline void Swap(NewControllerTestState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewControllerTestState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewControllerTestState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewControllerTestState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewControllerTestState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NewControllerTestState& from) {
    NewControllerTestState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewControllerTestState* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.NewControllerTestState";
  }
  protected:
  explicit NewControllerTestState(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJenableFieldNumber = 1,
    kTenableFieldNumber = 2,
  };
  // bool Jenable = 1;
  void clear_jenable() ;
  bool jenable() const;
  void set_jenable(bool value);

  private:
  bool _internal_jenable() const;
  void _internal_set_jenable(bool value);

  public:
  // bool Tenable = 2;
  void clear_tenable() ;
  bool tenable() const;
  void set_tenable(bool value);

  private:
  bool _internal_tenable() const;
  void _internal_set_tenable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.NewControllerTestState)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool jenable_;
    bool tenable_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class FrictionCompSet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FrictionCompSet) */ {
 public:
  inline FrictionCompSet() : FrictionCompSet(nullptr) {}
  ~FrictionCompSet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrictionCompSet(::google::protobuf::internal::ConstantInitialized);

  FrictionCompSet(const FrictionCompSet& from);
  FrictionCompSet(FrictionCompSet&& from) noexcept
    : FrictionCompSet() {
    *this = ::std::move(from);
  }

  inline FrictionCompSet& operator=(const FrictionCompSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrictionCompSet& operator=(FrictionCompSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrictionCompSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrictionCompSet* internal_default_instance() {
    return reinterpret_cast<const FrictionCompSet*>(
               &_FrictionCompSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FrictionCompSet& a, FrictionCompSet& b) {
    a.Swap(&b);
  }
  inline void Swap(FrictionCompSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrictionCompSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrictionCompSet* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrictionCompSet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FrictionCompSet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FrictionCompSet& from) {
    FrictionCompSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrictionCompSet* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.FrictionCompSet";
  }
  protected:
  explicit FrictionCompSet(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlCompLevelsFieldNumber = 2,
    kTeachingCompLevelsFieldNumber = 4,
    kControlCompEnableFieldNumber = 1,
    kTeachingCompEnableFieldNumber = 3,
  };
  // repeated int32 control_comp_levels = 2;
  int control_comp_levels_size() const;
  private:
  int _internal_control_comp_levels_size() const;

  public:
  void clear_control_comp_levels() ;
  ::int32_t control_comp_levels(int index) const;
  void set_control_comp_levels(int index, ::int32_t value);
  void add_control_comp_levels(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& control_comp_levels() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_control_comp_levels();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_control_comp_levels() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_control_comp_levels();

  public:
  // repeated int32 teaching_comp_levels = 4;
  int teaching_comp_levels_size() const;
  private:
  int _internal_teaching_comp_levels_size() const;

  public:
  void clear_teaching_comp_levels() ;
  ::int32_t teaching_comp_levels(int index) const;
  void set_teaching_comp_levels(int index, ::int32_t value);
  void add_teaching_comp_levels(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& teaching_comp_levels() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_teaching_comp_levels();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_teaching_comp_levels() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_teaching_comp_levels();

  public:
  // bool control_comp_enable = 1;
  void clear_control_comp_enable() ;
  bool control_comp_enable() const;
  void set_control_comp_enable(bool value);

  private:
  bool _internal_control_comp_enable() const;
  void _internal_set_control_comp_enable(bool value);

  public:
  // bool teaching_comp_enable = 3;
  void clear_teaching_comp_enable() ;
  bool teaching_comp_enable() const;
  void set_teaching_comp_enable(bool value);

  private:
  bool _internal_teaching_comp_enable() const;
  void _internal_set_teaching_comp_enable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FrictionCompSet)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<::int32_t> control_comp_levels_;
    mutable ::google::protobuf::internal::CachedSize _control_comp_levels_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> teaching_comp_levels_;
    mutable ::google::protobuf::internal::CachedSize _teaching_comp_levels_cached_byte_size_;
    bool control_comp_enable_;
    bool teaching_comp_enable_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MountingAngles final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MountingAngles) */ {
 public:
  inline MountingAngles() : MountingAngles(nullptr) {}
  ~MountingAngles() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MountingAngles(::google::protobuf::internal::ConstantInitialized);

  MountingAngles(const MountingAngles& from);
  MountingAngles(MountingAngles&& from) noexcept
    : MountingAngles() {
    *this = ::std::move(from);
  }

  inline MountingAngles& operator=(const MountingAngles& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountingAngles& operator=(MountingAngles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MountingAngles& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountingAngles* internal_default_instance() {
    return reinterpret_cast<const MountingAngles*>(
               &_MountingAngles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MountingAngles& a, MountingAngles& b) {
    a.Swap(&b);
  }
  inline void Swap(MountingAngles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountingAngles* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MountingAngles* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MountingAngles>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MountingAngles& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MountingAngles& from) {
    MountingAngles::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountingAngles* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MountingAngles";
  }
  protected:
  explicit MountingAngles(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRyFieldNumber = 1,
    kRzFieldNumber = 2,
  };
  // float ry = 1;
  void clear_ry() ;
  float ry() const;
  void set_ry(float value);

  private:
  float _internal_ry() const;
  void _internal_set_ry(float value);

  public:
  // float rz = 2;
  void clear_rz() ;
  float rz() const;
  void set_rz(float value);

  private:
  float _internal_rz() const;
  void _internal_set_rz(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MountingAngles)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float ry_;
    float rz_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ToolProperties final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ToolProperties) */ {
 public:
  inline ToolProperties() : ToolProperties(nullptr) {}
  ~ToolProperties() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ToolProperties(::google::protobuf::internal::ConstantInitialized);

  ToolProperties(const ToolProperties& from);
  ToolProperties(ToolProperties&& from) noexcept
    : ToolProperties() {
    *this = ::std::move(from);
  }

  inline ToolProperties& operator=(const ToolProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolProperties& operator=(ToolProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToolProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToolProperties* internal_default_instance() {
    return reinterpret_cast<const ToolProperties*>(
               &_ToolProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ToolProperties& a, ToolProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(ToolProperties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToolProperties* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToolProperties* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToolProperties>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ToolProperties& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ToolProperties& from) {
    ToolProperties::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToolProperties* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ToolProperties";
  }
  protected:
  explicit ToolProperties(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterOfMassFieldNumber = 2,
    kInertiaFieldNumber = 3,
    kMassFieldNumber = 1,
  };
  // repeated float center_of_mass = 2;
  int center_of_mass_size() const;
  private:
  int _internal_center_of_mass_size() const;

  public:
  void clear_center_of_mass() ;
  float center_of_mass(int index) const;
  void set_center_of_mass(int index, float value);
  void add_center_of_mass(float value);
  const ::google::protobuf::RepeatedField<float>& center_of_mass() const;
  ::google::protobuf::RepeatedField<float>* mutable_center_of_mass();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_center_of_mass() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_center_of_mass();

  public:
  // repeated float inertia = 3;
  int inertia_size() const;
  private:
  int _internal_inertia_size() const;

  public:
  void clear_inertia() ;
  float inertia(int index) const;
  void set_inertia(int index, float value);
  void add_inertia(float value);
  const ::google::protobuf::RepeatedField<float>& inertia() const;
  ::google::protobuf::RepeatedField<float>* mutable_inertia();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_inertia() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_inertia();

  public:
  // float mass = 1;
  void clear_mass() ;
  float mass() const;
  void set_mass(float value);

  private:
  float _internal_mass() const;
  void _internal_set_mass(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ToolProperties)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> center_of_mass_;
    ::google::protobuf::RepeatedField<float> inertia_;
    float mass_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class CollisionSensLevel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CollisionSensLevel) */ {
 public:
  inline CollisionSensLevel() : CollisionSensLevel(nullptr) {}
  ~CollisionSensLevel() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CollisionSensLevel(::google::protobuf::internal::ConstantInitialized);

  CollisionSensLevel(const CollisionSensLevel& from);
  CollisionSensLevel(CollisionSensLevel&& from) noexcept
    : CollisionSensLevel() {
    *this = ::std::move(from);
  }

  inline CollisionSensLevel& operator=(const CollisionSensLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollisionSensLevel& operator=(CollisionSensLevel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollisionSensLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollisionSensLevel* internal_default_instance() {
    return reinterpret_cast<const CollisionSensLevel*>(
               &_CollisionSensLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CollisionSensLevel& a, CollisionSensLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(CollisionSensLevel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollisionSensLevel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollisionSensLevel* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollisionSensLevel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CollisionSensLevel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CollisionSensLevel& from) {
    CollisionSensLevel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollisionSensLevel* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.CollisionSensLevel";
  }
  protected:
  explicit CollisionSensLevel(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // uint32 level = 1;
  void clear_level() ;
  ::uint32_t level() const;
  void set_level(::uint32_t value);

  private:
  ::uint32_t _internal_level() const;
  void _internal_set_level(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CollisionSensLevel)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t level_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class CollisionThresholds final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CollisionThresholds) */ {
 public:
  inline CollisionThresholds() : CollisionThresholds(nullptr) {}
  ~CollisionThresholds() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CollisionThresholds(::google::protobuf::internal::ConstantInitialized);

  CollisionThresholds(const CollisionThresholds& from);
  CollisionThresholds(CollisionThresholds&& from) noexcept
    : CollisionThresholds() {
    *this = ::std::move(from);
  }

  inline CollisionThresholds& operator=(const CollisionThresholds& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollisionThresholds& operator=(CollisionThresholds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollisionThresholds& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollisionThresholds* internal_default_instance() {
    return reinterpret_cast<const CollisionThresholds*>(
               &_CollisionThresholds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CollisionThresholds& a, CollisionThresholds& b) {
    a.Swap(&b);
  }
  inline void Swap(CollisionThresholds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollisionThresholds* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollisionThresholds* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollisionThresholds>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CollisionThresholds& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CollisionThresholds& from) {
    CollisionThresholds::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollisionThresholds* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.CollisionThresholds";
  }
  protected:
  explicit CollisionThresholds(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJTorqueBasesFieldNumber = 1,
    kJTorqueTangentsFieldNumber = 2,
    kTTorqueBasesFieldNumber = 3,
    kTTorqueTangentsFieldNumber = 4,
    kErrorBasesFieldNumber = 5,
    kErrorTangentsFieldNumber = 6,
    kTConstvelTorqueBasesFieldNumber = 7,
    kTConstvelTorqueTangentsFieldNumber = 8,
    kTConveyorTorqueBasesFieldNumber = 9,
    kTConveyorTorqueTangentsFieldNumber = 10,
  };
  // repeated float j_torque_bases = 1;
  int j_torque_bases_size() const;
  private:
  int _internal_j_torque_bases_size() const;

  public:
  void clear_j_torque_bases() ;
  float j_torque_bases(int index) const;
  void set_j_torque_bases(int index, float value);
  void add_j_torque_bases(float value);
  const ::google::protobuf::RepeatedField<float>& j_torque_bases() const;
  ::google::protobuf::RepeatedField<float>* mutable_j_torque_bases();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_j_torque_bases() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_j_torque_bases();

  public:
  // repeated float j_torque_tangents = 2;
  int j_torque_tangents_size() const;
  private:
  int _internal_j_torque_tangents_size() const;

  public:
  void clear_j_torque_tangents() ;
  float j_torque_tangents(int index) const;
  void set_j_torque_tangents(int index, float value);
  void add_j_torque_tangents(float value);
  const ::google::protobuf::RepeatedField<float>& j_torque_tangents() const;
  ::google::protobuf::RepeatedField<float>* mutable_j_torque_tangents();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_j_torque_tangents() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_j_torque_tangents();

  public:
  // repeated float t_torque_bases = 3;
  int t_torque_bases_size() const;
  private:
  int _internal_t_torque_bases_size() const;

  public:
  void clear_t_torque_bases() ;
  float t_torque_bases(int index) const;
  void set_t_torque_bases(int index, float value);
  void add_t_torque_bases(float value);
  const ::google::protobuf::RepeatedField<float>& t_torque_bases() const;
  ::google::protobuf::RepeatedField<float>* mutable_t_torque_bases();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_t_torque_bases() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_t_torque_bases();

  public:
  // repeated float t_torque_tangents = 4;
  int t_torque_tangents_size() const;
  private:
  int _internal_t_torque_tangents_size() const;

  public:
  void clear_t_torque_tangents() ;
  float t_torque_tangents(int index) const;
  void set_t_torque_tangents(int index, float value);
  void add_t_torque_tangents(float value);
  const ::google::protobuf::RepeatedField<float>& t_torque_tangents() const;
  ::google::protobuf::RepeatedField<float>* mutable_t_torque_tangents();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_t_torque_tangents() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_t_torque_tangents();

  public:
  // repeated float error_bases = 5;
  int error_bases_size() const;
  private:
  int _internal_error_bases_size() const;

  public:
  void clear_error_bases() ;
  float error_bases(int index) const;
  void set_error_bases(int index, float value);
  void add_error_bases(float value);
  const ::google::protobuf::RepeatedField<float>& error_bases() const;
  ::google::protobuf::RepeatedField<float>* mutable_error_bases();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_error_bases() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_error_bases();

  public:
  // repeated float error_tangents = 6;
  int error_tangents_size() const;
  private:
  int _internal_error_tangents_size() const;

  public:
  void clear_error_tangents() ;
  float error_tangents(int index) const;
  void set_error_tangents(int index, float value);
  void add_error_tangents(float value);
  const ::google::protobuf::RepeatedField<float>& error_tangents() const;
  ::google::protobuf::RepeatedField<float>* mutable_error_tangents();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_error_tangents() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_error_tangents();

  public:
  // repeated float t_constvel_torque_bases = 7;
  int t_constvel_torque_bases_size() const;
  private:
  int _internal_t_constvel_torque_bases_size() const;

  public:
  void clear_t_constvel_torque_bases() ;
  float t_constvel_torque_bases(int index) const;
  void set_t_constvel_torque_bases(int index, float value);
  void add_t_constvel_torque_bases(float value);
  const ::google::protobuf::RepeatedField<float>& t_constvel_torque_bases() const;
  ::google::protobuf::RepeatedField<float>* mutable_t_constvel_torque_bases();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_t_constvel_torque_bases() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_t_constvel_torque_bases();

  public:
  // repeated float t_constvel_torque_tangents = 8;
  int t_constvel_torque_tangents_size() const;
  private:
  int _internal_t_constvel_torque_tangents_size() const;

  public:
  void clear_t_constvel_torque_tangents() ;
  float t_constvel_torque_tangents(int index) const;
  void set_t_constvel_torque_tangents(int index, float value);
  void add_t_constvel_torque_tangents(float value);
  const ::google::protobuf::RepeatedField<float>& t_constvel_torque_tangents() const;
  ::google::protobuf::RepeatedField<float>* mutable_t_constvel_torque_tangents();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_t_constvel_torque_tangents() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_t_constvel_torque_tangents();

  public:
  // repeated float t_conveyor_torque_bases = 9;
  int t_conveyor_torque_bases_size() const;
  private:
  int _internal_t_conveyor_torque_bases_size() const;

  public:
  void clear_t_conveyor_torque_bases() ;
  float t_conveyor_torque_bases(int index) const;
  void set_t_conveyor_torque_bases(int index, float value);
  void add_t_conveyor_torque_bases(float value);
  const ::google::protobuf::RepeatedField<float>& t_conveyor_torque_bases() const;
  ::google::protobuf::RepeatedField<float>* mutable_t_conveyor_torque_bases();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_t_conveyor_torque_bases() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_t_conveyor_torque_bases();

  public:
  // repeated float t_conveyor_torque_tangents = 10;
  int t_conveyor_torque_tangents_size() const;
  private:
  int _internal_t_conveyor_torque_tangents_size() const;

  public:
  void clear_t_conveyor_torque_tangents() ;
  float t_conveyor_torque_tangents(int index) const;
  void set_t_conveyor_torque_tangents(int index, float value);
  void add_t_conveyor_torque_tangents(float value);
  const ::google::protobuf::RepeatedField<float>& t_conveyor_torque_tangents() const;
  ::google::protobuf::RepeatedField<float>* mutable_t_conveyor_torque_tangents();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_t_conveyor_torque_tangents() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_t_conveyor_torque_tangents();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CollisionThresholds)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> j_torque_bases_;
    ::google::protobuf::RepeatedField<float> j_torque_tangents_;
    ::google::protobuf::RepeatedField<float> t_torque_bases_;
    ::google::protobuf::RepeatedField<float> t_torque_tangents_;
    ::google::protobuf::RepeatedField<float> error_bases_;
    ::google::protobuf::RepeatedField<float> error_tangents_;
    ::google::protobuf::RepeatedField<float> t_constvel_torque_bases_;
    ::google::protobuf::RepeatedField<float> t_constvel_torque_tangents_;
    ::google::protobuf::RepeatedField<float> t_conveyor_torque_bases_;
    ::google::protobuf::RepeatedField<float> t_conveyor_torque_tangents_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class CollisionPolicy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CollisionPolicy) */ {
 public:
  inline CollisionPolicy() : CollisionPolicy(nullptr) {}
  ~CollisionPolicy() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CollisionPolicy(::google::protobuf::internal::ConstantInitialized);

  CollisionPolicy(const CollisionPolicy& from);
  CollisionPolicy(CollisionPolicy&& from) noexcept
    : CollisionPolicy() {
    *this = ::std::move(from);
  }

  inline CollisionPolicy& operator=(const CollisionPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollisionPolicy& operator=(CollisionPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollisionPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollisionPolicy* internal_default_instance() {
    return reinterpret_cast<const CollisionPolicy*>(
               &_CollisionPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CollisionPolicy& a, CollisionPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(CollisionPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollisionPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollisionPolicy* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollisionPolicy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CollisionPolicy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CollisionPolicy& from) {
    CollisionPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollisionPolicy* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.CollisionPolicy";
  }
  protected:
  explicit CollisionPolicy(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyFieldNumber = 1,
    kSleepTimeFieldNumber = 2,
    kGravityTimeFieldNumber = 3,
  };
  // .Nrmk.IndyFramework.CollisionPolicyType policy = 1;
  void clear_policy() ;
  ::Nrmk::IndyFramework::CollisionPolicyType policy() const;
  void set_policy(::Nrmk::IndyFramework::CollisionPolicyType value);

  private:
  ::Nrmk::IndyFramework::CollisionPolicyType _internal_policy() const;
  void _internal_set_policy(::Nrmk::IndyFramework::CollisionPolicyType value);

  public:
  // float sleep_time = 2;
  void clear_sleep_time() ;
  float sleep_time() const;
  void set_sleep_time(float value);

  private:
  float _internal_sleep_time() const;
  void _internal_set_sleep_time(float value);

  public:
  // float gravity_time = 3;
  void clear_gravity_time() ;
  float gravity_time() const;
  void set_gravity_time(float value);

  private:
  float _internal_gravity_time() const;
  void _internal_set_gravity_time(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CollisionPolicy)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int policy_;
    float sleep_time_;
    float gravity_time_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class SafetyLimits final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SafetyLimits) */ {
 public:
  inline SafetyLimits() : SafetyLimits(nullptr) {}
  ~SafetyLimits() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SafetyLimits(::google::protobuf::internal::ConstantInitialized);

  SafetyLimits(const SafetyLimits& from);
  SafetyLimits(SafetyLimits&& from) noexcept
    : SafetyLimits() {
    *this = ::std::move(from);
  }

  inline SafetyLimits& operator=(const SafetyLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline SafetyLimits& operator=(SafetyLimits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SafetyLimits& default_instance() {
    return *internal_default_instance();
  }
  static inline const SafetyLimits* internal_default_instance() {
    return reinterpret_cast<const SafetyLimits*>(
               &_SafetyLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SafetyLimits& a, SafetyLimits& b) {
    a.Swap(&b);
  }
  inline void Swap(SafetyLimits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SafetyLimits* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SafetyLimits* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SafetyLimits>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SafetyLimits& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SafetyLimits& from) {
    SafetyLimits::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SafetyLimits* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.SafetyLimits";
  }
  protected:
  explicit SafetyLimits(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointUpperLimitsFieldNumber = 7,
    kJointLowerLimitsFieldNumber = 8,
    kPowerLimitFieldNumber = 1,
    kPowerLimitRatioFieldNumber = 2,
    kTcpForceLimitFieldNumber = 3,
    kTcpForceLimitRatioFieldNumber = 4,
    kTcpSpeedLimitFieldNumber = 5,
    kTcpSpeedLimitRatioFieldNumber = 6,
  };
  // repeated float joint_upper_limits = 7;
  int joint_upper_limits_size() const;
  private:
  int _internal_joint_upper_limits_size() const;

  public:
  void clear_joint_upper_limits() ;
  float joint_upper_limits(int index) const;
  void set_joint_upper_limits(int index, float value);
  void add_joint_upper_limits(float value);
  const ::google::protobuf::RepeatedField<float>& joint_upper_limits() const;
  ::google::protobuf::RepeatedField<float>* mutable_joint_upper_limits();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_joint_upper_limits() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_joint_upper_limits();

  public:
  // repeated float joint_lower_limits = 8;
  int joint_lower_limits_size() const;
  private:
  int _internal_joint_lower_limits_size() const;

  public:
  void clear_joint_lower_limits() ;
  float joint_lower_limits(int index) const;
  void set_joint_lower_limits(int index, float value);
  void add_joint_lower_limits(float value);
  const ::google::protobuf::RepeatedField<float>& joint_lower_limits() const;
  ::google::protobuf::RepeatedField<float>* mutable_joint_lower_limits();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_joint_lower_limits() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_joint_lower_limits();

  public:
  // float power_limit = 1;
  void clear_power_limit() ;
  float power_limit() const;
  void set_power_limit(float value);

  private:
  float _internal_power_limit() const;
  void _internal_set_power_limit(float value);

  public:
  // float power_limit_ratio = 2;
  void clear_power_limit_ratio() ;
  float power_limit_ratio() const;
  void set_power_limit_ratio(float value);

  private:
  float _internal_power_limit_ratio() const;
  void _internal_set_power_limit_ratio(float value);

  public:
  // float tcp_force_limit = 3;
  void clear_tcp_force_limit() ;
  float tcp_force_limit() const;
  void set_tcp_force_limit(float value);

  private:
  float _internal_tcp_force_limit() const;
  void _internal_set_tcp_force_limit(float value);

  public:
  // float tcp_force_limit_ratio = 4;
  void clear_tcp_force_limit_ratio() ;
  float tcp_force_limit_ratio() const;
  void set_tcp_force_limit_ratio(float value);

  private:
  float _internal_tcp_force_limit_ratio() const;
  void _internal_set_tcp_force_limit_ratio(float value);

  public:
  // float tcp_speed_limit = 5;
  void clear_tcp_speed_limit() ;
  float tcp_speed_limit() const;
  void set_tcp_speed_limit(float value);

  private:
  float _internal_tcp_speed_limit() const;
  void _internal_set_tcp_speed_limit(float value);

  public:
  // float tcp_speed_limit_ratio = 6;
  void clear_tcp_speed_limit_ratio() ;
  float tcp_speed_limit_ratio() const;
  void set_tcp_speed_limit_ratio(float value);

  private:
  float _internal_tcp_speed_limit_ratio() const;
  void _internal_set_tcp_speed_limit_ratio(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SafetyLimits)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> joint_upper_limits_;
    ::google::protobuf::RepeatedField<float> joint_lower_limits_;
    float power_limit_;
    float power_limit_ratio_;
    float tcp_force_limit_;
    float tcp_force_limit_ratio_;
    float tcp_speed_limit_;
    float tcp_speed_limit_ratio_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class SafetyStopConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SafetyStopConfig) */ {
 public:
  inline SafetyStopConfig() : SafetyStopConfig(nullptr) {}
  ~SafetyStopConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SafetyStopConfig(::google::protobuf::internal::ConstantInitialized);

  SafetyStopConfig(const SafetyStopConfig& from);
  SafetyStopConfig(SafetyStopConfig&& from) noexcept
    : SafetyStopConfig() {
    *this = ::std::move(from);
  }

  inline SafetyStopConfig& operator=(const SafetyStopConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SafetyStopConfig& operator=(SafetyStopConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SafetyStopConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SafetyStopConfig* internal_default_instance() {
    return reinterpret_cast<const SafetyStopConfig*>(
               &_SafetyStopConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SafetyStopConfig& a, SafetyStopConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SafetyStopConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SafetyStopConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SafetyStopConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SafetyStopConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SafetyStopConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SafetyStopConfig& from) {
    SafetyStopConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SafetyStopConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.SafetyStopConfig";
  }
  protected:
  explicit SafetyStopConfig(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointPositionLimitStopCatFieldNumber = 1,
    kJointSpeedLimitStopCatFieldNumber = 2,
    kJointTorqueLimitStopCatFieldNumber = 3,
    kTcpSpeedLimitStopCatFieldNumber = 4,
    kTcpForceLimitStopCatFieldNumber = 5,
    kPowerLimitStopCatFieldNumber = 6,
  };
  // .Nrmk.IndyFramework.StopCategory joint_position_limit_stop_cat = 1;
  void clear_joint_position_limit_stop_cat() ;
  ::Nrmk::IndyFramework::StopCategory joint_position_limit_stop_cat() const;
  void set_joint_position_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  private:
  ::Nrmk::IndyFramework::StopCategory _internal_joint_position_limit_stop_cat() const;
  void _internal_set_joint_position_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  public:
  // .Nrmk.IndyFramework.StopCategory joint_speed_limit_stop_cat = 2;
  void clear_joint_speed_limit_stop_cat() ;
  ::Nrmk::IndyFramework::StopCategory joint_speed_limit_stop_cat() const;
  void set_joint_speed_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  private:
  ::Nrmk::IndyFramework::StopCategory _internal_joint_speed_limit_stop_cat() const;
  void _internal_set_joint_speed_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  public:
  // .Nrmk.IndyFramework.StopCategory joint_torque_limit_stop_cat = 3;
  void clear_joint_torque_limit_stop_cat() ;
  ::Nrmk::IndyFramework::StopCategory joint_torque_limit_stop_cat() const;
  void set_joint_torque_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  private:
  ::Nrmk::IndyFramework::StopCategory _internal_joint_torque_limit_stop_cat() const;
  void _internal_set_joint_torque_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  public:
  // .Nrmk.IndyFramework.StopCategory tcp_speed_limit_stop_cat = 4;
  void clear_tcp_speed_limit_stop_cat() ;
  ::Nrmk::IndyFramework::StopCategory tcp_speed_limit_stop_cat() const;
  void set_tcp_speed_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  private:
  ::Nrmk::IndyFramework::StopCategory _internal_tcp_speed_limit_stop_cat() const;
  void _internal_set_tcp_speed_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  public:
  // .Nrmk.IndyFramework.StopCategory tcp_force_limit_stop_cat = 5;
  void clear_tcp_force_limit_stop_cat() ;
  ::Nrmk::IndyFramework::StopCategory tcp_force_limit_stop_cat() const;
  void set_tcp_force_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  private:
  ::Nrmk::IndyFramework::StopCategory _internal_tcp_force_limit_stop_cat() const;
  void _internal_set_tcp_force_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  public:
  // .Nrmk.IndyFramework.StopCategory power_limit_stop_cat = 6;
  void clear_power_limit_stop_cat() ;
  ::Nrmk::IndyFramework::StopCategory power_limit_stop_cat() const;
  void set_power_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  private:
  ::Nrmk::IndyFramework::StopCategory _internal_power_limit_stop_cat() const;
  void _internal_set_power_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SafetyStopConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int joint_position_limit_stop_cat_;
    int joint_speed_limit_stop_cat_;
    int joint_torque_limit_stop_cat_;
    int tcp_speed_limit_stop_cat_;
    int tcp_force_limit_stop_cat_;
    int power_limit_stop_cat_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class DIConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DIConfig) */ {
 public:
  inline DIConfig() : DIConfig(nullptr) {}
  ~DIConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DIConfig(::google::protobuf::internal::ConstantInitialized);

  DIConfig(const DIConfig& from);
  DIConfig(DIConfig&& from) noexcept
    : DIConfig() {
    *this = ::std::move(from);
  }

  inline DIConfig& operator=(const DIConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DIConfig& operator=(DIConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DIConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DIConfig* internal_default_instance() {
    return reinterpret_cast<const DIConfig*>(
               &_DIConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DIConfig& a, DIConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DIConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DIConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DIConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DIConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DIConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DIConfig& from) {
    DIConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DIConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.DIConfig";
  }
  protected:
  explicit DIConfig(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggerSignalsFieldNumber = 3,
    kSuccessSignalsFieldNumber = 4,
    kFailureSignalsFieldNumber = 5,
    kFunctionNameFieldNumber = 2,
    kFunctionCodeFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.DigitalSignal triggerSignals = 3;
  int triggersignals_size() const;
  private:
  int _internal_triggersignals_size() const;

  public:
  void clear_triggersignals() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_triggersignals(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_triggersignals();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_triggersignals() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_triggersignals();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& triggersignals(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_triggersignals();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      triggersignals() const;
  // repeated .Nrmk.IndyFramework.DigitalSignal successSignals = 4;
  int successsignals_size() const;
  private:
  int _internal_successsignals_size() const;

  public:
  void clear_successsignals() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_successsignals(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_successsignals();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_successsignals() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_successsignals();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& successsignals(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_successsignals();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      successsignals() const;
  // repeated .Nrmk.IndyFramework.DigitalSignal failureSignals = 5;
  int failuresignals_size() const;
  private:
  int _internal_failuresignals_size() const;

  public:
  void clear_failuresignals() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_failuresignals(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_failuresignals();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_failuresignals() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_failuresignals();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& failuresignals(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_failuresignals();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      failuresignals() const;
  // string function_name = 2;
  void clear_function_name() ;
  const std::string& function_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_function_name(Arg_&& arg, Args_... args);
  std::string* mutable_function_name();
  PROTOBUF_NODISCARD std::string* release_function_name();
  void set_allocated_function_name(std::string* ptr);

  private:
  const std::string& _internal_function_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_name(
      const std::string& value);
  std::string* _internal_mutable_function_name();

  public:
  // int32 function_code = 1;
  void clear_function_code() ;
  ::int32_t function_code() const;
  void set_function_code(::int32_t value);

  private:
  ::int32_t _internal_function_code() const;
  void _internal_set_function_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DIConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 3, 49, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > triggersignals_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > successsignals_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > failuresignals_;
    ::google::protobuf::internal::ArenaStringPtr function_name_;
    ::int32_t function_code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class DIConfigList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DIConfigList) */ {
 public:
  inline DIConfigList() : DIConfigList(nullptr) {}
  ~DIConfigList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DIConfigList(::google::protobuf::internal::ConstantInitialized);

  DIConfigList(const DIConfigList& from);
  DIConfigList(DIConfigList&& from) noexcept
    : DIConfigList() {
    *this = ::std::move(from);
  }

  inline DIConfigList& operator=(const DIConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DIConfigList& operator=(DIConfigList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DIConfigList& default_instance() {
    return *internal_default_instance();
  }
  static inline const DIConfigList* internal_default_instance() {
    return reinterpret_cast<const DIConfigList*>(
               &_DIConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DIConfigList& a, DIConfigList& b) {
    a.Swap(&b);
  }
  inline void Swap(DIConfigList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DIConfigList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DIConfigList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DIConfigList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DIConfigList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DIConfigList& from) {
    DIConfigList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DIConfigList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.DIConfigList";
  }
  protected:
  explicit DIConfigList(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiConfigsFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.DIConfig di_configs = 1;
  int di_configs_size() const;
  private:
  int _internal_di_configs_size() const;

  public:
  void clear_di_configs() ;
  ::Nrmk::IndyFramework::DIConfig* mutable_di_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DIConfig >*
      mutable_di_configs();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DIConfig>& _internal_di_configs() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DIConfig>* _internal_mutable_di_configs();
  public:
  const ::Nrmk::IndyFramework::DIConfig& di_configs(int index) const;
  ::Nrmk::IndyFramework::DIConfig* add_di_configs();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DIConfig >&
      di_configs() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DIConfigList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DIConfig > di_configs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class DOConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DOConfig) */ {
 public:
  inline DOConfig() : DOConfig(nullptr) {}
  ~DOConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DOConfig(::google::protobuf::internal::ConstantInitialized);

  DOConfig(const DOConfig& from);
  DOConfig(DOConfig&& from) noexcept
    : DOConfig() {
    *this = ::std::move(from);
  }

  inline DOConfig& operator=(const DOConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DOConfig& operator=(DOConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DOConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DOConfig* internal_default_instance() {
    return reinterpret_cast<const DOConfig*>(
               &_DOConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DOConfig& a, DOConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DOConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DOConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DOConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DOConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DOConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DOConfig& from) {
    DOConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DOConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.DOConfig";
  }
  protected:
  explicit DOConfig(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnSignalsFieldNumber = 3,
    kOffSignalsFieldNumber = 4,
    kStateNameFieldNumber = 2,
    kStateCodeFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.DigitalSignal onSignals = 3;
  int onsignals_size() const;
  private:
  int _internal_onsignals_size() const;

  public:
  void clear_onsignals() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_onsignals(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_onsignals();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_onsignals() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_onsignals();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& onsignals(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_onsignals();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      onsignals() const;
  // repeated .Nrmk.IndyFramework.DigitalSignal offSignals = 4;
  int offsignals_size() const;
  private:
  int _internal_offsignals_size() const;

  public:
  void clear_offsignals() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_offsignals(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_offsignals();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_offsignals() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_offsignals();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& offsignals(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_offsignals();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      offsignals() const;
  // string state_name = 2;
  void clear_state_name() ;
  const std::string& state_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state_name(Arg_&& arg, Args_... args);
  std::string* mutable_state_name();
  PROTOBUF_NODISCARD std::string* release_state_name();
  void set_allocated_state_name(std::string* ptr);

  private:
  const std::string& _internal_state_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_name(
      const std::string& value);
  std::string* _internal_mutable_state_name();

  public:
  // int32 state_code = 1;
  void clear_state_code() ;
  ::int32_t state_code() const;
  void set_state_code(::int32_t value);

  private:
  ::int32_t _internal_state_code() const;
  void _internal_set_state_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DOConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 2, 46, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > onsignals_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > offsignals_;
    ::google::protobuf::internal::ArenaStringPtr state_name_;
    ::int32_t state_code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class DOConfigList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DOConfigList) */ {
 public:
  inline DOConfigList() : DOConfigList(nullptr) {}
  ~DOConfigList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DOConfigList(::google::protobuf::internal::ConstantInitialized);

  DOConfigList(const DOConfigList& from);
  DOConfigList(DOConfigList&& from) noexcept
    : DOConfigList() {
    *this = ::std::move(from);
  }

  inline DOConfigList& operator=(const DOConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DOConfigList& operator=(DOConfigList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DOConfigList& default_instance() {
    return *internal_default_instance();
  }
  static inline const DOConfigList* internal_default_instance() {
    return reinterpret_cast<const DOConfigList*>(
               &_DOConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DOConfigList& a, DOConfigList& b) {
    a.Swap(&b);
  }
  inline void Swap(DOConfigList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DOConfigList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DOConfigList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DOConfigList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DOConfigList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DOConfigList& from) {
    DOConfigList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DOConfigList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.DOConfigList";
  }
  protected:
  explicit DOConfigList(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoConfigsFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.DOConfig do_configs = 1;
  int do_configs_size() const;
  private:
  int _internal_do_configs_size() const;

  public:
  void clear_do_configs() ;
  ::Nrmk::IndyFramework::DOConfig* mutable_do_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DOConfig >*
      mutable_do_configs();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DOConfig>& _internal_do_configs() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DOConfig>* _internal_mutable_do_configs();
  public:
  const ::Nrmk::IndyFramework::DOConfig& do_configs(int index) const;
  ::Nrmk::IndyFramework::DOConfig* add_do_configs();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DOConfig >&
      do_configs() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DOConfigList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DOConfig > do_configs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class GetReducedRatioRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.GetReducedRatioRes) */ {
 public:
  inline GetReducedRatioRes() : GetReducedRatioRes(nullptr) {}
  ~GetReducedRatioRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetReducedRatioRes(::google::protobuf::internal::ConstantInitialized);

  GetReducedRatioRes(const GetReducedRatioRes& from);
  GetReducedRatioRes(GetReducedRatioRes&& from) noexcept
    : GetReducedRatioRes() {
    *this = ::std::move(from);
  }

  inline GetReducedRatioRes& operator=(const GetReducedRatioRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReducedRatioRes& operator=(GetReducedRatioRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReducedRatioRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReducedRatioRes* internal_default_instance() {
    return reinterpret_cast<const GetReducedRatioRes*>(
               &_GetReducedRatioRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetReducedRatioRes& a, GetReducedRatioRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReducedRatioRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReducedRatioRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReducedRatioRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetReducedRatioRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetReducedRatioRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetReducedRatioRes& from) {
    GetReducedRatioRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReducedRatioRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.GetReducedRatioRes";
  }
  protected:
  explicit GetReducedRatioRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 100,
    kRatioFieldNumber = 1,
  };
  // string msg = 100;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // float ratio = 1;
  void clear_ratio() ;
  float ratio() const;
  void set_ratio(float value);

  private:
  float _internal_ratio() const;
  void _internal_set_ratio(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.GetReducedRatioRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 49, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr msg_;
    float ratio_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class GetReducedSpeedRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.GetReducedSpeedRes) */ {
 public:
  inline GetReducedSpeedRes() : GetReducedSpeedRes(nullptr) {}
  ~GetReducedSpeedRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetReducedSpeedRes(::google::protobuf::internal::ConstantInitialized);

  GetReducedSpeedRes(const GetReducedSpeedRes& from);
  GetReducedSpeedRes(GetReducedSpeedRes&& from) noexcept
    : GetReducedSpeedRes() {
    *this = ::std::move(from);
  }

  inline GetReducedSpeedRes& operator=(const GetReducedSpeedRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReducedSpeedRes& operator=(GetReducedSpeedRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReducedSpeedRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReducedSpeedRes* internal_default_instance() {
    return reinterpret_cast<const GetReducedSpeedRes*>(
               &_GetReducedSpeedRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetReducedSpeedRes& a, GetReducedSpeedRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReducedSpeedRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReducedSpeedRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReducedSpeedRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetReducedSpeedRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetReducedSpeedRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetReducedSpeedRes& from) {
    GetReducedSpeedRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReducedSpeedRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.GetReducedSpeedRes";
  }
  protected:
  explicit GetReducedSpeedRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 100,
    kSpeedFieldNumber = 1,
  };
  // string msg = 100;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // float speed = 1;
  void clear_speed() ;
  float speed() const;
  void set_speed(float value);

  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.GetReducedSpeedRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 49, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr msg_;
    float speed_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class SetReducedSpeedReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SetReducedSpeedReq) */ {
 public:
  inline SetReducedSpeedReq() : SetReducedSpeedReq(nullptr) {}
  ~SetReducedSpeedReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetReducedSpeedReq(::google::protobuf::internal::ConstantInitialized);

  SetReducedSpeedReq(const SetReducedSpeedReq& from);
  SetReducedSpeedReq(SetReducedSpeedReq&& from) noexcept
    : SetReducedSpeedReq() {
    *this = ::std::move(from);
  }

  inline SetReducedSpeedReq& operator=(const SetReducedSpeedReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetReducedSpeedReq& operator=(SetReducedSpeedReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetReducedSpeedReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetReducedSpeedReq* internal_default_instance() {
    return reinterpret_cast<const SetReducedSpeedReq*>(
               &_SetReducedSpeedReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SetReducedSpeedReq& a, SetReducedSpeedReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetReducedSpeedReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetReducedSpeedReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetReducedSpeedReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetReducedSpeedReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetReducedSpeedReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetReducedSpeedReq& from) {
    SetReducedSpeedReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetReducedSpeedReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.SetReducedSpeedReq";
  }
  protected:
  explicit SetReducedSpeedReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 1,
  };
  // float speed = 1;
  void clear_speed() ;
  float speed() const;
  void set_speed(float value);

  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SetReducedSpeedReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float speed_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class FTSensorDevice final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FTSensorDevice) */ {
 public:
  inline FTSensorDevice() : FTSensorDevice(nullptr) {}
  ~FTSensorDevice() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FTSensorDevice(::google::protobuf::internal::ConstantInitialized);

  FTSensorDevice(const FTSensorDevice& from);
  FTSensorDevice(FTSensorDevice&& from) noexcept
    : FTSensorDevice() {
    *this = ::std::move(from);
  }

  inline FTSensorDevice& operator=(const FTSensorDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline FTSensorDevice& operator=(FTSensorDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FTSensorDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const FTSensorDevice* internal_default_instance() {
    return reinterpret_cast<const FTSensorDevice*>(
               &_FTSensorDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(FTSensorDevice& a, FTSensorDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(FTSensorDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FTSensorDevice* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FTSensorDevice* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FTSensorDevice>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FTSensorDevice& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FTSensorDevice& from) {
    FTSensorDevice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FTSensorDevice* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.FTSensorDevice";
  }
  protected:
  explicit FTSensorDevice(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using FTSensorDeviceType = FTSensorDevice_FTSensorDeviceType;
  static constexpr FTSensorDeviceType NONE = FTSensorDevice_FTSensorDeviceType_NONE;
  static constexpr FTSensorDeviceType AFT200_D80 = FTSensorDevice_FTSensorDeviceType_AFT200_D80;
  static constexpr FTSensorDeviceType AFT200_D80_EC = FTSensorDevice_FTSensorDeviceType_AFT200_D80_EC;
  static constexpr FTSensorDeviceType RFT80_6A01 = FTSensorDevice_FTSensorDeviceType_RFT80_6A01;
  static constexpr FTSensorDeviceType RFT60_HA01 = FTSensorDevice_FTSensorDeviceType_RFT60_HA01;
  static constexpr FTSensorDeviceType HEX_E_H_QC = FTSensorDevice_FTSensorDeviceType_HEX_E_H_QC;
  static inline bool FTSensorDeviceType_IsValid(int value) {
    return FTSensorDevice_FTSensorDeviceType_IsValid(value);
  }
  static constexpr FTSensorDeviceType FTSensorDeviceType_MIN = FTSensorDevice_FTSensorDeviceType_FTSensorDeviceType_MIN;
  static constexpr FTSensorDeviceType FTSensorDeviceType_MAX = FTSensorDevice_FTSensorDeviceType_FTSensorDeviceType_MAX;
  static constexpr int FTSensorDeviceType_ARRAYSIZE = FTSensorDevice_FTSensorDeviceType_FTSensorDeviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* FTSensorDeviceType_descriptor() {
    return FTSensorDevice_FTSensorDeviceType_descriptor();
  }
  template <typename T>
  static inline const std::string& FTSensorDeviceType_Name(T value) {
    return FTSensorDevice_FTSensorDeviceType_Name(value);
  }
  static inline bool FTSensorDeviceType_Parse(absl::string_view name, FTSensorDeviceType* value) {
    return FTSensorDevice_FTSensorDeviceType_Parse(name, value);
  }

  using FTSensorDeviceComType = FTSensorDevice_FTSensorDeviceComType;
  static constexpr FTSensorDeviceComType ENDTOOLCAN = FTSensorDevice_FTSensorDeviceComType_ENDTOOLCAN;
  static constexpr FTSensorDeviceComType CBCAN = FTSensorDevice_FTSensorDeviceComType_CBCAN;
  static constexpr FTSensorDeviceComType MODBUSCLIENT = FTSensorDevice_FTSensorDeviceComType_MODBUSCLIENT;
  static constexpr FTSensorDeviceComType ETHERCAT = FTSensorDevice_FTSensorDeviceComType_ETHERCAT;
  static inline bool FTSensorDeviceComType_IsValid(int value) {
    return FTSensorDevice_FTSensorDeviceComType_IsValid(value);
  }
  static constexpr FTSensorDeviceComType FTSensorDeviceComType_MIN = FTSensorDevice_FTSensorDeviceComType_FTSensorDeviceComType_MIN;
  static constexpr FTSensorDeviceComType FTSensorDeviceComType_MAX = FTSensorDevice_FTSensorDeviceComType_FTSensorDeviceComType_MAX;
  static constexpr int FTSensorDeviceComType_ARRAYSIZE = FTSensorDevice_FTSensorDeviceComType_FTSensorDeviceComType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* FTSensorDeviceComType_descriptor() {
    return FTSensorDevice_FTSensorDeviceComType_descriptor();
  }
  template <typename T>
  static inline const std::string& FTSensorDeviceComType_Name(T value) {
    return FTSensorDevice_FTSensorDeviceComType_Name(value);
  }
  static inline bool FTSensorDeviceComType_Parse(absl::string_view name, FTSensorDeviceComType* value) {
    return FTSensorDevice_FTSensorDeviceComType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 3,
    kDevTypeFieldNumber = 1,
    kComTypeFieldNumber = 2,
    kFtFrameTranslationOffsetXFieldNumber = 11,
    kFtFrameTranslationOffsetYFieldNumber = 12,
    kFtFrameTranslationOffsetZFieldNumber = 13,
    kFtFrameRotationOffsetRFieldNumber = 14,
    kFtFrameRotationOffsetPFieldNumber = 15,
    kFtFrameRotationOffsetYFieldNumber = 16,
  };
  // string ip_address = 3;
  void clear_ip_address() ;
  const std::string& ip_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip_address(Arg_&& arg, Args_... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ptr);

  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(
      const std::string& value);
  std::string* _internal_mutable_ip_address();

  public:
  // .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceType dev_type = 1;
  void clear_dev_type() ;
  ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType dev_type() const;
  void set_dev_type(::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType value);

  private:
  ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType _internal_dev_type() const;
  void _internal_set_dev_type(::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType value);

  public:
  // .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceComType com_type = 2;
  void clear_com_type() ;
  ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType com_type() const;
  void set_com_type(::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType value);

  private:
  ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType _internal_com_type() const;
  void _internal_set_com_type(::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType value);

  public:
  // float ft_frame_translation_offset_x = 11;
  void clear_ft_frame_translation_offset_x() ;
  float ft_frame_translation_offset_x() const;
  void set_ft_frame_translation_offset_x(float value);

  private:
  float _internal_ft_frame_translation_offset_x() const;
  void _internal_set_ft_frame_translation_offset_x(float value);

  public:
  // float ft_frame_translation_offset_y = 12;
  void clear_ft_frame_translation_offset_y() ;
  float ft_frame_translation_offset_y() const;
  void set_ft_frame_translation_offset_y(float value);

  private:
  float _internal_ft_frame_translation_offset_y() const;
  void _internal_set_ft_frame_translation_offset_y(float value);

  public:
  // float ft_frame_translation_offset_z = 13;
  void clear_ft_frame_translation_offset_z() ;
  float ft_frame_translation_offset_z() const;
  void set_ft_frame_translation_offset_z(float value);

  private:
  float _internal_ft_frame_translation_offset_z() const;
  void _internal_set_ft_frame_translation_offset_z(float value);

  public:
  // float ft_frame_rotation_offset_r = 14;
  void clear_ft_frame_rotation_offset_r() ;
  float ft_frame_rotation_offset_r() const;
  void set_ft_frame_rotation_offset_r(float value);

  private:
  float _internal_ft_frame_rotation_offset_r() const;
  void _internal_set_ft_frame_rotation_offset_r(float value);

  public:
  // float ft_frame_rotation_offset_p = 15;
  void clear_ft_frame_rotation_offset_p() ;
  float ft_frame_rotation_offset_p() const;
  void set_ft_frame_rotation_offset_p(float value);

  private:
  float _internal_ft_frame_rotation_offset_p() const;
  void _internal_set_ft_frame_rotation_offset_p(float value);

  public:
  // float ft_frame_rotation_offset_y = 16;
  void clear_ft_frame_rotation_offset_y() ;
  float ft_frame_rotation_offset_y() const;
  void set_ft_frame_rotation_offset_y(float value);

  private:
  float _internal_ft_frame_rotation_offset_y() const;
  void _internal_set_ft_frame_rotation_offset_y(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FTSensorDevice)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 0, 60, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr ip_address_;
    int dev_type_;
    int com_type_;
    float ft_frame_translation_offset_x_;
    float ft_frame_translation_offset_y_;
    float ft_frame_translation_offset_z_;
    float ft_frame_rotation_offset_r_;
    float ft_frame_rotation_offset_p_;
    float ft_frame_rotation_offset_y_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class FTSensorDeviceRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FTSensorDeviceRes) */ {
 public:
  inline FTSensorDeviceRes() : FTSensorDeviceRes(nullptr) {}
  ~FTSensorDeviceRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FTSensorDeviceRes(::google::protobuf::internal::ConstantInitialized);

  FTSensorDeviceRes(const FTSensorDeviceRes& from);
  FTSensorDeviceRes(FTSensorDeviceRes&& from) noexcept
    : FTSensorDeviceRes() {
    *this = ::std::move(from);
  }

  inline FTSensorDeviceRes& operator=(const FTSensorDeviceRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline FTSensorDeviceRes& operator=(FTSensorDeviceRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FTSensorDeviceRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const FTSensorDeviceRes* internal_default_instance() {
    return reinterpret_cast<const FTSensorDeviceRes*>(
               &_FTSensorDeviceRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(FTSensorDeviceRes& a, FTSensorDeviceRes& b) {
    a.Swap(&b);
  }
  inline void Swap(FTSensorDeviceRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FTSensorDeviceRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FTSensorDeviceRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FTSensorDeviceRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FTSensorDeviceRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FTSensorDeviceRes& from) {
    FTSensorDeviceRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FTSensorDeviceRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.FTSensorDeviceRes";
  }
  protected:
  explicit FTSensorDeviceRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 100,
  };
  // string msg = 100;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FTSensorDeviceRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 48, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr msg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TeleOpParams final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TeleOpParams) */ {
 public:
  inline TeleOpParams() : TeleOpParams(nullptr) {}
  ~TeleOpParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TeleOpParams(::google::protobuf::internal::ConstantInitialized);

  TeleOpParams(const TeleOpParams& from);
  TeleOpParams(TeleOpParams&& from) noexcept
    : TeleOpParams() {
    *this = ::std::move(from);
  }

  inline TeleOpParams& operator=(const TeleOpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleOpParams& operator=(TeleOpParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeleOpParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeleOpParams* internal_default_instance() {
    return reinterpret_cast<const TeleOpParams*>(
               &_TeleOpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(TeleOpParams& a, TeleOpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TeleOpParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeleOpParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeleOpParams* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeleOpParams>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TeleOpParams& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TeleOpParams& from) {
    TeleOpParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleOpParams* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TeleOpParams";
  }
  protected:
  explicit TeleOpParams(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSmoothFactorFieldNumber = 1,
    kCutoffFreqFieldNumber = 2,
    kErrorGainFieldNumber = 3,
  };
  // float smooth_factor = 1;
  void clear_smooth_factor() ;
  float smooth_factor() const;
  void set_smooth_factor(float value);

  private:
  float _internal_smooth_factor() const;
  void _internal_set_smooth_factor(float value);

  public:
  // float cutoff_freq = 2;
  void clear_cutoff_freq() ;
  float cutoff_freq() const;
  void set_cutoff_freq(float value);

  private:
  float _internal_cutoff_freq() const;
  void _internal_set_cutoff_freq(float value);

  public:
  // float error_gain = 3;
  void clear_error_gain() ;
  float error_gain() const;
  void set_error_gain(float value);

  private:
  float _internal_error_gain() const;
  void _internal_set_error_gain(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TeleOpParams)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float smooth_factor_;
    float cutoff_freq_;
    float error_gain_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class KinematicsParams_MDH final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.KinematicsParams.MDH) */ {
 public:
  inline KinematicsParams_MDH() : KinematicsParams_MDH(nullptr) {}
  ~KinematicsParams_MDH() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KinematicsParams_MDH(::google::protobuf::internal::ConstantInitialized);

  KinematicsParams_MDH(const KinematicsParams_MDH& from);
  KinematicsParams_MDH(KinematicsParams_MDH&& from) noexcept
    : KinematicsParams_MDH() {
    *this = ::std::move(from);
  }

  inline KinematicsParams_MDH& operator=(const KinematicsParams_MDH& from) {
    CopyFrom(from);
    return *this;
  }
  inline KinematicsParams_MDH& operator=(KinematicsParams_MDH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KinematicsParams_MDH& default_instance() {
    return *internal_default_instance();
  }
  static inline const KinematicsParams_MDH* internal_default_instance() {
    return reinterpret_cast<const KinematicsParams_MDH*>(
               &_KinematicsParams_MDH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(KinematicsParams_MDH& a, KinematicsParams_MDH& b) {
    a.Swap(&b);
  }
  inline void Swap(KinematicsParams_MDH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KinematicsParams_MDH* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KinematicsParams_MDH* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KinematicsParams_MDH>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KinematicsParams_MDH& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const KinematicsParams_MDH& from) {
    KinematicsParams_MDH::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KinematicsParams_MDH* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.KinematicsParams.MDH";
  }
  protected:
  explicit KinematicsParams_MDH(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kAlphaFieldNumber = 2,
    kD0FieldNumber = 3,
    kTheta0FieldNumber = 4,
    kTypeFieldNumber = 5,
    kIndexFieldNumber = 10,
    kParentFieldNumber = 11,
  };
  // float a = 1;
  void clear_a() ;
  float a() const;
  void set_a(float value);

  private:
  float _internal_a() const;
  void _internal_set_a(float value);

  public:
  // float alpha = 2;
  void clear_alpha() ;
  float alpha() const;
  void set_alpha(float value);

  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);

  public:
  // float d0 = 3;
  void clear_d0() ;
  float d0() const;
  void set_d0(float value);

  private:
  float _internal_d0() const;
  void _internal_set_d0(float value);

  public:
  // float theta0 = 4;
  void clear_theta0() ;
  float theta0() const;
  void set_theta0(float value);

  private:
  float _internal_theta0() const;
  void _internal_set_theta0(float value);

  public:
  // .Nrmk.IndyFramework.KinematicsParams.JointType type = 5;
  void clear_type() ;
  ::Nrmk::IndyFramework::KinematicsParams_JointType type() const;
  void set_type(::Nrmk::IndyFramework::KinematicsParams_JointType value);

  private:
  ::Nrmk::IndyFramework::KinematicsParams_JointType _internal_type() const;
  void _internal_set_type(::Nrmk::IndyFramework::KinematicsParams_JointType value);

  public:
  // int32 index = 10;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // int32 parent = 11;
  void clear_parent() ;
  ::int32_t parent() const;
  void set_parent(::int32_t value);

  private:
  ::int32_t _internal_parent() const;
  void _internal_set_parent(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.KinematicsParams.MDH)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float a_;
    float alpha_;
    float d0_;
    float theta0_;
    int type_;
    ::int32_t index_;
    ::int32_t parent_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class KinematicsParams final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.KinematicsParams) */ {
 public:
  inline KinematicsParams() : KinematicsParams(nullptr) {}
  ~KinematicsParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KinematicsParams(::google::protobuf::internal::ConstantInitialized);

  KinematicsParams(const KinematicsParams& from);
  KinematicsParams(KinematicsParams&& from) noexcept
    : KinematicsParams() {
    *this = ::std::move(from);
  }

  inline KinematicsParams& operator=(const KinematicsParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline KinematicsParams& operator=(KinematicsParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KinematicsParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const KinematicsParams* internal_default_instance() {
    return reinterpret_cast<const KinematicsParams*>(
               &_KinematicsParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(KinematicsParams& a, KinematicsParams& b) {
    a.Swap(&b);
  }
  inline void Swap(KinematicsParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KinematicsParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KinematicsParams* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KinematicsParams>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KinematicsParams& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const KinematicsParams& from) {
    KinematicsParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KinematicsParams* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.KinematicsParams";
  }
  protected:
  explicit KinematicsParams(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef KinematicsParams_MDH MDH;

  using JointType = KinematicsParams_JointType;
  static constexpr JointType REVOLUTE = KinematicsParams_JointType_REVOLUTE;
  static constexpr JointType PRISMATIC = KinematicsParams_JointType_PRISMATIC;
  static constexpr JointType FIXED = KinematicsParams_JointType_FIXED;
  static inline bool JointType_IsValid(int value) {
    return KinematicsParams_JointType_IsValid(value);
  }
  static constexpr JointType JointType_MIN = KinematicsParams_JointType_JointType_MIN;
  static constexpr JointType JointType_MAX = KinematicsParams_JointType_JointType_MAX;
  static constexpr int JointType_ARRAYSIZE = KinematicsParams_JointType_JointType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* JointType_descriptor() {
    return KinematicsParams_JointType_descriptor();
  }
  template <typename T>
  static inline const std::string& JointType_Name(T value) {
    return KinematicsParams_JointType_Name(value);
  }
  static inline bool JointType_Parse(absl::string_view name, JointType* value) {
    return KinematicsParams_JointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMdhFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.KinematicsParams.MDH mdh = 1;
  int mdh_size() const;
  private:
  int _internal_mdh_size() const;

  public:
  void clear_mdh() ;
  ::Nrmk::IndyFramework::KinematicsParams_MDH* mutable_mdh(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::KinematicsParams_MDH >*
      mutable_mdh();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::KinematicsParams_MDH>& _internal_mdh() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::KinematicsParams_MDH>* _internal_mutable_mdh();
  public:
  const ::Nrmk::IndyFramework::KinematicsParams_MDH& mdh(int index) const;
  ::Nrmk::IndyFramework::KinematicsParams_MDH* add_mdh();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::KinematicsParams_MDH >&
      mdh() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.KinematicsParams)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::KinematicsParams_MDH > mdh_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fmsgs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Frame

// repeated float fpos = 1;
inline int Frame::_internal_fpos_size() const {
  return _internal_fpos().size();
}
inline int Frame::fpos_size() const {
  return _internal_fpos_size();
}
inline void Frame::clear_fpos() {
  _internal_mutable_fpos()->Clear();
}
inline float Frame::fpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Frame.fpos)
  return _internal_fpos().Get(index);
}
inline void Frame::set_fpos(int index, float value) {
  _internal_mutable_fpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Frame.fpos)
}
inline void Frame::add_fpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_fpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.Frame.fpos)
}
inline const ::google::protobuf::RepeatedField<float>& Frame::fpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.Frame.fpos)
  return _internal_fpos();
}
inline ::google::protobuf::RepeatedField<float>* Frame::mutable_fpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.Frame.fpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_fpos();
}

inline const ::google::protobuf::RepeatedField<float>& Frame::_internal_fpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fpos_;
}
inline ::google::protobuf::RepeatedField<float>* Frame::_internal_mutable_fpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.fpos_;
}

// -------------------------------------------------------------------

// JointPos

// repeated float jpos = 1;
inline int JointPos::_internal_jpos_size() const {
  return _internal_jpos().size();
}
inline int JointPos::jpos_size() const {
  return _internal_jpos_size();
}
inline void JointPos::clear_jpos() {
  _internal_mutable_jpos()->Clear();
}
inline float JointPos::jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.JointPos.jpos)
  return _internal_jpos().Get(index);
}
inline void JointPos::set_jpos(int index, float value) {
  _internal_mutable_jpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.JointPos.jpos)
}
inline void JointPos::add_jpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_jpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.JointPos.jpos)
}
inline const ::google::protobuf::RepeatedField<float>& JointPos::jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.JointPos.jpos)
  return _internal_jpos();
}
inline ::google::protobuf::RepeatedField<float>* JointPos::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.JointPos.jpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_jpos();
}

inline const ::google::protobuf::RepeatedField<float>& JointPos::_internal_jpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jpos_;
}
inline ::google::protobuf::RepeatedField<float>* JointPos::_internal_mutable_jpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.jpos_;
}

// -------------------------------------------------------------------

// PlanarFrame

// repeated float fpos0 = 1;
inline int PlanarFrame::_internal_fpos0_size() const {
  return _internal_fpos0().size();
}
inline int PlanarFrame::fpos0_size() const {
  return _internal_fpos0_size();
}
inline void PlanarFrame::clear_fpos0() {
  _internal_mutable_fpos0()->Clear();
}
inline float PlanarFrame::fpos0(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PlanarFrame.fpos0)
  return _internal_fpos0().Get(index);
}
inline void PlanarFrame::set_fpos0(int index, float value) {
  _internal_mutable_fpos0()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PlanarFrame.fpos0)
}
inline void PlanarFrame::add_fpos0(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_fpos0()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PlanarFrame.fpos0)
}
inline const ::google::protobuf::RepeatedField<float>& PlanarFrame::fpos0() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PlanarFrame.fpos0)
  return _internal_fpos0();
}
inline ::google::protobuf::RepeatedField<float>* PlanarFrame::mutable_fpos0() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PlanarFrame.fpos0)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_fpos0();
}

inline const ::google::protobuf::RepeatedField<float>& PlanarFrame::_internal_fpos0() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fpos0_;
}
inline ::google::protobuf::RepeatedField<float>* PlanarFrame::_internal_mutable_fpos0() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.fpos0_;
}

// repeated float fpos1 = 2;
inline int PlanarFrame::_internal_fpos1_size() const {
  return _internal_fpos1().size();
}
inline int PlanarFrame::fpos1_size() const {
  return _internal_fpos1_size();
}
inline void PlanarFrame::clear_fpos1() {
  _internal_mutable_fpos1()->Clear();
}
inline float PlanarFrame::fpos1(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PlanarFrame.fpos1)
  return _internal_fpos1().Get(index);
}
inline void PlanarFrame::set_fpos1(int index, float value) {
  _internal_mutable_fpos1()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PlanarFrame.fpos1)
}
inline void PlanarFrame::add_fpos1(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_fpos1()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PlanarFrame.fpos1)
}
inline const ::google::protobuf::RepeatedField<float>& PlanarFrame::fpos1() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PlanarFrame.fpos1)
  return _internal_fpos1();
}
inline ::google::protobuf::RepeatedField<float>* PlanarFrame::mutable_fpos1() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PlanarFrame.fpos1)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_fpos1();
}

inline const ::google::protobuf::RepeatedField<float>& PlanarFrame::_internal_fpos1() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fpos1_;
}
inline ::google::protobuf::RepeatedField<float>* PlanarFrame::_internal_mutable_fpos1() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.fpos1_;
}

// repeated float fpos2 = 3;
inline int PlanarFrame::_internal_fpos2_size() const {
  return _internal_fpos2().size();
}
inline int PlanarFrame::fpos2_size() const {
  return _internal_fpos2_size();
}
inline void PlanarFrame::clear_fpos2() {
  _internal_mutable_fpos2()->Clear();
}
inline float PlanarFrame::fpos2(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PlanarFrame.fpos2)
  return _internal_fpos2().Get(index);
}
inline void PlanarFrame::set_fpos2(int index, float value) {
  _internal_mutable_fpos2()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PlanarFrame.fpos2)
}
inline void PlanarFrame::add_fpos2(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_fpos2()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PlanarFrame.fpos2)
}
inline const ::google::protobuf::RepeatedField<float>& PlanarFrame::fpos2() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PlanarFrame.fpos2)
  return _internal_fpos2();
}
inline ::google::protobuf::RepeatedField<float>* PlanarFrame::mutable_fpos2() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PlanarFrame.fpos2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_fpos2();
}

inline const ::google::protobuf::RepeatedField<float>& PlanarFrame::_internal_fpos2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fpos2_;
}
inline ::google::protobuf::RepeatedField<float>* PlanarFrame::_internal_mutable_fpos2() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.fpos2_;
}

// -------------------------------------------------------------------

// FrameResult

// repeated float fpos = 1;
inline int FrameResult::_internal_fpos_size() const {
  return _internal_fpos().size();
}
inline int FrameResult::fpos_size() const {
  return _internal_fpos_size();
}
inline void FrameResult::clear_fpos() {
  _internal_mutable_fpos()->Clear();
}
inline float FrameResult::fpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FrameResult.fpos)
  return _internal_fpos().Get(index);
}
inline void FrameResult::set_fpos(int index, float value) {
  _internal_mutable_fpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FrameResult.fpos)
}
inline void FrameResult::add_fpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_fpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.FrameResult.fpos)
}
inline const ::google::protobuf::RepeatedField<float>& FrameResult::fpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.FrameResult.fpos)
  return _internal_fpos();
}
inline ::google::protobuf::RepeatedField<float>* FrameResult::mutable_fpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.FrameResult.fpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_fpos();
}

inline const ::google::protobuf::RepeatedField<float>& FrameResult::_internal_fpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fpos_;
}
inline ::google::protobuf::RepeatedField<float>* FrameResult::_internal_mutable_fpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.fpos_;
}

// .Nrmk.IndyFramework.Response response = 2;
inline bool FrameResult::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& FrameResult::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& FrameResult::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FrameResult.response)
  return _internal_response();
}
inline void FrameResult::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.FrameResult.response)
}
inline ::Nrmk::IndyFramework::Response* FrameResult::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* FrameResult::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.FrameResult.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* FrameResult::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* FrameResult::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.FrameResult.response)
  return _msg;
}
inline void FrameResult::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.FrameResult.response)
}

// -------------------------------------------------------------------

// Ratio

// uint32 ratio = 1;
inline void Ratio::clear_ratio() {
  _impl_.ratio_ = 0u;
}
inline ::uint32_t Ratio::ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Ratio.ratio)
  return _internal_ratio();
}
inline void Ratio::set_ratio(::uint32_t value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Ratio.ratio)
}
inline ::uint32_t Ratio::_internal_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ratio_;
}
inline void Ratio::_internal_set_ratio(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ratio_ = value;
}

// -------------------------------------------------------------------

// AutoServoOffConfig

// bool enable = 1;
inline void AutoServoOffConfig::clear_enable() {
  _impl_.enable_ = false;
}
inline bool AutoServoOffConfig::enable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.AutoServoOffConfig.enable)
  return _internal_enable();
}
inline void AutoServoOffConfig::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.AutoServoOffConfig.enable)
}
inline bool AutoServoOffConfig::_internal_enable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enable_;
}
inline void AutoServoOffConfig::_internal_set_enable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.enable_ = value;
}

// float time = 2;
inline void AutoServoOffConfig::clear_time() {
  _impl_.time_ = 0;
}
inline float AutoServoOffConfig::time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.AutoServoOffConfig.time)
  return _internal_time();
}
inline void AutoServoOffConfig::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.AutoServoOffConfig.time)
}
inline float AutoServoOffConfig::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void AutoServoOffConfig::_internal_set_time(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_ = value;
}

// -------------------------------------------------------------------

// CollTuningConfig

// .Nrmk.IndyFramework.CollTuningConfig.TuningPrecision precision = 1;
inline void CollTuningConfig::clear_precision() {
  _impl_.precision_ = 0;
}
inline ::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision CollTuningConfig::precision() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollTuningConfig.precision)
  return _internal_precision();
}
inline void CollTuningConfig::set_precision(::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollTuningConfig.precision)
}
inline ::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision CollTuningConfig::_internal_precision() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision>(_impl_.precision_);
}
inline void CollTuningConfig::_internal_set_precision(::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.precision_ = value;
}

// .Nrmk.IndyFramework.CollTuningConfig.TuningSpace tuning_space = 2;
inline void CollTuningConfig::clear_tuning_space() {
  _impl_.tuning_space_ = 0;
}
inline ::Nrmk::IndyFramework::CollTuningConfig_TuningSpace CollTuningConfig::tuning_space() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollTuningConfig.tuning_space)
  return _internal_tuning_space();
}
inline void CollTuningConfig::set_tuning_space(::Nrmk::IndyFramework::CollTuningConfig_TuningSpace value) {
  _internal_set_tuning_space(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollTuningConfig.tuning_space)
}
inline ::Nrmk::IndyFramework::CollTuningConfig_TuningSpace CollTuningConfig::_internal_tuning_space() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::CollTuningConfig_TuningSpace>(_impl_.tuning_space_);
}
inline void CollTuningConfig::_internal_set_tuning_space(::Nrmk::IndyFramework::CollTuningConfig_TuningSpace value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tuning_space_ = value;
}

// int32 vel_level_max = 3;
inline void CollTuningConfig::clear_vel_level_max() {
  _impl_.vel_level_max_ = 0;
}
inline ::int32_t CollTuningConfig::vel_level_max() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollTuningConfig.vel_level_max)
  return _internal_vel_level_max();
}
inline void CollTuningConfig::set_vel_level_max(::int32_t value) {
  _internal_set_vel_level_max(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollTuningConfig.vel_level_max)
}
inline ::int32_t CollTuningConfig::_internal_vel_level_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vel_level_max_;
}
inline void CollTuningConfig::_internal_set_vel_level_max(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vel_level_max_ = value;
}

// -------------------------------------------------------------------

// JointGainSet

// repeated float kp = 1;
inline int JointGainSet::_internal_kp_size() const {
  return _internal_kp().size();
}
inline int JointGainSet::kp_size() const {
  return _internal_kp_size();
}
inline void JointGainSet::clear_kp() {
  _internal_mutable_kp()->Clear();
}
inline float JointGainSet::kp(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.JointGainSet.kp)
  return _internal_kp().Get(index);
}
inline void JointGainSet::set_kp(int index, float value) {
  _internal_mutable_kp()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.JointGainSet.kp)
}
inline void JointGainSet::add_kp(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kp()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.JointGainSet.kp)
}
inline const ::google::protobuf::RepeatedField<float>& JointGainSet::kp() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.JointGainSet.kp)
  return _internal_kp();
}
inline ::google::protobuf::RepeatedField<float>* JointGainSet::mutable_kp() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.JointGainSet.kp)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kp();
}

inline const ::google::protobuf::RepeatedField<float>& JointGainSet::_internal_kp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kp_;
}
inline ::google::protobuf::RepeatedField<float>* JointGainSet::_internal_mutable_kp() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kp_;
}

// repeated float kv = 2;
inline int JointGainSet::_internal_kv_size() const {
  return _internal_kv().size();
}
inline int JointGainSet::kv_size() const {
  return _internal_kv_size();
}
inline void JointGainSet::clear_kv() {
  _internal_mutable_kv()->Clear();
}
inline float JointGainSet::kv(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.JointGainSet.kv)
  return _internal_kv().Get(index);
}
inline void JointGainSet::set_kv(int index, float value) {
  _internal_mutable_kv()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.JointGainSet.kv)
}
inline void JointGainSet::add_kv(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kv()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.JointGainSet.kv)
}
inline const ::google::protobuf::RepeatedField<float>& JointGainSet::kv() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.JointGainSet.kv)
  return _internal_kv();
}
inline ::google::protobuf::RepeatedField<float>* JointGainSet::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.JointGainSet.kv)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kv();
}

inline const ::google::protobuf::RepeatedField<float>& JointGainSet::_internal_kv() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kv_;
}
inline ::google::protobuf::RepeatedField<float>* JointGainSet::_internal_mutable_kv() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kv_;
}

// repeated float kl2 = 3;
inline int JointGainSet::_internal_kl2_size() const {
  return _internal_kl2().size();
}
inline int JointGainSet::kl2_size() const {
  return _internal_kl2_size();
}
inline void JointGainSet::clear_kl2() {
  _internal_mutable_kl2()->Clear();
}
inline float JointGainSet::kl2(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.JointGainSet.kl2)
  return _internal_kl2().Get(index);
}
inline void JointGainSet::set_kl2(int index, float value) {
  _internal_mutable_kl2()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.JointGainSet.kl2)
}
inline void JointGainSet::add_kl2(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kl2()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.JointGainSet.kl2)
}
inline const ::google::protobuf::RepeatedField<float>& JointGainSet::kl2() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.JointGainSet.kl2)
  return _internal_kl2();
}
inline ::google::protobuf::RepeatedField<float>* JointGainSet::mutable_kl2() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.JointGainSet.kl2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kl2();
}

inline const ::google::protobuf::RepeatedField<float>& JointGainSet::_internal_kl2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kl2_;
}
inline ::google::protobuf::RepeatedField<float>* JointGainSet::_internal_mutable_kl2() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kl2_;
}

// -------------------------------------------------------------------

// TaskGainSet

// repeated float kp = 1;
inline int TaskGainSet::_internal_kp_size() const {
  return _internal_kp().size();
}
inline int TaskGainSet::kp_size() const {
  return _internal_kp_size();
}
inline void TaskGainSet::clear_kp() {
  _internal_mutable_kp()->Clear();
}
inline float TaskGainSet::kp(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TaskGainSet.kp)
  return _internal_kp().Get(index);
}
inline void TaskGainSet::set_kp(int index, float value) {
  _internal_mutable_kp()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TaskGainSet.kp)
}
inline void TaskGainSet::add_kp(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kp()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TaskGainSet.kp)
}
inline const ::google::protobuf::RepeatedField<float>& TaskGainSet::kp() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TaskGainSet.kp)
  return _internal_kp();
}
inline ::google::protobuf::RepeatedField<float>* TaskGainSet::mutable_kp() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TaskGainSet.kp)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kp();
}

inline const ::google::protobuf::RepeatedField<float>& TaskGainSet::_internal_kp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kp_;
}
inline ::google::protobuf::RepeatedField<float>* TaskGainSet::_internal_mutable_kp() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kp_;
}

// repeated float kv = 2;
inline int TaskGainSet::_internal_kv_size() const {
  return _internal_kv().size();
}
inline int TaskGainSet::kv_size() const {
  return _internal_kv_size();
}
inline void TaskGainSet::clear_kv() {
  _internal_mutable_kv()->Clear();
}
inline float TaskGainSet::kv(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TaskGainSet.kv)
  return _internal_kv().Get(index);
}
inline void TaskGainSet::set_kv(int index, float value) {
  _internal_mutable_kv()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TaskGainSet.kv)
}
inline void TaskGainSet::add_kv(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kv()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TaskGainSet.kv)
}
inline const ::google::protobuf::RepeatedField<float>& TaskGainSet::kv() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TaskGainSet.kv)
  return _internal_kv();
}
inline ::google::protobuf::RepeatedField<float>* TaskGainSet::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TaskGainSet.kv)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kv();
}

inline const ::google::protobuf::RepeatedField<float>& TaskGainSet::_internal_kv() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kv_;
}
inline ::google::protobuf::RepeatedField<float>* TaskGainSet::_internal_mutable_kv() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kv_;
}

// repeated float kl2 = 3;
inline int TaskGainSet::_internal_kl2_size() const {
  return _internal_kl2().size();
}
inline int TaskGainSet::kl2_size() const {
  return _internal_kl2_size();
}
inline void TaskGainSet::clear_kl2() {
  _internal_mutable_kl2()->Clear();
}
inline float TaskGainSet::kl2(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TaskGainSet.kl2)
  return _internal_kl2().Get(index);
}
inline void TaskGainSet::set_kl2(int index, float value) {
  _internal_mutable_kl2()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TaskGainSet.kl2)
}
inline void TaskGainSet::add_kl2(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kl2()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TaskGainSet.kl2)
}
inline const ::google::protobuf::RepeatedField<float>& TaskGainSet::kl2() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TaskGainSet.kl2)
  return _internal_kl2();
}
inline ::google::protobuf::RepeatedField<float>* TaskGainSet::mutable_kl2() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TaskGainSet.kl2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kl2();
}

inline const ::google::protobuf::RepeatedField<float>& TaskGainSet::_internal_kl2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kl2_;
}
inline ::google::protobuf::RepeatedField<float>* TaskGainSet::_internal_mutable_kl2() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kl2_;
}

// -------------------------------------------------------------------

// ImpedanceGainSet

// repeated float mass = 1;
inline int ImpedanceGainSet::_internal_mass_size() const {
  return _internal_mass().size();
}
inline int ImpedanceGainSet::mass_size() const {
  return _internal_mass_size();
}
inline void ImpedanceGainSet::clear_mass() {
  _internal_mutable_mass()->Clear();
}
inline float ImpedanceGainSet::mass(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ImpedanceGainSet.mass)
  return _internal_mass().Get(index);
}
inline void ImpedanceGainSet::set_mass(int index, float value) {
  _internal_mutable_mass()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ImpedanceGainSet.mass)
}
inline void ImpedanceGainSet::add_mass(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_mass()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ImpedanceGainSet.mass)
}
inline const ::google::protobuf::RepeatedField<float>& ImpedanceGainSet::mass() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ImpedanceGainSet.mass)
  return _internal_mass();
}
inline ::google::protobuf::RepeatedField<float>* ImpedanceGainSet::mutable_mass() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ImpedanceGainSet.mass)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_mass();
}

inline const ::google::protobuf::RepeatedField<float>& ImpedanceGainSet::_internal_mass() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mass_;
}
inline ::google::protobuf::RepeatedField<float>* ImpedanceGainSet::_internal_mutable_mass() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.mass_;
}

// repeated float damping = 2;
inline int ImpedanceGainSet::_internal_damping_size() const {
  return _internal_damping().size();
}
inline int ImpedanceGainSet::damping_size() const {
  return _internal_damping_size();
}
inline void ImpedanceGainSet::clear_damping() {
  _internal_mutable_damping()->Clear();
}
inline float ImpedanceGainSet::damping(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ImpedanceGainSet.damping)
  return _internal_damping().Get(index);
}
inline void ImpedanceGainSet::set_damping(int index, float value) {
  _internal_mutable_damping()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ImpedanceGainSet.damping)
}
inline void ImpedanceGainSet::add_damping(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_damping()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ImpedanceGainSet.damping)
}
inline const ::google::protobuf::RepeatedField<float>& ImpedanceGainSet::damping() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ImpedanceGainSet.damping)
  return _internal_damping();
}
inline ::google::protobuf::RepeatedField<float>* ImpedanceGainSet::mutable_damping() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ImpedanceGainSet.damping)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_damping();
}

inline const ::google::protobuf::RepeatedField<float>& ImpedanceGainSet::_internal_damping() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.damping_;
}
inline ::google::protobuf::RepeatedField<float>* ImpedanceGainSet::_internal_mutable_damping() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.damping_;
}

// repeated float stiffness = 3;
inline int ImpedanceGainSet::_internal_stiffness_size() const {
  return _internal_stiffness().size();
}
inline int ImpedanceGainSet::stiffness_size() const {
  return _internal_stiffness_size();
}
inline void ImpedanceGainSet::clear_stiffness() {
  _internal_mutable_stiffness()->Clear();
}
inline float ImpedanceGainSet::stiffness(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ImpedanceGainSet.stiffness)
  return _internal_stiffness().Get(index);
}
inline void ImpedanceGainSet::set_stiffness(int index, float value) {
  _internal_mutable_stiffness()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ImpedanceGainSet.stiffness)
}
inline void ImpedanceGainSet::add_stiffness(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stiffness()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ImpedanceGainSet.stiffness)
}
inline const ::google::protobuf::RepeatedField<float>& ImpedanceGainSet::stiffness() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ImpedanceGainSet.stiffness)
  return _internal_stiffness();
}
inline ::google::protobuf::RepeatedField<float>* ImpedanceGainSet::mutable_stiffness() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ImpedanceGainSet.stiffness)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_stiffness();
}

inline const ::google::protobuf::RepeatedField<float>& ImpedanceGainSet::_internal_stiffness() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stiffness_;
}
inline ::google::protobuf::RepeatedField<float>* ImpedanceGainSet::_internal_mutable_stiffness() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.stiffness_;
}

// repeated float kl2 = 4;
inline int ImpedanceGainSet::_internal_kl2_size() const {
  return _internal_kl2().size();
}
inline int ImpedanceGainSet::kl2_size() const {
  return _internal_kl2_size();
}
inline void ImpedanceGainSet::clear_kl2() {
  _internal_mutable_kl2()->Clear();
}
inline float ImpedanceGainSet::kl2(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ImpedanceGainSet.kl2)
  return _internal_kl2().Get(index);
}
inline void ImpedanceGainSet::set_kl2(int index, float value) {
  _internal_mutable_kl2()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ImpedanceGainSet.kl2)
}
inline void ImpedanceGainSet::add_kl2(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kl2()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ImpedanceGainSet.kl2)
}
inline const ::google::protobuf::RepeatedField<float>& ImpedanceGainSet::kl2() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ImpedanceGainSet.kl2)
  return _internal_kl2();
}
inline ::google::protobuf::RepeatedField<float>* ImpedanceGainSet::mutable_kl2() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ImpedanceGainSet.kl2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kl2();
}

inline const ::google::protobuf::RepeatedField<float>& ImpedanceGainSet::_internal_kl2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kl2_;
}
inline ::google::protobuf::RepeatedField<float>* ImpedanceGainSet::_internal_mutable_kl2() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kl2_;
}

// -------------------------------------------------------------------

// ForceGainSet

// repeated float kp = 1;
inline int ForceGainSet::_internal_kp_size() const {
  return _internal_kp().size();
}
inline int ForceGainSet::kp_size() const {
  return _internal_kp_size();
}
inline void ForceGainSet::clear_kp() {
  _internal_mutable_kp()->Clear();
}
inline float ForceGainSet::kp(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.kp)
  return _internal_kp().Get(index);
}
inline void ForceGainSet::set_kp(int index, float value) {
  _internal_mutable_kp()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.kp)
}
inline void ForceGainSet::add_kp(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kp()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.kp)
}
inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::kp() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.kp)
  return _internal_kp();
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::mutable_kp() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.kp)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kp();
}

inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::_internal_kp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kp_;
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::_internal_mutable_kp() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kp_;
}

// repeated float kv = 2;
inline int ForceGainSet::_internal_kv_size() const {
  return _internal_kv().size();
}
inline int ForceGainSet::kv_size() const {
  return _internal_kv_size();
}
inline void ForceGainSet::clear_kv() {
  _internal_mutable_kv()->Clear();
}
inline float ForceGainSet::kv(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.kv)
  return _internal_kv().Get(index);
}
inline void ForceGainSet::set_kv(int index, float value) {
  _internal_mutable_kv()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.kv)
}
inline void ForceGainSet::add_kv(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kv()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.kv)
}
inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::kv() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.kv)
  return _internal_kv();
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.kv)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kv();
}

inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::_internal_kv() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kv_;
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::_internal_mutable_kv() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kv_;
}

// repeated float kl2 = 3;
inline int ForceGainSet::_internal_kl2_size() const {
  return _internal_kl2().size();
}
inline int ForceGainSet::kl2_size() const {
  return _internal_kl2_size();
}
inline void ForceGainSet::clear_kl2() {
  _internal_mutable_kl2()->Clear();
}
inline float ForceGainSet::kl2(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.kl2)
  return _internal_kl2().Get(index);
}
inline void ForceGainSet::set_kl2(int index, float value) {
  _internal_mutable_kl2()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.kl2)
}
inline void ForceGainSet::add_kl2(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kl2()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.kl2)
}
inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::kl2() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.kl2)
  return _internal_kl2();
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::mutable_kl2() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.kl2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kl2();
}

inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::_internal_kl2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kl2_;
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::_internal_mutable_kl2() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kl2_;
}

// repeated float mass = 4;
inline int ForceGainSet::_internal_mass_size() const {
  return _internal_mass().size();
}
inline int ForceGainSet::mass_size() const {
  return _internal_mass_size();
}
inline void ForceGainSet::clear_mass() {
  _internal_mutable_mass()->Clear();
}
inline float ForceGainSet::mass(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.mass)
  return _internal_mass().Get(index);
}
inline void ForceGainSet::set_mass(int index, float value) {
  _internal_mutable_mass()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.mass)
}
inline void ForceGainSet::add_mass(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_mass()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.mass)
}
inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::mass() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.mass)
  return _internal_mass();
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::mutable_mass() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.mass)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_mass();
}

inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::_internal_mass() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mass_;
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::_internal_mutable_mass() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.mass_;
}

// repeated float damping = 5;
inline int ForceGainSet::_internal_damping_size() const {
  return _internal_damping().size();
}
inline int ForceGainSet::damping_size() const {
  return _internal_damping_size();
}
inline void ForceGainSet::clear_damping() {
  _internal_mutable_damping()->Clear();
}
inline float ForceGainSet::damping(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.damping)
  return _internal_damping().Get(index);
}
inline void ForceGainSet::set_damping(int index, float value) {
  _internal_mutable_damping()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.damping)
}
inline void ForceGainSet::add_damping(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_damping()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.damping)
}
inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::damping() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.damping)
  return _internal_damping();
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::mutable_damping() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.damping)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_damping();
}

inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::_internal_damping() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.damping_;
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::_internal_mutable_damping() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.damping_;
}

// repeated float stiffness = 6;
inline int ForceGainSet::_internal_stiffness_size() const {
  return _internal_stiffness().size();
}
inline int ForceGainSet::stiffness_size() const {
  return _internal_stiffness_size();
}
inline void ForceGainSet::clear_stiffness() {
  _internal_mutable_stiffness()->Clear();
}
inline float ForceGainSet::stiffness(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.stiffness)
  return _internal_stiffness().Get(index);
}
inline void ForceGainSet::set_stiffness(int index, float value) {
  _internal_mutable_stiffness()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.stiffness)
}
inline void ForceGainSet::add_stiffness(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stiffness()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.stiffness)
}
inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::stiffness() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.stiffness)
  return _internal_stiffness();
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::mutable_stiffness() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.stiffness)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_stiffness();
}

inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::_internal_stiffness() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stiffness_;
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::_internal_mutable_stiffness() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.stiffness_;
}

// repeated float kpf = 7;
inline int ForceGainSet::_internal_kpf_size() const {
  return _internal_kpf().size();
}
inline int ForceGainSet::kpf_size() const {
  return _internal_kpf_size();
}
inline void ForceGainSet::clear_kpf() {
  _internal_mutable_kpf()->Clear();
}
inline float ForceGainSet::kpf(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.kpf)
  return _internal_kpf().Get(index);
}
inline void ForceGainSet::set_kpf(int index, float value) {
  _internal_mutable_kpf()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.kpf)
}
inline void ForceGainSet::add_kpf(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kpf()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.kpf)
}
inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::kpf() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.kpf)
  return _internal_kpf();
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::mutable_kpf() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.kpf)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kpf();
}

inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::_internal_kpf() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kpf_;
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::_internal_mutable_kpf() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kpf_;
}

// repeated float kif = 8;
inline int ForceGainSet::_internal_kif_size() const {
  return _internal_kif().size();
}
inline int ForceGainSet::kif_size() const {
  return _internal_kif_size();
}
inline void ForceGainSet::clear_kif() {
  _internal_mutable_kif()->Clear();
}
inline float ForceGainSet::kif(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForceGainSet.kif)
  return _internal_kif().Get(index);
}
inline void ForceGainSet::set_kif(int index, float value) {
  _internal_mutable_kif()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForceGainSet.kif)
}
inline void ForceGainSet::add_kif(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kif()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForceGainSet.kif)
}
inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::kif() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForceGainSet.kif)
  return _internal_kif();
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::mutable_kif() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForceGainSet.kif)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kif();
}

inline const ::google::protobuf::RepeatedField<float>& ForceGainSet::_internal_kif() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kif_;
}
inline ::google::protobuf::RepeatedField<float>* ForceGainSet::_internal_mutable_kif() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kif_;
}

// -------------------------------------------------------------------

// TestGainSet

// repeated float kpctc = 1;
inline int TestGainSet::_internal_kpctc_size() const {
  return _internal_kpctc().size();
}
inline int TestGainSet::kpctc_size() const {
  return _internal_kpctc_size();
}
inline void TestGainSet::clear_kpctc() {
  _internal_mutable_kpctc()->Clear();
}
inline float TestGainSet::kpctc(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestGainSet.kpctc)
  return _internal_kpctc().Get(index);
}
inline void TestGainSet::set_kpctc(int index, float value) {
  _internal_mutable_kpctc()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestGainSet.kpctc)
}
inline void TestGainSet::add_kpctc(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kpctc()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TestGainSet.kpctc)
}
inline const ::google::protobuf::RepeatedField<float>& TestGainSet::kpctc() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TestGainSet.kpctc)
  return _internal_kpctc();
}
inline ::google::protobuf::RepeatedField<float>* TestGainSet::mutable_kpctc() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TestGainSet.kpctc)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kpctc();
}

inline const ::google::protobuf::RepeatedField<float>& TestGainSet::_internal_kpctc() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kpctc_;
}
inline ::google::protobuf::RepeatedField<float>* TestGainSet::_internal_mutable_kpctc() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kpctc_;
}

// repeated float kvctc = 2;
inline int TestGainSet::_internal_kvctc_size() const {
  return _internal_kvctc().size();
}
inline int TestGainSet::kvctc_size() const {
  return _internal_kvctc_size();
}
inline void TestGainSet::clear_kvctc() {
  _internal_mutable_kvctc()->Clear();
}
inline float TestGainSet::kvctc(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestGainSet.kvctc)
  return _internal_kvctc().Get(index);
}
inline void TestGainSet::set_kvctc(int index, float value) {
  _internal_mutable_kvctc()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestGainSet.kvctc)
}
inline void TestGainSet::add_kvctc(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kvctc()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TestGainSet.kvctc)
}
inline const ::google::protobuf::RepeatedField<float>& TestGainSet::kvctc() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TestGainSet.kvctc)
  return _internal_kvctc();
}
inline ::google::protobuf::RepeatedField<float>* TestGainSet::mutable_kvctc() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TestGainSet.kvctc)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kvctc();
}

inline const ::google::protobuf::RepeatedField<float>& TestGainSet::_internal_kvctc() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kvctc_;
}
inline ::google::protobuf::RepeatedField<float>* TestGainSet::_internal_mutable_kvctc() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kvctc_;
}

// repeated float kictc = 3;
inline int TestGainSet::_internal_kictc_size() const {
  return _internal_kictc().size();
}
inline int TestGainSet::kictc_size() const {
  return _internal_kictc_size();
}
inline void TestGainSet::clear_kictc() {
  _internal_mutable_kictc()->Clear();
}
inline float TestGainSet::kictc(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestGainSet.kictc)
  return _internal_kictc().Get(index);
}
inline void TestGainSet::set_kictc(int index, float value) {
  _internal_mutable_kictc()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestGainSet.kictc)
}
inline void TestGainSet::add_kictc(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kictc()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TestGainSet.kictc)
}
inline const ::google::protobuf::RepeatedField<float>& TestGainSet::kictc() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TestGainSet.kictc)
  return _internal_kictc();
}
inline ::google::protobuf::RepeatedField<float>* TestGainSet::mutable_kictc() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TestGainSet.kictc)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kictc();
}

inline const ::google::protobuf::RepeatedField<float>& TestGainSet::_internal_kictc() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kictc_;
}
inline ::google::protobuf::RepeatedField<float>* TestGainSet::_internal_mutable_kictc() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kictc_;
}

// repeated float knric = 4;
inline int TestGainSet::_internal_knric_size() const {
  return _internal_knric().size();
}
inline int TestGainSet::knric_size() const {
  return _internal_knric_size();
}
inline void TestGainSet::clear_knric() {
  _internal_mutable_knric()->Clear();
}
inline float TestGainSet::knric(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestGainSet.knric)
  return _internal_knric().Get(index);
}
inline void TestGainSet::set_knric(int index, float value) {
  _internal_mutable_knric()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestGainSet.knric)
}
inline void TestGainSet::add_knric(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_knric()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TestGainSet.knric)
}
inline const ::google::protobuf::RepeatedField<float>& TestGainSet::knric() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TestGainSet.knric)
  return _internal_knric();
}
inline ::google::protobuf::RepeatedField<float>* TestGainSet::mutable_knric() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TestGainSet.knric)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_knric();
}

inline const ::google::protobuf::RepeatedField<float>& TestGainSet::_internal_knric() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.knric_;
}
inline ::google::protobuf::RepeatedField<float>* TestGainSet::_internal_mutable_knric() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.knric_;
}

// repeated float kpnric = 5;
inline int TestGainSet::_internal_kpnric_size() const {
  return _internal_kpnric().size();
}
inline int TestGainSet::kpnric_size() const {
  return _internal_kpnric_size();
}
inline void TestGainSet::clear_kpnric() {
  _internal_mutable_kpnric()->Clear();
}
inline float TestGainSet::kpnric(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestGainSet.kpnric)
  return _internal_kpnric().Get(index);
}
inline void TestGainSet::set_kpnric(int index, float value) {
  _internal_mutable_kpnric()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestGainSet.kpnric)
}
inline void TestGainSet::add_kpnric(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kpnric()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TestGainSet.kpnric)
}
inline const ::google::protobuf::RepeatedField<float>& TestGainSet::kpnric() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TestGainSet.kpnric)
  return _internal_kpnric();
}
inline ::google::protobuf::RepeatedField<float>* TestGainSet::mutable_kpnric() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TestGainSet.kpnric)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kpnric();
}

inline const ::google::protobuf::RepeatedField<float>& TestGainSet::_internal_kpnric() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kpnric_;
}
inline ::google::protobuf::RepeatedField<float>* TestGainSet::_internal_mutable_kpnric() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kpnric_;
}

// repeated float kinric = 6;
inline int TestGainSet::_internal_kinric_size() const {
  return _internal_kinric().size();
}
inline int TestGainSet::kinric_size() const {
  return _internal_kinric_size();
}
inline void TestGainSet::clear_kinric() {
  _internal_mutable_kinric()->Clear();
}
inline float TestGainSet::kinric(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestGainSet.kinric)
  return _internal_kinric().Get(index);
}
inline void TestGainSet::set_kinric(int index, float value) {
  _internal_mutable_kinric()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestGainSet.kinric)
}
inline void TestGainSet::add_kinric(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kinric()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TestGainSet.kinric)
}
inline const ::google::protobuf::RepeatedField<float>& TestGainSet::kinric() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TestGainSet.kinric)
  return _internal_kinric();
}
inline ::google::protobuf::RepeatedField<float>* TestGainSet::mutable_kinric() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TestGainSet.kinric)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kinric();
}

inline const ::google::protobuf::RepeatedField<float>& TestGainSet::_internal_kinric() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kinric_;
}
inline ::google::protobuf::RepeatedField<float>* TestGainSet::_internal_mutable_kinric() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kinric_;
}

// -------------------------------------------------------------------

// CustomGainSet

// repeated float gain0 = 1;
inline int CustomGainSet::_internal_gain0_size() const {
  return _internal_gain0().size();
}
inline int CustomGainSet::gain0_size() const {
  return _internal_gain0_size();
}
inline void CustomGainSet::clear_gain0() {
  _internal_mutable_gain0()->Clear();
}
inline float CustomGainSet::gain0(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain0)
  return _internal_gain0().Get(index);
}
inline void CustomGainSet::set_gain0(int index, float value) {
  _internal_mutable_gain0()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain0)
}
inline void CustomGainSet::add_gain0(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_gain0()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain0)
}
inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::gain0() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain0)
  return _internal_gain0();
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::mutable_gain0() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain0)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_gain0();
}

inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::_internal_gain0() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gain0_;
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::_internal_mutable_gain0() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.gain0_;
}

// repeated float gain1 = 2;
inline int CustomGainSet::_internal_gain1_size() const {
  return _internal_gain1().size();
}
inline int CustomGainSet::gain1_size() const {
  return _internal_gain1_size();
}
inline void CustomGainSet::clear_gain1() {
  _internal_mutable_gain1()->Clear();
}
inline float CustomGainSet::gain1(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain1)
  return _internal_gain1().Get(index);
}
inline void CustomGainSet::set_gain1(int index, float value) {
  _internal_mutable_gain1()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain1)
}
inline void CustomGainSet::add_gain1(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_gain1()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain1)
}
inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::gain1() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain1)
  return _internal_gain1();
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::mutable_gain1() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain1)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_gain1();
}

inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::_internal_gain1() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gain1_;
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::_internal_mutable_gain1() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.gain1_;
}

// repeated float gain2 = 3;
inline int CustomGainSet::_internal_gain2_size() const {
  return _internal_gain2().size();
}
inline int CustomGainSet::gain2_size() const {
  return _internal_gain2_size();
}
inline void CustomGainSet::clear_gain2() {
  _internal_mutable_gain2()->Clear();
}
inline float CustomGainSet::gain2(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain2)
  return _internal_gain2().Get(index);
}
inline void CustomGainSet::set_gain2(int index, float value) {
  _internal_mutable_gain2()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain2)
}
inline void CustomGainSet::add_gain2(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_gain2()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain2)
}
inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::gain2() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain2)
  return _internal_gain2();
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::mutable_gain2() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain2)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_gain2();
}

inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::_internal_gain2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gain2_;
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::_internal_mutable_gain2() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.gain2_;
}

// repeated float gain3 = 4;
inline int CustomGainSet::_internal_gain3_size() const {
  return _internal_gain3().size();
}
inline int CustomGainSet::gain3_size() const {
  return _internal_gain3_size();
}
inline void CustomGainSet::clear_gain3() {
  _internal_mutable_gain3()->Clear();
}
inline float CustomGainSet::gain3(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain3)
  return _internal_gain3().Get(index);
}
inline void CustomGainSet::set_gain3(int index, float value) {
  _internal_mutable_gain3()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain3)
}
inline void CustomGainSet::add_gain3(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_gain3()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain3)
}
inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::gain3() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain3)
  return _internal_gain3();
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::mutable_gain3() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_gain3();
}

inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::_internal_gain3() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gain3_;
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::_internal_mutable_gain3() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.gain3_;
}

// repeated float gain4 = 5;
inline int CustomGainSet::_internal_gain4_size() const {
  return _internal_gain4().size();
}
inline int CustomGainSet::gain4_size() const {
  return _internal_gain4_size();
}
inline void CustomGainSet::clear_gain4() {
  _internal_mutable_gain4()->Clear();
}
inline float CustomGainSet::gain4(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain4)
  return _internal_gain4().Get(index);
}
inline void CustomGainSet::set_gain4(int index, float value) {
  _internal_mutable_gain4()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain4)
}
inline void CustomGainSet::add_gain4(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_gain4()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain4)
}
inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::gain4() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain4)
  return _internal_gain4();
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::mutable_gain4() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain4)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_gain4();
}

inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::_internal_gain4() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gain4_;
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::_internal_mutable_gain4() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.gain4_;
}

// repeated float gain5 = 6;
inline int CustomGainSet::_internal_gain5_size() const {
  return _internal_gain5().size();
}
inline int CustomGainSet::gain5_size() const {
  return _internal_gain5_size();
}
inline void CustomGainSet::clear_gain5() {
  _internal_mutable_gain5()->Clear();
}
inline float CustomGainSet::gain5(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain5)
  return _internal_gain5().Get(index);
}
inline void CustomGainSet::set_gain5(int index, float value) {
  _internal_mutable_gain5()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain5)
}
inline void CustomGainSet::add_gain5(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_gain5()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain5)
}
inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::gain5() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain5)
  return _internal_gain5();
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::mutable_gain5() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain5)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_gain5();
}

inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::_internal_gain5() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gain5_;
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::_internal_mutable_gain5() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.gain5_;
}

// repeated float gain6 = 7;
inline int CustomGainSet::_internal_gain6_size() const {
  return _internal_gain6().size();
}
inline int CustomGainSet::gain6_size() const {
  return _internal_gain6_size();
}
inline void CustomGainSet::clear_gain6() {
  _internal_mutable_gain6()->Clear();
}
inline float CustomGainSet::gain6(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain6)
  return _internal_gain6().Get(index);
}
inline void CustomGainSet::set_gain6(int index, float value) {
  _internal_mutable_gain6()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain6)
}
inline void CustomGainSet::add_gain6(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_gain6()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain6)
}
inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::gain6() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain6)
  return _internal_gain6();
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::mutable_gain6() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain6)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_gain6();
}

inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::_internal_gain6() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gain6_;
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::_internal_mutable_gain6() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.gain6_;
}

// repeated float gain7 = 8;
inline int CustomGainSet::_internal_gain7_size() const {
  return _internal_gain7().size();
}
inline int CustomGainSet::gain7_size() const {
  return _internal_gain7_size();
}
inline void CustomGainSet::clear_gain7() {
  _internal_mutable_gain7()->Clear();
}
inline float CustomGainSet::gain7(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain7)
  return _internal_gain7().Get(index);
}
inline void CustomGainSet::set_gain7(int index, float value) {
  _internal_mutable_gain7()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain7)
}
inline void CustomGainSet::add_gain7(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_gain7()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain7)
}
inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::gain7() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain7)
  return _internal_gain7();
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::mutable_gain7() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain7)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_gain7();
}

inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::_internal_gain7() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gain7_;
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::_internal_mutable_gain7() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.gain7_;
}

// repeated float gain8 = 9;
inline int CustomGainSet::_internal_gain8_size() const {
  return _internal_gain8().size();
}
inline int CustomGainSet::gain8_size() const {
  return _internal_gain8_size();
}
inline void CustomGainSet::clear_gain8() {
  _internal_mutable_gain8()->Clear();
}
inline float CustomGainSet::gain8(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain8)
  return _internal_gain8().Get(index);
}
inline void CustomGainSet::set_gain8(int index, float value) {
  _internal_mutable_gain8()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain8)
}
inline void CustomGainSet::add_gain8(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_gain8()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain8)
}
inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::gain8() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain8)
  return _internal_gain8();
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::mutable_gain8() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain8)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_gain8();
}

inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::_internal_gain8() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gain8_;
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::_internal_mutable_gain8() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.gain8_;
}

// repeated float gain9 = 10;
inline int CustomGainSet::_internal_gain9_size() const {
  return _internal_gain9().size();
}
inline int CustomGainSet::gain9_size() const {
  return _internal_gain9_size();
}
inline void CustomGainSet::clear_gain9() {
  _internal_mutable_gain9()->Clear();
}
inline float CustomGainSet::gain9(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CustomGainSet.gain9)
  return _internal_gain9().Get(index);
}
inline void CustomGainSet::set_gain9(int index, float value) {
  _internal_mutable_gain9()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CustomGainSet.gain9)
}
inline void CustomGainSet::add_gain9(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_gain9()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CustomGainSet.gain9)
}
inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::gain9() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CustomGainSet.gain9)
  return _internal_gain9();
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::mutable_gain9() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CustomGainSet.gain9)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_gain9();
}

inline const ::google::protobuf::RepeatedField<float>& CustomGainSet::_internal_gain9() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gain9_;
}
inline ::google::protobuf::RepeatedField<float>* CustomGainSet::_internal_mutable_gain9() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.gain9_;
}

// -------------------------------------------------------------------

// NewControllerTestState

// bool Jenable = 1;
inline void NewControllerTestState::clear_jenable() {
  _impl_.jenable_ = false;
}
inline bool NewControllerTestState::jenable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.NewControllerTestState.Jenable)
  return _internal_jenable();
}
inline void NewControllerTestState::set_jenable(bool value) {
  _internal_set_jenable(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.NewControllerTestState.Jenable)
}
inline bool NewControllerTestState::_internal_jenable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jenable_;
}
inline void NewControllerTestState::_internal_set_jenable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.jenable_ = value;
}

// bool Tenable = 2;
inline void NewControllerTestState::clear_tenable() {
  _impl_.tenable_ = false;
}
inline bool NewControllerTestState::tenable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.NewControllerTestState.Tenable)
  return _internal_tenable();
}
inline void NewControllerTestState::set_tenable(bool value) {
  _internal_set_tenable(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.NewControllerTestState.Tenable)
}
inline bool NewControllerTestState::_internal_tenable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tenable_;
}
inline void NewControllerTestState::_internal_set_tenable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tenable_ = value;
}

// -------------------------------------------------------------------

// FrictionCompSet

// bool control_comp_enable = 1;
inline void FrictionCompSet::clear_control_comp_enable() {
  _impl_.control_comp_enable_ = false;
}
inline bool FrictionCompSet::control_comp_enable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FrictionCompSet.control_comp_enable)
  return _internal_control_comp_enable();
}
inline void FrictionCompSet::set_control_comp_enable(bool value) {
  _internal_set_control_comp_enable(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FrictionCompSet.control_comp_enable)
}
inline bool FrictionCompSet::_internal_control_comp_enable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.control_comp_enable_;
}
inline void FrictionCompSet::_internal_set_control_comp_enable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.control_comp_enable_ = value;
}

// repeated int32 control_comp_levels = 2;
inline int FrictionCompSet::_internal_control_comp_levels_size() const {
  return _internal_control_comp_levels().size();
}
inline int FrictionCompSet::control_comp_levels_size() const {
  return _internal_control_comp_levels_size();
}
inline void FrictionCompSet::clear_control_comp_levels() {
  _internal_mutable_control_comp_levels()->Clear();
}
inline ::int32_t FrictionCompSet::control_comp_levels(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FrictionCompSet.control_comp_levels)
  return _internal_control_comp_levels().Get(index);
}
inline void FrictionCompSet::set_control_comp_levels(int index, ::int32_t value) {
  _internal_mutable_control_comp_levels()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FrictionCompSet.control_comp_levels)
}
inline void FrictionCompSet::add_control_comp_levels(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_control_comp_levels()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.FrictionCompSet.control_comp_levels)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FrictionCompSet::control_comp_levels() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.FrictionCompSet.control_comp_levels)
  return _internal_control_comp_levels();
}
inline ::google::protobuf::RepeatedField<::int32_t>* FrictionCompSet::mutable_control_comp_levels() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.FrictionCompSet.control_comp_levels)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_control_comp_levels();
}

inline const ::google::protobuf::RepeatedField<::int32_t>& FrictionCompSet::_internal_control_comp_levels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.control_comp_levels_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* FrictionCompSet::_internal_mutable_control_comp_levels() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.control_comp_levels_;
}

// bool teaching_comp_enable = 3;
inline void FrictionCompSet::clear_teaching_comp_enable() {
  _impl_.teaching_comp_enable_ = false;
}
inline bool FrictionCompSet::teaching_comp_enable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FrictionCompSet.teaching_comp_enable)
  return _internal_teaching_comp_enable();
}
inline void FrictionCompSet::set_teaching_comp_enable(bool value) {
  _internal_set_teaching_comp_enable(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FrictionCompSet.teaching_comp_enable)
}
inline bool FrictionCompSet::_internal_teaching_comp_enable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.teaching_comp_enable_;
}
inline void FrictionCompSet::_internal_set_teaching_comp_enable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.teaching_comp_enable_ = value;
}

// repeated int32 teaching_comp_levels = 4;
inline int FrictionCompSet::_internal_teaching_comp_levels_size() const {
  return _internal_teaching_comp_levels().size();
}
inline int FrictionCompSet::teaching_comp_levels_size() const {
  return _internal_teaching_comp_levels_size();
}
inline void FrictionCompSet::clear_teaching_comp_levels() {
  _internal_mutable_teaching_comp_levels()->Clear();
}
inline ::int32_t FrictionCompSet::teaching_comp_levels(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FrictionCompSet.teaching_comp_levels)
  return _internal_teaching_comp_levels().Get(index);
}
inline void FrictionCompSet::set_teaching_comp_levels(int index, ::int32_t value) {
  _internal_mutable_teaching_comp_levels()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FrictionCompSet.teaching_comp_levels)
}
inline void FrictionCompSet::add_teaching_comp_levels(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_teaching_comp_levels()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.FrictionCompSet.teaching_comp_levels)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FrictionCompSet::teaching_comp_levels() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.FrictionCompSet.teaching_comp_levels)
  return _internal_teaching_comp_levels();
}
inline ::google::protobuf::RepeatedField<::int32_t>* FrictionCompSet::mutable_teaching_comp_levels() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.FrictionCompSet.teaching_comp_levels)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_teaching_comp_levels();
}

inline const ::google::protobuf::RepeatedField<::int32_t>& FrictionCompSet::_internal_teaching_comp_levels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.teaching_comp_levels_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* FrictionCompSet::_internal_mutable_teaching_comp_levels() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.teaching_comp_levels_;
}

// -------------------------------------------------------------------

// MountingAngles

// float ry = 1;
inline void MountingAngles::clear_ry() {
  _impl_.ry_ = 0;
}
inline float MountingAngles::ry() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MountingAngles.ry)
  return _internal_ry();
}
inline void MountingAngles::set_ry(float value) {
  _internal_set_ry(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MountingAngles.ry)
}
inline float MountingAngles::_internal_ry() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ry_;
}
inline void MountingAngles::_internal_set_ry(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ry_ = value;
}

// float rz = 2;
inline void MountingAngles::clear_rz() {
  _impl_.rz_ = 0;
}
inline float MountingAngles::rz() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MountingAngles.rz)
  return _internal_rz();
}
inline void MountingAngles::set_rz(float value) {
  _internal_set_rz(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MountingAngles.rz)
}
inline float MountingAngles::_internal_rz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rz_;
}
inline void MountingAngles::_internal_set_rz(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rz_ = value;
}

// -------------------------------------------------------------------

// ToolProperties

// float mass = 1;
inline void ToolProperties::clear_mass() {
  _impl_.mass_ = 0;
}
inline float ToolProperties::mass() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ToolProperties.mass)
  return _internal_mass();
}
inline void ToolProperties::set_mass(float value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ToolProperties.mass)
}
inline float ToolProperties::_internal_mass() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mass_;
}
inline void ToolProperties::_internal_set_mass(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mass_ = value;
}

// repeated float center_of_mass = 2;
inline int ToolProperties::_internal_center_of_mass_size() const {
  return _internal_center_of_mass().size();
}
inline int ToolProperties::center_of_mass_size() const {
  return _internal_center_of_mass_size();
}
inline void ToolProperties::clear_center_of_mass() {
  _internal_mutable_center_of_mass()->Clear();
}
inline float ToolProperties::center_of_mass(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ToolProperties.center_of_mass)
  return _internal_center_of_mass().Get(index);
}
inline void ToolProperties::set_center_of_mass(int index, float value) {
  _internal_mutable_center_of_mass()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ToolProperties.center_of_mass)
}
inline void ToolProperties::add_center_of_mass(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_center_of_mass()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ToolProperties.center_of_mass)
}
inline const ::google::protobuf::RepeatedField<float>& ToolProperties::center_of_mass() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ToolProperties.center_of_mass)
  return _internal_center_of_mass();
}
inline ::google::protobuf::RepeatedField<float>* ToolProperties::mutable_center_of_mass() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ToolProperties.center_of_mass)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_center_of_mass();
}

inline const ::google::protobuf::RepeatedField<float>& ToolProperties::_internal_center_of_mass() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.center_of_mass_;
}
inline ::google::protobuf::RepeatedField<float>* ToolProperties::_internal_mutable_center_of_mass() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.center_of_mass_;
}

// repeated float inertia = 3;
inline int ToolProperties::_internal_inertia_size() const {
  return _internal_inertia().size();
}
inline int ToolProperties::inertia_size() const {
  return _internal_inertia_size();
}
inline void ToolProperties::clear_inertia() {
  _internal_mutable_inertia()->Clear();
}
inline float ToolProperties::inertia(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ToolProperties.inertia)
  return _internal_inertia().Get(index);
}
inline void ToolProperties::set_inertia(int index, float value) {
  _internal_mutable_inertia()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ToolProperties.inertia)
}
inline void ToolProperties::add_inertia(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_inertia()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ToolProperties.inertia)
}
inline const ::google::protobuf::RepeatedField<float>& ToolProperties::inertia() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ToolProperties.inertia)
  return _internal_inertia();
}
inline ::google::protobuf::RepeatedField<float>* ToolProperties::mutable_inertia() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ToolProperties.inertia)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_inertia();
}

inline const ::google::protobuf::RepeatedField<float>& ToolProperties::_internal_inertia() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inertia_;
}
inline ::google::protobuf::RepeatedField<float>* ToolProperties::_internal_mutable_inertia() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.inertia_;
}

// -------------------------------------------------------------------

// CollisionSensLevel

// uint32 level = 1;
inline void CollisionSensLevel::clear_level() {
  _impl_.level_ = 0u;
}
inline ::uint32_t CollisionSensLevel::level() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionSensLevel.level)
  return _internal_level();
}
inline void CollisionSensLevel::set_level(::uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionSensLevel.level)
}
inline ::uint32_t CollisionSensLevel::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_;
}
inline void CollisionSensLevel::_internal_set_level(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_ = value;
}

// -------------------------------------------------------------------

// CollisionThresholds

// repeated float j_torque_bases = 1;
inline int CollisionThresholds::_internal_j_torque_bases_size() const {
  return _internal_j_torque_bases().size();
}
inline int CollisionThresholds::j_torque_bases_size() const {
  return _internal_j_torque_bases_size();
}
inline void CollisionThresholds::clear_j_torque_bases() {
  _internal_mutable_j_torque_bases()->Clear();
}
inline float CollisionThresholds::j_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.j_torque_bases)
  return _internal_j_torque_bases().Get(index);
}
inline void CollisionThresholds::set_j_torque_bases(int index, float value) {
  _internal_mutable_j_torque_bases()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.j_torque_bases)
}
inline void CollisionThresholds::add_j_torque_bases(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_j_torque_bases()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.j_torque_bases)
}
inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::j_torque_bases() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.j_torque_bases)
  return _internal_j_torque_bases();
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::mutable_j_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.j_torque_bases)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_j_torque_bases();
}

inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::_internal_j_torque_bases() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.j_torque_bases_;
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::_internal_mutable_j_torque_bases() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.j_torque_bases_;
}

// repeated float j_torque_tangents = 2;
inline int CollisionThresholds::_internal_j_torque_tangents_size() const {
  return _internal_j_torque_tangents().size();
}
inline int CollisionThresholds::j_torque_tangents_size() const {
  return _internal_j_torque_tangents_size();
}
inline void CollisionThresholds::clear_j_torque_tangents() {
  _internal_mutable_j_torque_tangents()->Clear();
}
inline float CollisionThresholds::j_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.j_torque_tangents)
  return _internal_j_torque_tangents().Get(index);
}
inline void CollisionThresholds::set_j_torque_tangents(int index, float value) {
  _internal_mutable_j_torque_tangents()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.j_torque_tangents)
}
inline void CollisionThresholds::add_j_torque_tangents(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_j_torque_tangents()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.j_torque_tangents)
}
inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::j_torque_tangents() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.j_torque_tangents)
  return _internal_j_torque_tangents();
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::mutable_j_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.j_torque_tangents)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_j_torque_tangents();
}

inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::_internal_j_torque_tangents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.j_torque_tangents_;
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::_internal_mutable_j_torque_tangents() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.j_torque_tangents_;
}

// repeated float t_torque_bases = 3;
inline int CollisionThresholds::_internal_t_torque_bases_size() const {
  return _internal_t_torque_bases().size();
}
inline int CollisionThresholds::t_torque_bases_size() const {
  return _internal_t_torque_bases_size();
}
inline void CollisionThresholds::clear_t_torque_bases() {
  _internal_mutable_t_torque_bases()->Clear();
}
inline float CollisionThresholds::t_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.t_torque_bases)
  return _internal_t_torque_bases().Get(index);
}
inline void CollisionThresholds::set_t_torque_bases(int index, float value) {
  _internal_mutable_t_torque_bases()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.t_torque_bases)
}
inline void CollisionThresholds::add_t_torque_bases(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_t_torque_bases()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.t_torque_bases)
}
inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::t_torque_bases() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.t_torque_bases)
  return _internal_t_torque_bases();
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::mutable_t_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.t_torque_bases)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_t_torque_bases();
}

inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::_internal_t_torque_bases() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.t_torque_bases_;
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::_internal_mutable_t_torque_bases() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.t_torque_bases_;
}

// repeated float t_torque_tangents = 4;
inline int CollisionThresholds::_internal_t_torque_tangents_size() const {
  return _internal_t_torque_tangents().size();
}
inline int CollisionThresholds::t_torque_tangents_size() const {
  return _internal_t_torque_tangents_size();
}
inline void CollisionThresholds::clear_t_torque_tangents() {
  _internal_mutable_t_torque_tangents()->Clear();
}
inline float CollisionThresholds::t_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.t_torque_tangents)
  return _internal_t_torque_tangents().Get(index);
}
inline void CollisionThresholds::set_t_torque_tangents(int index, float value) {
  _internal_mutable_t_torque_tangents()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.t_torque_tangents)
}
inline void CollisionThresholds::add_t_torque_tangents(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_t_torque_tangents()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.t_torque_tangents)
}
inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::t_torque_tangents() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.t_torque_tangents)
  return _internal_t_torque_tangents();
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::mutable_t_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.t_torque_tangents)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_t_torque_tangents();
}

inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::_internal_t_torque_tangents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.t_torque_tangents_;
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::_internal_mutable_t_torque_tangents() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.t_torque_tangents_;
}

// repeated float error_bases = 5;
inline int CollisionThresholds::_internal_error_bases_size() const {
  return _internal_error_bases().size();
}
inline int CollisionThresholds::error_bases_size() const {
  return _internal_error_bases_size();
}
inline void CollisionThresholds::clear_error_bases() {
  _internal_mutable_error_bases()->Clear();
}
inline float CollisionThresholds::error_bases(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.error_bases)
  return _internal_error_bases().Get(index);
}
inline void CollisionThresholds::set_error_bases(int index, float value) {
  _internal_mutable_error_bases()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.error_bases)
}
inline void CollisionThresholds::add_error_bases(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_error_bases()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.error_bases)
}
inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::error_bases() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.error_bases)
  return _internal_error_bases();
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::mutable_error_bases() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.error_bases)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_error_bases();
}

inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::_internal_error_bases() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_bases_;
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::_internal_mutable_error_bases() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.error_bases_;
}

// repeated float error_tangents = 6;
inline int CollisionThresholds::_internal_error_tangents_size() const {
  return _internal_error_tangents().size();
}
inline int CollisionThresholds::error_tangents_size() const {
  return _internal_error_tangents_size();
}
inline void CollisionThresholds::clear_error_tangents() {
  _internal_mutable_error_tangents()->Clear();
}
inline float CollisionThresholds::error_tangents(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.error_tangents)
  return _internal_error_tangents().Get(index);
}
inline void CollisionThresholds::set_error_tangents(int index, float value) {
  _internal_mutable_error_tangents()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.error_tangents)
}
inline void CollisionThresholds::add_error_tangents(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_error_tangents()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.error_tangents)
}
inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::error_tangents() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.error_tangents)
  return _internal_error_tangents();
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::mutable_error_tangents() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.error_tangents)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_error_tangents();
}

inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::_internal_error_tangents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_tangents_;
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::_internal_mutable_error_tangents() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.error_tangents_;
}

// repeated float t_constvel_torque_bases = 7;
inline int CollisionThresholds::_internal_t_constvel_torque_bases_size() const {
  return _internal_t_constvel_torque_bases().size();
}
inline int CollisionThresholds::t_constvel_torque_bases_size() const {
  return _internal_t_constvel_torque_bases_size();
}
inline void CollisionThresholds::clear_t_constvel_torque_bases() {
  _internal_mutable_t_constvel_torque_bases()->Clear();
}
inline float CollisionThresholds::t_constvel_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_bases)
  return _internal_t_constvel_torque_bases().Get(index);
}
inline void CollisionThresholds::set_t_constvel_torque_bases(int index, float value) {
  _internal_mutable_t_constvel_torque_bases()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_bases)
}
inline void CollisionThresholds::add_t_constvel_torque_bases(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_t_constvel_torque_bases()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_bases)
}
inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::t_constvel_torque_bases() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_bases)
  return _internal_t_constvel_torque_bases();
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::mutable_t_constvel_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_bases)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_t_constvel_torque_bases();
}

inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::_internal_t_constvel_torque_bases() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.t_constvel_torque_bases_;
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::_internal_mutable_t_constvel_torque_bases() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.t_constvel_torque_bases_;
}

// repeated float t_constvel_torque_tangents = 8;
inline int CollisionThresholds::_internal_t_constvel_torque_tangents_size() const {
  return _internal_t_constvel_torque_tangents().size();
}
inline int CollisionThresholds::t_constvel_torque_tangents_size() const {
  return _internal_t_constvel_torque_tangents_size();
}
inline void CollisionThresholds::clear_t_constvel_torque_tangents() {
  _internal_mutable_t_constvel_torque_tangents()->Clear();
}
inline float CollisionThresholds::t_constvel_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_tangents)
  return _internal_t_constvel_torque_tangents().Get(index);
}
inline void CollisionThresholds::set_t_constvel_torque_tangents(int index, float value) {
  _internal_mutable_t_constvel_torque_tangents()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_tangents)
}
inline void CollisionThresholds::add_t_constvel_torque_tangents(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_t_constvel_torque_tangents()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_tangents)
}
inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::t_constvel_torque_tangents() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_tangents)
  return _internal_t_constvel_torque_tangents();
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::mutable_t_constvel_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.t_constvel_torque_tangents)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_t_constvel_torque_tangents();
}

inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::_internal_t_constvel_torque_tangents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.t_constvel_torque_tangents_;
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::_internal_mutable_t_constvel_torque_tangents() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.t_constvel_torque_tangents_;
}

// repeated float t_conveyor_torque_bases = 9;
inline int CollisionThresholds::_internal_t_conveyor_torque_bases_size() const {
  return _internal_t_conveyor_torque_bases().size();
}
inline int CollisionThresholds::t_conveyor_torque_bases_size() const {
  return _internal_t_conveyor_torque_bases_size();
}
inline void CollisionThresholds::clear_t_conveyor_torque_bases() {
  _internal_mutable_t_conveyor_torque_bases()->Clear();
}
inline float CollisionThresholds::t_conveyor_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_bases)
  return _internal_t_conveyor_torque_bases().Get(index);
}
inline void CollisionThresholds::set_t_conveyor_torque_bases(int index, float value) {
  _internal_mutable_t_conveyor_torque_bases()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_bases)
}
inline void CollisionThresholds::add_t_conveyor_torque_bases(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_t_conveyor_torque_bases()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_bases)
}
inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::t_conveyor_torque_bases() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_bases)
  return _internal_t_conveyor_torque_bases();
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::mutable_t_conveyor_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_bases)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_t_conveyor_torque_bases();
}

inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::_internal_t_conveyor_torque_bases() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.t_conveyor_torque_bases_;
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::_internal_mutable_t_conveyor_torque_bases() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.t_conveyor_torque_bases_;
}

// repeated float t_conveyor_torque_tangents = 10;
inline int CollisionThresholds::_internal_t_conveyor_torque_tangents_size() const {
  return _internal_t_conveyor_torque_tangents().size();
}
inline int CollisionThresholds::t_conveyor_torque_tangents_size() const {
  return _internal_t_conveyor_torque_tangents_size();
}
inline void CollisionThresholds::clear_t_conveyor_torque_tangents() {
  _internal_mutable_t_conveyor_torque_tangents()->Clear();
}
inline float CollisionThresholds::t_conveyor_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_tangents)
  return _internal_t_conveyor_torque_tangents().Get(index);
}
inline void CollisionThresholds::set_t_conveyor_torque_tangents(int index, float value) {
  _internal_mutable_t_conveyor_torque_tangents()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_tangents)
}
inline void CollisionThresholds::add_t_conveyor_torque_tangents(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_t_conveyor_torque_tangents()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_tangents)
}
inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::t_conveyor_torque_tangents() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_tangents)
  return _internal_t_conveyor_torque_tangents();
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::mutable_t_conveyor_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CollisionThresholds.t_conveyor_torque_tangents)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_t_conveyor_torque_tangents();
}

inline const ::google::protobuf::RepeatedField<float>& CollisionThresholds::_internal_t_conveyor_torque_tangents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.t_conveyor_torque_tangents_;
}
inline ::google::protobuf::RepeatedField<float>* CollisionThresholds::_internal_mutable_t_conveyor_torque_tangents() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.t_conveyor_torque_tangents_;
}

// -------------------------------------------------------------------

// CollisionPolicy

// .Nrmk.IndyFramework.CollisionPolicyType policy = 1;
inline void CollisionPolicy::clear_policy() {
  _impl_.policy_ = 0;
}
inline ::Nrmk::IndyFramework::CollisionPolicyType CollisionPolicy::policy() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionPolicy.policy)
  return _internal_policy();
}
inline void CollisionPolicy::set_policy(::Nrmk::IndyFramework::CollisionPolicyType value) {
  _internal_set_policy(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionPolicy.policy)
}
inline ::Nrmk::IndyFramework::CollisionPolicyType CollisionPolicy::_internal_policy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::CollisionPolicyType>(_impl_.policy_);
}
inline void CollisionPolicy::_internal_set_policy(::Nrmk::IndyFramework::CollisionPolicyType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.policy_ = value;
}

// float sleep_time = 2;
inline void CollisionPolicy::clear_sleep_time() {
  _impl_.sleep_time_ = 0;
}
inline float CollisionPolicy::sleep_time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionPolicy.sleep_time)
  return _internal_sleep_time();
}
inline void CollisionPolicy::set_sleep_time(float value) {
  _internal_set_sleep_time(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionPolicy.sleep_time)
}
inline float CollisionPolicy::_internal_sleep_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sleep_time_;
}
inline void CollisionPolicy::_internal_set_sleep_time(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sleep_time_ = value;
}

// float gravity_time = 3;
inline void CollisionPolicy::clear_gravity_time() {
  _impl_.gravity_time_ = 0;
}
inline float CollisionPolicy::gravity_time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CollisionPolicy.gravity_time)
  return _internal_gravity_time();
}
inline void CollisionPolicy::set_gravity_time(float value) {
  _internal_set_gravity_time(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CollisionPolicy.gravity_time)
}
inline float CollisionPolicy::_internal_gravity_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gravity_time_;
}
inline void CollisionPolicy::_internal_set_gravity_time(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gravity_time_ = value;
}

// -------------------------------------------------------------------

// SafetyLimits

// float power_limit = 1;
inline void SafetyLimits::clear_power_limit() {
  _impl_.power_limit_ = 0;
}
inline float SafetyLimits::power_limit() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.power_limit)
  return _internal_power_limit();
}
inline void SafetyLimits::set_power_limit(float value) {
  _internal_set_power_limit(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.power_limit)
}
inline float SafetyLimits::_internal_power_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.power_limit_;
}
inline void SafetyLimits::_internal_set_power_limit(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.power_limit_ = value;
}

// float power_limit_ratio = 2;
inline void SafetyLimits::clear_power_limit_ratio() {
  _impl_.power_limit_ratio_ = 0;
}
inline float SafetyLimits::power_limit_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.power_limit_ratio)
  return _internal_power_limit_ratio();
}
inline void SafetyLimits::set_power_limit_ratio(float value) {
  _internal_set_power_limit_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.power_limit_ratio)
}
inline float SafetyLimits::_internal_power_limit_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.power_limit_ratio_;
}
inline void SafetyLimits::_internal_set_power_limit_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.power_limit_ratio_ = value;
}

// float tcp_force_limit = 3;
inline void SafetyLimits::clear_tcp_force_limit() {
  _impl_.tcp_force_limit_ = 0;
}
inline float SafetyLimits::tcp_force_limit() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.tcp_force_limit)
  return _internal_tcp_force_limit();
}
inline void SafetyLimits::set_tcp_force_limit(float value) {
  _internal_set_tcp_force_limit(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.tcp_force_limit)
}
inline float SafetyLimits::_internal_tcp_force_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tcp_force_limit_;
}
inline void SafetyLimits::_internal_set_tcp_force_limit(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tcp_force_limit_ = value;
}

// float tcp_force_limit_ratio = 4;
inline void SafetyLimits::clear_tcp_force_limit_ratio() {
  _impl_.tcp_force_limit_ratio_ = 0;
}
inline float SafetyLimits::tcp_force_limit_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.tcp_force_limit_ratio)
  return _internal_tcp_force_limit_ratio();
}
inline void SafetyLimits::set_tcp_force_limit_ratio(float value) {
  _internal_set_tcp_force_limit_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.tcp_force_limit_ratio)
}
inline float SafetyLimits::_internal_tcp_force_limit_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tcp_force_limit_ratio_;
}
inline void SafetyLimits::_internal_set_tcp_force_limit_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tcp_force_limit_ratio_ = value;
}

// float tcp_speed_limit = 5;
inline void SafetyLimits::clear_tcp_speed_limit() {
  _impl_.tcp_speed_limit_ = 0;
}
inline float SafetyLimits::tcp_speed_limit() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.tcp_speed_limit)
  return _internal_tcp_speed_limit();
}
inline void SafetyLimits::set_tcp_speed_limit(float value) {
  _internal_set_tcp_speed_limit(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.tcp_speed_limit)
}
inline float SafetyLimits::_internal_tcp_speed_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tcp_speed_limit_;
}
inline void SafetyLimits::_internal_set_tcp_speed_limit(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tcp_speed_limit_ = value;
}

// float tcp_speed_limit_ratio = 6;
inline void SafetyLimits::clear_tcp_speed_limit_ratio() {
  _impl_.tcp_speed_limit_ratio_ = 0;
}
inline float SafetyLimits::tcp_speed_limit_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.tcp_speed_limit_ratio)
  return _internal_tcp_speed_limit_ratio();
}
inline void SafetyLimits::set_tcp_speed_limit_ratio(float value) {
  _internal_set_tcp_speed_limit_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.tcp_speed_limit_ratio)
}
inline float SafetyLimits::_internal_tcp_speed_limit_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tcp_speed_limit_ratio_;
}
inline void SafetyLimits::_internal_set_tcp_speed_limit_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tcp_speed_limit_ratio_ = value;
}

// repeated float joint_upper_limits = 7;
inline int SafetyLimits::_internal_joint_upper_limits_size() const {
  return _internal_joint_upper_limits().size();
}
inline int SafetyLimits::joint_upper_limits_size() const {
  return _internal_joint_upper_limits_size();
}
inline void SafetyLimits::clear_joint_upper_limits() {
  _internal_mutable_joint_upper_limits()->Clear();
}
inline float SafetyLimits::joint_upper_limits(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.joint_upper_limits)
  return _internal_joint_upper_limits().Get(index);
}
inline void SafetyLimits::set_joint_upper_limits(int index, float value) {
  _internal_mutable_joint_upper_limits()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.joint_upper_limits)
}
inline void SafetyLimits::add_joint_upper_limits(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_joint_upper_limits()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.SafetyLimits.joint_upper_limits)
}
inline const ::google::protobuf::RepeatedField<float>& SafetyLimits::joint_upper_limits() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.SafetyLimits.joint_upper_limits)
  return _internal_joint_upper_limits();
}
inline ::google::protobuf::RepeatedField<float>* SafetyLimits::mutable_joint_upper_limits() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.SafetyLimits.joint_upper_limits)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_joint_upper_limits();
}

inline const ::google::protobuf::RepeatedField<float>& SafetyLimits::_internal_joint_upper_limits() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.joint_upper_limits_;
}
inline ::google::protobuf::RepeatedField<float>* SafetyLimits::_internal_mutable_joint_upper_limits() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.joint_upper_limits_;
}

// repeated float joint_lower_limits = 8;
inline int SafetyLimits::_internal_joint_lower_limits_size() const {
  return _internal_joint_lower_limits().size();
}
inline int SafetyLimits::joint_lower_limits_size() const {
  return _internal_joint_lower_limits_size();
}
inline void SafetyLimits::clear_joint_lower_limits() {
  _internal_mutable_joint_lower_limits()->Clear();
}
inline float SafetyLimits::joint_lower_limits(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyLimits.joint_lower_limits)
  return _internal_joint_lower_limits().Get(index);
}
inline void SafetyLimits::set_joint_lower_limits(int index, float value) {
  _internal_mutable_joint_lower_limits()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyLimits.joint_lower_limits)
}
inline void SafetyLimits::add_joint_lower_limits(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_joint_lower_limits()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.SafetyLimits.joint_lower_limits)
}
inline const ::google::protobuf::RepeatedField<float>& SafetyLimits::joint_lower_limits() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.SafetyLimits.joint_lower_limits)
  return _internal_joint_lower_limits();
}
inline ::google::protobuf::RepeatedField<float>* SafetyLimits::mutable_joint_lower_limits() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.SafetyLimits.joint_lower_limits)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_joint_lower_limits();
}

inline const ::google::protobuf::RepeatedField<float>& SafetyLimits::_internal_joint_lower_limits() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.joint_lower_limits_;
}
inline ::google::protobuf::RepeatedField<float>* SafetyLimits::_internal_mutable_joint_lower_limits() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.joint_lower_limits_;
}

// -------------------------------------------------------------------

// SafetyStopConfig

// .Nrmk.IndyFramework.StopCategory joint_position_limit_stop_cat = 1;
inline void SafetyStopConfig::clear_joint_position_limit_stop_cat() {
  _impl_.joint_position_limit_stop_cat_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::joint_position_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyStopConfig.joint_position_limit_stop_cat)
  return _internal_joint_position_limit_stop_cat();
}
inline void SafetyStopConfig::set_joint_position_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  _internal_set_joint_position_limit_stop_cat(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyStopConfig.joint_position_limit_stop_cat)
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::_internal_joint_position_limit_stop_cat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::StopCategory>(_impl_.joint_position_limit_stop_cat_);
}
inline void SafetyStopConfig::_internal_set_joint_position_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.joint_position_limit_stop_cat_ = value;
}

// .Nrmk.IndyFramework.StopCategory joint_speed_limit_stop_cat = 2;
inline void SafetyStopConfig::clear_joint_speed_limit_stop_cat() {
  _impl_.joint_speed_limit_stop_cat_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::joint_speed_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyStopConfig.joint_speed_limit_stop_cat)
  return _internal_joint_speed_limit_stop_cat();
}
inline void SafetyStopConfig::set_joint_speed_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  _internal_set_joint_speed_limit_stop_cat(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyStopConfig.joint_speed_limit_stop_cat)
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::_internal_joint_speed_limit_stop_cat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::StopCategory>(_impl_.joint_speed_limit_stop_cat_);
}
inline void SafetyStopConfig::_internal_set_joint_speed_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.joint_speed_limit_stop_cat_ = value;
}

// .Nrmk.IndyFramework.StopCategory joint_torque_limit_stop_cat = 3;
inline void SafetyStopConfig::clear_joint_torque_limit_stop_cat() {
  _impl_.joint_torque_limit_stop_cat_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::joint_torque_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyStopConfig.joint_torque_limit_stop_cat)
  return _internal_joint_torque_limit_stop_cat();
}
inline void SafetyStopConfig::set_joint_torque_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  _internal_set_joint_torque_limit_stop_cat(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyStopConfig.joint_torque_limit_stop_cat)
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::_internal_joint_torque_limit_stop_cat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::StopCategory>(_impl_.joint_torque_limit_stop_cat_);
}
inline void SafetyStopConfig::_internal_set_joint_torque_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.joint_torque_limit_stop_cat_ = value;
}

// .Nrmk.IndyFramework.StopCategory tcp_speed_limit_stop_cat = 4;
inline void SafetyStopConfig::clear_tcp_speed_limit_stop_cat() {
  _impl_.tcp_speed_limit_stop_cat_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::tcp_speed_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyStopConfig.tcp_speed_limit_stop_cat)
  return _internal_tcp_speed_limit_stop_cat();
}
inline void SafetyStopConfig::set_tcp_speed_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  _internal_set_tcp_speed_limit_stop_cat(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyStopConfig.tcp_speed_limit_stop_cat)
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::_internal_tcp_speed_limit_stop_cat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::StopCategory>(_impl_.tcp_speed_limit_stop_cat_);
}
inline void SafetyStopConfig::_internal_set_tcp_speed_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tcp_speed_limit_stop_cat_ = value;
}

// .Nrmk.IndyFramework.StopCategory tcp_force_limit_stop_cat = 5;
inline void SafetyStopConfig::clear_tcp_force_limit_stop_cat() {
  _impl_.tcp_force_limit_stop_cat_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::tcp_force_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyStopConfig.tcp_force_limit_stop_cat)
  return _internal_tcp_force_limit_stop_cat();
}
inline void SafetyStopConfig::set_tcp_force_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  _internal_set_tcp_force_limit_stop_cat(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyStopConfig.tcp_force_limit_stop_cat)
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::_internal_tcp_force_limit_stop_cat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::StopCategory>(_impl_.tcp_force_limit_stop_cat_);
}
inline void SafetyStopConfig::_internal_set_tcp_force_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tcp_force_limit_stop_cat_ = value;
}

// .Nrmk.IndyFramework.StopCategory power_limit_stop_cat = 6;
inline void SafetyStopConfig::clear_power_limit_stop_cat() {
  _impl_.power_limit_stop_cat_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::power_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SafetyStopConfig.power_limit_stop_cat)
  return _internal_power_limit_stop_cat();
}
inline void SafetyStopConfig::set_power_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  _internal_set_power_limit_stop_cat(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SafetyStopConfig.power_limit_stop_cat)
}
inline ::Nrmk::IndyFramework::StopCategory SafetyStopConfig::_internal_power_limit_stop_cat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::StopCategory>(_impl_.power_limit_stop_cat_);
}
inline void SafetyStopConfig::_internal_set_power_limit_stop_cat(::Nrmk::IndyFramework::StopCategory value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.power_limit_stop_cat_ = value;
}

// -------------------------------------------------------------------

// DIConfig

// int32 function_code = 1;
inline void DIConfig::clear_function_code() {
  _impl_.function_code_ = 0;
}
inline ::int32_t DIConfig::function_code() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIConfig.function_code)
  return _internal_function_code();
}
inline void DIConfig::set_function_code(::int32_t value) {
  _internal_set_function_code(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DIConfig.function_code)
}
inline ::int32_t DIConfig::_internal_function_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.function_code_;
}
inline void DIConfig::_internal_set_function_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.function_code_ = value;
}

// string function_name = 2;
inline void DIConfig::clear_function_name() {
  _impl_.function_name_.ClearToEmpty();
}
inline const std::string& DIConfig::function_name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIConfig.function_name)
  return _internal_function_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DIConfig::set_function_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.function_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DIConfig.function_name)
}
inline std::string* DIConfig::mutable_function_name() {
  std::string* _s = _internal_mutable_function_name();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DIConfig.function_name)
  return _s;
}
inline const std::string& DIConfig::_internal_function_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.function_name_.Get();
}
inline void DIConfig::_internal_set_function_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.function_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DIConfig::_internal_mutable_function_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.function_name_.Mutable( GetArenaForAllocation());
}
inline std::string* DIConfig::release_function_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.DIConfig.function_name)
  return _impl_.function_name_.Release();
}
inline void DIConfig::set_allocated_function_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.function_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.function_name_.IsDefault()) {
          _impl_.function_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.DIConfig.function_name)
}

// repeated .Nrmk.IndyFramework.DigitalSignal triggerSignals = 3;
inline int DIConfig::_internal_triggersignals_size() const {
  return _internal_triggersignals().size();
}
inline int DIConfig::triggersignals_size() const {
  return _internal_triggersignals_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* DIConfig::mutable_triggersignals(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DIConfig.triggerSignals)
  return _internal_mutable_triggersignals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
DIConfig::mutable_triggersignals() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DIConfig.triggerSignals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_triggersignals();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& DIConfig::triggersignals(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIConfig.triggerSignals)
    return _internal_triggersignals().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* DIConfig::add_triggersignals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_triggersignals()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DIConfig.triggerSignals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
DIConfig::triggersignals() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DIConfig.triggerSignals)
  return _internal_triggersignals();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
DIConfig::_internal_triggersignals() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.triggersignals_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
DIConfig::_internal_mutable_triggersignals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.triggersignals_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal successSignals = 4;
inline int DIConfig::_internal_successsignals_size() const {
  return _internal_successsignals().size();
}
inline int DIConfig::successsignals_size() const {
  return _internal_successsignals_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* DIConfig::mutable_successsignals(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DIConfig.successSignals)
  return _internal_mutable_successsignals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
DIConfig::mutable_successsignals() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DIConfig.successSignals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_successsignals();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& DIConfig::successsignals(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIConfig.successSignals)
    return _internal_successsignals().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* DIConfig::add_successsignals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_successsignals()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DIConfig.successSignals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
DIConfig::successsignals() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DIConfig.successSignals)
  return _internal_successsignals();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
DIConfig::_internal_successsignals() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.successsignals_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
DIConfig::_internal_mutable_successsignals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.successsignals_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal failureSignals = 5;
inline int DIConfig::_internal_failuresignals_size() const {
  return _internal_failuresignals().size();
}
inline int DIConfig::failuresignals_size() const {
  return _internal_failuresignals_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* DIConfig::mutable_failuresignals(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DIConfig.failureSignals)
  return _internal_mutable_failuresignals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
DIConfig::mutable_failuresignals() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DIConfig.failureSignals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_failuresignals();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& DIConfig::failuresignals(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIConfig.failureSignals)
    return _internal_failuresignals().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* DIConfig::add_failuresignals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_failuresignals()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DIConfig.failureSignals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
DIConfig::failuresignals() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DIConfig.failureSignals)
  return _internal_failuresignals();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
DIConfig::_internal_failuresignals() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.failuresignals_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
DIConfig::_internal_mutable_failuresignals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.failuresignals_;
}

// -------------------------------------------------------------------

// DIConfigList

// repeated .Nrmk.IndyFramework.DIConfig di_configs = 1;
inline int DIConfigList::_internal_di_configs_size() const {
  return _internal_di_configs().size();
}
inline int DIConfigList::di_configs_size() const {
  return _internal_di_configs_size();
}
inline void DIConfigList::clear_di_configs() {
  _internal_mutable_di_configs()->Clear();
}
inline ::Nrmk::IndyFramework::DIConfig* DIConfigList::mutable_di_configs(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DIConfigList.di_configs)
  return _internal_mutable_di_configs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DIConfig >*
DIConfigList::mutable_di_configs() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DIConfigList.di_configs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_di_configs();
}
inline const ::Nrmk::IndyFramework::DIConfig& DIConfigList::di_configs(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIConfigList.di_configs)
    return _internal_di_configs().Get(index);
}
inline ::Nrmk::IndyFramework::DIConfig* DIConfigList::add_di_configs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DIConfig* _add = _internal_mutable_di_configs()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DIConfigList.di_configs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DIConfig >&
DIConfigList::di_configs() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DIConfigList.di_configs)
  return _internal_di_configs();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DIConfig>&
DIConfigList::_internal_di_configs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.di_configs_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DIConfig>*
DIConfigList::_internal_mutable_di_configs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.di_configs_;
}

// -------------------------------------------------------------------

// DOConfig

// int32 state_code = 1;
inline void DOConfig::clear_state_code() {
  _impl_.state_code_ = 0;
}
inline ::int32_t DOConfig::state_code() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DOConfig.state_code)
  return _internal_state_code();
}
inline void DOConfig::set_state_code(::int32_t value) {
  _internal_set_state_code(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DOConfig.state_code)
}
inline ::int32_t DOConfig::_internal_state_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_code_;
}
inline void DOConfig::_internal_set_state_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_code_ = value;
}

// string state_name = 2;
inline void DOConfig::clear_state_name() {
  _impl_.state_name_.ClearToEmpty();
}
inline const std::string& DOConfig::state_name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DOConfig.state_name)
  return _internal_state_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DOConfig::set_state_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DOConfig.state_name)
}
inline std::string* DOConfig::mutable_state_name() {
  std::string* _s = _internal_mutable_state_name();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DOConfig.state_name)
  return _s;
}
inline const std::string& DOConfig::_internal_state_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_name_.Get();
}
inline void DOConfig::_internal_set_state_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DOConfig::_internal_mutable_state_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.state_name_.Mutable( GetArenaForAllocation());
}
inline std::string* DOConfig::release_state_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.DOConfig.state_name)
  return _impl_.state_name_.Release();
}
inline void DOConfig::set_allocated_state_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_name_.IsDefault()) {
          _impl_.state_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.DOConfig.state_name)
}

// repeated .Nrmk.IndyFramework.DigitalSignal onSignals = 3;
inline int DOConfig::_internal_onsignals_size() const {
  return _internal_onsignals().size();
}
inline int DOConfig::onsignals_size() const {
  return _internal_onsignals_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* DOConfig::mutable_onsignals(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DOConfig.onSignals)
  return _internal_mutable_onsignals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
DOConfig::mutable_onsignals() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DOConfig.onSignals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_onsignals();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& DOConfig::onsignals(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DOConfig.onSignals)
    return _internal_onsignals().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* DOConfig::add_onsignals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_onsignals()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DOConfig.onSignals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
DOConfig::onsignals() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DOConfig.onSignals)
  return _internal_onsignals();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
DOConfig::_internal_onsignals() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.onsignals_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
DOConfig::_internal_mutable_onsignals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.onsignals_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal offSignals = 4;
inline int DOConfig::_internal_offsignals_size() const {
  return _internal_offsignals().size();
}
inline int DOConfig::offsignals_size() const {
  return _internal_offsignals_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* DOConfig::mutable_offsignals(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DOConfig.offSignals)
  return _internal_mutable_offsignals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
DOConfig::mutable_offsignals() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DOConfig.offSignals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_offsignals();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& DOConfig::offsignals(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DOConfig.offSignals)
    return _internal_offsignals().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* DOConfig::add_offsignals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_offsignals()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DOConfig.offSignals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
DOConfig::offsignals() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DOConfig.offSignals)
  return _internal_offsignals();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
DOConfig::_internal_offsignals() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offsignals_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
DOConfig::_internal_mutable_offsignals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.offsignals_;
}

// -------------------------------------------------------------------

// DOConfigList

// repeated .Nrmk.IndyFramework.DOConfig do_configs = 1;
inline int DOConfigList::_internal_do_configs_size() const {
  return _internal_do_configs().size();
}
inline int DOConfigList::do_configs_size() const {
  return _internal_do_configs_size();
}
inline void DOConfigList::clear_do_configs() {
  _internal_mutable_do_configs()->Clear();
}
inline ::Nrmk::IndyFramework::DOConfig* DOConfigList::mutable_do_configs(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DOConfigList.do_configs)
  return _internal_mutable_do_configs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DOConfig >*
DOConfigList::mutable_do_configs() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DOConfigList.do_configs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_do_configs();
}
inline const ::Nrmk::IndyFramework::DOConfig& DOConfigList::do_configs(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DOConfigList.do_configs)
    return _internal_do_configs().Get(index);
}
inline ::Nrmk::IndyFramework::DOConfig* DOConfigList::add_do_configs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DOConfig* _add = _internal_mutable_do_configs()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DOConfigList.do_configs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DOConfig >&
DOConfigList::do_configs() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DOConfigList.do_configs)
  return _internal_do_configs();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DOConfig>&
DOConfigList::_internal_do_configs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.do_configs_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DOConfig>*
DOConfigList::_internal_mutable_do_configs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.do_configs_;
}

// -------------------------------------------------------------------

// GetReducedRatioRes

// float ratio = 1;
inline void GetReducedRatioRes::clear_ratio() {
  _impl_.ratio_ = 0;
}
inline float GetReducedRatioRes::ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetReducedRatioRes.ratio)
  return _internal_ratio();
}
inline void GetReducedRatioRes::set_ratio(float value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetReducedRatioRes.ratio)
}
inline float GetReducedRatioRes::_internal_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ratio_;
}
inline void GetReducedRatioRes::_internal_set_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ratio_ = value;
}

// string msg = 100;
inline void GetReducedRatioRes::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& GetReducedRatioRes::msg() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetReducedRatioRes.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetReducedRatioRes::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetReducedRatioRes.msg)
}
inline std::string* GetReducedRatioRes::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.GetReducedRatioRes.msg)
  return _s;
}
inline const std::string& GetReducedRatioRes::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void GetReducedRatioRes::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetReducedRatioRes::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* GetReducedRatioRes::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.GetReducedRatioRes.msg)
  return _impl_.msg_.Release();
}
inline void GetReducedRatioRes::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.GetReducedRatioRes.msg)
}

// -------------------------------------------------------------------

// GetReducedSpeedRes

// float speed = 1;
inline void GetReducedSpeedRes::clear_speed() {
  _impl_.speed_ = 0;
}
inline float GetReducedSpeedRes::speed() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetReducedSpeedRes.speed)
  return _internal_speed();
}
inline void GetReducedSpeedRes::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetReducedSpeedRes.speed)
}
inline float GetReducedSpeedRes::_internal_speed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.speed_;
}
inline void GetReducedSpeedRes::_internal_set_speed(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.speed_ = value;
}

// string msg = 100;
inline void GetReducedSpeedRes::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& GetReducedSpeedRes::msg() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetReducedSpeedRes.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetReducedSpeedRes::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetReducedSpeedRes.msg)
}
inline std::string* GetReducedSpeedRes::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.GetReducedSpeedRes.msg)
  return _s;
}
inline const std::string& GetReducedSpeedRes::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void GetReducedSpeedRes::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetReducedSpeedRes::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* GetReducedSpeedRes::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.GetReducedSpeedRes.msg)
  return _impl_.msg_.Release();
}
inline void GetReducedSpeedRes::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.GetReducedSpeedRes.msg)
}

// -------------------------------------------------------------------

// SetReducedSpeedReq

// float speed = 1;
inline void SetReducedSpeedReq::clear_speed() {
  _impl_.speed_ = 0;
}
inline float SetReducedSpeedReq::speed() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SetReducedSpeedReq.speed)
  return _internal_speed();
}
inline void SetReducedSpeedReq::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SetReducedSpeedReq.speed)
}
inline float SetReducedSpeedReq::_internal_speed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.speed_;
}
inline void SetReducedSpeedReq::_internal_set_speed(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.speed_ = value;
}

// -------------------------------------------------------------------

// FTSensorDevice

// .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceType dev_type = 1;
inline void FTSensorDevice::clear_dev_type() {
  _impl_.dev_type_ = 0;
}
inline ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType FTSensorDevice::dev_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.dev_type)
  return _internal_dev_type();
}
inline void FTSensorDevice::set_dev_type(::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType value) {
  _internal_set_dev_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.dev_type)
}
inline ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType FTSensorDevice::_internal_dev_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType>(_impl_.dev_type_);
}
inline void FTSensorDevice::_internal_set_dev_type(::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dev_type_ = value;
}

// .Nrmk.IndyFramework.FTSensorDevice.FTSensorDeviceComType com_type = 2;
inline void FTSensorDevice::clear_com_type() {
  _impl_.com_type_ = 0;
}
inline ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType FTSensorDevice::com_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.com_type)
  return _internal_com_type();
}
inline void FTSensorDevice::set_com_type(::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType value) {
  _internal_set_com_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.com_type)
}
inline ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType FTSensorDevice::_internal_com_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType>(_impl_.com_type_);
}
inline void FTSensorDevice::_internal_set_com_type(::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.com_type_ = value;
}

// string ip_address = 3;
inline void FTSensorDevice::clear_ip_address() {
  _impl_.ip_address_.ClearToEmpty();
}
inline const std::string& FTSensorDevice::ip_address() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.ip_address)
  return _internal_ip_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FTSensorDevice::set_ip_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.ip_address)
}
inline std::string* FTSensorDevice::mutable_ip_address() {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.FTSensorDevice.ip_address)
  return _s;
}
inline const std::string& FTSensorDevice::_internal_ip_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_address_.Get();
}
inline void FTSensorDevice::_internal_set_ip_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_address_.Set(value, GetArenaForAllocation());
}
inline std::string* FTSensorDevice::_internal_mutable_ip_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ip_address_.Mutable( GetArenaForAllocation());
}
inline std::string* FTSensorDevice::release_ip_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.FTSensorDevice.ip_address)
  return _impl_.ip_address_.Release();
}
inline void FTSensorDevice::set_allocated_ip_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_address_.IsDefault()) {
          _impl_.ip_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.FTSensorDevice.ip_address)
}

// float ft_frame_translation_offset_x = 11;
inline void FTSensorDevice::clear_ft_frame_translation_offset_x() {
  _impl_.ft_frame_translation_offset_x_ = 0;
}
inline float FTSensorDevice::ft_frame_translation_offset_x() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.ft_frame_translation_offset_x)
  return _internal_ft_frame_translation_offset_x();
}
inline void FTSensorDevice::set_ft_frame_translation_offset_x(float value) {
  _internal_set_ft_frame_translation_offset_x(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.ft_frame_translation_offset_x)
}
inline float FTSensorDevice::_internal_ft_frame_translation_offset_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_frame_translation_offset_x_;
}
inline void FTSensorDevice::_internal_set_ft_frame_translation_offset_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_frame_translation_offset_x_ = value;
}

// float ft_frame_translation_offset_y = 12;
inline void FTSensorDevice::clear_ft_frame_translation_offset_y() {
  _impl_.ft_frame_translation_offset_y_ = 0;
}
inline float FTSensorDevice::ft_frame_translation_offset_y() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.ft_frame_translation_offset_y)
  return _internal_ft_frame_translation_offset_y();
}
inline void FTSensorDevice::set_ft_frame_translation_offset_y(float value) {
  _internal_set_ft_frame_translation_offset_y(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.ft_frame_translation_offset_y)
}
inline float FTSensorDevice::_internal_ft_frame_translation_offset_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_frame_translation_offset_y_;
}
inline void FTSensorDevice::_internal_set_ft_frame_translation_offset_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_frame_translation_offset_y_ = value;
}

// float ft_frame_translation_offset_z = 13;
inline void FTSensorDevice::clear_ft_frame_translation_offset_z() {
  _impl_.ft_frame_translation_offset_z_ = 0;
}
inline float FTSensorDevice::ft_frame_translation_offset_z() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.ft_frame_translation_offset_z)
  return _internal_ft_frame_translation_offset_z();
}
inline void FTSensorDevice::set_ft_frame_translation_offset_z(float value) {
  _internal_set_ft_frame_translation_offset_z(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.ft_frame_translation_offset_z)
}
inline float FTSensorDevice::_internal_ft_frame_translation_offset_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_frame_translation_offset_z_;
}
inline void FTSensorDevice::_internal_set_ft_frame_translation_offset_z(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_frame_translation_offset_z_ = value;
}

// float ft_frame_rotation_offset_r = 14;
inline void FTSensorDevice::clear_ft_frame_rotation_offset_r() {
  _impl_.ft_frame_rotation_offset_r_ = 0;
}
inline float FTSensorDevice::ft_frame_rotation_offset_r() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.ft_frame_rotation_offset_r)
  return _internal_ft_frame_rotation_offset_r();
}
inline void FTSensorDevice::set_ft_frame_rotation_offset_r(float value) {
  _internal_set_ft_frame_rotation_offset_r(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.ft_frame_rotation_offset_r)
}
inline float FTSensorDevice::_internal_ft_frame_rotation_offset_r() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_frame_rotation_offset_r_;
}
inline void FTSensorDevice::_internal_set_ft_frame_rotation_offset_r(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_frame_rotation_offset_r_ = value;
}

// float ft_frame_rotation_offset_p = 15;
inline void FTSensorDevice::clear_ft_frame_rotation_offset_p() {
  _impl_.ft_frame_rotation_offset_p_ = 0;
}
inline float FTSensorDevice::ft_frame_rotation_offset_p() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.ft_frame_rotation_offset_p)
  return _internal_ft_frame_rotation_offset_p();
}
inline void FTSensorDevice::set_ft_frame_rotation_offset_p(float value) {
  _internal_set_ft_frame_rotation_offset_p(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.ft_frame_rotation_offset_p)
}
inline float FTSensorDevice::_internal_ft_frame_rotation_offset_p() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_frame_rotation_offset_p_;
}
inline void FTSensorDevice::_internal_set_ft_frame_rotation_offset_p(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_frame_rotation_offset_p_ = value;
}

// float ft_frame_rotation_offset_y = 16;
inline void FTSensorDevice::clear_ft_frame_rotation_offset_y() {
  _impl_.ft_frame_rotation_offset_y_ = 0;
}
inline float FTSensorDevice::ft_frame_rotation_offset_y() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDevice.ft_frame_rotation_offset_y)
  return _internal_ft_frame_rotation_offset_y();
}
inline void FTSensorDevice::set_ft_frame_rotation_offset_y(float value) {
  _internal_set_ft_frame_rotation_offset_y(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDevice.ft_frame_rotation_offset_y)
}
inline float FTSensorDevice::_internal_ft_frame_rotation_offset_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_frame_rotation_offset_y_;
}
inline void FTSensorDevice::_internal_set_ft_frame_rotation_offset_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_frame_rotation_offset_y_ = value;
}

// -------------------------------------------------------------------

// FTSensorDeviceRes

// string msg = 100;
inline void FTSensorDeviceRes::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& FTSensorDeviceRes::msg() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorDeviceRes.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FTSensorDeviceRes::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorDeviceRes.msg)
}
inline std::string* FTSensorDeviceRes::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.FTSensorDeviceRes.msg)
  return _s;
}
inline const std::string& FTSensorDeviceRes::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void FTSensorDeviceRes::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* FTSensorDeviceRes::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* FTSensorDeviceRes::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.FTSensorDeviceRes.msg)
  return _impl_.msg_.Release();
}
inline void FTSensorDeviceRes::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.FTSensorDeviceRes.msg)
}

// -------------------------------------------------------------------

// TeleOpParams

// float smooth_factor = 1;
inline void TeleOpParams::clear_smooth_factor() {
  _impl_.smooth_factor_ = 0;
}
inline float TeleOpParams::smooth_factor() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpParams.smooth_factor)
  return _internal_smooth_factor();
}
inline void TeleOpParams::set_smooth_factor(float value) {
  _internal_set_smooth_factor(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpParams.smooth_factor)
}
inline float TeleOpParams::_internal_smooth_factor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.smooth_factor_;
}
inline void TeleOpParams::_internal_set_smooth_factor(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.smooth_factor_ = value;
}

// float cutoff_freq = 2;
inline void TeleOpParams::clear_cutoff_freq() {
  _impl_.cutoff_freq_ = 0;
}
inline float TeleOpParams::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpParams.cutoff_freq)
  return _internal_cutoff_freq();
}
inline void TeleOpParams::set_cutoff_freq(float value) {
  _internal_set_cutoff_freq(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpParams.cutoff_freq)
}
inline float TeleOpParams::_internal_cutoff_freq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cutoff_freq_;
}
inline void TeleOpParams::_internal_set_cutoff_freq(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cutoff_freq_ = value;
}

// float error_gain = 3;
inline void TeleOpParams::clear_error_gain() {
  _impl_.error_gain_ = 0;
}
inline float TeleOpParams::error_gain() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpParams.error_gain)
  return _internal_error_gain();
}
inline void TeleOpParams::set_error_gain(float value) {
  _internal_set_error_gain(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpParams.error_gain)
}
inline float TeleOpParams::_internal_error_gain() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_gain_;
}
inline void TeleOpParams::_internal_set_error_gain(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_gain_ = value;
}

// -------------------------------------------------------------------

// KinematicsParams_MDH

// float a = 1;
inline void KinematicsParams_MDH::clear_a() {
  _impl_.a_ = 0;
}
inline float KinematicsParams_MDH::a() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.MDH.a)
  return _internal_a();
}
inline void KinematicsParams_MDH::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.KinematicsParams.MDH.a)
}
inline float KinematicsParams_MDH::_internal_a() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.a_;
}
inline void KinematicsParams_MDH::_internal_set_a(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.a_ = value;
}

// float alpha = 2;
inline void KinematicsParams_MDH::clear_alpha() {
  _impl_.alpha_ = 0;
}
inline float KinematicsParams_MDH::alpha() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.MDH.alpha)
  return _internal_alpha();
}
inline void KinematicsParams_MDH::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.KinematicsParams.MDH.alpha)
}
inline float KinematicsParams_MDH::_internal_alpha() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.alpha_;
}
inline void KinematicsParams_MDH::_internal_set_alpha(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alpha_ = value;
}

// float d0 = 3;
inline void KinematicsParams_MDH::clear_d0() {
  _impl_.d0_ = 0;
}
inline float KinematicsParams_MDH::d0() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.MDH.d0)
  return _internal_d0();
}
inline void KinematicsParams_MDH::set_d0(float value) {
  _internal_set_d0(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.KinematicsParams.MDH.d0)
}
inline float KinematicsParams_MDH::_internal_d0() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.d0_;
}
inline void KinematicsParams_MDH::_internal_set_d0(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.d0_ = value;
}

// float theta0 = 4;
inline void KinematicsParams_MDH::clear_theta0() {
  _impl_.theta0_ = 0;
}
inline float KinematicsParams_MDH::theta0() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.MDH.theta0)
  return _internal_theta0();
}
inline void KinematicsParams_MDH::set_theta0(float value) {
  _internal_set_theta0(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.KinematicsParams.MDH.theta0)
}
inline float KinematicsParams_MDH::_internal_theta0() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.theta0_;
}
inline void KinematicsParams_MDH::_internal_set_theta0(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.theta0_ = value;
}

// .Nrmk.IndyFramework.KinematicsParams.JointType type = 5;
inline void KinematicsParams_MDH::clear_type() {
  _impl_.type_ = 0;
}
inline ::Nrmk::IndyFramework::KinematicsParams_JointType KinematicsParams_MDH::type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.MDH.type)
  return _internal_type();
}
inline void KinematicsParams_MDH::set_type(::Nrmk::IndyFramework::KinematicsParams_JointType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.KinematicsParams.MDH.type)
}
inline ::Nrmk::IndyFramework::KinematicsParams_JointType KinematicsParams_MDH::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::KinematicsParams_JointType>(_impl_.type_);
}
inline void KinematicsParams_MDH::_internal_set_type(::Nrmk::IndyFramework::KinematicsParams_JointType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// int32 index = 10;
inline void KinematicsParams_MDH::clear_index() {
  _impl_.index_ = 0;
}
inline ::int32_t KinematicsParams_MDH::index() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.MDH.index)
  return _internal_index();
}
inline void KinematicsParams_MDH::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.KinematicsParams.MDH.index)
}
inline ::int32_t KinematicsParams_MDH::_internal_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_;
}
inline void KinematicsParams_MDH::_internal_set_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_ = value;
}

// int32 parent = 11;
inline void KinematicsParams_MDH::clear_parent() {
  _impl_.parent_ = 0;
}
inline ::int32_t KinematicsParams_MDH::parent() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.MDH.parent)
  return _internal_parent();
}
inline void KinematicsParams_MDH::set_parent(::int32_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.KinematicsParams.MDH.parent)
}
inline ::int32_t KinematicsParams_MDH::_internal_parent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_;
}
inline void KinematicsParams_MDH::_internal_set_parent(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_ = value;
}

// -------------------------------------------------------------------

// KinematicsParams

// repeated .Nrmk.IndyFramework.KinematicsParams.MDH mdh = 1;
inline int KinematicsParams::_internal_mdh_size() const {
  return _internal_mdh().size();
}
inline int KinematicsParams::mdh_size() const {
  return _internal_mdh_size();
}
inline void KinematicsParams::clear_mdh() {
  _internal_mutable_mdh()->Clear();
}
inline ::Nrmk::IndyFramework::KinematicsParams_MDH* KinematicsParams::mutable_mdh(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.KinematicsParams.mdh)
  return _internal_mutable_mdh()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::KinematicsParams_MDH >*
KinematicsParams::mutable_mdh() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.KinematicsParams.mdh)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_mdh();
}
inline const ::Nrmk::IndyFramework::KinematicsParams_MDH& KinematicsParams::mdh(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.KinematicsParams.mdh)
    return _internal_mdh().Get(index);
}
inline ::Nrmk::IndyFramework::KinematicsParams_MDH* KinematicsParams::add_mdh() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::KinematicsParams_MDH* _add = _internal_mutable_mdh()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.KinematicsParams.mdh)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::KinematicsParams_MDH >&
KinematicsParams::mdh() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.KinematicsParams.mdh)
  return _internal_mdh();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::KinematicsParams_MDH>&
KinematicsParams::_internal_mdh() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mdh_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::KinematicsParams_MDH>*
KinematicsParams::_internal_mutable_mdh() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.mdh_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision>() {
  return ::Nrmk::IndyFramework::CollTuningConfig_TuningPrecision_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::CollTuningConfig_TuningSpace> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::CollTuningConfig_TuningSpace>() {
  return ::Nrmk::IndyFramework::CollTuningConfig_TuningSpace_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType>() {
  return ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceType_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType>() {
  return ::Nrmk::IndyFramework::FTSensorDevice_FTSensorDeviceComType_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::KinematicsParams_JointType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::KinematicsParams_JointType>() {
  return ::Nrmk::IndyFramework::KinematicsParams_JointType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_config_5fmsgs_2eproto_2epb_2eh
