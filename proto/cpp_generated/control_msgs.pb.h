// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "device_msgs.pb.h"
#include "common_msgs.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fmsgs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_control_5fmsgs_2eproto;
namespace Nrmk {
namespace IndyFramework {
class AllVars;
struct AllVarsDefaultTypeInternal;
extern AllVarsDefaultTypeInternal _AllVars_default_instance_;
class BlendingType;
struct BlendingTypeDefaultTypeInternal;
extern BlendingTypeDefaultTypeInternal _BlendingType_default_instance_;
class BoolVariable;
struct BoolVariableDefaultTypeInternal;
extern BoolVariableDefaultTypeInternal _BoolVariable_default_instance_;
class BoolVars;
struct BoolVarsDefaultTypeInternal;
extern BoolVarsDefaultTypeInternal _BoolVars_default_instance_;
class CalculateCurrentPoseRelReq;
struct CalculateCurrentPoseRelReqDefaultTypeInternal;
extern CalculateCurrentPoseRelReqDefaultTypeInternal _CalculateCurrentPoseRelReq_default_instance_;
class CalculateCurrentPoseRelRes;
struct CalculateCurrentPoseRelResDefaultTypeInternal;
extern CalculateCurrentPoseRelResDefaultTypeInternal _CalculateCurrentPoseRelRes_default_instance_;
class CalculateRelativePoseReq;
struct CalculateRelativePoseReqDefaultTypeInternal;
extern CalculateRelativePoseReqDefaultTypeInternal _CalculateRelativePoseReq_default_instance_;
class CalculateRelativePoseRes;
struct CalculateRelativePoseResDefaultTypeInternal;
extern CalculateRelativePoseResDefaultTypeInternal _CalculateRelativePoseRes_default_instance_;
class CheckAproachRetractValidReq;
struct CheckAproachRetractValidReqDefaultTypeInternal;
extern CheckAproachRetractValidReqDefaultTypeInternal _CheckAproachRetractValidReq_default_instance_;
class CheckAproachRetractValidRes;
struct CheckAproachRetractValidResDefaultTypeInternal;
extern CheckAproachRetractValidResDefaultTypeInternal _CheckAproachRetractValidRes_default_instance_;
class ControlInfo;
struct ControlInfoDefaultTypeInternal;
extern ControlInfoDefaultTypeInternal _ControlInfo_default_instance_;
class FloatVariable;
struct FloatVariableDefaultTypeInternal;
extern FloatVariableDefaultTypeInternal _FloatVariable_default_instance_;
class FloatVars;
struct FloatVarsDefaultTypeInternal;
extern FloatVarsDefaultTypeInternal _FloatVars_default_instance_;
class ForwardKinematicsReq;
struct ForwardKinematicsReqDefaultTypeInternal;
extern ForwardKinematicsReqDefaultTypeInternal _ForwardKinematicsReq_default_instance_;
class ForwardKinematicsRes;
struct ForwardKinematicsResDefaultTypeInternal;
extern ForwardKinematicsResDefaultTypeInternal _ForwardKinematicsRes_default_instance_;
class GetPalletPointListReq;
struct GetPalletPointListReqDefaultTypeInternal;
extern GetPalletPointListReqDefaultTypeInternal _GetPalletPointListReq_default_instance_;
class GetPalletPointListRes;
struct GetPalletPointListResDefaultTypeInternal;
extern GetPalletPointListResDefaultTypeInternal _GetPalletPointListRes_default_instance_;
class IOCondition;
struct IOConditionDefaultTypeInternal;
extern IOConditionDefaultTypeInternal _IOCondition_default_instance_;
class IntVariable;
struct IntVariableDefaultTypeInternal;
extern IntVariableDefaultTypeInternal _IntVariable_default_instance_;
class IntVars;
struct IntVarsDefaultTypeInternal;
extern IntVarsDefaultTypeInternal _IntVars_default_instance_;
class InverseKinematicsReq;
struct InverseKinematicsReqDefaultTypeInternal;
extern InverseKinematicsReqDefaultTypeInternal _InverseKinematicsReq_default_instance_;
class InverseKinematicsRes;
struct InverseKinematicsResDefaultTypeInternal;
extern InverseKinematicsResDefaultTypeInternal _InverseKinematicsRes_default_instance_;
class JPosVariable;
struct JPosVariableDefaultTypeInternal;
extern JPosVariableDefaultTypeInternal _JPosVariable_default_instance_;
class JPosVars;
struct JPosVarsDefaultTypeInternal;
extern JPosVarsDefaultTypeInternal _JPosVars_default_instance_;
class ModbusServer;
struct ModbusServerDefaultTypeInternal;
extern ModbusServerDefaultTypeInternal _ModbusServer_default_instance_;
class ModbusVariable;
struct ModbusVariableDefaultTypeInternal;
extern ModbusVariableDefaultTypeInternal _ModbusVariable_default_instance_;
class ModbusVariableList;
struct ModbusVariableListDefaultTypeInternal;
extern ModbusVariableListDefaultTypeInternal _ModbusVariableList_default_instance_;
class ModbusVars;
struct ModbusVarsDefaultTypeInternal;
extern ModbusVarsDefaultTypeInternal _ModbusVars_default_instance_;
class MotionCondition;
struct MotionConditionDefaultTypeInternal;
extern MotionConditionDefaultTypeInternal _MotionCondition_default_instance_;
class MoveAxisReq;
struct MoveAxisReqDefaultTypeInternal;
extern MoveAxisReqDefaultTypeInternal _MoveAxisReq_default_instance_;
class MoveCReq;
struct MoveCReqDefaultTypeInternal;
extern MoveCReqDefaultTypeInternal _MoveCReq_default_instance_;
class MoveCTReq;
struct MoveCTReqDefaultTypeInternal;
extern MoveCTReqDefaultTypeInternal _MoveCTReq_default_instance_;
class MoveConveyorReq;
struct MoveConveyorReqDefaultTypeInternal;
extern MoveConveyorReqDefaultTypeInternal _MoveConveyorReq_default_instance_;
class MoveFLRes;
struct MoveFLResDefaultTypeInternal;
extern MoveFLResDefaultTypeInternal _MoveFLRes_default_instance_;
class MoveGcodeReq;
struct MoveGcodeReqDefaultTypeInternal;
extern MoveGcodeReqDefaultTypeInternal _MoveGcodeReq_default_instance_;
class MoveJCondReq;
struct MoveJCondReqDefaultTypeInternal;
extern MoveJCondReqDefaultTypeInternal _MoveJCondReq_default_instance_;
class MoveJReq;
struct MoveJReqDefaultTypeInternal;
extern MoveJReqDefaultTypeInternal _MoveJReq_default_instance_;
class MoveJTReq;
struct MoveJTReqDefaultTypeInternal;
extern MoveJTReqDefaultTypeInternal _MoveJTReq_default_instance_;
class MoveJointTrajReq;
struct MoveJointTrajReqDefaultTypeInternal;
extern MoveJointTrajReqDefaultTypeInternal _MoveJointTrajReq_default_instance_;
class MoveLFReq;
struct MoveLFReqDefaultTypeInternal;
extern MoveLFReqDefaultTypeInternal _MoveLFReq_default_instance_;
class MoveLReq;
struct MoveLReqDefaultTypeInternal;
extern MoveLReqDefaultTypeInternal _MoveLReq_default_instance_;
class MoveLTReq;
struct MoveLTReqDefaultTypeInternal;
extern MoveLTReqDefaultTypeInternal _MoveLTReq_default_instance_;
class MoveTaskTrajReq;
struct MoveTaskTrajReqDefaultTypeInternal;
extern MoveTaskTrajReqDefaultTypeInternal _MoveTaskTrajReq_default_instance_;
class MoveTeleJReq;
struct MoveTeleJReqDefaultTypeInternal;
extern MoveTeleJReqDefaultTypeInternal _MoveTeleJReq_default_instance_;
class MoveTeleLReq;
struct MoveTeleLReqDefaultTypeInternal;
extern MoveTeleLReqDefaultTypeInternal _MoveTeleLReq_default_instance_;
class PalletPoint;
struct PalletPointDefaultTypeInternal;
extern PalletPointDefaultTypeInternal _PalletPoint_default_instance_;
class Program;
struct ProgramDefaultTypeInternal;
extern ProgramDefaultTypeInternal _Program_default_instance_;
class ProgramInfo;
struct ProgramInfoDefaultTypeInternal;
extern ProgramInfoDefaultTypeInternal _ProgramInfo_default_instance_;
class SDKLicenseInfo;
struct SDKLicenseInfoDefaultTypeInternal;
extern SDKLicenseInfoDefaultTypeInternal _SDKLicenseInfo_default_instance_;
class SDKLicenseResp;
struct SDKLicenseRespDefaultTypeInternal;
extern SDKLicenseRespDefaultTypeInternal _SDKLicenseResp_default_instance_;
class TPosVariable;
struct TPosVariableDefaultTypeInternal;
extern TPosVariableDefaultTypeInternal _TPosVariable_default_instance_;
class TPosVars;
struct TPosVarsDefaultTypeInternal;
extern TPosVarsDefaultTypeInternal _TPosVars_default_instance_;
class TargetC;
struct TargetCDefaultTypeInternal;
extern TargetCDefaultTypeInternal _TargetC_default_instance_;
class TargetJ;
struct TargetJDefaultTypeInternal;
extern TargetJDefaultTypeInternal _TargetJ_default_instance_;
class TargetP;
struct TargetPDefaultTypeInternal;
extern TargetPDefaultTypeInternal _TargetP_default_instance_;
class TeleFileReq;
struct TeleFileReqDefaultTypeInternal;
extern TeleFileReqDefaultTypeInternal _TeleFileReq_default_instance_;
class TeleOpDevice;
struct TeleOpDeviceDefaultTypeInternal;
extern TeleOpDeviceDefaultTypeInternal _TeleOpDevice_default_instance_;
class TeleOpFileList;
struct TeleOpFileListDefaultTypeInternal;
extern TeleOpFileListDefaultTypeInternal _TeleOpFileList_default_instance_;
class TeleOpState;
struct TeleOpStateDefaultTypeInternal;
extern TeleOpStateDefaultTypeInternal _TeleOpState_default_instance_;
class TeleP;
struct TelePDefaultTypeInternal;
extern TelePDefaultTypeInternal _TeleP_default_instance_;
class TelePlayRate;
struct TelePlayRateDefaultTypeInternal;
extern TelePlayRateDefaultTypeInternal _TelePlayRate_default_instance_;
class TransformedFTSensorData;
struct TransformedFTSensorDataDefaultTypeInternal;
extern TransformedFTSensorDataDefaultTypeInternal _TransformedFTSensorData_default_instance_;
class TuningProgram;
struct TuningProgramDefaultTypeInternal;
extern TuningProgramDefaultTypeInternal _TuningProgram_default_instance_;
class Variable;
struct VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
class VariableCondition;
struct VariableConditionDefaultTypeInternal;
extern VariableConditionDefaultTypeInternal _VariableCondition_default_instance_;
class WaitIOReq;
struct WaitIOReqDefaultTypeInternal;
extern WaitIOReqDefaultTypeInternal _WaitIOReq_default_instance_;
class WaitProgressReq;
struct WaitProgressReqDefaultTypeInternal;
extern WaitProgressReqDefaultTypeInternal _WaitProgressReq_default_instance_;
class WaitRadiusReq;
struct WaitRadiusReqDefaultTypeInternal;
extern WaitRadiusReqDefaultTypeInternal _WaitRadiusReq_default_instance_;
class WaitTimeReq;
struct WaitTimeReqDefaultTypeInternal;
extern WaitTimeReqDefaultTypeInternal _WaitTimeReq_default_instance_;
class WaitTrajReq;
struct WaitTrajReqDefaultTypeInternal;
extern WaitTrajReqDefaultTypeInternal _WaitTrajReq_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Nrmk {
namespace IndyFramework {
enum MotionCondition_ConditionType : int {
  MotionCondition_ConditionType_CONST_COND = 0,
  MotionCondition_ConditionType_IO_COND = 1,
  MotionCondition_ConditionType_VAR_COND = 2,
  MotionCondition_ConditionType_MotionCondition_ConditionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MotionCondition_ConditionType_MotionCondition_ConditionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MotionCondition_ConditionType_IsValid(int value);
constexpr MotionCondition_ConditionType MotionCondition_ConditionType_ConditionType_MIN = static_cast<MotionCondition_ConditionType>(0);
constexpr MotionCondition_ConditionType MotionCondition_ConditionType_ConditionType_MAX = static_cast<MotionCondition_ConditionType>(2);
constexpr int MotionCondition_ConditionType_ConditionType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
MotionCondition_ConditionType_descriptor();
template <typename T>
const std::string& MotionCondition_ConditionType_Name(T value) {
  static_assert(std::is_same<T, MotionCondition_ConditionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ConditionType_Name().");
  return MotionCondition_ConditionType_Name(static_cast<MotionCondition_ConditionType>(value));
}
template <>
inline const std::string& MotionCondition_ConditionType_Name(MotionCondition_ConditionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MotionCondition_ConditionType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool MotionCondition_ConditionType_Parse(absl::string_view name, MotionCondition_ConditionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MotionCondition_ConditionType>(
      MotionCondition_ConditionType_descriptor(), name, value);
}
enum MotionCondition_ReactionType : int {
  MotionCondition_ReactionType_NONE_COND = 0,
  MotionCondition_ReactionType_STOP_COND = 1,
  MotionCondition_ReactionType_PAUSE_COND = 2,
  MotionCondition_ReactionType_MotionCondition_ReactionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MotionCondition_ReactionType_MotionCondition_ReactionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MotionCondition_ReactionType_IsValid(int value);
constexpr MotionCondition_ReactionType MotionCondition_ReactionType_ReactionType_MIN = static_cast<MotionCondition_ReactionType>(0);
constexpr MotionCondition_ReactionType MotionCondition_ReactionType_ReactionType_MAX = static_cast<MotionCondition_ReactionType>(2);
constexpr int MotionCondition_ReactionType_ReactionType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
MotionCondition_ReactionType_descriptor();
template <typename T>
const std::string& MotionCondition_ReactionType_Name(T value) {
  static_assert(std::is_same<T, MotionCondition_ReactionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ReactionType_Name().");
  return MotionCondition_ReactionType_Name(static_cast<MotionCondition_ReactionType>(value));
}
template <>
inline const std::string& MotionCondition_ReactionType_Name(MotionCondition_ReactionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MotionCondition_ReactionType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool MotionCondition_ReactionType_Parse(absl::string_view name, MotionCondition_ReactionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MotionCondition_ReactionType>(
      MotionCondition_ReactionType_descriptor(), name, value);
}
enum BlendingType_Type : int {
  BlendingType_Type_NONE = 0,
  BlendingType_Type_OVERRIDE = 1,
  BlendingType_Type_DUPLICATE = 2,
  BlendingType_Type_BlendingType_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BlendingType_Type_BlendingType_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BlendingType_Type_IsValid(int value);
constexpr BlendingType_Type BlendingType_Type_Type_MIN = static_cast<BlendingType_Type>(0);
constexpr BlendingType_Type BlendingType_Type_Type_MAX = static_cast<BlendingType_Type>(2);
constexpr int BlendingType_Type_Type_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
BlendingType_Type_descriptor();
template <typename T>
const std::string& BlendingType_Type_Name(T value) {
  static_assert(std::is_same<T, BlendingType_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return BlendingType_Type_Name(static_cast<BlendingType_Type>(value));
}
template <>
inline const std::string& BlendingType_Type_Name(BlendingType_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BlendingType_Type_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool BlendingType_Type_Parse(absl::string_view name, BlendingType_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlendingType_Type>(
      BlendingType_Type_descriptor(), name, value);
}
enum ModbusVariable_SignalType : int {
  ModbusVariable_SignalType_ReadCoil = 0,
  ModbusVariable_SignalType_WriteCoil = 1,
  ModbusVariable_SignalType_ReadRegister = 2,
  ModbusVariable_SignalType_WriteRegister = 3,
  ModbusVariable_SignalType_ModbusVariable_SignalType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ModbusVariable_SignalType_ModbusVariable_SignalType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ModbusVariable_SignalType_IsValid(int value);
constexpr ModbusVariable_SignalType ModbusVariable_SignalType_SignalType_MIN = static_cast<ModbusVariable_SignalType>(0);
constexpr ModbusVariable_SignalType ModbusVariable_SignalType_SignalType_MAX = static_cast<ModbusVariable_SignalType>(3);
constexpr int ModbusVariable_SignalType_SignalType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ModbusVariable_SignalType_descriptor();
template <typename T>
const std::string& ModbusVariable_SignalType_Name(T value) {
  static_assert(std::is_same<T, ModbusVariable_SignalType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SignalType_Name().");
  return ModbusVariable_SignalType_Name(static_cast<ModbusVariable_SignalType>(value));
}
template <>
inline const std::string& ModbusVariable_SignalType_Name(ModbusVariable_SignalType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ModbusVariable_SignalType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ModbusVariable_SignalType_Parse(absl::string_view name, ModbusVariable_SignalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModbusVariable_SignalType>(
      ModbusVariable_SignalType_descriptor(), name, value);
}
enum TeleOpDevice_TeleOpDeviceType : int {
  TeleOpDevice_TeleOpDeviceType_NONE = 0,
  TeleOpDevice_TeleOpDeviceType_VIVE = 1,
  TeleOpDevice_TeleOpDeviceType_TeleOpDevice_TeleOpDeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TeleOpDevice_TeleOpDeviceType_TeleOpDevice_TeleOpDeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TeleOpDevice_TeleOpDeviceType_IsValid(int value);
constexpr TeleOpDevice_TeleOpDeviceType TeleOpDevice_TeleOpDeviceType_TeleOpDeviceType_MIN = static_cast<TeleOpDevice_TeleOpDeviceType>(0);
constexpr TeleOpDevice_TeleOpDeviceType TeleOpDevice_TeleOpDeviceType_TeleOpDeviceType_MAX = static_cast<TeleOpDevice_TeleOpDeviceType>(1);
constexpr int TeleOpDevice_TeleOpDeviceType_TeleOpDeviceType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
TeleOpDevice_TeleOpDeviceType_descriptor();
template <typename T>
const std::string& TeleOpDevice_TeleOpDeviceType_Name(T value) {
  static_assert(std::is_same<T, TeleOpDevice_TeleOpDeviceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TeleOpDeviceType_Name().");
  return TeleOpDevice_TeleOpDeviceType_Name(static_cast<TeleOpDevice_TeleOpDeviceType>(value));
}
template <>
inline const std::string& TeleOpDevice_TeleOpDeviceType_Name(TeleOpDevice_TeleOpDeviceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TeleOpDevice_TeleOpDeviceType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool TeleOpDevice_TeleOpDeviceType_Parse(absl::string_view name, TeleOpDevice_TeleOpDeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TeleOpDevice_TeleOpDeviceType>(
      TeleOpDevice_TeleOpDeviceType_descriptor(), name, value);
}
enum JointBaseType : int {
  ABSOLUTE_JOINT = 0,
  RELATIVE_JOINT = 1,
  JointBaseType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JointBaseType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JointBaseType_IsValid(int value);
constexpr JointBaseType JointBaseType_MIN = static_cast<JointBaseType>(0);
constexpr JointBaseType JointBaseType_MAX = static_cast<JointBaseType>(1);
constexpr int JointBaseType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
JointBaseType_descriptor();
template <typename T>
const std::string& JointBaseType_Name(T value) {
  static_assert(std::is_same<T, JointBaseType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JointBaseType_Name().");
  return JointBaseType_Name(static_cast<JointBaseType>(value));
}
template <>
inline const std::string& JointBaseType_Name(JointBaseType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JointBaseType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool JointBaseType_Parse(absl::string_view name, JointBaseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JointBaseType>(
      JointBaseType_descriptor(), name, value);
}
enum TaskBaseType : int {
  ABSOLUTE_TASK = 0,
  RELATIVE_TASK = 1,
  TCP_TASK = 2,
  TaskBaseType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TaskBaseType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TaskBaseType_IsValid(int value);
constexpr TaskBaseType TaskBaseType_MIN = static_cast<TaskBaseType>(0);
constexpr TaskBaseType TaskBaseType_MAX = static_cast<TaskBaseType>(2);
constexpr int TaskBaseType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
TaskBaseType_descriptor();
template <typename T>
const std::string& TaskBaseType_Name(T value) {
  static_assert(std::is_same<T, TaskBaseType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TaskBaseType_Name().");
  return TaskBaseType_Name(static_cast<TaskBaseType>(value));
}
template <>
inline const std::string& TaskBaseType_Name(TaskBaseType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TaskBaseType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TaskBaseType_Parse(absl::string_view name, TaskBaseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskBaseType>(
      TaskBaseType_descriptor(), name, value);
}
enum VelocityModeType : int {
  TIME_ORIENTED = 0,
  DISP_ORIENTED = 1,
  ROT_ORIENTED = 2,
  VelocityModeType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VelocityModeType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VelocityModeType_IsValid(int value);
constexpr VelocityModeType VelocityModeType_MIN = static_cast<VelocityModeType>(0);
constexpr VelocityModeType VelocityModeType_MAX = static_cast<VelocityModeType>(2);
constexpr int VelocityModeType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
VelocityModeType_descriptor();
template <typename T>
const std::string& VelocityModeType_Name(T value) {
  static_assert(std::is_same<T, VelocityModeType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VelocityModeType_Name().");
  return VelocityModeType_Name(static_cast<VelocityModeType>(value));
}
template <>
inline const std::string& VelocityModeType_Name(VelocityModeType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VelocityModeType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool VelocityModeType_Parse(absl::string_view name, VelocityModeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VelocityModeType>(
      VelocityModeType_descriptor(), name, value);
}
enum CircularSettingType : int {
  POINT_SET = 0,
  CENTER_AXIS = 1,
  CircularSettingType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CircularSettingType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CircularSettingType_IsValid(int value);
constexpr CircularSettingType CircularSettingType_MIN = static_cast<CircularSettingType>(0);
constexpr CircularSettingType CircularSettingType_MAX = static_cast<CircularSettingType>(1);
constexpr int CircularSettingType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
CircularSettingType_descriptor();
template <typename T>
const std::string& CircularSettingType_Name(T value) {
  static_assert(std::is_same<T, CircularSettingType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CircularSettingType_Name().");
  return CircularSettingType_Name(static_cast<CircularSettingType>(value));
}
template <>
inline const std::string& CircularSettingType_Name(CircularSettingType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CircularSettingType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool CircularSettingType_Parse(absl::string_view name, CircularSettingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CircularSettingType>(
      CircularSettingType_descriptor(), name, value);
}
enum CircularMovingType : int {
  CONSTANT = 0,
  RADIAL = 1,
  SMOOTH = 2,
  CircularMovingType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CircularMovingType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CircularMovingType_IsValid(int value);
constexpr CircularMovingType CircularMovingType_MIN = static_cast<CircularMovingType>(0);
constexpr CircularMovingType CircularMovingType_MAX = static_cast<CircularMovingType>(2);
constexpr int CircularMovingType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
CircularMovingType_descriptor();
template <typename T>
const std::string& CircularMovingType_Name(T value) {
  static_assert(std::is_same<T, CircularMovingType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CircularMovingType_Name().");
  return CircularMovingType_Name(static_cast<CircularMovingType>(value));
}
template <>
inline const std::string& CircularMovingType_Name(CircularMovingType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CircularMovingType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CircularMovingType_Parse(absl::string_view name, CircularMovingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CircularMovingType>(
      CircularMovingType_descriptor(), name, value);
}
enum TeleMode : int {
  TELE_INACTIVE = 0,
  TELE_CALIB = 1,
  TELE_RECORD = 2,
  TELE_PLAY = 3,
  TELE_RAW = 10,
  TELE_MOVE = 20,
  TeleMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TeleMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TeleMode_IsValid(int value);
constexpr TeleMode TeleMode_MIN = static_cast<TeleMode>(0);
constexpr TeleMode TeleMode_MAX = static_cast<TeleMode>(20);
constexpr int TeleMode_ARRAYSIZE = 20 + 1;
const ::google::protobuf::EnumDescriptor*
TeleMode_descriptor();
template <typename T>
const std::string& TeleMode_Name(T value) {
  static_assert(std::is_same<T, TeleMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TeleMode_Name().");
  return ::google::protobuf::internal::NameOfEnum(TeleMode_descriptor(), value);
}
inline bool TeleMode_Parse(absl::string_view name, TeleMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TeleMode>(
      TeleMode_descriptor(), name, value);
}
enum TeleMethod : int {
  TELE_TASK_ABSOLUTE = 0,
  TELE_TASK_RELATIVE = 1,
  TELE_TASK_TCP = 2,
  TELE_JOINT_ABSOLUTE = 10,
  TELE_JOINT_RELATIVE = 11,
  TELE_RECORD_ABSOLUTE = 20,
  TeleMethod_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TeleMethod_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TeleMethod_IsValid(int value);
constexpr TeleMethod TeleMethod_MIN = static_cast<TeleMethod>(0);
constexpr TeleMethod TeleMethod_MAX = static_cast<TeleMethod>(20);
constexpr int TeleMethod_ARRAYSIZE = 20 + 1;
const ::google::protobuf::EnumDescriptor*
TeleMethod_descriptor();
template <typename T>
const std::string& TeleMethod_Name(T value) {
  static_assert(std::is_same<T, TeleMethod>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TeleMethod_Name().");
  return ::google::protobuf::internal::NameOfEnum(TeleMethod_descriptor(), value);
}
inline bool TeleMethod_Parse(absl::string_view name, TeleMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TeleMethod>(
      TeleMethod_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ControlInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ControlInfo) */ {
 public:
  inline ControlInfo() : ControlInfo(nullptr) {}
  ~ControlInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ControlInfo(::google::protobuf::internal::ConstantInitialized);

  ControlInfo(const ControlInfo& from);
  ControlInfo(ControlInfo&& from) noexcept
    : ControlInfo() {
    *this = ::std::move(from);
  }

  inline ControlInfo& operator=(const ControlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlInfo& operator=(ControlInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlInfo* internal_default_instance() {
    return reinterpret_cast<const ControlInfo*>(
               &_ControlInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlInfo& a, ControlInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControlInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ControlInfo& from) {
    ControlInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ControlInfo";
  }
  protected:
  explicit ControlInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlVersionFieldNumber = 1,
    kRobotModelFieldNumber = 2,
    kResponseFieldNumber = 100,
  };
  // string control_version = 1;
  void clear_control_version() ;
  const std::string& control_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_control_version(Arg_&& arg, Args_... args);
  std::string* mutable_control_version();
  PROTOBUF_NODISCARD std::string* release_control_version();
  void set_allocated_control_version(std::string* ptr);

  private:
  const std::string& _internal_control_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_control_version(
      const std::string& value);
  std::string* _internal_mutable_control_version();

  public:
  // string robot_model = 2;
  void clear_robot_model() ;
  const std::string& robot_model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_robot_model(Arg_&& arg, Args_... args);
  std::string* mutable_robot_model();
  PROTOBUF_NODISCARD std::string* release_robot_model();
  void set_allocated_robot_model(std::string* ptr);

  private:
  const std::string& _internal_robot_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_model(
      const std::string& value);
  std::string* _internal_mutable_robot_model();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ControlInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 65, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr control_version_;
    ::google::protobuf::internal::ArenaStringPtr robot_model_;
    ::Nrmk::IndyFramework::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class SDKLicenseInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SDKLicenseInfo) */ {
 public:
  inline SDKLicenseInfo() : SDKLicenseInfo(nullptr) {}
  ~SDKLicenseInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SDKLicenseInfo(::google::protobuf::internal::ConstantInitialized);

  SDKLicenseInfo(const SDKLicenseInfo& from);
  SDKLicenseInfo(SDKLicenseInfo&& from) noexcept
    : SDKLicenseInfo() {
    *this = ::std::move(from);
  }

  inline SDKLicenseInfo& operator=(const SDKLicenseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKLicenseInfo& operator=(SDKLicenseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SDKLicenseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SDKLicenseInfo* internal_default_instance() {
    return reinterpret_cast<const SDKLicenseInfo*>(
               &_SDKLicenseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SDKLicenseInfo& a, SDKLicenseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKLicenseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDKLicenseInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SDKLicenseInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SDKLicenseInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SDKLicenseInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SDKLicenseInfo& from) {
    SDKLicenseInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKLicenseInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.SDKLicenseInfo";
  }
  protected:
  explicit SDKLicenseInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLicenseKeyFieldNumber = 1,
    kExpireDateFieldNumber = 2,
  };
  // string license_key = 1;
  void clear_license_key() ;
  const std::string& license_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_license_key(Arg_&& arg, Args_... args);
  std::string* mutable_license_key();
  PROTOBUF_NODISCARD std::string* release_license_key();
  void set_allocated_license_key(std::string* ptr);

  private:
  const std::string& _internal_license_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_license_key(
      const std::string& value);
  std::string* _internal_mutable_license_key();

  public:
  // string expire_date = 2;
  void clear_expire_date() ;
  const std::string& expire_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expire_date(Arg_&& arg, Args_... args);
  std::string* mutable_expire_date();
  PROTOBUF_NODISCARD std::string* release_expire_date();
  void set_allocated_expire_date(std::string* ptr);

  private:
  const std::string& _internal_expire_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expire_date(
      const std::string& value);
  std::string* _internal_mutable_expire_date();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SDKLicenseInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 64, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr license_key_;
    ::google::protobuf::internal::ArenaStringPtr expire_date_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class SDKLicenseResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SDKLicenseResp) */ {
 public:
  inline SDKLicenseResp() : SDKLicenseResp(nullptr) {}
  ~SDKLicenseResp() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SDKLicenseResp(::google::protobuf::internal::ConstantInitialized);

  SDKLicenseResp(const SDKLicenseResp& from);
  SDKLicenseResp(SDKLicenseResp&& from) noexcept
    : SDKLicenseResp() {
    *this = ::std::move(from);
  }

  inline SDKLicenseResp& operator=(const SDKLicenseResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKLicenseResp& operator=(SDKLicenseResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SDKLicenseResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SDKLicenseResp* internal_default_instance() {
    return reinterpret_cast<const SDKLicenseResp*>(
               &_SDKLicenseResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SDKLicenseResp& a, SDKLicenseResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKLicenseResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDKLicenseResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SDKLicenseResp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SDKLicenseResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SDKLicenseResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SDKLicenseResp& from) {
    SDKLicenseResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKLicenseResp* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.SDKLicenseResp";
  }
  protected:
  explicit SDKLicenseResp(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 100,
    kActivatedFieldNumber = 1,
  };
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // bool activated = 1;
  void clear_activated() ;
  bool activated() const;
  void set_activated(bool value);

  private:
  bool _internal_activated() const;
  void _internal_set_activated(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SDKLicenseResp)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::Response* response_;
    bool activated_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class VariableCondition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.VariableCondition) */ {
 public:
  inline VariableCondition() : VariableCondition(nullptr) {}
  ~VariableCondition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VariableCondition(::google::protobuf::internal::ConstantInitialized);

  VariableCondition(const VariableCondition& from);
  VariableCondition(VariableCondition&& from) noexcept
    : VariableCondition() {
    *this = ::std::move(from);
  }

  inline VariableCondition& operator=(const VariableCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableCondition& operator=(VariableCondition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariableCondition& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariableCondition* internal_default_instance() {
    return reinterpret_cast<const VariableCondition*>(
               &_VariableCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VariableCondition& a, VariableCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableCondition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableCondition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VariableCondition* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VariableCondition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VariableCondition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VariableCondition& from) {
    VariableCondition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableCondition* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.VariableCondition";
  }
  protected:
  explicit VariableCondition(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIVarsFieldNumber = 1,
    kFVarsFieldNumber = 2,
    kBVarsFieldNumber = 3,
    kMVarsFieldNumber = 4,
    kJVarsFieldNumber = 5,
    kTVarsFieldNumber = 6,
  };
  // repeated .Nrmk.IndyFramework.IntVariable i_vars = 1;
  int i_vars_size() const;
  private:
  int _internal_i_vars_size() const;

  public:
  void clear_i_vars() ;
  ::Nrmk::IndyFramework::IntVariable* mutable_i_vars(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >*
      mutable_i_vars();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::IntVariable>& _internal_i_vars() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::IntVariable>* _internal_mutable_i_vars();
  public:
  const ::Nrmk::IndyFramework::IntVariable& i_vars(int index) const;
  ::Nrmk::IndyFramework::IntVariable* add_i_vars();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >&
      i_vars() const;
  // repeated .Nrmk.IndyFramework.FloatVariable f_vars = 2;
  int f_vars_size() const;
  private:
  int _internal_f_vars_size() const;

  public:
  void clear_f_vars() ;
  ::Nrmk::IndyFramework::FloatVariable* mutable_f_vars(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >*
      mutable_f_vars();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::FloatVariable>& _internal_f_vars() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::FloatVariable>* _internal_mutable_f_vars();
  public:
  const ::Nrmk::IndyFramework::FloatVariable& f_vars(int index) const;
  ::Nrmk::IndyFramework::FloatVariable* add_f_vars();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >&
      f_vars() const;
  // repeated .Nrmk.IndyFramework.BoolVariable b_vars = 3;
  int b_vars_size() const;
  private:
  int _internal_b_vars_size() const;

  public:
  void clear_b_vars() ;
  ::Nrmk::IndyFramework::BoolVariable* mutable_b_vars(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >*
      mutable_b_vars();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::BoolVariable>& _internal_b_vars() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::BoolVariable>* _internal_mutable_b_vars();
  public:
  const ::Nrmk::IndyFramework::BoolVariable& b_vars(int index) const;
  ::Nrmk::IndyFramework::BoolVariable* add_b_vars();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >&
      b_vars() const;
  // repeated .Nrmk.IndyFramework.ModbusVariable m_vars = 4;
  int m_vars_size() const;
  private:
  int _internal_m_vars_size() const;

  public:
  void clear_m_vars() ;
  ::Nrmk::IndyFramework::ModbusVariable* mutable_m_vars(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >*
      mutable_m_vars();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusVariable>& _internal_m_vars() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusVariable>* _internal_mutable_m_vars();
  public:
  const ::Nrmk::IndyFramework::ModbusVariable& m_vars(int index) const;
  ::Nrmk::IndyFramework::ModbusVariable* add_m_vars();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >&
      m_vars() const;
  // repeated .Nrmk.IndyFramework.JPosVariable j_vars = 5;
  int j_vars_size() const;
  private:
  int _internal_j_vars_size() const;

  public:
  void clear_j_vars() ;
  ::Nrmk::IndyFramework::JPosVariable* mutable_j_vars(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >*
      mutable_j_vars();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::JPosVariable>& _internal_j_vars() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::JPosVariable>* _internal_mutable_j_vars();
  public:
  const ::Nrmk::IndyFramework::JPosVariable& j_vars(int index) const;
  ::Nrmk::IndyFramework::JPosVariable* add_j_vars();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >&
      j_vars() const;
  // repeated .Nrmk.IndyFramework.TPosVariable t_vars = 6;
  int t_vars_size() const;
  private:
  int _internal_t_vars_size() const;

  public:
  void clear_t_vars() ;
  ::Nrmk::IndyFramework::TPosVariable* mutable_t_vars(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >*
      mutable_t_vars();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::TPosVariable>& _internal_t_vars() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::TPosVariable>* _internal_mutable_t_vars();
  public:
  const ::Nrmk::IndyFramework::TPosVariable& t_vars(int index) const;
  ::Nrmk::IndyFramework::TPosVariable* add_t_vars();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >&
      t_vars() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.VariableCondition)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 6, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable > i_vars_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable > f_vars_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable > b_vars_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable > m_vars_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable > j_vars_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable > t_vars_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class IOCondition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IOCondition) */ {
 public:
  inline IOCondition() : IOCondition(nullptr) {}
  ~IOCondition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IOCondition(::google::protobuf::internal::ConstantInitialized);

  IOCondition(const IOCondition& from);
  IOCondition(IOCondition&& from) noexcept
    : IOCondition() {
    *this = ::std::move(from);
  }

  inline IOCondition& operator=(const IOCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOCondition& operator=(IOCondition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IOCondition& default_instance() {
    return *internal_default_instance();
  }
  static inline const IOCondition* internal_default_instance() {
    return reinterpret_cast<const IOCondition*>(
               &_IOCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IOCondition& a, IOCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(IOCondition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IOCondition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IOCondition* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IOCondition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IOCondition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IOCondition& from) {
    IOCondition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOCondition* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.IOCondition";
  }
  protected:
  explicit IOCondition(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiFieldNumber = 1,
    kEndDiFieldNumber = 2,
  };
  // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
  int di_size() const;
  private:
  int _internal_di_size() const;

  public:
  void clear_di() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_di(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_di();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_di() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_di();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& di(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_di();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      di() const;
  // repeated .Nrmk.IndyFramework.DigitalSignal end_di = 2;
  int end_di_size() const;
  private:
  int _internal_end_di_size() const;

  public:
  void clear_end_di() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_end_di(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_end_di();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_end_di() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_end_di();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& end_di(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_end_di();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      end_di() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IOCondition)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > di_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > end_di_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MotionCondition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MotionCondition) */ {
 public:
  inline MotionCondition() : MotionCondition(nullptr) {}
  ~MotionCondition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MotionCondition(::google::protobuf::internal::ConstantInitialized);

  MotionCondition(const MotionCondition& from);
  MotionCondition(MotionCondition&& from) noexcept
    : MotionCondition() {
    *this = ::std::move(from);
  }

  inline MotionCondition& operator=(const MotionCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionCondition& operator=(MotionCondition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionCondition& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionCondition* internal_default_instance() {
    return reinterpret_cast<const MotionCondition*>(
               &_MotionCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MotionCondition& a, MotionCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionCondition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionCondition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotionCondition* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotionCondition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MotionCondition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MotionCondition& from) {
    MotionCondition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionCondition* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MotionCondition";
  }
  protected:
  explicit MotionCondition(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ConditionType = MotionCondition_ConditionType;
  static constexpr ConditionType CONST_COND = MotionCondition_ConditionType_CONST_COND;
  static constexpr ConditionType IO_COND = MotionCondition_ConditionType_IO_COND;
  static constexpr ConditionType VAR_COND = MotionCondition_ConditionType_VAR_COND;
  static inline bool ConditionType_IsValid(int value) {
    return MotionCondition_ConditionType_IsValid(value);
  }
  static constexpr ConditionType ConditionType_MIN = MotionCondition_ConditionType_ConditionType_MIN;
  static constexpr ConditionType ConditionType_MAX = MotionCondition_ConditionType_ConditionType_MAX;
  static constexpr int ConditionType_ARRAYSIZE = MotionCondition_ConditionType_ConditionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ConditionType_descriptor() {
    return MotionCondition_ConditionType_descriptor();
  }
  template <typename T>
  static inline const std::string& ConditionType_Name(T value) {
    return MotionCondition_ConditionType_Name(value);
  }
  static inline bool ConditionType_Parse(absl::string_view name, ConditionType* value) {
    return MotionCondition_ConditionType_Parse(name, value);
  }

  using ReactionType = MotionCondition_ReactionType;
  static constexpr ReactionType NONE_COND = MotionCondition_ReactionType_NONE_COND;
  static constexpr ReactionType STOP_COND = MotionCondition_ReactionType_STOP_COND;
  static constexpr ReactionType PAUSE_COND = MotionCondition_ReactionType_PAUSE_COND;
  static inline bool ReactionType_IsValid(int value) {
    return MotionCondition_ReactionType_IsValid(value);
  }
  static constexpr ReactionType ReactionType_MIN = MotionCondition_ReactionType_ReactionType_MIN;
  static constexpr ReactionType ReactionType_MAX = MotionCondition_ReactionType_ReactionType_MAX;
  static constexpr int ReactionType_ARRAYSIZE = MotionCondition_ReactionType_ReactionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ReactionType_descriptor() {
    return MotionCondition_ReactionType_descriptor();
  }
  template <typename T>
  static inline const std::string& ReactionType_Name(T value) {
    return MotionCondition_ReactionType_Name(value);
  }
  static inline bool ReactionType_Parse(absl::string_view name, ReactionType* value) {
    return MotionCondition_ReactionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIoCondFieldNumber = 4,
    kVarCondFieldNumber = 5,
    kTypeCondFieldNumber = 1,
    kTypeReactFieldNumber = 2,
    kConstCondFieldNumber = 3,
  };
  // .Nrmk.IndyFramework.IOCondition io_cond = 4;
  bool has_io_cond() const;
  void clear_io_cond() ;
  const ::Nrmk::IndyFramework::IOCondition& io_cond() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::IOCondition* release_io_cond();
  ::Nrmk::IndyFramework::IOCondition* mutable_io_cond();
  void set_allocated_io_cond(::Nrmk::IndyFramework::IOCondition* value);
  void unsafe_arena_set_allocated_io_cond(::Nrmk::IndyFramework::IOCondition* value);
  ::Nrmk::IndyFramework::IOCondition* unsafe_arena_release_io_cond();

  private:
  const ::Nrmk::IndyFramework::IOCondition& _internal_io_cond() const;
  ::Nrmk::IndyFramework::IOCondition* _internal_mutable_io_cond();

  public:
  // .Nrmk.IndyFramework.VariableCondition var_cond = 5;
  bool has_var_cond() const;
  void clear_var_cond() ;
  const ::Nrmk::IndyFramework::VariableCondition& var_cond() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::VariableCondition* release_var_cond();
  ::Nrmk::IndyFramework::VariableCondition* mutable_var_cond();
  void set_allocated_var_cond(::Nrmk::IndyFramework::VariableCondition* value);
  void unsafe_arena_set_allocated_var_cond(::Nrmk::IndyFramework::VariableCondition* value);
  ::Nrmk::IndyFramework::VariableCondition* unsafe_arena_release_var_cond();

  private:
  const ::Nrmk::IndyFramework::VariableCondition& _internal_var_cond() const;
  ::Nrmk::IndyFramework::VariableCondition* _internal_mutable_var_cond();

  public:
  // .Nrmk.IndyFramework.MotionCondition.ConditionType type_cond = 1;
  void clear_type_cond() ;
  ::Nrmk::IndyFramework::MotionCondition_ConditionType type_cond() const;
  void set_type_cond(::Nrmk::IndyFramework::MotionCondition_ConditionType value);

  private:
  ::Nrmk::IndyFramework::MotionCondition_ConditionType _internal_type_cond() const;
  void _internal_set_type_cond(::Nrmk::IndyFramework::MotionCondition_ConditionType value);

  public:
  // .Nrmk.IndyFramework.MotionCondition.ReactionType type_react = 2;
  void clear_type_react() ;
  ::Nrmk::IndyFramework::MotionCondition_ReactionType type_react() const;
  void set_type_react(::Nrmk::IndyFramework::MotionCondition_ReactionType value);

  private:
  ::Nrmk::IndyFramework::MotionCondition_ReactionType _internal_type_react() const;
  void _internal_set_type_react(::Nrmk::IndyFramework::MotionCondition_ReactionType value);

  public:
  // bool const_cond = 3;
  void clear_const_cond() ;
  bool const_cond() const;
  void set_const_cond(bool value);

  private:
  bool _internal_const_cond() const;
  void _internal_set_const_cond(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MotionCondition)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::IOCondition* io_cond_;
    ::Nrmk::IndyFramework::VariableCondition* var_cond_;
    int type_cond_;
    int type_react_;
    bool const_cond_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class BlendingType final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.BlendingType) */ {
 public:
  inline BlendingType() : BlendingType(nullptr) {}
  ~BlendingType() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlendingType(::google::protobuf::internal::ConstantInitialized);

  BlendingType(const BlendingType& from);
  BlendingType(BlendingType&& from) noexcept
    : BlendingType() {
    *this = ::std::move(from);
  }

  inline BlendingType& operator=(const BlendingType& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlendingType& operator=(BlendingType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlendingType& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlendingType* internal_default_instance() {
    return reinterpret_cast<const BlendingType*>(
               &_BlendingType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BlendingType& a, BlendingType& b) {
    a.Swap(&b);
  }
  inline void Swap(BlendingType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlendingType* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlendingType* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlendingType>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlendingType& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BlendingType& from) {
    BlendingType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlendingType* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.BlendingType";
  }
  protected:
  explicit BlendingType(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = BlendingType_Type;
  static constexpr Type NONE = BlendingType_Type_NONE;
  static constexpr Type OVERRIDE = BlendingType_Type_OVERRIDE;
  static constexpr Type DUPLICATE = BlendingType_Type_DUPLICATE;
  static inline bool Type_IsValid(int value) {
    return BlendingType_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = BlendingType_Type_Type_MIN;
  static constexpr Type Type_MAX = BlendingType_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = BlendingType_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return BlendingType_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return BlendingType_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return BlendingType_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kBlendingRadiusFieldNumber = 2,
  };
  // .Nrmk.IndyFramework.BlendingType.Type type = 1;
  void clear_type() ;
  ::Nrmk::IndyFramework::BlendingType_Type type() const;
  void set_type(::Nrmk::IndyFramework::BlendingType_Type value);

  private:
  ::Nrmk::IndyFramework::BlendingType_Type _internal_type() const;
  void _internal_set_type(::Nrmk::IndyFramework::BlendingType_Type value);

  public:
  // float blending_radius = 2;
  void clear_blending_radius() ;
  float blending_radius() const;
  void set_blending_radius(float value);

  private:
  float _internal_blending_radius() const;
  void _internal_set_blending_radius(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.BlendingType)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    float blending_radius_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TargetJ final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TargetJ) */ {
 public:
  inline TargetJ() : TargetJ(nullptr) {}
  ~TargetJ() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TargetJ(::google::protobuf::internal::ConstantInitialized);

  TargetJ(const TargetJ& from);
  TargetJ(TargetJ&& from) noexcept
    : TargetJ() {
    *this = ::std::move(from);
  }

  inline TargetJ& operator=(const TargetJ& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetJ& operator=(TargetJ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetJ& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetJ* internal_default_instance() {
    return reinterpret_cast<const TargetJ*>(
               &_TargetJ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TargetJ& a, TargetJ& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetJ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetJ* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetJ* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TargetJ>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TargetJ& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TargetJ& from) {
    TargetJ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetJ* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TargetJ";
  }
  protected:
  explicit TargetJ(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJStartFieldNumber = 1,
    kJTargetFieldNumber = 2,
    kBaseTypeFieldNumber = 3,
  };
  // repeated float j_start = 1;
  int j_start_size() const;
  private:
  int _internal_j_start_size() const;

  public:
  void clear_j_start() ;
  float j_start(int index) const;
  void set_j_start(int index, float value);
  void add_j_start(float value);
  const ::google::protobuf::RepeatedField<float>& j_start() const;
  ::google::protobuf::RepeatedField<float>* mutable_j_start();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_j_start() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_j_start();

  public:
  // repeated float j_target = 2;
  int j_target_size() const;
  private:
  int _internal_j_target_size() const;

  public:
  void clear_j_target() ;
  float j_target(int index) const;
  void set_j_target(int index, float value);
  void add_j_target(float value);
  const ::google::protobuf::RepeatedField<float>& j_target() const;
  ::google::protobuf::RepeatedField<float>* mutable_j_target();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_j_target() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_j_target();

  public:
  // .Nrmk.IndyFramework.JointBaseType base_type = 3;
  void clear_base_type() ;
  ::Nrmk::IndyFramework::JointBaseType base_type() const;
  void set_base_type(::Nrmk::IndyFramework::JointBaseType value);

  private:
  ::Nrmk::IndyFramework::JointBaseType _internal_base_type() const;
  void _internal_set_base_type(::Nrmk::IndyFramework::JointBaseType value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TargetJ)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> j_start_;
    ::google::protobuf::RepeatedField<float> j_target_;
    int base_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveJReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveJReq) */ {
 public:
  inline MoveJReq() : MoveJReq(nullptr) {}
  ~MoveJReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveJReq(::google::protobuf::internal::ConstantInitialized);

  MoveJReq(const MoveJReq& from);
  MoveJReq(MoveJReq&& from) noexcept
    : MoveJReq() {
    *this = ::std::move(from);
  }

  inline MoveJReq& operator=(const MoveJReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveJReq& operator=(MoveJReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveJReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveJReq* internal_default_instance() {
    return reinterpret_cast<const MoveJReq*>(
               &_MoveJReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MoveJReq& a, MoveJReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveJReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveJReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveJReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveJReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveJReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveJReq& from) {
    MoveJReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveJReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveJReq";
  }
  protected:
  explicit MoveJReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kBlendingFieldNumber = 2,
    kPostConditionFieldNumber = 20,
    kVelRatioFieldNumber = 3,
    kAccRatioFieldNumber = 4,
    kTeachingModeFieldNumber = 30,
  };
  // .Nrmk.IndyFramework.TargetJ target = 1;
  bool has_target() const;
  void clear_target() ;
  const ::Nrmk::IndyFramework::TargetJ& target() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::TargetJ* release_target();
  ::Nrmk::IndyFramework::TargetJ* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetJ* value);
  void unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetJ* value);
  ::Nrmk::IndyFramework::TargetJ* unsafe_arena_release_target();

  private:
  const ::Nrmk::IndyFramework::TargetJ& _internal_target() const;
  ::Nrmk::IndyFramework::TargetJ* _internal_mutable_target();

  public:
  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending() ;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  void unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  ::Nrmk::IndyFramework::BlendingType* unsafe_arena_release_blending();

  private:
  const ::Nrmk::IndyFramework::BlendingType& _internal_blending() const;
  ::Nrmk::IndyFramework::BlendingType* _internal_mutable_blending();

  public:
  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  bool has_post_condition() const;
  void clear_post_condition() ;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  void unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  ::Nrmk::IndyFramework::MotionCondition* unsafe_arena_release_post_condition();

  private:
  const ::Nrmk::IndyFramework::MotionCondition& _internal_post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* _internal_mutable_post_condition();

  public:
  // float vel_ratio = 3;
  void clear_vel_ratio() ;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  private:
  float _internal_vel_ratio() const;
  void _internal_set_vel_ratio(float value);

  public:
  // float acc_ratio = 4;
  void clear_acc_ratio() ;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  private:
  float _internal_acc_ratio() const;
  void _internal_set_acc_ratio(float value);

  public:
  // bool teaching_mode = 30;
  void clear_teaching_mode() ;
  bool teaching_mode() const;
  void set_teaching_mode(bool value);

  private:
  bool _internal_teaching_mode() const;
  void _internal_set_teaching_mode(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveJReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::TargetJ* target_;
    ::Nrmk::IndyFramework::BlendingType* blending_;
    ::Nrmk::IndyFramework::MotionCondition* post_condition_;
    float vel_ratio_;
    float acc_ratio_;
    bool teaching_mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveJCondReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveJCondReq) */ {
 public:
  inline MoveJCondReq() : MoveJCondReq(nullptr) {}
  ~MoveJCondReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveJCondReq(::google::protobuf::internal::ConstantInitialized);

  MoveJCondReq(const MoveJCondReq& from);
  MoveJCondReq(MoveJCondReq&& from) noexcept
    : MoveJCondReq() {
    *this = ::std::move(from);
  }

  inline MoveJCondReq& operator=(const MoveJCondReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveJCondReq& operator=(MoveJCondReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveJCondReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveJCondReq* internal_default_instance() {
    return reinterpret_cast<const MoveJCondReq*>(
               &_MoveJCondReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MoveJCondReq& a, MoveJCondReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveJCondReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveJCondReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveJCondReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveJCondReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveJCondReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveJCondReq& from) {
    MoveJCondReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveJCondReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveJCondReq";
  }
  protected:
  explicit MoveJCondReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kBlendingFieldNumber = 2,
    kPostConditionFieldNumber = 20,
    kVelRatioFieldNumber = 3,
    kAccRatioFieldNumber = 4,
    kTeachingModeFieldNumber = 30,
  };
  // .Nrmk.IndyFramework.TargetJ target = 1;
  bool has_target() const;
  void clear_target() ;
  const ::Nrmk::IndyFramework::TargetJ& target() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::TargetJ* release_target();
  ::Nrmk::IndyFramework::TargetJ* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetJ* value);
  void unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetJ* value);
  ::Nrmk::IndyFramework::TargetJ* unsafe_arena_release_target();

  private:
  const ::Nrmk::IndyFramework::TargetJ& _internal_target() const;
  ::Nrmk::IndyFramework::TargetJ* _internal_mutable_target();

  public:
  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending() ;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  void unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  ::Nrmk::IndyFramework::BlendingType* unsafe_arena_release_blending();

  private:
  const ::Nrmk::IndyFramework::BlendingType& _internal_blending() const;
  ::Nrmk::IndyFramework::BlendingType* _internal_mutable_blending();

  public:
  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  bool has_post_condition() const;
  void clear_post_condition() ;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  void unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  ::Nrmk::IndyFramework::MotionCondition* unsafe_arena_release_post_condition();

  private:
  const ::Nrmk::IndyFramework::MotionCondition& _internal_post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* _internal_mutable_post_condition();

  public:
  // float vel_ratio = 3;
  void clear_vel_ratio() ;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  private:
  float _internal_vel_ratio() const;
  void _internal_set_vel_ratio(float value);

  public:
  // float acc_ratio = 4;
  void clear_acc_ratio() ;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  private:
  float _internal_acc_ratio() const;
  void _internal_set_acc_ratio(float value);

  public:
  // bool teaching_mode = 30;
  void clear_teaching_mode() ;
  bool teaching_mode() const;
  void set_teaching_mode(bool value);

  private:
  bool _internal_teaching_mode() const;
  void _internal_set_teaching_mode(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveJCondReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::TargetJ* target_;
    ::Nrmk::IndyFramework::BlendingType* blending_;
    ::Nrmk::IndyFramework::MotionCondition* post_condition_;
    float vel_ratio_;
    float acc_ratio_;
    bool teaching_mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveJTReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveJTReq) */ {
 public:
  inline MoveJTReq() : MoveJTReq(nullptr) {}
  ~MoveJTReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveJTReq(::google::protobuf::internal::ConstantInitialized);

  MoveJTReq(const MoveJTReq& from);
  MoveJTReq(MoveJTReq&& from) noexcept
    : MoveJTReq() {
    *this = ::std::move(from);
  }

  inline MoveJTReq& operator=(const MoveJTReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveJTReq& operator=(MoveJTReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveJTReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveJTReq* internal_default_instance() {
    return reinterpret_cast<const MoveJTReq*>(
               &_MoveJTReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MoveJTReq& a, MoveJTReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveJTReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveJTReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveJTReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveJTReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveJTReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveJTReq& from) {
    MoveJTReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveJTReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveJTReq";
  }
  protected:
  explicit MoveJTReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kBlendingFieldNumber = 2,
    kPostConditionFieldNumber = 20,
    kTimeFieldNumber = 3,
  };
  // .Nrmk.IndyFramework.TargetJ target = 1;
  bool has_target() const;
  void clear_target() ;
  const ::Nrmk::IndyFramework::TargetJ& target() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::TargetJ* release_target();
  ::Nrmk::IndyFramework::TargetJ* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetJ* value);
  void unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetJ* value);
  ::Nrmk::IndyFramework::TargetJ* unsafe_arena_release_target();

  private:
  const ::Nrmk::IndyFramework::TargetJ& _internal_target() const;
  ::Nrmk::IndyFramework::TargetJ* _internal_mutable_target();

  public:
  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending() ;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  void unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  ::Nrmk::IndyFramework::BlendingType* unsafe_arena_release_blending();

  private:
  const ::Nrmk::IndyFramework::BlendingType& _internal_blending() const;
  ::Nrmk::IndyFramework::BlendingType* _internal_mutable_blending();

  public:
  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  bool has_post_condition() const;
  void clear_post_condition() ;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  void unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  ::Nrmk::IndyFramework::MotionCondition* unsafe_arena_release_post_condition();

  private:
  const ::Nrmk::IndyFramework::MotionCondition& _internal_post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* _internal_mutable_post_condition();

  public:
  // float time = 3;
  void clear_time() ;
  float time() const;
  void set_time(float value);

  private:
  float _internal_time() const;
  void _internal_set_time(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveJTReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::TargetJ* target_;
    ::Nrmk::IndyFramework::BlendingType* blending_;
    ::Nrmk::IndyFramework::MotionCondition* post_condition_;
    float time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TargetP final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TargetP) */ {
 public:
  inline TargetP() : TargetP(nullptr) {}
  ~TargetP() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TargetP(::google::protobuf::internal::ConstantInitialized);

  TargetP(const TargetP& from);
  TargetP(TargetP&& from) noexcept
    : TargetP() {
    *this = ::std::move(from);
  }

  inline TargetP& operator=(const TargetP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetP& operator=(TargetP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetP& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetP* internal_default_instance() {
    return reinterpret_cast<const TargetP*>(
               &_TargetP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TargetP& a, TargetP& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetP* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetP* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TargetP>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TargetP& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TargetP& from) {
    TargetP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetP* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TargetP";
  }
  protected:
  explicit TargetP(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTStartFieldNumber = 1,
    kTTargetFieldNumber = 2,
    kBaseTypeFieldNumber = 3,
  };
  // repeated float t_start = 1;
  int t_start_size() const;
  private:
  int _internal_t_start_size() const;

  public:
  void clear_t_start() ;
  float t_start(int index) const;
  void set_t_start(int index, float value);
  void add_t_start(float value);
  const ::google::protobuf::RepeatedField<float>& t_start() const;
  ::google::protobuf::RepeatedField<float>* mutable_t_start();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_t_start() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_t_start();

  public:
  // repeated float t_target = 2;
  int t_target_size() const;
  private:
  int _internal_t_target_size() const;

  public:
  void clear_t_target() ;
  float t_target(int index) const;
  void set_t_target(int index, float value);
  void add_t_target(float value);
  const ::google::protobuf::RepeatedField<float>& t_target() const;
  ::google::protobuf::RepeatedField<float>* mutable_t_target();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_t_target() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_t_target();

  public:
  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  void clear_base_type() ;
  ::Nrmk::IndyFramework::TaskBaseType base_type() const;
  void set_base_type(::Nrmk::IndyFramework::TaskBaseType value);

  private:
  ::Nrmk::IndyFramework::TaskBaseType _internal_base_type() const;
  void _internal_set_base_type(::Nrmk::IndyFramework::TaskBaseType value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TargetP)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> t_start_;
    ::google::protobuf::RepeatedField<float> t_target_;
    int base_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TargetC final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TargetC) */ {
 public:
  inline TargetC() : TargetC(nullptr) {}
  ~TargetC() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TargetC(::google::protobuf::internal::ConstantInitialized);

  TargetC(const TargetC& from);
  TargetC(TargetC&& from) noexcept
    : TargetC() {
    *this = ::std::move(from);
  }

  inline TargetC& operator=(const TargetC& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetC& operator=(TargetC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetC& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetC* internal_default_instance() {
    return reinterpret_cast<const TargetC*>(
               &_TargetC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TargetC& a, TargetC& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetC* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetC* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TargetC>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TargetC& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TargetC& from) {
    TargetC::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetC* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TargetC";
  }
  protected:
  explicit TargetC(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTStartFieldNumber = 1,
    kTPos0FieldNumber = 2,
    kTPos1FieldNumber = 3,
    kBaseTypeFieldNumber = 4,
  };
  // repeated float t_start = 1;
  int t_start_size() const;
  private:
  int _internal_t_start_size() const;

  public:
  void clear_t_start() ;
  float t_start(int index) const;
  void set_t_start(int index, float value);
  void add_t_start(float value);
  const ::google::protobuf::RepeatedField<float>& t_start() const;
  ::google::protobuf::RepeatedField<float>* mutable_t_start();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_t_start() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_t_start();

  public:
  // repeated float t_pos0 = 2;
  int t_pos0_size() const;
  private:
  int _internal_t_pos0_size() const;

  public:
  void clear_t_pos0() ;
  float t_pos0(int index) const;
  void set_t_pos0(int index, float value);
  void add_t_pos0(float value);
  const ::google::protobuf::RepeatedField<float>& t_pos0() const;
  ::google::protobuf::RepeatedField<float>* mutable_t_pos0();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_t_pos0() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_t_pos0();

  public:
  // repeated float t_pos1 = 3;
  int t_pos1_size() const;
  private:
  int _internal_t_pos1_size() const;

  public:
  void clear_t_pos1() ;
  float t_pos1(int index) const;
  void set_t_pos1(int index, float value);
  void add_t_pos1(float value);
  const ::google::protobuf::RepeatedField<float>& t_pos1() const;
  ::google::protobuf::RepeatedField<float>* mutable_t_pos1();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_t_pos1() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_t_pos1();

  public:
  // .Nrmk.IndyFramework.TaskBaseType base_type = 4;
  void clear_base_type() ;
  ::Nrmk::IndyFramework::TaskBaseType base_type() const;
  void set_base_type(::Nrmk::IndyFramework::TaskBaseType value);

  private:
  ::Nrmk::IndyFramework::TaskBaseType _internal_base_type() const;
  void _internal_set_base_type(::Nrmk::IndyFramework::TaskBaseType value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TargetC)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> t_start_;
    ::google::protobuf::RepeatedField<float> t_pos0_;
    ::google::protobuf::RepeatedField<float> t_pos1_;
    int base_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveLReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveLReq) */ {
 public:
  inline MoveLReq() : MoveLReq(nullptr) {}
  ~MoveLReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveLReq(::google::protobuf::internal::ConstantInitialized);

  MoveLReq(const MoveLReq& from);
  MoveLReq(MoveLReq&& from) noexcept
    : MoveLReq() {
    *this = ::std::move(from);
  }

  inline MoveLReq& operator=(const MoveLReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveLReq& operator=(MoveLReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveLReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveLReq* internal_default_instance() {
    return reinterpret_cast<const MoveLReq*>(
               &_MoveLReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MoveLReq& a, MoveLReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveLReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveLReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveLReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveLReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveLReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveLReq& from) {
    MoveLReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveLReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveLReq";
  }
  protected:
  explicit MoveLReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kBlendingFieldNumber = 2,
    kPostConditionFieldNumber = 20,
    kVelRatioFieldNumber = 3,
    kAccRatioFieldNumber = 4,
    kVelTypeFieldNumber = 5,
    kTeachingModeFieldNumber = 30,
    kBypassSingularFieldNumber = 40,
  };
  // .Nrmk.IndyFramework.TargetP target = 1;
  bool has_target() const;
  void clear_target() ;
  const ::Nrmk::IndyFramework::TargetP& target() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::TargetP* release_target();
  ::Nrmk::IndyFramework::TargetP* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetP* value);
  void unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetP* value);
  ::Nrmk::IndyFramework::TargetP* unsafe_arena_release_target();

  private:
  const ::Nrmk::IndyFramework::TargetP& _internal_target() const;
  ::Nrmk::IndyFramework::TargetP* _internal_mutable_target();

  public:
  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending() ;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  void unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  ::Nrmk::IndyFramework::BlendingType* unsafe_arena_release_blending();

  private:
  const ::Nrmk::IndyFramework::BlendingType& _internal_blending() const;
  ::Nrmk::IndyFramework::BlendingType* _internal_mutable_blending();

  public:
  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  bool has_post_condition() const;
  void clear_post_condition() ;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  void unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  ::Nrmk::IndyFramework::MotionCondition* unsafe_arena_release_post_condition();

  private:
  const ::Nrmk::IndyFramework::MotionCondition& _internal_post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* _internal_mutable_post_condition();

  public:
  // float vel_ratio = 3;
  void clear_vel_ratio() ;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  private:
  float _internal_vel_ratio() const;
  void _internal_set_vel_ratio(float value);

  public:
  // float acc_ratio = 4;
  void clear_acc_ratio() ;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  private:
  float _internal_acc_ratio() const;
  void _internal_set_acc_ratio(float value);

  public:
  // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
  void clear_vel_type() ;
  ::Nrmk::IndyFramework::VelocityModeType vel_type() const;
  void set_vel_type(::Nrmk::IndyFramework::VelocityModeType value);

  private:
  ::Nrmk::IndyFramework::VelocityModeType _internal_vel_type() const;
  void _internal_set_vel_type(::Nrmk::IndyFramework::VelocityModeType value);

  public:
  // bool teaching_mode = 30;
  void clear_teaching_mode() ;
  bool teaching_mode() const;
  void set_teaching_mode(bool value);

  private:
  bool _internal_teaching_mode() const;
  void _internal_set_teaching_mode(bool value);

  public:
  // bool bypass_singular = 40;
  void clear_bypass_singular() ;
  bool bypass_singular() const;
  void set_bypass_singular(bool value);

  private:
  bool _internal_bypass_singular() const;
  void _internal_set_bypass_singular(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveLReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 3, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::TargetP* target_;
    ::Nrmk::IndyFramework::BlendingType* blending_;
    ::Nrmk::IndyFramework::MotionCondition* post_condition_;
    float vel_ratio_;
    float acc_ratio_;
    int vel_type_;
    bool teaching_mode_;
    bool bypass_singular_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveLTReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveLTReq) */ {
 public:
  inline MoveLTReq() : MoveLTReq(nullptr) {}
  ~MoveLTReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveLTReq(::google::protobuf::internal::ConstantInitialized);

  MoveLTReq(const MoveLTReq& from);
  MoveLTReq(MoveLTReq&& from) noexcept
    : MoveLTReq() {
    *this = ::std::move(from);
  }

  inline MoveLTReq& operator=(const MoveLTReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveLTReq& operator=(MoveLTReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveLTReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveLTReq* internal_default_instance() {
    return reinterpret_cast<const MoveLTReq*>(
               &_MoveLTReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MoveLTReq& a, MoveLTReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveLTReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveLTReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveLTReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveLTReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveLTReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveLTReq& from) {
    MoveLTReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveLTReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveLTReq";
  }
  protected:
  explicit MoveLTReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kBlendingFieldNumber = 2,
    kPostConditionFieldNumber = 20,
    kTimeFieldNumber = 3,
  };
  // .Nrmk.IndyFramework.TargetP target = 1;
  bool has_target() const;
  void clear_target() ;
  const ::Nrmk::IndyFramework::TargetP& target() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::TargetP* release_target();
  ::Nrmk::IndyFramework::TargetP* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetP* value);
  void unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetP* value);
  ::Nrmk::IndyFramework::TargetP* unsafe_arena_release_target();

  private:
  const ::Nrmk::IndyFramework::TargetP& _internal_target() const;
  ::Nrmk::IndyFramework::TargetP* _internal_mutable_target();

  public:
  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending() ;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  void unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  ::Nrmk::IndyFramework::BlendingType* unsafe_arena_release_blending();

  private:
  const ::Nrmk::IndyFramework::BlendingType& _internal_blending() const;
  ::Nrmk::IndyFramework::BlendingType* _internal_mutable_blending();

  public:
  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  bool has_post_condition() const;
  void clear_post_condition() ;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  void unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  ::Nrmk::IndyFramework::MotionCondition* unsafe_arena_release_post_condition();

  private:
  const ::Nrmk::IndyFramework::MotionCondition& _internal_post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* _internal_mutable_post_condition();

  public:
  // float time = 3;
  void clear_time() ;
  float time() const;
  void set_time(float value);

  private:
  float _internal_time() const;
  void _internal_set_time(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveLTReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::TargetP* target_;
    ::Nrmk::IndyFramework::BlendingType* blending_;
    ::Nrmk::IndyFramework::MotionCondition* post_condition_;
    float time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveAxisReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveAxisReq) */ {
 public:
  inline MoveAxisReq() : MoveAxisReq(nullptr) {}
  ~MoveAxisReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveAxisReq(::google::protobuf::internal::ConstantInitialized);

  MoveAxisReq(const MoveAxisReq& from);
  MoveAxisReq(MoveAxisReq&& from) noexcept
    : MoveAxisReq() {
    *this = ::std::move(from);
  }

  inline MoveAxisReq& operator=(const MoveAxisReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveAxisReq& operator=(MoveAxisReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveAxisReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveAxisReq* internal_default_instance() {
    return reinterpret_cast<const MoveAxisReq*>(
               &_MoveAxisReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MoveAxisReq& a, MoveAxisReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveAxisReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveAxisReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveAxisReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveAxisReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveAxisReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveAxisReq& from) {
    MoveAxisReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveAxisReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveAxisReq";
  }
  protected:
  explicit MoveAxisReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartMmFieldNumber = 1,
    kTargetMmFieldNumber = 2,
    kVelPercentageFieldNumber = 3,
    kAccPercentageFieldNumber = 4,
    kIsAbsoluteFieldNumber = 5,
    kTeachingModeFieldNumber = 10,
  };
  // repeated float start_mm = 1;
  int start_mm_size() const;
  private:
  int _internal_start_mm_size() const;

  public:
  void clear_start_mm() ;
  float start_mm(int index) const;
  void set_start_mm(int index, float value);
  void add_start_mm(float value);
  const ::google::protobuf::RepeatedField<float>& start_mm() const;
  ::google::protobuf::RepeatedField<float>* mutable_start_mm();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_start_mm() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_start_mm();

  public:
  // repeated float target_mm = 2;
  int target_mm_size() const;
  private:
  int _internal_target_mm_size() const;

  public:
  void clear_target_mm() ;
  float target_mm(int index) const;
  void set_target_mm(int index, float value);
  void add_target_mm(float value);
  const ::google::protobuf::RepeatedField<float>& target_mm() const;
  ::google::protobuf::RepeatedField<float>* mutable_target_mm();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_target_mm() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_target_mm();

  public:
  // float vel_percentage = 3;
  void clear_vel_percentage() ;
  float vel_percentage() const;
  void set_vel_percentage(float value);

  private:
  float _internal_vel_percentage() const;
  void _internal_set_vel_percentage(float value);

  public:
  // float acc_percentage = 4;
  void clear_acc_percentage() ;
  float acc_percentage() const;
  void set_acc_percentage(float value);

  private:
  float _internal_acc_percentage() const;
  void _internal_set_acc_percentage(float value);

  public:
  // bool is_absolute = 5;
  void clear_is_absolute() ;
  bool is_absolute() const;
  void set_is_absolute(bool value);

  private:
  bool _internal_is_absolute() const;
  void _internal_set_is_absolute(bool value);

  public:
  // bool teaching_mode = 10;
  void clear_teaching_mode() ;
  bool teaching_mode() const;
  void set_teaching_mode(bool value);

  private:
  bool _internal_teaching_mode() const;
  void _internal_set_teaching_mode(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveAxisReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> start_mm_;
    ::google::protobuf::RepeatedField<float> target_mm_;
    float vel_percentage_;
    float acc_percentage_;
    bool is_absolute_;
    bool teaching_mode_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveCReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveCReq) */ {
 public:
  inline MoveCReq() : MoveCReq(nullptr) {}
  ~MoveCReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveCReq(::google::protobuf::internal::ConstantInitialized);

  MoveCReq(const MoveCReq& from);
  MoveCReq(MoveCReq&& from) noexcept
    : MoveCReq() {
    *this = ::std::move(from);
  }

  inline MoveCReq& operator=(const MoveCReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveCReq& operator=(MoveCReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveCReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveCReq* internal_default_instance() {
    return reinterpret_cast<const MoveCReq*>(
               &_MoveCReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MoveCReq& a, MoveCReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveCReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveCReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveCReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveCReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveCReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveCReq& from) {
    MoveCReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveCReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveCReq";
  }
  protected:
  explicit MoveCReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kBlendingFieldNumber = 2,
    kPostConditionFieldNumber = 25,
    kAngleFieldNumber = 3,
    kSettingTypeFieldNumber = 10,
    kMoveTypeFieldNumber = 11,
    kVelRatioFieldNumber = 20,
    kAccRatioFieldNumber = 21,
    kVelTypeFieldNumber = 22,
    kTeachingModeFieldNumber = 30,
    kBypassSingularFieldNumber = 40,
  };
  // .Nrmk.IndyFramework.TargetC target = 1;
  bool has_target() const;
  void clear_target() ;
  const ::Nrmk::IndyFramework::TargetC& target() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::TargetC* release_target();
  ::Nrmk::IndyFramework::TargetC* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetC* value);
  void unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetC* value);
  ::Nrmk::IndyFramework::TargetC* unsafe_arena_release_target();

  private:
  const ::Nrmk::IndyFramework::TargetC& _internal_target() const;
  ::Nrmk::IndyFramework::TargetC* _internal_mutable_target();

  public:
  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending() ;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  void unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  ::Nrmk::IndyFramework::BlendingType* unsafe_arena_release_blending();

  private:
  const ::Nrmk::IndyFramework::BlendingType& _internal_blending() const;
  ::Nrmk::IndyFramework::BlendingType* _internal_mutable_blending();

  public:
  // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
  bool has_post_condition() const;
  void clear_post_condition() ;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  void unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  ::Nrmk::IndyFramework::MotionCondition* unsafe_arena_release_post_condition();

  private:
  const ::Nrmk::IndyFramework::MotionCondition& _internal_post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* _internal_mutable_post_condition();

  public:
  // float angle = 3;
  void clear_angle() ;
  float angle() const;
  void set_angle(float value);

  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);

  public:
  // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
  void clear_setting_type() ;
  ::Nrmk::IndyFramework::CircularSettingType setting_type() const;
  void set_setting_type(::Nrmk::IndyFramework::CircularSettingType value);

  private:
  ::Nrmk::IndyFramework::CircularSettingType _internal_setting_type() const;
  void _internal_set_setting_type(::Nrmk::IndyFramework::CircularSettingType value);

  public:
  // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
  void clear_move_type() ;
  ::Nrmk::IndyFramework::CircularMovingType move_type() const;
  void set_move_type(::Nrmk::IndyFramework::CircularMovingType value);

  private:
  ::Nrmk::IndyFramework::CircularMovingType _internal_move_type() const;
  void _internal_set_move_type(::Nrmk::IndyFramework::CircularMovingType value);

  public:
  // float vel_ratio = 20;
  void clear_vel_ratio() ;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  private:
  float _internal_vel_ratio() const;
  void _internal_set_vel_ratio(float value);

  public:
  // float acc_ratio = 21;
  void clear_acc_ratio() ;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  private:
  float _internal_acc_ratio() const;
  void _internal_set_acc_ratio(float value);

  public:
  // .Nrmk.IndyFramework.VelocityModeType vel_type = 22;
  void clear_vel_type() ;
  ::Nrmk::IndyFramework::VelocityModeType vel_type() const;
  void set_vel_type(::Nrmk::IndyFramework::VelocityModeType value);

  private:
  ::Nrmk::IndyFramework::VelocityModeType _internal_vel_type() const;
  void _internal_set_vel_type(::Nrmk::IndyFramework::VelocityModeType value);

  public:
  // bool teaching_mode = 30;
  void clear_teaching_mode() ;
  bool teaching_mode() const;
  void set_teaching_mode(bool value);

  private:
  bool _internal_teaching_mode() const;
  void _internal_set_teaching_mode(bool value);

  public:
  // bool bypass_singular = 40;
  void clear_bypass_singular() ;
  bool bypass_singular() const;
  void set_bypass_singular(bool value);

  private:
  bool _internal_bypass_singular() const;
  void _internal_set_bypass_singular(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveCReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 11, 3, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::TargetC* target_;
    ::Nrmk::IndyFramework::BlendingType* blending_;
    ::Nrmk::IndyFramework::MotionCondition* post_condition_;
    float angle_;
    int setting_type_;
    int move_type_;
    float vel_ratio_;
    float acc_ratio_;
    int vel_type_;
    bool teaching_mode_;
    bool bypass_singular_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveCTReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveCTReq) */ {
 public:
  inline MoveCTReq() : MoveCTReq(nullptr) {}
  ~MoveCTReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveCTReq(::google::protobuf::internal::ConstantInitialized);

  MoveCTReq(const MoveCTReq& from);
  MoveCTReq(MoveCTReq&& from) noexcept
    : MoveCTReq() {
    *this = ::std::move(from);
  }

  inline MoveCTReq& operator=(const MoveCTReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveCTReq& operator=(MoveCTReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveCTReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveCTReq* internal_default_instance() {
    return reinterpret_cast<const MoveCTReq*>(
               &_MoveCTReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MoveCTReq& a, MoveCTReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveCTReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveCTReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveCTReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveCTReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveCTReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveCTReq& from) {
    MoveCTReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveCTReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveCTReq";
  }
  protected:
  explicit MoveCTReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kBlendingFieldNumber = 2,
    kPostConditionFieldNumber = 25,
    kAngleFieldNumber = 3,
    kSettingTypeFieldNumber = 10,
    kMoveTypeFieldNumber = 11,
    kTimeFieldNumber = 20,
  };
  // .Nrmk.IndyFramework.TargetC target = 1;
  bool has_target() const;
  void clear_target() ;
  const ::Nrmk::IndyFramework::TargetC& target() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::TargetC* release_target();
  ::Nrmk::IndyFramework::TargetC* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetC* value);
  void unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetC* value);
  ::Nrmk::IndyFramework::TargetC* unsafe_arena_release_target();

  private:
  const ::Nrmk::IndyFramework::TargetC& _internal_target() const;
  ::Nrmk::IndyFramework::TargetC* _internal_mutable_target();

  public:
  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending() ;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  void unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  ::Nrmk::IndyFramework::BlendingType* unsafe_arena_release_blending();

  private:
  const ::Nrmk::IndyFramework::BlendingType& _internal_blending() const;
  ::Nrmk::IndyFramework::BlendingType* _internal_mutable_blending();

  public:
  // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
  bool has_post_condition() const;
  void clear_post_condition() ;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  void unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  ::Nrmk::IndyFramework::MotionCondition* unsafe_arena_release_post_condition();

  private:
  const ::Nrmk::IndyFramework::MotionCondition& _internal_post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* _internal_mutable_post_condition();

  public:
  // float angle = 3;
  void clear_angle() ;
  float angle() const;
  void set_angle(float value);

  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);

  public:
  // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
  void clear_setting_type() ;
  ::Nrmk::IndyFramework::CircularSettingType setting_type() const;
  void set_setting_type(::Nrmk::IndyFramework::CircularSettingType value);

  private:
  ::Nrmk::IndyFramework::CircularSettingType _internal_setting_type() const;
  void _internal_set_setting_type(::Nrmk::IndyFramework::CircularSettingType value);

  public:
  // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
  void clear_move_type() ;
  ::Nrmk::IndyFramework::CircularMovingType move_type() const;
  void set_move_type(::Nrmk::IndyFramework::CircularMovingType value);

  private:
  ::Nrmk::IndyFramework::CircularMovingType _internal_move_type() const;
  void _internal_set_move_type(::Nrmk::IndyFramework::CircularMovingType value);

  public:
  // float time = 20;
  void clear_time() ;
  float time() const;
  void set_time(float value);

  private:
  float _internal_time() const;
  void _internal_set_time(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveCTReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 7, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::TargetC* target_;
    ::Nrmk::IndyFramework::BlendingType* blending_;
    ::Nrmk::IndyFramework::MotionCondition* post_condition_;
    float angle_;
    int setting_type_;
    int move_type_;
    float time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveJointTrajReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveJointTrajReq) */ {
 public:
  inline MoveJointTrajReq() : MoveJointTrajReq(nullptr) {}
  ~MoveJointTrajReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveJointTrajReq(::google::protobuf::internal::ConstantInitialized);

  MoveJointTrajReq(const MoveJointTrajReq& from);
  MoveJointTrajReq(MoveJointTrajReq&& from) noexcept
    : MoveJointTrajReq() {
    *this = ::std::move(from);
  }

  inline MoveJointTrajReq& operator=(const MoveJointTrajReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveJointTrajReq& operator=(MoveJointTrajReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveJointTrajReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveJointTrajReq* internal_default_instance() {
    return reinterpret_cast<const MoveJointTrajReq*>(
               &_MoveJointTrajReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MoveJointTrajReq& a, MoveJointTrajReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveJointTrajReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveJointTrajReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveJointTrajReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveJointTrajReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveJointTrajReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveJointTrajReq& from) {
    MoveJointTrajReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveJointTrajReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveJointTrajReq";
  }
  protected:
  explicit MoveJointTrajReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQListFieldNumber = 1,
    kQdotListFieldNumber = 2,
    kQddotListFieldNumber = 3,
  };
  // repeated .Nrmk.IndyFramework.Vector q_list = 1;
  int q_list_size() const;
  private:
  int _internal_q_list_size() const;

  public:
  void clear_q_list() ;
  ::Nrmk::IndyFramework::Vector* mutable_q_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
      mutable_q_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>& _internal_q_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>* _internal_mutable_q_list();
  public:
  const ::Nrmk::IndyFramework::Vector& q_list(int index) const;
  ::Nrmk::IndyFramework::Vector* add_q_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
      q_list() const;
  // repeated .Nrmk.IndyFramework.Vector qdot_list = 2;
  int qdot_list_size() const;
  private:
  int _internal_qdot_list_size() const;

  public:
  void clear_qdot_list() ;
  ::Nrmk::IndyFramework::Vector* mutable_qdot_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
      mutable_qdot_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>& _internal_qdot_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>* _internal_mutable_qdot_list();
  public:
  const ::Nrmk::IndyFramework::Vector& qdot_list(int index) const;
  ::Nrmk::IndyFramework::Vector* add_qdot_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
      qdot_list() const;
  // repeated .Nrmk.IndyFramework.Vector qddot_list = 3;
  int qddot_list_size() const;
  private:
  int _internal_qddot_list_size() const;

  public:
  void clear_qddot_list() ;
  ::Nrmk::IndyFramework::Vector* mutable_qddot_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
      mutable_qddot_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>& _internal_qddot_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>* _internal_mutable_qddot_list();
  public:
  const ::Nrmk::IndyFramework::Vector& qddot_list(int index) const;
  ::Nrmk::IndyFramework::Vector* add_qddot_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
      qddot_list() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveJointTrajReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector > q_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector > qdot_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector > qddot_list_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveTaskTrajReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveTaskTrajReq) */ {
 public:
  inline MoveTaskTrajReq() : MoveTaskTrajReq(nullptr) {}
  ~MoveTaskTrajReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveTaskTrajReq(::google::protobuf::internal::ConstantInitialized);

  MoveTaskTrajReq(const MoveTaskTrajReq& from);
  MoveTaskTrajReq(MoveTaskTrajReq&& from) noexcept
    : MoveTaskTrajReq() {
    *this = ::std::move(from);
  }

  inline MoveTaskTrajReq& operator=(const MoveTaskTrajReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveTaskTrajReq& operator=(MoveTaskTrajReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveTaskTrajReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveTaskTrajReq* internal_default_instance() {
    return reinterpret_cast<const MoveTaskTrajReq*>(
               &_MoveTaskTrajReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MoveTaskTrajReq& a, MoveTaskTrajReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveTaskTrajReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveTaskTrajReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveTaskTrajReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveTaskTrajReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveTaskTrajReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveTaskTrajReq& from) {
    MoveTaskTrajReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveTaskTrajReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveTaskTrajReq";
  }
  protected:
  explicit MoveTaskTrajReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPListFieldNumber = 1,
    kPdotListFieldNumber = 2,
    kPddotListFieldNumber = 3,
  };
  // repeated .Nrmk.IndyFramework.Vector p_list = 1;
  int p_list_size() const;
  private:
  int _internal_p_list_size() const;

  public:
  void clear_p_list() ;
  ::Nrmk::IndyFramework::Vector* mutable_p_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
      mutable_p_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>& _internal_p_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>* _internal_mutable_p_list();
  public:
  const ::Nrmk::IndyFramework::Vector& p_list(int index) const;
  ::Nrmk::IndyFramework::Vector* add_p_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
      p_list() const;
  // repeated .Nrmk.IndyFramework.Vector pdot_list = 2;
  int pdot_list_size() const;
  private:
  int _internal_pdot_list_size() const;

  public:
  void clear_pdot_list() ;
  ::Nrmk::IndyFramework::Vector* mutable_pdot_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
      mutable_pdot_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>& _internal_pdot_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>* _internal_mutable_pdot_list();
  public:
  const ::Nrmk::IndyFramework::Vector& pdot_list(int index) const;
  ::Nrmk::IndyFramework::Vector* add_pdot_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
      pdot_list() const;
  // repeated .Nrmk.IndyFramework.Vector pddot_list = 3;
  int pddot_list_size() const;
  private:
  int _internal_pddot_list_size() const;

  public:
  void clear_pddot_list() ;
  ::Nrmk::IndyFramework::Vector* mutable_pddot_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
      mutable_pddot_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>& _internal_pddot_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>* _internal_mutable_pddot_list();
  public:
  const ::Nrmk::IndyFramework::Vector& pddot_list(int index) const;
  ::Nrmk::IndyFramework::Vector* add_pddot_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
      pddot_list() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveTaskTrajReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector > p_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector > pdot_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector > pddot_list_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveGcodeReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveGcodeReq) */ {
 public:
  inline MoveGcodeReq() : MoveGcodeReq(nullptr) {}
  ~MoveGcodeReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveGcodeReq(::google::protobuf::internal::ConstantInitialized);

  MoveGcodeReq(const MoveGcodeReq& from);
  MoveGcodeReq(MoveGcodeReq&& from) noexcept
    : MoveGcodeReq() {
    *this = ::std::move(from);
  }

  inline MoveGcodeReq& operator=(const MoveGcodeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveGcodeReq& operator=(MoveGcodeReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveGcodeReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveGcodeReq* internal_default_instance() {
    return reinterpret_cast<const MoveGcodeReq*>(
               &_MoveGcodeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MoveGcodeReq& a, MoveGcodeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveGcodeReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveGcodeReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveGcodeReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveGcodeReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveGcodeReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveGcodeReq& from) {
    MoveGcodeReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveGcodeReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveGcodeReq";
  }
  protected:
  explicit MoveGcodeReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGcodeFileFieldNumber = 1,
    kIsSmoothModeFieldNumber = 2,
    kSmoothRadiusFieldNumber = 3,
    kVelRatioFieldNumber = 4,
    kAccRatioFieldNumber = 5,
  };
  // string gcode_file = 1;
  void clear_gcode_file() ;
  const std::string& gcode_file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gcode_file(Arg_&& arg, Args_... args);
  std::string* mutable_gcode_file();
  PROTOBUF_NODISCARD std::string* release_gcode_file();
  void set_allocated_gcode_file(std::string* ptr);

  private:
  const std::string& _internal_gcode_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gcode_file(
      const std::string& value);
  std::string* _internal_mutable_gcode_file();

  public:
  // bool is_smooth_mode = 2;
  void clear_is_smooth_mode() ;
  bool is_smooth_mode() const;
  void set_is_smooth_mode(bool value);

  private:
  bool _internal_is_smooth_mode() const;
  void _internal_set_is_smooth_mode(bool value);

  public:
  // float smooth_radius = 3;
  void clear_smooth_radius() ;
  float smooth_radius() const;
  void set_smooth_radius(float value);

  private:
  float _internal_smooth_radius() const;
  void _internal_set_smooth_radius(float value);

  public:
  // float vel_ratio = 4;
  void clear_vel_ratio() ;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  private:
  float _internal_vel_ratio() const;
  void _internal_set_vel_ratio(float value);

  public:
  // float acc_ratio = 5;
  void clear_acc_ratio() ;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  private:
  float _internal_acc_ratio() const;
  void _internal_set_acc_ratio(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveGcodeReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 0, 50, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr gcode_file_;
    bool is_smooth_mode_;
    float smooth_radius_;
    float vel_ratio_;
    float acc_ratio_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveConveyorReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveConveyorReq) */ {
 public:
  inline MoveConveyorReq() : MoveConveyorReq(nullptr) {}
  ~MoveConveyorReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveConveyorReq(::google::protobuf::internal::ConstantInitialized);

  MoveConveyorReq(const MoveConveyorReq& from);
  MoveConveyorReq(MoveConveyorReq&& from) noexcept
    : MoveConveyorReq() {
    *this = ::std::move(from);
  }

  inline MoveConveyorReq& operator=(const MoveConveyorReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveConveyorReq& operator=(MoveConveyorReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveConveyorReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveConveyorReq* internal_default_instance() {
    return reinterpret_cast<const MoveConveyorReq*>(
               &_MoveConveyorReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MoveConveyorReq& a, MoveConveyorReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveConveyorReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveConveyorReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveConveyorReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveConveyorReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveConveyorReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveConveyorReq& from) {
    MoveConveyorReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveConveyorReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveConveyorReq";
  }
  protected:
  explicit MoveConveyorReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostConditionFieldNumber = 10,
    kTeachingModeFieldNumber = 1,
    kBypassSingularFieldNumber = 2,
    kAccRatioFieldNumber = 3,
  };
  // .Nrmk.IndyFramework.MotionCondition post_condition = 10;
  bool has_post_condition() const;
  void clear_post_condition() ;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  void unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  ::Nrmk::IndyFramework::MotionCondition* unsafe_arena_release_post_condition();

  private:
  const ::Nrmk::IndyFramework::MotionCondition& _internal_post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* _internal_mutable_post_condition();

  public:
  // bool teaching_mode = 1;
  void clear_teaching_mode() ;
  bool teaching_mode() const;
  void set_teaching_mode(bool value);

  private:
  bool _internal_teaching_mode() const;
  void _internal_set_teaching_mode(bool value);

  public:
  // bool bypass_singular = 2;
  void clear_bypass_singular() ;
  bool bypass_singular() const;
  void set_bypass_singular(bool value);

  private:
  bool _internal_bypass_singular() const;
  void _internal_set_bypass_singular(bool value);

  public:
  // float acc_ratio = 3;
  void clear_acc_ratio() ;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  private:
  float _internal_acc_ratio() const;
  void _internal_set_acc_ratio(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveConveyorReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::MotionCondition* post_condition_;
    bool teaching_mode_;
    bool bypass_singular_;
    float acc_ratio_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class WaitIOReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.WaitIOReq) */ {
 public:
  inline WaitIOReq() : WaitIOReq(nullptr) {}
  ~WaitIOReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WaitIOReq(::google::protobuf::internal::ConstantInitialized);

  WaitIOReq(const WaitIOReq& from);
  WaitIOReq(WaitIOReq&& from) noexcept
    : WaitIOReq() {
    *this = ::std::move(from);
  }

  inline WaitIOReq& operator=(const WaitIOReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitIOReq& operator=(WaitIOReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitIOReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitIOReq* internal_default_instance() {
    return reinterpret_cast<const WaitIOReq*>(
               &_WaitIOReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(WaitIOReq& a, WaitIOReq& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitIOReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitIOReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitIOReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitIOReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WaitIOReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WaitIOReq& from) {
    WaitIOReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitIOReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.WaitIOReq";
  }
  protected:
  explicit WaitIOReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiListFieldNumber = 1,
    kDoListFieldNumber = 2,
    kEndDiListFieldNumber = 3,
    kEndDoListFieldNumber = 4,
    kSetDoListFieldNumber = 6,
    kSetEndDoListFieldNumber = 7,
    kSetAoListFieldNumber = 8,
    kSetEndAoListFieldNumber = 9,
    kConjunctionFieldNumber = 5,
  };
  // repeated .Nrmk.IndyFramework.DigitalSignal di_list = 1;
  int di_list_size() const;
  private:
  int _internal_di_list_size() const;

  public:
  void clear_di_list() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_di_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_di_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_di_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_di_list();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& di_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_di_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      di_list() const;
  // repeated .Nrmk.IndyFramework.DigitalSignal do_list = 2;
  int do_list_size() const;
  private:
  int _internal_do_list_size() const;

  public:
  void clear_do_list() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_do_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_do_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_do_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_do_list();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_do_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      do_list() const;
  // repeated .Nrmk.IndyFramework.DigitalSignal end_di_list = 3;
  int end_di_list_size() const;
  private:
  int _internal_end_di_list_size() const;

  public:
  void clear_end_di_list() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_end_di_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_end_di_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_end_di_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_end_di_list();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& end_di_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_end_di_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      end_di_list() const;
  // repeated .Nrmk.IndyFramework.DigitalSignal end_do_list = 4;
  int end_do_list_size() const;
  private:
  int _internal_end_do_list_size() const;

  public:
  void clear_end_do_list() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_end_do_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_end_do_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_end_do_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_end_do_list();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& end_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_end_do_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      end_do_list() const;
  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 6;
  int set_do_list_size() const;
  private:
  int _internal_set_do_list_size() const;

  public:
  void clear_set_do_list() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_do_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_do_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_set_do_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_set_do_list();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& set_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_do_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_do_list() const;
  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 7;
  int set_end_do_list_size() const;
  private:
  int _internal_set_end_do_list_size() const;

  public:
  void clear_set_end_do_list() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_end_do_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_end_do_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_set_end_do_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_set_end_do_list();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& set_end_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_end_do_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_end_do_list() const;
  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 8;
  int set_ao_list_size() const;
  private:
  int _internal_set_ao_list_size() const;

  public:
  void clear_set_ao_list() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_ao_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_ao_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_set_ao_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_set_ao_list();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& set_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_ao_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_ao_list() const;
  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 9;
  int set_end_ao_list_size() const;
  private:
  int _internal_set_end_ao_list_size() const;

  public:
  void clear_set_end_ao_list() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_end_ao_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_end_ao_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_set_end_ao_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_set_end_ao_list();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& set_end_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_end_ao_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_end_ao_list() const;
  // int32 conjunction = 5;
  void clear_conjunction() ;
  ::int32_t conjunction() const;
  void set_conjunction(::int32_t value);

  private:
  ::int32_t _internal_conjunction() const;
  void _internal_set_conjunction(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.WaitIOReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 8, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > di_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > do_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > end_di_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > end_do_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_do_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_end_do_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_ao_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_end_ao_list_;
    ::int32_t conjunction_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class WaitTimeReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.WaitTimeReq) */ {
 public:
  inline WaitTimeReq() : WaitTimeReq(nullptr) {}
  ~WaitTimeReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WaitTimeReq(::google::protobuf::internal::ConstantInitialized);

  WaitTimeReq(const WaitTimeReq& from);
  WaitTimeReq(WaitTimeReq&& from) noexcept
    : WaitTimeReq() {
    *this = ::std::move(from);
  }

  inline WaitTimeReq& operator=(const WaitTimeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitTimeReq& operator=(WaitTimeReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitTimeReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitTimeReq* internal_default_instance() {
    return reinterpret_cast<const WaitTimeReq*>(
               &_WaitTimeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(WaitTimeReq& a, WaitTimeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitTimeReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitTimeReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitTimeReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitTimeReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WaitTimeReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WaitTimeReq& from) {
    WaitTimeReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitTimeReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.WaitTimeReq";
  }
  protected:
  explicit WaitTimeReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetDoListFieldNumber = 2,
    kSetEndDoListFieldNumber = 3,
    kSetAoListFieldNumber = 4,
    kSetEndAoListFieldNumber = 5,
    kTimeFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  int set_do_list_size() const;
  private:
  int _internal_set_do_list_size() const;

  public:
  void clear_set_do_list() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_do_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_do_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_set_do_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_set_do_list();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& set_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_do_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_do_list() const;
  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  int set_end_do_list_size() const;
  private:
  int _internal_set_end_do_list_size() const;

  public:
  void clear_set_end_do_list() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_end_do_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_end_do_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_set_end_do_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_set_end_do_list();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& set_end_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_end_do_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_end_do_list() const;
  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  int set_ao_list_size() const;
  private:
  int _internal_set_ao_list_size() const;

  public:
  void clear_set_ao_list() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_ao_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_ao_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_set_ao_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_set_ao_list();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& set_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_ao_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_ao_list() const;
  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  int set_end_ao_list_size() const;
  private:
  int _internal_set_end_ao_list_size() const;

  public:
  void clear_set_end_ao_list() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_end_ao_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_end_ao_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_set_end_ao_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_set_end_ao_list();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& set_end_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_end_ao_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_end_ao_list() const;
  // float time = 1;
  void clear_time() ;
  float time() const;
  void set_time(float value);

  private:
  float _internal_time() const;
  void _internal_set_time(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.WaitTimeReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 4, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_do_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_end_do_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_ao_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_end_ao_list_;
    float time_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class WaitProgressReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.WaitProgressReq) */ {
 public:
  inline WaitProgressReq() : WaitProgressReq(nullptr) {}
  ~WaitProgressReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WaitProgressReq(::google::protobuf::internal::ConstantInitialized);

  WaitProgressReq(const WaitProgressReq& from);
  WaitProgressReq(WaitProgressReq&& from) noexcept
    : WaitProgressReq() {
    *this = ::std::move(from);
  }

  inline WaitProgressReq& operator=(const WaitProgressReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitProgressReq& operator=(WaitProgressReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitProgressReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitProgressReq* internal_default_instance() {
    return reinterpret_cast<const WaitProgressReq*>(
               &_WaitProgressReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(WaitProgressReq& a, WaitProgressReq& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitProgressReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitProgressReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitProgressReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitProgressReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WaitProgressReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WaitProgressReq& from) {
    WaitProgressReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitProgressReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.WaitProgressReq";
  }
  protected:
  explicit WaitProgressReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetDoListFieldNumber = 2,
    kSetEndDoListFieldNumber = 3,
    kSetAoListFieldNumber = 4,
    kSetEndAoListFieldNumber = 5,
    kProgressFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  int set_do_list_size() const;
  private:
  int _internal_set_do_list_size() const;

  public:
  void clear_set_do_list() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_do_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_do_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_set_do_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_set_do_list();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& set_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_do_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_do_list() const;
  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  int set_end_do_list_size() const;
  private:
  int _internal_set_end_do_list_size() const;

  public:
  void clear_set_end_do_list() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_end_do_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_end_do_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_set_end_do_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_set_end_do_list();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& set_end_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_end_do_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_end_do_list() const;
  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  int set_ao_list_size() const;
  private:
  int _internal_set_ao_list_size() const;

  public:
  void clear_set_ao_list() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_ao_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_ao_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_set_ao_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_set_ao_list();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& set_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_ao_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_ao_list() const;
  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  int set_end_ao_list_size() const;
  private:
  int _internal_set_end_ao_list_size() const;

  public:
  void clear_set_end_ao_list() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_end_ao_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_end_ao_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_set_end_ao_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_set_end_ao_list();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& set_end_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_end_ao_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_end_ao_list() const;
  // int32 progress = 1;
  void clear_progress() ;
  ::int32_t progress() const;
  void set_progress(::int32_t value);

  private:
  ::int32_t _internal_progress() const;
  void _internal_set_progress(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.WaitProgressReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 4, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_do_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_end_do_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_ao_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_end_ao_list_;
    ::int32_t progress_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class WaitTrajReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.WaitTrajReq) */ {
 public:
  inline WaitTrajReq() : WaitTrajReq(nullptr) {}
  ~WaitTrajReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WaitTrajReq(::google::protobuf::internal::ConstantInitialized);

  WaitTrajReq(const WaitTrajReq& from);
  WaitTrajReq(WaitTrajReq&& from) noexcept
    : WaitTrajReq() {
    *this = ::std::move(from);
  }

  inline WaitTrajReq& operator=(const WaitTrajReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitTrajReq& operator=(WaitTrajReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitTrajReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitTrajReq* internal_default_instance() {
    return reinterpret_cast<const WaitTrajReq*>(
               &_WaitTrajReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(WaitTrajReq& a, WaitTrajReq& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitTrajReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitTrajReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitTrajReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitTrajReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WaitTrajReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WaitTrajReq& from) {
    WaitTrajReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitTrajReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.WaitTrajReq";
  }
  protected:
  explicit WaitTrajReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetDoListFieldNumber = 2,
    kSetEndDoListFieldNumber = 3,
    kSetAoListFieldNumber = 4,
    kSetEndAoListFieldNumber = 5,
    kTrajConditionFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  int set_do_list_size() const;
  private:
  int _internal_set_do_list_size() const;

  public:
  void clear_set_do_list() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_do_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_do_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_set_do_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_set_do_list();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& set_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_do_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_do_list() const;
  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  int set_end_do_list_size() const;
  private:
  int _internal_set_end_do_list_size() const;

  public:
  void clear_set_end_do_list() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_end_do_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_end_do_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_set_end_do_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_set_end_do_list();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& set_end_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_end_do_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_end_do_list() const;
  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  int set_ao_list_size() const;
  private:
  int _internal_set_ao_list_size() const;

  public:
  void clear_set_ao_list() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_ao_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_ao_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_set_ao_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_set_ao_list();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& set_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_ao_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_ao_list() const;
  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  int set_end_ao_list_size() const;
  private:
  int _internal_set_end_ao_list_size() const;

  public:
  void clear_set_end_ao_list() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_end_ao_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_end_ao_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_set_end_ao_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_set_end_ao_list();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& set_end_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_end_ao_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_end_ao_list() const;
  // .Nrmk.IndyFramework.TrajCondition traj_condition = 1;
  void clear_traj_condition() ;
  ::Nrmk::IndyFramework::TrajCondition traj_condition() const;
  void set_traj_condition(::Nrmk::IndyFramework::TrajCondition value);

  private:
  ::Nrmk::IndyFramework::TrajCondition _internal_traj_condition() const;
  void _internal_set_traj_condition(::Nrmk::IndyFramework::TrajCondition value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.WaitTrajReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 4, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_do_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_end_do_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_ao_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_end_ao_list_;
    int traj_condition_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class WaitRadiusReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.WaitRadiusReq) */ {
 public:
  inline WaitRadiusReq() : WaitRadiusReq(nullptr) {}
  ~WaitRadiusReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WaitRadiusReq(::google::protobuf::internal::ConstantInitialized);

  WaitRadiusReq(const WaitRadiusReq& from);
  WaitRadiusReq(WaitRadiusReq&& from) noexcept
    : WaitRadiusReq() {
    *this = ::std::move(from);
  }

  inline WaitRadiusReq& operator=(const WaitRadiusReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitRadiusReq& operator=(WaitRadiusReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitRadiusReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitRadiusReq* internal_default_instance() {
    return reinterpret_cast<const WaitRadiusReq*>(
               &_WaitRadiusReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(WaitRadiusReq& a, WaitRadiusReq& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitRadiusReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitRadiusReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WaitRadiusReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WaitRadiusReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WaitRadiusReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WaitRadiusReq& from) {
    WaitRadiusReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitRadiusReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.WaitRadiusReq";
  }
  protected:
  explicit WaitRadiusReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetDoListFieldNumber = 2,
    kSetEndDoListFieldNumber = 3,
    kSetAoListFieldNumber = 4,
    kSetEndAoListFieldNumber = 5,
    kRadiusFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  int set_do_list_size() const;
  private:
  int _internal_set_do_list_size() const;

  public:
  void clear_set_do_list() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_do_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_do_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_set_do_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_set_do_list();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& set_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_do_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_do_list() const;
  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  int set_end_do_list_size() const;
  private:
  int _internal_set_end_do_list_size() const;

  public:
  void clear_set_end_do_list() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_end_do_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_end_do_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_set_end_do_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_set_end_do_list();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& set_end_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_end_do_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_end_do_list() const;
  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  int set_ao_list_size() const;
  private:
  int _internal_set_ao_list_size() const;

  public:
  void clear_set_ao_list() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_ao_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_ao_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_set_ao_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_set_ao_list();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& set_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_ao_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_ao_list() const;
  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  int set_end_ao_list_size() const;
  private:
  int _internal_set_end_ao_list_size() const;

  public:
  void clear_set_end_ao_list() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_end_ao_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_end_ao_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_set_end_ao_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_set_end_ao_list();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& set_end_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_end_ao_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_end_ao_list() const;
  // int32 radius = 1;
  void clear_radius() ;
  ::int32_t radius() const;
  void set_radius(::int32_t value);

  private:
  ::int32_t _internal_radius() const;
  void _internal_set_radius(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.WaitRadiusReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 4, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_do_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_end_do_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_ao_list_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_end_ao_list_;
    ::int32_t radius_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class Program final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Program) */ {
 public:
  inline Program() : Program(nullptr) {}
  ~Program() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Program(::google::protobuf::internal::ConstantInitialized);

  Program(const Program& from);
  Program(Program&& from) noexcept
    : Program() {
    *this = ::std::move(from);
  }

  inline Program& operator=(const Program& from) {
    CopyFrom(from);
    return *this;
  }
  inline Program& operator=(Program&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Program& default_instance() {
    return *internal_default_instance();
  }
  static inline const Program* internal_default_instance() {
    return reinterpret_cast<const Program*>(
               &_Program_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Program& a, Program& b) {
    a.Swap(&b);
  }
  inline void Swap(Program* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Program* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Program* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Program>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Program& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Program& from) {
    Program::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Program* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Program";
  }
  protected:
  explicit Program(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgNameFieldNumber = 1,
    kProgIdxFieldNumber = 2,
  };
  // string prog_name = 1;
  void clear_prog_name() ;
  const std::string& prog_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prog_name(Arg_&& arg, Args_... args);
  std::string* mutable_prog_name();
  PROTOBUF_NODISCARD std::string* release_prog_name();
  void set_allocated_prog_name(std::string* ptr);

  private:
  const std::string& _internal_prog_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prog_name(
      const std::string& value);
  std::string* _internal_mutable_prog_name();

  public:
  // int32 prog_idx = 2;
  void clear_prog_idx() ;
  ::int32_t prog_idx() const;
  void set_prog_idx(::int32_t value);

  private:
  ::int32_t _internal_prog_idx() const;
  void _internal_set_prog_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Program)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 44, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr prog_name_;
    ::int32_t prog_idx_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TuningProgram final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TuningProgram) */ {
 public:
  inline TuningProgram() : TuningProgram(nullptr) {}
  ~TuningProgram() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TuningProgram(::google::protobuf::internal::ConstantInitialized);

  TuningProgram(const TuningProgram& from);
  TuningProgram(TuningProgram&& from) noexcept
    : TuningProgram() {
    *this = ::std::move(from);
  }

  inline TuningProgram& operator=(const TuningProgram& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuningProgram& operator=(TuningProgram&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TuningProgram& default_instance() {
    return *internal_default_instance();
  }
  static inline const TuningProgram* internal_default_instance() {
    return reinterpret_cast<const TuningProgram*>(
               &_TuningProgram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TuningProgram& a, TuningProgram& b) {
    a.Swap(&b);
  }
  inline void Swap(TuningProgram* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TuningProgram* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TuningProgram* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TuningProgram>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TuningProgram& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TuningProgram& from) {
    TuningProgram::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuningProgram* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TuningProgram";
  }
  protected:
  explicit TuningProgram(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgramFieldNumber = 1,
    kTuningSpaceFieldNumber = 2,
    kPrecisionFieldNumber = 3,
    kVelLevelMaxFieldNumber = 4,
  };
  // .Nrmk.IndyFramework.Program program = 1;
  bool has_program() const;
  void clear_program() ;
  const ::Nrmk::IndyFramework::Program& program() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Program* release_program();
  ::Nrmk::IndyFramework::Program* mutable_program();
  void set_allocated_program(::Nrmk::IndyFramework::Program* value);
  void unsafe_arena_set_allocated_program(::Nrmk::IndyFramework::Program* value);
  ::Nrmk::IndyFramework::Program* unsafe_arena_release_program();

  private:
  const ::Nrmk::IndyFramework::Program& _internal_program() const;
  ::Nrmk::IndyFramework::Program* _internal_mutable_program();

  public:
  // .Nrmk.IndyFramework.TuningSpace tuning_space = 2;
  void clear_tuning_space() ;
  ::Nrmk::IndyFramework::TuningSpace tuning_space() const;
  void set_tuning_space(::Nrmk::IndyFramework::TuningSpace value);

  private:
  ::Nrmk::IndyFramework::TuningSpace _internal_tuning_space() const;
  void _internal_set_tuning_space(::Nrmk::IndyFramework::TuningSpace value);

  public:
  // .Nrmk.IndyFramework.TuningPrecision precision = 3;
  void clear_precision() ;
  ::Nrmk::IndyFramework::TuningPrecision precision() const;
  void set_precision(::Nrmk::IndyFramework::TuningPrecision value);

  private:
  ::Nrmk::IndyFramework::TuningPrecision _internal_precision() const;
  void _internal_set_precision(::Nrmk::IndyFramework::TuningPrecision value);

  public:
  // uint32 vel_level_max = 4;
  void clear_vel_level_max() ;
  ::uint32_t vel_level_max() const;
  void set_vel_level_max(::uint32_t value);

  private:
  ::uint32_t _internal_vel_level_max() const;
  void _internal_set_vel_level_max(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TuningProgram)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::Program* program_;
    int tuning_space_;
    int precision_;
    ::uint32_t vel_level_max_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ProgramInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ProgramInfo) */ {
 public:
  inline ProgramInfo() : ProgramInfo(nullptr) {}
  ~ProgramInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProgramInfo(::google::protobuf::internal::ConstantInitialized);

  ProgramInfo(const ProgramInfo& from);
  ProgramInfo(ProgramInfo&& from) noexcept
    : ProgramInfo() {
    *this = ::std::move(from);
  }

  inline ProgramInfo& operator=(const ProgramInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramInfo& operator=(ProgramInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProgramInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProgramInfo* internal_default_instance() {
    return reinterpret_cast<const ProgramInfo*>(
               &_ProgramInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ProgramInfo& a, ProgramInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProgramInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProgramInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProgramInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProgramInfo& from) {
    ProgramInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ProgramInfo";
  }
  protected:
  explicit ProgramInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kSizeFieldNumber = 2,
  };
  // string path = 1;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string timestamp = 3;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* ptr);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // uint64 size = 2;
  void clear_size() ;
  ::uint64_t size() const;
  void set_size(::uint64_t value);

  private:
  ::uint64_t _internal_size() const;
  void _internal_set_size(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ProgramInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 52, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::uint64_t size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class Variable final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Variable) */ {
 public:
  inline Variable() : Variable(nullptr) {}
  ~Variable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Variable(::google::protobuf::internal::ConstantInitialized);

  Variable(const Variable& from);
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variable& operator=(Variable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Variable& default_instance() {
    return *internal_default_instance();
  }
  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }
  inline void Swap(Variable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Variable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Variable* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Variable>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Variable& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Variable& from) {
    Variable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variable* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Variable";
  }
  protected:
  explicit Variable(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 3,
    kAddrFieldNumber = 2,
    kInWatchingFieldNumber = 4,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string type = 3;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* ptr);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // int32 addr = 2;
  void clear_addr() ;
  ::int32_t addr() const;
  void set_addr(::int32_t value);

  private:
  ::int32_t _internal_addr() const;
  void _internal_set_addr(::int32_t value);

  public:
  // bool in_watching = 4;
  void clear_in_watching() ;
  bool in_watching() const;
  void set_in_watching(bool value);

  private:
  bool _internal_in_watching() const;
  void _internal_set_in_watching(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Variable)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 44, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::int32_t addr_;
    bool in_watching_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class IntVariable final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IntVariable) */ {
 public:
  inline IntVariable() : IntVariable(nullptr) {}
  ~IntVariable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IntVariable(::google::protobuf::internal::ConstantInitialized);

  IntVariable(const IntVariable& from);
  IntVariable(IntVariable&& from) noexcept
    : IntVariable() {
    *this = ::std::move(from);
  }

  inline IntVariable& operator=(const IntVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntVariable& operator=(IntVariable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntVariable& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntVariable* internal_default_instance() {
    return reinterpret_cast<const IntVariable*>(
               &_IntVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(IntVariable& a, IntVariable& b) {
    a.Swap(&b);
  }
  inline void Swap(IntVariable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntVariable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntVariable* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntVariable>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntVariable& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IntVariable& from) {
    IntVariable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntVariable* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.IntVariable";
  }
  protected:
  explicit IntVariable(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kAddrFieldNumber = 1,
  };
  // int64 value = 2;
  void clear_value() ;
  ::int64_t value() const;
  void set_value(::int64_t value);

  private:
  ::int64_t _internal_value() const;
  void _internal_set_value(::int64_t value);

  public:
  // int32 addr = 1;
  void clear_addr() ;
  ::int32_t addr() const;
  void set_addr(::int32_t value);

  private:
  ::int32_t _internal_addr() const;
  void _internal_set_addr(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IntVariable)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t value_;
    ::int32_t addr_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ModbusVariable final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ModbusVariable) */ {
 public:
  inline ModbusVariable() : ModbusVariable(nullptr) {}
  ~ModbusVariable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModbusVariable(::google::protobuf::internal::ConstantInitialized);

  ModbusVariable(const ModbusVariable& from);
  ModbusVariable(ModbusVariable&& from) noexcept
    : ModbusVariable() {
    *this = ::std::move(from);
  }

  inline ModbusVariable& operator=(const ModbusVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModbusVariable& operator=(ModbusVariable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModbusVariable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModbusVariable* internal_default_instance() {
    return reinterpret_cast<const ModbusVariable*>(
               &_ModbusVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ModbusVariable& a, ModbusVariable& b) {
    a.Swap(&b);
  }
  inline void Swap(ModbusVariable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModbusVariable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModbusVariable* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModbusVariable>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModbusVariable& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ModbusVariable& from) {
    ModbusVariable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModbusVariable* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ModbusVariable";
  }
  protected:
  explicit ModbusVariable(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using SignalType = ModbusVariable_SignalType;
  static constexpr SignalType ReadCoil = ModbusVariable_SignalType_ReadCoil;
  static constexpr SignalType WriteCoil = ModbusVariable_SignalType_WriteCoil;
  static constexpr SignalType ReadRegister = ModbusVariable_SignalType_ReadRegister;
  static constexpr SignalType WriteRegister = ModbusVariable_SignalType_WriteRegister;
  static inline bool SignalType_IsValid(int value) {
    return ModbusVariable_SignalType_IsValid(value);
  }
  static constexpr SignalType SignalType_MIN = ModbusVariable_SignalType_SignalType_MIN;
  static constexpr SignalType SignalType_MAX = ModbusVariable_SignalType_SignalType_MAX;
  static constexpr int SignalType_ARRAYSIZE = ModbusVariable_SignalType_SignalType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SignalType_descriptor() {
    return ModbusVariable_SignalType_descriptor();
  }
  template <typename T>
  static inline const std::string& SignalType_Name(T value) {
    return ModbusVariable_SignalType_Name(value);
  }
  static inline bool SignalType_Parse(absl::string_view name, SignalType* value) {
    return ModbusVariable_SignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAddrFieldNumber = 2,
    kValueFieldNumber = 3,
    kSignalTypeFieldNumber = 4,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 addr = 2;
  void clear_addr() ;
  ::int32_t addr() const;
  void set_addr(::int32_t value);

  private:
  ::int32_t _internal_addr() const;
  void _internal_set_addr(::int32_t value);

  public:
  // int32 value = 3;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // .Nrmk.IndyFramework.ModbusVariable.SignalType signal_type = 4;
  void clear_signal_type() ;
  ::Nrmk::IndyFramework::ModbusVariable_SignalType signal_type() const;
  void set_signal_type(::Nrmk::IndyFramework::ModbusVariable_SignalType value);

  private:
  ::Nrmk::IndyFramework::ModbusVariable_SignalType _internal_signal_type() const;
  void _internal_set_signal_type(::Nrmk::IndyFramework::ModbusVariable_SignalType value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ModbusVariable)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 46, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t addr_;
    ::int32_t value_;
    int signal_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class BoolVariable final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.BoolVariable) */ {
 public:
  inline BoolVariable() : BoolVariable(nullptr) {}
  ~BoolVariable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BoolVariable(::google::protobuf::internal::ConstantInitialized);

  BoolVariable(const BoolVariable& from);
  BoolVariable(BoolVariable&& from) noexcept
    : BoolVariable() {
    *this = ::std::move(from);
  }

  inline BoolVariable& operator=(const BoolVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolVariable& operator=(BoolVariable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoolVariable& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolVariable* internal_default_instance() {
    return reinterpret_cast<const BoolVariable*>(
               &_BoolVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(BoolVariable& a, BoolVariable& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolVariable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolVariable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoolVariable* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoolVariable>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BoolVariable& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BoolVariable& from) {
    BoolVariable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolVariable* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.BoolVariable";
  }
  protected:
  explicit BoolVariable(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int32 addr = 1;
  void clear_addr() ;
  ::int32_t addr() const;
  void set_addr(::int32_t value);

  private:
  ::int32_t _internal_addr() const;
  void _internal_set_addr(::int32_t value);

  public:
  // bool value = 2;
  void clear_value() ;
  bool value() const;
  void set_value(bool value);

  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.BoolVariable)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t addr_;
    bool value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class FloatVariable final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FloatVariable) */ {
 public:
  inline FloatVariable() : FloatVariable(nullptr) {}
  ~FloatVariable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FloatVariable(::google::protobuf::internal::ConstantInitialized);

  FloatVariable(const FloatVariable& from);
  FloatVariable(FloatVariable&& from) noexcept
    : FloatVariable() {
    *this = ::std::move(from);
  }

  inline FloatVariable& operator=(const FloatVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatVariable& operator=(FloatVariable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatVariable& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatVariable* internal_default_instance() {
    return reinterpret_cast<const FloatVariable*>(
               &_FloatVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(FloatVariable& a, FloatVariable& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatVariable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatVariable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatVariable* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatVariable>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FloatVariable& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FloatVariable& from) {
    FloatVariable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatVariable* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.FloatVariable";
  }
  protected:
  explicit FloatVariable(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int32 addr = 1;
  void clear_addr() ;
  ::int32_t addr() const;
  void set_addr(::int32_t value);

  private:
  ::int32_t _internal_addr() const;
  void _internal_set_addr(::int32_t value);

  public:
  // float value = 2;
  void clear_value() ;
  float value() const;
  void set_value(float value);

  private:
  float _internal_value() const;
  void _internal_set_value(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FloatVariable)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t addr_;
    float value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class JPosVariable final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.JPosVariable) */ {
 public:
  inline JPosVariable() : JPosVariable(nullptr) {}
  ~JPosVariable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JPosVariable(::google::protobuf::internal::ConstantInitialized);

  JPosVariable(const JPosVariable& from);
  JPosVariable(JPosVariable&& from) noexcept
    : JPosVariable() {
    *this = ::std::move(from);
  }

  inline JPosVariable& operator=(const JPosVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline JPosVariable& operator=(JPosVariable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JPosVariable& default_instance() {
    return *internal_default_instance();
  }
  static inline const JPosVariable* internal_default_instance() {
    return reinterpret_cast<const JPosVariable*>(
               &_JPosVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(JPosVariable& a, JPosVariable& b) {
    a.Swap(&b);
  }
  inline void Swap(JPosVariable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JPosVariable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JPosVariable* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JPosVariable>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JPosVariable& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JPosVariable& from) {
    JPosVariable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JPosVariable* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.JPosVariable";
  }
  protected:
  explicit JPosVariable(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJposFieldNumber = 2,
    kAddrFieldNumber = 1,
  };
  // repeated float jpos = 2;
  int jpos_size() const;
  private:
  int _internal_jpos_size() const;

  public:
  void clear_jpos() ;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::google::protobuf::RepeatedField<float>& jpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_jpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_jpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_jpos();

  public:
  // int32 addr = 1;
  void clear_addr() ;
  ::int32_t addr() const;
  void set_addr(::int32_t value);

  private:
  ::int32_t _internal_addr() const;
  void _internal_set_addr(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.JPosVariable)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> jpos_;
    ::int32_t addr_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TPosVariable final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TPosVariable) */ {
 public:
  inline TPosVariable() : TPosVariable(nullptr) {}
  ~TPosVariable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TPosVariable(::google::protobuf::internal::ConstantInitialized);

  TPosVariable(const TPosVariable& from);
  TPosVariable(TPosVariable&& from) noexcept
    : TPosVariable() {
    *this = ::std::move(from);
  }

  inline TPosVariable& operator=(const TPosVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPosVariable& operator=(TPosVariable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPosVariable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPosVariable* internal_default_instance() {
    return reinterpret_cast<const TPosVariable*>(
               &_TPosVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(TPosVariable& a, TPosVariable& b) {
    a.Swap(&b);
  }
  inline void Swap(TPosVariable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPosVariable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TPosVariable* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TPosVariable>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TPosVariable& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TPosVariable& from) {
    TPosVariable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPosVariable* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TPosVariable";
  }
  protected:
  explicit TPosVariable(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTposFieldNumber = 2,
    kAddrFieldNumber = 1,
  };
  // repeated float tpos = 2;
  int tpos_size() const;
  private:
  int _internal_tpos_size() const;

  public:
  void clear_tpos() ;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::google::protobuf::RepeatedField<float>& tpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_tpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tpos();

  public:
  // int32 addr = 1;
  void clear_addr() ;
  ::int32_t addr() const;
  void set_addr(::int32_t value);

  private:
  ::int32_t _internal_addr() const;
  void _internal_set_addr(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TPosVariable)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> tpos_;
    ::int32_t addr_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ModbusServer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ModbusServer) */ {
 public:
  inline ModbusServer() : ModbusServer(nullptr) {}
  ~ModbusServer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModbusServer(::google::protobuf::internal::ConstantInitialized);

  ModbusServer(const ModbusServer& from);
  ModbusServer(ModbusServer&& from) noexcept
    : ModbusServer() {
    *this = ::std::move(from);
  }

  inline ModbusServer& operator=(const ModbusServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModbusServer& operator=(ModbusServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModbusServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModbusServer* internal_default_instance() {
    return reinterpret_cast<const ModbusServer*>(
               &_ModbusServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ModbusServer& a, ModbusServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ModbusServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModbusServer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModbusServer* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModbusServer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModbusServer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ModbusServer& from) {
    ModbusServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModbusServer* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ModbusServer";
  }
  protected:
  explicit ModbusServer(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariableListFieldNumber = 4,
    kServerNameFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // repeated .Nrmk.IndyFramework.ModbusVariable variable_list = 4;
  int variable_list_size() const;
  private:
  int _internal_variable_list_size() const;

  public:
  void clear_variable_list() ;
  ::Nrmk::IndyFramework::ModbusVariable* mutable_variable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >*
      mutable_variable_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusVariable>& _internal_variable_list() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusVariable>* _internal_mutable_variable_list();
  public:
  const ::Nrmk::IndyFramework::ModbusVariable& variable_list(int index) const;
  ::Nrmk::IndyFramework::ModbusVariable* add_variable_list();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >&
      variable_list() const;
  // string server_name = 1;
  void clear_server_name() ;
  const std::string& server_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_name(Arg_&& arg, Args_... args);
  std::string* mutable_server_name();
  PROTOBUF_NODISCARD std::string* release_server_name();
  void set_allocated_server_name(std::string* ptr);

  private:
  const std::string& _internal_server_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_name(
      const std::string& value);
  std::string* _internal_mutable_server_name();

  public:
  // string ip = 2;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ptr);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // int32 port = 3;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ModbusServer)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 53, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable > variable_list_;
    ::google::protobuf::internal::ArenaStringPtr server_name_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::int32_t port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ModbusVariableList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ModbusVariableList) */ {
 public:
  inline ModbusVariableList() : ModbusVariableList(nullptr) {}
  ~ModbusVariableList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModbusVariableList(::google::protobuf::internal::ConstantInitialized);

  ModbusVariableList(const ModbusVariableList& from);
  ModbusVariableList(ModbusVariableList&& from) noexcept
    : ModbusVariableList() {
    *this = ::std::move(from);
  }

  inline ModbusVariableList& operator=(const ModbusVariableList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModbusVariableList& operator=(ModbusVariableList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModbusVariableList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModbusVariableList* internal_default_instance() {
    return reinterpret_cast<const ModbusVariableList*>(
               &_ModbusVariableList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ModbusVariableList& a, ModbusVariableList& b) {
    a.Swap(&b);
  }
  inline void Swap(ModbusVariableList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModbusVariableList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModbusVariableList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModbusVariableList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModbusVariableList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ModbusVariableList& from) {
    ModbusVariableList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModbusVariableList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ModbusVariableList";
  }
  protected:
  explicit ModbusVariableList(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModbusVariablesFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.ModbusServer modbus_variables = 1;
  int modbus_variables_size() const;
  private:
  int _internal_modbus_variables_size() const;

  public:
  void clear_modbus_variables() ;
  ::Nrmk::IndyFramework::ModbusServer* mutable_modbus_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusServer >*
      mutable_modbus_variables();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusServer>& _internal_modbus_variables() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusServer>* _internal_mutable_modbus_variables();
  public:
  const ::Nrmk::IndyFramework::ModbusServer& modbus_variables(int index) const;
  ::Nrmk::IndyFramework::ModbusServer* add_modbus_variables();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusServer >&
      modbus_variables() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ModbusVariableList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusServer > modbus_variables_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class AllVars final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.AllVars) */ {
 public:
  inline AllVars() : AllVars(nullptr) {}
  ~AllVars() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AllVars(::google::protobuf::internal::ConstantInitialized);

  AllVars(const AllVars& from);
  AllVars(AllVars&& from) noexcept
    : AllVars() {
    *this = ::std::move(from);
  }

  inline AllVars& operator=(const AllVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllVars& operator=(AllVars&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllVars& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllVars* internal_default_instance() {
    return reinterpret_cast<const AllVars*>(
               &_AllVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(AllVars& a, AllVars& b) {
    a.Swap(&b);
  }
  inline void Swap(AllVars* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllVars* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllVars* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllVars>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AllVars& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AllVars& from) {
    AllVars::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllVars* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.AllVars";
  }
  protected:
  explicit AllVars(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.Variable variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  ::Nrmk::IndyFramework::Variable* mutable_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Variable >*
      mutable_variables();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Variable>& _internal_variables() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Variable>* _internal_mutable_variables();
  public:
  const ::Nrmk::IndyFramework::Variable& variables(int index) const;
  ::Nrmk::IndyFramework::Variable* add_variables();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Variable >&
      variables() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.AllVars)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Variable > variables_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class IntVars final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IntVars) */ {
 public:
  inline IntVars() : IntVars(nullptr) {}
  ~IntVars() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IntVars(::google::protobuf::internal::ConstantInitialized);

  IntVars(const IntVars& from);
  IntVars(IntVars&& from) noexcept
    : IntVars() {
    *this = ::std::move(from);
  }

  inline IntVars& operator=(const IntVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntVars& operator=(IntVars&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntVars& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntVars* internal_default_instance() {
    return reinterpret_cast<const IntVars*>(
               &_IntVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(IntVars& a, IntVars& b) {
    a.Swap(&b);
  }
  inline void Swap(IntVars* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntVars* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntVars* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntVars>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntVars& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IntVars& from) {
    IntVars::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntVars* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.IntVars";
  }
  protected:
  explicit IntVars(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.IntVariable variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  ::Nrmk::IndyFramework::IntVariable* mutable_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >*
      mutable_variables();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::IntVariable>& _internal_variables() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::IntVariable>* _internal_mutable_variables();
  public:
  const ::Nrmk::IndyFramework::IntVariable& variables(int index) const;
  ::Nrmk::IndyFramework::IntVariable* add_variables();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >&
      variables() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IntVars)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable > variables_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ModbusVars final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ModbusVars) */ {
 public:
  inline ModbusVars() : ModbusVars(nullptr) {}
  ~ModbusVars() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModbusVars(::google::protobuf::internal::ConstantInitialized);

  ModbusVars(const ModbusVars& from);
  ModbusVars(ModbusVars&& from) noexcept
    : ModbusVars() {
    *this = ::std::move(from);
  }

  inline ModbusVars& operator=(const ModbusVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModbusVars& operator=(ModbusVars&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModbusVars& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModbusVars* internal_default_instance() {
    return reinterpret_cast<const ModbusVars*>(
               &_ModbusVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ModbusVars& a, ModbusVars& b) {
    a.Swap(&b);
  }
  inline void Swap(ModbusVars* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModbusVars* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModbusVars* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModbusVars>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModbusVars& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ModbusVars& from) {
    ModbusVars::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModbusVars* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ModbusVars";
  }
  protected:
  explicit ModbusVars(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.ModbusVariable variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  ::Nrmk::IndyFramework::ModbusVariable* mutable_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >*
      mutable_variables();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusVariable>& _internal_variables() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusVariable>* _internal_mutable_variables();
  public:
  const ::Nrmk::IndyFramework::ModbusVariable& variables(int index) const;
  ::Nrmk::IndyFramework::ModbusVariable* add_variables();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >&
      variables() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ModbusVars)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable > variables_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class BoolVars final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.BoolVars) */ {
 public:
  inline BoolVars() : BoolVars(nullptr) {}
  ~BoolVars() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BoolVars(::google::protobuf::internal::ConstantInitialized);

  BoolVars(const BoolVars& from);
  BoolVars(BoolVars&& from) noexcept
    : BoolVars() {
    *this = ::std::move(from);
  }

  inline BoolVars& operator=(const BoolVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolVars& operator=(BoolVars&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoolVars& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolVars* internal_default_instance() {
    return reinterpret_cast<const BoolVars*>(
               &_BoolVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(BoolVars& a, BoolVars& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolVars* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolVars* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoolVars* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoolVars>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BoolVars& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BoolVars& from) {
    BoolVars::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolVars* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.BoolVars";
  }
  protected:
  explicit BoolVars(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.BoolVariable variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  ::Nrmk::IndyFramework::BoolVariable* mutable_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >*
      mutable_variables();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::BoolVariable>& _internal_variables() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::BoolVariable>* _internal_mutable_variables();
  public:
  const ::Nrmk::IndyFramework::BoolVariable& variables(int index) const;
  ::Nrmk::IndyFramework::BoolVariable* add_variables();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >&
      variables() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.BoolVars)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable > variables_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class FloatVars final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FloatVars) */ {
 public:
  inline FloatVars() : FloatVars(nullptr) {}
  ~FloatVars() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FloatVars(::google::protobuf::internal::ConstantInitialized);

  FloatVars(const FloatVars& from);
  FloatVars(FloatVars&& from) noexcept
    : FloatVars() {
    *this = ::std::move(from);
  }

  inline FloatVars& operator=(const FloatVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatVars& operator=(FloatVars&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatVars& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatVars* internal_default_instance() {
    return reinterpret_cast<const FloatVars*>(
               &_FloatVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(FloatVars& a, FloatVars& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatVars* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatVars* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatVars* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatVars>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FloatVars& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FloatVars& from) {
    FloatVars::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatVars* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.FloatVars";
  }
  protected:
  explicit FloatVars(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.FloatVariable variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  ::Nrmk::IndyFramework::FloatVariable* mutable_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >*
      mutable_variables();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::FloatVariable>& _internal_variables() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::FloatVariable>* _internal_mutable_variables();
  public:
  const ::Nrmk::IndyFramework::FloatVariable& variables(int index) const;
  ::Nrmk::IndyFramework::FloatVariable* add_variables();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >&
      variables() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FloatVars)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable > variables_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class JPosVars final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.JPosVars) */ {
 public:
  inline JPosVars() : JPosVars(nullptr) {}
  ~JPosVars() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JPosVars(::google::protobuf::internal::ConstantInitialized);

  JPosVars(const JPosVars& from);
  JPosVars(JPosVars&& from) noexcept
    : JPosVars() {
    *this = ::std::move(from);
  }

  inline JPosVars& operator=(const JPosVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline JPosVars& operator=(JPosVars&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JPosVars& default_instance() {
    return *internal_default_instance();
  }
  static inline const JPosVars* internal_default_instance() {
    return reinterpret_cast<const JPosVars*>(
               &_JPosVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(JPosVars& a, JPosVars& b) {
    a.Swap(&b);
  }
  inline void Swap(JPosVars* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JPosVars* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JPosVars* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JPosVars>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JPosVars& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JPosVars& from) {
    JPosVars::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JPosVars* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.JPosVars";
  }
  protected:
  explicit JPosVars(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.JPosVariable variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  ::Nrmk::IndyFramework::JPosVariable* mutable_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >*
      mutable_variables();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::JPosVariable>& _internal_variables() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::JPosVariable>* _internal_mutable_variables();
  public:
  const ::Nrmk::IndyFramework::JPosVariable& variables(int index) const;
  ::Nrmk::IndyFramework::JPosVariable* add_variables();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >&
      variables() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.JPosVars)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable > variables_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TPosVars final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TPosVars) */ {
 public:
  inline TPosVars() : TPosVars(nullptr) {}
  ~TPosVars() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TPosVars(::google::protobuf::internal::ConstantInitialized);

  TPosVars(const TPosVars& from);
  TPosVars(TPosVars&& from) noexcept
    : TPosVars() {
    *this = ::std::move(from);
  }

  inline TPosVars& operator=(const TPosVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPosVars& operator=(TPosVars&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPosVars& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPosVars* internal_default_instance() {
    return reinterpret_cast<const TPosVars*>(
               &_TPosVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(TPosVars& a, TPosVars& b) {
    a.Swap(&b);
  }
  inline void Swap(TPosVars* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPosVars* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TPosVars* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TPosVars>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TPosVars& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TPosVars& from) {
    TPosVars::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPosVars* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TPosVars";
  }
  protected:
  explicit TPosVars(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.TPosVariable variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  ::Nrmk::IndyFramework::TPosVariable* mutable_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >*
      mutable_variables();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::TPosVariable>& _internal_variables() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::TPosVariable>* _internal_mutable_variables();
  public:
  const ::Nrmk::IndyFramework::TPosVariable& variables(int index) const;
  ::Nrmk::IndyFramework::TPosVariable* add_variables();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >&
      variables() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TPosVars)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable > variables_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class InverseKinematicsReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.InverseKinematicsReq) */ {
 public:
  inline InverseKinematicsReq() : InverseKinematicsReq(nullptr) {}
  ~InverseKinematicsReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InverseKinematicsReq(::google::protobuf::internal::ConstantInitialized);

  InverseKinematicsReq(const InverseKinematicsReq& from);
  InverseKinematicsReq(InverseKinematicsReq&& from) noexcept
    : InverseKinematicsReq() {
    *this = ::std::move(from);
  }

  inline InverseKinematicsReq& operator=(const InverseKinematicsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline InverseKinematicsReq& operator=(InverseKinematicsReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InverseKinematicsReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const InverseKinematicsReq* internal_default_instance() {
    return reinterpret_cast<const InverseKinematicsReq*>(
               &_InverseKinematicsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(InverseKinematicsReq& a, InverseKinematicsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(InverseKinematicsReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InverseKinematicsReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InverseKinematicsReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InverseKinematicsReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InverseKinematicsReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InverseKinematicsReq& from) {
    InverseKinematicsReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InverseKinematicsReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.InverseKinematicsReq";
  }
  protected:
  explicit InverseKinematicsReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTposFieldNumber = 1,
    kInitJposFieldNumber = 2,
  };
  // repeated float tpos = 1;
  int tpos_size() const;
  private:
  int _internal_tpos_size() const;

  public:
  void clear_tpos() ;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::google::protobuf::RepeatedField<float>& tpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_tpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tpos();

  public:
  // repeated float init_jpos = 2;
  int init_jpos_size() const;
  private:
  int _internal_init_jpos_size() const;

  public:
  void clear_init_jpos() ;
  float init_jpos(int index) const;
  void set_init_jpos(int index, float value);
  void add_init_jpos(float value);
  const ::google::protobuf::RepeatedField<float>& init_jpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_init_jpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_init_jpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_init_jpos();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.InverseKinematicsReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> tpos_;
    ::google::protobuf::RepeatedField<float> init_jpos_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class InverseKinematicsRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.InverseKinematicsRes) */ {
 public:
  inline InverseKinematicsRes() : InverseKinematicsRes(nullptr) {}
  ~InverseKinematicsRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InverseKinematicsRes(::google::protobuf::internal::ConstantInitialized);

  InverseKinematicsRes(const InverseKinematicsRes& from);
  InverseKinematicsRes(InverseKinematicsRes&& from) noexcept
    : InverseKinematicsRes() {
    *this = ::std::move(from);
  }

  inline InverseKinematicsRes& operator=(const InverseKinematicsRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline InverseKinematicsRes& operator=(InverseKinematicsRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InverseKinematicsRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const InverseKinematicsRes* internal_default_instance() {
    return reinterpret_cast<const InverseKinematicsRes*>(
               &_InverseKinematicsRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(InverseKinematicsRes& a, InverseKinematicsRes& b) {
    a.Swap(&b);
  }
  inline void Swap(InverseKinematicsRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InverseKinematicsRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InverseKinematicsRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InverseKinematicsRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InverseKinematicsRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InverseKinematicsRes& from) {
    InverseKinematicsRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InverseKinematicsRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.InverseKinematicsRes";
  }
  protected:
  explicit InverseKinematicsRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJposFieldNumber = 1,
    kResponseFieldNumber = 100,
  };
  // repeated float jpos = 1;
  int jpos_size() const;
  private:
  int _internal_jpos_size() const;

  public:
  void clear_jpos() ;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::google::protobuf::RepeatedField<float>& jpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_jpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_jpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_jpos();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.InverseKinematicsRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> jpos_;
    ::Nrmk::IndyFramework::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ForwardKinematicsReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ForwardKinematicsReq) */ {
 public:
  inline ForwardKinematicsReq() : ForwardKinematicsReq(nullptr) {}
  ~ForwardKinematicsReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ForwardKinematicsReq(::google::protobuf::internal::ConstantInitialized);

  ForwardKinematicsReq(const ForwardKinematicsReq& from);
  ForwardKinematicsReq(ForwardKinematicsReq&& from) noexcept
    : ForwardKinematicsReq() {
    *this = ::std::move(from);
  }

  inline ForwardKinematicsReq& operator=(const ForwardKinematicsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardKinematicsReq& operator=(ForwardKinematicsReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForwardKinematicsReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForwardKinematicsReq* internal_default_instance() {
    return reinterpret_cast<const ForwardKinematicsReq*>(
               &_ForwardKinematicsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ForwardKinematicsReq& a, ForwardKinematicsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardKinematicsReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForwardKinematicsReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForwardKinematicsReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForwardKinematicsReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ForwardKinematicsReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ForwardKinematicsReq& from) {
    ForwardKinematicsReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardKinematicsReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ForwardKinematicsReq";
  }
  protected:
  explicit ForwardKinematicsReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJposFieldNumber = 1,
  };
  // repeated float jpos = 1;
  int jpos_size() const;
  private:
  int _internal_jpos_size() const;

  public:
  void clear_jpos() ;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::google::protobuf::RepeatedField<float>& jpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_jpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_jpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_jpos();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ForwardKinematicsReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> jpos_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ForwardKinematicsRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ForwardKinematicsRes) */ {
 public:
  inline ForwardKinematicsRes() : ForwardKinematicsRes(nullptr) {}
  ~ForwardKinematicsRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ForwardKinematicsRes(::google::protobuf::internal::ConstantInitialized);

  ForwardKinematicsRes(const ForwardKinematicsRes& from);
  ForwardKinematicsRes(ForwardKinematicsRes&& from) noexcept
    : ForwardKinematicsRes() {
    *this = ::std::move(from);
  }

  inline ForwardKinematicsRes& operator=(const ForwardKinematicsRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardKinematicsRes& operator=(ForwardKinematicsRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForwardKinematicsRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForwardKinematicsRes* internal_default_instance() {
    return reinterpret_cast<const ForwardKinematicsRes*>(
               &_ForwardKinematicsRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ForwardKinematicsRes& a, ForwardKinematicsRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardKinematicsRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForwardKinematicsRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForwardKinematicsRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForwardKinematicsRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ForwardKinematicsRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ForwardKinematicsRes& from) {
    ForwardKinematicsRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardKinematicsRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ForwardKinematicsRes";
  }
  protected:
  explicit ForwardKinematicsRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTposFieldNumber = 1,
    kResponseFieldNumber = 100,
  };
  // repeated float tpos = 1;
  int tpos_size() const;
  private:
  int _internal_tpos_size() const;

  public:
  void clear_tpos() ;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::google::protobuf::RepeatedField<float>& tpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_tpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tpos();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ForwardKinematicsRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> tpos_;
    ::Nrmk::IndyFramework::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class CheckAproachRetractValidReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CheckAproachRetractValidReq) */ {
 public:
  inline CheckAproachRetractValidReq() : CheckAproachRetractValidReq(nullptr) {}
  ~CheckAproachRetractValidReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CheckAproachRetractValidReq(::google::protobuf::internal::ConstantInitialized);

  CheckAproachRetractValidReq(const CheckAproachRetractValidReq& from);
  CheckAproachRetractValidReq(CheckAproachRetractValidReq&& from) noexcept
    : CheckAproachRetractValidReq() {
    *this = ::std::move(from);
  }

  inline CheckAproachRetractValidReq& operator=(const CheckAproachRetractValidReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckAproachRetractValidReq& operator=(CheckAproachRetractValidReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckAproachRetractValidReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckAproachRetractValidReq* internal_default_instance() {
    return reinterpret_cast<const CheckAproachRetractValidReq*>(
               &_CheckAproachRetractValidReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CheckAproachRetractValidReq& a, CheckAproachRetractValidReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckAproachRetractValidReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckAproachRetractValidReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckAproachRetractValidReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckAproachRetractValidReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CheckAproachRetractValidReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CheckAproachRetractValidReq& from) {
    CheckAproachRetractValidReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckAproachRetractValidReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.CheckAproachRetractValidReq";
  }
  protected:
  explicit CheckAproachRetractValidReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTposFieldNumber = 1,
    kInitJposFieldNumber = 2,
    kPreTposFieldNumber = 3,
    kPostTposFieldNumber = 4,
  };
  // repeated float tpos = 1;
  int tpos_size() const;
  private:
  int _internal_tpos_size() const;

  public:
  void clear_tpos() ;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::google::protobuf::RepeatedField<float>& tpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_tpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tpos();

  public:
  // repeated float init_jpos = 2;
  int init_jpos_size() const;
  private:
  int _internal_init_jpos_size() const;

  public:
  void clear_init_jpos() ;
  float init_jpos(int index) const;
  void set_init_jpos(int index, float value);
  void add_init_jpos(float value);
  const ::google::protobuf::RepeatedField<float>& init_jpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_init_jpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_init_jpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_init_jpos();

  public:
  // repeated float pre_tpos = 3;
  int pre_tpos_size() const;
  private:
  int _internal_pre_tpos_size() const;

  public:
  void clear_pre_tpos() ;
  float pre_tpos(int index) const;
  void set_pre_tpos(int index, float value);
  void add_pre_tpos(float value);
  const ::google::protobuf::RepeatedField<float>& pre_tpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_pre_tpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_pre_tpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_pre_tpos();

  public:
  // repeated float post_tpos = 4;
  int post_tpos_size() const;
  private:
  int _internal_post_tpos_size() const;

  public:
  void clear_post_tpos() ;
  float post_tpos(int index) const;
  void set_post_tpos(int index, float value);
  void add_post_tpos(float value);
  const ::google::protobuf::RepeatedField<float>& post_tpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_post_tpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_post_tpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_post_tpos();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CheckAproachRetractValidReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> tpos_;
    ::google::protobuf::RepeatedField<float> init_jpos_;
    ::google::protobuf::RepeatedField<float> pre_tpos_;
    ::google::protobuf::RepeatedField<float> post_tpos_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class CheckAproachRetractValidRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CheckAproachRetractValidRes) */ {
 public:
  inline CheckAproachRetractValidRes() : CheckAproachRetractValidRes(nullptr) {}
  ~CheckAproachRetractValidRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CheckAproachRetractValidRes(::google::protobuf::internal::ConstantInitialized);

  CheckAproachRetractValidRes(const CheckAproachRetractValidRes& from);
  CheckAproachRetractValidRes(CheckAproachRetractValidRes&& from) noexcept
    : CheckAproachRetractValidRes() {
    *this = ::std::move(from);
  }

  inline CheckAproachRetractValidRes& operator=(const CheckAproachRetractValidRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckAproachRetractValidRes& operator=(CheckAproachRetractValidRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckAproachRetractValidRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckAproachRetractValidRes* internal_default_instance() {
    return reinterpret_cast<const CheckAproachRetractValidRes*>(
               &_CheckAproachRetractValidRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CheckAproachRetractValidRes& a, CheckAproachRetractValidRes& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckAproachRetractValidRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckAproachRetractValidRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckAproachRetractValidRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckAproachRetractValidRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CheckAproachRetractValidRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CheckAproachRetractValidRes& from) {
    CheckAproachRetractValidRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckAproachRetractValidRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.CheckAproachRetractValidRes";
  }
  protected:
  explicit CheckAproachRetractValidRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTarPosFieldNumber = 2,
    kApproachPosFieldNumber = 3,
    kRetractPosFieldNumber = 4,
    kResponseFieldNumber = 100,
    kIsValidFieldNumber = 1,
  };
  // repeated float tar_pos = 2;
  int tar_pos_size() const;
  private:
  int _internal_tar_pos_size() const;

  public:
  void clear_tar_pos() ;
  float tar_pos(int index) const;
  void set_tar_pos(int index, float value);
  void add_tar_pos(float value);
  const ::google::protobuf::RepeatedField<float>& tar_pos() const;
  ::google::protobuf::RepeatedField<float>* mutable_tar_pos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tar_pos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tar_pos();

  public:
  // repeated float approach_pos = 3;
  int approach_pos_size() const;
  private:
  int _internal_approach_pos_size() const;

  public:
  void clear_approach_pos() ;
  float approach_pos(int index) const;
  void set_approach_pos(int index, float value);
  void add_approach_pos(float value);
  const ::google::protobuf::RepeatedField<float>& approach_pos() const;
  ::google::protobuf::RepeatedField<float>* mutable_approach_pos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_approach_pos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_approach_pos();

  public:
  // repeated float retract_pos = 4;
  int retract_pos_size() const;
  private:
  int _internal_retract_pos_size() const;

  public:
  void clear_retract_pos() ;
  float retract_pos(int index) const;
  void set_retract_pos(int index, float value);
  void add_retract_pos(float value);
  const ::google::protobuf::RepeatedField<float>& retract_pos() const;
  ::google::protobuf::RepeatedField<float>* mutable_retract_pos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_retract_pos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_retract_pos();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // bool is_valid = 1;
  void clear_is_valid() ;
  bool is_valid() const;
  void set_is_valid(bool value);

  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CheckAproachRetractValidRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 5, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> tar_pos_;
    ::google::protobuf::RepeatedField<float> approach_pos_;
    ::google::protobuf::RepeatedField<float> retract_pos_;
    ::Nrmk::IndyFramework::Response* response_;
    bool is_valid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class GetPalletPointListReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.GetPalletPointListReq) */ {
 public:
  inline GetPalletPointListReq() : GetPalletPointListReq(nullptr) {}
  ~GetPalletPointListReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPalletPointListReq(::google::protobuf::internal::ConstantInitialized);

  GetPalletPointListReq(const GetPalletPointListReq& from);
  GetPalletPointListReq(GetPalletPointListReq&& from) noexcept
    : GetPalletPointListReq() {
    *this = ::std::move(from);
  }

  inline GetPalletPointListReq& operator=(const GetPalletPointListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPalletPointListReq& operator=(GetPalletPointListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPalletPointListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPalletPointListReq* internal_default_instance() {
    return reinterpret_cast<const GetPalletPointListReq*>(
               &_GetPalletPointListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GetPalletPointListReq& a, GetPalletPointListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPalletPointListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPalletPointListReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPalletPointListReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPalletPointListReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetPalletPointListReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetPalletPointListReq& from) {
    GetPalletPointListReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPalletPointListReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.GetPalletPointListReq";
  }
  protected:
  explicit GetPalletPointListReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTposFieldNumber = 1,
    kJposFieldNumber = 2,
    kPreTposFieldNumber = 3,
    kPostTposFieldNumber = 4,
    kPalletPatternFieldNumber = 5,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
  };
  // repeated float tpos = 1;
  int tpos_size() const;
  private:
  int _internal_tpos_size() const;

  public:
  void clear_tpos() ;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::google::protobuf::RepeatedField<float>& tpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_tpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tpos();

  public:
  // repeated float jpos = 2;
  int jpos_size() const;
  private:
  int _internal_jpos_size() const;

  public:
  void clear_jpos() ;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::google::protobuf::RepeatedField<float>& jpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_jpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_jpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_jpos();

  public:
  // repeated float pre_tpos = 3;
  int pre_tpos_size() const;
  private:
  int _internal_pre_tpos_size() const;

  public:
  void clear_pre_tpos() ;
  float pre_tpos(int index) const;
  void set_pre_tpos(int index, float value);
  void add_pre_tpos(float value);
  const ::google::protobuf::RepeatedField<float>& pre_tpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_pre_tpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_pre_tpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_pre_tpos();

  public:
  // repeated float post_tpos = 4;
  int post_tpos_size() const;
  private:
  int _internal_post_tpos_size() const;

  public:
  void clear_post_tpos() ;
  float post_tpos(int index) const;
  void set_post_tpos(int index, float value);
  void add_post_tpos(float value);
  const ::google::protobuf::RepeatedField<float>& post_tpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_post_tpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_post_tpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_post_tpos();

  public:
  // int32 pallet_pattern = 5;
  void clear_pallet_pattern() ;
  ::int32_t pallet_pattern() const;
  void set_pallet_pattern(::int32_t value);

  private:
  ::int32_t _internal_pallet_pattern() const;
  void _internal_set_pallet_pattern(::int32_t value);

  public:
  // int32 width = 6;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // int32 height = 7;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.GetPalletPointListReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> tpos_;
    ::google::protobuf::RepeatedField<float> jpos_;
    ::google::protobuf::RepeatedField<float> pre_tpos_;
    ::google::protobuf::RepeatedField<float> post_tpos_;
    ::int32_t pallet_pattern_;
    ::int32_t width_;
    ::int32_t height_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class PalletPoint final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.PalletPoint) */ {
 public:
  inline PalletPoint() : PalletPoint(nullptr) {}
  ~PalletPoint() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PalletPoint(::google::protobuf::internal::ConstantInitialized);

  PalletPoint(const PalletPoint& from);
  PalletPoint(PalletPoint&& from) noexcept
    : PalletPoint() {
    *this = ::std::move(from);
  }

  inline PalletPoint& operator=(const PalletPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PalletPoint& operator=(PalletPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PalletPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const PalletPoint* internal_default_instance() {
    return reinterpret_cast<const PalletPoint*>(
               &_PalletPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(PalletPoint& a, PalletPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PalletPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PalletPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PalletPoint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PalletPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PalletPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PalletPoint& from) {
    PalletPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PalletPoint* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.PalletPoint";
  }
  protected:
  explicit PalletPoint(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTarPosFieldNumber = 1,
    kApproachPosFieldNumber = 2,
    kRetractPosFieldNumber = 3,
    kTarJposFieldNumber = 4,
  };
  // repeated float tar_pos = 1;
  int tar_pos_size() const;
  private:
  int _internal_tar_pos_size() const;

  public:
  void clear_tar_pos() ;
  float tar_pos(int index) const;
  void set_tar_pos(int index, float value);
  void add_tar_pos(float value);
  const ::google::protobuf::RepeatedField<float>& tar_pos() const;
  ::google::protobuf::RepeatedField<float>* mutable_tar_pos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tar_pos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tar_pos();

  public:
  // repeated float approach_pos = 2;
  int approach_pos_size() const;
  private:
  int _internal_approach_pos_size() const;

  public:
  void clear_approach_pos() ;
  float approach_pos(int index) const;
  void set_approach_pos(int index, float value);
  void add_approach_pos(float value);
  const ::google::protobuf::RepeatedField<float>& approach_pos() const;
  ::google::protobuf::RepeatedField<float>* mutable_approach_pos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_approach_pos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_approach_pos();

  public:
  // repeated float retract_pos = 3;
  int retract_pos_size() const;
  private:
  int _internal_retract_pos_size() const;

  public:
  void clear_retract_pos() ;
  float retract_pos(int index) const;
  void set_retract_pos(int index, float value);
  void add_retract_pos(float value);
  const ::google::protobuf::RepeatedField<float>& retract_pos() const;
  ::google::protobuf::RepeatedField<float>* mutable_retract_pos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_retract_pos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_retract_pos();

  public:
  // repeated float tar_jpos = 4;
  int tar_jpos_size() const;
  private:
  int _internal_tar_jpos_size() const;

  public:
  void clear_tar_jpos() ;
  float tar_jpos(int index) const;
  void set_tar_jpos(int index, float value);
  void add_tar_jpos(float value);
  const ::google::protobuf::RepeatedField<float>& tar_jpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_tar_jpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tar_jpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tar_jpos();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.PalletPoint)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> tar_pos_;
    ::google::protobuf::RepeatedField<float> approach_pos_;
    ::google::protobuf::RepeatedField<float> retract_pos_;
    ::google::protobuf::RepeatedField<float> tar_jpos_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class GetPalletPointListRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.GetPalletPointListRes) */ {
 public:
  inline GetPalletPointListRes() : GetPalletPointListRes(nullptr) {}
  ~GetPalletPointListRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPalletPointListRes(::google::protobuf::internal::ConstantInitialized);

  GetPalletPointListRes(const GetPalletPointListRes& from);
  GetPalletPointListRes(GetPalletPointListRes&& from) noexcept
    : GetPalletPointListRes() {
    *this = ::std::move(from);
  }

  inline GetPalletPointListRes& operator=(const GetPalletPointListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPalletPointListRes& operator=(GetPalletPointListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPalletPointListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPalletPointListRes* internal_default_instance() {
    return reinterpret_cast<const GetPalletPointListRes*>(
               &_GetPalletPointListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetPalletPointListRes& a, GetPalletPointListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPalletPointListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPalletPointListRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPalletPointListRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPalletPointListRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetPalletPointListRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetPalletPointListRes& from) {
    GetPalletPointListRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPalletPointListRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.GetPalletPointListRes";
  }
  protected:
  explicit GetPalletPointListRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPalletPointsFieldNumber = 1,
    kResponseFieldNumber = 100,
  };
  // repeated .Nrmk.IndyFramework.PalletPoint pallet_points = 1;
  int pallet_points_size() const;
  private:
  int _internal_pallet_points_size() const;

  public:
  void clear_pallet_points() ;
  ::Nrmk::IndyFramework::PalletPoint* mutable_pallet_points(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::PalletPoint >*
      mutable_pallet_points();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::PalletPoint>& _internal_pallet_points() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::PalletPoint>* _internal_mutable_pallet_points();
  public:
  const ::Nrmk::IndyFramework::PalletPoint& pallet_points(int index) const;
  ::Nrmk::IndyFramework::PalletPoint* add_pallet_points();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::PalletPoint >&
      pallet_points() const;
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.GetPalletPointListRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::PalletPoint > pallet_points_;
    ::Nrmk::IndyFramework::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class CalculateRelativePoseReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CalculateRelativePoseReq) */ {
 public:
  inline CalculateRelativePoseReq() : CalculateRelativePoseReq(nullptr) {}
  ~CalculateRelativePoseReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CalculateRelativePoseReq(::google::protobuf::internal::ConstantInitialized);

  CalculateRelativePoseReq(const CalculateRelativePoseReq& from);
  CalculateRelativePoseReq(CalculateRelativePoseReq&& from) noexcept
    : CalculateRelativePoseReq() {
    *this = ::std::move(from);
  }

  inline CalculateRelativePoseReq& operator=(const CalculateRelativePoseReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateRelativePoseReq& operator=(CalculateRelativePoseReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateRelativePoseReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateRelativePoseReq* internal_default_instance() {
    return reinterpret_cast<const CalculateRelativePoseReq*>(
               &_CalculateRelativePoseReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CalculateRelativePoseReq& a, CalculateRelativePoseReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateRelativePoseReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateRelativePoseReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateRelativePoseReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateRelativePoseReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalculateRelativePoseReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CalculateRelativePoseReq& from) {
    CalculateRelativePoseReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateRelativePoseReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.CalculateRelativePoseReq";
  }
  protected:
  explicit CalculateRelativePoseReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPosFieldNumber = 1,
    kEndPosFieldNumber = 2,
    kBaseTypeFieldNumber = 3,
  };
  // repeated float start_pos = 1;
  int start_pos_size() const;
  private:
  int _internal_start_pos_size() const;

  public:
  void clear_start_pos() ;
  float start_pos(int index) const;
  void set_start_pos(int index, float value);
  void add_start_pos(float value);
  const ::google::protobuf::RepeatedField<float>& start_pos() const;
  ::google::protobuf::RepeatedField<float>* mutable_start_pos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_start_pos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_start_pos();

  public:
  // repeated float end_pos = 2;
  int end_pos_size() const;
  private:
  int _internal_end_pos_size() const;

  public:
  void clear_end_pos() ;
  float end_pos(int index) const;
  void set_end_pos(int index, float value);
  void add_end_pos(float value);
  const ::google::protobuf::RepeatedField<float>& end_pos() const;
  ::google::protobuf::RepeatedField<float>* mutable_end_pos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_end_pos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_end_pos();

  public:
  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  void clear_base_type() ;
  ::Nrmk::IndyFramework::TaskBaseType base_type() const;
  void set_base_type(::Nrmk::IndyFramework::TaskBaseType value);

  private:
  ::Nrmk::IndyFramework::TaskBaseType _internal_base_type() const;
  void _internal_set_base_type(::Nrmk::IndyFramework::TaskBaseType value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CalculateRelativePoseReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> start_pos_;
    ::google::protobuf::RepeatedField<float> end_pos_;
    int base_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class CalculateRelativePoseRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CalculateRelativePoseRes) */ {
 public:
  inline CalculateRelativePoseRes() : CalculateRelativePoseRes(nullptr) {}
  ~CalculateRelativePoseRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CalculateRelativePoseRes(::google::protobuf::internal::ConstantInitialized);

  CalculateRelativePoseRes(const CalculateRelativePoseRes& from);
  CalculateRelativePoseRes(CalculateRelativePoseRes&& from) noexcept
    : CalculateRelativePoseRes() {
    *this = ::std::move(from);
  }

  inline CalculateRelativePoseRes& operator=(const CalculateRelativePoseRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateRelativePoseRes& operator=(CalculateRelativePoseRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateRelativePoseRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateRelativePoseRes* internal_default_instance() {
    return reinterpret_cast<const CalculateRelativePoseRes*>(
               &_CalculateRelativePoseRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CalculateRelativePoseRes& a, CalculateRelativePoseRes& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateRelativePoseRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateRelativePoseRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateRelativePoseRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateRelativePoseRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalculateRelativePoseRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CalculateRelativePoseRes& from) {
    CalculateRelativePoseRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateRelativePoseRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.CalculateRelativePoseRes";
  }
  protected:
  explicit CalculateRelativePoseRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativePosFieldNumber = 1,
    kResponseFieldNumber = 100,
  };
  // repeated float relative_pos = 1;
  int relative_pos_size() const;
  private:
  int _internal_relative_pos_size() const;

  public:
  void clear_relative_pos() ;
  float relative_pos(int index) const;
  void set_relative_pos(int index, float value);
  void add_relative_pos(float value);
  const ::google::protobuf::RepeatedField<float>& relative_pos() const;
  ::google::protobuf::RepeatedField<float>* mutable_relative_pos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_relative_pos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_relative_pos();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CalculateRelativePoseRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> relative_pos_;
    ::Nrmk::IndyFramework::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class CalculateCurrentPoseRelReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CalculateCurrentPoseRelReq) */ {
 public:
  inline CalculateCurrentPoseRelReq() : CalculateCurrentPoseRelReq(nullptr) {}
  ~CalculateCurrentPoseRelReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CalculateCurrentPoseRelReq(::google::protobuf::internal::ConstantInitialized);

  CalculateCurrentPoseRelReq(const CalculateCurrentPoseRelReq& from);
  CalculateCurrentPoseRelReq(CalculateCurrentPoseRelReq&& from) noexcept
    : CalculateCurrentPoseRelReq() {
    *this = ::std::move(from);
  }

  inline CalculateCurrentPoseRelReq& operator=(const CalculateCurrentPoseRelReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateCurrentPoseRelReq& operator=(CalculateCurrentPoseRelReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateCurrentPoseRelReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateCurrentPoseRelReq* internal_default_instance() {
    return reinterpret_cast<const CalculateCurrentPoseRelReq*>(
               &_CalculateCurrentPoseRelReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CalculateCurrentPoseRelReq& a, CalculateCurrentPoseRelReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateCurrentPoseRelReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateCurrentPoseRelReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateCurrentPoseRelReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateCurrentPoseRelReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalculateCurrentPoseRelReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CalculateCurrentPoseRelReq& from) {
    CalculateCurrentPoseRelReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateCurrentPoseRelReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.CalculateCurrentPoseRelReq";
  }
  protected:
  explicit CalculateCurrentPoseRelReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentPosFieldNumber = 1,
    kRelativePosFieldNumber = 2,
    kBaseTypeFieldNumber = 3,
  };
  // repeated float current_pos = 1;
  int current_pos_size() const;
  private:
  int _internal_current_pos_size() const;

  public:
  void clear_current_pos() ;
  float current_pos(int index) const;
  void set_current_pos(int index, float value);
  void add_current_pos(float value);
  const ::google::protobuf::RepeatedField<float>& current_pos() const;
  ::google::protobuf::RepeatedField<float>* mutable_current_pos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_current_pos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_current_pos();

  public:
  // repeated float relative_pos = 2;
  int relative_pos_size() const;
  private:
  int _internal_relative_pos_size() const;

  public:
  void clear_relative_pos() ;
  float relative_pos(int index) const;
  void set_relative_pos(int index, float value);
  void add_relative_pos(float value);
  const ::google::protobuf::RepeatedField<float>& relative_pos() const;
  ::google::protobuf::RepeatedField<float>* mutable_relative_pos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_relative_pos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_relative_pos();

  public:
  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  void clear_base_type() ;
  ::Nrmk::IndyFramework::TaskBaseType base_type() const;
  void set_base_type(::Nrmk::IndyFramework::TaskBaseType value);

  private:
  ::Nrmk::IndyFramework::TaskBaseType _internal_base_type() const;
  void _internal_set_base_type(::Nrmk::IndyFramework::TaskBaseType value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> current_pos_;
    ::google::protobuf::RepeatedField<float> relative_pos_;
    int base_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class CalculateCurrentPoseRelRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CalculateCurrentPoseRelRes) */ {
 public:
  inline CalculateCurrentPoseRelRes() : CalculateCurrentPoseRelRes(nullptr) {}
  ~CalculateCurrentPoseRelRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CalculateCurrentPoseRelRes(::google::protobuf::internal::ConstantInitialized);

  CalculateCurrentPoseRelRes(const CalculateCurrentPoseRelRes& from);
  CalculateCurrentPoseRelRes(CalculateCurrentPoseRelRes&& from) noexcept
    : CalculateCurrentPoseRelRes() {
    *this = ::std::move(from);
  }

  inline CalculateCurrentPoseRelRes& operator=(const CalculateCurrentPoseRelRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateCurrentPoseRelRes& operator=(CalculateCurrentPoseRelRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateCurrentPoseRelRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateCurrentPoseRelRes* internal_default_instance() {
    return reinterpret_cast<const CalculateCurrentPoseRelRes*>(
               &_CalculateCurrentPoseRelRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CalculateCurrentPoseRelRes& a, CalculateCurrentPoseRelRes& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateCurrentPoseRelRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateCurrentPoseRelRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateCurrentPoseRelRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateCurrentPoseRelRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalculateCurrentPoseRelRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CalculateCurrentPoseRelRes& from) {
    CalculateCurrentPoseRelRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateCurrentPoseRelRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.CalculateCurrentPoseRelRes";
  }
  protected:
  explicit CalculateCurrentPoseRelRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalculatedPosFieldNumber = 1,
    kResponseFieldNumber = 100,
  };
  // repeated float calculated_pos = 1;
  int calculated_pos_size() const;
  private:
  int _internal_calculated_pos_size() const;

  public:
  void clear_calculated_pos() ;
  float calculated_pos(int index) const;
  void set_calculated_pos(int index, float value);
  void add_calculated_pos(float value);
  const ::google::protobuf::RepeatedField<float>& calculated_pos() const;
  ::google::protobuf::RepeatedField<float>* mutable_calculated_pos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_calculated_pos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_calculated_pos();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> calculated_pos_;
    ::Nrmk::IndyFramework::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TeleOpDevice final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TeleOpDevice) */ {
 public:
  inline TeleOpDevice() : TeleOpDevice(nullptr) {}
  ~TeleOpDevice() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TeleOpDevice(::google::protobuf::internal::ConstantInitialized);

  TeleOpDevice(const TeleOpDevice& from);
  TeleOpDevice(TeleOpDevice&& from) noexcept
    : TeleOpDevice() {
    *this = ::std::move(from);
  }

  inline TeleOpDevice& operator=(const TeleOpDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleOpDevice& operator=(TeleOpDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeleOpDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeleOpDevice* internal_default_instance() {
    return reinterpret_cast<const TeleOpDevice*>(
               &_TeleOpDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(TeleOpDevice& a, TeleOpDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(TeleOpDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeleOpDevice* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeleOpDevice* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeleOpDevice>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TeleOpDevice& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TeleOpDevice& from) {
    TeleOpDevice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleOpDevice* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TeleOpDevice";
  }
  protected:
  explicit TeleOpDevice(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using TeleOpDeviceType = TeleOpDevice_TeleOpDeviceType;
  static constexpr TeleOpDeviceType NONE = TeleOpDevice_TeleOpDeviceType_NONE;
  static constexpr TeleOpDeviceType VIVE = TeleOpDevice_TeleOpDeviceType_VIVE;
  static inline bool TeleOpDeviceType_IsValid(int value) {
    return TeleOpDevice_TeleOpDeviceType_IsValid(value);
  }
  static constexpr TeleOpDeviceType TeleOpDeviceType_MIN = TeleOpDevice_TeleOpDeviceType_TeleOpDeviceType_MIN;
  static constexpr TeleOpDeviceType TeleOpDeviceType_MAX = TeleOpDevice_TeleOpDeviceType_TeleOpDeviceType_MAX;
  static constexpr int TeleOpDeviceType_ARRAYSIZE = TeleOpDevice_TeleOpDeviceType_TeleOpDeviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* TeleOpDeviceType_descriptor() {
    return TeleOpDevice_TeleOpDeviceType_descriptor();
  }
  template <typename T>
  static inline const std::string& TeleOpDeviceType_Name(T value) {
    return TeleOpDevice_TeleOpDeviceType_Name(value);
  }
  static inline bool TeleOpDeviceType_Parse(absl::string_view name, TeleOpDeviceType* value) {
    return TeleOpDevice_TeleOpDeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIpFieldNumber = 3,
    kTypeFieldNumber = 2,
    kPortFieldNumber = 4,
    kConnectedFieldNumber = 5,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string ip = 3;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ptr);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // .Nrmk.IndyFramework.TeleOpDevice.TeleOpDeviceType type = 2;
  void clear_type() ;
  ::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType type() const;
  void set_type(::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType value);

  private:
  ::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType _internal_type() const;
  void _internal_set_type(::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType value);

  public:
  // uint32 port = 4;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // bool connected = 5;
  void clear_connected() ;
  bool connected() const;
  void set_connected(bool value);

  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TeleOpDevice)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 0, 46, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    int type_;
    ::uint32_t port_;
    bool connected_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TeleOpState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TeleOpState) */ {
 public:
  inline TeleOpState() : TeleOpState(nullptr) {}
  ~TeleOpState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TeleOpState(::google::protobuf::internal::ConstantInitialized);

  TeleOpState(const TeleOpState& from);
  TeleOpState(TeleOpState&& from) noexcept
    : TeleOpState() {
    *this = ::std::move(from);
  }

  inline TeleOpState& operator=(const TeleOpState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleOpState& operator=(TeleOpState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeleOpState& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeleOpState* internal_default_instance() {
    return reinterpret_cast<const TeleOpState*>(
               &_TeleOpState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(TeleOpState& a, TeleOpState& b) {
    a.Swap(&b);
  }
  inline void Swap(TeleOpState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeleOpState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeleOpState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeleOpState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TeleOpState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TeleOpState& from) {
    TeleOpState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleOpState* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TeleOpState";
  }
  protected:
  explicit TeleOpState(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kMethodFieldNumber = 2,
  };
  // .Nrmk.IndyFramework.TeleMode mode = 1;
  void clear_mode() ;
  ::Nrmk::IndyFramework::TeleMode mode() const;
  void set_mode(::Nrmk::IndyFramework::TeleMode value);

  private:
  ::Nrmk::IndyFramework::TeleMode _internal_mode() const;
  void _internal_set_mode(::Nrmk::IndyFramework::TeleMode value);

  public:
  // .Nrmk.IndyFramework.TeleMethod method = 2;
  void clear_method() ;
  ::Nrmk::IndyFramework::TeleMethod method() const;
  void set_method(::Nrmk::IndyFramework::TeleMethod value);

  private:
  ::Nrmk::IndyFramework::TeleMethod _internal_method() const;
  void _internal_set_method(::Nrmk::IndyFramework::TeleMethod value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TeleOpState)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int mode_;
    int method_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TeleP final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TeleP) */ {
 public:
  inline TeleP() : TeleP(nullptr) {}
  ~TeleP() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TeleP(::google::protobuf::internal::ConstantInitialized);

  TeleP(const TeleP& from);
  TeleP(TeleP&& from) noexcept
    : TeleP() {
    *this = ::std::move(from);
  }

  inline TeleP& operator=(const TeleP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleP& operator=(TeleP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeleP& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeleP* internal_default_instance() {
    return reinterpret_cast<const TeleP*>(
               &_TeleP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(TeleP& a, TeleP& b) {
    a.Swap(&b);
  }
  inline void Swap(TeleP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeleP* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeleP* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeleP>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TeleP& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TeleP& from) {
    TeleP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleP* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TeleP";
  }
  protected:
  explicit TeleP(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTposFieldNumber = 1,
    kResponseFieldNumber = 100,
  };
  // repeated float tpos = 1;
  int tpos_size() const;
  private:
  int _internal_tpos_size() const;

  public:
  void clear_tpos() ;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::google::protobuf::RepeatedField<float>& tpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_tpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tpos();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TeleP)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> tpos_;
    ::Nrmk::IndyFramework::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TeleOpFileList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TeleOpFileList) */ {
 public:
  inline TeleOpFileList() : TeleOpFileList(nullptr) {}
  ~TeleOpFileList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TeleOpFileList(::google::protobuf::internal::ConstantInitialized);

  TeleOpFileList(const TeleOpFileList& from);
  TeleOpFileList(TeleOpFileList&& from) noexcept
    : TeleOpFileList() {
    *this = ::std::move(from);
  }

  inline TeleOpFileList& operator=(const TeleOpFileList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleOpFileList& operator=(TeleOpFileList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeleOpFileList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeleOpFileList* internal_default_instance() {
    return reinterpret_cast<const TeleOpFileList*>(
               &_TeleOpFileList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(TeleOpFileList& a, TeleOpFileList& b) {
    a.Swap(&b);
  }
  inline void Swap(TeleOpFileList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeleOpFileList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeleOpFileList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeleOpFileList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TeleOpFileList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TeleOpFileList& from) {
    TeleOpFileList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleOpFileList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TeleOpFileList";
  }
  protected:
  explicit TeleOpFileList(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
    kResponseFieldNumber = 100,
  };
  // repeated string files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;

  public:
  void clear_files() ;
  const std::string& files(int index) const;
  std::string* mutable_files(int index);
  void set_files(int index, const std::string& value);
  void set_files(int index, std::string&& value);
  void set_files(int index, const char* value);
  void set_files(int index, const char* value, std::size_t size);
  void set_files(int index, absl::string_view value);
  std::string* add_files();
  void add_files(const std::string& value);
  void add_files(std::string&& value);
  void add_files(const char* value);
  void add_files(const char* value, std::size_t size);
  void add_files(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& files() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_files();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_files() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_files();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TeleOpFileList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 47, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> files_;
    ::Nrmk::IndyFramework::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TeleFileReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TeleFileReq) */ {
 public:
  inline TeleFileReq() : TeleFileReq(nullptr) {}
  ~TeleFileReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TeleFileReq(::google::protobuf::internal::ConstantInitialized);

  TeleFileReq(const TeleFileReq& from);
  TeleFileReq(TeleFileReq&& from) noexcept
    : TeleFileReq() {
    *this = ::std::move(from);
  }

  inline TeleFileReq& operator=(const TeleFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleFileReq& operator=(TeleFileReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeleFileReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeleFileReq* internal_default_instance() {
    return reinterpret_cast<const TeleFileReq*>(
               &_TeleFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(TeleFileReq& a, TeleFileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TeleFileReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeleFileReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeleFileReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeleFileReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TeleFileReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TeleFileReq& from) {
    TeleFileReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleFileReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TeleFileReq";
  }
  protected:
  explicit TeleFileReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TeleFileReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 43, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TelePlayRate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TelePlayRate) */ {
 public:
  inline TelePlayRate() : TelePlayRate(nullptr) {}
  ~TelePlayRate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TelePlayRate(::google::protobuf::internal::ConstantInitialized);

  TelePlayRate(const TelePlayRate& from);
  TelePlayRate(TelePlayRate&& from) noexcept
    : TelePlayRate() {
    *this = ::std::move(from);
  }

  inline TelePlayRate& operator=(const TelePlayRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelePlayRate& operator=(TelePlayRate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelePlayRate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelePlayRate* internal_default_instance() {
    return reinterpret_cast<const TelePlayRate*>(
               &_TelePlayRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(TelePlayRate& a, TelePlayRate& b) {
    a.Swap(&b);
  }
  inline void Swap(TelePlayRate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelePlayRate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelePlayRate* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelePlayRate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TelePlayRate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TelePlayRate& from) {
    TelePlayRate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelePlayRate* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TelePlayRate";
  }
  protected:
  explicit TelePlayRate(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateFieldNumber = 1,
  };
  // float rate = 1;
  void clear_rate() ;
  float rate() const;
  void set_rate(float value);

  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TelePlayRate)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float rate_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveTeleJReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveTeleJReq) */ {
 public:
  inline MoveTeleJReq() : MoveTeleJReq(nullptr) {}
  ~MoveTeleJReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveTeleJReq(::google::protobuf::internal::ConstantInitialized);

  MoveTeleJReq(const MoveTeleJReq& from);
  MoveTeleJReq(MoveTeleJReq&& from) noexcept
    : MoveTeleJReq() {
    *this = ::std::move(from);
  }

  inline MoveTeleJReq& operator=(const MoveTeleJReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveTeleJReq& operator=(MoveTeleJReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveTeleJReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveTeleJReq* internal_default_instance() {
    return reinterpret_cast<const MoveTeleJReq*>(
               &_MoveTeleJReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(MoveTeleJReq& a, MoveTeleJReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveTeleJReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveTeleJReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveTeleJReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveTeleJReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveTeleJReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveTeleJReq& from) {
    MoveTeleJReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveTeleJReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveTeleJReq";
  }
  protected:
  explicit MoveTeleJReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJposFieldNumber = 1,
    kVelRatioFieldNumber = 2,
    kAccRatioFieldNumber = 3,
    kMethodFieldNumber = 10,
  };
  // repeated float jpos = 1;
  int jpos_size() const;
  private:
  int _internal_jpos_size() const;

  public:
  void clear_jpos() ;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::google::protobuf::RepeatedField<float>& jpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_jpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_jpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_jpos();

  public:
  // float vel_ratio = 2;
  void clear_vel_ratio() ;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  private:
  float _internal_vel_ratio() const;
  void _internal_set_vel_ratio(float value);

  public:
  // float acc_ratio = 3;
  void clear_acc_ratio() ;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  private:
  float _internal_acc_ratio() const;
  void _internal_set_acc_ratio(float value);

  public:
  // .Nrmk.IndyFramework.TeleMethod method = 10;
  void clear_method() ;
  ::Nrmk::IndyFramework::TeleMethod method() const;
  void set_method(::Nrmk::IndyFramework::TeleMethod value);

  private:
  ::Nrmk::IndyFramework::TeleMethod _internal_method() const;
  void _internal_set_method(::Nrmk::IndyFramework::TeleMethod value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveTeleJReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> jpos_;
    float vel_ratio_;
    float acc_ratio_;
    int method_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveTeleLReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveTeleLReq) */ {
 public:
  inline MoveTeleLReq() : MoveTeleLReq(nullptr) {}
  ~MoveTeleLReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveTeleLReq(::google::protobuf::internal::ConstantInitialized);

  MoveTeleLReq(const MoveTeleLReq& from);
  MoveTeleLReq(MoveTeleLReq&& from) noexcept
    : MoveTeleLReq() {
    *this = ::std::move(from);
  }

  inline MoveTeleLReq& operator=(const MoveTeleLReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveTeleLReq& operator=(MoveTeleLReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveTeleLReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveTeleLReq* internal_default_instance() {
    return reinterpret_cast<const MoveTeleLReq*>(
               &_MoveTeleLReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(MoveTeleLReq& a, MoveTeleLReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveTeleLReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveTeleLReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveTeleLReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveTeleLReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveTeleLReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveTeleLReq& from) {
    MoveTeleLReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveTeleLReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveTeleLReq";
  }
  protected:
  explicit MoveTeleLReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTposFieldNumber = 1,
    kVelRatioFieldNumber = 2,
    kAccRatioFieldNumber = 3,
    kMethodFieldNumber = 10,
  };
  // repeated float tpos = 1;
  int tpos_size() const;
  private:
  int _internal_tpos_size() const;

  public:
  void clear_tpos() ;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::google::protobuf::RepeatedField<float>& tpos() const;
  ::google::protobuf::RepeatedField<float>* mutable_tpos();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tpos() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tpos();

  public:
  // float vel_ratio = 2;
  void clear_vel_ratio() ;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  private:
  float _internal_vel_ratio() const;
  void _internal_set_vel_ratio(float value);

  public:
  // float acc_ratio = 3;
  void clear_acc_ratio() ;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  private:
  float _internal_acc_ratio() const;
  void _internal_set_acc_ratio(float value);

  public:
  // .Nrmk.IndyFramework.TeleMethod method = 10;
  void clear_method() ;
  ::Nrmk::IndyFramework::TeleMethod method() const;
  void set_method(::Nrmk::IndyFramework::TeleMethod value);

  private:
  ::Nrmk::IndyFramework::TeleMethod _internal_method() const;
  void _internal_set_method(::Nrmk::IndyFramework::TeleMethod value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveTeleLReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> tpos_;
    float vel_ratio_;
    float acc_ratio_;
    int method_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveLFReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveLFReq) */ {
 public:
  inline MoveLFReq() : MoveLFReq(nullptr) {}
  ~MoveLFReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveLFReq(::google::protobuf::internal::ConstantInitialized);

  MoveLFReq(const MoveLFReq& from);
  MoveLFReq(MoveLFReq&& from) noexcept
    : MoveLFReq() {
    *this = ::std::move(from);
  }

  inline MoveLFReq& operator=(const MoveLFReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveLFReq& operator=(MoveLFReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveLFReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveLFReq* internal_default_instance() {
    return reinterpret_cast<const MoveLFReq*>(
               &_MoveLFReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(MoveLFReq& a, MoveLFReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveLFReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveLFReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveLFReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveLFReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveLFReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveLFReq& from) {
    MoveLFReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveLFReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveLFReq";
  }
  protected:
  explicit MoveLFReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDesForceFieldNumber = 6,
    kEnabledForceFieldNumber = 7,
    kTargetFieldNumber = 1,
    kBlendingFieldNumber = 2,
    kPostConditionFieldNumber = 20,
    kVelRatioFieldNumber = 3,
    kAccRatioFieldNumber = 4,
    kVelTypeFieldNumber = 5,
    kTeachingModeFieldNumber = 30,
  };
  // repeated float des_force = 6;
  int des_force_size() const;
  private:
  int _internal_des_force_size() const;

  public:
  void clear_des_force() ;
  float des_force(int index) const;
  void set_des_force(int index, float value);
  void add_des_force(float value);
  const ::google::protobuf::RepeatedField<float>& des_force() const;
  ::google::protobuf::RepeatedField<float>* mutable_des_force();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_des_force() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_des_force();

  public:
  // repeated bool enabled_force = 7;
  int enabled_force_size() const;
  private:
  int _internal_enabled_force_size() const;

  public:
  void clear_enabled_force() ;
  bool enabled_force(int index) const;
  void set_enabled_force(int index, bool value);
  void add_enabled_force(bool value);
  const ::google::protobuf::RepeatedField<bool>& enabled_force() const;
  ::google::protobuf::RepeatedField<bool>* mutable_enabled_force();

  private:
  const ::google::protobuf::RepeatedField<bool>& _internal_enabled_force() const;
  ::google::protobuf::RepeatedField<bool>* _internal_mutable_enabled_force();

  public:
  // .Nrmk.IndyFramework.TargetP target = 1;
  bool has_target() const;
  void clear_target() ;
  const ::Nrmk::IndyFramework::TargetP& target() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::TargetP* release_target();
  ::Nrmk::IndyFramework::TargetP* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetP* value);
  void unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetP* value);
  ::Nrmk::IndyFramework::TargetP* unsafe_arena_release_target();

  private:
  const ::Nrmk::IndyFramework::TargetP& _internal_target() const;
  ::Nrmk::IndyFramework::TargetP* _internal_mutable_target();

  public:
  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending() ;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  void unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value);
  ::Nrmk::IndyFramework::BlendingType* unsafe_arena_release_blending();

  private:
  const ::Nrmk::IndyFramework::BlendingType& _internal_blending() const;
  ::Nrmk::IndyFramework::BlendingType* _internal_mutable_blending();

  public:
  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  bool has_post_condition() const;
  void clear_post_condition() ;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  void unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value);
  ::Nrmk::IndyFramework::MotionCondition* unsafe_arena_release_post_condition();

  private:
  const ::Nrmk::IndyFramework::MotionCondition& _internal_post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* _internal_mutable_post_condition();

  public:
  // float vel_ratio = 3;
  void clear_vel_ratio() ;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  private:
  float _internal_vel_ratio() const;
  void _internal_set_vel_ratio(float value);

  public:
  // float acc_ratio = 4;
  void clear_acc_ratio() ;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  private:
  float _internal_acc_ratio() const;
  void _internal_set_acc_ratio(float value);

  public:
  // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
  void clear_vel_type() ;
  ::Nrmk::IndyFramework::VelocityModeType vel_type() const;
  void set_vel_type(::Nrmk::IndyFramework::VelocityModeType value);

  private:
  ::Nrmk::IndyFramework::VelocityModeType _internal_vel_type() const;
  void _internal_set_vel_type(::Nrmk::IndyFramework::VelocityModeType value);

  public:
  // bool teaching_mode = 30;
  void clear_teaching_mode() ;
  bool teaching_mode() const;
  void set_teaching_mode(bool value);

  private:
  bool _internal_teaching_mode() const;
  void _internal_set_teaching_mode(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveLFReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> des_force_;
    ::google::protobuf::RepeatedField<bool> enabled_force_;
    ::Nrmk::IndyFramework::TargetP* target_;
    ::Nrmk::IndyFramework::BlendingType* blending_;
    ::Nrmk::IndyFramework::MotionCondition* post_condition_;
    float vel_ratio_;
    float acc_ratio_;
    int vel_type_;
    bool teaching_mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MoveFLRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveFLRes) */ {
 public:
  inline MoveFLRes() : MoveFLRes(nullptr) {}
  ~MoveFLRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MoveFLRes(::google::protobuf::internal::ConstantInitialized);

  MoveFLRes(const MoveFLRes& from);
  MoveFLRes(MoveFLRes&& from) noexcept
    : MoveFLRes() {
    *this = ::std::move(from);
  }

  inline MoveFLRes& operator=(const MoveFLRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveFLRes& operator=(MoveFLRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveFLRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveFLRes* internal_default_instance() {
    return reinterpret_cast<const MoveFLRes*>(
               &_MoveFLRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(MoveFLRes& a, MoveFLRes& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveFLRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveFLRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveFLRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveFLRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MoveFLRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MoveFLRes& from) {
    MoveFLRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveFLRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MoveFLRes";
  }
  protected:
  explicit MoveFLRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 100,
  };
  // string msg = 100;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveFLRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 40, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr msg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TransformedFTSensorData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TransformedFTSensorData) */ {
 public:
  inline TransformedFTSensorData() : TransformedFTSensorData(nullptr) {}
  ~TransformedFTSensorData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransformedFTSensorData(::google::protobuf::internal::ConstantInitialized);

  TransformedFTSensorData(const TransformedFTSensorData& from);
  TransformedFTSensorData(TransformedFTSensorData&& from) noexcept
    : TransformedFTSensorData() {
    *this = ::std::move(from);
  }

  inline TransformedFTSensorData& operator=(const TransformedFTSensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformedFTSensorData& operator=(TransformedFTSensorData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformedFTSensorData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformedFTSensorData* internal_default_instance() {
    return reinterpret_cast<const TransformedFTSensorData*>(
               &_TransformedFTSensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(TransformedFTSensorData& a, TransformedFTSensorData& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformedFTSensorData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformedFTSensorData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformedFTSensorData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformedFTSensorData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransformedFTSensorData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TransformedFTSensorData& from) {
    TransformedFTSensorData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformedFTSensorData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TransformedFTSensorData";
  }
  protected:
  explicit TransformedFTSensorData(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 100,
    kFtFxFieldNumber = 1,
    kFtFyFieldNumber = 2,
    kFtFzFieldNumber = 3,
    kFtTxFieldNumber = 4,
    kFtTyFieldNumber = 5,
    kFtTzFieldNumber = 6,
  };
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // float ft_Fx = 1;
  void clear_ft_fx() ;
  float ft_fx() const;
  void set_ft_fx(float value);

  private:
  float _internal_ft_fx() const;
  void _internal_set_ft_fx(float value);

  public:
  // float ft_Fy = 2;
  void clear_ft_fy() ;
  float ft_fy() const;
  void set_ft_fy(float value);

  private:
  float _internal_ft_fy() const;
  void _internal_set_ft_fy(float value);

  public:
  // float ft_Fz = 3;
  void clear_ft_fz() ;
  float ft_fz() const;
  void set_ft_fz(float value);

  private:
  float _internal_ft_fz() const;
  void _internal_set_ft_fz(float value);

  public:
  // float ft_Tx = 4;
  void clear_ft_tx() ;
  float ft_tx() const;
  void set_ft_tx(float value);

  private:
  float _internal_ft_tx() const;
  void _internal_set_ft_tx(float value);

  public:
  // float ft_Ty = 5;
  void clear_ft_ty() ;
  float ft_ty() const;
  void set_ft_ty(float value);

  private:
  float _internal_ft_ty() const;
  void _internal_set_ft_ty(float value);

  public:
  // float ft_Tz = 6;
  void clear_ft_tz() ;
  float ft_tz() const;
  void set_ft_tz(float value);

  private:
  float _internal_ft_tz() const;
  void _internal_set_ft_tz(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TransformedFTSensorData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::Response* response_;
    float ft_fx_;
    float ft_fy_;
    float ft_fz_;
    float ft_tx_;
    float ft_ty_;
    float ft_tz_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ControlInfo

// string control_version = 1;
inline void ControlInfo::clear_control_version() {
  _impl_.control_version_.ClearToEmpty();
}
inline const std::string& ControlInfo::control_version() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlInfo.control_version)
  return _internal_control_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ControlInfo::set_control_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.control_version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlInfo.control_version)
}
inline std::string* ControlInfo::mutable_control_version() {
  std::string* _s = _internal_mutable_control_version();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ControlInfo.control_version)
  return _s;
}
inline const std::string& ControlInfo::_internal_control_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.control_version_.Get();
}
inline void ControlInfo::_internal_set_control_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.control_version_.Set(value, GetArenaForAllocation());
}
inline std::string* ControlInfo::_internal_mutable_control_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.control_version_.Mutable( GetArenaForAllocation());
}
inline std::string* ControlInfo::release_control_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ControlInfo.control_version)
  return _impl_.control_version_.Release();
}
inline void ControlInfo::set_allocated_control_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.control_version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.control_version_.IsDefault()) {
          _impl_.control_version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ControlInfo.control_version)
}

// string robot_model = 2;
inline void ControlInfo::clear_robot_model() {
  _impl_.robot_model_.ClearToEmpty();
}
inline const std::string& ControlInfo::robot_model() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlInfo.robot_model)
  return _internal_robot_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ControlInfo::set_robot_model(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.robot_model_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlInfo.robot_model)
}
inline std::string* ControlInfo::mutable_robot_model() {
  std::string* _s = _internal_mutable_robot_model();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ControlInfo.robot_model)
  return _s;
}
inline const std::string& ControlInfo::_internal_robot_model() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.robot_model_.Get();
}
inline void ControlInfo::_internal_set_robot_model(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.robot_model_.Set(value, GetArenaForAllocation());
}
inline std::string* ControlInfo::_internal_mutable_robot_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.robot_model_.Mutable( GetArenaForAllocation());
}
inline std::string* ControlInfo::release_robot_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ControlInfo.robot_model)
  return _impl_.robot_model_.Release();
}
inline void ControlInfo::set_allocated_robot_model(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.robot_model_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.robot_model_.IsDefault()) {
          _impl_.robot_model_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ControlInfo.robot_model)
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ControlInfo::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& ControlInfo::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& ControlInfo::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlInfo.response)
  return _internal_response();
}
inline void ControlInfo::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.ControlInfo.response)
}
inline ::Nrmk::IndyFramework::Response* ControlInfo::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* ControlInfo::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ControlInfo.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ControlInfo::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* ControlInfo::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ControlInfo.response)
  return _msg;
}
inline void ControlInfo::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ControlInfo.response)
}

// -------------------------------------------------------------------

// SDKLicenseInfo

// string license_key = 1;
inline void SDKLicenseInfo::clear_license_key() {
  _impl_.license_key_.ClearToEmpty();
}
inline const std::string& SDKLicenseInfo::license_key() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SDKLicenseInfo.license_key)
  return _internal_license_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SDKLicenseInfo::set_license_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.license_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SDKLicenseInfo.license_key)
}
inline std::string* SDKLicenseInfo::mutable_license_key() {
  std::string* _s = _internal_mutable_license_key();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.SDKLicenseInfo.license_key)
  return _s;
}
inline const std::string& SDKLicenseInfo::_internal_license_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.license_key_.Get();
}
inline void SDKLicenseInfo::_internal_set_license_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.license_key_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKLicenseInfo::_internal_mutable_license_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.license_key_.Mutable( GetArenaForAllocation());
}
inline std::string* SDKLicenseInfo::release_license_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.SDKLicenseInfo.license_key)
  return _impl_.license_key_.Release();
}
inline void SDKLicenseInfo::set_allocated_license_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.license_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.license_key_.IsDefault()) {
          _impl_.license_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.SDKLicenseInfo.license_key)
}

// string expire_date = 2;
inline void SDKLicenseInfo::clear_expire_date() {
  _impl_.expire_date_.ClearToEmpty();
}
inline const std::string& SDKLicenseInfo::expire_date() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SDKLicenseInfo.expire_date)
  return _internal_expire_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SDKLicenseInfo::set_expire_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expire_date_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SDKLicenseInfo.expire_date)
}
inline std::string* SDKLicenseInfo::mutable_expire_date() {
  std::string* _s = _internal_mutable_expire_date();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.SDKLicenseInfo.expire_date)
  return _s;
}
inline const std::string& SDKLicenseInfo::_internal_expire_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expire_date_.Get();
}
inline void SDKLicenseInfo::_internal_set_expire_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expire_date_.Set(value, GetArenaForAllocation());
}
inline std::string* SDKLicenseInfo::_internal_mutable_expire_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.expire_date_.Mutable( GetArenaForAllocation());
}
inline std::string* SDKLicenseInfo::release_expire_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.SDKLicenseInfo.expire_date)
  return _impl_.expire_date_.Release();
}
inline void SDKLicenseInfo::set_allocated_expire_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expire_date_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.expire_date_.IsDefault()) {
          _impl_.expire_date_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.SDKLicenseInfo.expire_date)
}

// -------------------------------------------------------------------

// SDKLicenseResp

// bool activated = 1;
inline void SDKLicenseResp::clear_activated() {
  _impl_.activated_ = false;
}
inline bool SDKLicenseResp::activated() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SDKLicenseResp.activated)
  return _internal_activated();
}
inline void SDKLicenseResp::set_activated(bool value) {
  _internal_set_activated(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SDKLicenseResp.activated)
}
inline bool SDKLicenseResp::_internal_activated() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.activated_;
}
inline void SDKLicenseResp::_internal_set_activated(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.activated_ = value;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool SDKLicenseResp::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& SDKLicenseResp::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& SDKLicenseResp::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SDKLicenseResp.response)
  return _internal_response();
}
inline void SDKLicenseResp::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.SDKLicenseResp.response)
}
inline ::Nrmk::IndyFramework::Response* SDKLicenseResp::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* SDKLicenseResp::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.SDKLicenseResp.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* SDKLicenseResp::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* SDKLicenseResp::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.SDKLicenseResp.response)
  return _msg;
}
inline void SDKLicenseResp::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.SDKLicenseResp.response)
}

// -------------------------------------------------------------------

// VariableCondition

// repeated .Nrmk.IndyFramework.IntVariable i_vars = 1;
inline int VariableCondition::_internal_i_vars_size() const {
  return _internal_i_vars().size();
}
inline int VariableCondition::i_vars_size() const {
  return _internal_i_vars_size();
}
inline void VariableCondition::clear_i_vars() {
  _internal_mutable_i_vars()->Clear();
}
inline ::Nrmk::IndyFramework::IntVariable* VariableCondition::mutable_i_vars(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.VariableCondition.i_vars)
  return _internal_mutable_i_vars()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >*
VariableCondition::mutable_i_vars() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.VariableCondition.i_vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_i_vars();
}
inline const ::Nrmk::IndyFramework::IntVariable& VariableCondition::i_vars(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VariableCondition.i_vars)
    return _internal_i_vars().Get(index);
}
inline ::Nrmk::IndyFramework::IntVariable* VariableCondition::add_i_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::IntVariable* _add = _internal_mutable_i_vars()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.VariableCondition.i_vars)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >&
VariableCondition::i_vars() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.VariableCondition.i_vars)
  return _internal_i_vars();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::IntVariable>&
VariableCondition::_internal_i_vars() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.i_vars_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::IntVariable>*
VariableCondition::_internal_mutable_i_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.i_vars_;
}

// repeated .Nrmk.IndyFramework.FloatVariable f_vars = 2;
inline int VariableCondition::_internal_f_vars_size() const {
  return _internal_f_vars().size();
}
inline int VariableCondition::f_vars_size() const {
  return _internal_f_vars_size();
}
inline void VariableCondition::clear_f_vars() {
  _internal_mutable_f_vars()->Clear();
}
inline ::Nrmk::IndyFramework::FloatVariable* VariableCondition::mutable_f_vars(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.VariableCondition.f_vars)
  return _internal_mutable_f_vars()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >*
VariableCondition::mutable_f_vars() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.VariableCondition.f_vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_f_vars();
}
inline const ::Nrmk::IndyFramework::FloatVariable& VariableCondition::f_vars(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VariableCondition.f_vars)
    return _internal_f_vars().Get(index);
}
inline ::Nrmk::IndyFramework::FloatVariable* VariableCondition::add_f_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::FloatVariable* _add = _internal_mutable_f_vars()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.VariableCondition.f_vars)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >&
VariableCondition::f_vars() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.VariableCondition.f_vars)
  return _internal_f_vars();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::FloatVariable>&
VariableCondition::_internal_f_vars() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.f_vars_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::FloatVariable>*
VariableCondition::_internal_mutable_f_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.f_vars_;
}

// repeated .Nrmk.IndyFramework.BoolVariable b_vars = 3;
inline int VariableCondition::_internal_b_vars_size() const {
  return _internal_b_vars().size();
}
inline int VariableCondition::b_vars_size() const {
  return _internal_b_vars_size();
}
inline void VariableCondition::clear_b_vars() {
  _internal_mutable_b_vars()->Clear();
}
inline ::Nrmk::IndyFramework::BoolVariable* VariableCondition::mutable_b_vars(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.VariableCondition.b_vars)
  return _internal_mutable_b_vars()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >*
VariableCondition::mutable_b_vars() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.VariableCondition.b_vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_b_vars();
}
inline const ::Nrmk::IndyFramework::BoolVariable& VariableCondition::b_vars(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VariableCondition.b_vars)
    return _internal_b_vars().Get(index);
}
inline ::Nrmk::IndyFramework::BoolVariable* VariableCondition::add_b_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::BoolVariable* _add = _internal_mutable_b_vars()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.VariableCondition.b_vars)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >&
VariableCondition::b_vars() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.VariableCondition.b_vars)
  return _internal_b_vars();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::BoolVariable>&
VariableCondition::_internal_b_vars() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.b_vars_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::BoolVariable>*
VariableCondition::_internal_mutable_b_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.b_vars_;
}

// repeated .Nrmk.IndyFramework.ModbusVariable m_vars = 4;
inline int VariableCondition::_internal_m_vars_size() const {
  return _internal_m_vars().size();
}
inline int VariableCondition::m_vars_size() const {
  return _internal_m_vars_size();
}
inline void VariableCondition::clear_m_vars() {
  _internal_mutable_m_vars()->Clear();
}
inline ::Nrmk::IndyFramework::ModbusVariable* VariableCondition::mutable_m_vars(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.VariableCondition.m_vars)
  return _internal_mutable_m_vars()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >*
VariableCondition::mutable_m_vars() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.VariableCondition.m_vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_m_vars();
}
inline const ::Nrmk::IndyFramework::ModbusVariable& VariableCondition::m_vars(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VariableCondition.m_vars)
    return _internal_m_vars().Get(index);
}
inline ::Nrmk::IndyFramework::ModbusVariable* VariableCondition::add_m_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::ModbusVariable* _add = _internal_mutable_m_vars()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.VariableCondition.m_vars)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >&
VariableCondition::m_vars() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.VariableCondition.m_vars)
  return _internal_m_vars();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusVariable>&
VariableCondition::_internal_m_vars() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m_vars_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusVariable>*
VariableCondition::_internal_mutable_m_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.m_vars_;
}

// repeated .Nrmk.IndyFramework.JPosVariable j_vars = 5;
inline int VariableCondition::_internal_j_vars_size() const {
  return _internal_j_vars().size();
}
inline int VariableCondition::j_vars_size() const {
  return _internal_j_vars_size();
}
inline void VariableCondition::clear_j_vars() {
  _internal_mutable_j_vars()->Clear();
}
inline ::Nrmk::IndyFramework::JPosVariable* VariableCondition::mutable_j_vars(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.VariableCondition.j_vars)
  return _internal_mutable_j_vars()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >*
VariableCondition::mutable_j_vars() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.VariableCondition.j_vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_j_vars();
}
inline const ::Nrmk::IndyFramework::JPosVariable& VariableCondition::j_vars(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VariableCondition.j_vars)
    return _internal_j_vars().Get(index);
}
inline ::Nrmk::IndyFramework::JPosVariable* VariableCondition::add_j_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::JPosVariable* _add = _internal_mutable_j_vars()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.VariableCondition.j_vars)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >&
VariableCondition::j_vars() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.VariableCondition.j_vars)
  return _internal_j_vars();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::JPosVariable>&
VariableCondition::_internal_j_vars() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.j_vars_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::JPosVariable>*
VariableCondition::_internal_mutable_j_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.j_vars_;
}

// repeated .Nrmk.IndyFramework.TPosVariable t_vars = 6;
inline int VariableCondition::_internal_t_vars_size() const {
  return _internal_t_vars().size();
}
inline int VariableCondition::t_vars_size() const {
  return _internal_t_vars_size();
}
inline void VariableCondition::clear_t_vars() {
  _internal_mutable_t_vars()->Clear();
}
inline ::Nrmk::IndyFramework::TPosVariable* VariableCondition::mutable_t_vars(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.VariableCondition.t_vars)
  return _internal_mutable_t_vars()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >*
VariableCondition::mutable_t_vars() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.VariableCondition.t_vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_t_vars();
}
inline const ::Nrmk::IndyFramework::TPosVariable& VariableCondition::t_vars(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VariableCondition.t_vars)
    return _internal_t_vars().Get(index);
}
inline ::Nrmk::IndyFramework::TPosVariable* VariableCondition::add_t_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::TPosVariable* _add = _internal_mutable_t_vars()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.VariableCondition.t_vars)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >&
VariableCondition::t_vars() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.VariableCondition.t_vars)
  return _internal_t_vars();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::TPosVariable>&
VariableCondition::_internal_t_vars() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.t_vars_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::TPosVariable>*
VariableCondition::_internal_mutable_t_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.t_vars_;
}

// -------------------------------------------------------------------

// IOCondition

// repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
inline int IOCondition::_internal_di_size() const {
  return _internal_di().size();
}
inline int IOCondition::di_size() const {
  return _internal_di_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOCondition::mutable_di(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOCondition.di)
  return _internal_mutable_di()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
IOCondition::mutable_di() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOCondition.di)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_di();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& IOCondition::di(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOCondition.di)
    return _internal_di().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOCondition::add_di() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_di()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOCondition.di)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
IOCondition::di() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOCondition.di)
  return _internal_di();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
IOCondition::_internal_di() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.di_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
IOCondition::_internal_mutable_di() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.di_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal end_di = 2;
inline int IOCondition::_internal_end_di_size() const {
  return _internal_end_di().size();
}
inline int IOCondition::end_di_size() const {
  return _internal_end_di_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOCondition::mutable_end_di(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOCondition.end_di)
  return _internal_mutable_end_di()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
IOCondition::mutable_end_di() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOCondition.end_di)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_end_di();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& IOCondition::end_di(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOCondition.end_di)
    return _internal_end_di().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOCondition::add_end_di() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_end_di()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOCondition.end_di)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
IOCondition::end_di() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOCondition.end_di)
  return _internal_end_di();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
IOCondition::_internal_end_di() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_di_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
IOCondition::_internal_mutable_end_di() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.end_di_;
}

// -------------------------------------------------------------------

// MotionCondition

// .Nrmk.IndyFramework.MotionCondition.ConditionType type_cond = 1;
inline void MotionCondition::clear_type_cond() {
  _impl_.type_cond_ = 0;
}
inline ::Nrmk::IndyFramework::MotionCondition_ConditionType MotionCondition::type_cond() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionCondition.type_cond)
  return _internal_type_cond();
}
inline void MotionCondition::set_type_cond(::Nrmk::IndyFramework::MotionCondition_ConditionType value) {
  _internal_set_type_cond(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionCondition.type_cond)
}
inline ::Nrmk::IndyFramework::MotionCondition_ConditionType MotionCondition::_internal_type_cond() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::MotionCondition_ConditionType>(_impl_.type_cond_);
}
inline void MotionCondition::_internal_set_type_cond(::Nrmk::IndyFramework::MotionCondition_ConditionType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_cond_ = value;
}

// .Nrmk.IndyFramework.MotionCondition.ReactionType type_react = 2;
inline void MotionCondition::clear_type_react() {
  _impl_.type_react_ = 0;
}
inline ::Nrmk::IndyFramework::MotionCondition_ReactionType MotionCondition::type_react() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionCondition.type_react)
  return _internal_type_react();
}
inline void MotionCondition::set_type_react(::Nrmk::IndyFramework::MotionCondition_ReactionType value) {
  _internal_set_type_react(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionCondition.type_react)
}
inline ::Nrmk::IndyFramework::MotionCondition_ReactionType MotionCondition::_internal_type_react() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::MotionCondition_ReactionType>(_impl_.type_react_);
}
inline void MotionCondition::_internal_set_type_react(::Nrmk::IndyFramework::MotionCondition_ReactionType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_react_ = value;
}

// bool const_cond = 3;
inline void MotionCondition::clear_const_cond() {
  _impl_.const_cond_ = false;
}
inline bool MotionCondition::const_cond() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionCondition.const_cond)
  return _internal_const_cond();
}
inline void MotionCondition::set_const_cond(bool value) {
  _internal_set_const_cond(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionCondition.const_cond)
}
inline bool MotionCondition::_internal_const_cond() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.const_cond_;
}
inline void MotionCondition::_internal_set_const_cond(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.const_cond_ = value;
}

// .Nrmk.IndyFramework.IOCondition io_cond = 4;
inline bool MotionCondition::has_io_cond() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.io_cond_ != nullptr);
  return value;
}
inline void MotionCondition::clear_io_cond() {
  if (_impl_.io_cond_ != nullptr) _impl_.io_cond_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Nrmk::IndyFramework::IOCondition& MotionCondition::_internal_io_cond() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::IOCondition* p = _impl_.io_cond_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::IOCondition&>(::Nrmk::IndyFramework::_IOCondition_default_instance_);
}
inline const ::Nrmk::IndyFramework::IOCondition& MotionCondition::io_cond() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionCondition.io_cond)
  return _internal_io_cond();
}
inline void MotionCondition::unsafe_arena_set_allocated_io_cond(::Nrmk::IndyFramework::IOCondition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.io_cond_);
  }
  _impl_.io_cond_ = reinterpret_cast<::Nrmk::IndyFramework::IOCondition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MotionCondition.io_cond)
}
inline ::Nrmk::IndyFramework::IOCondition* MotionCondition::release_io_cond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::IOCondition* released = _impl_.io_cond_;
  _impl_.io_cond_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::IOCondition* MotionCondition::unsafe_arena_release_io_cond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MotionCondition.io_cond)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::IOCondition* temp = _impl_.io_cond_;
  _impl_.io_cond_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::IOCondition* MotionCondition::_internal_mutable_io_cond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.io_cond_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::IOCondition>(GetArenaForAllocation());
    _impl_.io_cond_ = reinterpret_cast<::Nrmk::IndyFramework::IOCondition*>(p);
  }
  return _impl_.io_cond_;
}
inline ::Nrmk::IndyFramework::IOCondition* MotionCondition::mutable_io_cond() {
  ::Nrmk::IndyFramework::IOCondition* _msg = _internal_mutable_io_cond();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MotionCondition.io_cond)
  return _msg;
}
inline void MotionCondition::set_allocated_io_cond(::Nrmk::IndyFramework::IOCondition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::IOCondition*>(_impl_.io_cond_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::IOCondition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.io_cond_ = reinterpret_cast<::Nrmk::IndyFramework::IOCondition*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MotionCondition.io_cond)
}

// .Nrmk.IndyFramework.VariableCondition var_cond = 5;
inline bool MotionCondition::has_var_cond() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.var_cond_ != nullptr);
  return value;
}
inline void MotionCondition::clear_var_cond() {
  if (_impl_.var_cond_ != nullptr) _impl_.var_cond_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Nrmk::IndyFramework::VariableCondition& MotionCondition::_internal_var_cond() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::VariableCondition* p = _impl_.var_cond_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::VariableCondition&>(::Nrmk::IndyFramework::_VariableCondition_default_instance_);
}
inline const ::Nrmk::IndyFramework::VariableCondition& MotionCondition::var_cond() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionCondition.var_cond)
  return _internal_var_cond();
}
inline void MotionCondition::unsafe_arena_set_allocated_var_cond(::Nrmk::IndyFramework::VariableCondition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.var_cond_);
  }
  _impl_.var_cond_ = reinterpret_cast<::Nrmk::IndyFramework::VariableCondition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MotionCondition.var_cond)
}
inline ::Nrmk::IndyFramework::VariableCondition* MotionCondition::release_var_cond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::VariableCondition* released = _impl_.var_cond_;
  _impl_.var_cond_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::VariableCondition* MotionCondition::unsafe_arena_release_var_cond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MotionCondition.var_cond)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::VariableCondition* temp = _impl_.var_cond_;
  _impl_.var_cond_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::VariableCondition* MotionCondition::_internal_mutable_var_cond() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.var_cond_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::VariableCondition>(GetArenaForAllocation());
    _impl_.var_cond_ = reinterpret_cast<::Nrmk::IndyFramework::VariableCondition*>(p);
  }
  return _impl_.var_cond_;
}
inline ::Nrmk::IndyFramework::VariableCondition* MotionCondition::mutable_var_cond() {
  ::Nrmk::IndyFramework::VariableCondition* _msg = _internal_mutable_var_cond();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MotionCondition.var_cond)
  return _msg;
}
inline void MotionCondition::set_allocated_var_cond(::Nrmk::IndyFramework::VariableCondition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::VariableCondition*>(_impl_.var_cond_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::VariableCondition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.var_cond_ = reinterpret_cast<::Nrmk::IndyFramework::VariableCondition*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MotionCondition.var_cond)
}

// -------------------------------------------------------------------

// BlendingType

// .Nrmk.IndyFramework.BlendingType.Type type = 1;
inline void BlendingType::clear_type() {
  _impl_.type_ = 0;
}
inline ::Nrmk::IndyFramework::BlendingType_Type BlendingType::type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BlendingType.type)
  return _internal_type();
}
inline void BlendingType::set_type(::Nrmk::IndyFramework::BlendingType_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BlendingType.type)
}
inline ::Nrmk::IndyFramework::BlendingType_Type BlendingType::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::BlendingType_Type>(_impl_.type_);
}
inline void BlendingType::_internal_set_type(::Nrmk::IndyFramework::BlendingType_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// float blending_radius = 2;
inline void BlendingType::clear_blending_radius() {
  _impl_.blending_radius_ = 0;
}
inline float BlendingType::blending_radius() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BlendingType.blending_radius)
  return _internal_blending_radius();
}
inline void BlendingType::set_blending_radius(float value) {
  _internal_set_blending_radius(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BlendingType.blending_radius)
}
inline float BlendingType::_internal_blending_radius() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blending_radius_;
}
inline void BlendingType::_internal_set_blending_radius(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.blending_radius_ = value;
}

// -------------------------------------------------------------------

// TargetJ

// repeated float j_start = 1;
inline int TargetJ::_internal_j_start_size() const {
  return _internal_j_start().size();
}
inline int TargetJ::j_start_size() const {
  return _internal_j_start_size();
}
inline void TargetJ::clear_j_start() {
  _internal_mutable_j_start()->Clear();
}
inline float TargetJ::j_start(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetJ.j_start)
  return _internal_j_start().Get(index);
}
inline void TargetJ::set_j_start(int index, float value) {
  _internal_mutable_j_start()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetJ.j_start)
}
inline void TargetJ::add_j_start(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_j_start()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TargetJ.j_start)
}
inline const ::google::protobuf::RepeatedField<float>& TargetJ::j_start() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TargetJ.j_start)
  return _internal_j_start();
}
inline ::google::protobuf::RepeatedField<float>* TargetJ::mutable_j_start() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TargetJ.j_start)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_j_start();
}

inline const ::google::protobuf::RepeatedField<float>& TargetJ::_internal_j_start() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.j_start_;
}
inline ::google::protobuf::RepeatedField<float>* TargetJ::_internal_mutable_j_start() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.j_start_;
}

// repeated float j_target = 2;
inline int TargetJ::_internal_j_target_size() const {
  return _internal_j_target().size();
}
inline int TargetJ::j_target_size() const {
  return _internal_j_target_size();
}
inline void TargetJ::clear_j_target() {
  _internal_mutable_j_target()->Clear();
}
inline float TargetJ::j_target(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetJ.j_target)
  return _internal_j_target().Get(index);
}
inline void TargetJ::set_j_target(int index, float value) {
  _internal_mutable_j_target()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetJ.j_target)
}
inline void TargetJ::add_j_target(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_j_target()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TargetJ.j_target)
}
inline const ::google::protobuf::RepeatedField<float>& TargetJ::j_target() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TargetJ.j_target)
  return _internal_j_target();
}
inline ::google::protobuf::RepeatedField<float>* TargetJ::mutable_j_target() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TargetJ.j_target)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_j_target();
}

inline const ::google::protobuf::RepeatedField<float>& TargetJ::_internal_j_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.j_target_;
}
inline ::google::protobuf::RepeatedField<float>* TargetJ::_internal_mutable_j_target() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.j_target_;
}

// .Nrmk.IndyFramework.JointBaseType base_type = 3;
inline void TargetJ::clear_base_type() {
  _impl_.base_type_ = 0;
}
inline ::Nrmk::IndyFramework::JointBaseType TargetJ::base_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetJ.base_type)
  return _internal_base_type();
}
inline void TargetJ::set_base_type(::Nrmk::IndyFramework::JointBaseType value) {
  _internal_set_base_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetJ.base_type)
}
inline ::Nrmk::IndyFramework::JointBaseType TargetJ::_internal_base_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::JointBaseType>(_impl_.base_type_);
}
inline void TargetJ::_internal_set_base_type(::Nrmk::IndyFramework::JointBaseType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.base_type_ = value;
}

// -------------------------------------------------------------------

// MoveJReq

// .Nrmk.IndyFramework.TargetJ target = 1;
inline bool MoveJReq::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline void MoveJReq::clear_target() {
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Nrmk::IndyFramework::TargetJ& MoveJReq::_internal_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::TargetJ* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::TargetJ&>(::Nrmk::IndyFramework::_TargetJ_default_instance_);
}
inline const ::Nrmk::IndyFramework::TargetJ& MoveJReq::target() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJReq.target)
  return _internal_target();
}
inline void MoveJReq::unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetJ* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveJReq.target)
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJReq::release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetJ* released = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJReq::unsafe_arena_release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJReq.target)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetJ* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJReq::_internal_mutable_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetJ>(GetArenaForAllocation());
    _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(p);
  }
  return _impl_.target_;
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJReq::mutable_target() {
  ::Nrmk::IndyFramework::TargetJ* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJReq.target)
  return _msg;
}
inline void MoveJReq::set_allocated_target(::Nrmk::IndyFramework::TargetJ* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(_impl_.target_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveJReq::has_blending() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blending_ != nullptr);
  return value;
}
inline void MoveJReq::clear_blending() {
  if (_impl_.blending_ != nullptr) _impl_.blending_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveJReq::_internal_blending() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::BlendingType* p = _impl_.blending_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType&>(::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveJReq::blending() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJReq.blending)
  return _internal_blending();
}
inline void MoveJReq::unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blending_);
  }
  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveJReq.blending)
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJReq::release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* released = _impl_.blending_;
  _impl_.blending_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJReq::unsafe_arena_release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJReq.blending)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* temp = _impl_.blending_;
  _impl_.blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJReq::_internal_mutable_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaForAllocation());
    _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(p);
  }
  return _impl_.blending_;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJReq::mutable_blending() {
  ::Nrmk::IndyFramework::BlendingType* _msg = _internal_mutable_blending();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJReq.blending)
  return _msg;
}
inline void MoveJReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(_impl_.blending_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJReq.blending)
}

// float vel_ratio = 3;
inline void MoveJReq::clear_vel_ratio() {
  _impl_.vel_ratio_ = 0;
}
inline float MoveJReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJReq.vel_ratio)
  return _internal_vel_ratio();
}
inline void MoveJReq::set_vel_ratio(float value) {
  _internal_set_vel_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveJReq.vel_ratio)
}
inline float MoveJReq::_internal_vel_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vel_ratio_;
}
inline void MoveJReq::_internal_set_vel_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vel_ratio_ = value;
}

// float acc_ratio = 4;
inline void MoveJReq::clear_acc_ratio() {
  _impl_.acc_ratio_ = 0;
}
inline float MoveJReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJReq.acc_ratio)
  return _internal_acc_ratio();
}
inline void MoveJReq::set_acc_ratio(float value) {
  _internal_set_acc_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveJReq.acc_ratio)
}
inline float MoveJReq::_internal_acc_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.acc_ratio_;
}
inline void MoveJReq::_internal_set_acc_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.acc_ratio_ = value;
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 20;
inline bool MoveJReq::has_post_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_condition_ != nullptr);
  return value;
}
inline void MoveJReq::clear_post_condition() {
  if (_impl_.post_condition_ != nullptr) _impl_.post_condition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveJReq::_internal_post_condition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::MotionCondition* p = _impl_.post_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition&>(::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveJReq::post_condition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJReq.post_condition)
  return _internal_post_condition();
}
inline void MoveJReq::unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.post_condition_);
  }
  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveJReq.post_condition)
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJReq::release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* released = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJReq::unsafe_arena_release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJReq.post_condition)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* temp = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJReq::_internal_mutable_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaForAllocation());
    _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(p);
  }
  return _impl_.post_condition_;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJReq::mutable_post_condition() {
  ::Nrmk::IndyFramework::MotionCondition* _msg = _internal_mutable_post_condition();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJReq.post_condition)
  return _msg;
}
inline void MoveJReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(_impl_.post_condition_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJReq.post_condition)
}

// bool teaching_mode = 30;
inline void MoveJReq::clear_teaching_mode() {
  _impl_.teaching_mode_ = false;
}
inline bool MoveJReq::teaching_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJReq.teaching_mode)
  return _internal_teaching_mode();
}
inline void MoveJReq::set_teaching_mode(bool value) {
  _internal_set_teaching_mode(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveJReq.teaching_mode)
}
inline bool MoveJReq::_internal_teaching_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.teaching_mode_;
}
inline void MoveJReq::_internal_set_teaching_mode(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.teaching_mode_ = value;
}

// -------------------------------------------------------------------

// MoveJCondReq

// .Nrmk.IndyFramework.TargetJ target = 1;
inline bool MoveJCondReq::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline void MoveJCondReq::clear_target() {
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Nrmk::IndyFramework::TargetJ& MoveJCondReq::_internal_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::TargetJ* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::TargetJ&>(::Nrmk::IndyFramework::_TargetJ_default_instance_);
}
inline const ::Nrmk::IndyFramework::TargetJ& MoveJCondReq::target() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJCondReq.target)
  return _internal_target();
}
inline void MoveJCondReq::unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetJ* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveJCondReq.target)
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJCondReq::release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetJ* released = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJCondReq::unsafe_arena_release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJCondReq.target)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetJ* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJCondReq::_internal_mutable_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetJ>(GetArenaForAllocation());
    _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(p);
  }
  return _impl_.target_;
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJCondReq::mutable_target() {
  ::Nrmk::IndyFramework::TargetJ* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJCondReq.target)
  return _msg;
}
inline void MoveJCondReq::set_allocated_target(::Nrmk::IndyFramework::TargetJ* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(_impl_.target_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJCondReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveJCondReq::has_blending() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blending_ != nullptr);
  return value;
}
inline void MoveJCondReq::clear_blending() {
  if (_impl_.blending_ != nullptr) _impl_.blending_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveJCondReq::_internal_blending() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::BlendingType* p = _impl_.blending_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType&>(::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveJCondReq::blending() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJCondReq.blending)
  return _internal_blending();
}
inline void MoveJCondReq::unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blending_);
  }
  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveJCondReq.blending)
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJCondReq::release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* released = _impl_.blending_;
  _impl_.blending_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJCondReq::unsafe_arena_release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJCondReq.blending)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* temp = _impl_.blending_;
  _impl_.blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJCondReq::_internal_mutable_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaForAllocation());
    _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(p);
  }
  return _impl_.blending_;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJCondReq::mutable_blending() {
  ::Nrmk::IndyFramework::BlendingType* _msg = _internal_mutable_blending();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJCondReq.blending)
  return _msg;
}
inline void MoveJCondReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(_impl_.blending_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJCondReq.blending)
}

// float vel_ratio = 3;
inline void MoveJCondReq::clear_vel_ratio() {
  _impl_.vel_ratio_ = 0;
}
inline float MoveJCondReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJCondReq.vel_ratio)
  return _internal_vel_ratio();
}
inline void MoveJCondReq::set_vel_ratio(float value) {
  _internal_set_vel_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveJCondReq.vel_ratio)
}
inline float MoveJCondReq::_internal_vel_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vel_ratio_;
}
inline void MoveJCondReq::_internal_set_vel_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vel_ratio_ = value;
}

// float acc_ratio = 4;
inline void MoveJCondReq::clear_acc_ratio() {
  _impl_.acc_ratio_ = 0;
}
inline float MoveJCondReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJCondReq.acc_ratio)
  return _internal_acc_ratio();
}
inline void MoveJCondReq::set_acc_ratio(float value) {
  _internal_set_acc_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveJCondReq.acc_ratio)
}
inline float MoveJCondReq::_internal_acc_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.acc_ratio_;
}
inline void MoveJCondReq::_internal_set_acc_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.acc_ratio_ = value;
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 20;
inline bool MoveJCondReq::has_post_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_condition_ != nullptr);
  return value;
}
inline void MoveJCondReq::clear_post_condition() {
  if (_impl_.post_condition_ != nullptr) _impl_.post_condition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveJCondReq::_internal_post_condition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::MotionCondition* p = _impl_.post_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition&>(::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveJCondReq::post_condition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJCondReq.post_condition)
  return _internal_post_condition();
}
inline void MoveJCondReq::unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.post_condition_);
  }
  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveJCondReq.post_condition)
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJCondReq::release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* released = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJCondReq::unsafe_arena_release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJCondReq.post_condition)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* temp = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJCondReq::_internal_mutable_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaForAllocation());
    _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(p);
  }
  return _impl_.post_condition_;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJCondReq::mutable_post_condition() {
  ::Nrmk::IndyFramework::MotionCondition* _msg = _internal_mutable_post_condition();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJCondReq.post_condition)
  return _msg;
}
inline void MoveJCondReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(_impl_.post_condition_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJCondReq.post_condition)
}

// bool teaching_mode = 30;
inline void MoveJCondReq::clear_teaching_mode() {
  _impl_.teaching_mode_ = false;
}
inline bool MoveJCondReq::teaching_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJCondReq.teaching_mode)
  return _internal_teaching_mode();
}
inline void MoveJCondReq::set_teaching_mode(bool value) {
  _internal_set_teaching_mode(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveJCondReq.teaching_mode)
}
inline bool MoveJCondReq::_internal_teaching_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.teaching_mode_;
}
inline void MoveJCondReq::_internal_set_teaching_mode(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.teaching_mode_ = value;
}

// -------------------------------------------------------------------

// MoveJTReq

// .Nrmk.IndyFramework.TargetJ target = 1;
inline bool MoveJTReq::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline void MoveJTReq::clear_target() {
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Nrmk::IndyFramework::TargetJ& MoveJTReq::_internal_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::TargetJ* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::TargetJ&>(::Nrmk::IndyFramework::_TargetJ_default_instance_);
}
inline const ::Nrmk::IndyFramework::TargetJ& MoveJTReq::target() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJTReq.target)
  return _internal_target();
}
inline void MoveJTReq::unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetJ* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveJTReq.target)
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJTReq::release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetJ* released = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJTReq::unsafe_arena_release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJTReq.target)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetJ* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJTReq::_internal_mutable_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetJ>(GetArenaForAllocation());
    _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(p);
  }
  return _impl_.target_;
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJTReq::mutable_target() {
  ::Nrmk::IndyFramework::TargetJ* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJTReq.target)
  return _msg;
}
inline void MoveJTReq::set_allocated_target(::Nrmk::IndyFramework::TargetJ* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(_impl_.target_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetJ*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJTReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveJTReq::has_blending() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blending_ != nullptr);
  return value;
}
inline void MoveJTReq::clear_blending() {
  if (_impl_.blending_ != nullptr) _impl_.blending_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveJTReq::_internal_blending() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::BlendingType* p = _impl_.blending_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType&>(::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveJTReq::blending() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJTReq.blending)
  return _internal_blending();
}
inline void MoveJTReq::unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blending_);
  }
  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveJTReq.blending)
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJTReq::release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* released = _impl_.blending_;
  _impl_.blending_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJTReq::unsafe_arena_release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJTReq.blending)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* temp = _impl_.blending_;
  _impl_.blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJTReq::_internal_mutable_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaForAllocation());
    _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(p);
  }
  return _impl_.blending_;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJTReq::mutable_blending() {
  ::Nrmk::IndyFramework::BlendingType* _msg = _internal_mutable_blending();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJTReq.blending)
  return _msg;
}
inline void MoveJTReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(_impl_.blending_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJTReq.blending)
}

// float time = 3;
inline void MoveJTReq::clear_time() {
  _impl_.time_ = 0;
}
inline float MoveJTReq::time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJTReq.time)
  return _internal_time();
}
inline void MoveJTReq::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveJTReq.time)
}
inline float MoveJTReq::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void MoveJTReq::_internal_set_time(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_ = value;
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 20;
inline bool MoveJTReq::has_post_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_condition_ != nullptr);
  return value;
}
inline void MoveJTReq::clear_post_condition() {
  if (_impl_.post_condition_ != nullptr) _impl_.post_condition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveJTReq::_internal_post_condition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::MotionCondition* p = _impl_.post_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition&>(::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveJTReq::post_condition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJTReq.post_condition)
  return _internal_post_condition();
}
inline void MoveJTReq::unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.post_condition_);
  }
  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveJTReq.post_condition)
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJTReq::release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* released = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJTReq::unsafe_arena_release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJTReq.post_condition)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* temp = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJTReq::_internal_mutable_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaForAllocation());
    _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(p);
  }
  return _impl_.post_condition_;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJTReq::mutable_post_condition() {
  ::Nrmk::IndyFramework::MotionCondition* _msg = _internal_mutable_post_condition();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJTReq.post_condition)
  return _msg;
}
inline void MoveJTReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(_impl_.post_condition_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJTReq.post_condition)
}

// -------------------------------------------------------------------

// TargetP

// repeated float t_start = 1;
inline int TargetP::_internal_t_start_size() const {
  return _internal_t_start().size();
}
inline int TargetP::t_start_size() const {
  return _internal_t_start_size();
}
inline void TargetP::clear_t_start() {
  _internal_mutable_t_start()->Clear();
}
inline float TargetP::t_start(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetP.t_start)
  return _internal_t_start().Get(index);
}
inline void TargetP::set_t_start(int index, float value) {
  _internal_mutable_t_start()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetP.t_start)
}
inline void TargetP::add_t_start(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_t_start()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TargetP.t_start)
}
inline const ::google::protobuf::RepeatedField<float>& TargetP::t_start() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TargetP.t_start)
  return _internal_t_start();
}
inline ::google::protobuf::RepeatedField<float>* TargetP::mutable_t_start() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TargetP.t_start)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_t_start();
}

inline const ::google::protobuf::RepeatedField<float>& TargetP::_internal_t_start() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.t_start_;
}
inline ::google::protobuf::RepeatedField<float>* TargetP::_internal_mutable_t_start() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.t_start_;
}

// repeated float t_target = 2;
inline int TargetP::_internal_t_target_size() const {
  return _internal_t_target().size();
}
inline int TargetP::t_target_size() const {
  return _internal_t_target_size();
}
inline void TargetP::clear_t_target() {
  _internal_mutable_t_target()->Clear();
}
inline float TargetP::t_target(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetP.t_target)
  return _internal_t_target().Get(index);
}
inline void TargetP::set_t_target(int index, float value) {
  _internal_mutable_t_target()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetP.t_target)
}
inline void TargetP::add_t_target(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_t_target()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TargetP.t_target)
}
inline const ::google::protobuf::RepeatedField<float>& TargetP::t_target() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TargetP.t_target)
  return _internal_t_target();
}
inline ::google::protobuf::RepeatedField<float>* TargetP::mutable_t_target() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TargetP.t_target)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_t_target();
}

inline const ::google::protobuf::RepeatedField<float>& TargetP::_internal_t_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.t_target_;
}
inline ::google::protobuf::RepeatedField<float>* TargetP::_internal_mutable_t_target() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.t_target_;
}

// .Nrmk.IndyFramework.TaskBaseType base_type = 3;
inline void TargetP::clear_base_type() {
  _impl_.base_type_ = 0;
}
inline ::Nrmk::IndyFramework::TaskBaseType TargetP::base_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetP.base_type)
  return _internal_base_type();
}
inline void TargetP::set_base_type(::Nrmk::IndyFramework::TaskBaseType value) {
  _internal_set_base_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetP.base_type)
}
inline ::Nrmk::IndyFramework::TaskBaseType TargetP::_internal_base_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::TaskBaseType>(_impl_.base_type_);
}
inline void TargetP::_internal_set_base_type(::Nrmk::IndyFramework::TaskBaseType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.base_type_ = value;
}

// -------------------------------------------------------------------

// TargetC

// repeated float t_start = 1;
inline int TargetC::_internal_t_start_size() const {
  return _internal_t_start().size();
}
inline int TargetC::t_start_size() const {
  return _internal_t_start_size();
}
inline void TargetC::clear_t_start() {
  _internal_mutable_t_start()->Clear();
}
inline float TargetC::t_start(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetC.t_start)
  return _internal_t_start().Get(index);
}
inline void TargetC::set_t_start(int index, float value) {
  _internal_mutable_t_start()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetC.t_start)
}
inline void TargetC::add_t_start(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_t_start()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TargetC.t_start)
}
inline const ::google::protobuf::RepeatedField<float>& TargetC::t_start() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TargetC.t_start)
  return _internal_t_start();
}
inline ::google::protobuf::RepeatedField<float>* TargetC::mutable_t_start() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TargetC.t_start)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_t_start();
}

inline const ::google::protobuf::RepeatedField<float>& TargetC::_internal_t_start() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.t_start_;
}
inline ::google::protobuf::RepeatedField<float>* TargetC::_internal_mutable_t_start() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.t_start_;
}

// repeated float t_pos0 = 2;
inline int TargetC::_internal_t_pos0_size() const {
  return _internal_t_pos0().size();
}
inline int TargetC::t_pos0_size() const {
  return _internal_t_pos0_size();
}
inline void TargetC::clear_t_pos0() {
  _internal_mutable_t_pos0()->Clear();
}
inline float TargetC::t_pos0(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetC.t_pos0)
  return _internal_t_pos0().Get(index);
}
inline void TargetC::set_t_pos0(int index, float value) {
  _internal_mutable_t_pos0()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetC.t_pos0)
}
inline void TargetC::add_t_pos0(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_t_pos0()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TargetC.t_pos0)
}
inline const ::google::protobuf::RepeatedField<float>& TargetC::t_pos0() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TargetC.t_pos0)
  return _internal_t_pos0();
}
inline ::google::protobuf::RepeatedField<float>* TargetC::mutable_t_pos0() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TargetC.t_pos0)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_t_pos0();
}

inline const ::google::protobuf::RepeatedField<float>& TargetC::_internal_t_pos0() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.t_pos0_;
}
inline ::google::protobuf::RepeatedField<float>* TargetC::_internal_mutable_t_pos0() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.t_pos0_;
}

// repeated float t_pos1 = 3;
inline int TargetC::_internal_t_pos1_size() const {
  return _internal_t_pos1().size();
}
inline int TargetC::t_pos1_size() const {
  return _internal_t_pos1_size();
}
inline void TargetC::clear_t_pos1() {
  _internal_mutable_t_pos1()->Clear();
}
inline float TargetC::t_pos1(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetC.t_pos1)
  return _internal_t_pos1().Get(index);
}
inline void TargetC::set_t_pos1(int index, float value) {
  _internal_mutable_t_pos1()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetC.t_pos1)
}
inline void TargetC::add_t_pos1(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_t_pos1()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TargetC.t_pos1)
}
inline const ::google::protobuf::RepeatedField<float>& TargetC::t_pos1() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TargetC.t_pos1)
  return _internal_t_pos1();
}
inline ::google::protobuf::RepeatedField<float>* TargetC::mutable_t_pos1() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TargetC.t_pos1)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_t_pos1();
}

inline const ::google::protobuf::RepeatedField<float>& TargetC::_internal_t_pos1() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.t_pos1_;
}
inline ::google::protobuf::RepeatedField<float>* TargetC::_internal_mutable_t_pos1() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.t_pos1_;
}

// .Nrmk.IndyFramework.TaskBaseType base_type = 4;
inline void TargetC::clear_base_type() {
  _impl_.base_type_ = 0;
}
inline ::Nrmk::IndyFramework::TaskBaseType TargetC::base_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetC.base_type)
  return _internal_base_type();
}
inline void TargetC::set_base_type(::Nrmk::IndyFramework::TaskBaseType value) {
  _internal_set_base_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetC.base_type)
}
inline ::Nrmk::IndyFramework::TaskBaseType TargetC::_internal_base_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::TaskBaseType>(_impl_.base_type_);
}
inline void TargetC::_internal_set_base_type(::Nrmk::IndyFramework::TaskBaseType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.base_type_ = value;
}

// -------------------------------------------------------------------

// MoveLReq

// .Nrmk.IndyFramework.TargetP target = 1;
inline bool MoveLReq::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline void MoveLReq::clear_target() {
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Nrmk::IndyFramework::TargetP& MoveLReq::_internal_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::TargetP* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::TargetP&>(::Nrmk::IndyFramework::_TargetP_default_instance_);
}
inline const ::Nrmk::IndyFramework::TargetP& MoveLReq::target() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.target)
  return _internal_target();
}
inline void MoveLReq::unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetP* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveLReq.target)
}
inline ::Nrmk::IndyFramework::TargetP* MoveLReq::release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetP* released = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::TargetP* MoveLReq::unsafe_arena_release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLReq.target)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetP* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetP* MoveLReq::_internal_mutable_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetP>(GetArenaForAllocation());
    _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(p);
  }
  return _impl_.target_;
}
inline ::Nrmk::IndyFramework::TargetP* MoveLReq::mutable_target() {
  ::Nrmk::IndyFramework::TargetP* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLReq.target)
  return _msg;
}
inline void MoveLReq::set_allocated_target(::Nrmk::IndyFramework::TargetP* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(_impl_.target_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveLReq::has_blending() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blending_ != nullptr);
  return value;
}
inline void MoveLReq::clear_blending() {
  if (_impl_.blending_ != nullptr) _impl_.blending_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveLReq::_internal_blending() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::BlendingType* p = _impl_.blending_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType&>(::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveLReq::blending() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.blending)
  return _internal_blending();
}
inline void MoveLReq::unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blending_);
  }
  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveLReq.blending)
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLReq::release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* released = _impl_.blending_;
  _impl_.blending_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLReq::unsafe_arena_release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLReq.blending)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* temp = _impl_.blending_;
  _impl_.blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLReq::_internal_mutable_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaForAllocation());
    _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(p);
  }
  return _impl_.blending_;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLReq::mutable_blending() {
  ::Nrmk::IndyFramework::BlendingType* _msg = _internal_mutable_blending();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLReq.blending)
  return _msg;
}
inline void MoveLReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(_impl_.blending_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLReq.blending)
}

// float vel_ratio = 3;
inline void MoveLReq::clear_vel_ratio() {
  _impl_.vel_ratio_ = 0;
}
inline float MoveLReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.vel_ratio)
  return _internal_vel_ratio();
}
inline void MoveLReq::set_vel_ratio(float value) {
  _internal_set_vel_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLReq.vel_ratio)
}
inline float MoveLReq::_internal_vel_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vel_ratio_;
}
inline void MoveLReq::_internal_set_vel_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vel_ratio_ = value;
}

// float acc_ratio = 4;
inline void MoveLReq::clear_acc_ratio() {
  _impl_.acc_ratio_ = 0;
}
inline float MoveLReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.acc_ratio)
  return _internal_acc_ratio();
}
inline void MoveLReq::set_acc_ratio(float value) {
  _internal_set_acc_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLReq.acc_ratio)
}
inline float MoveLReq::_internal_acc_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.acc_ratio_;
}
inline void MoveLReq::_internal_set_acc_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.acc_ratio_ = value;
}

// .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
inline void MoveLReq::clear_vel_type() {
  _impl_.vel_type_ = 0;
}
inline ::Nrmk::IndyFramework::VelocityModeType MoveLReq::vel_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.vel_type)
  return _internal_vel_type();
}
inline void MoveLReq::set_vel_type(::Nrmk::IndyFramework::VelocityModeType value) {
  _internal_set_vel_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLReq.vel_type)
}
inline ::Nrmk::IndyFramework::VelocityModeType MoveLReq::_internal_vel_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::VelocityModeType>(_impl_.vel_type_);
}
inline void MoveLReq::_internal_set_vel_type(::Nrmk::IndyFramework::VelocityModeType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vel_type_ = value;
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 20;
inline bool MoveLReq::has_post_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_condition_ != nullptr);
  return value;
}
inline void MoveLReq::clear_post_condition() {
  if (_impl_.post_condition_ != nullptr) _impl_.post_condition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveLReq::_internal_post_condition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::MotionCondition* p = _impl_.post_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition&>(::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveLReq::post_condition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.post_condition)
  return _internal_post_condition();
}
inline void MoveLReq::unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.post_condition_);
  }
  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveLReq.post_condition)
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLReq::release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* released = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLReq::unsafe_arena_release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLReq.post_condition)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* temp = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLReq::_internal_mutable_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaForAllocation());
    _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(p);
  }
  return _impl_.post_condition_;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLReq::mutable_post_condition() {
  ::Nrmk::IndyFramework::MotionCondition* _msg = _internal_mutable_post_condition();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLReq.post_condition)
  return _msg;
}
inline void MoveLReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(_impl_.post_condition_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLReq.post_condition)
}

// bool teaching_mode = 30;
inline void MoveLReq::clear_teaching_mode() {
  _impl_.teaching_mode_ = false;
}
inline bool MoveLReq::teaching_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.teaching_mode)
  return _internal_teaching_mode();
}
inline void MoveLReq::set_teaching_mode(bool value) {
  _internal_set_teaching_mode(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLReq.teaching_mode)
}
inline bool MoveLReq::_internal_teaching_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.teaching_mode_;
}
inline void MoveLReq::_internal_set_teaching_mode(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.teaching_mode_ = value;
}

// bool bypass_singular = 40;
inline void MoveLReq::clear_bypass_singular() {
  _impl_.bypass_singular_ = false;
}
inline bool MoveLReq::bypass_singular() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.bypass_singular)
  return _internal_bypass_singular();
}
inline void MoveLReq::set_bypass_singular(bool value) {
  _internal_set_bypass_singular(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLReq.bypass_singular)
}
inline bool MoveLReq::_internal_bypass_singular() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bypass_singular_;
}
inline void MoveLReq::_internal_set_bypass_singular(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bypass_singular_ = value;
}

// -------------------------------------------------------------------

// MoveLTReq

// .Nrmk.IndyFramework.TargetP target = 1;
inline bool MoveLTReq::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline void MoveLTReq::clear_target() {
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Nrmk::IndyFramework::TargetP& MoveLTReq::_internal_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::TargetP* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::TargetP&>(::Nrmk::IndyFramework::_TargetP_default_instance_);
}
inline const ::Nrmk::IndyFramework::TargetP& MoveLTReq::target() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLTReq.target)
  return _internal_target();
}
inline void MoveLTReq::unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetP* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveLTReq.target)
}
inline ::Nrmk::IndyFramework::TargetP* MoveLTReq::release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetP* released = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::TargetP* MoveLTReq::unsafe_arena_release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLTReq.target)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetP* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetP* MoveLTReq::_internal_mutable_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetP>(GetArenaForAllocation());
    _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(p);
  }
  return _impl_.target_;
}
inline ::Nrmk::IndyFramework::TargetP* MoveLTReq::mutable_target() {
  ::Nrmk::IndyFramework::TargetP* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLTReq.target)
  return _msg;
}
inline void MoveLTReq::set_allocated_target(::Nrmk::IndyFramework::TargetP* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(_impl_.target_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLTReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveLTReq::has_blending() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blending_ != nullptr);
  return value;
}
inline void MoveLTReq::clear_blending() {
  if (_impl_.blending_ != nullptr) _impl_.blending_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveLTReq::_internal_blending() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::BlendingType* p = _impl_.blending_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType&>(::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveLTReq::blending() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLTReq.blending)
  return _internal_blending();
}
inline void MoveLTReq::unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blending_);
  }
  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveLTReq.blending)
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLTReq::release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* released = _impl_.blending_;
  _impl_.blending_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLTReq::unsafe_arena_release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLTReq.blending)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* temp = _impl_.blending_;
  _impl_.blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLTReq::_internal_mutable_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaForAllocation());
    _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(p);
  }
  return _impl_.blending_;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLTReq::mutable_blending() {
  ::Nrmk::IndyFramework::BlendingType* _msg = _internal_mutable_blending();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLTReq.blending)
  return _msg;
}
inline void MoveLTReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(_impl_.blending_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLTReq.blending)
}

// float time = 3;
inline void MoveLTReq::clear_time() {
  _impl_.time_ = 0;
}
inline float MoveLTReq::time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLTReq.time)
  return _internal_time();
}
inline void MoveLTReq::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLTReq.time)
}
inline float MoveLTReq::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void MoveLTReq::_internal_set_time(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_ = value;
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 20;
inline bool MoveLTReq::has_post_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_condition_ != nullptr);
  return value;
}
inline void MoveLTReq::clear_post_condition() {
  if (_impl_.post_condition_ != nullptr) _impl_.post_condition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveLTReq::_internal_post_condition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::MotionCondition* p = _impl_.post_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition&>(::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveLTReq::post_condition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLTReq.post_condition)
  return _internal_post_condition();
}
inline void MoveLTReq::unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.post_condition_);
  }
  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveLTReq.post_condition)
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLTReq::release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* released = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLTReq::unsafe_arena_release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLTReq.post_condition)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* temp = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLTReq::_internal_mutable_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaForAllocation());
    _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(p);
  }
  return _impl_.post_condition_;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLTReq::mutable_post_condition() {
  ::Nrmk::IndyFramework::MotionCondition* _msg = _internal_mutable_post_condition();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLTReq.post_condition)
  return _msg;
}
inline void MoveLTReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(_impl_.post_condition_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLTReq.post_condition)
}

// -------------------------------------------------------------------

// MoveAxisReq

// repeated float start_mm = 1;
inline int MoveAxisReq::_internal_start_mm_size() const {
  return _internal_start_mm().size();
}
inline int MoveAxisReq::start_mm_size() const {
  return _internal_start_mm_size();
}
inline void MoveAxisReq::clear_start_mm() {
  _internal_mutable_start_mm()->Clear();
}
inline float MoveAxisReq::start_mm(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveAxisReq.start_mm)
  return _internal_start_mm().Get(index);
}
inline void MoveAxisReq::set_start_mm(int index, float value) {
  _internal_mutable_start_mm()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveAxisReq.start_mm)
}
inline void MoveAxisReq::add_start_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_start_mm()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveAxisReq.start_mm)
}
inline const ::google::protobuf::RepeatedField<float>& MoveAxisReq::start_mm() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveAxisReq.start_mm)
  return _internal_start_mm();
}
inline ::google::protobuf::RepeatedField<float>* MoveAxisReq::mutable_start_mm() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveAxisReq.start_mm)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_start_mm();
}

inline const ::google::protobuf::RepeatedField<float>& MoveAxisReq::_internal_start_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_mm_;
}
inline ::google::protobuf::RepeatedField<float>* MoveAxisReq::_internal_mutable_start_mm() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.start_mm_;
}

// repeated float target_mm = 2;
inline int MoveAxisReq::_internal_target_mm_size() const {
  return _internal_target_mm().size();
}
inline int MoveAxisReq::target_mm_size() const {
  return _internal_target_mm_size();
}
inline void MoveAxisReq::clear_target_mm() {
  _internal_mutable_target_mm()->Clear();
}
inline float MoveAxisReq::target_mm(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveAxisReq.target_mm)
  return _internal_target_mm().Get(index);
}
inline void MoveAxisReq::set_target_mm(int index, float value) {
  _internal_mutable_target_mm()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveAxisReq.target_mm)
}
inline void MoveAxisReq::add_target_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_target_mm()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveAxisReq.target_mm)
}
inline const ::google::protobuf::RepeatedField<float>& MoveAxisReq::target_mm() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveAxisReq.target_mm)
  return _internal_target_mm();
}
inline ::google::protobuf::RepeatedField<float>* MoveAxisReq::mutable_target_mm() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveAxisReq.target_mm)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_target_mm();
}

inline const ::google::protobuf::RepeatedField<float>& MoveAxisReq::_internal_target_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.target_mm_;
}
inline ::google::protobuf::RepeatedField<float>* MoveAxisReq::_internal_mutable_target_mm() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.target_mm_;
}

// float vel_percentage = 3;
inline void MoveAxisReq::clear_vel_percentage() {
  _impl_.vel_percentage_ = 0;
}
inline float MoveAxisReq::vel_percentage() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveAxisReq.vel_percentage)
  return _internal_vel_percentage();
}
inline void MoveAxisReq::set_vel_percentage(float value) {
  _internal_set_vel_percentage(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveAxisReq.vel_percentage)
}
inline float MoveAxisReq::_internal_vel_percentage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vel_percentage_;
}
inline void MoveAxisReq::_internal_set_vel_percentage(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vel_percentage_ = value;
}

// float acc_percentage = 4;
inline void MoveAxisReq::clear_acc_percentage() {
  _impl_.acc_percentage_ = 0;
}
inline float MoveAxisReq::acc_percentage() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveAxisReq.acc_percentage)
  return _internal_acc_percentage();
}
inline void MoveAxisReq::set_acc_percentage(float value) {
  _internal_set_acc_percentage(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveAxisReq.acc_percentage)
}
inline float MoveAxisReq::_internal_acc_percentage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.acc_percentage_;
}
inline void MoveAxisReq::_internal_set_acc_percentage(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.acc_percentage_ = value;
}

// bool is_absolute = 5;
inline void MoveAxisReq::clear_is_absolute() {
  _impl_.is_absolute_ = false;
}
inline bool MoveAxisReq::is_absolute() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveAxisReq.is_absolute)
  return _internal_is_absolute();
}
inline void MoveAxisReq::set_is_absolute(bool value) {
  _internal_set_is_absolute(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveAxisReq.is_absolute)
}
inline bool MoveAxisReq::_internal_is_absolute() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_absolute_;
}
inline void MoveAxisReq::_internal_set_is_absolute(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_absolute_ = value;
}

// bool teaching_mode = 10;
inline void MoveAxisReq::clear_teaching_mode() {
  _impl_.teaching_mode_ = false;
}
inline bool MoveAxisReq::teaching_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveAxisReq.teaching_mode)
  return _internal_teaching_mode();
}
inline void MoveAxisReq::set_teaching_mode(bool value) {
  _internal_set_teaching_mode(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveAxisReq.teaching_mode)
}
inline bool MoveAxisReq::_internal_teaching_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.teaching_mode_;
}
inline void MoveAxisReq::_internal_set_teaching_mode(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.teaching_mode_ = value;
}

// -------------------------------------------------------------------

// MoveCReq

// .Nrmk.IndyFramework.TargetC target = 1;
inline bool MoveCReq::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline void MoveCReq::clear_target() {
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Nrmk::IndyFramework::TargetC& MoveCReq::_internal_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::TargetC* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::TargetC&>(::Nrmk::IndyFramework::_TargetC_default_instance_);
}
inline const ::Nrmk::IndyFramework::TargetC& MoveCReq::target() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.target)
  return _internal_target();
}
inline void MoveCReq::unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetC* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveCReq.target)
}
inline ::Nrmk::IndyFramework::TargetC* MoveCReq::release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetC* released = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::TargetC* MoveCReq::unsafe_arena_release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveCReq.target)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetC* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetC* MoveCReq::_internal_mutable_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetC>(GetArenaForAllocation());
    _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetC*>(p);
  }
  return _impl_.target_;
}
inline ::Nrmk::IndyFramework::TargetC* MoveCReq::mutable_target() {
  ::Nrmk::IndyFramework::TargetC* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveCReq.target)
  return _msg;
}
inline void MoveCReq::set_allocated_target(::Nrmk::IndyFramework::TargetC* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::TargetC*>(_impl_.target_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::TargetC*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetC*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveCReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveCReq::has_blending() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blending_ != nullptr);
  return value;
}
inline void MoveCReq::clear_blending() {
  if (_impl_.blending_ != nullptr) _impl_.blending_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveCReq::_internal_blending() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::BlendingType* p = _impl_.blending_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType&>(::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveCReq::blending() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.blending)
  return _internal_blending();
}
inline void MoveCReq::unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blending_);
  }
  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveCReq.blending)
}
inline ::Nrmk::IndyFramework::BlendingType* MoveCReq::release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* released = _impl_.blending_;
  _impl_.blending_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveCReq::unsafe_arena_release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveCReq.blending)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* temp = _impl_.blending_;
  _impl_.blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveCReq::_internal_mutable_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaForAllocation());
    _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(p);
  }
  return _impl_.blending_;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveCReq::mutable_blending() {
  ::Nrmk::IndyFramework::BlendingType* _msg = _internal_mutable_blending();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveCReq.blending)
  return _msg;
}
inline void MoveCReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(_impl_.blending_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveCReq.blending)
}

// float angle = 3;
inline void MoveCReq::clear_angle() {
  _impl_.angle_ = 0;
}
inline float MoveCReq::angle() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.angle)
  return _internal_angle();
}
inline void MoveCReq::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.angle)
}
inline float MoveCReq::_internal_angle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.angle_;
}
inline void MoveCReq::_internal_set_angle(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.angle_ = value;
}

// .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
inline void MoveCReq::clear_setting_type() {
  _impl_.setting_type_ = 0;
}
inline ::Nrmk::IndyFramework::CircularSettingType MoveCReq::setting_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.setting_type)
  return _internal_setting_type();
}
inline void MoveCReq::set_setting_type(::Nrmk::IndyFramework::CircularSettingType value) {
  _internal_set_setting_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.setting_type)
}
inline ::Nrmk::IndyFramework::CircularSettingType MoveCReq::_internal_setting_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::CircularSettingType>(_impl_.setting_type_);
}
inline void MoveCReq::_internal_set_setting_type(::Nrmk::IndyFramework::CircularSettingType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.setting_type_ = value;
}

// .Nrmk.IndyFramework.CircularMovingType move_type = 11;
inline void MoveCReq::clear_move_type() {
  _impl_.move_type_ = 0;
}
inline ::Nrmk::IndyFramework::CircularMovingType MoveCReq::move_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.move_type)
  return _internal_move_type();
}
inline void MoveCReq::set_move_type(::Nrmk::IndyFramework::CircularMovingType value) {
  _internal_set_move_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.move_type)
}
inline ::Nrmk::IndyFramework::CircularMovingType MoveCReq::_internal_move_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::CircularMovingType>(_impl_.move_type_);
}
inline void MoveCReq::_internal_set_move_type(::Nrmk::IndyFramework::CircularMovingType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.move_type_ = value;
}

// float vel_ratio = 20;
inline void MoveCReq::clear_vel_ratio() {
  _impl_.vel_ratio_ = 0;
}
inline float MoveCReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.vel_ratio)
  return _internal_vel_ratio();
}
inline void MoveCReq::set_vel_ratio(float value) {
  _internal_set_vel_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.vel_ratio)
}
inline float MoveCReq::_internal_vel_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vel_ratio_;
}
inline void MoveCReq::_internal_set_vel_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vel_ratio_ = value;
}

// float acc_ratio = 21;
inline void MoveCReq::clear_acc_ratio() {
  _impl_.acc_ratio_ = 0;
}
inline float MoveCReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.acc_ratio)
  return _internal_acc_ratio();
}
inline void MoveCReq::set_acc_ratio(float value) {
  _internal_set_acc_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.acc_ratio)
}
inline float MoveCReq::_internal_acc_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.acc_ratio_;
}
inline void MoveCReq::_internal_set_acc_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.acc_ratio_ = value;
}

// .Nrmk.IndyFramework.VelocityModeType vel_type = 22;
inline void MoveCReq::clear_vel_type() {
  _impl_.vel_type_ = 0;
}
inline ::Nrmk::IndyFramework::VelocityModeType MoveCReq::vel_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.vel_type)
  return _internal_vel_type();
}
inline void MoveCReq::set_vel_type(::Nrmk::IndyFramework::VelocityModeType value) {
  _internal_set_vel_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.vel_type)
}
inline ::Nrmk::IndyFramework::VelocityModeType MoveCReq::_internal_vel_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::VelocityModeType>(_impl_.vel_type_);
}
inline void MoveCReq::_internal_set_vel_type(::Nrmk::IndyFramework::VelocityModeType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vel_type_ = value;
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 25;
inline bool MoveCReq::has_post_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_condition_ != nullptr);
  return value;
}
inline void MoveCReq::clear_post_condition() {
  if (_impl_.post_condition_ != nullptr) _impl_.post_condition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveCReq::_internal_post_condition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::MotionCondition* p = _impl_.post_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition&>(::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveCReq::post_condition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.post_condition)
  return _internal_post_condition();
}
inline void MoveCReq::unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.post_condition_);
  }
  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveCReq.post_condition)
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveCReq::release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* released = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveCReq::unsafe_arena_release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveCReq.post_condition)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* temp = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveCReq::_internal_mutable_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaForAllocation());
    _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(p);
  }
  return _impl_.post_condition_;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveCReq::mutable_post_condition() {
  ::Nrmk::IndyFramework::MotionCondition* _msg = _internal_mutable_post_condition();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveCReq.post_condition)
  return _msg;
}
inline void MoveCReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(_impl_.post_condition_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveCReq.post_condition)
}

// bool teaching_mode = 30;
inline void MoveCReq::clear_teaching_mode() {
  _impl_.teaching_mode_ = false;
}
inline bool MoveCReq::teaching_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.teaching_mode)
  return _internal_teaching_mode();
}
inline void MoveCReq::set_teaching_mode(bool value) {
  _internal_set_teaching_mode(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.teaching_mode)
}
inline bool MoveCReq::_internal_teaching_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.teaching_mode_;
}
inline void MoveCReq::_internal_set_teaching_mode(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.teaching_mode_ = value;
}

// bool bypass_singular = 40;
inline void MoveCReq::clear_bypass_singular() {
  _impl_.bypass_singular_ = false;
}
inline bool MoveCReq::bypass_singular() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.bypass_singular)
  return _internal_bypass_singular();
}
inline void MoveCReq::set_bypass_singular(bool value) {
  _internal_set_bypass_singular(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.bypass_singular)
}
inline bool MoveCReq::_internal_bypass_singular() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bypass_singular_;
}
inline void MoveCReq::_internal_set_bypass_singular(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bypass_singular_ = value;
}

// -------------------------------------------------------------------

// MoveCTReq

// .Nrmk.IndyFramework.TargetC target = 1;
inline bool MoveCTReq::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline void MoveCTReq::clear_target() {
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Nrmk::IndyFramework::TargetC& MoveCTReq::_internal_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::TargetC* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::TargetC&>(::Nrmk::IndyFramework::_TargetC_default_instance_);
}
inline const ::Nrmk::IndyFramework::TargetC& MoveCTReq::target() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCTReq.target)
  return _internal_target();
}
inline void MoveCTReq::unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetC* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetC*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveCTReq.target)
}
inline ::Nrmk::IndyFramework::TargetC* MoveCTReq::release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetC* released = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::TargetC* MoveCTReq::unsafe_arena_release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveCTReq.target)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetC* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetC* MoveCTReq::_internal_mutable_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetC>(GetArenaForAllocation());
    _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetC*>(p);
  }
  return _impl_.target_;
}
inline ::Nrmk::IndyFramework::TargetC* MoveCTReq::mutable_target() {
  ::Nrmk::IndyFramework::TargetC* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveCTReq.target)
  return _msg;
}
inline void MoveCTReq::set_allocated_target(::Nrmk::IndyFramework::TargetC* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::TargetC*>(_impl_.target_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::TargetC*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetC*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveCTReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveCTReq::has_blending() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blending_ != nullptr);
  return value;
}
inline void MoveCTReq::clear_blending() {
  if (_impl_.blending_ != nullptr) _impl_.blending_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveCTReq::_internal_blending() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::BlendingType* p = _impl_.blending_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType&>(::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveCTReq::blending() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCTReq.blending)
  return _internal_blending();
}
inline void MoveCTReq::unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blending_);
  }
  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveCTReq.blending)
}
inline ::Nrmk::IndyFramework::BlendingType* MoveCTReq::release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* released = _impl_.blending_;
  _impl_.blending_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveCTReq::unsafe_arena_release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveCTReq.blending)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* temp = _impl_.blending_;
  _impl_.blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveCTReq::_internal_mutable_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaForAllocation());
    _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(p);
  }
  return _impl_.blending_;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveCTReq::mutable_blending() {
  ::Nrmk::IndyFramework::BlendingType* _msg = _internal_mutable_blending();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveCTReq.blending)
  return _msg;
}
inline void MoveCTReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(_impl_.blending_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveCTReq.blending)
}

// float angle = 3;
inline void MoveCTReq::clear_angle() {
  _impl_.angle_ = 0;
}
inline float MoveCTReq::angle() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCTReq.angle)
  return _internal_angle();
}
inline void MoveCTReq::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCTReq.angle)
}
inline float MoveCTReq::_internal_angle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.angle_;
}
inline void MoveCTReq::_internal_set_angle(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.angle_ = value;
}

// .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
inline void MoveCTReq::clear_setting_type() {
  _impl_.setting_type_ = 0;
}
inline ::Nrmk::IndyFramework::CircularSettingType MoveCTReq::setting_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCTReq.setting_type)
  return _internal_setting_type();
}
inline void MoveCTReq::set_setting_type(::Nrmk::IndyFramework::CircularSettingType value) {
  _internal_set_setting_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCTReq.setting_type)
}
inline ::Nrmk::IndyFramework::CircularSettingType MoveCTReq::_internal_setting_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::CircularSettingType>(_impl_.setting_type_);
}
inline void MoveCTReq::_internal_set_setting_type(::Nrmk::IndyFramework::CircularSettingType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.setting_type_ = value;
}

// .Nrmk.IndyFramework.CircularMovingType move_type = 11;
inline void MoveCTReq::clear_move_type() {
  _impl_.move_type_ = 0;
}
inline ::Nrmk::IndyFramework::CircularMovingType MoveCTReq::move_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCTReq.move_type)
  return _internal_move_type();
}
inline void MoveCTReq::set_move_type(::Nrmk::IndyFramework::CircularMovingType value) {
  _internal_set_move_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCTReq.move_type)
}
inline ::Nrmk::IndyFramework::CircularMovingType MoveCTReq::_internal_move_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::CircularMovingType>(_impl_.move_type_);
}
inline void MoveCTReq::_internal_set_move_type(::Nrmk::IndyFramework::CircularMovingType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.move_type_ = value;
}

// float time = 20;
inline void MoveCTReq::clear_time() {
  _impl_.time_ = 0;
}
inline float MoveCTReq::time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCTReq.time)
  return _internal_time();
}
inline void MoveCTReq::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCTReq.time)
}
inline float MoveCTReq::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void MoveCTReq::_internal_set_time(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_ = value;
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 25;
inline bool MoveCTReq::has_post_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_condition_ != nullptr);
  return value;
}
inline void MoveCTReq::clear_post_condition() {
  if (_impl_.post_condition_ != nullptr) _impl_.post_condition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveCTReq::_internal_post_condition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::MotionCondition* p = _impl_.post_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition&>(::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveCTReq::post_condition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCTReq.post_condition)
  return _internal_post_condition();
}
inline void MoveCTReq::unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.post_condition_);
  }
  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveCTReq.post_condition)
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveCTReq::release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* released = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveCTReq::unsafe_arena_release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveCTReq.post_condition)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* temp = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveCTReq::_internal_mutable_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaForAllocation());
    _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(p);
  }
  return _impl_.post_condition_;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveCTReq::mutable_post_condition() {
  ::Nrmk::IndyFramework::MotionCondition* _msg = _internal_mutable_post_condition();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveCTReq.post_condition)
  return _msg;
}
inline void MoveCTReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(_impl_.post_condition_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveCTReq.post_condition)
}

// -------------------------------------------------------------------

// MoveJointTrajReq

// repeated .Nrmk.IndyFramework.Vector q_list = 1;
inline int MoveJointTrajReq::_internal_q_list_size() const {
  return _internal_q_list().size();
}
inline int MoveJointTrajReq::q_list_size() const {
  return _internal_q_list_size();
}
inline ::Nrmk::IndyFramework::Vector* MoveJointTrajReq::mutable_q_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJointTrajReq.q_list)
  return _internal_mutable_q_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
MoveJointTrajReq::mutable_q_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveJointTrajReq.q_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_q_list();
}
inline const ::Nrmk::IndyFramework::Vector& MoveJointTrajReq::q_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJointTrajReq.q_list)
    return _internal_q_list().Get(index);
}
inline ::Nrmk::IndyFramework::Vector* MoveJointTrajReq::add_q_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::Vector* _add = _internal_mutable_q_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveJointTrajReq.q_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
MoveJointTrajReq::q_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveJointTrajReq.q_list)
  return _internal_q_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>&
MoveJointTrajReq::_internal_q_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.q_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>*
MoveJointTrajReq::_internal_mutable_q_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.q_list_;
}

// repeated .Nrmk.IndyFramework.Vector qdot_list = 2;
inline int MoveJointTrajReq::_internal_qdot_list_size() const {
  return _internal_qdot_list().size();
}
inline int MoveJointTrajReq::qdot_list_size() const {
  return _internal_qdot_list_size();
}
inline ::Nrmk::IndyFramework::Vector* MoveJointTrajReq::mutable_qdot_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJointTrajReq.qdot_list)
  return _internal_mutable_qdot_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
MoveJointTrajReq::mutable_qdot_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveJointTrajReq.qdot_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_qdot_list();
}
inline const ::Nrmk::IndyFramework::Vector& MoveJointTrajReq::qdot_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJointTrajReq.qdot_list)
    return _internal_qdot_list().Get(index);
}
inline ::Nrmk::IndyFramework::Vector* MoveJointTrajReq::add_qdot_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::Vector* _add = _internal_mutable_qdot_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveJointTrajReq.qdot_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
MoveJointTrajReq::qdot_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveJointTrajReq.qdot_list)
  return _internal_qdot_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>&
MoveJointTrajReq::_internal_qdot_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qdot_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>*
MoveJointTrajReq::_internal_mutable_qdot_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.qdot_list_;
}

// repeated .Nrmk.IndyFramework.Vector qddot_list = 3;
inline int MoveJointTrajReq::_internal_qddot_list_size() const {
  return _internal_qddot_list().size();
}
inline int MoveJointTrajReq::qddot_list_size() const {
  return _internal_qddot_list_size();
}
inline ::Nrmk::IndyFramework::Vector* MoveJointTrajReq::mutable_qddot_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJointTrajReq.qddot_list)
  return _internal_mutable_qddot_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
MoveJointTrajReq::mutable_qddot_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveJointTrajReq.qddot_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_qddot_list();
}
inline const ::Nrmk::IndyFramework::Vector& MoveJointTrajReq::qddot_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJointTrajReq.qddot_list)
    return _internal_qddot_list().Get(index);
}
inline ::Nrmk::IndyFramework::Vector* MoveJointTrajReq::add_qddot_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::Vector* _add = _internal_mutable_qddot_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveJointTrajReq.qddot_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
MoveJointTrajReq::qddot_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveJointTrajReq.qddot_list)
  return _internal_qddot_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>&
MoveJointTrajReq::_internal_qddot_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qddot_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>*
MoveJointTrajReq::_internal_mutable_qddot_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.qddot_list_;
}

// -------------------------------------------------------------------

// MoveTaskTrajReq

// repeated .Nrmk.IndyFramework.Vector p_list = 1;
inline int MoveTaskTrajReq::_internal_p_list_size() const {
  return _internal_p_list().size();
}
inline int MoveTaskTrajReq::p_list_size() const {
  return _internal_p_list_size();
}
inline ::Nrmk::IndyFramework::Vector* MoveTaskTrajReq::mutable_p_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveTaskTrajReq.p_list)
  return _internal_mutable_p_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
MoveTaskTrajReq::mutable_p_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveTaskTrajReq.p_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_p_list();
}
inline const ::Nrmk::IndyFramework::Vector& MoveTaskTrajReq::p_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTaskTrajReq.p_list)
    return _internal_p_list().Get(index);
}
inline ::Nrmk::IndyFramework::Vector* MoveTaskTrajReq::add_p_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::Vector* _add = _internal_mutable_p_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveTaskTrajReq.p_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
MoveTaskTrajReq::p_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveTaskTrajReq.p_list)
  return _internal_p_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>&
MoveTaskTrajReq::_internal_p_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.p_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>*
MoveTaskTrajReq::_internal_mutable_p_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.p_list_;
}

// repeated .Nrmk.IndyFramework.Vector pdot_list = 2;
inline int MoveTaskTrajReq::_internal_pdot_list_size() const {
  return _internal_pdot_list().size();
}
inline int MoveTaskTrajReq::pdot_list_size() const {
  return _internal_pdot_list_size();
}
inline ::Nrmk::IndyFramework::Vector* MoveTaskTrajReq::mutable_pdot_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveTaskTrajReq.pdot_list)
  return _internal_mutable_pdot_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
MoveTaskTrajReq::mutable_pdot_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveTaskTrajReq.pdot_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pdot_list();
}
inline const ::Nrmk::IndyFramework::Vector& MoveTaskTrajReq::pdot_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTaskTrajReq.pdot_list)
    return _internal_pdot_list().Get(index);
}
inline ::Nrmk::IndyFramework::Vector* MoveTaskTrajReq::add_pdot_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::Vector* _add = _internal_mutable_pdot_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveTaskTrajReq.pdot_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
MoveTaskTrajReq::pdot_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveTaskTrajReq.pdot_list)
  return _internal_pdot_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>&
MoveTaskTrajReq::_internal_pdot_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pdot_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>*
MoveTaskTrajReq::_internal_mutable_pdot_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pdot_list_;
}

// repeated .Nrmk.IndyFramework.Vector pddot_list = 3;
inline int MoveTaskTrajReq::_internal_pddot_list_size() const {
  return _internal_pddot_list().size();
}
inline int MoveTaskTrajReq::pddot_list_size() const {
  return _internal_pddot_list_size();
}
inline ::Nrmk::IndyFramework::Vector* MoveTaskTrajReq::mutable_pddot_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveTaskTrajReq.pddot_list)
  return _internal_mutable_pddot_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
MoveTaskTrajReq::mutable_pddot_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveTaskTrajReq.pddot_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pddot_list();
}
inline const ::Nrmk::IndyFramework::Vector& MoveTaskTrajReq::pddot_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTaskTrajReq.pddot_list)
    return _internal_pddot_list().Get(index);
}
inline ::Nrmk::IndyFramework::Vector* MoveTaskTrajReq::add_pddot_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::Vector* _add = _internal_mutable_pddot_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveTaskTrajReq.pddot_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
MoveTaskTrajReq::pddot_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveTaskTrajReq.pddot_list)
  return _internal_pddot_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>&
MoveTaskTrajReq::_internal_pddot_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pddot_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Vector>*
MoveTaskTrajReq::_internal_mutable_pddot_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pddot_list_;
}

// -------------------------------------------------------------------

// MoveGcodeReq

// string gcode_file = 1;
inline void MoveGcodeReq::clear_gcode_file() {
  _impl_.gcode_file_.ClearToEmpty();
}
inline const std::string& MoveGcodeReq::gcode_file() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveGcodeReq.gcode_file)
  return _internal_gcode_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MoveGcodeReq::set_gcode_file(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gcode_file_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveGcodeReq.gcode_file)
}
inline std::string* MoveGcodeReq::mutable_gcode_file() {
  std::string* _s = _internal_mutable_gcode_file();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveGcodeReq.gcode_file)
  return _s;
}
inline const std::string& MoveGcodeReq::_internal_gcode_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gcode_file_.Get();
}
inline void MoveGcodeReq::_internal_set_gcode_file(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gcode_file_.Set(value, GetArenaForAllocation());
}
inline std::string* MoveGcodeReq::_internal_mutable_gcode_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.gcode_file_.Mutable( GetArenaForAllocation());
}
inline std::string* MoveGcodeReq::release_gcode_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveGcodeReq.gcode_file)
  return _impl_.gcode_file_.Release();
}
inline void MoveGcodeReq::set_allocated_gcode_file(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gcode_file_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.gcode_file_.IsDefault()) {
          _impl_.gcode_file_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveGcodeReq.gcode_file)
}

// bool is_smooth_mode = 2;
inline void MoveGcodeReq::clear_is_smooth_mode() {
  _impl_.is_smooth_mode_ = false;
}
inline bool MoveGcodeReq::is_smooth_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveGcodeReq.is_smooth_mode)
  return _internal_is_smooth_mode();
}
inline void MoveGcodeReq::set_is_smooth_mode(bool value) {
  _internal_set_is_smooth_mode(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveGcodeReq.is_smooth_mode)
}
inline bool MoveGcodeReq::_internal_is_smooth_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_smooth_mode_;
}
inline void MoveGcodeReq::_internal_set_is_smooth_mode(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_smooth_mode_ = value;
}

// float smooth_radius = 3;
inline void MoveGcodeReq::clear_smooth_radius() {
  _impl_.smooth_radius_ = 0;
}
inline float MoveGcodeReq::smooth_radius() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveGcodeReq.smooth_radius)
  return _internal_smooth_radius();
}
inline void MoveGcodeReq::set_smooth_radius(float value) {
  _internal_set_smooth_radius(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveGcodeReq.smooth_radius)
}
inline float MoveGcodeReq::_internal_smooth_radius() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.smooth_radius_;
}
inline void MoveGcodeReq::_internal_set_smooth_radius(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.smooth_radius_ = value;
}

// float vel_ratio = 4;
inline void MoveGcodeReq::clear_vel_ratio() {
  _impl_.vel_ratio_ = 0;
}
inline float MoveGcodeReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveGcodeReq.vel_ratio)
  return _internal_vel_ratio();
}
inline void MoveGcodeReq::set_vel_ratio(float value) {
  _internal_set_vel_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveGcodeReq.vel_ratio)
}
inline float MoveGcodeReq::_internal_vel_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vel_ratio_;
}
inline void MoveGcodeReq::_internal_set_vel_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vel_ratio_ = value;
}

// float acc_ratio = 5;
inline void MoveGcodeReq::clear_acc_ratio() {
  _impl_.acc_ratio_ = 0;
}
inline float MoveGcodeReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveGcodeReq.acc_ratio)
  return _internal_acc_ratio();
}
inline void MoveGcodeReq::set_acc_ratio(float value) {
  _internal_set_acc_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveGcodeReq.acc_ratio)
}
inline float MoveGcodeReq::_internal_acc_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.acc_ratio_;
}
inline void MoveGcodeReq::_internal_set_acc_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.acc_ratio_ = value;
}

// -------------------------------------------------------------------

// MoveConveyorReq

// bool teaching_mode = 1;
inline void MoveConveyorReq::clear_teaching_mode() {
  _impl_.teaching_mode_ = false;
}
inline bool MoveConveyorReq::teaching_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveConveyorReq.teaching_mode)
  return _internal_teaching_mode();
}
inline void MoveConveyorReq::set_teaching_mode(bool value) {
  _internal_set_teaching_mode(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveConveyorReq.teaching_mode)
}
inline bool MoveConveyorReq::_internal_teaching_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.teaching_mode_;
}
inline void MoveConveyorReq::_internal_set_teaching_mode(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.teaching_mode_ = value;
}

// bool bypass_singular = 2;
inline void MoveConveyorReq::clear_bypass_singular() {
  _impl_.bypass_singular_ = false;
}
inline bool MoveConveyorReq::bypass_singular() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveConveyorReq.bypass_singular)
  return _internal_bypass_singular();
}
inline void MoveConveyorReq::set_bypass_singular(bool value) {
  _internal_set_bypass_singular(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveConveyorReq.bypass_singular)
}
inline bool MoveConveyorReq::_internal_bypass_singular() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bypass_singular_;
}
inline void MoveConveyorReq::_internal_set_bypass_singular(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bypass_singular_ = value;
}

// float acc_ratio = 3;
inline void MoveConveyorReq::clear_acc_ratio() {
  _impl_.acc_ratio_ = 0;
}
inline float MoveConveyorReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveConveyorReq.acc_ratio)
  return _internal_acc_ratio();
}
inline void MoveConveyorReq::set_acc_ratio(float value) {
  _internal_set_acc_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveConveyorReq.acc_ratio)
}
inline float MoveConveyorReq::_internal_acc_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.acc_ratio_;
}
inline void MoveConveyorReq::_internal_set_acc_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.acc_ratio_ = value;
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 10;
inline bool MoveConveyorReq::has_post_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_condition_ != nullptr);
  return value;
}
inline void MoveConveyorReq::clear_post_condition() {
  if (_impl_.post_condition_ != nullptr) _impl_.post_condition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveConveyorReq::_internal_post_condition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::MotionCondition* p = _impl_.post_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition&>(::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveConveyorReq::post_condition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveConveyorReq.post_condition)
  return _internal_post_condition();
}
inline void MoveConveyorReq::unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.post_condition_);
  }
  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveConveyorReq.post_condition)
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveConveyorReq::release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::MotionCondition* released = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveConveyorReq::unsafe_arena_release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveConveyorReq.post_condition)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::MotionCondition* temp = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveConveyorReq::_internal_mutable_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaForAllocation());
    _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(p);
  }
  return _impl_.post_condition_;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveConveyorReq::mutable_post_condition() {
  ::Nrmk::IndyFramework::MotionCondition* _msg = _internal_mutable_post_condition();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveConveyorReq.post_condition)
  return _msg;
}
inline void MoveConveyorReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(_impl_.post_condition_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveConveyorReq.post_condition)
}

// -------------------------------------------------------------------

// WaitIOReq

// repeated .Nrmk.IndyFramework.DigitalSignal di_list = 1;
inline int WaitIOReq::_internal_di_list_size() const {
  return _internal_di_list().size();
}
inline int WaitIOReq::di_list_size() const {
  return _internal_di_list_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::mutable_di_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.di_list)
  return _internal_mutable_di_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitIOReq::mutable_di_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.di_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_di_list();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitIOReq::di_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.di_list)
    return _internal_di_list().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::add_di_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_di_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.di_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitIOReq::di_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.di_list)
  return _internal_di_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
WaitIOReq::_internal_di_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.di_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
WaitIOReq::_internal_mutable_di_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.di_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal do_list = 2;
inline int WaitIOReq::_internal_do_list_size() const {
  return _internal_do_list().size();
}
inline int WaitIOReq::do_list_size() const {
  return _internal_do_list_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::mutable_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.do_list)
  return _internal_mutable_do_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitIOReq::mutable_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.do_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_do_list();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitIOReq::do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.do_list)
    return _internal_do_list().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::add_do_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_do_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.do_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitIOReq::do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.do_list)
  return _internal_do_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
WaitIOReq::_internal_do_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.do_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
WaitIOReq::_internal_mutable_do_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.do_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal end_di_list = 3;
inline int WaitIOReq::_internal_end_di_list_size() const {
  return _internal_end_di_list().size();
}
inline int WaitIOReq::end_di_list_size() const {
  return _internal_end_di_list_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::mutable_end_di_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.end_di_list)
  return _internal_mutable_end_di_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitIOReq::mutable_end_di_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.end_di_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_end_di_list();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitIOReq::end_di_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.end_di_list)
    return _internal_end_di_list().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::add_end_di_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_end_di_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.end_di_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitIOReq::end_di_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.end_di_list)
  return _internal_end_di_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
WaitIOReq::_internal_end_di_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_di_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
WaitIOReq::_internal_mutable_end_di_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.end_di_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal end_do_list = 4;
inline int WaitIOReq::_internal_end_do_list_size() const {
  return _internal_end_do_list().size();
}
inline int WaitIOReq::end_do_list_size() const {
  return _internal_end_do_list_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::mutable_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.end_do_list)
  return _internal_mutable_end_do_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitIOReq::mutable_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.end_do_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_end_do_list();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitIOReq::end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.end_do_list)
    return _internal_end_do_list().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::add_end_do_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_end_do_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.end_do_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitIOReq::end_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.end_do_list)
  return _internal_end_do_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
WaitIOReq::_internal_end_do_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_do_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
WaitIOReq::_internal_mutable_end_do_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.end_do_list_;
}

// int32 conjunction = 5;
inline void WaitIOReq::clear_conjunction() {
  _impl_.conjunction_ = 0;
}
inline ::int32_t WaitIOReq::conjunction() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.conjunction)
  return _internal_conjunction();
}
inline void WaitIOReq::set_conjunction(::int32_t value) {
  _internal_set_conjunction(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.WaitIOReq.conjunction)
}
inline ::int32_t WaitIOReq::_internal_conjunction() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.conjunction_;
}
inline void WaitIOReq::_internal_set_conjunction(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.conjunction_ = value;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 6;
inline int WaitIOReq::_internal_set_do_list_size() const {
  return _internal_set_do_list().size();
}
inline int WaitIOReq::set_do_list_size() const {
  return _internal_set_do_list_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.set_do_list)
  return _internal_mutable_set_do_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitIOReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.set_do_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_do_list();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitIOReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.set_do_list)
    return _internal_set_do_list().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::add_set_do_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_set_do_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.set_do_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitIOReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.set_do_list)
  return _internal_set_do_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
WaitIOReq::_internal_set_do_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_do_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
WaitIOReq::_internal_mutable_set_do_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_do_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 7;
inline int WaitIOReq::_internal_set_end_do_list_size() const {
  return _internal_set_end_do_list().size();
}
inline int WaitIOReq::set_end_do_list_size() const {
  return _internal_set_end_do_list_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.set_end_do_list)
  return _internal_mutable_set_end_do_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitIOReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.set_end_do_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_end_do_list();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitIOReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.set_end_do_list)
    return _internal_set_end_do_list().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::add_set_end_do_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_set_end_do_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.set_end_do_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitIOReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.set_end_do_list)
  return _internal_set_end_do_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
WaitIOReq::_internal_set_end_do_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_end_do_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
WaitIOReq::_internal_mutable_set_end_do_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_end_do_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 8;
inline int WaitIOReq::_internal_set_ao_list_size() const {
  return _internal_set_ao_list().size();
}
inline int WaitIOReq::set_ao_list_size() const {
  return _internal_set_ao_list_size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitIOReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.set_ao_list)
  return _internal_mutable_set_ao_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitIOReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.set_ao_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_ao_list();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitIOReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.set_ao_list)
    return _internal_set_ao_list().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitIOReq::add_set_ao_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_set_ao_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.set_ao_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitIOReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.set_ao_list)
  return _internal_set_ao_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
WaitIOReq::_internal_set_ao_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_ao_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
WaitIOReq::_internal_mutable_set_ao_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_ao_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 9;
inline int WaitIOReq::_internal_set_end_ao_list_size() const {
  return _internal_set_end_ao_list().size();
}
inline int WaitIOReq::set_end_ao_list_size() const {
  return _internal_set_end_ao_list_size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitIOReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.set_end_ao_list)
  return _internal_mutable_set_end_ao_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitIOReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.set_end_ao_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_end_ao_list();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitIOReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.set_end_ao_list)
    return _internal_set_end_ao_list().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitIOReq::add_set_end_ao_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_set_end_ao_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.set_end_ao_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitIOReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.set_end_ao_list)
  return _internal_set_end_ao_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
WaitIOReq::_internal_set_end_ao_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_end_ao_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
WaitIOReq::_internal_mutable_set_end_ao_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_end_ao_list_;
}

// -------------------------------------------------------------------

// WaitTimeReq

// float time = 1;
inline void WaitTimeReq::clear_time() {
  _impl_.time_ = 0;
}
inline float WaitTimeReq::time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTimeReq.time)
  return _internal_time();
}
inline void WaitTimeReq::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.WaitTimeReq.time)
}
inline float WaitTimeReq::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void WaitTimeReq::_internal_set_time(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_ = value;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
inline int WaitTimeReq::_internal_set_do_list_size() const {
  return _internal_set_do_list().size();
}
inline int WaitTimeReq::set_do_list_size() const {
  return _internal_set_do_list_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTimeReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTimeReq.set_do_list)
  return _internal_mutable_set_do_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitTimeReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTimeReq.set_do_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_do_list();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitTimeReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTimeReq.set_do_list)
    return _internal_set_do_list().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTimeReq::add_set_do_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_set_do_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTimeReq.set_do_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitTimeReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTimeReq.set_do_list)
  return _internal_set_do_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
WaitTimeReq::_internal_set_do_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_do_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
WaitTimeReq::_internal_mutable_set_do_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_do_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
inline int WaitTimeReq::_internal_set_end_do_list_size() const {
  return _internal_set_end_do_list().size();
}
inline int WaitTimeReq::set_end_do_list_size() const {
  return _internal_set_end_do_list_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTimeReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTimeReq.set_end_do_list)
  return _internal_mutable_set_end_do_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitTimeReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTimeReq.set_end_do_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_end_do_list();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitTimeReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTimeReq.set_end_do_list)
    return _internal_set_end_do_list().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTimeReq::add_set_end_do_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_set_end_do_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTimeReq.set_end_do_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitTimeReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTimeReq.set_end_do_list)
  return _internal_set_end_do_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
WaitTimeReq::_internal_set_end_do_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_end_do_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
WaitTimeReq::_internal_mutable_set_end_do_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_end_do_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
inline int WaitTimeReq::_internal_set_ao_list_size() const {
  return _internal_set_ao_list().size();
}
inline int WaitTimeReq::set_ao_list_size() const {
  return _internal_set_ao_list_size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTimeReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTimeReq.set_ao_list)
  return _internal_mutable_set_ao_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitTimeReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTimeReq.set_ao_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_ao_list();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitTimeReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTimeReq.set_ao_list)
    return _internal_set_ao_list().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTimeReq::add_set_ao_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_set_ao_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTimeReq.set_ao_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitTimeReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTimeReq.set_ao_list)
  return _internal_set_ao_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
WaitTimeReq::_internal_set_ao_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_ao_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
WaitTimeReq::_internal_mutable_set_ao_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_ao_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
inline int WaitTimeReq::_internal_set_end_ao_list_size() const {
  return _internal_set_end_ao_list().size();
}
inline int WaitTimeReq::set_end_ao_list_size() const {
  return _internal_set_end_ao_list_size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTimeReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTimeReq.set_end_ao_list)
  return _internal_mutable_set_end_ao_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitTimeReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTimeReq.set_end_ao_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_end_ao_list();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitTimeReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTimeReq.set_end_ao_list)
    return _internal_set_end_ao_list().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTimeReq::add_set_end_ao_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_set_end_ao_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTimeReq.set_end_ao_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitTimeReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTimeReq.set_end_ao_list)
  return _internal_set_end_ao_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
WaitTimeReq::_internal_set_end_ao_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_end_ao_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
WaitTimeReq::_internal_mutable_set_end_ao_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_end_ao_list_;
}

// -------------------------------------------------------------------

// WaitProgressReq

// int32 progress = 1;
inline void WaitProgressReq::clear_progress() {
  _impl_.progress_ = 0;
}
inline ::int32_t WaitProgressReq::progress() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitProgressReq.progress)
  return _internal_progress();
}
inline void WaitProgressReq::set_progress(::int32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.WaitProgressReq.progress)
}
inline ::int32_t WaitProgressReq::_internal_progress() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.progress_;
}
inline void WaitProgressReq::_internal_set_progress(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.progress_ = value;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
inline int WaitProgressReq::_internal_set_do_list_size() const {
  return _internal_set_do_list().size();
}
inline int WaitProgressReq::set_do_list_size() const {
  return _internal_set_do_list_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitProgressReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitProgressReq.set_do_list)
  return _internal_mutable_set_do_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitProgressReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitProgressReq.set_do_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_do_list();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitProgressReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitProgressReq.set_do_list)
    return _internal_set_do_list().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitProgressReq::add_set_do_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_set_do_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitProgressReq.set_do_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitProgressReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitProgressReq.set_do_list)
  return _internal_set_do_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
WaitProgressReq::_internal_set_do_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_do_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
WaitProgressReq::_internal_mutable_set_do_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_do_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
inline int WaitProgressReq::_internal_set_end_do_list_size() const {
  return _internal_set_end_do_list().size();
}
inline int WaitProgressReq::set_end_do_list_size() const {
  return _internal_set_end_do_list_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitProgressReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitProgressReq.set_end_do_list)
  return _internal_mutable_set_end_do_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitProgressReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitProgressReq.set_end_do_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_end_do_list();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitProgressReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitProgressReq.set_end_do_list)
    return _internal_set_end_do_list().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitProgressReq::add_set_end_do_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_set_end_do_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitProgressReq.set_end_do_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitProgressReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitProgressReq.set_end_do_list)
  return _internal_set_end_do_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
WaitProgressReq::_internal_set_end_do_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_end_do_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
WaitProgressReq::_internal_mutable_set_end_do_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_end_do_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
inline int WaitProgressReq::_internal_set_ao_list_size() const {
  return _internal_set_ao_list().size();
}
inline int WaitProgressReq::set_ao_list_size() const {
  return _internal_set_ao_list_size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitProgressReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitProgressReq.set_ao_list)
  return _internal_mutable_set_ao_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitProgressReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitProgressReq.set_ao_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_ao_list();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitProgressReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitProgressReq.set_ao_list)
    return _internal_set_ao_list().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitProgressReq::add_set_ao_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_set_ao_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitProgressReq.set_ao_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitProgressReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitProgressReq.set_ao_list)
  return _internal_set_ao_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
WaitProgressReq::_internal_set_ao_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_ao_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
WaitProgressReq::_internal_mutable_set_ao_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_ao_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
inline int WaitProgressReq::_internal_set_end_ao_list_size() const {
  return _internal_set_end_ao_list().size();
}
inline int WaitProgressReq::set_end_ao_list_size() const {
  return _internal_set_end_ao_list_size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitProgressReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitProgressReq.set_end_ao_list)
  return _internal_mutable_set_end_ao_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitProgressReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitProgressReq.set_end_ao_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_end_ao_list();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitProgressReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitProgressReq.set_end_ao_list)
    return _internal_set_end_ao_list().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitProgressReq::add_set_end_ao_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_set_end_ao_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitProgressReq.set_end_ao_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitProgressReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitProgressReq.set_end_ao_list)
  return _internal_set_end_ao_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
WaitProgressReq::_internal_set_end_ao_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_end_ao_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
WaitProgressReq::_internal_mutable_set_end_ao_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_end_ao_list_;
}

// -------------------------------------------------------------------

// WaitTrajReq

// .Nrmk.IndyFramework.TrajCondition traj_condition = 1;
inline void WaitTrajReq::clear_traj_condition() {
  _impl_.traj_condition_ = 0;
}
inline ::Nrmk::IndyFramework::TrajCondition WaitTrajReq::traj_condition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTrajReq.traj_condition)
  return _internal_traj_condition();
}
inline void WaitTrajReq::set_traj_condition(::Nrmk::IndyFramework::TrajCondition value) {
  _internal_set_traj_condition(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.WaitTrajReq.traj_condition)
}
inline ::Nrmk::IndyFramework::TrajCondition WaitTrajReq::_internal_traj_condition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::TrajCondition>(_impl_.traj_condition_);
}
inline void WaitTrajReq::_internal_set_traj_condition(::Nrmk::IndyFramework::TrajCondition value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.traj_condition_ = value;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
inline int WaitTrajReq::_internal_set_do_list_size() const {
  return _internal_set_do_list().size();
}
inline int WaitTrajReq::set_do_list_size() const {
  return _internal_set_do_list_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTrajReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTrajReq.set_do_list)
  return _internal_mutable_set_do_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitTrajReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTrajReq.set_do_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_do_list();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitTrajReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTrajReq.set_do_list)
    return _internal_set_do_list().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTrajReq::add_set_do_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_set_do_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTrajReq.set_do_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitTrajReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTrajReq.set_do_list)
  return _internal_set_do_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
WaitTrajReq::_internal_set_do_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_do_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
WaitTrajReq::_internal_mutable_set_do_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_do_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
inline int WaitTrajReq::_internal_set_end_do_list_size() const {
  return _internal_set_end_do_list().size();
}
inline int WaitTrajReq::set_end_do_list_size() const {
  return _internal_set_end_do_list_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTrajReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTrajReq.set_end_do_list)
  return _internal_mutable_set_end_do_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitTrajReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTrajReq.set_end_do_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_end_do_list();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitTrajReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTrajReq.set_end_do_list)
    return _internal_set_end_do_list().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTrajReq::add_set_end_do_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_set_end_do_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTrajReq.set_end_do_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitTrajReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTrajReq.set_end_do_list)
  return _internal_set_end_do_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
WaitTrajReq::_internal_set_end_do_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_end_do_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
WaitTrajReq::_internal_mutable_set_end_do_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_end_do_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
inline int WaitTrajReq::_internal_set_ao_list_size() const {
  return _internal_set_ao_list().size();
}
inline int WaitTrajReq::set_ao_list_size() const {
  return _internal_set_ao_list_size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTrajReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTrajReq.set_ao_list)
  return _internal_mutable_set_ao_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitTrajReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTrajReq.set_ao_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_ao_list();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitTrajReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTrajReq.set_ao_list)
    return _internal_set_ao_list().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTrajReq::add_set_ao_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_set_ao_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTrajReq.set_ao_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitTrajReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTrajReq.set_ao_list)
  return _internal_set_ao_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
WaitTrajReq::_internal_set_ao_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_ao_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
WaitTrajReq::_internal_mutable_set_ao_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_ao_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
inline int WaitTrajReq::_internal_set_end_ao_list_size() const {
  return _internal_set_end_ao_list().size();
}
inline int WaitTrajReq::set_end_ao_list_size() const {
  return _internal_set_end_ao_list_size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTrajReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTrajReq.set_end_ao_list)
  return _internal_mutable_set_end_ao_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitTrajReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTrajReq.set_end_ao_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_end_ao_list();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitTrajReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTrajReq.set_end_ao_list)
    return _internal_set_end_ao_list().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTrajReq::add_set_end_ao_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_set_end_ao_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTrajReq.set_end_ao_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitTrajReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTrajReq.set_end_ao_list)
  return _internal_set_end_ao_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
WaitTrajReq::_internal_set_end_ao_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_end_ao_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
WaitTrajReq::_internal_mutable_set_end_ao_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_end_ao_list_;
}

// -------------------------------------------------------------------

// WaitRadiusReq

// int32 radius = 1;
inline void WaitRadiusReq::clear_radius() {
  _impl_.radius_ = 0;
}
inline ::int32_t WaitRadiusReq::radius() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitRadiusReq.radius)
  return _internal_radius();
}
inline void WaitRadiusReq::set_radius(::int32_t value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.WaitRadiusReq.radius)
}
inline ::int32_t WaitRadiusReq::_internal_radius() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.radius_;
}
inline void WaitRadiusReq::_internal_set_radius(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.radius_ = value;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
inline int WaitRadiusReq::_internal_set_do_list_size() const {
  return _internal_set_do_list().size();
}
inline int WaitRadiusReq::set_do_list_size() const {
  return _internal_set_do_list_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitRadiusReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitRadiusReq.set_do_list)
  return _internal_mutable_set_do_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitRadiusReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitRadiusReq.set_do_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_do_list();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitRadiusReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitRadiusReq.set_do_list)
    return _internal_set_do_list().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitRadiusReq::add_set_do_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_set_do_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitRadiusReq.set_do_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitRadiusReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitRadiusReq.set_do_list)
  return _internal_set_do_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
WaitRadiusReq::_internal_set_do_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_do_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
WaitRadiusReq::_internal_mutable_set_do_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_do_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
inline int WaitRadiusReq::_internal_set_end_do_list_size() const {
  return _internal_set_end_do_list().size();
}
inline int WaitRadiusReq::set_end_do_list_size() const {
  return _internal_set_end_do_list_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitRadiusReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitRadiusReq.set_end_do_list)
  return _internal_mutable_set_end_do_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitRadiusReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitRadiusReq.set_end_do_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_end_do_list();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitRadiusReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitRadiusReq.set_end_do_list)
    return _internal_set_end_do_list().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitRadiusReq::add_set_end_do_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_set_end_do_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitRadiusReq.set_end_do_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitRadiusReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitRadiusReq.set_end_do_list)
  return _internal_set_end_do_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
WaitRadiusReq::_internal_set_end_do_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_end_do_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
WaitRadiusReq::_internal_mutable_set_end_do_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_end_do_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
inline int WaitRadiusReq::_internal_set_ao_list_size() const {
  return _internal_set_ao_list().size();
}
inline int WaitRadiusReq::set_ao_list_size() const {
  return _internal_set_ao_list_size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitRadiusReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitRadiusReq.set_ao_list)
  return _internal_mutable_set_ao_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitRadiusReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitRadiusReq.set_ao_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_ao_list();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitRadiusReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitRadiusReq.set_ao_list)
    return _internal_set_ao_list().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitRadiusReq::add_set_ao_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_set_ao_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitRadiusReq.set_ao_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitRadiusReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitRadiusReq.set_ao_list)
  return _internal_set_ao_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
WaitRadiusReq::_internal_set_ao_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_ao_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
WaitRadiusReq::_internal_mutable_set_ao_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_ao_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
inline int WaitRadiusReq::_internal_set_end_ao_list_size() const {
  return _internal_set_end_ao_list().size();
}
inline int WaitRadiusReq::set_end_ao_list_size() const {
  return _internal_set_end_ao_list_size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitRadiusReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitRadiusReq.set_end_ao_list)
  return _internal_mutable_set_end_ao_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitRadiusReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitRadiusReq.set_end_ao_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_set_end_ao_list();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitRadiusReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitRadiusReq.set_end_ao_list)
    return _internal_set_end_ao_list().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitRadiusReq::add_set_end_ao_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_set_end_ao_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitRadiusReq.set_end_ao_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitRadiusReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitRadiusReq.set_end_ao_list)
  return _internal_set_end_ao_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
WaitRadiusReq::_internal_set_end_ao_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.set_end_ao_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
WaitRadiusReq::_internal_mutable_set_end_ao_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.set_end_ao_list_;
}

// -------------------------------------------------------------------

// Program

// string prog_name = 1;
inline void Program::clear_prog_name() {
  _impl_.prog_name_.ClearToEmpty();
}
inline const std::string& Program::prog_name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Program.prog_name)
  return _internal_prog_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Program::set_prog_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prog_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Program.prog_name)
}
inline std::string* Program::mutable_prog_name() {
  std::string* _s = _internal_mutable_prog_name();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Program.prog_name)
  return _s;
}
inline const std::string& Program::_internal_prog_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prog_name_.Get();
}
inline void Program::_internal_set_prog_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prog_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Program::_internal_mutable_prog_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.prog_name_.Mutable( GetArenaForAllocation());
}
inline std::string* Program::release_prog_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Program.prog_name)
  return _impl_.prog_name_.Release();
}
inline void Program::set_allocated_prog_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prog_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prog_name_.IsDefault()) {
          _impl_.prog_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Program.prog_name)
}

// int32 prog_idx = 2;
inline void Program::clear_prog_idx() {
  _impl_.prog_idx_ = 0;
}
inline ::int32_t Program::prog_idx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Program.prog_idx)
  return _internal_prog_idx();
}
inline void Program::set_prog_idx(::int32_t value) {
  _internal_set_prog_idx(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Program.prog_idx)
}
inline ::int32_t Program::_internal_prog_idx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prog_idx_;
}
inline void Program::_internal_set_prog_idx(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prog_idx_ = value;
}

// -------------------------------------------------------------------

// TuningProgram

// .Nrmk.IndyFramework.Program program = 1;
inline bool TuningProgram::has_program() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.program_ != nullptr);
  return value;
}
inline void TuningProgram::clear_program() {
  if (_impl_.program_ != nullptr) _impl_.program_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Nrmk::IndyFramework::Program& TuningProgram::_internal_program() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Program* p = _impl_.program_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Program&>(::Nrmk::IndyFramework::_Program_default_instance_);
}
inline const ::Nrmk::IndyFramework::Program& TuningProgram::program() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TuningProgram.program)
  return _internal_program();
}
inline void TuningProgram::unsafe_arena_set_allocated_program(::Nrmk::IndyFramework::Program* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.program_);
  }
  _impl_.program_ = reinterpret_cast<::Nrmk::IndyFramework::Program*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.TuningProgram.program)
}
inline ::Nrmk::IndyFramework::Program* TuningProgram::release_program() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Program* released = _impl_.program_;
  _impl_.program_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Program* TuningProgram::unsafe_arena_release_program() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TuningProgram.program)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Program* temp = _impl_.program_;
  _impl_.program_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Program* TuningProgram::_internal_mutable_program() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.program_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Program>(GetArenaForAllocation());
    _impl_.program_ = reinterpret_cast<::Nrmk::IndyFramework::Program*>(p);
  }
  return _impl_.program_;
}
inline ::Nrmk::IndyFramework::Program* TuningProgram::mutable_program() {
  ::Nrmk::IndyFramework::Program* _msg = _internal_mutable_program();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TuningProgram.program)
  return _msg;
}
inline void TuningProgram::set_allocated_program(::Nrmk::IndyFramework::Program* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::Program*>(_impl_.program_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::Program*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.program_ = reinterpret_cast<::Nrmk::IndyFramework::Program*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TuningProgram.program)
}

// .Nrmk.IndyFramework.TuningSpace tuning_space = 2;
inline void TuningProgram::clear_tuning_space() {
  _impl_.tuning_space_ = 0;
}
inline ::Nrmk::IndyFramework::TuningSpace TuningProgram::tuning_space() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TuningProgram.tuning_space)
  return _internal_tuning_space();
}
inline void TuningProgram::set_tuning_space(::Nrmk::IndyFramework::TuningSpace value) {
  _internal_set_tuning_space(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TuningProgram.tuning_space)
}
inline ::Nrmk::IndyFramework::TuningSpace TuningProgram::_internal_tuning_space() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::TuningSpace>(_impl_.tuning_space_);
}
inline void TuningProgram::_internal_set_tuning_space(::Nrmk::IndyFramework::TuningSpace value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tuning_space_ = value;
}

// .Nrmk.IndyFramework.TuningPrecision precision = 3;
inline void TuningProgram::clear_precision() {
  _impl_.precision_ = 0;
}
inline ::Nrmk::IndyFramework::TuningPrecision TuningProgram::precision() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TuningProgram.precision)
  return _internal_precision();
}
inline void TuningProgram::set_precision(::Nrmk::IndyFramework::TuningPrecision value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TuningProgram.precision)
}
inline ::Nrmk::IndyFramework::TuningPrecision TuningProgram::_internal_precision() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::TuningPrecision>(_impl_.precision_);
}
inline void TuningProgram::_internal_set_precision(::Nrmk::IndyFramework::TuningPrecision value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.precision_ = value;
}

// uint32 vel_level_max = 4;
inline void TuningProgram::clear_vel_level_max() {
  _impl_.vel_level_max_ = 0u;
}
inline ::uint32_t TuningProgram::vel_level_max() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TuningProgram.vel_level_max)
  return _internal_vel_level_max();
}
inline void TuningProgram::set_vel_level_max(::uint32_t value) {
  _internal_set_vel_level_max(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TuningProgram.vel_level_max)
}
inline ::uint32_t TuningProgram::_internal_vel_level_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vel_level_max_;
}
inline void TuningProgram::_internal_set_vel_level_max(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vel_level_max_ = value;
}

// -------------------------------------------------------------------

// ProgramInfo

// string path = 1;
inline void ProgramInfo::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& ProgramInfo::path() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramInfo.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProgramInfo::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramInfo.path)
}
inline std::string* ProgramInfo::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ProgramInfo.path)
  return _s;
}
inline const std::string& ProgramInfo::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void ProgramInfo::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* ProgramInfo::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* ProgramInfo::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ProgramInfo.path)
  return _impl_.path_.Release();
}
inline void ProgramInfo::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ProgramInfo.path)
}

// uint64 size = 2;
inline void ProgramInfo::clear_size() {
  _impl_.size_ = ::uint64_t{0u};
}
inline ::uint64_t ProgramInfo::size() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramInfo.size)
  return _internal_size();
}
inline void ProgramInfo::set_size(::uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramInfo.size)
}
inline ::uint64_t ProgramInfo::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.size_;
}
inline void ProgramInfo::_internal_set_size(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.size_ = value;
}

// string timestamp = 3;
inline void ProgramInfo::clear_timestamp() {
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& ProgramInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramInfo.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProgramInfo::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramInfo.timestamp)
}
inline std::string* ProgramInfo::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ProgramInfo.timestamp)
  return _s;
}
inline const std::string& ProgramInfo::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_.Get();
}
inline void ProgramInfo::_internal_set_timestamp(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_.Set(value, GetArenaForAllocation());
}
inline std::string* ProgramInfo::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.timestamp_.Mutable( GetArenaForAllocation());
}
inline std::string* ProgramInfo::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ProgramInfo.timestamp)
  return _impl_.timestamp_.Release();
}
inline void ProgramInfo::set_allocated_timestamp(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timestamp_.IsDefault()) {
          _impl_.timestamp_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ProgramInfo.timestamp)
}

// -------------------------------------------------------------------

// Variable

// string name = 1;
inline void Variable::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Variable::name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Variable.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Variable::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Variable.name)
}
inline std::string* Variable::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Variable.name)
  return _s;
}
inline const std::string& Variable::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Variable::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Variable::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Variable::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Variable.name)
  return _impl_.name_.Release();
}
inline void Variable::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Variable.name)
}

// int32 addr = 2;
inline void Variable::clear_addr() {
  _impl_.addr_ = 0;
}
inline ::int32_t Variable::addr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Variable.addr)
  return _internal_addr();
}
inline void Variable::set_addr(::int32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Variable.addr)
}
inline ::int32_t Variable::_internal_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.addr_;
}
inline void Variable::_internal_set_addr(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.addr_ = value;
}

// string type = 3;
inline void Variable::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Variable::type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Variable.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Variable::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Variable.type)
}
inline std::string* Variable::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Variable.type)
  return _s;
}
inline const std::string& Variable::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void Variable::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Variable::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArenaForAllocation());
}
inline std::string* Variable::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Variable.type)
  return _impl_.type_.Release();
}
inline void Variable::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Variable.type)
}

// bool in_watching = 4;
inline void Variable::clear_in_watching() {
  _impl_.in_watching_ = false;
}
inline bool Variable::in_watching() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Variable.in_watching)
  return _internal_in_watching();
}
inline void Variable::set_in_watching(bool value) {
  _internal_set_in_watching(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Variable.in_watching)
}
inline bool Variable::_internal_in_watching() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.in_watching_;
}
inline void Variable::_internal_set_in_watching(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.in_watching_ = value;
}

// -------------------------------------------------------------------

// IntVariable

// int32 addr = 1;
inline void IntVariable::clear_addr() {
  _impl_.addr_ = 0;
}
inline ::int32_t IntVariable::addr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IntVariable.addr)
  return _internal_addr();
}
inline void IntVariable::set_addr(::int32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IntVariable.addr)
}
inline ::int32_t IntVariable::_internal_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.addr_;
}
inline void IntVariable::_internal_set_addr(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.addr_ = value;
}

// int64 value = 2;
inline void IntVariable::clear_value() {
  _impl_.value_ = ::int64_t{0};
}
inline ::int64_t IntVariable::value() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IntVariable.value)
  return _internal_value();
}
inline void IntVariable::set_value(::int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IntVariable.value)
}
inline ::int64_t IntVariable::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void IntVariable::_internal_set_value(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// ModbusVariable

// string name = 1;
inline void ModbusVariable::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ModbusVariable::name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusVariable.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModbusVariable::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ModbusVariable.name)
}
inline std::string* ModbusVariable::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ModbusVariable.name)
  return _s;
}
inline const std::string& ModbusVariable::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ModbusVariable::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModbusVariable::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ModbusVariable::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ModbusVariable.name)
  return _impl_.name_.Release();
}
inline void ModbusVariable::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ModbusVariable.name)
}

// int32 addr = 2;
inline void ModbusVariable::clear_addr() {
  _impl_.addr_ = 0;
}
inline ::int32_t ModbusVariable::addr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusVariable.addr)
  return _internal_addr();
}
inline void ModbusVariable::set_addr(::int32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ModbusVariable.addr)
}
inline ::int32_t ModbusVariable::_internal_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.addr_;
}
inline void ModbusVariable::_internal_set_addr(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.addr_ = value;
}

// int32 value = 3;
inline void ModbusVariable::clear_value() {
  _impl_.value_ = 0;
}
inline ::int32_t ModbusVariable::value() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusVariable.value)
  return _internal_value();
}
inline void ModbusVariable::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ModbusVariable.value)
}
inline ::int32_t ModbusVariable::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void ModbusVariable::_internal_set_value(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// .Nrmk.IndyFramework.ModbusVariable.SignalType signal_type = 4;
inline void ModbusVariable::clear_signal_type() {
  _impl_.signal_type_ = 0;
}
inline ::Nrmk::IndyFramework::ModbusVariable_SignalType ModbusVariable::signal_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusVariable.signal_type)
  return _internal_signal_type();
}
inline void ModbusVariable::set_signal_type(::Nrmk::IndyFramework::ModbusVariable_SignalType value) {
  _internal_set_signal_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ModbusVariable.signal_type)
}
inline ::Nrmk::IndyFramework::ModbusVariable_SignalType ModbusVariable::_internal_signal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::ModbusVariable_SignalType>(_impl_.signal_type_);
}
inline void ModbusVariable::_internal_set_signal_type(::Nrmk::IndyFramework::ModbusVariable_SignalType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.signal_type_ = value;
}

// -------------------------------------------------------------------

// BoolVariable

// int32 addr = 1;
inline void BoolVariable::clear_addr() {
  _impl_.addr_ = 0;
}
inline ::int32_t BoolVariable::addr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BoolVariable.addr)
  return _internal_addr();
}
inline void BoolVariable::set_addr(::int32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BoolVariable.addr)
}
inline ::int32_t BoolVariable::_internal_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.addr_;
}
inline void BoolVariable::_internal_set_addr(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.addr_ = value;
}

// bool value = 2;
inline void BoolVariable::clear_value() {
  _impl_.value_ = false;
}
inline bool BoolVariable::value() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BoolVariable.value)
  return _internal_value();
}
inline void BoolVariable::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BoolVariable.value)
}
inline bool BoolVariable::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void BoolVariable::_internal_set_value(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// FloatVariable

// int32 addr = 1;
inline void FloatVariable::clear_addr() {
  _impl_.addr_ = 0;
}
inline ::int32_t FloatVariable::addr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FloatVariable.addr)
  return _internal_addr();
}
inline void FloatVariable::set_addr(::int32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FloatVariable.addr)
}
inline ::int32_t FloatVariable::_internal_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.addr_;
}
inline void FloatVariable::_internal_set_addr(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.addr_ = value;
}

// float value = 2;
inline void FloatVariable::clear_value() {
  _impl_.value_ = 0;
}
inline float FloatVariable::value() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FloatVariable.value)
  return _internal_value();
}
inline void FloatVariable::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FloatVariable.value)
}
inline float FloatVariable::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void FloatVariable::_internal_set_value(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// JPosVariable

// int32 addr = 1;
inline void JPosVariable::clear_addr() {
  _impl_.addr_ = 0;
}
inline ::int32_t JPosVariable::addr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.JPosVariable.addr)
  return _internal_addr();
}
inline void JPosVariable::set_addr(::int32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.JPosVariable.addr)
}
inline ::int32_t JPosVariable::_internal_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.addr_;
}
inline void JPosVariable::_internal_set_addr(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.addr_ = value;
}

// repeated float jpos = 2;
inline int JPosVariable::_internal_jpos_size() const {
  return _internal_jpos().size();
}
inline int JPosVariable::jpos_size() const {
  return _internal_jpos_size();
}
inline void JPosVariable::clear_jpos() {
  _internal_mutable_jpos()->Clear();
}
inline float JPosVariable::jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.JPosVariable.jpos)
  return _internal_jpos().Get(index);
}
inline void JPosVariable::set_jpos(int index, float value) {
  _internal_mutable_jpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.JPosVariable.jpos)
}
inline void JPosVariable::add_jpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_jpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.JPosVariable.jpos)
}
inline const ::google::protobuf::RepeatedField<float>& JPosVariable::jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.JPosVariable.jpos)
  return _internal_jpos();
}
inline ::google::protobuf::RepeatedField<float>* JPosVariable::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.JPosVariable.jpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_jpos();
}

inline const ::google::protobuf::RepeatedField<float>& JPosVariable::_internal_jpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jpos_;
}
inline ::google::protobuf::RepeatedField<float>* JPosVariable::_internal_mutable_jpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.jpos_;
}

// -------------------------------------------------------------------

// TPosVariable

// int32 addr = 1;
inline void TPosVariable::clear_addr() {
  _impl_.addr_ = 0;
}
inline ::int32_t TPosVariable::addr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TPosVariable.addr)
  return _internal_addr();
}
inline void TPosVariable::set_addr(::int32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TPosVariable.addr)
}
inline ::int32_t TPosVariable::_internal_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.addr_;
}
inline void TPosVariable::_internal_set_addr(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.addr_ = value;
}

// repeated float tpos = 2;
inline int TPosVariable::_internal_tpos_size() const {
  return _internal_tpos().size();
}
inline int TPosVariable::tpos_size() const {
  return _internal_tpos_size();
}
inline void TPosVariable::clear_tpos() {
  _internal_mutable_tpos()->Clear();
}
inline float TPosVariable::tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TPosVariable.tpos)
  return _internal_tpos().Get(index);
}
inline void TPosVariable::set_tpos(int index, float value) {
  _internal_mutable_tpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TPosVariable.tpos)
}
inline void TPosVariable::add_tpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TPosVariable.tpos)
}
inline const ::google::protobuf::RepeatedField<float>& TPosVariable::tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TPosVariable.tpos)
  return _internal_tpos();
}
inline ::google::protobuf::RepeatedField<float>* TPosVariable::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TPosVariable.tpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tpos();
}

inline const ::google::protobuf::RepeatedField<float>& TPosVariable::_internal_tpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tpos_;
}
inline ::google::protobuf::RepeatedField<float>* TPosVariable::_internal_mutable_tpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tpos_;
}

// -------------------------------------------------------------------

// ModbusServer

// string server_name = 1;
inline void ModbusServer::clear_server_name() {
  _impl_.server_name_.ClearToEmpty();
}
inline const std::string& ModbusServer::server_name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusServer.server_name)
  return _internal_server_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModbusServer::set_server_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.server_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ModbusServer.server_name)
}
inline std::string* ModbusServer::mutable_server_name() {
  std::string* _s = _internal_mutable_server_name();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ModbusServer.server_name)
  return _s;
}
inline const std::string& ModbusServer::_internal_server_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.server_name_.Get();
}
inline void ModbusServer::_internal_set_server_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.server_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModbusServer::_internal_mutable_server_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.server_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ModbusServer::release_server_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ModbusServer.server_name)
  return _impl_.server_name_.Release();
}
inline void ModbusServer::set_allocated_server_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.server_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.server_name_.IsDefault()) {
          _impl_.server_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ModbusServer.server_name)
}

// string ip = 2;
inline void ModbusServer::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& ModbusServer::ip() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusServer.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModbusServer::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ModbusServer.ip)
}
inline std::string* ModbusServer::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ModbusServer.ip)
  return _s;
}
inline const std::string& ModbusServer::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void ModbusServer::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ModbusServer::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ip_.Mutable( GetArenaForAllocation());
}
inline std::string* ModbusServer::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ModbusServer.ip)
  return _impl_.ip_.Release();
}
inline void ModbusServer::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ModbusServer.ip)
}

// int32 port = 3;
inline void ModbusServer::clear_port() {
  _impl_.port_ = 0;
}
inline ::int32_t ModbusServer::port() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusServer.port)
  return _internal_port();
}
inline void ModbusServer::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ModbusServer.port)
}
inline ::int32_t ModbusServer::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void ModbusServer::_internal_set_port(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// repeated .Nrmk.IndyFramework.ModbusVariable variable_list = 4;
inline int ModbusServer::_internal_variable_list_size() const {
  return _internal_variable_list().size();
}
inline int ModbusServer::variable_list_size() const {
  return _internal_variable_list_size();
}
inline void ModbusServer::clear_variable_list() {
  _internal_mutable_variable_list()->Clear();
}
inline ::Nrmk::IndyFramework::ModbusVariable* ModbusServer::mutable_variable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ModbusServer.variable_list)
  return _internal_mutable_variable_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >*
ModbusServer::mutable_variable_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ModbusServer.variable_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_variable_list();
}
inline const ::Nrmk::IndyFramework::ModbusVariable& ModbusServer::variable_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusServer.variable_list)
    return _internal_variable_list().Get(index);
}
inline ::Nrmk::IndyFramework::ModbusVariable* ModbusServer::add_variable_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::ModbusVariable* _add = _internal_mutable_variable_list()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ModbusServer.variable_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >&
ModbusServer::variable_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ModbusServer.variable_list)
  return _internal_variable_list();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusVariable>&
ModbusServer::_internal_variable_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variable_list_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusVariable>*
ModbusServer::_internal_mutable_variable_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.variable_list_;
}

// -------------------------------------------------------------------

// ModbusVariableList

// repeated .Nrmk.IndyFramework.ModbusServer modbus_variables = 1;
inline int ModbusVariableList::_internal_modbus_variables_size() const {
  return _internal_modbus_variables().size();
}
inline int ModbusVariableList::modbus_variables_size() const {
  return _internal_modbus_variables_size();
}
inline void ModbusVariableList::clear_modbus_variables() {
  _internal_mutable_modbus_variables()->Clear();
}
inline ::Nrmk::IndyFramework::ModbusServer* ModbusVariableList::mutable_modbus_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ModbusVariableList.modbus_variables)
  return _internal_mutable_modbus_variables()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusServer >*
ModbusVariableList::mutable_modbus_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ModbusVariableList.modbus_variables)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_modbus_variables();
}
inline const ::Nrmk::IndyFramework::ModbusServer& ModbusVariableList::modbus_variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusVariableList.modbus_variables)
    return _internal_modbus_variables().Get(index);
}
inline ::Nrmk::IndyFramework::ModbusServer* ModbusVariableList::add_modbus_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::ModbusServer* _add = _internal_mutable_modbus_variables()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ModbusVariableList.modbus_variables)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusServer >&
ModbusVariableList::modbus_variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ModbusVariableList.modbus_variables)
  return _internal_modbus_variables();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusServer>&
ModbusVariableList::_internal_modbus_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.modbus_variables_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusServer>*
ModbusVariableList::_internal_mutable_modbus_variables() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.modbus_variables_;
}

// -------------------------------------------------------------------

// AllVars

// repeated .Nrmk.IndyFramework.Variable variables = 1;
inline int AllVars::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int AllVars::variables_size() const {
  return _internal_variables_size();
}
inline void AllVars::clear_variables() {
  _internal_mutable_variables()->Clear();
}
inline ::Nrmk::IndyFramework::Variable* AllVars::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.AllVars.variables)
  return _internal_mutable_variables()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Variable >*
AllVars::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.AllVars.variables)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_variables();
}
inline const ::Nrmk::IndyFramework::Variable& AllVars::variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.AllVars.variables)
    return _internal_variables().Get(index);
}
inline ::Nrmk::IndyFramework::Variable* AllVars::add_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::Variable* _add = _internal_mutable_variables()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.AllVars.variables)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Variable >&
AllVars::variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.AllVars.variables)
  return _internal_variables();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Variable>&
AllVars::_internal_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variables_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Variable>*
AllVars::_internal_mutable_variables() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.variables_;
}

// -------------------------------------------------------------------

// IntVars

// repeated .Nrmk.IndyFramework.IntVariable variables = 1;
inline int IntVars::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int IntVars::variables_size() const {
  return _internal_variables_size();
}
inline void IntVars::clear_variables() {
  _internal_mutable_variables()->Clear();
}
inline ::Nrmk::IndyFramework::IntVariable* IntVars::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IntVars.variables)
  return _internal_mutable_variables()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >*
IntVars::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IntVars.variables)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_variables();
}
inline const ::Nrmk::IndyFramework::IntVariable& IntVars::variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IntVars.variables)
    return _internal_variables().Get(index);
}
inline ::Nrmk::IndyFramework::IntVariable* IntVars::add_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::IntVariable* _add = _internal_mutable_variables()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IntVars.variables)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >&
IntVars::variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IntVars.variables)
  return _internal_variables();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::IntVariable>&
IntVars::_internal_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variables_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::IntVariable>*
IntVars::_internal_mutable_variables() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.variables_;
}

// -------------------------------------------------------------------

// ModbusVars

// repeated .Nrmk.IndyFramework.ModbusVariable variables = 1;
inline int ModbusVars::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int ModbusVars::variables_size() const {
  return _internal_variables_size();
}
inline void ModbusVars::clear_variables() {
  _internal_mutable_variables()->Clear();
}
inline ::Nrmk::IndyFramework::ModbusVariable* ModbusVars::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ModbusVars.variables)
  return _internal_mutable_variables()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >*
ModbusVars::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ModbusVars.variables)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_variables();
}
inline const ::Nrmk::IndyFramework::ModbusVariable& ModbusVars::variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusVars.variables)
    return _internal_variables().Get(index);
}
inline ::Nrmk::IndyFramework::ModbusVariable* ModbusVars::add_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::ModbusVariable* _add = _internal_mutable_variables()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ModbusVars.variables)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >&
ModbusVars::variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ModbusVars.variables)
  return _internal_variables();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusVariable>&
ModbusVars::_internal_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variables_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ModbusVariable>*
ModbusVars::_internal_mutable_variables() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.variables_;
}

// -------------------------------------------------------------------

// BoolVars

// repeated .Nrmk.IndyFramework.BoolVariable variables = 1;
inline int BoolVars::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int BoolVars::variables_size() const {
  return _internal_variables_size();
}
inline void BoolVars::clear_variables() {
  _internal_mutable_variables()->Clear();
}
inline ::Nrmk::IndyFramework::BoolVariable* BoolVars::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.BoolVars.variables)
  return _internal_mutable_variables()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >*
BoolVars::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.BoolVars.variables)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_variables();
}
inline const ::Nrmk::IndyFramework::BoolVariable& BoolVars::variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BoolVars.variables)
    return _internal_variables().Get(index);
}
inline ::Nrmk::IndyFramework::BoolVariable* BoolVars::add_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::BoolVariable* _add = _internal_mutable_variables()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.BoolVars.variables)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >&
BoolVars::variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.BoolVars.variables)
  return _internal_variables();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::BoolVariable>&
BoolVars::_internal_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variables_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::BoolVariable>*
BoolVars::_internal_mutable_variables() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.variables_;
}

// -------------------------------------------------------------------

// FloatVars

// repeated .Nrmk.IndyFramework.FloatVariable variables = 1;
inline int FloatVars::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int FloatVars::variables_size() const {
  return _internal_variables_size();
}
inline void FloatVars::clear_variables() {
  _internal_mutable_variables()->Clear();
}
inline ::Nrmk::IndyFramework::FloatVariable* FloatVars::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.FloatVars.variables)
  return _internal_mutable_variables()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >*
FloatVars::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.FloatVars.variables)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_variables();
}
inline const ::Nrmk::IndyFramework::FloatVariable& FloatVars::variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FloatVars.variables)
    return _internal_variables().Get(index);
}
inline ::Nrmk::IndyFramework::FloatVariable* FloatVars::add_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::FloatVariable* _add = _internal_mutable_variables()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.FloatVars.variables)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >&
FloatVars::variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.FloatVars.variables)
  return _internal_variables();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::FloatVariable>&
FloatVars::_internal_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variables_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::FloatVariable>*
FloatVars::_internal_mutable_variables() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.variables_;
}

// -------------------------------------------------------------------

// JPosVars

// repeated .Nrmk.IndyFramework.JPosVariable variables = 1;
inline int JPosVars::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int JPosVars::variables_size() const {
  return _internal_variables_size();
}
inline void JPosVars::clear_variables() {
  _internal_mutable_variables()->Clear();
}
inline ::Nrmk::IndyFramework::JPosVariable* JPosVars::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.JPosVars.variables)
  return _internal_mutable_variables()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >*
JPosVars::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.JPosVars.variables)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_variables();
}
inline const ::Nrmk::IndyFramework::JPosVariable& JPosVars::variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.JPosVars.variables)
    return _internal_variables().Get(index);
}
inline ::Nrmk::IndyFramework::JPosVariable* JPosVars::add_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::JPosVariable* _add = _internal_mutable_variables()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.JPosVars.variables)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >&
JPosVars::variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.JPosVars.variables)
  return _internal_variables();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::JPosVariable>&
JPosVars::_internal_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variables_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::JPosVariable>*
JPosVars::_internal_mutable_variables() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.variables_;
}

// -------------------------------------------------------------------

// TPosVars

// repeated .Nrmk.IndyFramework.TPosVariable variables = 1;
inline int TPosVars::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int TPosVars::variables_size() const {
  return _internal_variables_size();
}
inline void TPosVars::clear_variables() {
  _internal_mutable_variables()->Clear();
}
inline ::Nrmk::IndyFramework::TPosVariable* TPosVars::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TPosVars.variables)
  return _internal_mutable_variables()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >*
TPosVars::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TPosVars.variables)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_variables();
}
inline const ::Nrmk::IndyFramework::TPosVariable& TPosVars::variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TPosVars.variables)
    return _internal_variables().Get(index);
}
inline ::Nrmk::IndyFramework::TPosVariable* TPosVars::add_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::TPosVariable* _add = _internal_mutable_variables()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TPosVars.variables)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >&
TPosVars::variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TPosVars.variables)
  return _internal_variables();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::TPosVariable>&
TPosVars::_internal_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variables_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::TPosVariable>*
TPosVars::_internal_mutable_variables() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.variables_;
}

// -------------------------------------------------------------------

// InverseKinematicsReq

// repeated float tpos = 1;
inline int InverseKinematicsReq::_internal_tpos_size() const {
  return _internal_tpos().size();
}
inline int InverseKinematicsReq::tpos_size() const {
  return _internal_tpos_size();
}
inline void InverseKinematicsReq::clear_tpos() {
  _internal_mutable_tpos()->Clear();
}
inline float InverseKinematicsReq::tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.InverseKinematicsReq.tpos)
  return _internal_tpos().Get(index);
}
inline void InverseKinematicsReq::set_tpos(int index, float value) {
  _internal_mutable_tpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.InverseKinematicsReq.tpos)
}
inline void InverseKinematicsReq::add_tpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.InverseKinematicsReq.tpos)
}
inline const ::google::protobuf::RepeatedField<float>& InverseKinematicsReq::tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.InverseKinematicsReq.tpos)
  return _internal_tpos();
}
inline ::google::protobuf::RepeatedField<float>* InverseKinematicsReq::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.InverseKinematicsReq.tpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tpos();
}

inline const ::google::protobuf::RepeatedField<float>& InverseKinematicsReq::_internal_tpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tpos_;
}
inline ::google::protobuf::RepeatedField<float>* InverseKinematicsReq::_internal_mutable_tpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tpos_;
}

// repeated float init_jpos = 2;
inline int InverseKinematicsReq::_internal_init_jpos_size() const {
  return _internal_init_jpos().size();
}
inline int InverseKinematicsReq::init_jpos_size() const {
  return _internal_init_jpos_size();
}
inline void InverseKinematicsReq::clear_init_jpos() {
  _internal_mutable_init_jpos()->Clear();
}
inline float InverseKinematicsReq::init_jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.InverseKinematicsReq.init_jpos)
  return _internal_init_jpos().Get(index);
}
inline void InverseKinematicsReq::set_init_jpos(int index, float value) {
  _internal_mutable_init_jpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.InverseKinematicsReq.init_jpos)
}
inline void InverseKinematicsReq::add_init_jpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_init_jpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.InverseKinematicsReq.init_jpos)
}
inline const ::google::protobuf::RepeatedField<float>& InverseKinematicsReq::init_jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.InverseKinematicsReq.init_jpos)
  return _internal_init_jpos();
}
inline ::google::protobuf::RepeatedField<float>* InverseKinematicsReq::mutable_init_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.InverseKinematicsReq.init_jpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_init_jpos();
}

inline const ::google::protobuf::RepeatedField<float>& InverseKinematicsReq::_internal_init_jpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.init_jpos_;
}
inline ::google::protobuf::RepeatedField<float>* InverseKinematicsReq::_internal_mutable_init_jpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.init_jpos_;
}

// -------------------------------------------------------------------

// InverseKinematicsRes

// repeated float jpos = 1;
inline int InverseKinematicsRes::_internal_jpos_size() const {
  return _internal_jpos().size();
}
inline int InverseKinematicsRes::jpos_size() const {
  return _internal_jpos_size();
}
inline void InverseKinematicsRes::clear_jpos() {
  _internal_mutable_jpos()->Clear();
}
inline float InverseKinematicsRes::jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.InverseKinematicsRes.jpos)
  return _internal_jpos().Get(index);
}
inline void InverseKinematicsRes::set_jpos(int index, float value) {
  _internal_mutable_jpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.InverseKinematicsRes.jpos)
}
inline void InverseKinematicsRes::add_jpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_jpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.InverseKinematicsRes.jpos)
}
inline const ::google::protobuf::RepeatedField<float>& InverseKinematicsRes::jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.InverseKinematicsRes.jpos)
  return _internal_jpos();
}
inline ::google::protobuf::RepeatedField<float>* InverseKinematicsRes::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.InverseKinematicsRes.jpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_jpos();
}

inline const ::google::protobuf::RepeatedField<float>& InverseKinematicsRes::_internal_jpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jpos_;
}
inline ::google::protobuf::RepeatedField<float>* InverseKinematicsRes::_internal_mutable_jpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.jpos_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool InverseKinematicsRes::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& InverseKinematicsRes::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& InverseKinematicsRes::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.InverseKinematicsRes.response)
  return _internal_response();
}
inline void InverseKinematicsRes::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.InverseKinematicsRes.response)
}
inline ::Nrmk::IndyFramework::Response* InverseKinematicsRes::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* InverseKinematicsRes::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.InverseKinematicsRes.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* InverseKinematicsRes::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* InverseKinematicsRes::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.InverseKinematicsRes.response)
  return _msg;
}
inline void InverseKinematicsRes::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.InverseKinematicsRes.response)
}

// -------------------------------------------------------------------

// ForwardKinematicsReq

// repeated float jpos = 1;
inline int ForwardKinematicsReq::_internal_jpos_size() const {
  return _internal_jpos().size();
}
inline int ForwardKinematicsReq::jpos_size() const {
  return _internal_jpos_size();
}
inline void ForwardKinematicsReq::clear_jpos() {
  _internal_mutable_jpos()->Clear();
}
inline float ForwardKinematicsReq::jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForwardKinematicsReq.jpos)
  return _internal_jpos().Get(index);
}
inline void ForwardKinematicsReq::set_jpos(int index, float value) {
  _internal_mutable_jpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForwardKinematicsReq.jpos)
}
inline void ForwardKinematicsReq::add_jpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_jpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForwardKinematicsReq.jpos)
}
inline const ::google::protobuf::RepeatedField<float>& ForwardKinematicsReq::jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForwardKinematicsReq.jpos)
  return _internal_jpos();
}
inline ::google::protobuf::RepeatedField<float>* ForwardKinematicsReq::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForwardKinematicsReq.jpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_jpos();
}

inline const ::google::protobuf::RepeatedField<float>& ForwardKinematicsReq::_internal_jpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jpos_;
}
inline ::google::protobuf::RepeatedField<float>* ForwardKinematicsReq::_internal_mutable_jpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.jpos_;
}

// -------------------------------------------------------------------

// ForwardKinematicsRes

// repeated float tpos = 1;
inline int ForwardKinematicsRes::_internal_tpos_size() const {
  return _internal_tpos().size();
}
inline int ForwardKinematicsRes::tpos_size() const {
  return _internal_tpos_size();
}
inline void ForwardKinematicsRes::clear_tpos() {
  _internal_mutable_tpos()->Clear();
}
inline float ForwardKinematicsRes::tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForwardKinematicsRes.tpos)
  return _internal_tpos().Get(index);
}
inline void ForwardKinematicsRes::set_tpos(int index, float value) {
  _internal_mutable_tpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForwardKinematicsRes.tpos)
}
inline void ForwardKinematicsRes::add_tpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForwardKinematicsRes.tpos)
}
inline const ::google::protobuf::RepeatedField<float>& ForwardKinematicsRes::tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForwardKinematicsRes.tpos)
  return _internal_tpos();
}
inline ::google::protobuf::RepeatedField<float>* ForwardKinematicsRes::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForwardKinematicsRes.tpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tpos();
}

inline const ::google::protobuf::RepeatedField<float>& ForwardKinematicsRes::_internal_tpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tpos_;
}
inline ::google::protobuf::RepeatedField<float>* ForwardKinematicsRes::_internal_mutable_tpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tpos_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ForwardKinematicsRes::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& ForwardKinematicsRes::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& ForwardKinematicsRes::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForwardKinematicsRes.response)
  return _internal_response();
}
inline void ForwardKinematicsRes::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.ForwardKinematicsRes.response)
}
inline ::Nrmk::IndyFramework::Response* ForwardKinematicsRes::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* ForwardKinematicsRes::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ForwardKinematicsRes.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ForwardKinematicsRes::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* ForwardKinematicsRes::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ForwardKinematicsRes.response)
  return _msg;
}
inline void ForwardKinematicsRes::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ForwardKinematicsRes.response)
}

// -------------------------------------------------------------------

// CheckAproachRetractValidReq

// repeated float tpos = 1;
inline int CheckAproachRetractValidReq::_internal_tpos_size() const {
  return _internal_tpos().size();
}
inline int CheckAproachRetractValidReq::tpos_size() const {
  return _internal_tpos_size();
}
inline void CheckAproachRetractValidReq::clear_tpos() {
  _internal_mutable_tpos()->Clear();
}
inline float CheckAproachRetractValidReq::tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidReq.tpos)
  return _internal_tpos().Get(index);
}
inline void CheckAproachRetractValidReq::set_tpos(int index, float value) {
  _internal_mutable_tpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidReq.tpos)
}
inline void CheckAproachRetractValidReq::add_tpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CheckAproachRetractValidReq.tpos)
}
inline const ::google::protobuf::RepeatedField<float>& CheckAproachRetractValidReq::tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.tpos)
  return _internal_tpos();
}
inline ::google::protobuf::RepeatedField<float>* CheckAproachRetractValidReq::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.tpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tpos();
}

inline const ::google::protobuf::RepeatedField<float>& CheckAproachRetractValidReq::_internal_tpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tpos_;
}
inline ::google::protobuf::RepeatedField<float>* CheckAproachRetractValidReq::_internal_mutable_tpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tpos_;
}

// repeated float init_jpos = 2;
inline int CheckAproachRetractValidReq::_internal_init_jpos_size() const {
  return _internal_init_jpos().size();
}
inline int CheckAproachRetractValidReq::init_jpos_size() const {
  return _internal_init_jpos_size();
}
inline void CheckAproachRetractValidReq::clear_init_jpos() {
  _internal_mutable_init_jpos()->Clear();
}
inline float CheckAproachRetractValidReq::init_jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidReq.init_jpos)
  return _internal_init_jpos().Get(index);
}
inline void CheckAproachRetractValidReq::set_init_jpos(int index, float value) {
  _internal_mutable_init_jpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidReq.init_jpos)
}
inline void CheckAproachRetractValidReq::add_init_jpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_init_jpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CheckAproachRetractValidReq.init_jpos)
}
inline const ::google::protobuf::RepeatedField<float>& CheckAproachRetractValidReq::init_jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.init_jpos)
  return _internal_init_jpos();
}
inline ::google::protobuf::RepeatedField<float>* CheckAproachRetractValidReq::mutable_init_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.init_jpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_init_jpos();
}

inline const ::google::protobuf::RepeatedField<float>& CheckAproachRetractValidReq::_internal_init_jpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.init_jpos_;
}
inline ::google::protobuf::RepeatedField<float>* CheckAproachRetractValidReq::_internal_mutable_init_jpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.init_jpos_;
}

// repeated float pre_tpos = 3;
inline int CheckAproachRetractValidReq::_internal_pre_tpos_size() const {
  return _internal_pre_tpos().size();
}
inline int CheckAproachRetractValidReq::pre_tpos_size() const {
  return _internal_pre_tpos_size();
}
inline void CheckAproachRetractValidReq::clear_pre_tpos() {
  _internal_mutable_pre_tpos()->Clear();
}
inline float CheckAproachRetractValidReq::pre_tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidReq.pre_tpos)
  return _internal_pre_tpos().Get(index);
}
inline void CheckAproachRetractValidReq::set_pre_tpos(int index, float value) {
  _internal_mutable_pre_tpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidReq.pre_tpos)
}
inline void CheckAproachRetractValidReq::add_pre_tpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pre_tpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CheckAproachRetractValidReq.pre_tpos)
}
inline const ::google::protobuf::RepeatedField<float>& CheckAproachRetractValidReq::pre_tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.pre_tpos)
  return _internal_pre_tpos();
}
inline ::google::protobuf::RepeatedField<float>* CheckAproachRetractValidReq::mutable_pre_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.pre_tpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pre_tpos();
}

inline const ::google::protobuf::RepeatedField<float>& CheckAproachRetractValidReq::_internal_pre_tpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pre_tpos_;
}
inline ::google::protobuf::RepeatedField<float>* CheckAproachRetractValidReq::_internal_mutable_pre_tpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pre_tpos_;
}

// repeated float post_tpos = 4;
inline int CheckAproachRetractValidReq::_internal_post_tpos_size() const {
  return _internal_post_tpos().size();
}
inline int CheckAproachRetractValidReq::post_tpos_size() const {
  return _internal_post_tpos_size();
}
inline void CheckAproachRetractValidReq::clear_post_tpos() {
  _internal_mutable_post_tpos()->Clear();
}
inline float CheckAproachRetractValidReq::post_tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidReq.post_tpos)
  return _internal_post_tpos().Get(index);
}
inline void CheckAproachRetractValidReq::set_post_tpos(int index, float value) {
  _internal_mutable_post_tpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidReq.post_tpos)
}
inline void CheckAproachRetractValidReq::add_post_tpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_post_tpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CheckAproachRetractValidReq.post_tpos)
}
inline const ::google::protobuf::RepeatedField<float>& CheckAproachRetractValidReq::post_tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.post_tpos)
  return _internal_post_tpos();
}
inline ::google::protobuf::RepeatedField<float>* CheckAproachRetractValidReq::mutable_post_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.post_tpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_post_tpos();
}

inline const ::google::protobuf::RepeatedField<float>& CheckAproachRetractValidReq::_internal_post_tpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.post_tpos_;
}
inline ::google::protobuf::RepeatedField<float>* CheckAproachRetractValidReq::_internal_mutable_post_tpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.post_tpos_;
}

// -------------------------------------------------------------------

// CheckAproachRetractValidRes

// bool is_valid = 1;
inline void CheckAproachRetractValidRes::clear_is_valid() {
  _impl_.is_valid_ = false;
}
inline bool CheckAproachRetractValidRes::is_valid() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidRes.is_valid)
  return _internal_is_valid();
}
inline void CheckAproachRetractValidRes::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidRes.is_valid)
}
inline bool CheckAproachRetractValidRes::_internal_is_valid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_valid_;
}
inline void CheckAproachRetractValidRes::_internal_set_is_valid(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_valid_ = value;
}

// repeated float tar_pos = 2;
inline int CheckAproachRetractValidRes::_internal_tar_pos_size() const {
  return _internal_tar_pos().size();
}
inline int CheckAproachRetractValidRes::tar_pos_size() const {
  return _internal_tar_pos_size();
}
inline void CheckAproachRetractValidRes::clear_tar_pos() {
  _internal_mutable_tar_pos()->Clear();
}
inline float CheckAproachRetractValidRes::tar_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidRes.tar_pos)
  return _internal_tar_pos().Get(index);
}
inline void CheckAproachRetractValidRes::set_tar_pos(int index, float value) {
  _internal_mutable_tar_pos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidRes.tar_pos)
}
inline void CheckAproachRetractValidRes::add_tar_pos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tar_pos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CheckAproachRetractValidRes.tar_pos)
}
inline const ::google::protobuf::RepeatedField<float>& CheckAproachRetractValidRes::tar_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CheckAproachRetractValidRes.tar_pos)
  return _internal_tar_pos();
}
inline ::google::protobuf::RepeatedField<float>* CheckAproachRetractValidRes::mutable_tar_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CheckAproachRetractValidRes.tar_pos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tar_pos();
}

inline const ::google::protobuf::RepeatedField<float>& CheckAproachRetractValidRes::_internal_tar_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tar_pos_;
}
inline ::google::protobuf::RepeatedField<float>* CheckAproachRetractValidRes::_internal_mutable_tar_pos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tar_pos_;
}

// repeated float approach_pos = 3;
inline int CheckAproachRetractValidRes::_internal_approach_pos_size() const {
  return _internal_approach_pos().size();
}
inline int CheckAproachRetractValidRes::approach_pos_size() const {
  return _internal_approach_pos_size();
}
inline void CheckAproachRetractValidRes::clear_approach_pos() {
  _internal_mutable_approach_pos()->Clear();
}
inline float CheckAproachRetractValidRes::approach_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidRes.approach_pos)
  return _internal_approach_pos().Get(index);
}
inline void CheckAproachRetractValidRes::set_approach_pos(int index, float value) {
  _internal_mutable_approach_pos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidRes.approach_pos)
}
inline void CheckAproachRetractValidRes::add_approach_pos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_approach_pos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CheckAproachRetractValidRes.approach_pos)
}
inline const ::google::protobuf::RepeatedField<float>& CheckAproachRetractValidRes::approach_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CheckAproachRetractValidRes.approach_pos)
  return _internal_approach_pos();
}
inline ::google::protobuf::RepeatedField<float>* CheckAproachRetractValidRes::mutable_approach_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CheckAproachRetractValidRes.approach_pos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_approach_pos();
}

inline const ::google::protobuf::RepeatedField<float>& CheckAproachRetractValidRes::_internal_approach_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.approach_pos_;
}
inline ::google::protobuf::RepeatedField<float>* CheckAproachRetractValidRes::_internal_mutable_approach_pos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.approach_pos_;
}

// repeated float retract_pos = 4;
inline int CheckAproachRetractValidRes::_internal_retract_pos_size() const {
  return _internal_retract_pos().size();
}
inline int CheckAproachRetractValidRes::retract_pos_size() const {
  return _internal_retract_pos_size();
}
inline void CheckAproachRetractValidRes::clear_retract_pos() {
  _internal_mutable_retract_pos()->Clear();
}
inline float CheckAproachRetractValidRes::retract_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidRes.retract_pos)
  return _internal_retract_pos().Get(index);
}
inline void CheckAproachRetractValidRes::set_retract_pos(int index, float value) {
  _internal_mutable_retract_pos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidRes.retract_pos)
}
inline void CheckAproachRetractValidRes::add_retract_pos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_retract_pos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CheckAproachRetractValidRes.retract_pos)
}
inline const ::google::protobuf::RepeatedField<float>& CheckAproachRetractValidRes::retract_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CheckAproachRetractValidRes.retract_pos)
  return _internal_retract_pos();
}
inline ::google::protobuf::RepeatedField<float>* CheckAproachRetractValidRes::mutable_retract_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CheckAproachRetractValidRes.retract_pos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_retract_pos();
}

inline const ::google::protobuf::RepeatedField<float>& CheckAproachRetractValidRes::_internal_retract_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.retract_pos_;
}
inline ::google::protobuf::RepeatedField<float>* CheckAproachRetractValidRes::_internal_mutable_retract_pos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.retract_pos_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool CheckAproachRetractValidRes::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& CheckAproachRetractValidRes::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& CheckAproachRetractValidRes::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidRes.response)
  return _internal_response();
}
inline void CheckAproachRetractValidRes::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.CheckAproachRetractValidRes.response)
}
inline ::Nrmk::IndyFramework::Response* CheckAproachRetractValidRes::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* CheckAproachRetractValidRes::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.CheckAproachRetractValidRes.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* CheckAproachRetractValidRes::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* CheckAproachRetractValidRes::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.CheckAproachRetractValidRes.response)
  return _msg;
}
inline void CheckAproachRetractValidRes::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.CheckAproachRetractValidRes.response)
}

// -------------------------------------------------------------------

// GetPalletPointListReq

// repeated float tpos = 1;
inline int GetPalletPointListReq::_internal_tpos_size() const {
  return _internal_tpos().size();
}
inline int GetPalletPointListReq::tpos_size() const {
  return _internal_tpos_size();
}
inline void GetPalletPointListReq::clear_tpos() {
  _internal_mutable_tpos()->Clear();
}
inline float GetPalletPointListReq::tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListReq.tpos)
  return _internal_tpos().Get(index);
}
inline void GetPalletPointListReq::set_tpos(int index, float value) {
  _internal_mutable_tpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetPalletPointListReq.tpos)
}
inline void GetPalletPointListReq::add_tpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.GetPalletPointListReq.tpos)
}
inline const ::google::protobuf::RepeatedField<float>& GetPalletPointListReq::tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.GetPalletPointListReq.tpos)
  return _internal_tpos();
}
inline ::google::protobuf::RepeatedField<float>* GetPalletPointListReq::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.GetPalletPointListReq.tpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tpos();
}

inline const ::google::protobuf::RepeatedField<float>& GetPalletPointListReq::_internal_tpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tpos_;
}
inline ::google::protobuf::RepeatedField<float>* GetPalletPointListReq::_internal_mutable_tpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tpos_;
}

// repeated float jpos = 2;
inline int GetPalletPointListReq::_internal_jpos_size() const {
  return _internal_jpos().size();
}
inline int GetPalletPointListReq::jpos_size() const {
  return _internal_jpos_size();
}
inline void GetPalletPointListReq::clear_jpos() {
  _internal_mutable_jpos()->Clear();
}
inline float GetPalletPointListReq::jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListReq.jpos)
  return _internal_jpos().Get(index);
}
inline void GetPalletPointListReq::set_jpos(int index, float value) {
  _internal_mutable_jpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetPalletPointListReq.jpos)
}
inline void GetPalletPointListReq::add_jpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_jpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.GetPalletPointListReq.jpos)
}
inline const ::google::protobuf::RepeatedField<float>& GetPalletPointListReq::jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.GetPalletPointListReq.jpos)
  return _internal_jpos();
}
inline ::google::protobuf::RepeatedField<float>* GetPalletPointListReq::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.GetPalletPointListReq.jpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_jpos();
}

inline const ::google::protobuf::RepeatedField<float>& GetPalletPointListReq::_internal_jpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jpos_;
}
inline ::google::protobuf::RepeatedField<float>* GetPalletPointListReq::_internal_mutable_jpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.jpos_;
}

// repeated float pre_tpos = 3;
inline int GetPalletPointListReq::_internal_pre_tpos_size() const {
  return _internal_pre_tpos().size();
}
inline int GetPalletPointListReq::pre_tpos_size() const {
  return _internal_pre_tpos_size();
}
inline void GetPalletPointListReq::clear_pre_tpos() {
  _internal_mutable_pre_tpos()->Clear();
}
inline float GetPalletPointListReq::pre_tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListReq.pre_tpos)
  return _internal_pre_tpos().Get(index);
}
inline void GetPalletPointListReq::set_pre_tpos(int index, float value) {
  _internal_mutable_pre_tpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetPalletPointListReq.pre_tpos)
}
inline void GetPalletPointListReq::add_pre_tpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pre_tpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.GetPalletPointListReq.pre_tpos)
}
inline const ::google::protobuf::RepeatedField<float>& GetPalletPointListReq::pre_tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.GetPalletPointListReq.pre_tpos)
  return _internal_pre_tpos();
}
inline ::google::protobuf::RepeatedField<float>* GetPalletPointListReq::mutable_pre_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.GetPalletPointListReq.pre_tpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pre_tpos();
}

inline const ::google::protobuf::RepeatedField<float>& GetPalletPointListReq::_internal_pre_tpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pre_tpos_;
}
inline ::google::protobuf::RepeatedField<float>* GetPalletPointListReq::_internal_mutable_pre_tpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pre_tpos_;
}

// repeated float post_tpos = 4;
inline int GetPalletPointListReq::_internal_post_tpos_size() const {
  return _internal_post_tpos().size();
}
inline int GetPalletPointListReq::post_tpos_size() const {
  return _internal_post_tpos_size();
}
inline void GetPalletPointListReq::clear_post_tpos() {
  _internal_mutable_post_tpos()->Clear();
}
inline float GetPalletPointListReq::post_tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListReq.post_tpos)
  return _internal_post_tpos().Get(index);
}
inline void GetPalletPointListReq::set_post_tpos(int index, float value) {
  _internal_mutable_post_tpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetPalletPointListReq.post_tpos)
}
inline void GetPalletPointListReq::add_post_tpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_post_tpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.GetPalletPointListReq.post_tpos)
}
inline const ::google::protobuf::RepeatedField<float>& GetPalletPointListReq::post_tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.GetPalletPointListReq.post_tpos)
  return _internal_post_tpos();
}
inline ::google::protobuf::RepeatedField<float>* GetPalletPointListReq::mutable_post_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.GetPalletPointListReq.post_tpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_post_tpos();
}

inline const ::google::protobuf::RepeatedField<float>& GetPalletPointListReq::_internal_post_tpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.post_tpos_;
}
inline ::google::protobuf::RepeatedField<float>* GetPalletPointListReq::_internal_mutable_post_tpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.post_tpos_;
}

// int32 pallet_pattern = 5;
inline void GetPalletPointListReq::clear_pallet_pattern() {
  _impl_.pallet_pattern_ = 0;
}
inline ::int32_t GetPalletPointListReq::pallet_pattern() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListReq.pallet_pattern)
  return _internal_pallet_pattern();
}
inline void GetPalletPointListReq::set_pallet_pattern(::int32_t value) {
  _internal_set_pallet_pattern(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetPalletPointListReq.pallet_pattern)
}
inline ::int32_t GetPalletPointListReq::_internal_pallet_pattern() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pallet_pattern_;
}
inline void GetPalletPointListReq::_internal_set_pallet_pattern(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pallet_pattern_ = value;
}

// int32 width = 6;
inline void GetPalletPointListReq::clear_width() {
  _impl_.width_ = 0;
}
inline ::int32_t GetPalletPointListReq::width() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListReq.width)
  return _internal_width();
}
inline void GetPalletPointListReq::set_width(::int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetPalletPointListReq.width)
}
inline ::int32_t GetPalletPointListReq::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void GetPalletPointListReq::_internal_set_width(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// int32 height = 7;
inline void GetPalletPointListReq::clear_height() {
  _impl_.height_ = 0;
}
inline ::int32_t GetPalletPointListReq::height() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListReq.height)
  return _internal_height();
}
inline void GetPalletPointListReq::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetPalletPointListReq.height)
}
inline ::int32_t GetPalletPointListReq::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void GetPalletPointListReq::_internal_set_height(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// PalletPoint

// repeated float tar_pos = 1;
inline int PalletPoint::_internal_tar_pos_size() const {
  return _internal_tar_pos().size();
}
inline int PalletPoint::tar_pos_size() const {
  return _internal_tar_pos_size();
}
inline void PalletPoint::clear_tar_pos() {
  _internal_mutable_tar_pos()->Clear();
}
inline float PalletPoint::tar_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PalletPoint.tar_pos)
  return _internal_tar_pos().Get(index);
}
inline void PalletPoint::set_tar_pos(int index, float value) {
  _internal_mutable_tar_pos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PalletPoint.tar_pos)
}
inline void PalletPoint::add_tar_pos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tar_pos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PalletPoint.tar_pos)
}
inline const ::google::protobuf::RepeatedField<float>& PalletPoint::tar_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PalletPoint.tar_pos)
  return _internal_tar_pos();
}
inline ::google::protobuf::RepeatedField<float>* PalletPoint::mutable_tar_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PalletPoint.tar_pos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tar_pos();
}

inline const ::google::protobuf::RepeatedField<float>& PalletPoint::_internal_tar_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tar_pos_;
}
inline ::google::protobuf::RepeatedField<float>* PalletPoint::_internal_mutable_tar_pos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tar_pos_;
}

// repeated float approach_pos = 2;
inline int PalletPoint::_internal_approach_pos_size() const {
  return _internal_approach_pos().size();
}
inline int PalletPoint::approach_pos_size() const {
  return _internal_approach_pos_size();
}
inline void PalletPoint::clear_approach_pos() {
  _internal_mutable_approach_pos()->Clear();
}
inline float PalletPoint::approach_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PalletPoint.approach_pos)
  return _internal_approach_pos().Get(index);
}
inline void PalletPoint::set_approach_pos(int index, float value) {
  _internal_mutable_approach_pos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PalletPoint.approach_pos)
}
inline void PalletPoint::add_approach_pos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_approach_pos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PalletPoint.approach_pos)
}
inline const ::google::protobuf::RepeatedField<float>& PalletPoint::approach_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PalletPoint.approach_pos)
  return _internal_approach_pos();
}
inline ::google::protobuf::RepeatedField<float>* PalletPoint::mutable_approach_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PalletPoint.approach_pos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_approach_pos();
}

inline const ::google::protobuf::RepeatedField<float>& PalletPoint::_internal_approach_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.approach_pos_;
}
inline ::google::protobuf::RepeatedField<float>* PalletPoint::_internal_mutable_approach_pos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.approach_pos_;
}

// repeated float retract_pos = 3;
inline int PalletPoint::_internal_retract_pos_size() const {
  return _internal_retract_pos().size();
}
inline int PalletPoint::retract_pos_size() const {
  return _internal_retract_pos_size();
}
inline void PalletPoint::clear_retract_pos() {
  _internal_mutable_retract_pos()->Clear();
}
inline float PalletPoint::retract_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PalletPoint.retract_pos)
  return _internal_retract_pos().Get(index);
}
inline void PalletPoint::set_retract_pos(int index, float value) {
  _internal_mutable_retract_pos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PalletPoint.retract_pos)
}
inline void PalletPoint::add_retract_pos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_retract_pos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PalletPoint.retract_pos)
}
inline const ::google::protobuf::RepeatedField<float>& PalletPoint::retract_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PalletPoint.retract_pos)
  return _internal_retract_pos();
}
inline ::google::protobuf::RepeatedField<float>* PalletPoint::mutable_retract_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PalletPoint.retract_pos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_retract_pos();
}

inline const ::google::protobuf::RepeatedField<float>& PalletPoint::_internal_retract_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.retract_pos_;
}
inline ::google::protobuf::RepeatedField<float>* PalletPoint::_internal_mutable_retract_pos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.retract_pos_;
}

// repeated float tar_jpos = 4;
inline int PalletPoint::_internal_tar_jpos_size() const {
  return _internal_tar_jpos().size();
}
inline int PalletPoint::tar_jpos_size() const {
  return _internal_tar_jpos_size();
}
inline void PalletPoint::clear_tar_jpos() {
  _internal_mutable_tar_jpos()->Clear();
}
inline float PalletPoint::tar_jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PalletPoint.tar_jpos)
  return _internal_tar_jpos().Get(index);
}
inline void PalletPoint::set_tar_jpos(int index, float value) {
  _internal_mutable_tar_jpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PalletPoint.tar_jpos)
}
inline void PalletPoint::add_tar_jpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tar_jpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PalletPoint.tar_jpos)
}
inline const ::google::protobuf::RepeatedField<float>& PalletPoint::tar_jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PalletPoint.tar_jpos)
  return _internal_tar_jpos();
}
inline ::google::protobuf::RepeatedField<float>* PalletPoint::mutable_tar_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PalletPoint.tar_jpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tar_jpos();
}

inline const ::google::protobuf::RepeatedField<float>& PalletPoint::_internal_tar_jpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tar_jpos_;
}
inline ::google::protobuf::RepeatedField<float>* PalletPoint::_internal_mutable_tar_jpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tar_jpos_;
}

// -------------------------------------------------------------------

// GetPalletPointListRes

// repeated .Nrmk.IndyFramework.PalletPoint pallet_points = 1;
inline int GetPalletPointListRes::_internal_pallet_points_size() const {
  return _internal_pallet_points().size();
}
inline int GetPalletPointListRes::pallet_points_size() const {
  return _internal_pallet_points_size();
}
inline void GetPalletPointListRes::clear_pallet_points() {
  _internal_mutable_pallet_points()->Clear();
}
inline ::Nrmk::IndyFramework::PalletPoint* GetPalletPointListRes::mutable_pallet_points(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.GetPalletPointListRes.pallet_points)
  return _internal_mutable_pallet_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::PalletPoint >*
GetPalletPointListRes::mutable_pallet_points() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.GetPalletPointListRes.pallet_points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pallet_points();
}
inline const ::Nrmk::IndyFramework::PalletPoint& GetPalletPointListRes::pallet_points(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListRes.pallet_points)
    return _internal_pallet_points().Get(index);
}
inline ::Nrmk::IndyFramework::PalletPoint* GetPalletPointListRes::add_pallet_points() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::PalletPoint* _add = _internal_mutable_pallet_points()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.GetPalletPointListRes.pallet_points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::PalletPoint >&
GetPalletPointListRes::pallet_points() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.GetPalletPointListRes.pallet_points)
  return _internal_pallet_points();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::PalletPoint>&
GetPalletPointListRes::_internal_pallet_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pallet_points_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::PalletPoint>*
GetPalletPointListRes::_internal_mutable_pallet_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pallet_points_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool GetPalletPointListRes::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& GetPalletPointListRes::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& GetPalletPointListRes::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListRes.response)
  return _internal_response();
}
inline void GetPalletPointListRes::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.GetPalletPointListRes.response)
}
inline ::Nrmk::IndyFramework::Response* GetPalletPointListRes::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* GetPalletPointListRes::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.GetPalletPointListRes.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* GetPalletPointListRes::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* GetPalletPointListRes::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.GetPalletPointListRes.response)
  return _msg;
}
inline void GetPalletPointListRes::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.GetPalletPointListRes.response)
}

// -------------------------------------------------------------------

// CalculateRelativePoseReq

// repeated float start_pos = 1;
inline int CalculateRelativePoseReq::_internal_start_pos_size() const {
  return _internal_start_pos().size();
}
inline int CalculateRelativePoseReq::start_pos_size() const {
  return _internal_start_pos_size();
}
inline void CalculateRelativePoseReq::clear_start_pos() {
  _internal_mutable_start_pos()->Clear();
}
inline float CalculateRelativePoseReq::start_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateRelativePoseReq.start_pos)
  return _internal_start_pos().Get(index);
}
inline void CalculateRelativePoseReq::set_start_pos(int index, float value) {
  _internal_mutable_start_pos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateRelativePoseReq.start_pos)
}
inline void CalculateRelativePoseReq::add_start_pos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_start_pos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CalculateRelativePoseReq.start_pos)
}
inline const ::google::protobuf::RepeatedField<float>& CalculateRelativePoseReq::start_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CalculateRelativePoseReq.start_pos)
  return _internal_start_pos();
}
inline ::google::protobuf::RepeatedField<float>* CalculateRelativePoseReq::mutable_start_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CalculateRelativePoseReq.start_pos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_start_pos();
}

inline const ::google::protobuf::RepeatedField<float>& CalculateRelativePoseReq::_internal_start_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_pos_;
}
inline ::google::protobuf::RepeatedField<float>* CalculateRelativePoseReq::_internal_mutable_start_pos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.start_pos_;
}

// repeated float end_pos = 2;
inline int CalculateRelativePoseReq::_internal_end_pos_size() const {
  return _internal_end_pos().size();
}
inline int CalculateRelativePoseReq::end_pos_size() const {
  return _internal_end_pos_size();
}
inline void CalculateRelativePoseReq::clear_end_pos() {
  _internal_mutable_end_pos()->Clear();
}
inline float CalculateRelativePoseReq::end_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateRelativePoseReq.end_pos)
  return _internal_end_pos().Get(index);
}
inline void CalculateRelativePoseReq::set_end_pos(int index, float value) {
  _internal_mutable_end_pos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateRelativePoseReq.end_pos)
}
inline void CalculateRelativePoseReq::add_end_pos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_end_pos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CalculateRelativePoseReq.end_pos)
}
inline const ::google::protobuf::RepeatedField<float>& CalculateRelativePoseReq::end_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CalculateRelativePoseReq.end_pos)
  return _internal_end_pos();
}
inline ::google::protobuf::RepeatedField<float>* CalculateRelativePoseReq::mutable_end_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CalculateRelativePoseReq.end_pos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_end_pos();
}

inline const ::google::protobuf::RepeatedField<float>& CalculateRelativePoseReq::_internal_end_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_pos_;
}
inline ::google::protobuf::RepeatedField<float>* CalculateRelativePoseReq::_internal_mutable_end_pos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.end_pos_;
}

// .Nrmk.IndyFramework.TaskBaseType base_type = 3;
inline void CalculateRelativePoseReq::clear_base_type() {
  _impl_.base_type_ = 0;
}
inline ::Nrmk::IndyFramework::TaskBaseType CalculateRelativePoseReq::base_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateRelativePoseReq.base_type)
  return _internal_base_type();
}
inline void CalculateRelativePoseReq::set_base_type(::Nrmk::IndyFramework::TaskBaseType value) {
  _internal_set_base_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateRelativePoseReq.base_type)
}
inline ::Nrmk::IndyFramework::TaskBaseType CalculateRelativePoseReq::_internal_base_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::TaskBaseType>(_impl_.base_type_);
}
inline void CalculateRelativePoseReq::_internal_set_base_type(::Nrmk::IndyFramework::TaskBaseType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.base_type_ = value;
}

// -------------------------------------------------------------------

// CalculateRelativePoseRes

// repeated float relative_pos = 1;
inline int CalculateRelativePoseRes::_internal_relative_pos_size() const {
  return _internal_relative_pos().size();
}
inline int CalculateRelativePoseRes::relative_pos_size() const {
  return _internal_relative_pos_size();
}
inline void CalculateRelativePoseRes::clear_relative_pos() {
  _internal_mutable_relative_pos()->Clear();
}
inline float CalculateRelativePoseRes::relative_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateRelativePoseRes.relative_pos)
  return _internal_relative_pos().Get(index);
}
inline void CalculateRelativePoseRes::set_relative_pos(int index, float value) {
  _internal_mutable_relative_pos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateRelativePoseRes.relative_pos)
}
inline void CalculateRelativePoseRes::add_relative_pos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_relative_pos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CalculateRelativePoseRes.relative_pos)
}
inline const ::google::protobuf::RepeatedField<float>& CalculateRelativePoseRes::relative_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CalculateRelativePoseRes.relative_pos)
  return _internal_relative_pos();
}
inline ::google::protobuf::RepeatedField<float>* CalculateRelativePoseRes::mutable_relative_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CalculateRelativePoseRes.relative_pos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_relative_pos();
}

inline const ::google::protobuf::RepeatedField<float>& CalculateRelativePoseRes::_internal_relative_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relative_pos_;
}
inline ::google::protobuf::RepeatedField<float>* CalculateRelativePoseRes::_internal_mutable_relative_pos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.relative_pos_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool CalculateRelativePoseRes::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& CalculateRelativePoseRes::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& CalculateRelativePoseRes::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateRelativePoseRes.response)
  return _internal_response();
}
inline void CalculateRelativePoseRes::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.CalculateRelativePoseRes.response)
}
inline ::Nrmk::IndyFramework::Response* CalculateRelativePoseRes::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* CalculateRelativePoseRes::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.CalculateRelativePoseRes.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* CalculateRelativePoseRes::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* CalculateRelativePoseRes::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.CalculateRelativePoseRes.response)
  return _msg;
}
inline void CalculateRelativePoseRes::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.CalculateRelativePoseRes.response)
}

// -------------------------------------------------------------------

// CalculateCurrentPoseRelReq

// repeated float current_pos = 1;
inline int CalculateCurrentPoseRelReq::_internal_current_pos_size() const {
  return _internal_current_pos().size();
}
inline int CalculateCurrentPoseRelReq::current_pos_size() const {
  return _internal_current_pos_size();
}
inline void CalculateCurrentPoseRelReq::clear_current_pos() {
  _internal_mutable_current_pos()->Clear();
}
inline float CalculateCurrentPoseRelReq::current_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.current_pos)
  return _internal_current_pos().Get(index);
}
inline void CalculateCurrentPoseRelReq::set_current_pos(int index, float value) {
  _internal_mutable_current_pos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.current_pos)
}
inline void CalculateCurrentPoseRelReq::add_current_pos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_current_pos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.current_pos)
}
inline const ::google::protobuf::RepeatedField<float>& CalculateCurrentPoseRelReq::current_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.current_pos)
  return _internal_current_pos();
}
inline ::google::protobuf::RepeatedField<float>* CalculateCurrentPoseRelReq::mutable_current_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.current_pos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_current_pos();
}

inline const ::google::protobuf::RepeatedField<float>& CalculateCurrentPoseRelReq::_internal_current_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.current_pos_;
}
inline ::google::protobuf::RepeatedField<float>* CalculateCurrentPoseRelReq::_internal_mutable_current_pos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.current_pos_;
}

// repeated float relative_pos = 2;
inline int CalculateCurrentPoseRelReq::_internal_relative_pos_size() const {
  return _internal_relative_pos().size();
}
inline int CalculateCurrentPoseRelReq::relative_pos_size() const {
  return _internal_relative_pos_size();
}
inline void CalculateCurrentPoseRelReq::clear_relative_pos() {
  _internal_mutable_relative_pos()->Clear();
}
inline float CalculateCurrentPoseRelReq::relative_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.relative_pos)
  return _internal_relative_pos().Get(index);
}
inline void CalculateCurrentPoseRelReq::set_relative_pos(int index, float value) {
  _internal_mutable_relative_pos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.relative_pos)
}
inline void CalculateCurrentPoseRelReq::add_relative_pos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_relative_pos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.relative_pos)
}
inline const ::google::protobuf::RepeatedField<float>& CalculateCurrentPoseRelReq::relative_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.relative_pos)
  return _internal_relative_pos();
}
inline ::google::protobuf::RepeatedField<float>* CalculateCurrentPoseRelReq::mutable_relative_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.relative_pos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_relative_pos();
}

inline const ::google::protobuf::RepeatedField<float>& CalculateCurrentPoseRelReq::_internal_relative_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relative_pos_;
}
inline ::google::protobuf::RepeatedField<float>* CalculateCurrentPoseRelReq::_internal_mutable_relative_pos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.relative_pos_;
}

// .Nrmk.IndyFramework.TaskBaseType base_type = 3;
inline void CalculateCurrentPoseRelReq::clear_base_type() {
  _impl_.base_type_ = 0;
}
inline ::Nrmk::IndyFramework::TaskBaseType CalculateCurrentPoseRelReq::base_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.base_type)
  return _internal_base_type();
}
inline void CalculateCurrentPoseRelReq::set_base_type(::Nrmk::IndyFramework::TaskBaseType value) {
  _internal_set_base_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.base_type)
}
inline ::Nrmk::IndyFramework::TaskBaseType CalculateCurrentPoseRelReq::_internal_base_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::TaskBaseType>(_impl_.base_type_);
}
inline void CalculateCurrentPoseRelReq::_internal_set_base_type(::Nrmk::IndyFramework::TaskBaseType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.base_type_ = value;
}

// -------------------------------------------------------------------

// CalculateCurrentPoseRelRes

// repeated float calculated_pos = 1;
inline int CalculateCurrentPoseRelRes::_internal_calculated_pos_size() const {
  return _internal_calculated_pos().size();
}
inline int CalculateCurrentPoseRelRes::calculated_pos_size() const {
  return _internal_calculated_pos_size();
}
inline void CalculateCurrentPoseRelRes::clear_calculated_pos() {
  _internal_mutable_calculated_pos()->Clear();
}
inline float CalculateCurrentPoseRelRes::calculated_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.calculated_pos)
  return _internal_calculated_pos().Get(index);
}
inline void CalculateCurrentPoseRelRes::set_calculated_pos(int index, float value) {
  _internal_mutable_calculated_pos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.calculated_pos)
}
inline void CalculateCurrentPoseRelRes::add_calculated_pos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_calculated_pos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.calculated_pos)
}
inline const ::google::protobuf::RepeatedField<float>& CalculateCurrentPoseRelRes::calculated_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.calculated_pos)
  return _internal_calculated_pos();
}
inline ::google::protobuf::RepeatedField<float>* CalculateCurrentPoseRelRes::mutable_calculated_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.calculated_pos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_calculated_pos();
}

inline const ::google::protobuf::RepeatedField<float>& CalculateCurrentPoseRelRes::_internal_calculated_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.calculated_pos_;
}
inline ::google::protobuf::RepeatedField<float>* CalculateCurrentPoseRelRes::_internal_mutable_calculated_pos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.calculated_pos_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool CalculateCurrentPoseRelRes::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& CalculateCurrentPoseRelRes::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& CalculateCurrentPoseRelRes::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.response)
  return _internal_response();
}
inline void CalculateCurrentPoseRelRes::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.response)
}
inline ::Nrmk::IndyFramework::Response* CalculateCurrentPoseRelRes::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* CalculateCurrentPoseRelRes::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* CalculateCurrentPoseRelRes::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* CalculateCurrentPoseRelRes::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.response)
  return _msg;
}
inline void CalculateCurrentPoseRelRes::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.response)
}

// -------------------------------------------------------------------

// TeleOpDevice

// string name = 1;
inline void TeleOpDevice::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TeleOpDevice::name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpDevice.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TeleOpDevice::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpDevice.name)
}
inline std::string* TeleOpDevice::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TeleOpDevice.name)
  return _s;
}
inline const std::string& TeleOpDevice::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void TeleOpDevice::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TeleOpDevice::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* TeleOpDevice::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TeleOpDevice.name)
  return _impl_.name_.Release();
}
inline void TeleOpDevice::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TeleOpDevice.name)
}

// .Nrmk.IndyFramework.TeleOpDevice.TeleOpDeviceType type = 2;
inline void TeleOpDevice::clear_type() {
  _impl_.type_ = 0;
}
inline ::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType TeleOpDevice::type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpDevice.type)
  return _internal_type();
}
inline void TeleOpDevice::set_type(::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpDevice.type)
}
inline ::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType TeleOpDevice::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType>(_impl_.type_);
}
inline void TeleOpDevice::_internal_set_type(::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string ip = 3;
inline void TeleOpDevice::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& TeleOpDevice::ip() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpDevice.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TeleOpDevice::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpDevice.ip)
}
inline std::string* TeleOpDevice::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TeleOpDevice.ip)
  return _s;
}
inline const std::string& TeleOpDevice::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void TeleOpDevice::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* TeleOpDevice::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ip_.Mutable( GetArenaForAllocation());
}
inline std::string* TeleOpDevice::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TeleOpDevice.ip)
  return _impl_.ip_.Release();
}
inline void TeleOpDevice::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TeleOpDevice.ip)
}

// uint32 port = 4;
inline void TeleOpDevice::clear_port() {
  _impl_.port_ = 0u;
}
inline ::uint32_t TeleOpDevice::port() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpDevice.port)
  return _internal_port();
}
inline void TeleOpDevice::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpDevice.port)
}
inline ::uint32_t TeleOpDevice::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void TeleOpDevice::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// bool connected = 5;
inline void TeleOpDevice::clear_connected() {
  _impl_.connected_ = false;
}
inline bool TeleOpDevice::connected() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpDevice.connected)
  return _internal_connected();
}
inline void TeleOpDevice::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpDevice.connected)
}
inline bool TeleOpDevice::_internal_connected() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.connected_;
}
inline void TeleOpDevice::_internal_set_connected(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.connected_ = value;
}

// -------------------------------------------------------------------

// TeleOpState

// .Nrmk.IndyFramework.TeleMode mode = 1;
inline void TeleOpState::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::Nrmk::IndyFramework::TeleMode TeleOpState::mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpState.mode)
  return _internal_mode();
}
inline void TeleOpState::set_mode(::Nrmk::IndyFramework::TeleMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpState.mode)
}
inline ::Nrmk::IndyFramework::TeleMode TeleOpState::_internal_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::TeleMode>(_impl_.mode_);
}
inline void TeleOpState::_internal_set_mode(::Nrmk::IndyFramework::TeleMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mode_ = value;
}

// .Nrmk.IndyFramework.TeleMethod method = 2;
inline void TeleOpState::clear_method() {
  _impl_.method_ = 0;
}
inline ::Nrmk::IndyFramework::TeleMethod TeleOpState::method() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpState.method)
  return _internal_method();
}
inline void TeleOpState::set_method(::Nrmk::IndyFramework::TeleMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpState.method)
}
inline ::Nrmk::IndyFramework::TeleMethod TeleOpState::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::TeleMethod>(_impl_.method_);
}
inline void TeleOpState::_internal_set_method(::Nrmk::IndyFramework::TeleMethod value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_ = value;
}

// -------------------------------------------------------------------

// TeleP

// repeated float tpos = 1;
inline int TeleP::_internal_tpos_size() const {
  return _internal_tpos().size();
}
inline int TeleP::tpos_size() const {
  return _internal_tpos_size();
}
inline void TeleP::clear_tpos() {
  _internal_mutable_tpos()->Clear();
}
inline float TeleP::tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleP.tpos)
  return _internal_tpos().Get(index);
}
inline void TeleP::set_tpos(int index, float value) {
  _internal_mutable_tpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleP.tpos)
}
inline void TeleP::add_tpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TeleP.tpos)
}
inline const ::google::protobuf::RepeatedField<float>& TeleP::tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TeleP.tpos)
  return _internal_tpos();
}
inline ::google::protobuf::RepeatedField<float>* TeleP::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TeleP.tpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tpos();
}

inline const ::google::protobuf::RepeatedField<float>& TeleP::_internal_tpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tpos_;
}
inline ::google::protobuf::RepeatedField<float>* TeleP::_internal_mutable_tpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tpos_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool TeleP::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& TeleP::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& TeleP::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleP.response)
  return _internal_response();
}
inline void TeleP::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.TeleP.response)
}
inline ::Nrmk::IndyFramework::Response* TeleP::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* TeleP::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TeleP.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* TeleP::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* TeleP::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TeleP.response)
  return _msg;
}
inline void TeleP::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TeleP.response)
}

// -------------------------------------------------------------------

// TeleOpFileList

// repeated string files = 1;
inline int TeleOpFileList::_internal_files_size() const {
  return _internal_files().size();
}
inline int TeleOpFileList::files_size() const {
  return _internal_files_size();
}
inline void TeleOpFileList::clear_files() {
  _internal_mutable_files()->Clear();
}
inline std::string* TeleOpFileList::add_files() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_files()->Add();
  // @@protoc_insertion_point(field_add_mutable:Nrmk.IndyFramework.TeleOpFileList.files)
  return _s;
}
inline const std::string& TeleOpFileList::files(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpFileList.files)
  return _internal_files().Get(index);
}
inline std::string* TeleOpFileList::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TeleOpFileList.files)
  return _internal_mutable_files()->Mutable(index);
}
inline void TeleOpFileList::set_files(int index, const std::string& value) {
  _internal_mutable_files()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline void TeleOpFileList::set_files(int index, std::string&& value) {
  _internal_mutable_files()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline void TeleOpFileList::set_files(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_files()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline void TeleOpFileList::set_files(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_files()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline void TeleOpFileList::set_files(int index, absl::string_view value) {
  _internal_mutable_files()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline void TeleOpFileList::add_files(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_files()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline void TeleOpFileList::add_files(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_files()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline void TeleOpFileList::add_files(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_files()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline void TeleOpFileList::add_files(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_files()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline void TeleOpFileList::add_files(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_files()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TeleOpFileList::files() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TeleOpFileList.files)
  return _internal_files();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* TeleOpFileList::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TeleOpFileList.files)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_files();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TeleOpFileList::_internal_files() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.files_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TeleOpFileList::_internal_mutable_files() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.files_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool TeleOpFileList::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& TeleOpFileList::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& TeleOpFileList::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpFileList.response)
  return _internal_response();
}
inline void TeleOpFileList::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.TeleOpFileList.response)
}
inline ::Nrmk::IndyFramework::Response* TeleOpFileList::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* TeleOpFileList::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TeleOpFileList.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* TeleOpFileList::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* TeleOpFileList::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TeleOpFileList.response)
  return _msg;
}
inline void TeleOpFileList::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TeleOpFileList.response)
}

// -------------------------------------------------------------------

// TeleFileReq

// string name = 1;
inline void TeleFileReq::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TeleFileReq::name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleFileReq.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TeleFileReq::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleFileReq.name)
}
inline std::string* TeleFileReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TeleFileReq.name)
  return _s;
}
inline const std::string& TeleFileReq::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void TeleFileReq::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TeleFileReq::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* TeleFileReq::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TeleFileReq.name)
  return _impl_.name_.Release();
}
inline void TeleFileReq::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TeleFileReq.name)
}

// -------------------------------------------------------------------

// TelePlayRate

// float rate = 1;
inline void TelePlayRate::clear_rate() {
  _impl_.rate_ = 0;
}
inline float TelePlayRate::rate() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TelePlayRate.rate)
  return _internal_rate();
}
inline void TelePlayRate::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TelePlayRate.rate)
}
inline float TelePlayRate::_internal_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rate_;
}
inline void TelePlayRate::_internal_set_rate(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rate_ = value;
}

// -------------------------------------------------------------------

// MoveTeleJReq

// repeated float jpos = 1;
inline int MoveTeleJReq::_internal_jpos_size() const {
  return _internal_jpos().size();
}
inline int MoveTeleJReq::jpos_size() const {
  return _internal_jpos_size();
}
inline void MoveTeleJReq::clear_jpos() {
  _internal_mutable_jpos()->Clear();
}
inline float MoveTeleJReq::jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleJReq.jpos)
  return _internal_jpos().Get(index);
}
inline void MoveTeleJReq::set_jpos(int index, float value) {
  _internal_mutable_jpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleJReq.jpos)
}
inline void MoveTeleJReq::add_jpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_jpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveTeleJReq.jpos)
}
inline const ::google::protobuf::RepeatedField<float>& MoveTeleJReq::jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveTeleJReq.jpos)
  return _internal_jpos();
}
inline ::google::protobuf::RepeatedField<float>* MoveTeleJReq::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveTeleJReq.jpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_jpos();
}

inline const ::google::protobuf::RepeatedField<float>& MoveTeleJReq::_internal_jpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jpos_;
}
inline ::google::protobuf::RepeatedField<float>* MoveTeleJReq::_internal_mutable_jpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.jpos_;
}

// float vel_ratio = 2;
inline void MoveTeleJReq::clear_vel_ratio() {
  _impl_.vel_ratio_ = 0;
}
inline float MoveTeleJReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleJReq.vel_ratio)
  return _internal_vel_ratio();
}
inline void MoveTeleJReq::set_vel_ratio(float value) {
  _internal_set_vel_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleJReq.vel_ratio)
}
inline float MoveTeleJReq::_internal_vel_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vel_ratio_;
}
inline void MoveTeleJReq::_internal_set_vel_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vel_ratio_ = value;
}

// float acc_ratio = 3;
inline void MoveTeleJReq::clear_acc_ratio() {
  _impl_.acc_ratio_ = 0;
}
inline float MoveTeleJReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleJReq.acc_ratio)
  return _internal_acc_ratio();
}
inline void MoveTeleJReq::set_acc_ratio(float value) {
  _internal_set_acc_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleJReq.acc_ratio)
}
inline float MoveTeleJReq::_internal_acc_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.acc_ratio_;
}
inline void MoveTeleJReq::_internal_set_acc_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.acc_ratio_ = value;
}

// .Nrmk.IndyFramework.TeleMethod method = 10;
inline void MoveTeleJReq::clear_method() {
  _impl_.method_ = 0;
}
inline ::Nrmk::IndyFramework::TeleMethod MoveTeleJReq::method() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleJReq.method)
  return _internal_method();
}
inline void MoveTeleJReq::set_method(::Nrmk::IndyFramework::TeleMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleJReq.method)
}
inline ::Nrmk::IndyFramework::TeleMethod MoveTeleJReq::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::TeleMethod>(_impl_.method_);
}
inline void MoveTeleJReq::_internal_set_method(::Nrmk::IndyFramework::TeleMethod value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_ = value;
}

// -------------------------------------------------------------------

// MoveTeleLReq

// repeated float tpos = 1;
inline int MoveTeleLReq::_internal_tpos_size() const {
  return _internal_tpos().size();
}
inline int MoveTeleLReq::tpos_size() const {
  return _internal_tpos_size();
}
inline void MoveTeleLReq::clear_tpos() {
  _internal_mutable_tpos()->Clear();
}
inline float MoveTeleLReq::tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleLReq.tpos)
  return _internal_tpos().Get(index);
}
inline void MoveTeleLReq::set_tpos(int index, float value) {
  _internal_mutable_tpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleLReq.tpos)
}
inline void MoveTeleLReq::add_tpos(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tpos()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveTeleLReq.tpos)
}
inline const ::google::protobuf::RepeatedField<float>& MoveTeleLReq::tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveTeleLReq.tpos)
  return _internal_tpos();
}
inline ::google::protobuf::RepeatedField<float>* MoveTeleLReq::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveTeleLReq.tpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tpos();
}

inline const ::google::protobuf::RepeatedField<float>& MoveTeleLReq::_internal_tpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tpos_;
}
inline ::google::protobuf::RepeatedField<float>* MoveTeleLReq::_internal_mutable_tpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tpos_;
}

// float vel_ratio = 2;
inline void MoveTeleLReq::clear_vel_ratio() {
  _impl_.vel_ratio_ = 0;
}
inline float MoveTeleLReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleLReq.vel_ratio)
  return _internal_vel_ratio();
}
inline void MoveTeleLReq::set_vel_ratio(float value) {
  _internal_set_vel_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleLReq.vel_ratio)
}
inline float MoveTeleLReq::_internal_vel_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vel_ratio_;
}
inline void MoveTeleLReq::_internal_set_vel_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vel_ratio_ = value;
}

// float acc_ratio = 3;
inline void MoveTeleLReq::clear_acc_ratio() {
  _impl_.acc_ratio_ = 0;
}
inline float MoveTeleLReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleLReq.acc_ratio)
  return _internal_acc_ratio();
}
inline void MoveTeleLReq::set_acc_ratio(float value) {
  _internal_set_acc_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleLReq.acc_ratio)
}
inline float MoveTeleLReq::_internal_acc_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.acc_ratio_;
}
inline void MoveTeleLReq::_internal_set_acc_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.acc_ratio_ = value;
}

// .Nrmk.IndyFramework.TeleMethod method = 10;
inline void MoveTeleLReq::clear_method() {
  _impl_.method_ = 0;
}
inline ::Nrmk::IndyFramework::TeleMethod MoveTeleLReq::method() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleLReq.method)
  return _internal_method();
}
inline void MoveTeleLReq::set_method(::Nrmk::IndyFramework::TeleMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleLReq.method)
}
inline ::Nrmk::IndyFramework::TeleMethod MoveTeleLReq::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::TeleMethod>(_impl_.method_);
}
inline void MoveTeleLReq::_internal_set_method(::Nrmk::IndyFramework::TeleMethod value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_ = value;
}

// -------------------------------------------------------------------

// MoveLFReq

// .Nrmk.IndyFramework.TargetP target = 1;
inline bool MoveLFReq::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline void MoveLFReq::clear_target() {
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Nrmk::IndyFramework::TargetP& MoveLFReq::_internal_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::TargetP* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::TargetP&>(::Nrmk::IndyFramework::_TargetP_default_instance_);
}
inline const ::Nrmk::IndyFramework::TargetP& MoveLFReq::target() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.target)
  return _internal_target();
}
inline void MoveLFReq::unsafe_arena_set_allocated_target(::Nrmk::IndyFramework::TargetP* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveLFReq.target)
}
inline ::Nrmk::IndyFramework::TargetP* MoveLFReq::release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetP* released = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::TargetP* MoveLFReq::unsafe_arena_release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLFReq.target)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::TargetP* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetP* MoveLFReq::_internal_mutable_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetP>(GetArenaForAllocation());
    _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(p);
  }
  return _impl_.target_;
}
inline ::Nrmk::IndyFramework::TargetP* MoveLFReq::mutable_target() {
  ::Nrmk::IndyFramework::TargetP* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLFReq.target)
  return _msg;
}
inline void MoveLFReq::set_allocated_target(::Nrmk::IndyFramework::TargetP* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(_impl_.target_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.target_ = reinterpret_cast<::Nrmk::IndyFramework::TargetP*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLFReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveLFReq::has_blending() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blending_ != nullptr);
  return value;
}
inline void MoveLFReq::clear_blending() {
  if (_impl_.blending_ != nullptr) _impl_.blending_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveLFReq::_internal_blending() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::BlendingType* p = _impl_.blending_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType&>(::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveLFReq::blending() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.blending)
  return _internal_blending();
}
inline void MoveLFReq::unsafe_arena_set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blending_);
  }
  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveLFReq.blending)
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLFReq::release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* released = _impl_.blending_;
  _impl_.blending_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLFReq::unsafe_arena_release_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLFReq.blending)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Nrmk::IndyFramework::BlendingType* temp = _impl_.blending_;
  _impl_.blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLFReq::_internal_mutable_blending() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaForAllocation());
    _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(p);
  }
  return _impl_.blending_;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLFReq::mutable_blending() {
  ::Nrmk::IndyFramework::BlendingType* _msg = _internal_mutable_blending();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLFReq.blending)
  return _msg;
}
inline void MoveLFReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(_impl_.blending_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.blending_ = reinterpret_cast<::Nrmk::IndyFramework::BlendingType*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLFReq.blending)
}

// float vel_ratio = 3;
inline void MoveLFReq::clear_vel_ratio() {
  _impl_.vel_ratio_ = 0;
}
inline float MoveLFReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.vel_ratio)
  return _internal_vel_ratio();
}
inline void MoveLFReq::set_vel_ratio(float value) {
  _internal_set_vel_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLFReq.vel_ratio)
}
inline float MoveLFReq::_internal_vel_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vel_ratio_;
}
inline void MoveLFReq::_internal_set_vel_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vel_ratio_ = value;
}

// float acc_ratio = 4;
inline void MoveLFReq::clear_acc_ratio() {
  _impl_.acc_ratio_ = 0;
}
inline float MoveLFReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.acc_ratio)
  return _internal_acc_ratio();
}
inline void MoveLFReq::set_acc_ratio(float value) {
  _internal_set_acc_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLFReq.acc_ratio)
}
inline float MoveLFReq::_internal_acc_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.acc_ratio_;
}
inline void MoveLFReq::_internal_set_acc_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.acc_ratio_ = value;
}

// .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
inline void MoveLFReq::clear_vel_type() {
  _impl_.vel_type_ = 0;
}
inline ::Nrmk::IndyFramework::VelocityModeType MoveLFReq::vel_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.vel_type)
  return _internal_vel_type();
}
inline void MoveLFReq::set_vel_type(::Nrmk::IndyFramework::VelocityModeType value) {
  _internal_set_vel_type(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLFReq.vel_type)
}
inline ::Nrmk::IndyFramework::VelocityModeType MoveLFReq::_internal_vel_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::VelocityModeType>(_impl_.vel_type_);
}
inline void MoveLFReq::_internal_set_vel_type(::Nrmk::IndyFramework::VelocityModeType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vel_type_ = value;
}

// repeated float des_force = 6;
inline int MoveLFReq::_internal_des_force_size() const {
  return _internal_des_force().size();
}
inline int MoveLFReq::des_force_size() const {
  return _internal_des_force_size();
}
inline void MoveLFReq::clear_des_force() {
  _internal_mutable_des_force()->Clear();
}
inline float MoveLFReq::des_force(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.des_force)
  return _internal_des_force().Get(index);
}
inline void MoveLFReq::set_des_force(int index, float value) {
  _internal_mutable_des_force()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLFReq.des_force)
}
inline void MoveLFReq::add_des_force(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_des_force()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveLFReq.des_force)
}
inline const ::google::protobuf::RepeatedField<float>& MoveLFReq::des_force() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveLFReq.des_force)
  return _internal_des_force();
}
inline ::google::protobuf::RepeatedField<float>* MoveLFReq::mutable_des_force() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveLFReq.des_force)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_des_force();
}

inline const ::google::protobuf::RepeatedField<float>& MoveLFReq::_internal_des_force() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.des_force_;
}
inline ::google::protobuf::RepeatedField<float>* MoveLFReq::_internal_mutable_des_force() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.des_force_;
}

// repeated bool enabled_force = 7;
inline int MoveLFReq::_internal_enabled_force_size() const {
  return _internal_enabled_force().size();
}
inline int MoveLFReq::enabled_force_size() const {
  return _internal_enabled_force_size();
}
inline void MoveLFReq::clear_enabled_force() {
  _internal_mutable_enabled_force()->Clear();
}
inline bool MoveLFReq::enabled_force(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.enabled_force)
  return _internal_enabled_force().Get(index);
}
inline void MoveLFReq::set_enabled_force(int index, bool value) {
  _internal_mutable_enabled_force()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLFReq.enabled_force)
}
inline void MoveLFReq::add_enabled_force(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_enabled_force()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveLFReq.enabled_force)
}
inline const ::google::protobuf::RepeatedField<bool>& MoveLFReq::enabled_force() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveLFReq.enabled_force)
  return _internal_enabled_force();
}
inline ::google::protobuf::RepeatedField<bool>* MoveLFReq::mutable_enabled_force() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveLFReq.enabled_force)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_enabled_force();
}

inline const ::google::protobuf::RepeatedField<bool>& MoveLFReq::_internal_enabled_force() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enabled_force_;
}
inline ::google::protobuf::RepeatedField<bool>* MoveLFReq::_internal_mutable_enabled_force() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.enabled_force_;
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 20;
inline bool MoveLFReq::has_post_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_condition_ != nullptr);
  return value;
}
inline void MoveLFReq::clear_post_condition() {
  if (_impl_.post_condition_ != nullptr) _impl_.post_condition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveLFReq::_internal_post_condition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::MotionCondition* p = _impl_.post_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition&>(::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveLFReq::post_condition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.post_condition)
  return _internal_post_condition();
}
inline void MoveLFReq::unsafe_arena_set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.post_condition_);
  }
  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MoveLFReq.post_condition)
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLFReq::release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* released = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLFReq::unsafe_arena_release_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLFReq.post_condition)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Nrmk::IndyFramework::MotionCondition* temp = _impl_.post_condition_;
  _impl_.post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLFReq::_internal_mutable_post_condition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaForAllocation());
    _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(p);
  }
  return _impl_.post_condition_;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLFReq::mutable_post_condition() {
  ::Nrmk::IndyFramework::MotionCondition* _msg = _internal_mutable_post_condition();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLFReq.post_condition)
  return _msg;
}
inline void MoveLFReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(_impl_.post_condition_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.post_condition_ = reinterpret_cast<::Nrmk::IndyFramework::MotionCondition*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLFReq.post_condition)
}

// bool teaching_mode = 30;
inline void MoveLFReq::clear_teaching_mode() {
  _impl_.teaching_mode_ = false;
}
inline bool MoveLFReq::teaching_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.teaching_mode)
  return _internal_teaching_mode();
}
inline void MoveLFReq::set_teaching_mode(bool value) {
  _internal_set_teaching_mode(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLFReq.teaching_mode)
}
inline bool MoveLFReq::_internal_teaching_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.teaching_mode_;
}
inline void MoveLFReq::_internal_set_teaching_mode(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.teaching_mode_ = value;
}

// -------------------------------------------------------------------

// MoveFLRes

// string msg = 100;
inline void MoveFLRes::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& MoveFLRes::msg() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveFLRes.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MoveFLRes::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveFLRes.msg)
}
inline std::string* MoveFLRes::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveFLRes.msg)
  return _s;
}
inline const std::string& MoveFLRes::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void MoveFLRes::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* MoveFLRes::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* MoveFLRes::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveFLRes.msg)
  return _impl_.msg_.Release();
}
inline void MoveFLRes::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveFLRes.msg)
}

// -------------------------------------------------------------------

// TransformedFTSensorData

// float ft_Fx = 1;
inline void TransformedFTSensorData::clear_ft_fx() {
  _impl_.ft_fx_ = 0;
}
inline float TransformedFTSensorData::ft_fx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TransformedFTSensorData.ft_Fx)
  return _internal_ft_fx();
}
inline void TransformedFTSensorData::set_ft_fx(float value) {
  _internal_set_ft_fx(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TransformedFTSensorData.ft_Fx)
}
inline float TransformedFTSensorData::_internal_ft_fx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_fx_;
}
inline void TransformedFTSensorData::_internal_set_ft_fx(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_fx_ = value;
}

// float ft_Fy = 2;
inline void TransformedFTSensorData::clear_ft_fy() {
  _impl_.ft_fy_ = 0;
}
inline float TransformedFTSensorData::ft_fy() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TransformedFTSensorData.ft_Fy)
  return _internal_ft_fy();
}
inline void TransformedFTSensorData::set_ft_fy(float value) {
  _internal_set_ft_fy(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TransformedFTSensorData.ft_Fy)
}
inline float TransformedFTSensorData::_internal_ft_fy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_fy_;
}
inline void TransformedFTSensorData::_internal_set_ft_fy(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_fy_ = value;
}

// float ft_Fz = 3;
inline void TransformedFTSensorData::clear_ft_fz() {
  _impl_.ft_fz_ = 0;
}
inline float TransformedFTSensorData::ft_fz() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TransformedFTSensorData.ft_Fz)
  return _internal_ft_fz();
}
inline void TransformedFTSensorData::set_ft_fz(float value) {
  _internal_set_ft_fz(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TransformedFTSensorData.ft_Fz)
}
inline float TransformedFTSensorData::_internal_ft_fz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_fz_;
}
inline void TransformedFTSensorData::_internal_set_ft_fz(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_fz_ = value;
}

// float ft_Tx = 4;
inline void TransformedFTSensorData::clear_ft_tx() {
  _impl_.ft_tx_ = 0;
}
inline float TransformedFTSensorData::ft_tx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TransformedFTSensorData.ft_Tx)
  return _internal_ft_tx();
}
inline void TransformedFTSensorData::set_ft_tx(float value) {
  _internal_set_ft_tx(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TransformedFTSensorData.ft_Tx)
}
inline float TransformedFTSensorData::_internal_ft_tx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_tx_;
}
inline void TransformedFTSensorData::_internal_set_ft_tx(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_tx_ = value;
}

// float ft_Ty = 5;
inline void TransformedFTSensorData::clear_ft_ty() {
  _impl_.ft_ty_ = 0;
}
inline float TransformedFTSensorData::ft_ty() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TransformedFTSensorData.ft_Ty)
  return _internal_ft_ty();
}
inline void TransformedFTSensorData::set_ft_ty(float value) {
  _internal_set_ft_ty(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TransformedFTSensorData.ft_Ty)
}
inline float TransformedFTSensorData::_internal_ft_ty() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_ty_;
}
inline void TransformedFTSensorData::_internal_set_ft_ty(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_ty_ = value;
}

// float ft_Tz = 6;
inline void TransformedFTSensorData::clear_ft_tz() {
  _impl_.ft_tz_ = 0;
}
inline float TransformedFTSensorData::ft_tz() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TransformedFTSensorData.ft_Tz)
  return _internal_ft_tz();
}
inline void TransformedFTSensorData::set_ft_tz(float value) {
  _internal_set_ft_tz(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TransformedFTSensorData.ft_Tz)
}
inline float TransformedFTSensorData::_internal_ft_tz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_tz_;
}
inline void TransformedFTSensorData::_internal_set_ft_tz(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_tz_ = value;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool TransformedFTSensorData::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& TransformedFTSensorData::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& TransformedFTSensorData::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TransformedFTSensorData.response)
  return _internal_response();
}
inline void TransformedFTSensorData::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.TransformedFTSensorData.response)
}
inline ::Nrmk::IndyFramework::Response* TransformedFTSensorData::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* TransformedFTSensorData::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TransformedFTSensorData.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* TransformedFTSensorData::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* TransformedFTSensorData::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TransformedFTSensorData.response)
  return _msg;
}
inline void TransformedFTSensorData::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TransformedFTSensorData.response)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Nrmk::IndyFramework::MotionCondition_ConditionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::MotionCondition_ConditionType>() {
  return ::Nrmk::IndyFramework::MotionCondition_ConditionType_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::MotionCondition_ReactionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::MotionCondition_ReactionType>() {
  return ::Nrmk::IndyFramework::MotionCondition_ReactionType_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::BlendingType_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::BlendingType_Type>() {
  return ::Nrmk::IndyFramework::BlendingType_Type_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::ModbusVariable_SignalType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::ModbusVariable_SignalType>() {
  return ::Nrmk::IndyFramework::ModbusVariable_SignalType_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType>() {
  return ::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::JointBaseType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::JointBaseType>() {
  return ::Nrmk::IndyFramework::JointBaseType_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::TaskBaseType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::TaskBaseType>() {
  return ::Nrmk::IndyFramework::TaskBaseType_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::VelocityModeType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::VelocityModeType>() {
  return ::Nrmk::IndyFramework::VelocityModeType_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::CircularSettingType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::CircularSettingType>() {
  return ::Nrmk::IndyFramework::CircularSettingType_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::CircularMovingType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::CircularMovingType>() {
  return ::Nrmk::IndyFramework::CircularMovingType_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::TeleMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::TeleMode>() {
  return ::Nrmk::IndyFramework::TeleMode_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::TeleMethod> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::TeleMethod>() {
  return ::Nrmk::IndyFramework::TeleMethod_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2eproto_2epb_2eh
