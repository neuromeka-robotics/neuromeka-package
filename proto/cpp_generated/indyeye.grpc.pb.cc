// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: indyeye.proto

#include "indyeye.pb.h"
#include "indyeye.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace IndyFramework {
namespace Protobuf {
namespace EyeTask {

static const char* EyeTask_method_names[] = {
  "/IndyFramework.Protobuf.EyeTask.EyeTask/GetServerInfo",
  "/IndyFramework.Protobuf.EyeTask.EyeTask/GetImage",
  "/IndyFramework.Protobuf.EyeTask.EyeTask/GetClassList",
  "/IndyFramework.Protobuf.EyeTask.EyeTask/Detect",
  "/IndyFramework.Protobuf.EyeTask.EyeTask/Retrieve",
  "/IndyFramework.Protobuf.EyeTask.EyeTask/GetWeldingLinesInfo",
  "/IndyFramework.Protobuf.EyeTask.EyeTask/GetStraightLineInfo",
  "/IndyFramework.Protobuf.EyeTask.EyeTask/GetCircularLineInfo",
  "/IndyFramework.Protobuf.EyeTask.EyeTask/DoCalibration",
  "/IndyFramework.Protobuf.EyeTask.EyeTask/IsCalibrationDone",
};

std::unique_ptr< EyeTask::Stub> EyeTask::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EyeTask::Stub> stub(new EyeTask::Stub(channel, options));
  return stub;
}

EyeTask::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetServerInfo_(EyeTask_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImage_(EyeTask_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetClassList_(EyeTask_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Detect_(EyeTask_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Retrieve_(EyeTask_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWeldingLinesInfo_(EyeTask_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStraightLineInfo_(EyeTask_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCircularLineInfo_(EyeTask_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoCalibration_(EyeTask_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsCalibrationDone_(EyeTask_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EyeTask::Stub::GetServerInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest& request, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServerInfo_, context, request, response);
}

void EyeTask::Stub::async::GetServerInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerInfo_, context, request, response, std::move(f));
}

void EyeTask::Stub::async::GetServerInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>* EyeTask::Stub::PrepareAsyncGetServerInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse, ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServerInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>* EyeTask::Stub::AsyncGetServerInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServerInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EyeTask::Stub::GetImage(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest& request, ::IndyFramework::Protobuf::EyeTask::ImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::EyeTask::ImageRequest, ::IndyFramework::Protobuf::EyeTask::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImage_, context, request, response);
}

void EyeTask::Stub::async::GetImage(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* request, ::IndyFramework::Protobuf::EyeTask::ImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::EyeTask::ImageRequest, ::IndyFramework::Protobuf::EyeTask::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImage_, context, request, response, std::move(f));
}

void EyeTask::Stub::async::GetImage(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* request, ::IndyFramework::Protobuf::EyeTask::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ImageResponse>* EyeTask::Stub::PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::EyeTask::ImageResponse, ::IndyFramework::Protobuf::EyeTask::ImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ImageResponse>* EyeTask::Stub::AsyncGetImageRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EyeTask::Stub::GetClassList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request& request, ::IndyFramework::Protobuf::EyeTask::ClassList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::EyeTask::Request, ::IndyFramework::Protobuf::EyeTask::ClassList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetClassList_, context, request, response);
}

void EyeTask::Stub::async::GetClassList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request* request, ::IndyFramework::Protobuf::EyeTask::ClassList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::EyeTask::Request, ::IndyFramework::Protobuf::EyeTask::ClassList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClassList_, context, request, response, std::move(f));
}

void EyeTask::Stub::async::GetClassList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request* request, ::IndyFramework::Protobuf::EyeTask::ClassList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClassList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ClassList>* EyeTask::Stub::PrepareAsyncGetClassListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::EyeTask::ClassList, ::IndyFramework::Protobuf::EyeTask::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetClassList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ClassList>* EyeTask::Stub::AsyncGetClassListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetClassListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EyeTask::Stub::Detect(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest& request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::EyeTask::DetectRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Detect_, context, request, response);
}

void EyeTask::Stub::async::Detect(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::EyeTask::DetectRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Detect_, context, request, response, std::move(f));
}

void EyeTask::Stub::async::Detect(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Detect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>* EyeTask::Stub::PrepareAsyncDetectRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::EyeTask::DetectResponse, ::IndyFramework::Protobuf::EyeTask::DetectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Detect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>* EyeTask::Stub::AsyncDetectRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDetectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EyeTask::Stub::Retrieve(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest& request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::EyeTask::RetrieveRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Retrieve_, context, request, response);
}

void EyeTask::Stub::async::Retrieve(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::EyeTask::RetrieveRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Retrieve_, context, request, response, std::move(f));
}

void EyeTask::Stub::async::Retrieve(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Retrieve_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>* EyeTask::Stub::PrepareAsyncRetrieveRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::EyeTask::DetectResponse, ::IndyFramework::Protobuf::EyeTask::RetrieveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Retrieve_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>* EyeTask::Stub::AsyncRetrieveRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRetrieveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EyeTask::Stub::GetWeldingLinesInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest& request, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWeldingLinesInfo_, context, request, response);
}

void EyeTask::Stub::async::GetWeldingLinesInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWeldingLinesInfo_, context, request, response, std::move(f));
}

void EyeTask::Stub::async::GetWeldingLinesInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWeldingLinesInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>* EyeTask::Stub::PrepareAsyncGetWeldingLinesInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWeldingLinesInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>* EyeTask::Stub::AsyncGetWeldingLinesInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWeldingLinesInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EyeTask::Stub::GetStraightLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest& request, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStraightLineInfo_, context, request, response);
}

void EyeTask::Stub::async::GetStraightLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStraightLineInfo_, context, request, response, std::move(f));
}

void EyeTask::Stub::async::GetStraightLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStraightLineInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>* EyeTask::Stub::PrepareAsyncGetStraightLineInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStraightLineInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>* EyeTask::Stub::AsyncGetStraightLineInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStraightLineInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EyeTask::Stub::GetCircularLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest& request, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCircularLineInfo_, context, request, response);
}

void EyeTask::Stub::async::GetCircularLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCircularLineInfo_, context, request, response, std::move(f));
}

void EyeTask::Stub::async::GetCircularLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCircularLineInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>* EyeTask::Stub::PrepareAsyncGetCircularLineInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCircularLineInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>* EyeTask::Stub::AsyncGetCircularLineInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCircularLineInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EyeTask::Stub::DoCalibration(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest& request, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::EyeTask::CalibrationRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DoCalibration_, context, request, response);
}

void EyeTask::Stub::async::DoCalibration(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::EyeTask::CalibrationRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoCalibration_, context, request, response, std::move(f));
}

void EyeTask::Stub::async::DoCalibration(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoCalibration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>* EyeTask::Stub::PrepareAsyncDoCalibrationRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse, ::IndyFramework::Protobuf::EyeTask::CalibrationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DoCalibration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>* EyeTask::Stub::AsyncDoCalibrationRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoCalibrationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EyeTask::Stub::IsCalibrationDone(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest& request, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsCalibrationDone_, context, request, response);
}

void EyeTask::Stub::async::IsCalibrationDone(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsCalibrationDone_, context, request, response, std::move(f));
}

void EyeTask::Stub::async::IsCalibrationDone(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsCalibrationDone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>* EyeTask::Stub::PrepareAsyncIsCalibrationDoneRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsCalibrationDone_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>* EyeTask::Stub::AsyncIsCalibrationDoneRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsCalibrationDoneRaw(context, request, cq);
  result->StartCall();
  return result;
}

EyeTask::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EyeTask_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EyeTask::Service, ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EyeTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* req,
             ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* resp) {
               return service->GetServerInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EyeTask_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EyeTask::Service, ::IndyFramework::Protobuf::EyeTask::ImageRequest, ::IndyFramework::Protobuf::EyeTask::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EyeTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::EyeTask::ImageRequest* req,
             ::IndyFramework::Protobuf::EyeTask::ImageResponse* resp) {
               return service->GetImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EyeTask_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EyeTask::Service, ::IndyFramework::Protobuf::EyeTask::Request, ::IndyFramework::Protobuf::EyeTask::ClassList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EyeTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::EyeTask::Request* req,
             ::IndyFramework::Protobuf::EyeTask::ClassList* resp) {
               return service->GetClassList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EyeTask_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EyeTask::Service, ::IndyFramework::Protobuf::EyeTask::DetectRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EyeTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::EyeTask::DetectRequest* req,
             ::IndyFramework::Protobuf::EyeTask::DetectResponse* resp) {
               return service->Detect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EyeTask_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EyeTask::Service, ::IndyFramework::Protobuf::EyeTask::RetrieveRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EyeTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* req,
             ::IndyFramework::Protobuf::EyeTask::DetectResponse* resp) {
               return service->Retrieve(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EyeTask_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EyeTask::Service, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EyeTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* req,
             ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* resp) {
               return service->GetWeldingLinesInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EyeTask_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EyeTask::Service, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EyeTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* req,
             ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* resp) {
               return service->GetStraightLineInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EyeTask_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EyeTask::Service, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EyeTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* req,
             ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* resp) {
               return service->GetCircularLineInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EyeTask_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EyeTask::Service, ::IndyFramework::Protobuf::EyeTask::CalibrationRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EyeTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* req,
             ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* resp) {
               return service->DoCalibration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EyeTask_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EyeTask::Service, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EyeTask::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* req,
             ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* resp) {
               return service->IsCalibrationDone(ctx, req, resp);
             }, this)));
}

EyeTask::Service::~Service() {
}

::grpc::Status EyeTask::Service::GetServerInfo(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EyeTask::Service::GetImage(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* request, ::IndyFramework::Protobuf::EyeTask::ImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EyeTask::Service::GetClassList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::Request* request, ::IndyFramework::Protobuf::EyeTask::ClassList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EyeTask::Service::Detect(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EyeTask::Service::Retrieve(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EyeTask::Service::GetWeldingLinesInfo(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EyeTask::Service::GetStraightLineInfo(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EyeTask::Service::GetCircularLineInfo(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EyeTask::Service::DoCalibration(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EyeTask::Service::IsCalibrationDone(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace IndyFramework
}  // namespace Protobuf
}  // namespace EyeTask

