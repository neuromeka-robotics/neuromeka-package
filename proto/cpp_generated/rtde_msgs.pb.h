// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtde_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rtde_5fmsgs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_rtde_5fmsgs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "device_msgs.pb.h"
#include "common_msgs.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_rtde_5fmsgs_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_rtde_5fmsgs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_rtde_5fmsgs_2eproto;
namespace Nrmk {
namespace IndyFramework {
class ControlData;
struct ControlDataDefaultTypeInternal;
extern ControlDataDefaultTypeInternal _ControlData_default_instance_;
class ControlData2;
struct ControlData2DefaultTypeInternal;
extern ControlData2DefaultTypeInternal _ControlData2_default_instance_;
class IOData;
struct IODataDefaultTypeInternal;
extern IODataDefaultTypeInternal _IOData_default_instance_;
class MotionData;
struct MotionDataDefaultTypeInternal;
extern MotionDataDefaultTypeInternal _MotionData_default_instance_;
class ProgramData;
struct ProgramDataDefaultTypeInternal;
extern ProgramDataDefaultTypeInternal _ProgramData_default_instance_;
class ServoData;
struct ServoDataDefaultTypeInternal;
extern ServoDataDefaultTypeInternal _ServoData_default_instance_;
class StopState;
struct StopStateDefaultTypeInternal;
extern StopStateDefaultTypeInternal _StopState_default_instance_;
class TestRequest;
struct TestRequestDefaultTypeInternal;
extern TestRequestDefaultTypeInternal _TestRequest_default_instance_;
class TestResponse;
struct TestResponseDefaultTypeInternal;
extern TestResponseDefaultTypeInternal _TestResponse_default_instance_;
class ViolationData;
struct ViolationDataDefaultTypeInternal;
extern ViolationDataDefaultTypeInternal _ViolationData_default_instance_;
class ViolationMessageQueue;
struct ViolationMessageQueueDefaultTypeInternal;
extern ViolationMessageQueueDefaultTypeInternal _ViolationMessageQueue_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Nrmk {
namespace IndyFramework {
enum StopState_StopCategory : int {
  StopState_StopCategory_STOP_CAT_0 = 0,
  StopState_StopCategory_STOP_CAT_1 = 1,
  StopState_StopCategory_STOP_CAT_2 = 2,
  StopState_StopCategory_STOP_CAT_NONE = -1,
  StopState_StopCategory_StopState_StopCategory_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StopState_StopCategory_StopState_StopCategory_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StopState_StopCategory_IsValid(int value);
constexpr StopState_StopCategory StopState_StopCategory_StopCategory_MIN = static_cast<StopState_StopCategory>(-1);
constexpr StopState_StopCategory StopState_StopCategory_StopCategory_MAX = static_cast<StopState_StopCategory>(2);
constexpr int StopState_StopCategory_StopCategory_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
StopState_StopCategory_descriptor();
template <typename T>
const std::string& StopState_StopCategory_Name(T value) {
  static_assert(std::is_same<T, StopState_StopCategory>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StopCategory_Name().");
  return StopState_StopCategory_Name(static_cast<StopState_StopCategory>(value));
}
template <>
inline const std::string& StopState_StopCategory_Name(StopState_StopCategory value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StopState_StopCategory_descriptor,
                                                 -1, 2>(
      static_cast<int>(value));
}
inline bool StopState_StopCategory_Parse(absl::string_view name, StopState_StopCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StopState_StopCategory>(
      StopState_StopCategory_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TestRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TestRequest) */ {
 public:
  inline TestRequest() : TestRequest(nullptr) {}
  ~TestRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestRequest(::google::protobuf::internal::ConstantInitialized);

  TestRequest(const TestRequest& from);
  TestRequest(TestRequest&& from) noexcept
    : TestRequest() {
    *this = ::std::move(from);
  }

  inline TestRequest& operator=(const TestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRequest& operator=(TestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRequest* internal_default_instance() {
    return reinterpret_cast<const TestRequest*>(
               &_TestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestRequest& a, TestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TestRequest& from) {
    TestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TestRequest";
  }
  protected:
  explicit TestRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrValFieldNumber = 2,
    kIntValFieldNumber = 1,
  };
  // string strVal = 2;
  void clear_strval() ;
  const std::string& strval() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strval(Arg_&& arg, Args_... args);
  std::string* mutable_strval();
  PROTOBUF_NODISCARD std::string* release_strval();
  void set_allocated_strval(std::string* ptr);

  private:
  const std::string& _internal_strval() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strval(
      const std::string& value);
  std::string* _internal_mutable_strval();

  public:
  // int32 intVal = 1;
  void clear_intval() ;
  ::int32_t intval() const;
  void set_intval(::int32_t value);

  private:
  ::int32_t _internal_intval() const;
  void _internal_set_intval(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TestRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr strval_;
    ::int32_t intval_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class TestResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TestResponse) */ {
 public:
  inline TestResponse() : TestResponse(nullptr) {}
  ~TestResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestResponse(::google::protobuf::internal::ConstantInitialized);

  TestResponse(const TestResponse& from);
  TestResponse(TestResponse&& from) noexcept
    : TestResponse() {
    *this = ::std::move(from);
  }

  inline TestResponse& operator=(const TestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestResponse& operator=(TestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestResponse* internal_default_instance() {
    return reinterpret_cast<const TestResponse*>(
               &_TestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestResponse& a, TestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TestResponse& from) {
    TestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.TestResponse";
  }
  protected:
  explicit TestResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // int64 code = 1;
  void clear_code() ;
  ::int64_t code() const;
  void set_code(::int64_t value);

  private:
  ::int64_t _internal_code() const;
  void _internal_set_code(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TestResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 43, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::int64_t code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MotionData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MotionData) */ {
 public:
  inline MotionData() : MotionData(nullptr) {}
  ~MotionData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MotionData(::google::protobuf::internal::ConstantInitialized);

  MotionData(const MotionData& from);
  MotionData(MotionData&& from) noexcept
    : MotionData() {
    *this = ::std::move(from);
  }

  inline MotionData& operator=(const MotionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionData& operator=(MotionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionData* internal_default_instance() {
    return reinterpret_cast<const MotionData*>(
               &_MotionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MotionData& a, MotionData& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotionData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotionData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MotionData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MotionData& from) {
    MotionData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MotionData";
  }
  protected:
  explicit MotionData(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 100,
    kTrajStateFieldNumber = 1,
    kTrajProgressFieldNumber = 2,
    kIsInMotionFieldNumber = 3,
    kIsTargetReachedFieldNumber = 4,
    kIsPausingFieldNumber = 5,
    kIsStoppingFieldNumber = 6,
    kHasMotionFieldNumber = 7,
    kSpeedRatioFieldNumber = 8,
    kMotionIdFieldNumber = 9,
    kRemainDistanceFieldNumber = 10,
    kMotionQueueSizeFieldNumber = 11,
    kCurTrajProgressFieldNumber = 12,
  };
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // .Nrmk.IndyFramework.TrajState traj_state = 1;
  void clear_traj_state() ;
  ::Nrmk::IndyFramework::TrajState traj_state() const;
  void set_traj_state(::Nrmk::IndyFramework::TrajState value);

  private:
  ::Nrmk::IndyFramework::TrajState _internal_traj_state() const;
  void _internal_set_traj_state(::Nrmk::IndyFramework::TrajState value);

  public:
  // int32 traj_progress = 2;
  void clear_traj_progress() ;
  ::int32_t traj_progress() const;
  void set_traj_progress(::int32_t value);

  private:
  ::int32_t _internal_traj_progress() const;
  void _internal_set_traj_progress(::int32_t value);

  public:
  // bool is_in_motion = 3;
  void clear_is_in_motion() ;
  bool is_in_motion() const;
  void set_is_in_motion(bool value);

  private:
  bool _internal_is_in_motion() const;
  void _internal_set_is_in_motion(bool value);

  public:
  // bool is_target_reached = 4;
  void clear_is_target_reached() ;
  bool is_target_reached() const;
  void set_is_target_reached(bool value);

  private:
  bool _internal_is_target_reached() const;
  void _internal_set_is_target_reached(bool value);

  public:
  // bool is_pausing = 5;
  void clear_is_pausing() ;
  bool is_pausing() const;
  void set_is_pausing(bool value);

  private:
  bool _internal_is_pausing() const;
  void _internal_set_is_pausing(bool value);

  public:
  // bool is_stopping = 6;
  void clear_is_stopping() ;
  bool is_stopping() const;
  void set_is_stopping(bool value);

  private:
  bool _internal_is_stopping() const;
  void _internal_set_is_stopping(bool value);

  public:
  // bool has_motion = 7;
  void clear_has_motion() ;
  bool has_motion() const;
  void set_has_motion(bool value);

  private:
  bool _internal_has_motion() const;
  void _internal_set_has_motion(bool value);

  public:
  // int32 speed_ratio = 8;
  void clear_speed_ratio() ;
  ::int32_t speed_ratio() const;
  void set_speed_ratio(::int32_t value);

  private:
  ::int32_t _internal_speed_ratio() const;
  void _internal_set_speed_ratio(::int32_t value);

  public:
  // int32 motion_id = 9;
  void clear_motion_id() ;
  ::int32_t motion_id() const;
  void set_motion_id(::int32_t value);

  private:
  ::int32_t _internal_motion_id() const;
  void _internal_set_motion_id(::int32_t value);

  public:
  // float remain_distance = 10;
  void clear_remain_distance() ;
  float remain_distance() const;
  void set_remain_distance(float value);

  private:
  float _internal_remain_distance() const;
  void _internal_set_remain_distance(float value);

  public:
  // uint32 motion_queue_size = 11;
  void clear_motion_queue_size() ;
  ::uint32_t motion_queue_size() const;
  void set_motion_queue_size(::uint32_t value);

  private:
  ::uint32_t _internal_motion_queue_size() const;
  void _internal_set_motion_queue_size(::uint32_t value);

  public:
  // int32 cur_traj_progress = 12;
  void clear_cur_traj_progress() ;
  ::int32_t cur_traj_progress() const;
  void set_cur_traj_progress(::int32_t value);

  private:
  ::int32_t _internal_cur_traj_progress() const;
  void _internal_set_cur_traj_progress(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MotionData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 13, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::Response* response_;
    int traj_state_;
    ::int32_t traj_progress_;
    bool is_in_motion_;
    bool is_target_reached_;
    bool is_pausing_;
    bool is_stopping_;
    bool has_motion_;
    ::int32_t speed_ratio_;
    ::int32_t motion_id_;
    float remain_distance_;
    ::uint32_t motion_queue_size_;
    ::int32_t cur_traj_progress_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ControlData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ControlData) */ {
 public:
  inline ControlData() : ControlData(nullptr) {}
  ~ControlData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ControlData(::google::protobuf::internal::ConstantInitialized);

  ControlData(const ControlData& from);
  ControlData(ControlData&& from) noexcept
    : ControlData() {
    *this = ::std::move(from);
  }

  inline ControlData& operator=(const ControlData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlData& operator=(ControlData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlData* internal_default_instance() {
    return reinterpret_cast<const ControlData*>(
               &_ControlData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ControlData& a, ControlData& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControlData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ControlData& from) {
    ControlData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ControlData";
  }
  protected:
  explicit ControlData(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 10,
    kQdotFieldNumber = 11,
    kPFieldNumber = 12,
    kPdotFieldNumber = 13,
    kRefFrameFieldNumber = 20,
    kToolFrameFieldNumber = 21,
    kResponseFieldNumber = 100,
    kRunningHoursFieldNumber = 1,
    kRunningMinsFieldNumber = 2,
    kRunningSecsFieldNumber = 3,
    kOpStateFieldNumber = 4,
    kSimModeFieldNumber = 5,
  };
  // repeated float q = 10;
  int q_size() const;
  private:
  int _internal_q_size() const;

  public:
  void clear_q() ;
  float q(int index) const;
  void set_q(int index, float value);
  void add_q(float value);
  const ::google::protobuf::RepeatedField<float>& q() const;
  ::google::protobuf::RepeatedField<float>* mutable_q();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_q() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_q();

  public:
  // repeated float qdot = 11;
  int qdot_size() const;
  private:
  int _internal_qdot_size() const;

  public:
  void clear_qdot() ;
  float qdot(int index) const;
  void set_qdot(int index, float value);
  void add_qdot(float value);
  const ::google::protobuf::RepeatedField<float>& qdot() const;
  ::google::protobuf::RepeatedField<float>* mutable_qdot();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_qdot() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_qdot();

  public:
  // repeated float p = 12;
  int p_size() const;
  private:
  int _internal_p_size() const;

  public:
  void clear_p() ;
  float p(int index) const;
  void set_p(int index, float value);
  void add_p(float value);
  const ::google::protobuf::RepeatedField<float>& p() const;
  ::google::protobuf::RepeatedField<float>* mutable_p();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_p() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_p();

  public:
  // repeated float pdot = 13;
  int pdot_size() const;
  private:
  int _internal_pdot_size() const;

  public:
  void clear_pdot() ;
  float pdot(int index) const;
  void set_pdot(int index, float value);
  void add_pdot(float value);
  const ::google::protobuf::RepeatedField<float>& pdot() const;
  ::google::protobuf::RepeatedField<float>* mutable_pdot();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_pdot() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_pdot();

  public:
  // repeated float ref_frame = 20;
  int ref_frame_size() const;
  private:
  int _internal_ref_frame_size() const;

  public:
  void clear_ref_frame() ;
  float ref_frame(int index) const;
  void set_ref_frame(int index, float value);
  void add_ref_frame(float value);
  const ::google::protobuf::RepeatedField<float>& ref_frame() const;
  ::google::protobuf::RepeatedField<float>* mutable_ref_frame();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_ref_frame() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_ref_frame();

  public:
  // repeated float tool_frame = 21;
  int tool_frame_size() const;
  private:
  int _internal_tool_frame_size() const;

  public:
  void clear_tool_frame() ;
  float tool_frame(int index) const;
  void set_tool_frame(int index, float value);
  void add_tool_frame(float value);
  const ::google::protobuf::RepeatedField<float>& tool_frame() const;
  ::google::protobuf::RepeatedField<float>* mutable_tool_frame();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tool_frame() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tool_frame();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // uint32 running_hours = 1;
  void clear_running_hours() ;
  ::uint32_t running_hours() const;
  void set_running_hours(::uint32_t value);

  private:
  ::uint32_t _internal_running_hours() const;
  void _internal_set_running_hours(::uint32_t value);

  public:
  // uint32 running_mins = 2;
  void clear_running_mins() ;
  ::uint32_t running_mins() const;
  void set_running_mins(::uint32_t value);

  private:
  ::uint32_t _internal_running_mins() const;
  void _internal_set_running_mins(::uint32_t value);

  public:
  // uint32 running_secs = 3;
  void clear_running_secs() ;
  ::uint32_t running_secs() const;
  void set_running_secs(::uint32_t value);

  private:
  ::uint32_t _internal_running_secs() const;
  void _internal_set_running_secs(::uint32_t value);

  public:
  // .Nrmk.IndyFramework.OpState op_state = 4;
  void clear_op_state() ;
  ::Nrmk::IndyFramework::OpState op_state() const;
  void set_op_state(::Nrmk::IndyFramework::OpState value);

  private:
  ::Nrmk::IndyFramework::OpState _internal_op_state() const;
  void _internal_set_op_state(::Nrmk::IndyFramework::OpState value);

  public:
  // bool sim_mode = 5;
  void clear_sim_mode() ;
  bool sim_mode() const;
  void set_sim_mode(bool value);

  private:
  bool _internal_sim_mode() const;
  void _internal_set_sim_mode(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ControlData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 12, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> q_;
    ::google::protobuf::RepeatedField<float> qdot_;
    ::google::protobuf::RepeatedField<float> p_;
    ::google::protobuf::RepeatedField<float> pdot_;
    ::google::protobuf::RepeatedField<float> ref_frame_;
    ::google::protobuf::RepeatedField<float> tool_frame_;
    ::Nrmk::IndyFramework::Response* response_;
    ::uint32_t running_hours_;
    ::uint32_t running_mins_;
    ::uint32_t running_secs_;
    int op_state_;
    bool sim_mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ControlData2 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ControlData2) */ {
 public:
  inline ControlData2() : ControlData2(nullptr) {}
  ~ControlData2() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ControlData2(::google::protobuf::internal::ConstantInitialized);

  ControlData2(const ControlData2& from);
  ControlData2(ControlData2&& from) noexcept
    : ControlData2() {
    *this = ::std::move(from);
  }

  inline ControlData2& operator=(const ControlData2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlData2& operator=(ControlData2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlData2& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlData2* internal_default_instance() {
    return reinterpret_cast<const ControlData2*>(
               &_ControlData2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ControlData2& a, ControlData2& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlData2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlData2* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlData2* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlData2>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControlData2& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ControlData2& from) {
    ControlData2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlData2* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ControlData2";
  }
  protected:
  explicit ControlData2(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 1,
    kQdotFieldNumber = 2,
    kQddotFieldNumber = 3,
    kQdesFieldNumber = 4,
    kQdotdesFieldNumber = 5,
    kQddotdesFieldNumber = 6,
    kPFieldNumber = 10,
    kPdotFieldNumber = 11,
    kPddotFieldNumber = 12,
    kPdesFieldNumber = 13,
    kPdotdesFieldNumber = 14,
    kPddotdesFieldNumber = 15,
    kTauFieldNumber = 20,
    kTauActFieldNumber = 21,
    kTauExtFieldNumber = 22,
    kResponseFieldNumber = 100,
  };
  // repeated float q = 1;
  int q_size() const;
  private:
  int _internal_q_size() const;

  public:
  void clear_q() ;
  float q(int index) const;
  void set_q(int index, float value);
  void add_q(float value);
  const ::google::protobuf::RepeatedField<float>& q() const;
  ::google::protobuf::RepeatedField<float>* mutable_q();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_q() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_q();

  public:
  // repeated float qdot = 2;
  int qdot_size() const;
  private:
  int _internal_qdot_size() const;

  public:
  void clear_qdot() ;
  float qdot(int index) const;
  void set_qdot(int index, float value);
  void add_qdot(float value);
  const ::google::protobuf::RepeatedField<float>& qdot() const;
  ::google::protobuf::RepeatedField<float>* mutable_qdot();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_qdot() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_qdot();

  public:
  // repeated float qddot = 3;
  int qddot_size() const;
  private:
  int _internal_qddot_size() const;

  public:
  void clear_qddot() ;
  float qddot(int index) const;
  void set_qddot(int index, float value);
  void add_qddot(float value);
  const ::google::protobuf::RepeatedField<float>& qddot() const;
  ::google::protobuf::RepeatedField<float>* mutable_qddot();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_qddot() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_qddot();

  public:
  // repeated float qdes = 4;
  int qdes_size() const;
  private:
  int _internal_qdes_size() const;

  public:
  void clear_qdes() ;
  float qdes(int index) const;
  void set_qdes(int index, float value);
  void add_qdes(float value);
  const ::google::protobuf::RepeatedField<float>& qdes() const;
  ::google::protobuf::RepeatedField<float>* mutable_qdes();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_qdes() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_qdes();

  public:
  // repeated float qdotdes = 5;
  int qdotdes_size() const;
  private:
  int _internal_qdotdes_size() const;

  public:
  void clear_qdotdes() ;
  float qdotdes(int index) const;
  void set_qdotdes(int index, float value);
  void add_qdotdes(float value);
  const ::google::protobuf::RepeatedField<float>& qdotdes() const;
  ::google::protobuf::RepeatedField<float>* mutable_qdotdes();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_qdotdes() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_qdotdes();

  public:
  // repeated float qddotdes = 6;
  int qddotdes_size() const;
  private:
  int _internal_qddotdes_size() const;

  public:
  void clear_qddotdes() ;
  float qddotdes(int index) const;
  void set_qddotdes(int index, float value);
  void add_qddotdes(float value);
  const ::google::protobuf::RepeatedField<float>& qddotdes() const;
  ::google::protobuf::RepeatedField<float>* mutable_qddotdes();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_qddotdes() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_qddotdes();

  public:
  // repeated float p = 10;
  int p_size() const;
  private:
  int _internal_p_size() const;

  public:
  void clear_p() ;
  float p(int index) const;
  void set_p(int index, float value);
  void add_p(float value);
  const ::google::protobuf::RepeatedField<float>& p() const;
  ::google::protobuf::RepeatedField<float>* mutable_p();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_p() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_p();

  public:
  // repeated float pdot = 11;
  int pdot_size() const;
  private:
  int _internal_pdot_size() const;

  public:
  void clear_pdot() ;
  float pdot(int index) const;
  void set_pdot(int index, float value);
  void add_pdot(float value);
  const ::google::protobuf::RepeatedField<float>& pdot() const;
  ::google::protobuf::RepeatedField<float>* mutable_pdot();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_pdot() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_pdot();

  public:
  // repeated float pddot = 12;
  int pddot_size() const;
  private:
  int _internal_pddot_size() const;

  public:
  void clear_pddot() ;
  float pddot(int index) const;
  void set_pddot(int index, float value);
  void add_pddot(float value);
  const ::google::protobuf::RepeatedField<float>& pddot() const;
  ::google::protobuf::RepeatedField<float>* mutable_pddot();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_pddot() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_pddot();

  public:
  // repeated float pdes = 13;
  int pdes_size() const;
  private:
  int _internal_pdes_size() const;

  public:
  void clear_pdes() ;
  float pdes(int index) const;
  void set_pdes(int index, float value);
  void add_pdes(float value);
  const ::google::protobuf::RepeatedField<float>& pdes() const;
  ::google::protobuf::RepeatedField<float>* mutable_pdes();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_pdes() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_pdes();

  public:
  // repeated float pdotdes = 14;
  int pdotdes_size() const;
  private:
  int _internal_pdotdes_size() const;

  public:
  void clear_pdotdes() ;
  float pdotdes(int index) const;
  void set_pdotdes(int index, float value);
  void add_pdotdes(float value);
  const ::google::protobuf::RepeatedField<float>& pdotdes() const;
  ::google::protobuf::RepeatedField<float>* mutable_pdotdes();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_pdotdes() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_pdotdes();

  public:
  // repeated float pddotdes = 15;
  int pddotdes_size() const;
  private:
  int _internal_pddotdes_size() const;

  public:
  void clear_pddotdes() ;
  float pddotdes(int index) const;
  void set_pddotdes(int index, float value);
  void add_pddotdes(float value);
  const ::google::protobuf::RepeatedField<float>& pddotdes() const;
  ::google::protobuf::RepeatedField<float>* mutable_pddotdes();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_pddotdes() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_pddotdes();

  public:
  // repeated float tau = 20;
  int tau_size() const;
  private:
  int _internal_tau_size() const;

  public:
  void clear_tau() ;
  float tau(int index) const;
  void set_tau(int index, float value);
  void add_tau(float value);
  const ::google::protobuf::RepeatedField<float>& tau() const;
  ::google::protobuf::RepeatedField<float>* mutable_tau();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tau() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tau();

  public:
  // repeated float tau_act = 21;
  int tau_act_size() const;
  private:
  int _internal_tau_act_size() const;

  public:
  void clear_tau_act() ;
  float tau_act(int index) const;
  void set_tau_act(int index, float value);
  void add_tau_act(float value);
  const ::google::protobuf::RepeatedField<float>& tau_act() const;
  ::google::protobuf::RepeatedField<float>* mutable_tau_act();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tau_act() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tau_act();

  public:
  // repeated float tau_ext = 22;
  int tau_ext_size() const;
  private:
  int _internal_tau_ext_size() const;

  public:
  void clear_tau_ext() ;
  float tau_ext(int index) const;
  void set_tau_ext(int index, float value);
  void add_tau_ext(float value);
  const ::google::protobuf::RepeatedField<float>& tau_ext() const;
  ::google::protobuf::RepeatedField<float>* mutable_tau_ext();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tau_ext() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tau_ext();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ControlData2)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 16, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> q_;
    ::google::protobuf::RepeatedField<float> qdot_;
    ::google::protobuf::RepeatedField<float> qddot_;
    ::google::protobuf::RepeatedField<float> qdes_;
    ::google::protobuf::RepeatedField<float> qdotdes_;
    ::google::protobuf::RepeatedField<float> qddotdes_;
    ::google::protobuf::RepeatedField<float> p_;
    ::google::protobuf::RepeatedField<float> pdot_;
    ::google::protobuf::RepeatedField<float> pddot_;
    ::google::protobuf::RepeatedField<float> pdes_;
    ::google::protobuf::RepeatedField<float> pdotdes_;
    ::google::protobuf::RepeatedField<float> pddotdes_;
    ::google::protobuf::RepeatedField<float> tau_;
    ::google::protobuf::RepeatedField<float> tau_act_;
    ::google::protobuf::RepeatedField<float> tau_ext_;
    ::Nrmk::IndyFramework::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class IOData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IOData) */ {
 public:
  inline IOData() : IOData(nullptr) {}
  ~IOData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IOData(::google::protobuf::internal::ConstantInitialized);

  IOData(const IOData& from);
  IOData(IOData&& from) noexcept
    : IOData() {
    *this = ::std::move(from);
  }

  inline IOData& operator=(const IOData& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOData& operator=(IOData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IOData& default_instance() {
    return *internal_default_instance();
  }
  static inline const IOData* internal_default_instance() {
    return reinterpret_cast<const IOData*>(
               &_IOData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IOData& a, IOData& b) {
    a.Swap(&b);
  }
  inline void Swap(IOData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IOData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IOData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IOData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IOData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IOData& from) {
    IOData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.IOData";
  }
  protected:
  explicit IOData(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiFieldNumber = 1,
    kDoFieldNumber = 2,
    kAiFieldNumber = 3,
    kAoFieldNumber = 4,
    kEndDiFieldNumber = 5,
    kEndDoFieldNumber = 6,
    kEndAiFieldNumber = 7,
    kEndAoFieldNumber = 8,
    kResponseFieldNumber = 100,
  };
  // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
  int di_size() const;
  private:
  int _internal_di_size() const;

  public:
  void clear_di() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_di(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_di();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_di() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_di();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& di(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_di();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      di() const;
  // repeated .Nrmk.IndyFramework.DigitalSignal do = 2;
  int do__size() const;
  private:
  int _internal_do__size() const;

  public:
  void clear_do_() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_do_(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_do_();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_do_() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_do_();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& do_(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_do_();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      do_() const;
  // repeated .Nrmk.IndyFramework.AnalogSignal ai = 3;
  int ai_size() const;
  private:
  int _internal_ai_size() const;

  public:
  void clear_ai() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_ai(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_ai();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_ai() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_ai();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& ai(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_ai();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      ai() const;
  // repeated .Nrmk.IndyFramework.AnalogSignal ao = 4;
  int ao_size() const;
  private:
  int _internal_ao_size() const;

  public:
  void clear_ao() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_ao(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_ao();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_ao() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_ao();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& ao(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_ao();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      ao() const;
  // repeated .Nrmk.IndyFramework.EndtoolSignal end_di = 5;
  int end_di_size() const;
  private:
  int _internal_end_di_size() const;

  public:
  void clear_end_di() ;
  ::Nrmk::IndyFramework::EndtoolSignal* mutable_end_di(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >*
      mutable_end_di();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::EndtoolSignal>& _internal_end_di() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::EndtoolSignal>* _internal_mutable_end_di();
  public:
  const ::Nrmk::IndyFramework::EndtoolSignal& end_di(int index) const;
  ::Nrmk::IndyFramework::EndtoolSignal* add_end_di();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >&
      end_di() const;
  // repeated .Nrmk.IndyFramework.EndtoolSignal end_do = 6;
  int end_do_size() const;
  private:
  int _internal_end_do_size() const;

  public:
  void clear_end_do() ;
  ::Nrmk::IndyFramework::EndtoolSignal* mutable_end_do(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >*
      mutable_end_do();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::EndtoolSignal>& _internal_end_do() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::EndtoolSignal>* _internal_mutable_end_do();
  public:
  const ::Nrmk::IndyFramework::EndtoolSignal& end_do(int index) const;
  ::Nrmk::IndyFramework::EndtoolSignal* add_end_do();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >&
      end_do() const;
  // repeated .Nrmk.IndyFramework.AnalogSignal end_ai = 7;
  int end_ai_size() const;
  private:
  int _internal_end_ai_size() const;

  public:
  void clear_end_ai() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_end_ai(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_end_ai();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_end_ai() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_end_ai();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& end_ai(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_end_ai();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      end_ai() const;
  // repeated .Nrmk.IndyFramework.AnalogSignal end_ao = 8;
  int end_ao_size() const;
  private:
  int _internal_end_ao_size() const;

  public:
  void clear_end_ao() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_end_ao(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_end_ao();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_end_ao() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_end_ao();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& end_ao(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_end_ao();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      end_ao() const;
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IOData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 9, 9, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > di_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > do__;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > ai_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > ao_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal > end_di_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal > end_do_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > end_ai_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > end_ao_;
    ::Nrmk::IndyFramework::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ViolationData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ViolationData) */ {
 public:
  inline ViolationData() : ViolationData(nullptr) {}
  ~ViolationData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViolationData(::google::protobuf::internal::ConstantInitialized);

  ViolationData(const ViolationData& from);
  ViolationData(ViolationData&& from) noexcept
    : ViolationData() {
    *this = ::std::move(from);
  }

  inline ViolationData& operator=(const ViolationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViolationData& operator=(ViolationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViolationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViolationData* internal_default_instance() {
    return reinterpret_cast<const ViolationData*>(
               &_ViolationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ViolationData& a, ViolationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ViolationData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViolationData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViolationData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViolationData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ViolationData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ViolationData& from) {
    ViolationData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViolationData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ViolationData";
  }
  protected:
  explicit ViolationData(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIArgsFieldNumber = 3,
    kFArgsFieldNumber = 4,
    kViolationStrFieldNumber = 5,
    kResponseFieldNumber = 100,
    kViolationCodeFieldNumber = 1,
    kJIndexFieldNumber = 2,
  };
  // repeated int32 i_args = 3;
  int i_args_size() const;
  private:
  int _internal_i_args_size() const;

  public:
  void clear_i_args() ;
  ::int32_t i_args(int index) const;
  void set_i_args(int index, ::int32_t value);
  void add_i_args(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& i_args() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_i_args();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_i_args() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_i_args();

  public:
  // repeated float f_args = 4;
  int f_args_size() const;
  private:
  int _internal_f_args_size() const;

  public:
  void clear_f_args() ;
  float f_args(int index) const;
  void set_f_args(int index, float value);
  void add_f_args(float value);
  const ::google::protobuf::RepeatedField<float>& f_args() const;
  ::google::protobuf::RepeatedField<float>* mutable_f_args();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_f_args() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_f_args();

  public:
  // string violation_str = 5;
  void clear_violation_str() ;
  const std::string& violation_str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_violation_str(Arg_&& arg, Args_... args);
  std::string* mutable_violation_str();
  PROTOBUF_NODISCARD std::string* release_violation_str();
  void set_allocated_violation_str(std::string* ptr);

  private:
  const std::string& _internal_violation_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_violation_str(
      const std::string& value);
  std::string* _internal_mutable_violation_str();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // uint64 violation_code = 1;
  void clear_violation_code() ;
  ::uint64_t violation_code() const;
  void set_violation_code(::uint64_t value);

  private:
  ::uint64_t _internal_violation_code() const;
  void _internal_set_violation_code(::uint64_t value);

  public:
  // uint32 j_index = 2;
  void clear_j_index() ;
  ::uint32_t j_index() const;
  void set_j_index(::uint32_t value);

  private:
  ::uint32_t _internal_j_index() const;
  void _internal_set_j_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ViolationData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 1, 54, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> i_args_;
    mutable ::google::protobuf::internal::CachedSize _i_args_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> f_args_;
    ::google::protobuf::internal::ArenaStringPtr violation_str_;
    ::Nrmk::IndyFramework::Response* response_;
    ::uint64_t violation_code_;
    ::uint32_t j_index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ViolationMessageQueue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ViolationMessageQueue) */ {
 public:
  inline ViolationMessageQueue() : ViolationMessageQueue(nullptr) {}
  ~ViolationMessageQueue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ViolationMessageQueue(::google::protobuf::internal::ConstantInitialized);

  ViolationMessageQueue(const ViolationMessageQueue& from);
  ViolationMessageQueue(ViolationMessageQueue&& from) noexcept
    : ViolationMessageQueue() {
    *this = ::std::move(from);
  }

  inline ViolationMessageQueue& operator=(const ViolationMessageQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViolationMessageQueue& operator=(ViolationMessageQueue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViolationMessageQueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViolationMessageQueue* internal_default_instance() {
    return reinterpret_cast<const ViolationMessageQueue*>(
               &_ViolationMessageQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ViolationMessageQueue& a, ViolationMessageQueue& b) {
    a.Swap(&b);
  }
  inline void Swap(ViolationMessageQueue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViolationMessageQueue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViolationMessageQueue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViolationMessageQueue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ViolationMessageQueue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ViolationMessageQueue& from) {
    ViolationMessageQueue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViolationMessageQueue* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ViolationMessageQueue";
  }
  protected:
  explicit ViolationMessageQueue(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViolationQueueFieldNumber = 1,
    kResponseFieldNumber = 100,
  };
  // repeated .Nrmk.IndyFramework.ViolationData violation_queue = 1;
  int violation_queue_size() const;
  private:
  int _internal_violation_queue_size() const;

  public:
  void clear_violation_queue() ;
  ::Nrmk::IndyFramework::ViolationData* mutable_violation_queue(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ViolationData >*
      mutable_violation_queue();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ViolationData>& _internal_violation_queue() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ViolationData>* _internal_mutable_violation_queue();
  public:
  const ::Nrmk::IndyFramework::ViolationData& violation_queue(int index) const;
  ::Nrmk::IndyFramework::ViolationData* add_violation_queue();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ViolationData >&
      violation_queue() const;
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ViolationMessageQueue)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ViolationData > violation_queue_;
    ::Nrmk::IndyFramework::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ServoData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ServoData) */ {
 public:
  inline ServoData() : ServoData(nullptr) {}
  ~ServoData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServoData(::google::protobuf::internal::ConstantInitialized);

  ServoData(const ServoData& from);
  ServoData(ServoData&& from) noexcept
    : ServoData() {
    *this = ::std::move(from);
  }

  inline ServoData& operator=(const ServoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoData& operator=(ServoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServoData* internal_default_instance() {
    return reinterpret_cast<const ServoData*>(
               &_ServoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ServoData& a, ServoData& b) {
    a.Swap(&b);
  }
  inline void Swap(ServoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServoData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServoData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServoData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServoData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServoData& from) {
    ServoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ServoData";
  }
  protected:
  explicit ServoData(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodesFieldNumber = 1,
    kTemperaturesFieldNumber = 2,
    kVoltagesFieldNumber = 3,
    kCurrentsFieldNumber = 4,
    kServoActivesFieldNumber = 10,
    kBrakeActivesFieldNumber = 11,
    kResponseFieldNumber = 100,
  };
  // repeated string status_codes = 1;
  int status_codes_size() const;
  private:
  int _internal_status_codes_size() const;

  public:
  void clear_status_codes() ;
  const std::string& status_codes(int index) const;
  std::string* mutable_status_codes(int index);
  void set_status_codes(int index, const std::string& value);
  void set_status_codes(int index, std::string&& value);
  void set_status_codes(int index, const char* value);
  void set_status_codes(int index, const char* value, std::size_t size);
  void set_status_codes(int index, absl::string_view value);
  std::string* add_status_codes();
  void add_status_codes(const std::string& value);
  void add_status_codes(std::string&& value);
  void add_status_codes(const char* value);
  void add_status_codes(const char* value, std::size_t size);
  void add_status_codes(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& status_codes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_status_codes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_status_codes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_status_codes();

  public:
  // repeated float temperatures = 2;
  int temperatures_size() const;
  private:
  int _internal_temperatures_size() const;

  public:
  void clear_temperatures() ;
  float temperatures(int index) const;
  void set_temperatures(int index, float value);
  void add_temperatures(float value);
  const ::google::protobuf::RepeatedField<float>& temperatures() const;
  ::google::protobuf::RepeatedField<float>* mutable_temperatures();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_temperatures() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_temperatures();

  public:
  // repeated float voltages = 3;
  int voltages_size() const;
  private:
  int _internal_voltages_size() const;

  public:
  void clear_voltages() ;
  float voltages(int index) const;
  void set_voltages(int index, float value);
  void add_voltages(float value);
  const ::google::protobuf::RepeatedField<float>& voltages() const;
  ::google::protobuf::RepeatedField<float>* mutable_voltages();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_voltages() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_voltages();

  public:
  // repeated float currents = 4;
  int currents_size() const;
  private:
  int _internal_currents_size() const;

  public:
  void clear_currents() ;
  float currents(int index) const;
  void set_currents(int index, float value);
  void add_currents(float value);
  const ::google::protobuf::RepeatedField<float>& currents() const;
  ::google::protobuf::RepeatedField<float>* mutable_currents();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_currents() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_currents();

  public:
  // repeated bool servo_actives = 10;
  int servo_actives_size() const;
  private:
  int _internal_servo_actives_size() const;

  public:
  void clear_servo_actives() ;
  bool servo_actives(int index) const;
  void set_servo_actives(int index, bool value);
  void add_servo_actives(bool value);
  const ::google::protobuf::RepeatedField<bool>& servo_actives() const;
  ::google::protobuf::RepeatedField<bool>* mutable_servo_actives();

  private:
  const ::google::protobuf::RepeatedField<bool>& _internal_servo_actives() const;
  ::google::protobuf::RepeatedField<bool>* _internal_mutable_servo_actives();

  public:
  // repeated bool brake_actives = 11;
  int brake_actives_size() const;
  private:
  int _internal_brake_actives_size() const;

  public:
  void clear_brake_actives() ;
  bool brake_actives(int index) const;
  void set_brake_actives(int index, bool value);
  void add_brake_actives(bool value);
  const ::google::protobuf::RepeatedField<bool>& brake_actives() const;
  ::google::protobuf::RepeatedField<bool>* mutable_brake_actives();

  private:
  const ::google::protobuf::RepeatedField<bool>& _internal_brake_actives() const;
  ::google::protobuf::RepeatedField<bool>* _internal_mutable_brake_actives();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ServoData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 7, 1, 49, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> status_codes_;
    ::google::protobuf::RepeatedField<float> temperatures_;
    ::google::protobuf::RepeatedField<float> voltages_;
    ::google::protobuf::RepeatedField<float> currents_;
    ::google::protobuf::RepeatedField<bool> servo_actives_;
    ::google::protobuf::RepeatedField<bool> brake_actives_;
    ::Nrmk::IndyFramework::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class ProgramData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ProgramData) */ {
 public:
  inline ProgramData() : ProgramData(nullptr) {}
  ~ProgramData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProgramData(::google::protobuf::internal::ConstantInitialized);

  ProgramData(const ProgramData& from);
  ProgramData(ProgramData&& from) noexcept
    : ProgramData() {
    *this = ::std::move(from);
  }

  inline ProgramData& operator=(const ProgramData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramData& operator=(ProgramData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProgramData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProgramData* internal_default_instance() {
    return reinterpret_cast<const ProgramData*>(
               &_ProgramData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ProgramData& a, ProgramData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProgramData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProgramData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProgramData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProgramData& from) {
    ProgramData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ProgramData";
  }
  protected:
  explicit ProgramData(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgramNameFieldNumber = 7,
    kProgramAlarmFieldNumber = 8,
    kProgramAnnotationFieldNumber = 9,
    kResponseFieldNumber = 100,
    kProgramStateFieldNumber = 1,
    kCmdIdFieldNumber = 2,
    kSubCmdIdFieldNumber = 3,
    kRunningHoursFieldNumber = 4,
    kRunningMinsFieldNumber = 5,
    kRunningSecsFieldNumber = 6,
    kSpeedRatioFieldNumber = 10,
  };
  // string program_name = 7;
  void clear_program_name() ;
  const std::string& program_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_program_name(Arg_&& arg, Args_... args);
  std::string* mutable_program_name();
  PROTOBUF_NODISCARD std::string* release_program_name();
  void set_allocated_program_name(std::string* ptr);

  private:
  const std::string& _internal_program_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_program_name(
      const std::string& value);
  std::string* _internal_mutable_program_name();

  public:
  // string program_alarm = 8;
  void clear_program_alarm() ;
  const std::string& program_alarm() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_program_alarm(Arg_&& arg, Args_... args);
  std::string* mutable_program_alarm();
  PROTOBUF_NODISCARD std::string* release_program_alarm();
  void set_allocated_program_alarm(std::string* ptr);

  private:
  const std::string& _internal_program_alarm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_program_alarm(
      const std::string& value);
  std::string* _internal_mutable_program_alarm();

  public:
  // string program_annotation = 9;
  void clear_program_annotation() ;
  const std::string& program_annotation() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_program_annotation(Arg_&& arg, Args_... args);
  std::string* mutable_program_annotation();
  PROTOBUF_NODISCARD std::string* release_program_annotation();
  void set_allocated_program_annotation(std::string* ptr);

  private:
  const std::string& _internal_program_annotation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_program_annotation(
      const std::string& value);
  std::string* _internal_mutable_program_annotation();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // .Nrmk.IndyFramework.ProgramState program_state = 1;
  void clear_program_state() ;
  ::Nrmk::IndyFramework::ProgramState program_state() const;
  void set_program_state(::Nrmk::IndyFramework::ProgramState value);

  private:
  ::Nrmk::IndyFramework::ProgramState _internal_program_state() const;
  void _internal_set_program_state(::Nrmk::IndyFramework::ProgramState value);

  public:
  // int32 cmd_id = 2;
  void clear_cmd_id() ;
  ::int32_t cmd_id() const;
  void set_cmd_id(::int32_t value);

  private:
  ::int32_t _internal_cmd_id() const;
  void _internal_set_cmd_id(::int32_t value);

  public:
  // int32 sub_cmd_id = 3;
  void clear_sub_cmd_id() ;
  ::int32_t sub_cmd_id() const;
  void set_sub_cmd_id(::int32_t value);

  private:
  ::int32_t _internal_sub_cmd_id() const;
  void _internal_set_sub_cmd_id(::int32_t value);

  public:
  // uint32 running_hours = 4;
  void clear_running_hours() ;
  ::uint32_t running_hours() const;
  void set_running_hours(::uint32_t value);

  private:
  ::uint32_t _internal_running_hours() const;
  void _internal_set_running_hours(::uint32_t value);

  public:
  // uint32 running_mins = 5;
  void clear_running_mins() ;
  ::uint32_t running_mins() const;
  void set_running_mins(::uint32_t value);

  private:
  ::uint32_t _internal_running_mins() const;
  void _internal_set_running_mins(::uint32_t value);

  public:
  // uint32 running_secs = 6;
  void clear_running_secs() ;
  ::uint32_t running_secs() const;
  void set_running_secs(::uint32_t value);

  private:
  ::uint32_t _internal_running_secs() const;
  void _internal_set_running_secs(::uint32_t value);

  public:
  // int32 speed_ratio = 10;
  void clear_speed_ratio() ;
  ::int32_t speed_ratio() const;
  void set_speed_ratio(::int32_t value);

  private:
  ::int32_t _internal_speed_ratio() const;
  void _internal_set_speed_ratio(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ProgramData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 11, 1, 90, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr program_name_;
    ::google::protobuf::internal::ArenaStringPtr program_alarm_;
    ::google::protobuf::internal::ArenaStringPtr program_annotation_;
    ::Nrmk::IndyFramework::Response* response_;
    int program_state_;
    ::int32_t cmd_id_;
    ::int32_t sub_cmd_id_;
    ::uint32_t running_hours_;
    ::uint32_t running_mins_;
    ::uint32_t running_secs_;
    ::int32_t speed_ratio_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class StopState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.StopState) */ {
 public:
  inline StopState() : StopState(nullptr) {}
  ~StopState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StopState(::google::protobuf::internal::ConstantInitialized);

  StopState(const StopState& from);
  StopState(StopState&& from) noexcept
    : StopState() {
    *this = ::std::move(from);
  }

  inline StopState& operator=(const StopState& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopState& operator=(StopState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopState& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopState* internal_default_instance() {
    return reinterpret_cast<const StopState*>(
               &_StopState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StopState& a, StopState& b) {
    a.Swap(&b);
  }
  inline void Swap(StopState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StopState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StopState& from) {
    StopState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopState* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.StopState";
  }
  protected:
  explicit StopState(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using StopCategory = StopState_StopCategory;
  static constexpr StopCategory STOP_CAT_0 = StopState_StopCategory_STOP_CAT_0;
  static constexpr StopCategory STOP_CAT_1 = StopState_StopCategory_STOP_CAT_1;
  static constexpr StopCategory STOP_CAT_2 = StopState_StopCategory_STOP_CAT_2;
  static constexpr StopCategory STOP_CAT_NONE = StopState_StopCategory_STOP_CAT_NONE;
  static inline bool StopCategory_IsValid(int value) {
    return StopState_StopCategory_IsValid(value);
  }
  static constexpr StopCategory StopCategory_MIN = StopState_StopCategory_StopCategory_MIN;
  static constexpr StopCategory StopCategory_MAX = StopState_StopCategory_StopCategory_MAX;
  static constexpr int StopCategory_ARRAYSIZE = StopState_StopCategory_StopCategory_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* StopCategory_descriptor() {
    return StopState_StopCategory_descriptor();
  }
  template <typename T>
  static inline const std::string& StopCategory_Name(T value) {
    return StopState_StopCategory_Name(value);
  }
  static inline bool StopCategory_Parse(absl::string_view name, StopCategory* value) {
    return StopState_StopCategory_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 100,
    kCategoryFieldNumber = 1,
  };
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // .Nrmk.IndyFramework.StopState.StopCategory category = 1;
  void clear_category() ;
  ::Nrmk::IndyFramework::StopState_StopCategory category() const;
  void set_category(::Nrmk::IndyFramework::StopState_StopCategory value);

  private:
  ::Nrmk::IndyFramework::StopState_StopCategory _internal_category() const;
  void _internal_set_category(::Nrmk::IndyFramework::StopState_StopCategory value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.StopState)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::Response* response_;
    int category_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TestRequest

// int32 intVal = 1;
inline void TestRequest::clear_intval() {
  _impl_.intval_ = 0;
}
inline ::int32_t TestRequest::intval() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestRequest.intVal)
  return _internal_intval();
}
inline void TestRequest::set_intval(::int32_t value) {
  _internal_set_intval(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestRequest.intVal)
}
inline ::int32_t TestRequest::_internal_intval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intval_;
}
inline void TestRequest::_internal_set_intval(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.intval_ = value;
}

// string strVal = 2;
inline void TestRequest::clear_strval() {
  _impl_.strval_.ClearToEmpty();
}
inline const std::string& TestRequest::strval() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestRequest.strVal)
  return _internal_strval();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestRequest::set_strval(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.strval_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestRequest.strVal)
}
inline std::string* TestRequest::mutable_strval() {
  std::string* _s = _internal_mutable_strval();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TestRequest.strVal)
  return _s;
}
inline const std::string& TestRequest::_internal_strval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.strval_.Get();
}
inline void TestRequest::_internal_set_strval(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.strval_.Set(value, GetArenaForAllocation());
}
inline std::string* TestRequest::_internal_mutable_strval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.strval_.Mutable( GetArenaForAllocation());
}
inline std::string* TestRequest::release_strval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TestRequest.strVal)
  return _impl_.strval_.Release();
}
inline void TestRequest::set_allocated_strval(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.strval_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strval_.IsDefault()) {
          _impl_.strval_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TestRequest.strVal)
}

// -------------------------------------------------------------------

// TestResponse

// int64 code = 1;
inline void TestResponse::clear_code() {
  _impl_.code_ = ::int64_t{0};
}
inline ::int64_t TestResponse::code() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestResponse.code)
  return _internal_code();
}
inline void TestResponse::set_code(::int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestResponse.code)
}
inline ::int64_t TestResponse::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_;
}
inline void TestResponse::_internal_set_code(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_ = value;
}

// string msg = 2;
inline void TestResponse::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& TestResponse::msg() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestResponse.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestResponse::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestResponse.msg)
}
inline std::string* TestResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TestResponse.msg)
  return _s;
}
inline const std::string& TestResponse::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void TestResponse::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* TestResponse::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* TestResponse::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TestResponse.msg)
  return _impl_.msg_.Release();
}
inline void TestResponse::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TestResponse.msg)
}

// -------------------------------------------------------------------

// MotionData

// .Nrmk.IndyFramework.TrajState traj_state = 1;
inline void MotionData::clear_traj_state() {
  _impl_.traj_state_ = 0;
}
inline ::Nrmk::IndyFramework::TrajState MotionData::traj_state() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.traj_state)
  return _internal_traj_state();
}
inline void MotionData::set_traj_state(::Nrmk::IndyFramework::TrajState value) {
  _internal_set_traj_state(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.traj_state)
}
inline ::Nrmk::IndyFramework::TrajState MotionData::_internal_traj_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::TrajState>(_impl_.traj_state_);
}
inline void MotionData::_internal_set_traj_state(::Nrmk::IndyFramework::TrajState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.traj_state_ = value;
}

// int32 traj_progress = 2;
inline void MotionData::clear_traj_progress() {
  _impl_.traj_progress_ = 0;
}
inline ::int32_t MotionData::traj_progress() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.traj_progress)
  return _internal_traj_progress();
}
inline void MotionData::set_traj_progress(::int32_t value) {
  _internal_set_traj_progress(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.traj_progress)
}
inline ::int32_t MotionData::_internal_traj_progress() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.traj_progress_;
}
inline void MotionData::_internal_set_traj_progress(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.traj_progress_ = value;
}

// bool is_in_motion = 3;
inline void MotionData::clear_is_in_motion() {
  _impl_.is_in_motion_ = false;
}
inline bool MotionData::is_in_motion() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.is_in_motion)
  return _internal_is_in_motion();
}
inline void MotionData::set_is_in_motion(bool value) {
  _internal_set_is_in_motion(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.is_in_motion)
}
inline bool MotionData::_internal_is_in_motion() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_in_motion_;
}
inline void MotionData::_internal_set_is_in_motion(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_in_motion_ = value;
}

// bool is_target_reached = 4;
inline void MotionData::clear_is_target_reached() {
  _impl_.is_target_reached_ = false;
}
inline bool MotionData::is_target_reached() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.is_target_reached)
  return _internal_is_target_reached();
}
inline void MotionData::set_is_target_reached(bool value) {
  _internal_set_is_target_reached(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.is_target_reached)
}
inline bool MotionData::_internal_is_target_reached() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_target_reached_;
}
inline void MotionData::_internal_set_is_target_reached(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_target_reached_ = value;
}

// bool is_pausing = 5;
inline void MotionData::clear_is_pausing() {
  _impl_.is_pausing_ = false;
}
inline bool MotionData::is_pausing() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.is_pausing)
  return _internal_is_pausing();
}
inline void MotionData::set_is_pausing(bool value) {
  _internal_set_is_pausing(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.is_pausing)
}
inline bool MotionData::_internal_is_pausing() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_pausing_;
}
inline void MotionData::_internal_set_is_pausing(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_pausing_ = value;
}

// bool is_stopping = 6;
inline void MotionData::clear_is_stopping() {
  _impl_.is_stopping_ = false;
}
inline bool MotionData::is_stopping() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.is_stopping)
  return _internal_is_stopping();
}
inline void MotionData::set_is_stopping(bool value) {
  _internal_set_is_stopping(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.is_stopping)
}
inline bool MotionData::_internal_is_stopping() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_stopping_;
}
inline void MotionData::_internal_set_is_stopping(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_stopping_ = value;
}

// bool has_motion = 7;
inline void MotionData::clear_has_motion() {
  _impl_.has_motion_ = false;
}
inline bool MotionData::has_motion() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.has_motion)
  return _internal_has_motion();
}
inline void MotionData::set_has_motion(bool value) {
  _internal_set_has_motion(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.has_motion)
}
inline bool MotionData::_internal_has_motion() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.has_motion_;
}
inline void MotionData::_internal_set_has_motion(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.has_motion_ = value;
}

// int32 speed_ratio = 8;
inline void MotionData::clear_speed_ratio() {
  _impl_.speed_ratio_ = 0;
}
inline ::int32_t MotionData::speed_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.speed_ratio)
  return _internal_speed_ratio();
}
inline void MotionData::set_speed_ratio(::int32_t value) {
  _internal_set_speed_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.speed_ratio)
}
inline ::int32_t MotionData::_internal_speed_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.speed_ratio_;
}
inline void MotionData::_internal_set_speed_ratio(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.speed_ratio_ = value;
}

// int32 motion_id = 9;
inline void MotionData::clear_motion_id() {
  _impl_.motion_id_ = 0;
}
inline ::int32_t MotionData::motion_id() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.motion_id)
  return _internal_motion_id();
}
inline void MotionData::set_motion_id(::int32_t value) {
  _internal_set_motion_id(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.motion_id)
}
inline ::int32_t MotionData::_internal_motion_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.motion_id_;
}
inline void MotionData::_internal_set_motion_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.motion_id_ = value;
}

// float remain_distance = 10;
inline void MotionData::clear_remain_distance() {
  _impl_.remain_distance_ = 0;
}
inline float MotionData::remain_distance() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.remain_distance)
  return _internal_remain_distance();
}
inline void MotionData::set_remain_distance(float value) {
  _internal_set_remain_distance(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.remain_distance)
}
inline float MotionData::_internal_remain_distance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.remain_distance_;
}
inline void MotionData::_internal_set_remain_distance(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.remain_distance_ = value;
}

// uint32 motion_queue_size = 11;
inline void MotionData::clear_motion_queue_size() {
  _impl_.motion_queue_size_ = 0u;
}
inline ::uint32_t MotionData::motion_queue_size() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.motion_queue_size)
  return _internal_motion_queue_size();
}
inline void MotionData::set_motion_queue_size(::uint32_t value) {
  _internal_set_motion_queue_size(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.motion_queue_size)
}
inline ::uint32_t MotionData::_internal_motion_queue_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.motion_queue_size_;
}
inline void MotionData::_internal_set_motion_queue_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.motion_queue_size_ = value;
}

// int32 cur_traj_progress = 12;
inline void MotionData::clear_cur_traj_progress() {
  _impl_.cur_traj_progress_ = 0;
}
inline ::int32_t MotionData::cur_traj_progress() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.cur_traj_progress)
  return _internal_cur_traj_progress();
}
inline void MotionData::set_cur_traj_progress(::int32_t value) {
  _internal_set_cur_traj_progress(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.cur_traj_progress)
}
inline ::int32_t MotionData::_internal_cur_traj_progress() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cur_traj_progress_;
}
inline void MotionData::_internal_set_cur_traj_progress(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cur_traj_progress_ = value;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool MotionData::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& MotionData::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& MotionData::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.response)
  return _internal_response();
}
inline void MotionData::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.MotionData.response)
}
inline ::Nrmk::IndyFramework::Response* MotionData::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* MotionData::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MotionData.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* MotionData::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* MotionData::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MotionData.response)
  return _msg;
}
inline void MotionData::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MotionData.response)
}

// -------------------------------------------------------------------

// ControlData

// uint32 running_hours = 1;
inline void ControlData::clear_running_hours() {
  _impl_.running_hours_ = 0u;
}
inline ::uint32_t ControlData::running_hours() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.running_hours)
  return _internal_running_hours();
}
inline void ControlData::set_running_hours(::uint32_t value) {
  _internal_set_running_hours(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.running_hours)
}
inline ::uint32_t ControlData::_internal_running_hours() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.running_hours_;
}
inline void ControlData::_internal_set_running_hours(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.running_hours_ = value;
}

// uint32 running_mins = 2;
inline void ControlData::clear_running_mins() {
  _impl_.running_mins_ = 0u;
}
inline ::uint32_t ControlData::running_mins() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.running_mins)
  return _internal_running_mins();
}
inline void ControlData::set_running_mins(::uint32_t value) {
  _internal_set_running_mins(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.running_mins)
}
inline ::uint32_t ControlData::_internal_running_mins() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.running_mins_;
}
inline void ControlData::_internal_set_running_mins(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.running_mins_ = value;
}

// uint32 running_secs = 3;
inline void ControlData::clear_running_secs() {
  _impl_.running_secs_ = 0u;
}
inline ::uint32_t ControlData::running_secs() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.running_secs)
  return _internal_running_secs();
}
inline void ControlData::set_running_secs(::uint32_t value) {
  _internal_set_running_secs(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.running_secs)
}
inline ::uint32_t ControlData::_internal_running_secs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.running_secs_;
}
inline void ControlData::_internal_set_running_secs(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.running_secs_ = value;
}

// .Nrmk.IndyFramework.OpState op_state = 4;
inline void ControlData::clear_op_state() {
  _impl_.op_state_ = 0;
}
inline ::Nrmk::IndyFramework::OpState ControlData::op_state() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.op_state)
  return _internal_op_state();
}
inline void ControlData::set_op_state(::Nrmk::IndyFramework::OpState value) {
  _internal_set_op_state(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.op_state)
}
inline ::Nrmk::IndyFramework::OpState ControlData::_internal_op_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::OpState>(_impl_.op_state_);
}
inline void ControlData::_internal_set_op_state(::Nrmk::IndyFramework::OpState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.op_state_ = value;
}

// bool sim_mode = 5;
inline void ControlData::clear_sim_mode() {
  _impl_.sim_mode_ = false;
}
inline bool ControlData::sim_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.sim_mode)
  return _internal_sim_mode();
}
inline void ControlData::set_sim_mode(bool value) {
  _internal_set_sim_mode(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.sim_mode)
}
inline bool ControlData::_internal_sim_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sim_mode_;
}
inline void ControlData::_internal_set_sim_mode(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sim_mode_ = value;
}

// repeated float q = 10;
inline int ControlData::_internal_q_size() const {
  return _internal_q().size();
}
inline int ControlData::q_size() const {
  return _internal_q_size();
}
inline void ControlData::clear_q() {
  _internal_mutable_q()->Clear();
}
inline float ControlData::q(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.q)
  return _internal_q().Get(index);
}
inline void ControlData::set_q(int index, float value) {
  _internal_mutable_q()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.q)
}
inline void ControlData::add_q(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_q()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData.q)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData::q() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData.q)
  return _internal_q();
}
inline ::google::protobuf::RepeatedField<float>* ControlData::mutable_q() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData.q)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_q();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData::_internal_q() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.q_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData::_internal_mutable_q() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.q_;
}

// repeated float qdot = 11;
inline int ControlData::_internal_qdot_size() const {
  return _internal_qdot().size();
}
inline int ControlData::qdot_size() const {
  return _internal_qdot_size();
}
inline void ControlData::clear_qdot() {
  _internal_mutable_qdot()->Clear();
}
inline float ControlData::qdot(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.qdot)
  return _internal_qdot().Get(index);
}
inline void ControlData::set_qdot(int index, float value) {
  _internal_mutable_qdot()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.qdot)
}
inline void ControlData::add_qdot(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_qdot()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData.qdot)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData::qdot() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData.qdot)
  return _internal_qdot();
}
inline ::google::protobuf::RepeatedField<float>* ControlData::mutable_qdot() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData.qdot)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_qdot();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData::_internal_qdot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qdot_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData::_internal_mutable_qdot() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.qdot_;
}

// repeated float p = 12;
inline int ControlData::_internal_p_size() const {
  return _internal_p().size();
}
inline int ControlData::p_size() const {
  return _internal_p_size();
}
inline void ControlData::clear_p() {
  _internal_mutable_p()->Clear();
}
inline float ControlData::p(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.p)
  return _internal_p().Get(index);
}
inline void ControlData::set_p(int index, float value) {
  _internal_mutable_p()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.p)
}
inline void ControlData::add_p(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_p()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData.p)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData::p() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData.p)
  return _internal_p();
}
inline ::google::protobuf::RepeatedField<float>* ControlData::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData.p)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_p();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData::_internal_p() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.p_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData::_internal_mutable_p() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.p_;
}

// repeated float pdot = 13;
inline int ControlData::_internal_pdot_size() const {
  return _internal_pdot().size();
}
inline int ControlData::pdot_size() const {
  return _internal_pdot_size();
}
inline void ControlData::clear_pdot() {
  _internal_mutable_pdot()->Clear();
}
inline float ControlData::pdot(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.pdot)
  return _internal_pdot().Get(index);
}
inline void ControlData::set_pdot(int index, float value) {
  _internal_mutable_pdot()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.pdot)
}
inline void ControlData::add_pdot(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pdot()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData.pdot)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData::pdot() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData.pdot)
  return _internal_pdot();
}
inline ::google::protobuf::RepeatedField<float>* ControlData::mutable_pdot() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData.pdot)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pdot();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData::_internal_pdot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pdot_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData::_internal_mutable_pdot() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pdot_;
}

// repeated float ref_frame = 20;
inline int ControlData::_internal_ref_frame_size() const {
  return _internal_ref_frame().size();
}
inline int ControlData::ref_frame_size() const {
  return _internal_ref_frame_size();
}
inline void ControlData::clear_ref_frame() {
  _internal_mutable_ref_frame()->Clear();
}
inline float ControlData::ref_frame(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.ref_frame)
  return _internal_ref_frame().Get(index);
}
inline void ControlData::set_ref_frame(int index, float value) {
  _internal_mutable_ref_frame()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.ref_frame)
}
inline void ControlData::add_ref_frame(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_ref_frame()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData.ref_frame)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData::ref_frame() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData.ref_frame)
  return _internal_ref_frame();
}
inline ::google::protobuf::RepeatedField<float>* ControlData::mutable_ref_frame() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData.ref_frame)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ref_frame();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData::_internal_ref_frame() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ref_frame_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData::_internal_mutable_ref_frame() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ref_frame_;
}

// repeated float tool_frame = 21;
inline int ControlData::_internal_tool_frame_size() const {
  return _internal_tool_frame().size();
}
inline int ControlData::tool_frame_size() const {
  return _internal_tool_frame_size();
}
inline void ControlData::clear_tool_frame() {
  _internal_mutable_tool_frame()->Clear();
}
inline float ControlData::tool_frame(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.tool_frame)
  return _internal_tool_frame().Get(index);
}
inline void ControlData::set_tool_frame(int index, float value) {
  _internal_mutable_tool_frame()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.tool_frame)
}
inline void ControlData::add_tool_frame(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tool_frame()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData.tool_frame)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData::tool_frame() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData.tool_frame)
  return _internal_tool_frame();
}
inline ::google::protobuf::RepeatedField<float>* ControlData::mutable_tool_frame() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData.tool_frame)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tool_frame();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData::_internal_tool_frame() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tool_frame_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData::_internal_mutable_tool_frame() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tool_frame_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ControlData::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& ControlData::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& ControlData::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.response)
  return _internal_response();
}
inline void ControlData::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.ControlData.response)
}
inline ::Nrmk::IndyFramework::Response* ControlData::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* ControlData::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ControlData.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ControlData::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* ControlData::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ControlData.response)
  return _msg;
}
inline void ControlData::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ControlData.response)
}

// -------------------------------------------------------------------

// ControlData2

// repeated float q = 1;
inline int ControlData2::_internal_q_size() const {
  return _internal_q().size();
}
inline int ControlData2::q_size() const {
  return _internal_q_size();
}
inline void ControlData2::clear_q() {
  _internal_mutable_q()->Clear();
}
inline float ControlData2::q(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.q)
  return _internal_q().Get(index);
}
inline void ControlData2::set_q(int index, float value) {
  _internal_mutable_q()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.q)
}
inline void ControlData2::add_q(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_q()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.q)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::q() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.q)
  return _internal_q();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_q() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.q)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_q();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_q() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.q_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_q() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.q_;
}

// repeated float qdot = 2;
inline int ControlData2::_internal_qdot_size() const {
  return _internal_qdot().size();
}
inline int ControlData2::qdot_size() const {
  return _internal_qdot_size();
}
inline void ControlData2::clear_qdot() {
  _internal_mutable_qdot()->Clear();
}
inline float ControlData2::qdot(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.qdot)
  return _internal_qdot().Get(index);
}
inline void ControlData2::set_qdot(int index, float value) {
  _internal_mutable_qdot()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.qdot)
}
inline void ControlData2::add_qdot(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_qdot()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.qdot)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::qdot() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.qdot)
  return _internal_qdot();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_qdot() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.qdot)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_qdot();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_qdot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qdot_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_qdot() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.qdot_;
}

// repeated float qddot = 3;
inline int ControlData2::_internal_qddot_size() const {
  return _internal_qddot().size();
}
inline int ControlData2::qddot_size() const {
  return _internal_qddot_size();
}
inline void ControlData2::clear_qddot() {
  _internal_mutable_qddot()->Clear();
}
inline float ControlData2::qddot(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.qddot)
  return _internal_qddot().Get(index);
}
inline void ControlData2::set_qddot(int index, float value) {
  _internal_mutable_qddot()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.qddot)
}
inline void ControlData2::add_qddot(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_qddot()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.qddot)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::qddot() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.qddot)
  return _internal_qddot();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_qddot() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.qddot)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_qddot();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_qddot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qddot_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_qddot() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.qddot_;
}

// repeated float qdes = 4;
inline int ControlData2::_internal_qdes_size() const {
  return _internal_qdes().size();
}
inline int ControlData2::qdes_size() const {
  return _internal_qdes_size();
}
inline void ControlData2::clear_qdes() {
  _internal_mutable_qdes()->Clear();
}
inline float ControlData2::qdes(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.qdes)
  return _internal_qdes().Get(index);
}
inline void ControlData2::set_qdes(int index, float value) {
  _internal_mutable_qdes()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.qdes)
}
inline void ControlData2::add_qdes(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_qdes()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.qdes)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::qdes() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.qdes)
  return _internal_qdes();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_qdes() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.qdes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_qdes();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_qdes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qdes_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_qdes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.qdes_;
}

// repeated float qdotdes = 5;
inline int ControlData2::_internal_qdotdes_size() const {
  return _internal_qdotdes().size();
}
inline int ControlData2::qdotdes_size() const {
  return _internal_qdotdes_size();
}
inline void ControlData2::clear_qdotdes() {
  _internal_mutable_qdotdes()->Clear();
}
inline float ControlData2::qdotdes(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.qdotdes)
  return _internal_qdotdes().Get(index);
}
inline void ControlData2::set_qdotdes(int index, float value) {
  _internal_mutable_qdotdes()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.qdotdes)
}
inline void ControlData2::add_qdotdes(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_qdotdes()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.qdotdes)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::qdotdes() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.qdotdes)
  return _internal_qdotdes();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_qdotdes() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.qdotdes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_qdotdes();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_qdotdes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qdotdes_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_qdotdes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.qdotdes_;
}

// repeated float qddotdes = 6;
inline int ControlData2::_internal_qddotdes_size() const {
  return _internal_qddotdes().size();
}
inline int ControlData2::qddotdes_size() const {
  return _internal_qddotdes_size();
}
inline void ControlData2::clear_qddotdes() {
  _internal_mutable_qddotdes()->Clear();
}
inline float ControlData2::qddotdes(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.qddotdes)
  return _internal_qddotdes().Get(index);
}
inline void ControlData2::set_qddotdes(int index, float value) {
  _internal_mutable_qddotdes()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.qddotdes)
}
inline void ControlData2::add_qddotdes(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_qddotdes()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.qddotdes)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::qddotdes() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.qddotdes)
  return _internal_qddotdes();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_qddotdes() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.qddotdes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_qddotdes();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_qddotdes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qddotdes_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_qddotdes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.qddotdes_;
}

// repeated float p = 10;
inline int ControlData2::_internal_p_size() const {
  return _internal_p().size();
}
inline int ControlData2::p_size() const {
  return _internal_p_size();
}
inline void ControlData2::clear_p() {
  _internal_mutable_p()->Clear();
}
inline float ControlData2::p(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.p)
  return _internal_p().Get(index);
}
inline void ControlData2::set_p(int index, float value) {
  _internal_mutable_p()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.p)
}
inline void ControlData2::add_p(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_p()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.p)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::p() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.p)
  return _internal_p();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.p)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_p();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_p() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.p_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_p() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.p_;
}

// repeated float pdot = 11;
inline int ControlData2::_internal_pdot_size() const {
  return _internal_pdot().size();
}
inline int ControlData2::pdot_size() const {
  return _internal_pdot_size();
}
inline void ControlData2::clear_pdot() {
  _internal_mutable_pdot()->Clear();
}
inline float ControlData2::pdot(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.pdot)
  return _internal_pdot().Get(index);
}
inline void ControlData2::set_pdot(int index, float value) {
  _internal_mutable_pdot()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.pdot)
}
inline void ControlData2::add_pdot(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pdot()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.pdot)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::pdot() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.pdot)
  return _internal_pdot();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_pdot() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.pdot)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pdot();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_pdot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pdot_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_pdot() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pdot_;
}

// repeated float pddot = 12;
inline int ControlData2::_internal_pddot_size() const {
  return _internal_pddot().size();
}
inline int ControlData2::pddot_size() const {
  return _internal_pddot_size();
}
inline void ControlData2::clear_pddot() {
  _internal_mutable_pddot()->Clear();
}
inline float ControlData2::pddot(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.pddot)
  return _internal_pddot().Get(index);
}
inline void ControlData2::set_pddot(int index, float value) {
  _internal_mutable_pddot()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.pddot)
}
inline void ControlData2::add_pddot(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pddot()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.pddot)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::pddot() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.pddot)
  return _internal_pddot();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_pddot() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.pddot)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pddot();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_pddot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pddot_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_pddot() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pddot_;
}

// repeated float pdes = 13;
inline int ControlData2::_internal_pdes_size() const {
  return _internal_pdes().size();
}
inline int ControlData2::pdes_size() const {
  return _internal_pdes_size();
}
inline void ControlData2::clear_pdes() {
  _internal_mutable_pdes()->Clear();
}
inline float ControlData2::pdes(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.pdes)
  return _internal_pdes().Get(index);
}
inline void ControlData2::set_pdes(int index, float value) {
  _internal_mutable_pdes()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.pdes)
}
inline void ControlData2::add_pdes(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pdes()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.pdes)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::pdes() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.pdes)
  return _internal_pdes();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_pdes() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.pdes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pdes();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_pdes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pdes_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_pdes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pdes_;
}

// repeated float pdotdes = 14;
inline int ControlData2::_internal_pdotdes_size() const {
  return _internal_pdotdes().size();
}
inline int ControlData2::pdotdes_size() const {
  return _internal_pdotdes_size();
}
inline void ControlData2::clear_pdotdes() {
  _internal_mutable_pdotdes()->Clear();
}
inline float ControlData2::pdotdes(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.pdotdes)
  return _internal_pdotdes().Get(index);
}
inline void ControlData2::set_pdotdes(int index, float value) {
  _internal_mutable_pdotdes()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.pdotdes)
}
inline void ControlData2::add_pdotdes(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pdotdes()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.pdotdes)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::pdotdes() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.pdotdes)
  return _internal_pdotdes();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_pdotdes() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.pdotdes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pdotdes();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_pdotdes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pdotdes_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_pdotdes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pdotdes_;
}

// repeated float pddotdes = 15;
inline int ControlData2::_internal_pddotdes_size() const {
  return _internal_pddotdes().size();
}
inline int ControlData2::pddotdes_size() const {
  return _internal_pddotdes_size();
}
inline void ControlData2::clear_pddotdes() {
  _internal_mutable_pddotdes()->Clear();
}
inline float ControlData2::pddotdes(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.pddotdes)
  return _internal_pddotdes().Get(index);
}
inline void ControlData2::set_pddotdes(int index, float value) {
  _internal_mutable_pddotdes()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.pddotdes)
}
inline void ControlData2::add_pddotdes(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pddotdes()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.pddotdes)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::pddotdes() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.pddotdes)
  return _internal_pddotdes();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_pddotdes() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.pddotdes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pddotdes();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_pddotdes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pddotdes_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_pddotdes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pddotdes_;
}

// repeated float tau = 20;
inline int ControlData2::_internal_tau_size() const {
  return _internal_tau().size();
}
inline int ControlData2::tau_size() const {
  return _internal_tau_size();
}
inline void ControlData2::clear_tau() {
  _internal_mutable_tau()->Clear();
}
inline float ControlData2::tau(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.tau)
  return _internal_tau().Get(index);
}
inline void ControlData2::set_tau(int index, float value) {
  _internal_mutable_tau()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.tau)
}
inline void ControlData2::add_tau(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tau()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.tau)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::tau() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.tau)
  return _internal_tau();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_tau() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.tau)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tau();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_tau() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tau_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_tau() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tau_;
}

// repeated float tau_act = 21;
inline int ControlData2::_internal_tau_act_size() const {
  return _internal_tau_act().size();
}
inline int ControlData2::tau_act_size() const {
  return _internal_tau_act_size();
}
inline void ControlData2::clear_tau_act() {
  _internal_mutable_tau_act()->Clear();
}
inline float ControlData2::tau_act(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.tau_act)
  return _internal_tau_act().Get(index);
}
inline void ControlData2::set_tau_act(int index, float value) {
  _internal_mutable_tau_act()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.tau_act)
}
inline void ControlData2::add_tau_act(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tau_act()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.tau_act)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::tau_act() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.tau_act)
  return _internal_tau_act();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_tau_act() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.tau_act)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tau_act();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_tau_act() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tau_act_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_tau_act() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tau_act_;
}

// repeated float tau_ext = 22;
inline int ControlData2::_internal_tau_ext_size() const {
  return _internal_tau_ext().size();
}
inline int ControlData2::tau_ext_size() const {
  return _internal_tau_ext_size();
}
inline void ControlData2::clear_tau_ext() {
  _internal_mutable_tau_ext()->Clear();
}
inline float ControlData2::tau_ext(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.tau_ext)
  return _internal_tau_ext().Get(index);
}
inline void ControlData2::set_tau_ext(int index, float value) {
  _internal_mutable_tau_ext()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.tau_ext)
}
inline void ControlData2::add_tau_ext(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tau_ext()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.tau_ext)
}
inline const ::google::protobuf::RepeatedField<float>& ControlData2::tau_ext() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.tau_ext)
  return _internal_tau_ext();
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::mutable_tau_ext() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.tau_ext)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tau_ext();
}

inline const ::google::protobuf::RepeatedField<float>& ControlData2::_internal_tau_ext() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tau_ext_;
}
inline ::google::protobuf::RepeatedField<float>* ControlData2::_internal_mutable_tau_ext() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tau_ext_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ControlData2::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& ControlData2::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& ControlData2::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.response)
  return _internal_response();
}
inline void ControlData2::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.ControlData2.response)
}
inline ::Nrmk::IndyFramework::Response* ControlData2::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* ControlData2::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ControlData2.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ControlData2::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* ControlData2::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ControlData2.response)
  return _msg;
}
inline void ControlData2::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ControlData2.response)
}

// -------------------------------------------------------------------

// IOData

// repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
inline int IOData::_internal_di_size() const {
  return _internal_di().size();
}
inline int IOData::di_size() const {
  return _internal_di_size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOData::mutable_di(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.di)
  return _internal_mutable_di()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
IOData::mutable_di() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.di)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_di();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& IOData::di(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.di)
    return _internal_di().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOData::add_di() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_di()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.di)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
IOData::di() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.di)
  return _internal_di();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
IOData::_internal_di() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.di_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
IOData::_internal_mutable_di() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.di_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal do = 2;
inline int IOData::_internal_do__size() const {
  return _internal_do_().size();
}
inline int IOData::do__size() const {
  return _internal_do__size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOData::mutable_do_(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.do)
  return _internal_mutable_do_()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
IOData::mutable_do_() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.do)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_do_();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& IOData::do_(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.do)
    return _internal_do_().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOData::add_do_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_do_()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.do)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
IOData::do_() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.do)
  return _internal_do_();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
IOData::_internal_do_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.do__;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
IOData::_internal_mutable_do_() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.do__;
}

// repeated .Nrmk.IndyFramework.AnalogSignal ai = 3;
inline int IOData::_internal_ai_size() const {
  return _internal_ai().size();
}
inline int IOData::ai_size() const {
  return _internal_ai_size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::mutable_ai(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.ai)
  return _internal_mutable_ai()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
IOData::mutable_ai() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.ai)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ai();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& IOData::ai(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.ai)
    return _internal_ai().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::add_ai() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_ai()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.ai)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
IOData::ai() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.ai)
  return _internal_ai();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
IOData::_internal_ai() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ai_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
IOData::_internal_mutable_ai() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ai_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal ao = 4;
inline int IOData::_internal_ao_size() const {
  return _internal_ao().size();
}
inline int IOData::ao_size() const {
  return _internal_ao_size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::mutable_ao(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.ao)
  return _internal_mutable_ao()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
IOData::mutable_ao() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.ao)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ao();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& IOData::ao(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.ao)
    return _internal_ao().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::add_ao() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_ao()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.ao)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
IOData::ao() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.ao)
  return _internal_ao();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
IOData::_internal_ao() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ao_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
IOData::_internal_mutable_ao() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ao_;
}

// repeated .Nrmk.IndyFramework.EndtoolSignal end_di = 5;
inline int IOData::_internal_end_di_size() const {
  return _internal_end_di().size();
}
inline int IOData::end_di_size() const {
  return _internal_end_di_size();
}
inline ::Nrmk::IndyFramework::EndtoolSignal* IOData::mutable_end_di(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.end_di)
  return _internal_mutable_end_di()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >*
IOData::mutable_end_di() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.end_di)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_end_di();
}
inline const ::Nrmk::IndyFramework::EndtoolSignal& IOData::end_di(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.end_di)
    return _internal_end_di().Get(index);
}
inline ::Nrmk::IndyFramework::EndtoolSignal* IOData::add_end_di() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::EndtoolSignal* _add = _internal_mutable_end_di()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.end_di)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >&
IOData::end_di() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.end_di)
  return _internal_end_di();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::EndtoolSignal>&
IOData::_internal_end_di() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_di_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::EndtoolSignal>*
IOData::_internal_mutable_end_di() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.end_di_;
}

// repeated .Nrmk.IndyFramework.EndtoolSignal end_do = 6;
inline int IOData::_internal_end_do_size() const {
  return _internal_end_do().size();
}
inline int IOData::end_do_size() const {
  return _internal_end_do_size();
}
inline ::Nrmk::IndyFramework::EndtoolSignal* IOData::mutable_end_do(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.end_do)
  return _internal_mutable_end_do()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >*
IOData::mutable_end_do() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.end_do)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_end_do();
}
inline const ::Nrmk::IndyFramework::EndtoolSignal& IOData::end_do(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.end_do)
    return _internal_end_do().Get(index);
}
inline ::Nrmk::IndyFramework::EndtoolSignal* IOData::add_end_do() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::EndtoolSignal* _add = _internal_mutable_end_do()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.end_do)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >&
IOData::end_do() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.end_do)
  return _internal_end_do();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::EndtoolSignal>&
IOData::_internal_end_do() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_do_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::EndtoolSignal>*
IOData::_internal_mutable_end_do() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.end_do_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal end_ai = 7;
inline int IOData::_internal_end_ai_size() const {
  return _internal_end_ai().size();
}
inline int IOData::end_ai_size() const {
  return _internal_end_ai_size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::mutable_end_ai(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.end_ai)
  return _internal_mutable_end_ai()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
IOData::mutable_end_ai() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.end_ai)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_end_ai();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& IOData::end_ai(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.end_ai)
    return _internal_end_ai().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::add_end_ai() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_end_ai()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.end_ai)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
IOData::end_ai() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.end_ai)
  return _internal_end_ai();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
IOData::_internal_end_ai() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_ai_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
IOData::_internal_mutable_end_ai() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.end_ai_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal end_ao = 8;
inline int IOData::_internal_end_ao_size() const {
  return _internal_end_ao().size();
}
inline int IOData::end_ao_size() const {
  return _internal_end_ao_size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::mutable_end_ao(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.end_ao)
  return _internal_mutable_end_ao()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
IOData::mutable_end_ao() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.end_ao)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_end_ao();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& IOData::end_ao(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.end_ao)
    return _internal_end_ao().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::add_end_ao() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_end_ao()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.end_ao)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
IOData::end_ao() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.end_ao)
  return _internal_end_ao();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
IOData::_internal_end_ao() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_ao_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
IOData::_internal_mutable_end_ao() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.end_ao_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool IOData::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& IOData::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& IOData::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.response)
  return _internal_response();
}
inline void IOData::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.IOData.response)
}
inline ::Nrmk::IndyFramework::Response* IOData::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* IOData::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.IOData.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* IOData::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* IOData::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.response)
  return _msg;
}
inline void IOData::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.IOData.response)
}

// -------------------------------------------------------------------

// ViolationData

// uint64 violation_code = 1;
inline void ViolationData::clear_violation_code() {
  _impl_.violation_code_ = ::uint64_t{0u};
}
inline ::uint64_t ViolationData::violation_code() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationData.violation_code)
  return _internal_violation_code();
}
inline void ViolationData::set_violation_code(::uint64_t value) {
  _internal_set_violation_code(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ViolationData.violation_code)
}
inline ::uint64_t ViolationData::_internal_violation_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.violation_code_;
}
inline void ViolationData::_internal_set_violation_code(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.violation_code_ = value;
}

// uint32 j_index = 2;
inline void ViolationData::clear_j_index() {
  _impl_.j_index_ = 0u;
}
inline ::uint32_t ViolationData::j_index() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationData.j_index)
  return _internal_j_index();
}
inline void ViolationData::set_j_index(::uint32_t value) {
  _internal_set_j_index(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ViolationData.j_index)
}
inline ::uint32_t ViolationData::_internal_j_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.j_index_;
}
inline void ViolationData::_internal_set_j_index(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.j_index_ = value;
}

// repeated int32 i_args = 3;
inline int ViolationData::_internal_i_args_size() const {
  return _internal_i_args().size();
}
inline int ViolationData::i_args_size() const {
  return _internal_i_args_size();
}
inline void ViolationData::clear_i_args() {
  _internal_mutable_i_args()->Clear();
}
inline ::int32_t ViolationData::i_args(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationData.i_args)
  return _internal_i_args().Get(index);
}
inline void ViolationData::set_i_args(int index, ::int32_t value) {
  _internal_mutable_i_args()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ViolationData.i_args)
}
inline void ViolationData::add_i_args(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_i_args()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ViolationData.i_args)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& ViolationData::i_args() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ViolationData.i_args)
  return _internal_i_args();
}
inline ::google::protobuf::RepeatedField<::int32_t>* ViolationData::mutable_i_args() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ViolationData.i_args)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_i_args();
}

inline const ::google::protobuf::RepeatedField<::int32_t>& ViolationData::_internal_i_args() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.i_args_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* ViolationData::_internal_mutable_i_args() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.i_args_;
}

// repeated float f_args = 4;
inline int ViolationData::_internal_f_args_size() const {
  return _internal_f_args().size();
}
inline int ViolationData::f_args_size() const {
  return _internal_f_args_size();
}
inline void ViolationData::clear_f_args() {
  _internal_mutable_f_args()->Clear();
}
inline float ViolationData::f_args(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationData.f_args)
  return _internal_f_args().Get(index);
}
inline void ViolationData::set_f_args(int index, float value) {
  _internal_mutable_f_args()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ViolationData.f_args)
}
inline void ViolationData::add_f_args(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_f_args()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ViolationData.f_args)
}
inline const ::google::protobuf::RepeatedField<float>& ViolationData::f_args() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ViolationData.f_args)
  return _internal_f_args();
}
inline ::google::protobuf::RepeatedField<float>* ViolationData::mutable_f_args() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ViolationData.f_args)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_f_args();
}

inline const ::google::protobuf::RepeatedField<float>& ViolationData::_internal_f_args() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.f_args_;
}
inline ::google::protobuf::RepeatedField<float>* ViolationData::_internal_mutable_f_args() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.f_args_;
}

// string violation_str = 5;
inline void ViolationData::clear_violation_str() {
  _impl_.violation_str_.ClearToEmpty();
}
inline const std::string& ViolationData::violation_str() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationData.violation_str)
  return _internal_violation_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ViolationData::set_violation_str(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.violation_str_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ViolationData.violation_str)
}
inline std::string* ViolationData::mutable_violation_str() {
  std::string* _s = _internal_mutable_violation_str();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ViolationData.violation_str)
  return _s;
}
inline const std::string& ViolationData::_internal_violation_str() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.violation_str_.Get();
}
inline void ViolationData::_internal_set_violation_str(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.violation_str_.Set(value, GetArenaForAllocation());
}
inline std::string* ViolationData::_internal_mutable_violation_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.violation_str_.Mutable( GetArenaForAllocation());
}
inline std::string* ViolationData::release_violation_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ViolationData.violation_str)
  return _impl_.violation_str_.Release();
}
inline void ViolationData::set_allocated_violation_str(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.violation_str_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.violation_str_.IsDefault()) {
          _impl_.violation_str_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ViolationData.violation_str)
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ViolationData::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& ViolationData::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& ViolationData::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationData.response)
  return _internal_response();
}
inline void ViolationData::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.ViolationData.response)
}
inline ::Nrmk::IndyFramework::Response* ViolationData::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* ViolationData::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ViolationData.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ViolationData::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* ViolationData::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ViolationData.response)
  return _msg;
}
inline void ViolationData::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ViolationData.response)
}

// -------------------------------------------------------------------

// ViolationMessageQueue

// repeated .Nrmk.IndyFramework.ViolationData violation_queue = 1;
inline int ViolationMessageQueue::_internal_violation_queue_size() const {
  return _internal_violation_queue().size();
}
inline int ViolationMessageQueue::violation_queue_size() const {
  return _internal_violation_queue_size();
}
inline void ViolationMessageQueue::clear_violation_queue() {
  _internal_mutable_violation_queue()->Clear();
}
inline ::Nrmk::IndyFramework::ViolationData* ViolationMessageQueue::mutable_violation_queue(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ViolationMessageQueue.violation_queue)
  return _internal_mutable_violation_queue()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ViolationData >*
ViolationMessageQueue::mutable_violation_queue() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ViolationMessageQueue.violation_queue)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_violation_queue();
}
inline const ::Nrmk::IndyFramework::ViolationData& ViolationMessageQueue::violation_queue(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationMessageQueue.violation_queue)
    return _internal_violation_queue().Get(index);
}
inline ::Nrmk::IndyFramework::ViolationData* ViolationMessageQueue::add_violation_queue() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::ViolationData* _add = _internal_mutable_violation_queue()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ViolationMessageQueue.violation_queue)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::ViolationData >&
ViolationMessageQueue::violation_queue() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ViolationMessageQueue.violation_queue)
  return _internal_violation_queue();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ViolationData>&
ViolationMessageQueue::_internal_violation_queue() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.violation_queue_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::ViolationData>*
ViolationMessageQueue::_internal_mutable_violation_queue() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.violation_queue_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ViolationMessageQueue::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& ViolationMessageQueue::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& ViolationMessageQueue::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationMessageQueue.response)
  return _internal_response();
}
inline void ViolationMessageQueue::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.ViolationMessageQueue.response)
}
inline ::Nrmk::IndyFramework::Response* ViolationMessageQueue::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* ViolationMessageQueue::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ViolationMessageQueue.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ViolationMessageQueue::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* ViolationMessageQueue::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ViolationMessageQueue.response)
  return _msg;
}
inline void ViolationMessageQueue::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ViolationMessageQueue.response)
}

// -------------------------------------------------------------------

// ServoData

// repeated string status_codes = 1;
inline int ServoData::_internal_status_codes_size() const {
  return _internal_status_codes().size();
}
inline int ServoData::status_codes_size() const {
  return _internal_status_codes_size();
}
inline void ServoData::clear_status_codes() {
  _internal_mutable_status_codes()->Clear();
}
inline std::string* ServoData::add_status_codes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_status_codes()->Add();
  // @@protoc_insertion_point(field_add_mutable:Nrmk.IndyFramework.ServoData.status_codes)
  return _s;
}
inline const std::string& ServoData::status_codes(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoData.status_codes)
  return _internal_status_codes().Get(index);
}
inline std::string* ServoData::mutable_status_codes(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ServoData.status_codes)
  return _internal_mutable_status_codes()->Mutable(index);
}
inline void ServoData::set_status_codes(int index, const std::string& value) {
  _internal_mutable_status_codes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoData.status_codes)
}
inline void ServoData::set_status_codes(int index, std::string&& value) {
  _internal_mutable_status_codes()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoData.status_codes)
}
inline void ServoData::set_status_codes(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_status_codes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.ServoData.status_codes)
}
inline void ServoData::set_status_codes(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_status_codes()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.ServoData.status_codes)
}
inline void ServoData::set_status_codes(int index, absl::string_view value) {
  _internal_mutable_status_codes()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:Nrmk.IndyFramework.ServoData.status_codes)
}
inline void ServoData::add_status_codes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_status_codes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ServoData.status_codes)
}
inline void ServoData::add_status_codes(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_status_codes()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ServoData.status_codes)
}
inline void ServoData::add_status_codes(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_status_codes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Nrmk.IndyFramework.ServoData.status_codes)
}
inline void ServoData::add_status_codes(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_status_codes()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Nrmk.IndyFramework.ServoData.status_codes)
}
inline void ServoData::add_status_codes(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_status_codes()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:Nrmk.IndyFramework.ServoData.status_codes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ServoData::status_codes() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ServoData.status_codes)
  return _internal_status_codes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* ServoData::mutable_status_codes() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ServoData.status_codes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_status_codes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ServoData::_internal_status_codes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_codes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ServoData::_internal_mutable_status_codes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.status_codes_;
}

// repeated float temperatures = 2;
inline int ServoData::_internal_temperatures_size() const {
  return _internal_temperatures().size();
}
inline int ServoData::temperatures_size() const {
  return _internal_temperatures_size();
}
inline void ServoData::clear_temperatures() {
  _internal_mutable_temperatures()->Clear();
}
inline float ServoData::temperatures(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoData.temperatures)
  return _internal_temperatures().Get(index);
}
inline void ServoData::set_temperatures(int index, float value) {
  _internal_mutable_temperatures()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoData.temperatures)
}
inline void ServoData::add_temperatures(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_temperatures()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ServoData.temperatures)
}
inline const ::google::protobuf::RepeatedField<float>& ServoData::temperatures() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ServoData.temperatures)
  return _internal_temperatures();
}
inline ::google::protobuf::RepeatedField<float>* ServoData::mutable_temperatures() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ServoData.temperatures)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_temperatures();
}

inline const ::google::protobuf::RepeatedField<float>& ServoData::_internal_temperatures() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.temperatures_;
}
inline ::google::protobuf::RepeatedField<float>* ServoData::_internal_mutable_temperatures() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.temperatures_;
}

// repeated float voltages = 3;
inline int ServoData::_internal_voltages_size() const {
  return _internal_voltages().size();
}
inline int ServoData::voltages_size() const {
  return _internal_voltages_size();
}
inline void ServoData::clear_voltages() {
  _internal_mutable_voltages()->Clear();
}
inline float ServoData::voltages(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoData.voltages)
  return _internal_voltages().Get(index);
}
inline void ServoData::set_voltages(int index, float value) {
  _internal_mutable_voltages()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoData.voltages)
}
inline void ServoData::add_voltages(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_voltages()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ServoData.voltages)
}
inline const ::google::protobuf::RepeatedField<float>& ServoData::voltages() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ServoData.voltages)
  return _internal_voltages();
}
inline ::google::protobuf::RepeatedField<float>* ServoData::mutable_voltages() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ServoData.voltages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_voltages();
}

inline const ::google::protobuf::RepeatedField<float>& ServoData::_internal_voltages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.voltages_;
}
inline ::google::protobuf::RepeatedField<float>* ServoData::_internal_mutable_voltages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.voltages_;
}

// repeated float currents = 4;
inline int ServoData::_internal_currents_size() const {
  return _internal_currents().size();
}
inline int ServoData::currents_size() const {
  return _internal_currents_size();
}
inline void ServoData::clear_currents() {
  _internal_mutable_currents()->Clear();
}
inline float ServoData::currents(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoData.currents)
  return _internal_currents().Get(index);
}
inline void ServoData::set_currents(int index, float value) {
  _internal_mutable_currents()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoData.currents)
}
inline void ServoData::add_currents(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_currents()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ServoData.currents)
}
inline const ::google::protobuf::RepeatedField<float>& ServoData::currents() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ServoData.currents)
  return _internal_currents();
}
inline ::google::protobuf::RepeatedField<float>* ServoData::mutable_currents() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ServoData.currents)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_currents();
}

inline const ::google::protobuf::RepeatedField<float>& ServoData::_internal_currents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currents_;
}
inline ::google::protobuf::RepeatedField<float>* ServoData::_internal_mutable_currents() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.currents_;
}

// repeated bool servo_actives = 10;
inline int ServoData::_internal_servo_actives_size() const {
  return _internal_servo_actives().size();
}
inline int ServoData::servo_actives_size() const {
  return _internal_servo_actives_size();
}
inline void ServoData::clear_servo_actives() {
  _internal_mutable_servo_actives()->Clear();
}
inline bool ServoData::servo_actives(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoData.servo_actives)
  return _internal_servo_actives().Get(index);
}
inline void ServoData::set_servo_actives(int index, bool value) {
  _internal_mutable_servo_actives()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoData.servo_actives)
}
inline void ServoData::add_servo_actives(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_servo_actives()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ServoData.servo_actives)
}
inline const ::google::protobuf::RepeatedField<bool>& ServoData::servo_actives() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ServoData.servo_actives)
  return _internal_servo_actives();
}
inline ::google::protobuf::RepeatedField<bool>* ServoData::mutable_servo_actives() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ServoData.servo_actives)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_servo_actives();
}

inline const ::google::protobuf::RepeatedField<bool>& ServoData::_internal_servo_actives() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.servo_actives_;
}
inline ::google::protobuf::RepeatedField<bool>* ServoData::_internal_mutable_servo_actives() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.servo_actives_;
}

// repeated bool brake_actives = 11;
inline int ServoData::_internal_brake_actives_size() const {
  return _internal_brake_actives().size();
}
inline int ServoData::brake_actives_size() const {
  return _internal_brake_actives_size();
}
inline void ServoData::clear_brake_actives() {
  _internal_mutable_brake_actives()->Clear();
}
inline bool ServoData::brake_actives(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoData.brake_actives)
  return _internal_brake_actives().Get(index);
}
inline void ServoData::set_brake_actives(int index, bool value) {
  _internal_mutable_brake_actives()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoData.brake_actives)
}
inline void ServoData::add_brake_actives(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_brake_actives()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ServoData.brake_actives)
}
inline const ::google::protobuf::RepeatedField<bool>& ServoData::brake_actives() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ServoData.brake_actives)
  return _internal_brake_actives();
}
inline ::google::protobuf::RepeatedField<bool>* ServoData::mutable_brake_actives() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ServoData.brake_actives)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_brake_actives();
}

inline const ::google::protobuf::RepeatedField<bool>& ServoData::_internal_brake_actives() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brake_actives_;
}
inline ::google::protobuf::RepeatedField<bool>* ServoData::_internal_mutable_brake_actives() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.brake_actives_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ServoData::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& ServoData::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& ServoData::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoData.response)
  return _internal_response();
}
inline void ServoData::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.ServoData.response)
}
inline ::Nrmk::IndyFramework::Response* ServoData::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* ServoData::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ServoData.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ServoData::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* ServoData::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ServoData.response)
  return _msg;
}
inline void ServoData::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ServoData.response)
}

// -------------------------------------------------------------------

// ProgramData

// .Nrmk.IndyFramework.ProgramState program_state = 1;
inline void ProgramData::clear_program_state() {
  _impl_.program_state_ = 0;
}
inline ::Nrmk::IndyFramework::ProgramState ProgramData::program_state() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.program_state)
  return _internal_program_state();
}
inline void ProgramData::set_program_state(::Nrmk::IndyFramework::ProgramState value) {
  _internal_set_program_state(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.program_state)
}
inline ::Nrmk::IndyFramework::ProgramState ProgramData::_internal_program_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::ProgramState>(_impl_.program_state_);
}
inline void ProgramData::_internal_set_program_state(::Nrmk::IndyFramework::ProgramState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.program_state_ = value;
}

// int32 cmd_id = 2;
inline void ProgramData::clear_cmd_id() {
  _impl_.cmd_id_ = 0;
}
inline ::int32_t ProgramData::cmd_id() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.cmd_id)
  return _internal_cmd_id();
}
inline void ProgramData::set_cmd_id(::int32_t value) {
  _internal_set_cmd_id(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.cmd_id)
}
inline ::int32_t ProgramData::_internal_cmd_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cmd_id_;
}
inline void ProgramData::_internal_set_cmd_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cmd_id_ = value;
}

// int32 sub_cmd_id = 3;
inline void ProgramData::clear_sub_cmd_id() {
  _impl_.sub_cmd_id_ = 0;
}
inline ::int32_t ProgramData::sub_cmd_id() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.sub_cmd_id)
  return _internal_sub_cmd_id();
}
inline void ProgramData::set_sub_cmd_id(::int32_t value) {
  _internal_set_sub_cmd_id(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.sub_cmd_id)
}
inline ::int32_t ProgramData::_internal_sub_cmd_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sub_cmd_id_;
}
inline void ProgramData::_internal_set_sub_cmd_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sub_cmd_id_ = value;
}

// uint32 running_hours = 4;
inline void ProgramData::clear_running_hours() {
  _impl_.running_hours_ = 0u;
}
inline ::uint32_t ProgramData::running_hours() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.running_hours)
  return _internal_running_hours();
}
inline void ProgramData::set_running_hours(::uint32_t value) {
  _internal_set_running_hours(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.running_hours)
}
inline ::uint32_t ProgramData::_internal_running_hours() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.running_hours_;
}
inline void ProgramData::_internal_set_running_hours(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.running_hours_ = value;
}

// uint32 running_mins = 5;
inline void ProgramData::clear_running_mins() {
  _impl_.running_mins_ = 0u;
}
inline ::uint32_t ProgramData::running_mins() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.running_mins)
  return _internal_running_mins();
}
inline void ProgramData::set_running_mins(::uint32_t value) {
  _internal_set_running_mins(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.running_mins)
}
inline ::uint32_t ProgramData::_internal_running_mins() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.running_mins_;
}
inline void ProgramData::_internal_set_running_mins(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.running_mins_ = value;
}

// uint32 running_secs = 6;
inline void ProgramData::clear_running_secs() {
  _impl_.running_secs_ = 0u;
}
inline ::uint32_t ProgramData::running_secs() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.running_secs)
  return _internal_running_secs();
}
inline void ProgramData::set_running_secs(::uint32_t value) {
  _internal_set_running_secs(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.running_secs)
}
inline ::uint32_t ProgramData::_internal_running_secs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.running_secs_;
}
inline void ProgramData::_internal_set_running_secs(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.running_secs_ = value;
}

// string program_name = 7;
inline void ProgramData::clear_program_name() {
  _impl_.program_name_.ClearToEmpty();
}
inline const std::string& ProgramData::program_name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.program_name)
  return _internal_program_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProgramData::set_program_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.program_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.program_name)
}
inline std::string* ProgramData::mutable_program_name() {
  std::string* _s = _internal_mutable_program_name();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ProgramData.program_name)
  return _s;
}
inline const std::string& ProgramData::_internal_program_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.program_name_.Get();
}
inline void ProgramData::_internal_set_program_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.program_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProgramData::_internal_mutable_program_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.program_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ProgramData::release_program_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ProgramData.program_name)
  return _impl_.program_name_.Release();
}
inline void ProgramData::set_allocated_program_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.program_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.program_name_.IsDefault()) {
          _impl_.program_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ProgramData.program_name)
}

// string program_alarm = 8;
inline void ProgramData::clear_program_alarm() {
  _impl_.program_alarm_.ClearToEmpty();
}
inline const std::string& ProgramData::program_alarm() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.program_alarm)
  return _internal_program_alarm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProgramData::set_program_alarm(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.program_alarm_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.program_alarm)
}
inline std::string* ProgramData::mutable_program_alarm() {
  std::string* _s = _internal_mutable_program_alarm();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ProgramData.program_alarm)
  return _s;
}
inline const std::string& ProgramData::_internal_program_alarm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.program_alarm_.Get();
}
inline void ProgramData::_internal_set_program_alarm(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.program_alarm_.Set(value, GetArenaForAllocation());
}
inline std::string* ProgramData::_internal_mutable_program_alarm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.program_alarm_.Mutable( GetArenaForAllocation());
}
inline std::string* ProgramData::release_program_alarm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ProgramData.program_alarm)
  return _impl_.program_alarm_.Release();
}
inline void ProgramData::set_allocated_program_alarm(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.program_alarm_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.program_alarm_.IsDefault()) {
          _impl_.program_alarm_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ProgramData.program_alarm)
}

// string program_annotation = 9;
inline void ProgramData::clear_program_annotation() {
  _impl_.program_annotation_.ClearToEmpty();
}
inline const std::string& ProgramData::program_annotation() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.program_annotation)
  return _internal_program_annotation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProgramData::set_program_annotation(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.program_annotation_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.program_annotation)
}
inline std::string* ProgramData::mutable_program_annotation() {
  std::string* _s = _internal_mutable_program_annotation();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ProgramData.program_annotation)
  return _s;
}
inline const std::string& ProgramData::_internal_program_annotation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.program_annotation_.Get();
}
inline void ProgramData::_internal_set_program_annotation(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.program_annotation_.Set(value, GetArenaForAllocation());
}
inline std::string* ProgramData::_internal_mutable_program_annotation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.program_annotation_.Mutable( GetArenaForAllocation());
}
inline std::string* ProgramData::release_program_annotation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ProgramData.program_annotation)
  return _impl_.program_annotation_.Release();
}
inline void ProgramData::set_allocated_program_annotation(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.program_annotation_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.program_annotation_.IsDefault()) {
          _impl_.program_annotation_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ProgramData.program_annotation)
}

// int32 speed_ratio = 10;
inline void ProgramData::clear_speed_ratio() {
  _impl_.speed_ratio_ = 0;
}
inline ::int32_t ProgramData::speed_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.speed_ratio)
  return _internal_speed_ratio();
}
inline void ProgramData::set_speed_ratio(::int32_t value) {
  _internal_set_speed_ratio(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.speed_ratio)
}
inline ::int32_t ProgramData::_internal_speed_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.speed_ratio_;
}
inline void ProgramData::_internal_set_speed_ratio(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.speed_ratio_ = value;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ProgramData::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& ProgramData::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& ProgramData::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.response)
  return _internal_response();
}
inline void ProgramData::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.ProgramData.response)
}
inline ::Nrmk::IndyFramework::Response* ProgramData::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* ProgramData::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ProgramData.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ProgramData::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* ProgramData::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ProgramData.response)
  return _msg;
}
inline void ProgramData::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ProgramData.response)
}

// -------------------------------------------------------------------

// StopState

// .Nrmk.IndyFramework.StopState.StopCategory category = 1;
inline void StopState::clear_category() {
  _impl_.category_ = 0;
}
inline ::Nrmk::IndyFramework::StopState_StopCategory StopState::category() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.StopState.category)
  return _internal_category();
}
inline void StopState::set_category(::Nrmk::IndyFramework::StopState_StopCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.StopState.category)
}
inline ::Nrmk::IndyFramework::StopState_StopCategory StopState::_internal_category() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::StopState_StopCategory>(_impl_.category_);
}
inline void StopState::_internal_set_category(::Nrmk::IndyFramework::StopState_StopCategory value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.category_ = value;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool StopState::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& StopState::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& StopState::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.StopState.response)
  return _internal_response();
}
inline void StopState::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.StopState.response)
}
inline ::Nrmk::IndyFramework::Response* StopState::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* StopState::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.StopState.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* StopState::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* StopState::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.StopState.response)
  return _msg;
}
inline void StopState::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.StopState.response)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Nrmk::IndyFramework::StopState_StopCategory> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::StopState_StopCategory>() {
  return ::Nrmk::IndyFramework::StopState_StopCategory_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_rtde_5fmsgs_2eproto_2epb_2eh
