// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ethercat_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ethercat_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ethercat_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ethercat_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ethercat_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[34]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ethercat_5fmsgs_2eproto;
namespace Nrmk {
namespace IndyFramework {
class DIODigitalInput;
class DIODigitalInputDefaultTypeInternal;
extern DIODigitalInputDefaultTypeInternal _DIODigitalInput_default_instance_;
class DIODigitalOutput;
class DIODigitalOutputDefaultTypeInternal;
extern DIODigitalOutputDefaultTypeInternal _DIODigitalOutput_default_instance_;
class DIOIndex;
class DIOIndexDefaultTypeInternal;
extern DIOIndexDefaultTypeInternal _DIOIndex_default_instance_;
class EcatDomainStatus;
class EcatDomainStatusDefaultTypeInternal;
extern EcatDomainStatusDefaultTypeInternal _EcatDomainStatus_default_instance_;
class EcatIndex;
class EcatIndexDefaultTypeInternal;
extern EcatIndexDefaultTypeInternal _EcatIndex_default_instance_;
class EcatServoOn;
class EcatServoOnDefaultTypeInternal;
extern EcatServoOnDefaultTypeInternal _EcatServoOn_default_instance_;
class EcatSystemReady;
class EcatSystemReadyDefaultTypeInternal;
extern EcatSystemReadyDefaultTypeInternal _EcatSystemReady_default_instance_;
class EndtoolDockingTx;
class EndtoolDockingTxDefaultTypeInternal;
extern EndtoolDockingTxDefaultTypeInternal _EndtoolDockingTx_default_instance_;
class EndtoolRx;
class EndtoolRxDefaultTypeInternal;
extern EndtoolRxDefaultTypeInternal _EndtoolRx_default_instance_;
class EndtoolTx;
class EndtoolTxDefaultTypeInternal;
extern EndtoolTxDefaultTypeInternal _EndtoolTx_default_instance_;
class EtherCATInfo;
class EtherCATInfoDefaultTypeInternal;
extern EtherCATInfoDefaultTypeInternal _EtherCATInfo_default_instance_;
class FTSensor;
class FTSensorDefaultTypeInternal;
extern FTSensorDefaultTypeInternal _FTSensor_default_instance_;
class IOBoardRx;
class IOBoardRxDefaultTypeInternal;
extern IOBoardRxDefaultTypeInternal _IOBoardRx_default_instance_;
class IOBoardTx;
class IOBoardTxDefaultTypeInternal;
extern IOBoardTxDefaultTypeInternal _IOBoardTx_default_instance_;
class LedDim;
class LedDimDefaultTypeInternal;
extern LedDimDefaultTypeInternal _LedDim_default_instance_;
class MasterStatus;
class MasterStatusDefaultTypeInternal;
extern MasterStatusDefaultTypeInternal _MasterStatus_default_instance_;
class RobotZeroCount;
class RobotZeroCountDefaultTypeInternal;
extern RobotZeroCountDefaultTypeInternal _RobotZeroCount_default_instance_;
class SDOFloatVal;
class SDOFloatValDefaultTypeInternal;
extern SDOFloatValDefaultTypeInternal _SDOFloatVal_default_instance_;
class SDOIntVal;
class SDOIntValDefaultTypeInternal;
extern SDOIntValDefaultTypeInternal _SDOIntVal_default_instance_;
class SDOStrVal;
class SDOStrValDefaultTypeInternal;
extern SDOStrValDefaultTypeInternal _SDOStrVal_default_instance_;
class ServoBrake;
class ServoBrakeDefaultTypeInternal;
extern ServoBrakeDefaultTypeInternal _ServoBrake_default_instance_;
class ServoError;
class ServoErrorDefaultTypeInternal;
extern ServoErrorDefaultTypeInternal _ServoError_default_instance_;
class ServoIndex;
class ServoIndexDefaultTypeInternal;
extern ServoIndexDefaultTypeInternal _ServoIndex_default_instance_;
class ServoParam;
class ServoParamDefaultTypeInternal;
extern ServoParamDefaultTypeInternal _ServoParam_default_instance_;
class ServoRx;
class ServoRxDefaultTypeInternal;
extern ServoRxDefaultTypeInternal _ServoRx_default_instance_;
class ServoRxIndex;
class ServoRxIndexDefaultTypeInternal;
extern ServoRxIndexDefaultTypeInternal _ServoRxIndex_default_instance_;
class ServoRxIndexKeba;
class ServoRxIndexKebaDefaultTypeInternal;
extern ServoRxIndexKebaDefaultTypeInternal _ServoRxIndexKeba_default_instance_;
class ServoRxKeba;
class ServoRxKebaDefaultTypeInternal;
extern ServoRxKebaDefaultTypeInternal _ServoRxKeba_default_instance_;
class ServoTemp;
class ServoTempDefaultTypeInternal;
extern ServoTempDefaultTypeInternal _ServoTemp_default_instance_;
class ServoTx;
class ServoTxDefaultTypeInternal;
extern ServoTxDefaultTypeInternal _ServoTx_default_instance_;
class ServoTxIndex;
class ServoTxIndexDefaultTypeInternal;
extern ServoTxIndexDefaultTypeInternal _ServoTxIndex_default_instance_;
class ServoTxKeba;
class ServoTxKebaDefaultTypeInternal;
extern ServoTxKebaDefaultTypeInternal _ServoTxKeba_default_instance_;
class SlaveStatus;
class SlaveStatusDefaultTypeInternal;
extern SlaveStatusDefaultTypeInternal _SlaveStatus_default_instance_;
class SlaveTypeNum;
class SlaveTypeNumDefaultTypeInternal;
extern SlaveTypeNumDefaultTypeInternal _SlaveTypeNum_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
PROTOBUF_NAMESPACE_OPEN
template<> ::Nrmk::IndyFramework::DIODigitalInput* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::DIODigitalInput>(Arena*);
template<> ::Nrmk::IndyFramework::DIODigitalOutput* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::DIODigitalOutput>(Arena*);
template<> ::Nrmk::IndyFramework::DIOIndex* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::DIOIndex>(Arena*);
template<> ::Nrmk::IndyFramework::EcatDomainStatus* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::EcatDomainStatus>(Arena*);
template<> ::Nrmk::IndyFramework::EcatIndex* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::EcatIndex>(Arena*);
template<> ::Nrmk::IndyFramework::EcatServoOn* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::EcatServoOn>(Arena*);
template<> ::Nrmk::IndyFramework::EcatSystemReady* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::EcatSystemReady>(Arena*);
template<> ::Nrmk::IndyFramework::EndtoolDockingTx* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::EndtoolDockingTx>(Arena*);
template<> ::Nrmk::IndyFramework::EndtoolRx* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::EndtoolRx>(Arena*);
template<> ::Nrmk::IndyFramework::EndtoolTx* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::EndtoolTx>(Arena*);
template<> ::Nrmk::IndyFramework::EtherCATInfo* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::EtherCATInfo>(Arena*);
template<> ::Nrmk::IndyFramework::FTSensor* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::FTSensor>(Arena*);
template<> ::Nrmk::IndyFramework::IOBoardRx* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::IOBoardRx>(Arena*);
template<> ::Nrmk::IndyFramework::IOBoardTx* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::IOBoardTx>(Arena*);
template<> ::Nrmk::IndyFramework::LedDim* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::LedDim>(Arena*);
template<> ::Nrmk::IndyFramework::MasterStatus* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MasterStatus>(Arena*);
template<> ::Nrmk::IndyFramework::RobotZeroCount* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::RobotZeroCount>(Arena*);
template<> ::Nrmk::IndyFramework::SDOFloatVal* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::SDOFloatVal>(Arena*);
template<> ::Nrmk::IndyFramework::SDOIntVal* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::SDOIntVal>(Arena*);
template<> ::Nrmk::IndyFramework::SDOStrVal* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::SDOStrVal>(Arena*);
template<> ::Nrmk::IndyFramework::ServoBrake* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ServoBrake>(Arena*);
template<> ::Nrmk::IndyFramework::ServoError* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ServoError>(Arena*);
template<> ::Nrmk::IndyFramework::ServoIndex* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ServoIndex>(Arena*);
template<> ::Nrmk::IndyFramework::ServoParam* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ServoParam>(Arena*);
template<> ::Nrmk::IndyFramework::ServoRx* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ServoRx>(Arena*);
template<> ::Nrmk::IndyFramework::ServoRxIndex* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ServoRxIndex>(Arena*);
template<> ::Nrmk::IndyFramework::ServoRxIndexKeba* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ServoRxIndexKeba>(Arena*);
template<> ::Nrmk::IndyFramework::ServoRxKeba* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ServoRxKeba>(Arena*);
template<> ::Nrmk::IndyFramework::ServoTemp* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ServoTemp>(Arena*);
template<> ::Nrmk::IndyFramework::ServoTx* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ServoTx>(Arena*);
template<> ::Nrmk::IndyFramework::ServoTxIndex* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ServoTxIndex>(Arena*);
template<> ::Nrmk::IndyFramework::ServoTxKeba* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ServoTxKeba>(Arena*);
template<> ::Nrmk::IndyFramework::SlaveStatus* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::SlaveStatus>(Arena*);
template<> ::Nrmk::IndyFramework::SlaveTypeNum* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::SlaveTypeNum>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Nrmk {
namespace IndyFramework {

// ===================================================================

class MasterStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MasterStatus) */ {
 public:
  MasterStatus();
  virtual ~MasterStatus();

  MasterStatus(const MasterStatus& from);
  MasterStatus(MasterStatus&& from) noexcept
    : MasterStatus() {
    *this = ::std::move(from);
  }

  inline MasterStatus& operator=(const MasterStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline MasterStatus& operator=(MasterStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MasterStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterStatus* internal_default_instance() {
    return reinterpret_cast<const MasterStatus*>(
               &_MasterStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MasterStatus* other);
  friend void swap(MasterStatus& a, MasterStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MasterStatus* New() const final {
    return CreateMaybeMessage<MasterStatus>(nullptr);
  }

  MasterStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MasterStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MasterStatus& from);
  void MergeFrom(const MasterStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MasterStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MasterStatus)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SlaveStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SlaveStatus) */ {
 public:
  SlaveStatus();
  virtual ~SlaveStatus();

  SlaveStatus(const SlaveStatus& from);
  SlaveStatus(SlaveStatus&& from) noexcept
    : SlaveStatus() {
    *this = ::std::move(from);
  }

  inline SlaveStatus& operator=(const SlaveStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlaveStatus& operator=(SlaveStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SlaveStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SlaveStatus* internal_default_instance() {
    return reinterpret_cast<const SlaveStatus*>(
               &_SlaveStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SlaveStatus* other);
  friend void swap(SlaveStatus& a, SlaveStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SlaveStatus* New() const final {
    return CreateMaybeMessage<SlaveStatus>(nullptr);
  }

  SlaveStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlaveStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SlaveStatus& from);
  void MergeFrom(const SlaveStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlaveStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.SlaveStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 status = 1;
  int status_size() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 status(int index) const;
  void set_status(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_status();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SlaveStatus)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > status_;
  mutable std::atomic<int> _status_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class EcatDomainStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.EcatDomainStatus) */ {
 public:
  EcatDomainStatus();
  virtual ~EcatDomainStatus();

  EcatDomainStatus(const EcatDomainStatus& from);
  EcatDomainStatus(EcatDomainStatus&& from) noexcept
    : EcatDomainStatus() {
    *this = ::std::move(from);
  }

  inline EcatDomainStatus& operator=(const EcatDomainStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcatDomainStatus& operator=(EcatDomainStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EcatDomainStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EcatDomainStatus* internal_default_instance() {
    return reinterpret_cast<const EcatDomainStatus*>(
               &_EcatDomainStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(EcatDomainStatus* other);
  friend void swap(EcatDomainStatus& a, EcatDomainStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EcatDomainStatus* New() const final {
    return CreateMaybeMessage<EcatDomainStatus>(nullptr);
  }

  EcatDomainStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EcatDomainStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EcatDomainStatus& from);
  void MergeFrom(const EcatDomainStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EcatDomainStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.EcatDomainStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.EcatDomainStatus)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class EcatSystemReady :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.EcatSystemReady) */ {
 public:
  EcatSystemReady();
  virtual ~EcatSystemReady();

  EcatSystemReady(const EcatSystemReady& from);
  EcatSystemReady(EcatSystemReady&& from) noexcept
    : EcatSystemReady() {
    *this = ::std::move(from);
  }

  inline EcatSystemReady& operator=(const EcatSystemReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcatSystemReady& operator=(EcatSystemReady&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EcatSystemReady& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EcatSystemReady* internal_default_instance() {
    return reinterpret_cast<const EcatSystemReady*>(
               &_EcatSystemReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EcatSystemReady* other);
  friend void swap(EcatSystemReady& a, EcatSystemReady& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EcatSystemReady* New() const final {
    return CreateMaybeMessage<EcatSystemReady>(nullptr);
  }

  EcatSystemReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EcatSystemReady>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EcatSystemReady& from);
  void MergeFrom(const EcatSystemReady& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EcatSystemReady* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.EcatSystemReady";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool ready = 1;
  int ready_size() const;
  void clear_ready();
  static const int kReadyFieldNumber = 1;
  bool ready(int index) const;
  void set_ready(int index, bool value);
  void add_ready(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      ready() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_ready();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.EcatSystemReady)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > ready_;
  mutable std::atomic<int> _ready_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class EcatServoOn :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.EcatServoOn) */ {
 public:
  EcatServoOn();
  virtual ~EcatServoOn();

  EcatServoOn(const EcatServoOn& from);
  EcatServoOn(EcatServoOn&& from) noexcept
    : EcatServoOn() {
    *this = ::std::move(from);
  }

  inline EcatServoOn& operator=(const EcatServoOn& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcatServoOn& operator=(EcatServoOn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EcatServoOn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EcatServoOn* internal_default_instance() {
    return reinterpret_cast<const EcatServoOn*>(
               &_EcatServoOn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(EcatServoOn* other);
  friend void swap(EcatServoOn& a, EcatServoOn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EcatServoOn* New() const final {
    return CreateMaybeMessage<EcatServoOn>(nullptr);
  }

  EcatServoOn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EcatServoOn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EcatServoOn& from);
  void MergeFrom(const EcatServoOn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EcatServoOn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.EcatServoOn";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool servo = 1;
  int servo_size() const;
  void clear_servo();
  static const int kServoFieldNumber = 1;
  bool servo(int index) const;
  void set_servo(int index, bool value);
  void add_servo(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      servo() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_servo();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.EcatServoOn)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > servo_;
  mutable std::atomic<int> _servo_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SlaveTypeNum :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SlaveTypeNum) */ {
 public:
  SlaveTypeNum();
  virtual ~SlaveTypeNum();

  SlaveTypeNum(const SlaveTypeNum& from);
  SlaveTypeNum(SlaveTypeNum&& from) noexcept
    : SlaveTypeNum() {
    *this = ::std::move(from);
  }

  inline SlaveTypeNum& operator=(const SlaveTypeNum& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlaveTypeNum& operator=(SlaveTypeNum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SlaveTypeNum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SlaveTypeNum* internal_default_instance() {
    return reinterpret_cast<const SlaveTypeNum*>(
               &_SlaveTypeNum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SlaveTypeNum* other);
  friend void swap(SlaveTypeNum& a, SlaveTypeNum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SlaveTypeNum* New() const final {
    return CreateMaybeMessage<SlaveTypeNum>(nullptr);
  }

  SlaveTypeNum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlaveTypeNum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SlaveTypeNum& from);
  void MergeFrom(const SlaveTypeNum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlaveTypeNum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.SlaveTypeNum";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 num_servo = 1;
  void clear_num_servo();
  static const int kNumServoFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_servo() const;
  void set_num_servo(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 num_ioboard = 2;
  void clear_num_ioboard();
  static const int kNumIoboardFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ioboard() const;
  void set_num_ioboard(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 num_endtool = 3;
  void clear_num_endtool();
  static const int kNumEndtoolFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_endtool() const;
  void set_num_endtool(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 num_dio = 4;
  void clear_num_dio();
  static const int kNumDioFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_dio() const;
  void set_num_dio(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SlaveTypeNum)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_servo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ioboard_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_endtool_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_dio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoIndex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ServoIndex) */ {
 public:
  ServoIndex();
  virtual ~ServoIndex();

  ServoIndex(const ServoIndex& from);
  ServoIndex(ServoIndex&& from) noexcept
    : ServoIndex() {
    *this = ::std::move(from);
  }

  inline ServoIndex& operator=(const ServoIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoIndex& operator=(ServoIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoIndex* internal_default_instance() {
    return reinterpret_cast<const ServoIndex*>(
               &_ServoIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ServoIndex* other);
  friend void swap(ServoIndex& a, ServoIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoIndex* New() const final {
    return CreateMaybeMessage<ServoIndex>(nullptr);
  }

  ServoIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoIndex& from);
  void MergeFrom(const ServoIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ServoIndex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 servoIndex = 1;
  void clear_servoindex();
  static const int kServoIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 servoindex() const;
  void set_servoindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ServoIndex)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servoindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class EcatIndex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.EcatIndex) */ {
 public:
  EcatIndex();
  virtual ~EcatIndex();

  EcatIndex(const EcatIndex& from);
  EcatIndex(EcatIndex&& from) noexcept
    : EcatIndex() {
    *this = ::std::move(from);
  }

  inline EcatIndex& operator=(const EcatIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcatIndex& operator=(EcatIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EcatIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EcatIndex* internal_default_instance() {
    return reinterpret_cast<const EcatIndex*>(
               &_EcatIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(EcatIndex* other);
  friend void swap(EcatIndex& a, EcatIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EcatIndex* New() const final {
    return CreateMaybeMessage<EcatIndex>(nullptr);
  }

  EcatIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EcatIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EcatIndex& from);
  void MergeFrom(const EcatIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EcatIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.EcatIndex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 ecatIndex = 1;
  void clear_ecatindex();
  static const int kEcatIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 ecatindex() const;
  void set_ecatindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.EcatIndex)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ecatindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoTx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ServoTx) */ {
 public:
  ServoTx();
  virtual ~ServoTx();

  ServoTx(const ServoTx& from);
  ServoTx(ServoTx&& from) noexcept
    : ServoTx() {
    *this = ::std::move(from);
  }

  inline ServoTx& operator=(const ServoTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoTx& operator=(ServoTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoTx* internal_default_instance() {
    return reinterpret_cast<const ServoTx*>(
               &_ServoTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ServoTx* other);
  friend void swap(ServoTx& a, ServoTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoTx* New() const final {
    return CreateMaybeMessage<ServoTx>(nullptr);
  }

  ServoTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoTx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoTx& from);
  void MergeFrom(const ServoTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoTx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ServoTx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 statusWord = 1;
  void clear_statusword();
  static const int kStatusWordFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 statusword() const;
  void set_statusword(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 modeOpDisp = 2;
  void clear_modeopdisp();
  static const int kModeOpDispFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 modeopdisp() const;
  void set_modeopdisp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 actualPosition = 3;
  void clear_actualposition();
  static const int kActualPositionFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 actualposition() const;
  void set_actualposition(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 actualVelocity = 4;
  void clear_actualvelocity();
  static const int kActualVelocityFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 actualvelocity() const;
  void set_actualvelocity(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 actualTorque = 5;
  void clear_actualtorque();
  static const int kActualTorqueFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 actualtorque() const;
  void set_actualtorque(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ServoTx)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statusword_;
  ::PROTOBUF_NAMESPACE_ID::int32 modeopdisp_;
  ::PROTOBUF_NAMESPACE_ID::int32 actualposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 actualvelocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 actualtorque_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoRx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ServoRx) */ {
 public:
  ServoRx();
  virtual ~ServoRx();

  ServoRx(const ServoRx& from);
  ServoRx(ServoRx&& from) noexcept
    : ServoRx() {
    *this = ::std::move(from);
  }

  inline ServoRx& operator=(const ServoRx& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoRx& operator=(ServoRx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoRx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoRx* internal_default_instance() {
    return reinterpret_cast<const ServoRx*>(
               &_ServoRx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ServoRx* other);
  friend void swap(ServoRx& a, ServoRx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoRx* New() const final {
    return CreateMaybeMessage<ServoRx>(nullptr);
  }

  ServoRx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoRx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoRx& from);
  void MergeFrom(const ServoRx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoRx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ServoRx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 controlWord = 1;
  void clear_controlword();
  static const int kControlWordFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 controlword() const;
  void set_controlword(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 modeOp = 2;
  void clear_modeop();
  static const int kModeOpFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 modeop() const;
  void set_modeop(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 targetPosition = 3;
  void clear_targetposition();
  static const int kTargetPositionFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 targetposition() const;
  void set_targetposition(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 targetVelocity = 4;
  void clear_targetvelocity();
  static const int kTargetVelocityFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 targetvelocity() const;
  void set_targetvelocity(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 targetTorque = 5;
  void clear_targettorque();
  static const int kTargetTorqueFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 targettorque() const;
  void set_targettorque(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ServoRx)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controlword_;
  ::PROTOBUF_NAMESPACE_ID::int32 modeop_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 targetvelocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 targettorque_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoTxIndex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ServoTxIndex) */ {
 public:
  ServoTxIndex();
  virtual ~ServoTxIndex();

  ServoTxIndex(const ServoTxIndex& from);
  ServoTxIndex(ServoTxIndex&& from) noexcept
    : ServoTxIndex() {
    *this = ::std::move(from);
  }

  inline ServoTxIndex& operator=(const ServoTxIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoTxIndex& operator=(ServoTxIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoTxIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoTxIndex* internal_default_instance() {
    return reinterpret_cast<const ServoTxIndex*>(
               &_ServoTxIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ServoTxIndex* other);
  friend void swap(ServoTxIndex& a, ServoTxIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoTxIndex* New() const final {
    return CreateMaybeMessage<ServoTxIndex>(nullptr);
  }

  ServoTxIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoTxIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoTxIndex& from);
  void MergeFrom(const ServoTxIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoTxIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ServoTxIndex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.ServoTx tx = 2;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 2;
  const ::Nrmk::IndyFramework::ServoTx& tx() const;
  ::Nrmk::IndyFramework::ServoTx* release_tx();
  ::Nrmk::IndyFramework::ServoTx* mutable_tx();
  void set_allocated_tx(::Nrmk::IndyFramework::ServoTx* tx);

  // uint32 servoIndex = 1;
  void clear_servoindex();
  static const int kServoIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 servoindex() const;
  void set_servoindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ServoTxIndex)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::ServoTx* tx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servoindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoRxIndex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ServoRxIndex) */ {
 public:
  ServoRxIndex();
  virtual ~ServoRxIndex();

  ServoRxIndex(const ServoRxIndex& from);
  ServoRxIndex(ServoRxIndex&& from) noexcept
    : ServoRxIndex() {
    *this = ::std::move(from);
  }

  inline ServoRxIndex& operator=(const ServoRxIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoRxIndex& operator=(ServoRxIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoRxIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoRxIndex* internal_default_instance() {
    return reinterpret_cast<const ServoRxIndex*>(
               &_ServoRxIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ServoRxIndex* other);
  friend void swap(ServoRxIndex& a, ServoRxIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoRxIndex* New() const final {
    return CreateMaybeMessage<ServoRxIndex>(nullptr);
  }

  ServoRxIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoRxIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoRxIndex& from);
  void MergeFrom(const ServoRxIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoRxIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ServoRxIndex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.ServoRx rx = 2;
  bool has_rx() const;
  void clear_rx();
  static const int kRxFieldNumber = 2;
  const ::Nrmk::IndyFramework::ServoRx& rx() const;
  ::Nrmk::IndyFramework::ServoRx* release_rx();
  ::Nrmk::IndyFramework::ServoRx* mutable_rx();
  void set_allocated_rx(::Nrmk::IndyFramework::ServoRx* rx);

  // uint32 servoIndex = 1;
  void clear_servoindex();
  static const int kServoIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 servoindex() const;
  void set_servoindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ServoRxIndex)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::ServoRx* rx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servoindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoTxKeba :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ServoTxKeba) */ {
 public:
  ServoTxKeba();
  virtual ~ServoTxKeba();

  ServoTxKeba(const ServoTxKeba& from);
  ServoTxKeba(ServoTxKeba&& from) noexcept
    : ServoTxKeba() {
    *this = ::std::move(from);
  }

  inline ServoTxKeba& operator=(const ServoTxKeba& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoTxKeba& operator=(ServoTxKeba&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoTxKeba& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoTxKeba* internal_default_instance() {
    return reinterpret_cast<const ServoTxKeba*>(
               &_ServoTxKeba_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ServoTxKeba* other);
  friend void swap(ServoTxKeba& a, ServoTxKeba& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoTxKeba* New() const final {
    return CreateMaybeMessage<ServoTxKeba>(nullptr);
  }

  ServoTxKeba* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoTxKeba>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoTxKeba& from);
  void MergeFrom(const ServoTxKeba& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoTxKeba* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ServoTxKeba";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 statusWord = 1;
  void clear_statusword();
  static const int kStatusWordFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 statusword() const;
  void set_statusword(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 statusWord2 = 2;
  void clear_statusword2();
  static const int kStatusWord2FieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 statusword2() const;
  void set_statusword2(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 statusWord3 = 3;
  void clear_statusword3();
  static const int kStatusWord3FieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 statusword3() const;
  void set_statusword3(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 actualPosition = 4;
  void clear_actualposition();
  static const int kActualPositionFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 actualposition() const;
  void set_actualposition(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 actualPosition2 = 5;
  void clear_actualposition2();
  static const int kActualPosition2FieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 actualposition2() const;
  void set_actualposition2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 actualPosition3 = 6;
  void clear_actualposition3();
  static const int kActualPosition3FieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 actualposition3() const;
  void set_actualposition3(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 actualVelocity = 7;
  void clear_actualvelocity();
  static const int kActualVelocityFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 actualvelocity() const;
  void set_actualvelocity(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 actualVelocity2 = 8;
  void clear_actualvelocity2();
  static const int kActualVelocity2FieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 actualvelocity2() const;
  void set_actualvelocity2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 actualVelocity3 = 9;
  void clear_actualvelocity3();
  static const int kActualVelocity3FieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 actualvelocity3() const;
  void set_actualvelocity3(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ServoTxKeba)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statusword_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statusword2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statusword3_;
  ::PROTOBUF_NAMESPACE_ID::int32 actualposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 actualposition2_;
  ::PROTOBUF_NAMESPACE_ID::int32 actualposition3_;
  ::PROTOBUF_NAMESPACE_ID::int32 actualvelocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 actualvelocity2_;
  ::PROTOBUF_NAMESPACE_ID::int32 actualvelocity3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoRxKeba :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ServoRxKeba) */ {
 public:
  ServoRxKeba();
  virtual ~ServoRxKeba();

  ServoRxKeba(const ServoRxKeba& from);
  ServoRxKeba(ServoRxKeba&& from) noexcept
    : ServoRxKeba() {
    *this = ::std::move(from);
  }

  inline ServoRxKeba& operator=(const ServoRxKeba& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoRxKeba& operator=(ServoRxKeba&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoRxKeba& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoRxKeba* internal_default_instance() {
    return reinterpret_cast<const ServoRxKeba*>(
               &_ServoRxKeba_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ServoRxKeba* other);
  friend void swap(ServoRxKeba& a, ServoRxKeba& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoRxKeba* New() const final {
    return CreateMaybeMessage<ServoRxKeba>(nullptr);
  }

  ServoRxKeba* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoRxKeba>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoRxKeba& from);
  void MergeFrom(const ServoRxKeba& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoRxKeba* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ServoRxKeba";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 controlWord = 1;
  void clear_controlword();
  static const int kControlWordFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 controlword() const;
  void set_controlword(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 controlWord2 = 2;
  void clear_controlword2();
  static const int kControlWord2FieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 controlword2() const;
  void set_controlword2(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int64 targetPosition = 4;
  void clear_targetposition();
  static const int kTargetPositionFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 targetposition() const;
  void set_targetposition(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 targetPosition2 = 5;
  void clear_targetposition2();
  static const int kTargetPosition2FieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 targetposition2() const;
  void set_targetposition2(::PROTOBUF_NAMESPACE_ID::int64 value);

  // uint32 controlWord3 = 3;
  void clear_controlword3();
  static const int kControlWord3FieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 controlword3() const;
  void set_controlword3(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 targetTorque = 7;
  void clear_targettorque();
  static const int kTargetTorqueFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 targettorque() const;
  void set_targettorque(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 targetPosition3 = 6;
  void clear_targetposition3();
  static const int kTargetPosition3FieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int64 targetposition3() const;
  void set_targetposition3(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 targetTorque2 = 8;
  void clear_targettorque2();
  static const int kTargetTorque2FieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 targettorque2() const;
  void set_targettorque2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 targetTorque3 = 9;
  void clear_targettorque3();
  static const int kTargetTorque3FieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 targettorque3() const;
  void set_targettorque3(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ServoRxKeba)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controlword_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controlword2_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetposition_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetposition2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controlword3_;
  ::PROTOBUF_NAMESPACE_ID::int32 targettorque_;
  ::PROTOBUF_NAMESPACE_ID::int64 targetposition3_;
  ::PROTOBUF_NAMESPACE_ID::int32 targettorque2_;
  ::PROTOBUF_NAMESPACE_ID::int32 targettorque3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoRxIndexKeba :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ServoRxIndexKeba) */ {
 public:
  ServoRxIndexKeba();
  virtual ~ServoRxIndexKeba();

  ServoRxIndexKeba(const ServoRxIndexKeba& from);
  ServoRxIndexKeba(ServoRxIndexKeba&& from) noexcept
    : ServoRxIndexKeba() {
    *this = ::std::move(from);
  }

  inline ServoRxIndexKeba& operator=(const ServoRxIndexKeba& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoRxIndexKeba& operator=(ServoRxIndexKeba&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoRxIndexKeba& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoRxIndexKeba* internal_default_instance() {
    return reinterpret_cast<const ServoRxIndexKeba*>(
               &_ServoRxIndexKeba_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ServoRxIndexKeba* other);
  friend void swap(ServoRxIndexKeba& a, ServoRxIndexKeba& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoRxIndexKeba* New() const final {
    return CreateMaybeMessage<ServoRxIndexKeba>(nullptr);
  }

  ServoRxIndexKeba* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoRxIndexKeba>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoRxIndexKeba& from);
  void MergeFrom(const ServoRxIndexKeba& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoRxIndexKeba* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ServoRxIndexKeba";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.ServoRxKeba rx = 2;
  bool has_rx() const;
  void clear_rx();
  static const int kRxFieldNumber = 2;
  const ::Nrmk::IndyFramework::ServoRxKeba& rx() const;
  ::Nrmk::IndyFramework::ServoRxKeba* release_rx();
  ::Nrmk::IndyFramework::ServoRxKeba* mutable_rx();
  void set_allocated_rx(::Nrmk::IndyFramework::ServoRxKeba* rx);

  // uint32 servoIndex = 1;
  void clear_servoindex();
  static const int kServoIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 servoindex() const;
  void set_servoindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ServoRxIndexKeba)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::ServoRxKeba* rx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servoindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoTemp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ServoTemp) */ {
 public:
  ServoTemp();
  virtual ~ServoTemp();

  ServoTemp(const ServoTemp& from);
  ServoTemp(ServoTemp&& from) noexcept
    : ServoTemp() {
    *this = ::std::move(from);
  }

  inline ServoTemp& operator=(const ServoTemp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoTemp& operator=(ServoTemp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoTemp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoTemp* internal_default_instance() {
    return reinterpret_cast<const ServoTemp*>(
               &_ServoTemp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ServoTemp* other);
  friend void swap(ServoTemp& a, ServoTemp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoTemp* New() const final {
    return CreateMaybeMessage<ServoTemp>(nullptr);
  }

  ServoTemp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoTemp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoTemp& from);
  void MergeFrom(const ServoTemp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoTemp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ServoTemp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float temperature = 1;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 1;
  float temperature() const;
  void set_temperature(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ServoTemp)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float temperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoError :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ServoError) */ {
 public:
  ServoError();
  virtual ~ServoError();

  ServoError(const ServoError& from);
  ServoError(ServoError&& from) noexcept
    : ServoError() {
    *this = ::std::move(from);
  }

  inline ServoError& operator=(const ServoError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoError& operator=(ServoError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoError* internal_default_instance() {
    return reinterpret_cast<const ServoError*>(
               &_ServoError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ServoError* other);
  friend void swap(ServoError& a, ServoError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoError* New() const final {
    return CreateMaybeMessage<ServoError>(nullptr);
  }

  ServoError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoError& from);
  void MergeFrom(const ServoError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ServoError";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 errorCode = 1;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ServoError)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoBrake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ServoBrake) */ {
 public:
  ServoBrake();
  virtual ~ServoBrake();

  ServoBrake(const ServoBrake& from);
  ServoBrake(ServoBrake&& from) noexcept
    : ServoBrake() {
    *this = ::std::move(from);
  }

  inline ServoBrake& operator=(const ServoBrake& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoBrake& operator=(ServoBrake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoBrake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoBrake* internal_default_instance() {
    return reinterpret_cast<const ServoBrake*>(
               &_ServoBrake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ServoBrake* other);
  friend void swap(ServoBrake& a, ServoBrake& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoBrake* New() const final {
    return CreateMaybeMessage<ServoBrake>(nullptr);
  }

  ServoBrake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoBrake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoBrake& from);
  void MergeFrom(const ServoBrake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoBrake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ServoBrake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 ecatIndex = 1;
  void clear_ecatindex();
  static const int kEcatIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 ecatindex() const;
  void set_ecatindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool onoff = 2;
  void clear_onoff();
  static const int kOnoffFieldNumber = 2;
  bool onoff() const;
  void set_onoff(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ServoBrake)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ecatindex_;
  bool onoff_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class FTSensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FTSensor) */ {
 public:
  FTSensor();
  virtual ~FTSensor();

  FTSensor(const FTSensor& from);
  FTSensor(FTSensor&& from) noexcept
    : FTSensor() {
    *this = ::std::move(from);
  }

  inline FTSensor& operator=(const FTSensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline FTSensor& operator=(FTSensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FTSensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FTSensor* internal_default_instance() {
    return reinterpret_cast<const FTSensor*>(
               &_FTSensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(FTSensor* other);
  friend void swap(FTSensor& a, FTSensor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FTSensor* New() const final {
    return CreateMaybeMessage<FTSensor>(nullptr);
  }

  FTSensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FTSensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FTSensor& from);
  void MergeFrom(const FTSensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FTSensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.FTSensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 fx = 1;
  void clear_fx();
  static const int kFxFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 fx() const;
  void set_fx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 fy = 2;
  void clear_fy();
  static const int kFyFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 fy() const;
  void set_fy(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 fz = 3;
  void clear_fz();
  static const int kFzFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 fz() const;
  void set_fz(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 tx = 4;
  void clear_tx();
  static const int kTxFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 tx() const;
  void set_tx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ty = 5;
  void clear_ty();
  static const int kTyFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 ty() const;
  void set_ty(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 tz = 6;
  void clear_tz();
  static const int kTzFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 tz() const;
  void set_tz(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FTSensor)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 fx_;
  ::PROTOBUF_NAMESPACE_ID::int32 fy_;
  ::PROTOBUF_NAMESPACE_ID::int32 fz_;
  ::PROTOBUF_NAMESPACE_ID::int32 tx_;
  ::PROTOBUF_NAMESPACE_ID::int32 ty_;
  ::PROTOBUF_NAMESPACE_ID::int32 tz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class EndtoolTx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.EndtoolTx) */ {
 public:
  EndtoolTx();
  virtual ~EndtoolTx();

  EndtoolTx(const EndtoolTx& from);
  EndtoolTx(EndtoolTx&& from) noexcept
    : EndtoolTx() {
    *this = ::std::move(from);
  }

  inline EndtoolTx& operator=(const EndtoolTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndtoolTx& operator=(EndtoolTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndtoolTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndtoolTx* internal_default_instance() {
    return reinterpret_cast<const EndtoolTx*>(
               &_EndtoolTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(EndtoolTx* other);
  friend void swap(EndtoolTx& a, EndtoolTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndtoolTx* New() const final {
    return CreateMaybeMessage<EndtoolTx>(nullptr);
  }

  EndtoolTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndtoolTx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndtoolTx& from);
  void MergeFrom(const EndtoolTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndtoolTx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.EndtoolTx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.FTSensor ft_sensor = 3;
  bool has_ft_sensor() const;
  void clear_ft_sensor();
  static const int kFtSensorFieldNumber = 3;
  const ::Nrmk::IndyFramework::FTSensor& ft_sensor() const;
  ::Nrmk::IndyFramework::FTSensor* release_ft_sensor();
  ::Nrmk::IndyFramework::FTSensor* mutable_ft_sensor();
  void set_allocated_ft_sensor(::Nrmk::IndyFramework::FTSensor* ft_sensor);

  // uint32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 button = 2;
  void clear_button();
  static const int kButtonFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 button() const;
  void set_button(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 ft_state = 4;
  void clear_ft_state();
  static const int kFtStateFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 ft_state() const;
  void set_ft_state(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 ft_error = 5;
  void clear_ft_error();
  static const int kFtErrorFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 ft_error() const;
  void set_ft_error(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.EndtoolTx)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::FTSensor* ft_sensor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 button_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ft_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ft_error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class EndtoolRx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.EndtoolRx) */ {
 public:
  EndtoolRx();
  virtual ~EndtoolRx();

  EndtoolRx(const EndtoolRx& from);
  EndtoolRx(EndtoolRx&& from) noexcept
    : EndtoolRx() {
    *this = ::std::move(from);
  }

  inline EndtoolRx& operator=(const EndtoolRx& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndtoolRx& operator=(EndtoolRx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndtoolRx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndtoolRx* internal_default_instance() {
    return reinterpret_cast<const EndtoolRx*>(
               &_EndtoolRx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(EndtoolRx* other);
  friend void swap(EndtoolRx& a, EndtoolRx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndtoolRx* New() const final {
    return CreateMaybeMessage<EndtoolRx>(nullptr);
  }

  EndtoolRx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndtoolRx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndtoolRx& from);
  void MergeFrom(const EndtoolRx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndtoolRx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.EndtoolRx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 eqc = 1;
  void clear_eqc();
  static const int kEqcFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 eqc() const;
  void set_eqc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 gripper = 2;
  void clear_gripper();
  static const int kGripperFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 gripper() const;
  void set_gripper(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 ft_param = 3;
  void clear_ft_param();
  static const int kFtParamFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 ft_param() const;
  void set_ft_param(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 led_mode = 4;
  void clear_led_mode();
  static const int kLedModeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 led_mode() const;
  void set_led_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 led_g = 5;
  void clear_led_g();
  static const int kLedGFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 led_g() const;
  void set_led_g(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 led_r = 6;
  void clear_led_r();
  static const int kLedRFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint32 led_r() const;
  void set_led_r(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 led_b = 7;
  void clear_led_b();
  static const int kLedBFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint32 led_b() const;
  void set_led_b(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.EndtoolRx)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 eqc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gripper_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ft_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 led_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 led_g_;
  ::PROTOBUF_NAMESPACE_ID::uint32 led_r_;
  ::PROTOBUF_NAMESPACE_ID::uint32 led_b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class EndtoolDockingTx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.EndtoolDockingTx) */ {
 public:
  EndtoolDockingTx();
  virtual ~EndtoolDockingTx();

  EndtoolDockingTx(const EndtoolDockingTx& from);
  EndtoolDockingTx(EndtoolDockingTx&& from) noexcept
    : EndtoolDockingTx() {
    *this = ::std::move(from);
  }

  inline EndtoolDockingTx& operator=(const EndtoolDockingTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndtoolDockingTx& operator=(EndtoolDockingTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndtoolDockingTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndtoolDockingTx* internal_default_instance() {
    return reinterpret_cast<const EndtoolDockingTx*>(
               &_EndtoolDockingTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(EndtoolDockingTx* other);
  friend void swap(EndtoolDockingTx& a, EndtoolDockingTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndtoolDockingTx* New() const final {
    return CreateMaybeMessage<EndtoolDockingTx>(nullptr);
  }

  EndtoolDockingTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndtoolDockingTx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndtoolDockingTx& from);
  void MergeFrom(const EndtoolDockingTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndtoolDockingTx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.EndtoolDockingTx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 docking_status = 1;
  void clear_docking_status();
  static const int kDockingStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_status() const;
  void set_docking_status(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 docking_button = 2;
  void clear_docking_button();
  static const int kDockingButtonFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_button() const;
  void set_docking_button(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 docking_dist1 = 3;
  void clear_docking_dist1();
  static const int kDockingDist1FieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist1() const;
  void set_docking_dist1(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 docking_dist2 = 4;
  void clear_docking_dist2();
  static const int kDockingDist2FieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist2() const;
  void set_docking_dist2(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 docking_dist3 = 5;
  void clear_docking_dist3();
  static const int kDockingDist3FieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist3() const;
  void set_docking_dist3(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 docking_dist4 = 6;
  void clear_docking_dist4();
  static const int kDockingDist4FieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist4() const;
  void set_docking_dist4(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 docking_dist5 = 7;
  void clear_docking_dist5();
  static const int kDockingDist5FieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist5() const;
  void set_docking_dist5(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 docking_dist6 = 8;
  void clear_docking_dist6();
  static const int kDockingDist6FieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist6() const;
  void set_docking_dist6(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 docking_dist7 = 9;
  void clear_docking_dist7();
  static const int kDockingDist7FieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist7() const;
  void set_docking_dist7(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 docking_dist8 = 10;
  void clear_docking_dist8();
  static const int kDockingDist8FieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist8() const;
  void set_docking_dist8(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 direct_status = 11;
  void clear_direct_status();
  static const int kDirectStatusFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_status() const;
  void set_direct_status(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 direct_button = 12;
  void clear_direct_button();
  static const int kDirectButtonFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_button() const;
  void set_direct_button(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 direct_encoder = 13;
  void clear_direct_encoder();
  static const int kDirectEncoderFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_encoder() const;
  void set_direct_encoder(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 joystic1x = 14;
  void clear_joystic1x();
  static const int kJoystic1XFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::uint32 joystic1x() const;
  void set_joystic1x(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 joystic1y = 15;
  void clear_joystic1y();
  static const int kJoystic1YFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::uint32 joystic1y() const;
  void set_joystic1y(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 joystic2x = 16;
  void clear_joystic2x();
  static const int kJoystic2XFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::uint32 joystic2x() const;
  void set_joystic2x(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 joystic2y = 17;
  void clear_joystic2y();
  static const int kJoystic2YFieldNumber = 17;
  ::PROTOBUF_NAMESPACE_ID::uint32 joystic2y() const;
  void set_joystic2y(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.EndtoolDockingTx)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_button_;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist5_;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist6_;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist7_;
  ::PROTOBUF_NAMESPACE_ID::uint32 docking_dist8_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_button_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_encoder_;
  ::PROTOBUF_NAMESPACE_ID::uint32 joystic1x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 joystic1y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 joystic2x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 joystic2y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class LedDim :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.LedDim) */ {
 public:
  LedDim();
  virtual ~LedDim();

  LedDim(const LedDim& from);
  LedDim(LedDim&& from) noexcept
    : LedDim() {
    *this = ::std::move(from);
  }

  inline LedDim& operator=(const LedDim& from) {
    CopyFrom(from);
    return *this;
  }
  inline LedDim& operator=(LedDim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LedDim& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LedDim* internal_default_instance() {
    return reinterpret_cast<const LedDim*>(
               &_LedDim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(LedDim* other);
  friend void swap(LedDim& a, LedDim& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LedDim* New() const final {
    return CreateMaybeMessage<LedDim>(nullptr);
  }

  LedDim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LedDim>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LedDim& from);
  void MergeFrom(const LedDim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LedDim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.LedDim";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 led_dim = 1;
  void clear_led_dim();
  static const int kLedDimFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 led_dim() const;
  void set_led_dim(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.LedDim)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 led_dim_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class IOBoardTx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IOBoardTx) */ {
 public:
  IOBoardTx();
  virtual ~IOBoardTx();

  IOBoardTx(const IOBoardTx& from);
  IOBoardTx(IOBoardTx&& from) noexcept
    : IOBoardTx() {
    *this = ::std::move(from);
  }

  inline IOBoardTx& operator=(const IOBoardTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOBoardTx& operator=(IOBoardTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IOBoardTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IOBoardTx* internal_default_instance() {
    return reinterpret_cast<const IOBoardTx*>(
               &_IOBoardTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(IOBoardTx* other);
  friend void swap(IOBoardTx& a, IOBoardTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IOBoardTx* New() const final {
    return CreateMaybeMessage<IOBoardTx>(nullptr);
  }

  IOBoardTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IOBoardTx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IOBoardTx& from);
  void MergeFrom(const IOBoardTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOBoardTx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.IOBoardTx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.FTSensor ft_sensor = 6;
  bool has_ft_sensor() const;
  void clear_ft_sensor();
  static const int kFtSensorFieldNumber = 6;
  const ::Nrmk::IndyFramework::FTSensor& ft_sensor() const;
  ::Nrmk::IndyFramework::FTSensor* release_ft_sensor();
  ::Nrmk::IndyFramework::FTSensor* mutable_ft_sensor();
  void set_allocated_ft_sensor(::Nrmk::IndyFramework::FTSensor* ft_sensor);

  // uint32 di5v = 1;
  void clear_di5v();
  static const int kDi5VFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 di5v() const;
  void set_di5v(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 di24v1 = 2;
  void clear_di24v1();
  static const int kDi24V1FieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 di24v1() const;
  void set_di24v1(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 di24v2 = 3;
  void clear_di24v2();
  static const int kDi24V2FieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 di24v2() const;
  void set_di24v2(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 ai1 = 4;
  void clear_ai1();
  static const int kAi1FieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 ai1() const;
  void set_ai1(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 ai2 = 5;
  void clear_ai2();
  static const int kAi2FieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 ai2() const;
  void set_ai2(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IOBoardTx)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::FTSensor* ft_sensor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 di5v_;
  ::PROTOBUF_NAMESPACE_ID::uint32 di24v1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 di24v2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ai1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ai2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class IOBoardRx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IOBoardRx) */ {
 public:
  IOBoardRx();
  virtual ~IOBoardRx();

  IOBoardRx(const IOBoardRx& from);
  IOBoardRx(IOBoardRx&& from) noexcept
    : IOBoardRx() {
    *this = ::std::move(from);
  }

  inline IOBoardRx& operator=(const IOBoardRx& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOBoardRx& operator=(IOBoardRx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IOBoardRx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IOBoardRx* internal_default_instance() {
    return reinterpret_cast<const IOBoardRx*>(
               &_IOBoardRx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(IOBoardRx* other);
  friend void swap(IOBoardRx& a, IOBoardRx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IOBoardRx* New() const final {
    return CreateMaybeMessage<IOBoardRx>(nullptr);
  }

  IOBoardRx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IOBoardRx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IOBoardRx& from);
  void MergeFrom(const IOBoardRx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOBoardRx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.IOBoardRx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 do5v = 1;
  void clear_do5v();
  static const int kDo5VFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 do5v() const;
  void set_do5v(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 do24v1 = 2;
  void clear_do24v1();
  static const int kDo24V1FieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 do24v1() const;
  void set_do24v1(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 do24v2 = 3;
  void clear_do24v2();
  static const int kDo24V2FieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 do24v2() const;
  void set_do24v2(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 ao1 = 4;
  void clear_ao1();
  static const int kAo1FieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 ao1() const;
  void set_ao1(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 ao2 = 5;
  void clear_ao2();
  static const int kAo2FieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 ao2() const;
  void set_ao2(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 ft_param = 6;
  void clear_ft_param();
  static const int kFtParamFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint32 ft_param() const;
  void set_ft_param(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IOBoardRx)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 do5v_;
  ::PROTOBUF_NAMESPACE_ID::uint32 do24v1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 do24v2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ao1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ao2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ft_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DIOIndex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DIOIndex) */ {
 public:
  DIOIndex();
  virtual ~DIOIndex();

  DIOIndex(const DIOIndex& from);
  DIOIndex(DIOIndex&& from) noexcept
    : DIOIndex() {
    *this = ::std::move(from);
  }

  inline DIOIndex& operator=(const DIOIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline DIOIndex& operator=(DIOIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DIOIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DIOIndex* internal_default_instance() {
    return reinterpret_cast<const DIOIndex*>(
               &_DIOIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(DIOIndex* other);
  friend void swap(DIOIndex& a, DIOIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DIOIndex* New() const final {
    return CreateMaybeMessage<DIOIndex>(nullptr);
  }

  DIOIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DIOIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DIOIndex& from);
  void MergeFrom(const DIOIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DIOIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.DIOIndex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dioIndex = 1;
  void clear_dioindex();
  static const int kDioIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 dioindex() const;
  void set_dioindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DIOIndex)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dioindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DIODigitalInput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DIODigitalInput) */ {
 public:
  DIODigitalInput();
  virtual ~DIODigitalInput();

  DIODigitalInput(const DIODigitalInput& from);
  DIODigitalInput(DIODigitalInput&& from) noexcept
    : DIODigitalInput() {
    *this = ::std::move(from);
  }

  inline DIODigitalInput& operator=(const DIODigitalInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline DIODigitalInput& operator=(DIODigitalInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DIODigitalInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DIODigitalInput* internal_default_instance() {
    return reinterpret_cast<const DIODigitalInput*>(
               &_DIODigitalInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(DIODigitalInput* other);
  friend void swap(DIODigitalInput& a, DIODigitalInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DIODigitalInput* New() const final {
    return CreateMaybeMessage<DIODigitalInput>(nullptr);
  }

  DIODigitalInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DIODigitalInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DIODigitalInput& from);
  void MergeFrom(const DIODigitalInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DIODigitalInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.DIODigitalInput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 di_list = 2;
  int di_list_size() const;
  void clear_di_list();
  static const int kDiListFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 di_list(int index) const;
  void set_di_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_di_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      di_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_di_list();

  // uint32 dioIndex = 1;
  void clear_dioindex();
  static const int kDioIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 dioindex() const;
  void set_dioindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DIODigitalInput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > di_list_;
  mutable std::atomic<int> _di_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dioindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DIODigitalOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DIODigitalOutput) */ {
 public:
  DIODigitalOutput();
  virtual ~DIODigitalOutput();

  DIODigitalOutput(const DIODigitalOutput& from);
  DIODigitalOutput(DIODigitalOutput&& from) noexcept
    : DIODigitalOutput() {
    *this = ::std::move(from);
  }

  inline DIODigitalOutput& operator=(const DIODigitalOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline DIODigitalOutput& operator=(DIODigitalOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DIODigitalOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DIODigitalOutput* internal_default_instance() {
    return reinterpret_cast<const DIODigitalOutput*>(
               &_DIODigitalOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(DIODigitalOutput* other);
  friend void swap(DIODigitalOutput& a, DIODigitalOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DIODigitalOutput* New() const final {
    return CreateMaybeMessage<DIODigitalOutput>(nullptr);
  }

  DIODigitalOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DIODigitalOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DIODigitalOutput& from);
  void MergeFrom(const DIODigitalOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DIODigitalOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.DIODigitalOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 do_list = 2;
  int do_list_size() const;
  void clear_do_list();
  static const int kDoListFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 do_list(int index) const;
  void set_do_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_do_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      do_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_do_list();

  // uint32 dioIndex = 1;
  void clear_dioindex();
  static const int kDioIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 dioindex() const;
  void set_dioindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DIODigitalOutput)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > do_list_;
  mutable std::atomic<int> _do_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dioindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ServoParam) */ {
 public:
  ServoParam();
  virtual ~ServoParam();

  ServoParam(const ServoParam& from);
  ServoParam(ServoParam&& from) noexcept
    : ServoParam() {
    *this = ::std::move(from);
  }

  inline ServoParam& operator=(const ServoParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoParam& operator=(ServoParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoParam* internal_default_instance() {
    return reinterpret_cast<const ServoParam*>(
               &_ServoParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(ServoParam* other);
  friend void swap(ServoParam& a, ServoParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoParam* New() const final {
    return CreateMaybeMessage<ServoParam>(nullptr);
  }

  ServoParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoParam& from);
  void MergeFrom(const ServoParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ServoParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 slaveIdx = 1;
  void clear_slaveidx();
  static const int kSlaveIdxFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 slaveidx() const;
  void set_slaveidx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 val = 2;
  void clear_val();
  static const int kValFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ServoParam)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slaveidx_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SDOIntVal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SDOIntVal) */ {
 public:
  SDOIntVal();
  virtual ~SDOIntVal();

  SDOIntVal(const SDOIntVal& from);
  SDOIntVal(SDOIntVal&& from) noexcept
    : SDOIntVal() {
    *this = ::std::move(from);
  }

  inline SDOIntVal& operator=(const SDOIntVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDOIntVal& operator=(SDOIntVal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDOIntVal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDOIntVal* internal_default_instance() {
    return reinterpret_cast<const SDOIntVal*>(
               &_SDOIntVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(SDOIntVal* other);
  friend void swap(SDOIntVal& a, SDOIntVal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDOIntVal* New() const final {
    return CreateMaybeMessage<SDOIntVal>(nullptr);
  }

  SDOIntVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDOIntVal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDOIntVal& from);
  void MergeFrom(const SDOIntVal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDOIntVal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.SDOIntVal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SDOIntVal)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SDOFloatVal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SDOFloatVal) */ {
 public:
  SDOFloatVal();
  virtual ~SDOFloatVal();

  SDOFloatVal(const SDOFloatVal& from);
  SDOFloatVal(SDOFloatVal&& from) noexcept
    : SDOFloatVal() {
    *this = ::std::move(from);
  }

  inline SDOFloatVal& operator=(const SDOFloatVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDOFloatVal& operator=(SDOFloatVal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDOFloatVal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDOFloatVal* internal_default_instance() {
    return reinterpret_cast<const SDOFloatVal*>(
               &_SDOFloatVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(SDOFloatVal* other);
  friend void swap(SDOFloatVal& a, SDOFloatVal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDOFloatVal* New() const final {
    return CreateMaybeMessage<SDOFloatVal>(nullptr);
  }

  SDOFloatVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDOFloatVal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDOFloatVal& from);
  void MergeFrom(const SDOFloatVal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDOFloatVal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.SDOFloatVal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  float val() const;
  void set_val(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SDOFloatVal)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SDOStrVal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SDOStrVal) */ {
 public:
  SDOStrVal();
  virtual ~SDOStrVal();

  SDOStrVal(const SDOStrVal& from);
  SDOStrVal(SDOStrVal&& from) noexcept
    : SDOStrVal() {
    *this = ::std::move(from);
  }

  inline SDOStrVal& operator=(const SDOStrVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDOStrVal& operator=(SDOStrVal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDOStrVal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDOStrVal* internal_default_instance() {
    return reinterpret_cast<const SDOStrVal*>(
               &_SDOStrVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(SDOStrVal* other);
  friend void swap(SDOStrVal& a, SDOStrVal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDOStrVal* New() const final {
    return CreateMaybeMessage<SDOStrVal>(nullptr);
  }

  SDOStrVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDOStrVal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDOStrVal& from);
  void MergeFrom(const SDOStrVal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDOStrVal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.SDOStrVal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  const std::string& val() const;
  void set_val(const std::string& value);
  void set_val(std::string&& value);
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  std::string* mutable_val();
  std::string* release_val();
  void set_allocated_val(std::string* val);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SDOStrVal)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class EtherCATInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.EtherCATInfo) */ {
 public:
  EtherCATInfo();
  virtual ~EtherCATInfo();

  EtherCATInfo(const EtherCATInfo& from);
  EtherCATInfo(EtherCATInfo&& from) noexcept
    : EtherCATInfo() {
    *this = ::std::move(from);
  }

  inline EtherCATInfo& operator=(const EtherCATInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EtherCATInfo& operator=(EtherCATInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EtherCATInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EtherCATInfo* internal_default_instance() {
    return reinterpret_cast<const EtherCATInfo*>(
               &_EtherCATInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(EtherCATInfo* other);
  friend void swap(EtherCATInfo& a, EtherCATInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EtherCATInfo* New() const final {
    return CreateMaybeMessage<EtherCATInfo>(nullptr);
  }

  EtherCATInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EtherCATInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EtherCATInfo& from);
  void MergeFrom(const EtherCATInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EtherCATInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.EtherCATInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.EtherCATInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class RobotZeroCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.RobotZeroCount) */ {
 public:
  RobotZeroCount();
  virtual ~RobotZeroCount();

  RobotZeroCount(const RobotZeroCount& from);
  RobotZeroCount(RobotZeroCount&& from) noexcept
    : RobotZeroCount() {
    *this = ::std::move(from);
  }

  inline RobotZeroCount& operator=(const RobotZeroCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotZeroCount& operator=(RobotZeroCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotZeroCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotZeroCount* internal_default_instance() {
    return reinterpret_cast<const RobotZeroCount*>(
               &_RobotZeroCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(RobotZeroCount* other);
  friend void swap(RobotZeroCount& a, RobotZeroCount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotZeroCount* New() const final {
    return CreateMaybeMessage<RobotZeroCount>(nullptr);
  }

  RobotZeroCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotZeroCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotZeroCount& from);
  void MergeFrom(const RobotZeroCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotZeroCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.RobotZeroCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ethercat_5fmsgs_2eproto);
    return ::descriptor_table_ethercat_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.RobotZeroCount)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ethercat_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MasterStatus

// uint32 status = 1;
inline void MasterStatus::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MasterStatus::status() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MasterStatus.status)
  return status_;
}
inline void MasterStatus::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MasterStatus.status)
}

// -------------------------------------------------------------------

// SlaveStatus

// repeated uint32 status = 1;
inline int SlaveStatus::status_size() const {
  return status_.size();
}
inline void SlaveStatus::clear_status() {
  status_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlaveStatus::status(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SlaveStatus.status)
  return status_.Get(index);
}
inline void SlaveStatus::set_status(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  status_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SlaveStatus.status)
}
inline void SlaveStatus::add_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  status_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.SlaveStatus.status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SlaveStatus::status() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.SlaveStatus.status)
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SlaveStatus::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.SlaveStatus.status)
  return &status_;
}

// -------------------------------------------------------------------

// EcatDomainStatus

// uint32 status = 1;
inline void EcatDomainStatus::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EcatDomainStatus::status() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EcatDomainStatus.status)
  return status_;
}
inline void EcatDomainStatus::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EcatDomainStatus.status)
}

// -------------------------------------------------------------------

// EcatSystemReady

// repeated bool ready = 1;
inline int EcatSystemReady::ready_size() const {
  return ready_.size();
}
inline void EcatSystemReady::clear_ready() {
  ready_.Clear();
}
inline bool EcatSystemReady::ready(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EcatSystemReady.ready)
  return ready_.Get(index);
}
inline void EcatSystemReady::set_ready(int index, bool value) {
  ready_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EcatSystemReady.ready)
}
inline void EcatSystemReady::add_ready(bool value) {
  ready_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.EcatSystemReady.ready)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
EcatSystemReady::ready() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.EcatSystemReady.ready)
  return ready_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
EcatSystemReady::mutable_ready() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.EcatSystemReady.ready)
  return &ready_;
}

// -------------------------------------------------------------------

// EcatServoOn

// repeated bool servo = 1;
inline int EcatServoOn::servo_size() const {
  return servo_.size();
}
inline void EcatServoOn::clear_servo() {
  servo_.Clear();
}
inline bool EcatServoOn::servo(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EcatServoOn.servo)
  return servo_.Get(index);
}
inline void EcatServoOn::set_servo(int index, bool value) {
  servo_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EcatServoOn.servo)
}
inline void EcatServoOn::add_servo(bool value) {
  servo_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.EcatServoOn.servo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
EcatServoOn::servo() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.EcatServoOn.servo)
  return servo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
EcatServoOn::mutable_servo() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.EcatServoOn.servo)
  return &servo_;
}

// -------------------------------------------------------------------

// SlaveTypeNum

// uint32 num_servo = 1;
inline void SlaveTypeNum::clear_num_servo() {
  num_servo_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlaveTypeNum::num_servo() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SlaveTypeNum.num_servo)
  return num_servo_;
}
inline void SlaveTypeNum::set_num_servo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_servo_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SlaveTypeNum.num_servo)
}

// uint32 num_ioboard = 2;
inline void SlaveTypeNum::clear_num_ioboard() {
  num_ioboard_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlaveTypeNum::num_ioboard() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SlaveTypeNum.num_ioboard)
  return num_ioboard_;
}
inline void SlaveTypeNum::set_num_ioboard(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ioboard_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SlaveTypeNum.num_ioboard)
}

// uint32 num_endtool = 3;
inline void SlaveTypeNum::clear_num_endtool() {
  num_endtool_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlaveTypeNum::num_endtool() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SlaveTypeNum.num_endtool)
  return num_endtool_;
}
inline void SlaveTypeNum::set_num_endtool(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_endtool_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SlaveTypeNum.num_endtool)
}

// uint32 num_dio = 4;
inline void SlaveTypeNum::clear_num_dio() {
  num_dio_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlaveTypeNum::num_dio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SlaveTypeNum.num_dio)
  return num_dio_;
}
inline void SlaveTypeNum::set_num_dio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_dio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SlaveTypeNum.num_dio)
}

// -------------------------------------------------------------------

// ServoIndex

// uint32 servoIndex = 1;
inline void ServoIndex::clear_servoindex() {
  servoindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoIndex::servoindex() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoIndex.servoIndex)
  return servoindex_;
}
inline void ServoIndex::set_servoindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  servoindex_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoIndex.servoIndex)
}

// -------------------------------------------------------------------

// EcatIndex

// uint32 ecatIndex = 1;
inline void EcatIndex::clear_ecatindex() {
  ecatindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EcatIndex::ecatindex() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EcatIndex.ecatIndex)
  return ecatindex_;
}
inline void EcatIndex::set_ecatindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ecatindex_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EcatIndex.ecatIndex)
}

// -------------------------------------------------------------------

// ServoTx

// uint32 statusWord = 1;
inline void ServoTx::clear_statusword() {
  statusword_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTx::statusword() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTx.statusWord)
  return statusword_;
}
inline void ServoTx::set_statusword(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statusword_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTx.statusWord)
}

// int32 modeOpDisp = 2;
inline void ServoTx::clear_modeopdisp() {
  modeopdisp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoTx::modeopdisp() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTx.modeOpDisp)
  return modeopdisp_;
}
inline void ServoTx::set_modeopdisp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modeopdisp_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTx.modeOpDisp)
}

// int32 actualPosition = 3;
inline void ServoTx::clear_actualposition() {
  actualposition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoTx::actualposition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTx.actualPosition)
  return actualposition_;
}
inline void ServoTx::set_actualposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actualposition_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTx.actualPosition)
}

// int32 actualVelocity = 4;
inline void ServoTx::clear_actualvelocity() {
  actualvelocity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoTx::actualvelocity() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTx.actualVelocity)
  return actualvelocity_;
}
inline void ServoTx::set_actualvelocity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actualvelocity_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTx.actualVelocity)
}

// int32 actualTorque = 5;
inline void ServoTx::clear_actualtorque() {
  actualtorque_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoTx::actualtorque() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTx.actualTorque)
  return actualtorque_;
}
inline void ServoTx::set_actualtorque(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actualtorque_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTx.actualTorque)
}

// -------------------------------------------------------------------

// ServoRx

// uint32 controlWord = 1;
inline void ServoRx::clear_controlword() {
  controlword_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoRx::controlword() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRx.controlWord)
  return controlword_;
}
inline void ServoRx::set_controlword(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  controlword_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRx.controlWord)
}

// int32 modeOp = 2;
inline void ServoRx::clear_modeop() {
  modeop_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoRx::modeop() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRx.modeOp)
  return modeop_;
}
inline void ServoRx::set_modeop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modeop_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRx.modeOp)
}

// int64 targetPosition = 3;
inline void ServoRx::clear_targetposition() {
  targetposition_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServoRx::targetposition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRx.targetPosition)
  return targetposition_;
}
inline void ServoRx::set_targetposition(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  targetposition_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRx.targetPosition)
}

// int32 targetVelocity = 4;
inline void ServoRx::clear_targetvelocity() {
  targetvelocity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoRx::targetvelocity() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRx.targetVelocity)
  return targetvelocity_;
}
inline void ServoRx::set_targetvelocity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targetvelocity_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRx.targetVelocity)
}

// int32 targetTorque = 5;
inline void ServoRx::clear_targettorque() {
  targettorque_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoRx::targettorque() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRx.targetTorque)
  return targettorque_;
}
inline void ServoRx::set_targettorque(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targettorque_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRx.targetTorque)
}

// -------------------------------------------------------------------

// ServoTxIndex

// uint32 servoIndex = 1;
inline void ServoTxIndex::clear_servoindex() {
  servoindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTxIndex::servoindex() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTxIndex.servoIndex)
  return servoindex_;
}
inline void ServoTxIndex::set_servoindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  servoindex_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTxIndex.servoIndex)
}

// .Nrmk.IndyFramework.ServoTx tx = 2;
inline bool ServoTxIndex::has_tx() const {
  return this != internal_default_instance() && tx_ != nullptr;
}
inline void ServoTxIndex::clear_tx() {
  if (GetArenaNoVirtual() == nullptr && tx_ != nullptr) {
    delete tx_;
  }
  tx_ = nullptr;
}
inline const ::Nrmk::IndyFramework::ServoTx& ServoTxIndex::tx() const {
  const ::Nrmk::IndyFramework::ServoTx* p = tx_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTxIndex.tx)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::ServoTx*>(
      &::Nrmk::IndyFramework::_ServoTx_default_instance_);
}
inline ::Nrmk::IndyFramework::ServoTx* ServoTxIndex::release_tx() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ServoTxIndex.tx)
  
  ::Nrmk::IndyFramework::ServoTx* temp = tx_;
  tx_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::ServoTx* ServoTxIndex::mutable_tx() {
  
  if (tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::ServoTx>(GetArenaNoVirtual());
    tx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ServoTxIndex.tx)
  return tx_;
}
inline void ServoTxIndex::set_allocated_tx(::Nrmk::IndyFramework::ServoTx* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tx_;
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    
  } else {
    
  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ServoTxIndex.tx)
}

// -------------------------------------------------------------------

// ServoRxIndex

// uint32 servoIndex = 1;
inline void ServoRxIndex::clear_servoindex() {
  servoindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoRxIndex::servoindex() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRxIndex.servoIndex)
  return servoindex_;
}
inline void ServoRxIndex::set_servoindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  servoindex_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRxIndex.servoIndex)
}

// .Nrmk.IndyFramework.ServoRx rx = 2;
inline bool ServoRxIndex::has_rx() const {
  return this != internal_default_instance() && rx_ != nullptr;
}
inline void ServoRxIndex::clear_rx() {
  if (GetArenaNoVirtual() == nullptr && rx_ != nullptr) {
    delete rx_;
  }
  rx_ = nullptr;
}
inline const ::Nrmk::IndyFramework::ServoRx& ServoRxIndex::rx() const {
  const ::Nrmk::IndyFramework::ServoRx* p = rx_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRxIndex.rx)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::ServoRx*>(
      &::Nrmk::IndyFramework::_ServoRx_default_instance_);
}
inline ::Nrmk::IndyFramework::ServoRx* ServoRxIndex::release_rx() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ServoRxIndex.rx)
  
  ::Nrmk::IndyFramework::ServoRx* temp = rx_;
  rx_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::ServoRx* ServoRxIndex::mutable_rx() {
  
  if (rx_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::ServoRx>(GetArenaNoVirtual());
    rx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ServoRxIndex.rx)
  return rx_;
}
inline void ServoRxIndex::set_allocated_rx(::Nrmk::IndyFramework::ServoRx* rx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rx_;
  }
  if (rx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rx, submessage_arena);
    }
    
  } else {
    
  }
  rx_ = rx;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ServoRxIndex.rx)
}

// -------------------------------------------------------------------

// ServoTxKeba

// uint32 statusWord = 1;
inline void ServoTxKeba::clear_statusword() {
  statusword_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTxKeba::statusword() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTxKeba.statusWord)
  return statusword_;
}
inline void ServoTxKeba::set_statusword(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statusword_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTxKeba.statusWord)
}

// uint32 statusWord2 = 2;
inline void ServoTxKeba::clear_statusword2() {
  statusword2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTxKeba::statusword2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTxKeba.statusWord2)
  return statusword2_;
}
inline void ServoTxKeba::set_statusword2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statusword2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTxKeba.statusWord2)
}

// uint32 statusWord3 = 3;
inline void ServoTxKeba::clear_statusword3() {
  statusword3_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoTxKeba::statusword3() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTxKeba.statusWord3)
  return statusword3_;
}
inline void ServoTxKeba::set_statusword3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statusword3_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTxKeba.statusWord3)
}

// int32 actualPosition = 4;
inline void ServoTxKeba::clear_actualposition() {
  actualposition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoTxKeba::actualposition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTxKeba.actualPosition)
  return actualposition_;
}
inline void ServoTxKeba::set_actualposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actualposition_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTxKeba.actualPosition)
}

// int32 actualPosition2 = 5;
inline void ServoTxKeba::clear_actualposition2() {
  actualposition2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoTxKeba::actualposition2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTxKeba.actualPosition2)
  return actualposition2_;
}
inline void ServoTxKeba::set_actualposition2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actualposition2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTxKeba.actualPosition2)
}

// int32 actualPosition3 = 6;
inline void ServoTxKeba::clear_actualposition3() {
  actualposition3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoTxKeba::actualposition3() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTxKeba.actualPosition3)
  return actualposition3_;
}
inline void ServoTxKeba::set_actualposition3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actualposition3_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTxKeba.actualPosition3)
}

// int32 actualVelocity = 7;
inline void ServoTxKeba::clear_actualvelocity() {
  actualvelocity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoTxKeba::actualvelocity() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTxKeba.actualVelocity)
  return actualvelocity_;
}
inline void ServoTxKeba::set_actualvelocity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actualvelocity_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTxKeba.actualVelocity)
}

// int32 actualVelocity2 = 8;
inline void ServoTxKeba::clear_actualvelocity2() {
  actualvelocity2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoTxKeba::actualvelocity2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTxKeba.actualVelocity2)
  return actualvelocity2_;
}
inline void ServoTxKeba::set_actualvelocity2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actualvelocity2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTxKeba.actualVelocity2)
}

// int32 actualVelocity3 = 9;
inline void ServoTxKeba::clear_actualvelocity3() {
  actualvelocity3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoTxKeba::actualvelocity3() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTxKeba.actualVelocity3)
  return actualvelocity3_;
}
inline void ServoTxKeba::set_actualvelocity3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actualvelocity3_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTxKeba.actualVelocity3)
}

// -------------------------------------------------------------------

// ServoRxKeba

// uint32 controlWord = 1;
inline void ServoRxKeba::clear_controlword() {
  controlword_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoRxKeba::controlword() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRxKeba.controlWord)
  return controlword_;
}
inline void ServoRxKeba::set_controlword(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  controlword_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRxKeba.controlWord)
}

// uint32 controlWord2 = 2;
inline void ServoRxKeba::clear_controlword2() {
  controlword2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoRxKeba::controlword2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRxKeba.controlWord2)
  return controlword2_;
}
inline void ServoRxKeba::set_controlword2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  controlword2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRxKeba.controlWord2)
}

// uint32 controlWord3 = 3;
inline void ServoRxKeba::clear_controlword3() {
  controlword3_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoRxKeba::controlword3() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRxKeba.controlWord3)
  return controlword3_;
}
inline void ServoRxKeba::set_controlword3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  controlword3_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRxKeba.controlWord3)
}

// int64 targetPosition = 4;
inline void ServoRxKeba::clear_targetposition() {
  targetposition_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServoRxKeba::targetposition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRxKeba.targetPosition)
  return targetposition_;
}
inline void ServoRxKeba::set_targetposition(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  targetposition_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRxKeba.targetPosition)
}

// int64 targetPosition2 = 5;
inline void ServoRxKeba::clear_targetposition2() {
  targetposition2_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServoRxKeba::targetposition2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRxKeba.targetPosition2)
  return targetposition2_;
}
inline void ServoRxKeba::set_targetposition2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  targetposition2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRxKeba.targetPosition2)
}

// int64 targetPosition3 = 6;
inline void ServoRxKeba::clear_targetposition3() {
  targetposition3_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServoRxKeba::targetposition3() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRxKeba.targetPosition3)
  return targetposition3_;
}
inline void ServoRxKeba::set_targetposition3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  targetposition3_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRxKeba.targetPosition3)
}

// int32 targetTorque = 7;
inline void ServoRxKeba::clear_targettorque() {
  targettorque_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoRxKeba::targettorque() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRxKeba.targetTorque)
  return targettorque_;
}
inline void ServoRxKeba::set_targettorque(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targettorque_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRxKeba.targetTorque)
}

// int32 targetTorque2 = 8;
inline void ServoRxKeba::clear_targettorque2() {
  targettorque2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoRxKeba::targettorque2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRxKeba.targetTorque2)
  return targettorque2_;
}
inline void ServoRxKeba::set_targettorque2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targettorque2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRxKeba.targetTorque2)
}

// int32 targetTorque3 = 9;
inline void ServoRxKeba::clear_targettorque3() {
  targettorque3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoRxKeba::targettorque3() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRxKeba.targetTorque3)
  return targettorque3_;
}
inline void ServoRxKeba::set_targettorque3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targettorque3_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRxKeba.targetTorque3)
}

// -------------------------------------------------------------------

// ServoRxIndexKeba

// uint32 servoIndex = 1;
inline void ServoRxIndexKeba::clear_servoindex() {
  servoindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoRxIndexKeba::servoindex() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRxIndexKeba.servoIndex)
  return servoindex_;
}
inline void ServoRxIndexKeba::set_servoindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  servoindex_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoRxIndexKeba.servoIndex)
}

// .Nrmk.IndyFramework.ServoRxKeba rx = 2;
inline bool ServoRxIndexKeba::has_rx() const {
  return this != internal_default_instance() && rx_ != nullptr;
}
inline void ServoRxIndexKeba::clear_rx() {
  if (GetArenaNoVirtual() == nullptr && rx_ != nullptr) {
    delete rx_;
  }
  rx_ = nullptr;
}
inline const ::Nrmk::IndyFramework::ServoRxKeba& ServoRxIndexKeba::rx() const {
  const ::Nrmk::IndyFramework::ServoRxKeba* p = rx_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoRxIndexKeba.rx)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::ServoRxKeba*>(
      &::Nrmk::IndyFramework::_ServoRxKeba_default_instance_);
}
inline ::Nrmk::IndyFramework::ServoRxKeba* ServoRxIndexKeba::release_rx() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ServoRxIndexKeba.rx)
  
  ::Nrmk::IndyFramework::ServoRxKeba* temp = rx_;
  rx_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::ServoRxKeba* ServoRxIndexKeba::mutable_rx() {
  
  if (rx_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::ServoRxKeba>(GetArenaNoVirtual());
    rx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ServoRxIndexKeba.rx)
  return rx_;
}
inline void ServoRxIndexKeba::set_allocated_rx(::Nrmk::IndyFramework::ServoRxKeba* rx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rx_;
  }
  if (rx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rx, submessage_arena);
    }
    
  } else {
    
  }
  rx_ = rx;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ServoRxIndexKeba.rx)
}

// -------------------------------------------------------------------

// ServoTemp

// float temperature = 1;
inline void ServoTemp::clear_temperature() {
  temperature_ = 0;
}
inline float ServoTemp::temperature() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoTemp.temperature)
  return temperature_;
}
inline void ServoTemp::set_temperature(float value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoTemp.temperature)
}

// -------------------------------------------------------------------

// ServoError

// uint32 errorCode = 1;
inline void ServoError::clear_errorcode() {
  errorcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoError::errorcode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoError.errorCode)
  return errorcode_;
}
inline void ServoError::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoError.errorCode)
}

// -------------------------------------------------------------------

// ServoBrake

// uint32 ecatIndex = 1;
inline void ServoBrake::clear_ecatindex() {
  ecatindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoBrake::ecatindex() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoBrake.ecatIndex)
  return ecatindex_;
}
inline void ServoBrake::set_ecatindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ecatindex_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoBrake.ecatIndex)
}

// bool onoff = 2;
inline void ServoBrake::clear_onoff() {
  onoff_ = false;
}
inline bool ServoBrake::onoff() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoBrake.onoff)
  return onoff_;
}
inline void ServoBrake::set_onoff(bool value) {
  
  onoff_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoBrake.onoff)
}

// -------------------------------------------------------------------

// FTSensor

// int32 fx = 1;
inline void FTSensor::clear_fx() {
  fx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FTSensor::fx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensor.fx)
  return fx_;
}
inline void FTSensor::set_fx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensor.fx)
}

// int32 fy = 2;
inline void FTSensor::clear_fy() {
  fy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FTSensor::fy() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensor.fy)
  return fy_;
}
inline void FTSensor::set_fy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fy_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensor.fy)
}

// int32 fz = 3;
inline void FTSensor::clear_fz() {
  fz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FTSensor::fz() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensor.fz)
  return fz_;
}
inline void FTSensor::set_fz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fz_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensor.fz)
}

// int32 tx = 4;
inline void FTSensor::clear_tx() {
  tx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FTSensor::tx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensor.tx)
  return tx_;
}
inline void FTSensor::set_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensor.tx)
}

// int32 ty = 5;
inline void FTSensor::clear_ty() {
  ty_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FTSensor::ty() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensor.ty)
  return ty_;
}
inline void FTSensor::set_ty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ty_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensor.ty)
}

// int32 tz = 6;
inline void FTSensor::clear_tz() {
  tz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FTSensor::tz() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensor.tz)
  return tz_;
}
inline void FTSensor::set_tz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tz_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensor.tz)
}

// -------------------------------------------------------------------

// EndtoolTx

// uint32 status = 1;
inline void EndtoolTx::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolTx::status() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolTx.status)
  return status_;
}
inline void EndtoolTx::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolTx.status)
}

// uint32 button = 2;
inline void EndtoolTx::clear_button() {
  button_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolTx::button() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolTx.button)
  return button_;
}
inline void EndtoolTx::set_button(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  button_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolTx.button)
}

// .Nrmk.IndyFramework.FTSensor ft_sensor = 3;
inline bool EndtoolTx::has_ft_sensor() const {
  return this != internal_default_instance() && ft_sensor_ != nullptr;
}
inline void EndtoolTx::clear_ft_sensor() {
  if (GetArenaNoVirtual() == nullptr && ft_sensor_ != nullptr) {
    delete ft_sensor_;
  }
  ft_sensor_ = nullptr;
}
inline const ::Nrmk::IndyFramework::FTSensor& EndtoolTx::ft_sensor() const {
  const ::Nrmk::IndyFramework::FTSensor* p = ft_sensor_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolTx.ft_sensor)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::FTSensor*>(
      &::Nrmk::IndyFramework::_FTSensor_default_instance_);
}
inline ::Nrmk::IndyFramework::FTSensor* EndtoolTx::release_ft_sensor() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.EndtoolTx.ft_sensor)
  
  ::Nrmk::IndyFramework::FTSensor* temp = ft_sensor_;
  ft_sensor_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::FTSensor* EndtoolTx::mutable_ft_sensor() {
  
  if (ft_sensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::FTSensor>(GetArenaNoVirtual());
    ft_sensor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.EndtoolTx.ft_sensor)
  return ft_sensor_;
}
inline void EndtoolTx::set_allocated_ft_sensor(::Nrmk::IndyFramework::FTSensor* ft_sensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ft_sensor_;
  }
  if (ft_sensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ft_sensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ft_sensor, submessage_arena);
    }
    
  } else {
    
  }
  ft_sensor_ = ft_sensor;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.EndtoolTx.ft_sensor)
}

// uint32 ft_state = 4;
inline void EndtoolTx::clear_ft_state() {
  ft_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolTx::ft_state() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolTx.ft_state)
  return ft_state_;
}
inline void EndtoolTx::set_ft_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ft_state_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolTx.ft_state)
}

// uint32 ft_error = 5;
inline void EndtoolTx::clear_ft_error() {
  ft_error_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolTx::ft_error() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolTx.ft_error)
  return ft_error_;
}
inline void EndtoolTx::set_ft_error(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ft_error_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolTx.ft_error)
}

// -------------------------------------------------------------------

// EndtoolRx

// uint32 eqc = 1;
inline void EndtoolRx::clear_eqc() {
  eqc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolRx::eqc() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRx.eqc)
  return eqc_;
}
inline void EndtoolRx::set_eqc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  eqc_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRx.eqc)
}

// uint32 gripper = 2;
inline void EndtoolRx::clear_gripper() {
  gripper_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolRx::gripper() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRx.gripper)
  return gripper_;
}
inline void EndtoolRx::set_gripper(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gripper_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRx.gripper)
}

// uint32 ft_param = 3;
inline void EndtoolRx::clear_ft_param() {
  ft_param_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolRx::ft_param() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRx.ft_param)
  return ft_param_;
}
inline void EndtoolRx::set_ft_param(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ft_param_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRx.ft_param)
}

// uint32 led_mode = 4;
inline void EndtoolRx::clear_led_mode() {
  led_mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolRx::led_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRx.led_mode)
  return led_mode_;
}
inline void EndtoolRx::set_led_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  led_mode_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRx.led_mode)
}

// uint32 led_g = 5;
inline void EndtoolRx::clear_led_g() {
  led_g_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolRx::led_g() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRx.led_g)
  return led_g_;
}
inline void EndtoolRx::set_led_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  led_g_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRx.led_g)
}

// uint32 led_r = 6;
inline void EndtoolRx::clear_led_r() {
  led_r_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolRx::led_r() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRx.led_r)
  return led_r_;
}
inline void EndtoolRx::set_led_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  led_r_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRx.led_r)
}

// uint32 led_b = 7;
inline void EndtoolRx::clear_led_b() {
  led_b_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolRx::led_b() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolRx.led_b)
  return led_b_;
}
inline void EndtoolRx::set_led_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  led_b_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolRx.led_b)
}

// -------------------------------------------------------------------

// EndtoolDockingTx

// uint32 docking_status = 1;
inline void EndtoolDockingTx::clear_docking_status() {
  docking_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::docking_status() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.docking_status)
  return docking_status_;
}
inline void EndtoolDockingTx::set_docking_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  docking_status_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.docking_status)
}

// uint32 docking_button = 2;
inline void EndtoolDockingTx::clear_docking_button() {
  docking_button_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::docking_button() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.docking_button)
  return docking_button_;
}
inline void EndtoolDockingTx::set_docking_button(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  docking_button_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.docking_button)
}

// uint32 docking_dist1 = 3;
inline void EndtoolDockingTx::clear_docking_dist1() {
  docking_dist1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::docking_dist1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist1)
  return docking_dist1_;
}
inline void EndtoolDockingTx::set_docking_dist1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  docking_dist1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist1)
}

// uint32 docking_dist2 = 4;
inline void EndtoolDockingTx::clear_docking_dist2() {
  docking_dist2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::docking_dist2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist2)
  return docking_dist2_;
}
inline void EndtoolDockingTx::set_docking_dist2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  docking_dist2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist2)
}

// uint32 docking_dist3 = 5;
inline void EndtoolDockingTx::clear_docking_dist3() {
  docking_dist3_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::docking_dist3() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist3)
  return docking_dist3_;
}
inline void EndtoolDockingTx::set_docking_dist3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  docking_dist3_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist3)
}

// uint32 docking_dist4 = 6;
inline void EndtoolDockingTx::clear_docking_dist4() {
  docking_dist4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::docking_dist4() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist4)
  return docking_dist4_;
}
inline void EndtoolDockingTx::set_docking_dist4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  docking_dist4_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist4)
}

// uint32 docking_dist5 = 7;
inline void EndtoolDockingTx::clear_docking_dist5() {
  docking_dist5_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::docking_dist5() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist5)
  return docking_dist5_;
}
inline void EndtoolDockingTx::set_docking_dist5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  docking_dist5_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist5)
}

// uint32 docking_dist6 = 8;
inline void EndtoolDockingTx::clear_docking_dist6() {
  docking_dist6_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::docking_dist6() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist6)
  return docking_dist6_;
}
inline void EndtoolDockingTx::set_docking_dist6(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  docking_dist6_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist6)
}

// uint32 docking_dist7 = 9;
inline void EndtoolDockingTx::clear_docking_dist7() {
  docking_dist7_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::docking_dist7() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist7)
  return docking_dist7_;
}
inline void EndtoolDockingTx::set_docking_dist7(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  docking_dist7_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist7)
}

// uint32 docking_dist8 = 10;
inline void EndtoolDockingTx::clear_docking_dist8() {
  docking_dist8_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::docking_dist8() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist8)
  return docking_dist8_;
}
inline void EndtoolDockingTx::set_docking_dist8(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  docking_dist8_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.docking_dist8)
}

// uint32 direct_status = 11;
inline void EndtoolDockingTx::clear_direct_status() {
  direct_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::direct_status() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.direct_status)
  return direct_status_;
}
inline void EndtoolDockingTx::set_direct_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  direct_status_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.direct_status)
}

// uint32 direct_button = 12;
inline void EndtoolDockingTx::clear_direct_button() {
  direct_button_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::direct_button() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.direct_button)
  return direct_button_;
}
inline void EndtoolDockingTx::set_direct_button(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  direct_button_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.direct_button)
}

// uint32 direct_encoder = 13;
inline void EndtoolDockingTx::clear_direct_encoder() {
  direct_encoder_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::direct_encoder() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.direct_encoder)
  return direct_encoder_;
}
inline void EndtoolDockingTx::set_direct_encoder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  direct_encoder_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.direct_encoder)
}

// uint32 joystic1x = 14;
inline void EndtoolDockingTx::clear_joystic1x() {
  joystic1x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::joystic1x() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.joystic1x)
  return joystic1x_;
}
inline void EndtoolDockingTx::set_joystic1x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  joystic1x_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.joystic1x)
}

// uint32 joystic1y = 15;
inline void EndtoolDockingTx::clear_joystic1y() {
  joystic1y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::joystic1y() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.joystic1y)
  return joystic1y_;
}
inline void EndtoolDockingTx::set_joystic1y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  joystic1y_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.joystic1y)
}

// uint32 joystic2x = 16;
inline void EndtoolDockingTx::clear_joystic2x() {
  joystic2x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::joystic2x() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.joystic2x)
  return joystic2x_;
}
inline void EndtoolDockingTx::set_joystic2x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  joystic2x_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.joystic2x)
}

// uint32 joystic2y = 17;
inline void EndtoolDockingTx::clear_joystic2y() {
  joystic2y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndtoolDockingTx::joystic2y() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolDockingTx.joystic2y)
  return joystic2y_;
}
inline void EndtoolDockingTx::set_joystic2y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  joystic2y_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolDockingTx.joystic2y)
}

// -------------------------------------------------------------------

// LedDim

// uint32 led_dim = 1;
inline void LedDim::clear_led_dim() {
  led_dim_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LedDim::led_dim() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.LedDim.led_dim)
  return led_dim_;
}
inline void LedDim::set_led_dim(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  led_dim_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.LedDim.led_dim)
}

// -------------------------------------------------------------------

// IOBoardTx

// uint32 di5v = 1;
inline void IOBoardTx::clear_di5v() {
  di5v_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOBoardTx::di5v() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOBoardTx.di5v)
  return di5v_;
}
inline void IOBoardTx::set_di5v(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  di5v_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IOBoardTx.di5v)
}

// uint32 di24v1 = 2;
inline void IOBoardTx::clear_di24v1() {
  di24v1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOBoardTx::di24v1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOBoardTx.di24v1)
  return di24v1_;
}
inline void IOBoardTx::set_di24v1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  di24v1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IOBoardTx.di24v1)
}

// uint32 di24v2 = 3;
inline void IOBoardTx::clear_di24v2() {
  di24v2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOBoardTx::di24v2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOBoardTx.di24v2)
  return di24v2_;
}
inline void IOBoardTx::set_di24v2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  di24v2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IOBoardTx.di24v2)
}

// uint32 ai1 = 4;
inline void IOBoardTx::clear_ai1() {
  ai1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOBoardTx::ai1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOBoardTx.ai1)
  return ai1_;
}
inline void IOBoardTx::set_ai1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ai1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IOBoardTx.ai1)
}

// uint32 ai2 = 5;
inline void IOBoardTx::clear_ai2() {
  ai2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOBoardTx::ai2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOBoardTx.ai2)
  return ai2_;
}
inline void IOBoardTx::set_ai2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ai2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IOBoardTx.ai2)
}

// .Nrmk.IndyFramework.FTSensor ft_sensor = 6;
inline bool IOBoardTx::has_ft_sensor() const {
  return this != internal_default_instance() && ft_sensor_ != nullptr;
}
inline void IOBoardTx::clear_ft_sensor() {
  if (GetArenaNoVirtual() == nullptr && ft_sensor_ != nullptr) {
    delete ft_sensor_;
  }
  ft_sensor_ = nullptr;
}
inline const ::Nrmk::IndyFramework::FTSensor& IOBoardTx::ft_sensor() const {
  const ::Nrmk::IndyFramework::FTSensor* p = ft_sensor_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOBoardTx.ft_sensor)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::FTSensor*>(
      &::Nrmk::IndyFramework::_FTSensor_default_instance_);
}
inline ::Nrmk::IndyFramework::FTSensor* IOBoardTx::release_ft_sensor() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.IOBoardTx.ft_sensor)
  
  ::Nrmk::IndyFramework::FTSensor* temp = ft_sensor_;
  ft_sensor_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::FTSensor* IOBoardTx::mutable_ft_sensor() {
  
  if (ft_sensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::FTSensor>(GetArenaNoVirtual());
    ft_sensor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOBoardTx.ft_sensor)
  return ft_sensor_;
}
inline void IOBoardTx::set_allocated_ft_sensor(::Nrmk::IndyFramework::FTSensor* ft_sensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ft_sensor_;
  }
  if (ft_sensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ft_sensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ft_sensor, submessage_arena);
    }
    
  } else {
    
  }
  ft_sensor_ = ft_sensor;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.IOBoardTx.ft_sensor)
}

// -------------------------------------------------------------------

// IOBoardRx

// uint32 do5v = 1;
inline void IOBoardRx::clear_do5v() {
  do5v_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOBoardRx::do5v() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOBoardRx.do5v)
  return do5v_;
}
inline void IOBoardRx::set_do5v(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  do5v_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IOBoardRx.do5v)
}

// uint32 do24v1 = 2;
inline void IOBoardRx::clear_do24v1() {
  do24v1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOBoardRx::do24v1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOBoardRx.do24v1)
  return do24v1_;
}
inline void IOBoardRx::set_do24v1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  do24v1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IOBoardRx.do24v1)
}

// uint32 do24v2 = 3;
inline void IOBoardRx::clear_do24v2() {
  do24v2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOBoardRx::do24v2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOBoardRx.do24v2)
  return do24v2_;
}
inline void IOBoardRx::set_do24v2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  do24v2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IOBoardRx.do24v2)
}

// uint32 ao1 = 4;
inline void IOBoardRx::clear_ao1() {
  ao1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOBoardRx::ao1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOBoardRx.ao1)
  return ao1_;
}
inline void IOBoardRx::set_ao1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ao1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IOBoardRx.ao1)
}

// uint32 ao2 = 5;
inline void IOBoardRx::clear_ao2() {
  ao2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOBoardRx::ao2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOBoardRx.ao2)
  return ao2_;
}
inline void IOBoardRx::set_ao2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ao2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IOBoardRx.ao2)
}

// uint32 ft_param = 6;
inline void IOBoardRx::clear_ft_param() {
  ft_param_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOBoardRx::ft_param() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOBoardRx.ft_param)
  return ft_param_;
}
inline void IOBoardRx::set_ft_param(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ft_param_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IOBoardRx.ft_param)
}

// -------------------------------------------------------------------

// DIOIndex

// uint32 dioIndex = 1;
inline void DIOIndex::clear_dioindex() {
  dioindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DIOIndex::dioindex() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIOIndex.dioIndex)
  return dioindex_;
}
inline void DIOIndex::set_dioindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dioindex_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DIOIndex.dioIndex)
}

// -------------------------------------------------------------------

// DIODigitalInput

// uint32 dioIndex = 1;
inline void DIODigitalInput::clear_dioindex() {
  dioindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DIODigitalInput::dioindex() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIODigitalInput.dioIndex)
  return dioindex_;
}
inline void DIODigitalInput::set_dioindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dioindex_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DIODigitalInput.dioIndex)
}

// repeated uint32 di_list = 2;
inline int DIODigitalInput::di_list_size() const {
  return di_list_.size();
}
inline void DIODigitalInput::clear_di_list() {
  di_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DIODigitalInput::di_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIODigitalInput.di_list)
  return di_list_.Get(index);
}
inline void DIODigitalInput::set_di_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  di_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DIODigitalInput.di_list)
}
inline void DIODigitalInput::add_di_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  di_list_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DIODigitalInput.di_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DIODigitalInput::di_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DIODigitalInput.di_list)
  return di_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DIODigitalInput::mutable_di_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DIODigitalInput.di_list)
  return &di_list_;
}

// -------------------------------------------------------------------

// DIODigitalOutput

// uint32 dioIndex = 1;
inline void DIODigitalOutput::clear_dioindex() {
  dioindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DIODigitalOutput::dioindex() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIODigitalOutput.dioIndex)
  return dioindex_;
}
inline void DIODigitalOutput::set_dioindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dioindex_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DIODigitalOutput.dioIndex)
}

// repeated uint32 do_list = 2;
inline int DIODigitalOutput::do_list_size() const {
  return do_list_.size();
}
inline void DIODigitalOutput::clear_do_list() {
  do_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DIODigitalOutput::do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DIODigitalOutput.do_list)
  return do_list_.Get(index);
}
inline void DIODigitalOutput::set_do_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  do_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DIODigitalOutput.do_list)
}
inline void DIODigitalOutput::add_do_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  do_list_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DIODigitalOutput.do_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DIODigitalOutput::do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DIODigitalOutput.do_list)
  return do_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DIODigitalOutput::mutable_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DIODigitalOutput.do_list)
  return &do_list_;
}

// -------------------------------------------------------------------

// ServoParam

// uint32 slaveIdx = 1;
inline void ServoParam::clear_slaveidx() {
  slaveidx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServoParam::slaveidx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoParam.slaveIdx)
  return slaveidx_;
}
inline void ServoParam::set_slaveidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  slaveidx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoParam.slaveIdx)
}

// int32 val = 2;
inline void ServoParam::clear_val() {
  val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServoParam::val() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoParam.val)
  return val_;
}
inline void ServoParam::set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoParam.val)
}

// -------------------------------------------------------------------

// SDOIntVal

// int32 val = 1;
inline void SDOIntVal::clear_val() {
  val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDOIntVal::val() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SDOIntVal.val)
  return val_;
}
inline void SDOIntVal::set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SDOIntVal.val)
}

// -------------------------------------------------------------------

// SDOFloatVal

// float val = 1;
inline void SDOFloatVal::clear_val() {
  val_ = 0;
}
inline float SDOFloatVal::val() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SDOFloatVal.val)
  return val_;
}
inline void SDOFloatVal::set_val(float value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SDOFloatVal.val)
}

// -------------------------------------------------------------------

// SDOStrVal

// string val = 1;
inline void SDOStrVal::clear_val() {
  val_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SDOStrVal::val() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SDOStrVal.val)
  return val_.GetNoArena();
}
inline void SDOStrVal::set_val(const std::string& value) {
  
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SDOStrVal.val)
}
inline void SDOStrVal::set_val(std::string&& value) {
  
  val_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.SDOStrVal.val)
}
inline void SDOStrVal::set_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.SDOStrVal.val)
}
inline void SDOStrVal::set_val(const char* value, size_t size) {
  
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.SDOStrVal.val)
}
inline std::string* SDOStrVal::mutable_val() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.SDOStrVal.val)
  return val_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SDOStrVal::release_val() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.SDOStrVal.val)
  
  return val_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SDOStrVal::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  val_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.SDOStrVal.val)
}

// -------------------------------------------------------------------

// EtherCATInfo

// -------------------------------------------------------------------

// RobotZeroCount

// int32 count = 1;
inline void RobotZeroCount::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RobotZeroCount::count() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.RobotZeroCount.count)
  return count_;
}
inline void RobotZeroCount::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.RobotZeroCount.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IndyFramework
}  // namespace Nrmk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ethercat_5fmsgs_2eproto
