// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_msgs.proto

#include "device_msgs.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Nrmk {
namespace IndyFramework {
        template <typename>
PROTOBUF_CONSTEXPR Motor::Motor(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.index_)*/ 0u,
      /*decltype(_impl_.enable_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MotorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotorDefaultTypeInternal() {}
  union {
    Motor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotorDefaultTypeInternal _Motor_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Servo::Servo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.index_)*/ 0u,
      /*decltype(_impl_.enable_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ServoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServoDefaultTypeInternal() {}
  union {
    Servo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServoDefaultTypeInternal _Servo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GripperData::GripperData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.gripper_type_)*/ 0,
      /*decltype(_impl_.gripper_position_)*/ 0,
      /*decltype(_impl_.gripper_state_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct GripperDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GripperDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GripperDataDefaultTypeInternal() {}
  union {
    GripperData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GripperDataDefaultTypeInternal _GripperData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GripperCommand::GripperCommand(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.gripper_pvt_data_)*/ {},
      /* _impl_._gripper_pvt_data_cached_byte_size_ = */ {0},
      /*decltype(_impl_.gripper_command_)*/ 0,
      /*decltype(_impl_.gripper_type_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct GripperCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GripperCommandDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GripperCommandDefaultTypeInternal() {}
  union {
    GripperCommand _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GripperCommandDefaultTypeInternal _GripperCommand_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR DigitalSignal::DigitalSignal(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.address_)*/ 0u,
      /*decltype(_impl_.state_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct DigitalSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DigitalSignalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DigitalSignalDefaultTypeInternal() {}
  union {
    DigitalSignal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DigitalSignalDefaultTypeInternal _DigitalSignal_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR EndLedDim::EndLedDim(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.led_dim_)*/ 0u,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct EndLedDimDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndLedDimDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndLedDimDefaultTypeInternal() {}
  union {
    EndLedDim _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndLedDimDefaultTypeInternal _EndLedDim_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR EndtoolSignal::EndtoolSignal(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.states_)*/ {},
      /*decltype(_impl_._states_cached_byte_size_)*/ {0},
      /*decltype(_impl_.port_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct EndtoolSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndtoolSignalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndtoolSignalDefaultTypeInternal() {}
  union {
    EndtoolSignal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndtoolSignalDefaultTypeInternal _EndtoolSignal_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AnalogSignal::AnalogSignal(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.address_)*/ 0u,
      /*decltype(_impl_.voltage_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AnalogSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnalogSignalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnalogSignalDefaultTypeInternal() {}
  union {
    AnalogSignal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnalogSignalDefaultTypeInternal _AnalogSignal_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MotorList::MotorList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.motors_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MotorListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotorListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotorListDefaultTypeInternal() {}
  union {
    MotorList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotorListDefaultTypeInternal _MotorList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR DigitalList::DigitalList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.signals_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct DigitalListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DigitalListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DigitalListDefaultTypeInternal() {}
  union {
    DigitalList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DigitalListDefaultTypeInternal _DigitalList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR EndtoolSignalList::EndtoolSignalList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.signals_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct EndtoolSignalListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndtoolSignalListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndtoolSignalListDefaultTypeInternal() {}
  union {
    EndtoolSignalList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndtoolSignalListDefaultTypeInternal _EndtoolSignalList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AnalogList::AnalogList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.signals_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AnalogListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnalogListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnalogListDefaultTypeInternal() {}
  union {
    AnalogList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnalogListDefaultTypeInternal _AnalogList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR DeviceInfo::DeviceInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.core_board_fw_vers_)*/ {},
      /*decltype(_impl_.robot_serial_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.io_board_fw_ver_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.endtool_board_fw_ver_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.controller_ver_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.controller_detail_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.controller_date_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.num_joints_)*/ 0u,
      /*decltype(_impl_.payload_)*/ 0,
      /*decltype(_impl_.teleop_loaded_)*/ false,
      /*decltype(_impl_.calibrated_)*/ false,
    } {}
struct DeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceInfoDefaultTypeInternal() {}
  union {
    DeviceInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BrakeControlStyle::BrakeControlStyle(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.style_)*/ 0,
    } {}
struct BrakeControlStyleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrakeControlStyleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrakeControlStyleDefaultTypeInternal() {}
  union {
    BrakeControlStyle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrakeControlStyleDefaultTypeInternal _BrakeControlStyle_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GetEL5001Data::GetEL5001Data(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.status_)*/ 0,
      /*decltype(_impl_.value_)*/ 0,
      /*decltype(_impl_.delta_)*/ 0,
      /*decltype(_impl_.average_)*/ 0,
    } {}
struct GetEL5001DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEL5001DataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEL5001DataDefaultTypeInternal() {}
  union {
    GetEL5001Data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEL5001DataDefaultTypeInternal _GetEL5001Data_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GetEL5101Data::GetEL5101Data(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.status_)*/ 0,
      /*decltype(_impl_.value_)*/ 0,
      /*decltype(_impl_.latch_)*/ 0,
      /*decltype(_impl_.delta_)*/ 0,
      /*decltype(_impl_.average_)*/ 0,
    } {}
struct GetEL5101DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEL5101DataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEL5101DataDefaultTypeInternal() {}
  union {
    GetEL5101Data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEL5101DataDefaultTypeInternal _GetEL5101Data_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FTSensorData::FTSensorData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.ft_fx_)*/ 0,
      /*decltype(_impl_.ft_fy_)*/ 0,
      /*decltype(_impl_.ft_fz_)*/ 0,
      /*decltype(_impl_.ft_tx_)*/ 0,
      /*decltype(_impl_.ft_ty_)*/ 0,
      /*decltype(_impl_.ft_tz_)*/ 0,
    } {}
struct FTSensorDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FTSensorDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FTSensorDataDefaultTypeInternal() {}
  union {
    FTSensorData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FTSensorDataDefaultTypeInternal _FTSensorData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GetLoadFactorsRes::GetLoadFactorsRes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.percents_)*/ {},
      /* _impl_._percents_cached_byte_size_ = */ {0},
      /*decltype(_impl_.torques_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct GetLoadFactorsResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLoadFactorsResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLoadFactorsResDefaultTypeInternal() {}
  union {
    GetLoadFactorsRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLoadFactorsResDefaultTypeInternal _GetLoadFactorsRes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SetAutoModeReq::SetAutoModeReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.on_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SetAutoModeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAutoModeReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAutoModeReqDefaultTypeInternal() {}
  union {
    SetAutoModeReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAutoModeReqDefaultTypeInternal _SetAutoModeReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SetAutoModeRes::SetAutoModeRes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.msg_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SetAutoModeResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetAutoModeResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetAutoModeResDefaultTypeInternal() {}
  union {
    SetAutoModeRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetAutoModeResDefaultTypeInternal _SetAutoModeRes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CheckAutoModeRes::CheckAutoModeRes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.msg_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.on_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CheckAutoModeResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckAutoModeResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckAutoModeResDefaultTypeInternal() {}
  union {
    CheckAutoModeRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckAutoModeResDefaultTypeInternal _CheckAutoModeRes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CheckReducedModeRes::CheckReducedModeRes(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.msg_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.on_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CheckReducedModeResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckReducedModeResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckReducedModeResDefaultTypeInternal() {}
  union {
    CheckReducedModeRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckReducedModeResDefaultTypeInternal _CheckReducedModeRes_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SafetyFunctionState::SafetyFunctionState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.id_)*/ 0u,
      /*decltype(_impl_.state_)*/ 0u,
    } {}
struct SafetyFunctionStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SafetyFunctionStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SafetyFunctionStateDefaultTypeInternal() {}
  union {
    SafetyFunctionState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SafetyFunctionStateDefaultTypeInternal _SafetyFunctionState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SafetyControlData::SafetyControlData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.safety_state_)*/ nullptr,
      /*decltype(_impl_.auto_mode_)*/ false,
      /*decltype(_impl_.reduced_mode_)*/ false,
      /*decltype(_impl_.enabler_pressed_)*/ false,
    } {}
struct SafetyControlDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SafetyControlDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SafetyControlDataDefaultTypeInternal() {}
  union {
    SafetyControlData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SafetyControlDataDefaultTypeInternal _SafetyControlData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SanderCommand::SanderCommand(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.ip_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_.speed_)*/ 0,
      /*decltype(_impl_.state_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SanderCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SanderCommandDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SanderCommandDefaultTypeInternal() {}
  union {
    SanderCommand _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SanderCommandDefaultTypeInternal _SanderCommand_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Encoder::Encoder(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.channel1_)*/ ::int64_t{0},
      /*decltype(_impl_.channel2_)*/ ::int64_t{0},
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_.mm_per_tick_)*/ 0,
      /*decltype(_impl_.sample_num_)*/ ::int64_t{0},
      /*decltype(_impl_.vel_const_mmps_)*/ 0,
      /*decltype(_impl_.reversed_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct EncoderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncoderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncoderDefaultTypeInternal() {}
  union {
    Encoder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncoderDefaultTypeInternal _Encoder_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Trigger::Trigger(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.channel_)*/ ::int64_t{0},
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_.detect_rise_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TriggerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TriggerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TriggerDefaultTypeInternal() {}
  union {
    Trigger _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TriggerDefaultTypeInternal _Trigger_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Conveyor::Conveyor(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.encoder_)*/ nullptr,
      /*decltype(_impl_.trigger_)*/ nullptr,
      /*decltype(_impl_.direction_)*/ nullptr,
      /*decltype(_impl_.starting_pose_)*/ nullptr,
      /*decltype(_impl_.terminal_pose_)*/ nullptr,
      /*decltype(_impl_.offset_dist_)*/ 0,
      /*decltype(_impl_.working_dist_)*/ 0,
    } {}
struct ConveyorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConveyorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConveyorDefaultTypeInternal() {}
  union {
    Conveyor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConveyorDefaultTypeInternal _Conveyor_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ConveyorState::ConveyorState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.velocity_)*/ 0,
      /*decltype(_impl_.triggered_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ConveyorStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConveyorStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConveyorStateDefaultTypeInternal() {}
  union {
    ConveyorState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConveyorStateDefaultTypeInternal _ConveyorState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AddPhotoneoCalibPointReq::AddPhotoneoCalibPointReq(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.vision_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.px_)*/ 0,
      /*decltype(_impl_.py_)*/ 0,
      /*decltype(_impl_.pz_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AddPhotoneoCalibPointReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddPhotoneoCalibPointReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddPhotoneoCalibPointReqDefaultTypeInternal() {}
  union {
    AddPhotoneoCalibPointReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddPhotoneoCalibPointReqDefaultTypeInternal _AddPhotoneoCalibPointReq_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR VisionServer::VisionServer(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.ip_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.vision_server_type_)*/ 0,
      /*decltype(_impl_.port_)*/ 0u,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct VisionServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisionServerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisionServerDefaultTypeInternal() {}
  union {
    VisionServer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisionServerDefaultTypeInternal _VisionServer_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR VisionRequest::VisionRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.object_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.vision_server_)*/ nullptr,
      /*decltype(_impl_.frame_type_)*/ 0,
    } {}
struct VisionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisionRequestDefaultTypeInternal() {}
  union {
    VisionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisionRequestDefaultTypeInternal _VisionRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR VisionResult::VisionResult(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.frame_)*/ {},
      /*decltype(_impl_.object_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.msg_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.frame_type_)*/ 0,
      /*decltype(_impl_.detected_)*/ false,
      /*decltype(_impl_.passed_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct VisionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisionResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisionResultDefaultTypeInternal() {}
  union {
    VisionResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisionResultDefaultTypeInternal _VisionResult_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
static ::_pb::Metadata file_level_metadata_device_5fmsgs_2eproto[33];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_device_5fmsgs_2eproto[10];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_device_5fmsgs_2eproto = nullptr;
const ::uint32_t TableStruct_device_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Motor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Motor, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Motor, _impl_.enable_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Servo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Servo, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Servo, _impl_.enable_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GripperData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GripperData, _impl_.gripper_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GripperData, _impl_.gripper_position_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GripperData, _impl_.gripper_state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GripperCommand, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GripperCommand, _impl_.gripper_command_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GripperCommand, _impl_.gripper_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GripperCommand, _impl_.gripper_pvt_data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DigitalSignal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DigitalSignal, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DigitalSignal, _impl_.state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::EndLedDim, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::EndLedDim, _impl_.led_dim_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::EndtoolSignal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::EndtoolSignal, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::EndtoolSignal, _impl_.states_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AnalogSignal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AnalogSignal, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AnalogSignal, _impl_.voltage_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotorList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotorList, _impl_.motors_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DigitalList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DigitalList, _impl_.signals_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::EndtoolSignalList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::EndtoolSignalList, _impl_.signals_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AnalogList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AnalogList, _impl_.signals_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.num_joints_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.robot_serial_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.payload_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.io_board_fw_ver_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.core_board_fw_vers_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.endtool_board_fw_ver_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.controller_ver_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.controller_detail_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.controller_date_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.teleop_loaded_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.calibrated_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BrakeControlStyle, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BrakeControlStyle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BrakeControlStyle, _impl_.style_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BrakeControlStyle, _impl_.response_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5001Data, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5001Data, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5001Data, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5001Data, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5001Data, _impl_.delta_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5001Data, _impl_.average_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5001Data, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _impl_.latch_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _impl_.delta_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _impl_.average_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_.ft_fx_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_.ft_fy_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_.ft_fz_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_.ft_tx_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_.ft_ty_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_.ft_tz_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetLoadFactorsRes, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetLoadFactorsRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetLoadFactorsRes, _impl_.percents_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetLoadFactorsRes, _impl_.torques_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetLoadFactorsRes, _impl_.response_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SetAutoModeReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SetAutoModeReq, _impl_.on_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SetAutoModeRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SetAutoModeRes, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAutoModeRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAutoModeRes, _impl_.on_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckAutoModeRes, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckReducedModeRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckReducedModeRes, _impl_.on_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CheckReducedModeRes, _impl_.msg_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyFunctionState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyFunctionState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyFunctionState, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyFunctionState, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyFunctionState, _impl_.response_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyControlData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyControlData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyControlData, _impl_.auto_mode_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyControlData, _impl_.reduced_mode_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyControlData, _impl_.enabler_pressed_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SafetyControlData, _impl_.safety_state_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SanderCommand, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SanderCommand, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SanderCommand, _impl_.ip_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SanderCommand, _impl_.speed_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::SanderCommand, _impl_.state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Encoder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Encoder, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Encoder, _impl_.channel1_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Encoder, _impl_.channel2_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Encoder, _impl_.sample_num_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Encoder, _impl_.mm_per_tick_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Encoder, _impl_.vel_const_mmps_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Encoder, _impl_.reversed_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Trigger, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Trigger, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Trigger, _impl_.channel_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Trigger, _impl_.detect_rise_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Conveyor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Conveyor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Conveyor, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Conveyor, _impl_.encoder_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Conveyor, _impl_.trigger_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Conveyor, _impl_.offset_dist_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Conveyor, _impl_.working_dist_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Conveyor, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Conveyor, _impl_.starting_pose_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Conveyor, _impl_.terminal_pose_),
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    2,
    3,
    4,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ConveyorState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ConveyorState, _impl_.velocity_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ConveyorState, _impl_.triggered_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AddPhotoneoCalibPointReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AddPhotoneoCalibPointReq, _impl_.vision_name_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AddPhotoneoCalibPointReq, _impl_.px_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AddPhotoneoCalibPointReq, _impl_.py_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AddPhotoneoCalibPointReq, _impl_.pz_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionServer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionServer, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionServer, _impl_.vision_server_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionServer, _impl_.ip_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionServer, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionRequest, _impl_.vision_server_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionRequest, _impl_.object_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionRequest, _impl_.frame_type_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionResult, _impl_.frame_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionResult, _impl_.frame_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionResult, _impl_.object_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionResult, _impl_.detected_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionResult, _impl_.passed_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::VisionResult, _impl_.msg_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Nrmk::IndyFramework::Motor)},
        {10, -1, -1, sizeof(::Nrmk::IndyFramework::Servo)},
        {20, -1, -1, sizeof(::Nrmk::IndyFramework::GripperData)},
        {31, -1, -1, sizeof(::Nrmk::IndyFramework::GripperCommand)},
        {42, -1, -1, sizeof(::Nrmk::IndyFramework::DigitalSignal)},
        {52, -1, -1, sizeof(::Nrmk::IndyFramework::EndLedDim)},
        {61, -1, -1, sizeof(::Nrmk::IndyFramework::EndtoolSignal)},
        {71, -1, -1, sizeof(::Nrmk::IndyFramework::AnalogSignal)},
        {81, -1, -1, sizeof(::Nrmk::IndyFramework::MotorList)},
        {90, -1, -1, sizeof(::Nrmk::IndyFramework::DigitalList)},
        {99, -1, -1, sizeof(::Nrmk::IndyFramework::EndtoolSignalList)},
        {108, -1, -1, sizeof(::Nrmk::IndyFramework::AnalogList)},
        {117, 137, -1, sizeof(::Nrmk::IndyFramework::DeviceInfo)},
        {149, 159, -1, sizeof(::Nrmk::IndyFramework::BrakeControlStyle)},
        {161, 174, -1, sizeof(::Nrmk::IndyFramework::GetEL5001Data)},
        {179, 193, -1, sizeof(::Nrmk::IndyFramework::GetEL5101Data)},
        {199, 214, -1, sizeof(::Nrmk::IndyFramework::FTSensorData)},
        {221, 232, -1, sizeof(::Nrmk::IndyFramework::GetLoadFactorsRes)},
        {235, -1, -1, sizeof(::Nrmk::IndyFramework::SetAutoModeReq)},
        {244, -1, -1, sizeof(::Nrmk::IndyFramework::SetAutoModeRes)},
        {253, -1, -1, sizeof(::Nrmk::IndyFramework::CheckAutoModeRes)},
        {263, -1, -1, sizeof(::Nrmk::IndyFramework::CheckReducedModeRes)},
        {273, 284, -1, sizeof(::Nrmk::IndyFramework::SafetyFunctionState)},
        {287, 299, -1, sizeof(::Nrmk::IndyFramework::SafetyControlData)},
        {303, -1, -1, sizeof(::Nrmk::IndyFramework::SanderCommand)},
        {315, -1, -1, sizeof(::Nrmk::IndyFramework::Encoder)},
        {330, -1, -1, sizeof(::Nrmk::IndyFramework::Trigger)},
        {341, 357, -1, sizeof(::Nrmk::IndyFramework::Conveyor)},
        {365, -1, -1, sizeof(::Nrmk::IndyFramework::ConveyorState)},
        {375, -1, -1, sizeof(::Nrmk::IndyFramework::AddPhotoneoCalibPointReq)},
        {387, -1, -1, sizeof(::Nrmk::IndyFramework::VisionServer)},
        {399, 410, -1, sizeof(::Nrmk::IndyFramework::VisionRequest)},
        {413, -1, -1, sizeof(::Nrmk::IndyFramework::VisionResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::Nrmk::IndyFramework::_Motor_default_instance_._instance,
    &::Nrmk::IndyFramework::_Servo_default_instance_._instance,
    &::Nrmk::IndyFramework::_GripperData_default_instance_._instance,
    &::Nrmk::IndyFramework::_GripperCommand_default_instance_._instance,
    &::Nrmk::IndyFramework::_DigitalSignal_default_instance_._instance,
    &::Nrmk::IndyFramework::_EndLedDim_default_instance_._instance,
    &::Nrmk::IndyFramework::_EndtoolSignal_default_instance_._instance,
    &::Nrmk::IndyFramework::_AnalogSignal_default_instance_._instance,
    &::Nrmk::IndyFramework::_MotorList_default_instance_._instance,
    &::Nrmk::IndyFramework::_DigitalList_default_instance_._instance,
    &::Nrmk::IndyFramework::_EndtoolSignalList_default_instance_._instance,
    &::Nrmk::IndyFramework::_AnalogList_default_instance_._instance,
    &::Nrmk::IndyFramework::_DeviceInfo_default_instance_._instance,
    &::Nrmk::IndyFramework::_BrakeControlStyle_default_instance_._instance,
    &::Nrmk::IndyFramework::_GetEL5001Data_default_instance_._instance,
    &::Nrmk::IndyFramework::_GetEL5101Data_default_instance_._instance,
    &::Nrmk::IndyFramework::_FTSensorData_default_instance_._instance,
    &::Nrmk::IndyFramework::_GetLoadFactorsRes_default_instance_._instance,
    &::Nrmk::IndyFramework::_SetAutoModeReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_SetAutoModeRes_default_instance_._instance,
    &::Nrmk::IndyFramework::_CheckAutoModeRes_default_instance_._instance,
    &::Nrmk::IndyFramework::_CheckReducedModeRes_default_instance_._instance,
    &::Nrmk::IndyFramework::_SafetyFunctionState_default_instance_._instance,
    &::Nrmk::IndyFramework::_SafetyControlData_default_instance_._instance,
    &::Nrmk::IndyFramework::_SanderCommand_default_instance_._instance,
    &::Nrmk::IndyFramework::_Encoder_default_instance_._instance,
    &::Nrmk::IndyFramework::_Trigger_default_instance_._instance,
    &::Nrmk::IndyFramework::_Conveyor_default_instance_._instance,
    &::Nrmk::IndyFramework::_ConveyorState_default_instance_._instance,
    &::Nrmk::IndyFramework::_AddPhotoneoCalibPointReq_default_instance_._instance,
    &::Nrmk::IndyFramework::_VisionServer_default_instance_._instance,
    &::Nrmk::IndyFramework::_VisionRequest_default_instance_._instance,
    &::Nrmk::IndyFramework::_VisionResult_default_instance_._instance,
};
const char descriptor_table_protodef_device_5fmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021device_msgs.proto\022\022Nrmk.IndyFramework\032"
    "\021common_msgs.proto\"&\n\005Motor\022\r\n\005index\030\001 \001"
    "(\r\022\016\n\006enable\030\002 \001(\010\"&\n\005Servo\022\r\n\005index\030\001 \001"
    "(\r\022\016\n\006enable\030\002 \001(\010\"u\n\013GripperData\0225\n\014gri"
    "pper_type\030\001 \001(\0162\037.Nrmk.IndyFramework.Gri"
    "pperType\022\030\n\020gripper_position\030\002 \001(\005\022\025\n\rgr"
    "ipper_state\030\003 \001(\005\"\204\002\n\016GripperCommand\022N\n\017"
    "gripper_command\030\001 \001(\01625.Nrmk.IndyFramewo"
    "rk.GripperCommand.GripperCommandType\0225\n\014"
    "gripper_type\030\002 \001(\0162\037.Nrmk.IndyFramework."
    "GripperType\022\030\n\020gripper_pvt_data\030\003 \003(\005\"Q\n"
    "\022GripperCommandType\022\017\n\013AUTO_DETECT\020\000\022\014\n\010"
    "ACTIVATE\020\001\022\017\n\013RE_ACTIVATE\020\002\022\013\n\007SET_PVT\020\003"
    "\"Q\n\rDigitalSignal\022\017\n\007address\030\001 \001(\r\022/\n\005st"
    "ate\030\002 \001(\0162 .Nrmk.IndyFramework.DigitalSt"
    "ate\"\034\n\tEndLedDim\022\017\n\007led_dim\030\001 \001(\r\"O\n\rEnd"
    "toolSignal\022\014\n\004port\030\001 \001(\t\0220\n\006states\030\002 \003(\016"
    "2 .Nrmk.IndyFramework.EndtoolState\"0\n\014An"
    "alogSignal\022\017\n\007address\030\001 \001(\r\022\017\n\007voltage\030\002"
    " \001(\005\"6\n\tMotorList\022)\n\006motors\030\001 \003(\0132\031.Nrmk"
    ".IndyFramework.Motor\"A\n\013DigitalList\0222\n\007s"
    "ignals\030\001 \003(\0132!.Nrmk.IndyFramework.Digita"
    "lSignal\"G\n\021EndtoolSignalList\0222\n\007signals\030"
    "\001 \003(\0132!.Nrmk.IndyFramework.EndtoolSignal"
    "\"\?\n\nAnalogList\0221\n\007signals\030\001 \003(\0132 .Nrmk.I"
    "ndyFramework.AnalogSignal\"\301\002\n\nDeviceInfo"
    "\022\022\n\nnum_joints\030\001 \001(\r\022\024\n\014robot_serial\030\002 \001"
    "(\t\022\017\n\007payload\030\003 \001(\002\022\027\n\017io_board_fw_ver\030\n"
    " \001(\t\022\032\n\022core_board_fw_vers\030\013 \003(\t\022\034\n\024endt"
    "ool_board_fw_ver\030\014 \001(\t\022\026\n\016controller_ver"
    "\030\024 \001(\t\022\031\n\021controller_detail\030\025 \001(\t\022\027\n\017con"
    "troller_date\030\026 \001(\t\022\025\n\rteleop_loaded\030\036 \001("
    "\010\022\022\n\ncalibrated\030\037 \001(\010\022.\n\010response\030d \001(\0132"
    "\034.Nrmk.IndyFramework.Response\"\307\001\n\021BrakeC"
    "ontrolStyle\022A\n\005style\030\001 \001(\01622.Nrmk.IndyFr"
    "amework.BrakeControlStyle.ControlStyle\022."
    "\n\010response\030d \001(\0132\034.Nrmk.IndyFramework.Re"
    "sponse\"\?\n\014ControlStyle\022\017\n\013UNAVAILABLE\020\000\022"
    "\016\n\nCONCURRENT\020\001\022\016\n\nINDIVIDUAL\020\002\"~\n\rGetEL"
    "5001Data\022\016\n\006status\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\022"
    "\r\n\005delta\030\003 \001(\005\022\017\n\007average\030\004 \001(\002\022.\n\010respo"
    "nse\030d \001(\0132\034.Nrmk.IndyFramework.Response\""
    "\215\001\n\rGetEL5101Data\022\016\n\006status\030\001 \001(\005\022\r\n\005val"
    "ue\030\002 \001(\005\022\r\n\005latch\030\003 \001(\005\022\r\n\005delta\030\004 \001(\005\022\017"
    "\n\007average\030\005 \001(\002\022.\n\010response\030d \001(\0132\034.Nrmk"
    ".IndyFramework.Response\"\230\001\n\014FTSensorData"
    "\022\r\n\005ft_Fx\030\001 \001(\002\022\r\n\005ft_Fy\030\002 \001(\002\022\r\n\005ft_Fz\030"
    "\003 \001(\002\022\r\n\005ft_Tx\030\004 \001(\002\022\r\n\005ft_Ty\030\005 \001(\002\022\r\n\005f"
    "t_Tz\030\006 \001(\002\022.\n\010response\030d \001(\0132\034.Nrmk.Indy"
    "Framework.Response\"f\n\021GetLoadFactorsRes\022"
    "\020\n\010percents\030\001 \003(\005\022\017\n\007torques\030\002 \003(\002\022.\n\010re"
    "sponse\030d \001(\0132\034.Nrmk.IndyFramework.Respon"
    "se\"\034\n\016SetAutoModeReq\022\n\n\002on\030\001 \001(\010\"\035\n\016SetA"
    "utoModeRes\022\013\n\003msg\030d \001(\t\"+\n\020CheckAutoMode"
    "Res\022\n\n\002on\030\001 \001(\010\022\013\n\003msg\030d \001(\t\".\n\023CheckRed"
    "ucedModeRes\022\n\n\002on\030\001 \001(\010\022\013\n\003msg\030d \001(\t\"`\n\023"
    "SafetyFunctionState\022\n\n\002id\030\001 \001(\r\022\r\n\005state"
    "\030\002 \001(\r\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFram"
    "ework.Response\"\224\001\n\021SafetyControlData\022\021\n\t"
    "auto_mode\030\001 \001(\010\022\024\n\014reduced_mode\030\002 \001(\010\022\027\n"
    "\017enabler_pressed\030\003 \001(\010\022=\n\014safety_state\030\005"
    " \001(\0132\'.Nrmk.IndyFramework.SafetyFunction"
    "State\"\227\001\n\rSanderCommand\022:\n\004type\030\001 \001(\0162,."
    "Nrmk.IndyFramework.SanderCommand.SanderT"
    "ype\022\n\n\002ip\030\002 \001(\t\022\r\n\005speed\030\003 \001(\002\022\r\n\005state\030"
    "\n \001(\010\" \n\nSanderType\022\022\n\016SANDER_ONROBOT\020\000\""
    "\211\002\n\007Encoder\0225\n\004type\030\001 \001(\0162\'.Nrmk.IndyFra"
    "mework.Encoder.EncoderType\022\020\n\010channel1\030\002"
    " \001(\003\022\020\n\010channel2\030\003 \001(\003\022\022\n\nsample_num\030\004 \001"
    "(\003\022\023\n\013mm_per_tick\030\005 \001(\002\022\026\n\016vel_const_mmp"
    "s\030\006 \001(\002\022\020\n\010reversed\030\007 \001(\010\"P\n\013EncoderType"
    "\022\014\n\010CONSTANT\020\000\022\016\n\nQUADRATURE\020\001\022\n\n\006RISING"
    "\020\002\022\013\n\007FALLING\020\003\022\n\n\006MODBUS\020\004\"\216\001\n\007Trigger\022"
    "5\n\004type\030\001 \001(\0162\'.Nrmk.IndyFramework.Trigg"
    "er.TriggerType\022\017\n\007channel\030\002 \001(\003\022\023\n\013detec"
    "t_rise\030\003 \001(\010\"&\n\013TriggerType\022\013\n\007DIGITAL\020\000"
    "\022\n\n\006MODBUS\020\001\"\270\002\n\010Conveyor\022\014\n\004name\030\001 \001(\t\022"
    ",\n\007encoder\030\002 \001(\0132\033.Nrmk.IndyFramework.En"
    "coder\022,\n\007trigger\030\003 \001(\0132\033.Nrmk.IndyFramew"
    "ork.Trigger\022\023\n\013offset_dist\030\004 \001(\002\022\024\n\014work"
    "ing_dist\030\005 \001(\002\022-\n\tdirection\030\006 \001(\0132\032.Nrmk"
    ".IndyFramework.Vector\0223\n\rstarting_pose\030\n"
    " \001(\0132\034.Nrmk.IndyFramework.PosePair\0223\n\rte"
    "rminal_pose\030\013 \001(\0132\034.Nrmk.IndyFramework.P"
    "osePair\"4\n\rConveyorState\022\020\n\010velocity\030\001 \001"
    "(\002\022\021\n\ttriggered\030\002 \001(\002\"S\n\030AddPhotoneoCali"
    "bPointReq\022\023\n\013vision_name\030\001 \001(\t\022\n\n\002px\030\002 \001"
    "(\001\022\n\n\002py\030\003 \001(\001\022\n\n\002pz\030\004 \001(\001\"\300\001\n\014VisionSer"
    "ver\022\014\n\004name\030\001 \001(\t\022M\n\022vision_server_type\030"
    "\002 \001(\01621.Nrmk.IndyFramework.VisionServer."
    "VisionServerType\022\n\n\002ip\030\003 \001(\t\022\014\n\004port\030\004 \001"
    "(\r\"9\n\020VisionServerType\022\013\n\007INDYEYE\020\000\022\014\n\010P"
    "HOTONEO\020\001\022\n\n\006HELIOS\020\002\"\221\001\n\rVisionRequest\022"
    "7\n\rvision_server\030\001 \001(\0132 .Nrmk.IndyFramew"
    "ork.VisionServer\022\016\n\006object\030\002 \001(\t\0227\n\nfram"
    "e_type\030\003 \001(\0162#.Nrmk.IndyFramework.Vision"
    "FrameType\"\225\001\n\014VisionResult\022\r\n\005frame\030\001 \003("
    "\002\0227\n\nframe_type\030\002 \001(\0162#.Nrmk.IndyFramewo"
    "rk.VisionFrameType\022\016\n\006object\030\003 \001(\t\022\020\n\010de"
    "tected\030\004 \001(\010\022\016\n\006passed\030\005 \001(\010\022\013\n\003msg\030d \001("
    "\t*<\n\013GripperType\022\010\n\004NONE\020\000\022\023\n\017ROBOTIQ_GR"
    "IPPER\020\001\022\016\n\nDH_GRIPPER\020\002*=\n\014DigitalState\022"
    "\r\n\tOFF_STATE\020\000\022\014\n\010ON_STATE\020\001\022\020\n\014UNUSED_S"
    "TATE\020\002*b\n\014EndtoolState\022\n\n\006UNUSED\020\000\022\014\n\010HI"
    "GH_PNP\020\002\022\014\n\010HIGH_NPN\020\001\022\024\n\007LOW_NPN\020\377\377\377\377\377\377"
    "\377\377\377\001\022\024\n\007LOW_PNP\020\376\377\377\377\377\377\377\377\377\001*/\n\017VisionFram"
    "eType\022\n\n\006OBJECT\020\000\022\020\n\014END_EFFECTOR\020\001b\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_device_5fmsgs_2eproto_deps[1] =
    {
        &::descriptor_table_common_5fmsgs_2eproto,
};
static ::absl::once_flag descriptor_table_device_5fmsgs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_device_5fmsgs_2eproto = {
    false,
    false,
    4283,
    descriptor_table_protodef_device_5fmsgs_2eproto,
    "device_msgs.proto",
    &descriptor_table_device_5fmsgs_2eproto_once,
    descriptor_table_device_5fmsgs_2eproto_deps,
    1,
    33,
    schemas,
    file_default_instances,
    TableStruct_device_5fmsgs_2eproto::offsets,
    file_level_metadata_device_5fmsgs_2eproto,
    file_level_enum_descriptors_device_5fmsgs_2eproto,
    file_level_service_descriptors_device_5fmsgs_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_device_5fmsgs_2eproto_getter() {
  return &descriptor_table_device_5fmsgs_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_device_5fmsgs_2eproto(&descriptor_table_device_5fmsgs_2eproto);
namespace Nrmk {
namespace IndyFramework {
const ::google::protobuf::EnumDescriptor* GripperCommand_GripperCommandType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_device_5fmsgs_2eproto);
  return file_level_enum_descriptors_device_5fmsgs_2eproto[0];
}
bool GripperCommand_GripperCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GripperCommand_GripperCommandType GripperCommand::AUTO_DETECT;
constexpr GripperCommand_GripperCommandType GripperCommand::ACTIVATE;
constexpr GripperCommand_GripperCommandType GripperCommand::RE_ACTIVATE;
constexpr GripperCommand_GripperCommandType GripperCommand::SET_PVT;
constexpr GripperCommand_GripperCommandType GripperCommand::GripperCommandType_MIN;
constexpr GripperCommand_GripperCommandType GripperCommand::GripperCommandType_MAX;
constexpr int GripperCommand::GripperCommandType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* BrakeControlStyle_ControlStyle_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_device_5fmsgs_2eproto);
  return file_level_enum_descriptors_device_5fmsgs_2eproto[1];
}
bool BrakeControlStyle_ControlStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr BrakeControlStyle_ControlStyle BrakeControlStyle::UNAVAILABLE;
constexpr BrakeControlStyle_ControlStyle BrakeControlStyle::CONCURRENT;
constexpr BrakeControlStyle_ControlStyle BrakeControlStyle::INDIVIDUAL;
constexpr BrakeControlStyle_ControlStyle BrakeControlStyle::ControlStyle_MIN;
constexpr BrakeControlStyle_ControlStyle BrakeControlStyle::ControlStyle_MAX;
constexpr int BrakeControlStyle::ControlStyle_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* SanderCommand_SanderType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_device_5fmsgs_2eproto);
  return file_level_enum_descriptors_device_5fmsgs_2eproto[2];
}
bool SanderCommand_SanderType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr SanderCommand_SanderType SanderCommand::SANDER_ONROBOT;
constexpr SanderCommand_SanderType SanderCommand::SanderType_MIN;
constexpr SanderCommand_SanderType SanderCommand::SanderType_MAX;
constexpr int SanderCommand::SanderType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Encoder_EncoderType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_device_5fmsgs_2eproto);
  return file_level_enum_descriptors_device_5fmsgs_2eproto[3];
}
bool Encoder_EncoderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Encoder_EncoderType Encoder::CONSTANT;
constexpr Encoder_EncoderType Encoder::QUADRATURE;
constexpr Encoder_EncoderType Encoder::RISING;
constexpr Encoder_EncoderType Encoder::FALLING;
constexpr Encoder_EncoderType Encoder::MODBUS;
constexpr Encoder_EncoderType Encoder::EncoderType_MIN;
constexpr Encoder_EncoderType Encoder::EncoderType_MAX;
constexpr int Encoder::EncoderType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Trigger_TriggerType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_device_5fmsgs_2eproto);
  return file_level_enum_descriptors_device_5fmsgs_2eproto[4];
}
bool Trigger_TriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Trigger_TriggerType Trigger::DIGITAL;
constexpr Trigger_TriggerType Trigger::MODBUS;
constexpr Trigger_TriggerType Trigger::TriggerType_MIN;
constexpr Trigger_TriggerType Trigger::TriggerType_MAX;
constexpr int Trigger::TriggerType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* VisionServer_VisionServerType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_device_5fmsgs_2eproto);
  return file_level_enum_descriptors_device_5fmsgs_2eproto[5];
}
bool VisionServer_VisionServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr VisionServer_VisionServerType VisionServer::INDYEYE;
constexpr VisionServer_VisionServerType VisionServer::PHOTONEO;
constexpr VisionServer_VisionServerType VisionServer::HELIOS;
constexpr VisionServer_VisionServerType VisionServer::VisionServerType_MIN;
constexpr VisionServer_VisionServerType VisionServer::VisionServerType_MAX;
constexpr int VisionServer::VisionServerType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* GripperType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_device_5fmsgs_2eproto);
  return file_level_enum_descriptors_device_5fmsgs_2eproto[6];
}
bool GripperType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* DigitalState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_device_5fmsgs_2eproto);
  return file_level_enum_descriptors_device_5fmsgs_2eproto[7];
}
bool DigitalState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* EndtoolState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_device_5fmsgs_2eproto);
  return file_level_enum_descriptors_device_5fmsgs_2eproto[8];
}
bool EndtoolState_IsValid(int value) {
  switch (value) {
    case -2:
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* VisionFrameType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_device_5fmsgs_2eproto);
  return file_level_enum_descriptors_device_5fmsgs_2eproto[9];
}
bool VisionFrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Motor::_Internal {
 public:
};

Motor::Motor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.Motor)
}
Motor::Motor(const Motor& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.Motor)
}
inline void Motor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u},
      decltype(_impl_.enable_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Motor::~Motor() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.Motor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Motor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Motor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Motor::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.Motor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.enable_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.enable_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Motor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Motor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Motor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool enable = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Motor, _impl_.enable_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Motor, _impl_.enable_)}},
    // uint32 index = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Motor, _impl_.index_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Motor, _impl_.index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 index = 1;
    {PROTOBUF_FIELD_OFFSET(Motor, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool enable = 2;
    {PROTOBUF_FIELD_OFFSET(Motor, _impl_.enable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Motor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.Motor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_index(), target);
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.Motor)
  return target;
}

::size_t Motor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.Motor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_index());
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Motor::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Motor::MergeImpl
};
const ::google::protobuf::Message::ClassData*Motor::GetClassData() const { return &_class_data_; }


void Motor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Motor*>(&to_msg);
  auto& from = static_cast<const Motor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.Motor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Motor::CopyFrom(const Motor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.Motor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Motor::IsInitialized() const {
  return true;
}

void Motor::InternalSwap(Motor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Motor, _impl_.enable_)
      + sizeof(Motor::_impl_.enable_)
      - PROTOBUF_FIELD_OFFSET(Motor, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::google::protobuf::Metadata Motor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[0]);
}
// ===================================================================

class Servo::_Internal {
 public:
};

Servo::Servo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.Servo)
}
Servo::Servo(const Servo& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.Servo)
}
inline void Servo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u},
      decltype(_impl_.enable_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Servo::~Servo() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.Servo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Servo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Servo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Servo::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.Servo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.enable_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.enable_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Servo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Servo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Servo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool enable = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Servo, _impl_.enable_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Servo, _impl_.enable_)}},
    // uint32 index = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Servo, _impl_.index_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Servo, _impl_.index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 index = 1;
    {PROTOBUF_FIELD_OFFSET(Servo, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool enable = 2;
    {PROTOBUF_FIELD_OFFSET(Servo, _impl_.enable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Servo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.Servo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_index(), target);
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.Servo)
  return target;
}

::size_t Servo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.Servo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_index());
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Servo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Servo::MergeImpl
};
const ::google::protobuf::Message::ClassData*Servo::GetClassData() const { return &_class_data_; }


void Servo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Servo*>(&to_msg);
  auto& from = static_cast<const Servo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.Servo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Servo::CopyFrom(const Servo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.Servo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Servo::IsInitialized() const {
  return true;
}

void Servo::InternalSwap(Servo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Servo, _impl_.enable_)
      + sizeof(Servo::_impl_.enable_)
      - PROTOBUF_FIELD_OFFSET(Servo, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::google::protobuf::Metadata Servo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[1]);
}
// ===================================================================

class GripperData::_Internal {
 public:
};

GripperData::GripperData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.GripperData)
}
GripperData::GripperData(const GripperData& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.GripperData)
}
inline void GripperData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.gripper_type_){0},
      decltype(_impl_.gripper_position_){0},
      decltype(_impl_.gripper_state_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
GripperData::~GripperData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.GripperData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GripperData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void GripperData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GripperData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.GripperData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gripper_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.gripper_state_) -
      reinterpret_cast<char*>(&_impl_.gripper_type_)) + sizeof(_impl_.gripper_state_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GripperData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> GripperData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GripperData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.GripperType gripper_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GripperData, _impl_.gripper_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GripperData, _impl_.gripper_type_)}},
    // int32 gripper_position = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GripperData, _impl_.gripper_position_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GripperData, _impl_.gripper_position_)}},
    // int32 gripper_state = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GripperData, _impl_.gripper_state_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GripperData, _impl_.gripper_state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.GripperType gripper_type = 1;
    {PROTOBUF_FIELD_OFFSET(GripperData, _impl_.gripper_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 gripper_position = 2;
    {PROTOBUF_FIELD_OFFSET(GripperData, _impl_.gripper_position_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 gripper_state = 3;
    {PROTOBUF_FIELD_OFFSET(GripperData, _impl_.gripper_state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GripperData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.GripperData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.GripperType gripper_type = 1;
  if (this->_internal_gripper_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_gripper_type(), target);
  }

  // int32 gripper_position = 2;
  if (this->_internal_gripper_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_gripper_position(), target);
  }

  // int32 gripper_state = 3;
  if (this->_internal_gripper_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_gripper_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.GripperData)
  return target;
}

::size_t GripperData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.GripperData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.GripperType gripper_type = 1;
  if (this->_internal_gripper_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_gripper_type());
  }

  // int32 gripper_position = 2;
  if (this->_internal_gripper_position() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_gripper_position());
  }

  // int32 gripper_state = 3;
  if (this->_internal_gripper_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_gripper_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GripperData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GripperData::MergeImpl
};
const ::google::protobuf::Message::ClassData*GripperData::GetClassData() const { return &_class_data_; }


void GripperData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GripperData*>(&to_msg);
  auto& from = static_cast<const GripperData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.GripperData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gripper_type() != 0) {
    _this->_internal_set_gripper_type(from._internal_gripper_type());
  }
  if (from._internal_gripper_position() != 0) {
    _this->_internal_set_gripper_position(from._internal_gripper_position());
  }
  if (from._internal_gripper_state() != 0) {
    _this->_internal_set_gripper_state(from._internal_gripper_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GripperData::CopyFrom(const GripperData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.GripperData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GripperData::IsInitialized() const {
  return true;
}

void GripperData::InternalSwap(GripperData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GripperData, _impl_.gripper_state_)
      + sizeof(GripperData::_impl_.gripper_state_)
      - PROTOBUF_FIELD_OFFSET(GripperData, _impl_.gripper_type_)>(
          reinterpret_cast<char*>(&_impl_.gripper_type_),
          reinterpret_cast<char*>(&other->_impl_.gripper_type_));
}

::google::protobuf::Metadata GripperData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[2]);
}
// ===================================================================

class GripperCommand::_Internal {
 public:
};

GripperCommand::GripperCommand(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.GripperCommand)
}
GripperCommand::GripperCommand(const GripperCommand& from) : ::google::protobuf::Message() {
  GripperCommand* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gripper_pvt_data_){from._impl_.gripper_pvt_data_},
      /* _impl_._gripper_pvt_data_cached_byte_size_ = */ {0},
      decltype(_impl_.gripper_command_){},
      decltype(_impl_.gripper_type_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.gripper_command_, &from._impl_.gripper_command_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.gripper_type_) -
    reinterpret_cast<char*>(&_impl_.gripper_command_)) + sizeof(_impl_.gripper_type_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.GripperCommand)
}
inline void GripperCommand::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.gripper_pvt_data_){arena},
      /* _impl_._gripper_pvt_data_cached_byte_size_ = */ {0},
      decltype(_impl_.gripper_command_){0},
      decltype(_impl_.gripper_type_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
GripperCommand::~GripperCommand() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.GripperCommand)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GripperCommand::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gripper_pvt_data_.~RepeatedField();
}
void GripperCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GripperCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.GripperCommand)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_gripper_pvt_data()->Clear();
  ::memset(&_impl_.gripper_command_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.gripper_type_) -
      reinterpret_cast<char*>(&_impl_.gripper_command_)) + sizeof(_impl_.gripper_type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GripperCommand::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> GripperCommand::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GripperCommand_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.GripperCommand.GripperCommandType gripper_command = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GripperCommand, _impl_.gripper_command_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GripperCommand, _impl_.gripper_command_)}},
    // .Nrmk.IndyFramework.GripperType gripper_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GripperCommand, _impl_.gripper_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GripperCommand, _impl_.gripper_type_)}},
    // repeated int32 gripper_pvt_data = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(GripperCommand, _impl_.gripper_pvt_data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.GripperCommand.GripperCommandType gripper_command = 1;
    {PROTOBUF_FIELD_OFFSET(GripperCommand, _impl_.gripper_command_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.GripperType gripper_type = 2;
    {PROTOBUF_FIELD_OFFSET(GripperCommand, _impl_.gripper_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated int32 gripper_pvt_data = 3;
    {PROTOBUF_FIELD_OFFSET(GripperCommand, _impl_.gripper_pvt_data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GripperCommand::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.GripperCommand)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.GripperCommand.GripperCommandType gripper_command = 1;
  if (this->_internal_gripper_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_gripper_command(), target);
  }

  // .Nrmk.IndyFramework.GripperType gripper_type = 2;
  if (this->_internal_gripper_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_gripper_type(), target);
  }

  // repeated int32 gripper_pvt_data = 3;
  {
    int byte_size = _impl_._gripper_pvt_data_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(3, _internal_gripper_pvt_data(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.GripperCommand)
  return target;
}

::size_t GripperCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.GripperCommand)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gripper_pvt_data = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_gripper_pvt_data())
    ;
    _impl_._gripper_pvt_data_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.GripperCommand.GripperCommandType gripper_command = 1;
  if (this->_internal_gripper_command() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_gripper_command());
  }

  // .Nrmk.IndyFramework.GripperType gripper_type = 2;
  if (this->_internal_gripper_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_gripper_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GripperCommand::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GripperCommand::MergeImpl
};
const ::google::protobuf::Message::ClassData*GripperCommand::GetClassData() const { return &_class_data_; }


void GripperCommand::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GripperCommand*>(&to_msg);
  auto& from = static_cast<const GripperCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.GripperCommand)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_gripper_pvt_data()->MergeFrom(from._internal_gripper_pvt_data());
  if (from._internal_gripper_command() != 0) {
    _this->_internal_set_gripper_command(from._internal_gripper_command());
  }
  if (from._internal_gripper_type() != 0) {
    _this->_internal_set_gripper_type(from._internal_gripper_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GripperCommand::CopyFrom(const GripperCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.GripperCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GripperCommand::IsInitialized() const {
  return true;
}

void GripperCommand::InternalSwap(GripperCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gripper_pvt_data_.InternalSwap(&other->_impl_.gripper_pvt_data_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GripperCommand, _impl_.gripper_type_)
      + sizeof(GripperCommand::_impl_.gripper_type_)
      - PROTOBUF_FIELD_OFFSET(GripperCommand, _impl_.gripper_command_)>(
          reinterpret_cast<char*>(&_impl_.gripper_command_),
          reinterpret_cast<char*>(&other->_impl_.gripper_command_));
}

::google::protobuf::Metadata GripperCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[3]);
}
// ===================================================================

class DigitalSignal::_Internal {
 public:
};

DigitalSignal::DigitalSignal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.DigitalSignal)
}
DigitalSignal::DigitalSignal(const DigitalSignal& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.DigitalSignal)
}
inline void DigitalSignal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){0u},
      decltype(_impl_.state_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
DigitalSignal::~DigitalSignal() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.DigitalSignal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DigitalSignal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void DigitalSignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void DigitalSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.DigitalSignal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.address_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DigitalSignal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> DigitalSignal::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_DigitalSignal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.DigitalState state = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DigitalSignal, _impl_.state_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DigitalSignal, _impl_.state_)}},
    // uint32 address = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DigitalSignal, _impl_.address_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DigitalSignal, _impl_.address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 address = 1;
    {PROTOBUF_FIELD_OFFSET(DigitalSignal, _impl_.address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .Nrmk.IndyFramework.DigitalState state = 2;
    {PROTOBUF_FIELD_OFFSET(DigitalSignal, _impl_.state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* DigitalSignal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.DigitalSignal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_address(), target);
  }

  // .Nrmk.IndyFramework.DigitalState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.DigitalSignal)
  return target;
}

::size_t DigitalSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.DigitalSignal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_address());
  }

  // .Nrmk.IndyFramework.DigitalState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DigitalSignal::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    DigitalSignal::MergeImpl
};
const ::google::protobuf::Message::ClassData*DigitalSignal::GetClassData() const { return &_class_data_; }


void DigitalSignal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DigitalSignal*>(&to_msg);
  auto& from = static_cast<const DigitalSignal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.DigitalSignal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalSignal::CopyFrom(const DigitalSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.DigitalSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DigitalSignal::IsInitialized() const {
  return true;
}

void DigitalSignal::InternalSwap(DigitalSignal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalSignal, _impl_.state_)
      + sizeof(DigitalSignal::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(DigitalSignal, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::google::protobuf::Metadata DigitalSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[4]);
}
// ===================================================================

class EndLedDim::_Internal {
 public:
};

EndLedDim::EndLedDim(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.EndLedDim)
}
EndLedDim::EndLedDim(const EndLedDim& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.EndLedDim)
}
inline void EndLedDim::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.led_dim_){0u},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
EndLedDim::~EndLedDim() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.EndLedDim)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EndLedDim::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void EndLedDim::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void EndLedDim::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.EndLedDim)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.led_dim_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EndLedDim::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> EndLedDim::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EndLedDim_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 led_dim = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EndLedDim, _impl_.led_dim_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(EndLedDim, _impl_.led_dim_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 led_dim = 1;
    {PROTOBUF_FIELD_OFFSET(EndLedDim, _impl_.led_dim_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EndLedDim::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.EndLedDim)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 led_dim = 1;
  if (this->_internal_led_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_led_dim(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.EndLedDim)
  return target;
}

::size_t EndLedDim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.EndLedDim)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 led_dim = 1;
  if (this->_internal_led_dim() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_led_dim());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EndLedDim::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    EndLedDim::MergeImpl
};
const ::google::protobuf::Message::ClassData*EndLedDim::GetClassData() const { return &_class_data_; }


void EndLedDim::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EndLedDim*>(&to_msg);
  auto& from = static_cast<const EndLedDim&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.EndLedDim)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_led_dim() != 0) {
    _this->_internal_set_led_dim(from._internal_led_dim());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EndLedDim::CopyFrom(const EndLedDim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.EndLedDim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EndLedDim::IsInitialized() const {
  return true;
}

void EndLedDim::InternalSwap(EndLedDim* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.led_dim_, other->_impl_.led_dim_);
}

::google::protobuf::Metadata EndLedDim::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[5]);
}
// ===================================================================

class EndtoolSignal::_Internal {
 public:
};

EndtoolSignal::EndtoolSignal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.EndtoolSignal)
}
EndtoolSignal::EndtoolSignal(const EndtoolSignal& from) : ::google::protobuf::Message() {
  EndtoolSignal* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){from._internal_states()},
      /*decltype(_impl_._states_cached_byte_size_)*/ {0},
      decltype(_impl_.port_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port().empty()) {
    _this->_impl_.port_.Set(from._internal_port(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.EndtoolSignal)
}
inline void EndtoolSignal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){arena},
      /*decltype(_impl_._states_cached_byte_size_)*/ {0},
      decltype(_impl_.port_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
EndtoolSignal::~EndtoolSignal() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.EndtoolSignal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EndtoolSignal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_states()->~RepeatedField();
  _impl_.port_.Destroy();
}
void EndtoolSignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void EndtoolSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.EndtoolSignal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_states()->Clear();
  _impl_.port_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EndtoolSignal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 45, 2> EndtoolSignal::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EndtoolSignal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.EndtoolState states = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(EndtoolSignal, _impl_.states_)}},
    // string port = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EndtoolSignal, _impl_.port_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string port = 1;
    {PROTOBUF_FIELD_OFFSET(EndtoolSignal, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .Nrmk.IndyFramework.EndtoolState states = 2;
    {PROTOBUF_FIELD_OFFSET(EndtoolSignal, _impl_.states_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
  }},
  // no aux_entries
  {{
    "\40\4\0\0\0\0\0\0"
    "Nrmk.IndyFramework.EndtoolSignal"
    "port"
  }},
};

::uint8_t* EndtoolSignal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.EndtoolSignal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string port = 1;
  if (!this->_internal_port().empty()) {
    const std::string& _s = this->_internal_port();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.EndtoolSignal.port");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .Nrmk.IndyFramework.EndtoolState states = 2;
  {
    int byte_size = _impl_._states_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(2, _internal_states(),
                                       byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.EndtoolSignal)
  return target;
}

::size_t EndtoolSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.EndtoolSignal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.EndtoolState states = 2;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_states_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_states().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._states_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // string port = 1;
  if (!this->_internal_port().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EndtoolSignal::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    EndtoolSignal::MergeImpl
};
const ::google::protobuf::Message::ClassData*EndtoolSignal::GetClassData() const { return &_class_data_; }


void EndtoolSignal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EndtoolSignal*>(&to_msg);
  auto& from = static_cast<const EndtoolSignal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.EndtoolSignal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_states()->MergeFrom(from._internal_states());
  if (!from._internal_port().empty()) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EndtoolSignal::CopyFrom(const EndtoolSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.EndtoolSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EndtoolSignal::IsInitialized() const {
  return true;
}

void EndtoolSignal::InternalSwap(EndtoolSignal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_, lhs_arena,
                                       &other->_impl_.port_, rhs_arena);
}

::google::protobuf::Metadata EndtoolSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[6]);
}
// ===================================================================

class AnalogSignal::_Internal {
 public:
};

AnalogSignal::AnalogSignal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.AnalogSignal)
}
AnalogSignal::AnalogSignal(const AnalogSignal& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.AnalogSignal)
}
inline void AnalogSignal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){0u},
      decltype(_impl_.voltage_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AnalogSignal::~AnalogSignal() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.AnalogSignal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AnalogSignal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void AnalogSignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AnalogSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.AnalogSignal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.address_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.voltage_) -
      reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.voltage_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AnalogSignal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> AnalogSignal::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AnalogSignal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 voltage = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AnalogSignal, _impl_.voltage_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AnalogSignal, _impl_.voltage_)}},
    // uint32 address = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AnalogSignal, _impl_.address_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AnalogSignal, _impl_.address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 address = 1;
    {PROTOBUF_FIELD_OFFSET(AnalogSignal, _impl_.address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int32 voltage = 2;
    {PROTOBUF_FIELD_OFFSET(AnalogSignal, _impl_.voltage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AnalogSignal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.AnalogSignal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_address(), target);
  }

  // int32 voltage = 2;
  if (this->_internal_voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_voltage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.AnalogSignal)
  return target;
}

::size_t AnalogSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.AnalogSignal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_address());
  }

  // int32 voltage = 2;
  if (this->_internal_voltage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_voltage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AnalogSignal::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AnalogSignal::MergeImpl
};
const ::google::protobuf::Message::ClassData*AnalogSignal::GetClassData() const { return &_class_data_; }


void AnalogSignal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AnalogSignal*>(&to_msg);
  auto& from = static_cast<const AnalogSignal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.AnalogSignal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_voltage() != 0) {
    _this->_internal_set_voltage(from._internal_voltage());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AnalogSignal::CopyFrom(const AnalogSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.AnalogSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AnalogSignal::IsInitialized() const {
  return true;
}

void AnalogSignal::InternalSwap(AnalogSignal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnalogSignal, _impl_.voltage_)
      + sizeof(AnalogSignal::_impl_.voltage_)
      - PROTOBUF_FIELD_OFFSET(AnalogSignal, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::google::protobuf::Metadata AnalogSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[7]);
}
// ===================================================================

class MotorList::_Internal {
 public:
};

MotorList::MotorList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MotorList)
}
MotorList::MotorList(const MotorList& from) : ::google::protobuf::Message() {
  MotorList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.motors_){from._impl_.motors_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MotorList)
}
inline void MotorList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.motors_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
MotorList::~MotorList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MotorList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MotorList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.motors_.~RepeatedPtrField();
}
void MotorList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MotorList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MotorList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_motors()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MotorList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> MotorList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MotorList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.Motor motors = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MotorList, _impl_.motors_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.Motor motors = 1;
    {PROTOBUF_FIELD_OFFSET(MotorList, _impl_.motors_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Motor>()},
  }}, {{
  }},
};

::uint8_t* MotorList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MotorList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.Motor motors = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_motors_size()); i < n; i++) {
    const auto& repfield = this->_internal_motors().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MotorList)
  return target;
}

::size_t MotorList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MotorList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.Motor motors = 1;
  total_size += 1UL * this->_internal_motors_size();
  for (const auto& msg : this->_internal_motors()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MotorList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MotorList::MergeImpl
};
const ::google::protobuf::Message::ClassData*MotorList::GetClassData() const { return &_class_data_; }


void MotorList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MotorList*>(&to_msg);
  auto& from = static_cast<const MotorList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MotorList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_motors()->MergeFrom(from._internal_motors());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MotorList::CopyFrom(const MotorList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MotorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MotorList::IsInitialized() const {
  return true;
}

void MotorList::InternalSwap(MotorList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.motors_.InternalSwap(&other->_impl_.motors_);
}

::google::protobuf::Metadata MotorList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[8]);
}
// ===================================================================

class DigitalList::_Internal {
 public:
};

DigitalList::DigitalList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.DigitalList)
}
DigitalList::DigitalList(const DigitalList& from) : ::google::protobuf::Message() {
  DigitalList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signals_){from._impl_.signals_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.DigitalList)
}
inline void DigitalList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.signals_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
DigitalList::~DigitalList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.DigitalList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DigitalList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signals_.~RepeatedPtrField();
}
void DigitalList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void DigitalList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.DigitalList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_signals()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DigitalList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> DigitalList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DigitalList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.DigitalSignal signals = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DigitalList, _impl_.signals_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.DigitalSignal signals = 1;
    {PROTOBUF_FIELD_OFFSET(DigitalList, _impl_.signals_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
  }}, {{
  }},
};

::uint8_t* DigitalList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.DigitalList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal signals = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signals_size()); i < n; i++) {
    const auto& repfield = this->_internal_signals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.DigitalList)
  return target;
}

::size_t DigitalList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.DigitalList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal signals = 1;
  total_size += 1UL * this->_internal_signals_size();
  for (const auto& msg : this->_internal_signals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DigitalList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    DigitalList::MergeImpl
};
const ::google::protobuf::Message::ClassData*DigitalList::GetClassData() const { return &_class_data_; }


void DigitalList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DigitalList*>(&to_msg);
  auto& from = static_cast<const DigitalList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.DigitalList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signals()->MergeFrom(from._internal_signals());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalList::CopyFrom(const DigitalList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.DigitalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DigitalList::IsInitialized() const {
  return true;
}

void DigitalList::InternalSwap(DigitalList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signals_.InternalSwap(&other->_impl_.signals_);
}

::google::protobuf::Metadata DigitalList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[9]);
}
// ===================================================================

class EndtoolSignalList::_Internal {
 public:
};

EndtoolSignalList::EndtoolSignalList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.EndtoolSignalList)
}
EndtoolSignalList::EndtoolSignalList(const EndtoolSignalList& from) : ::google::protobuf::Message() {
  EndtoolSignalList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signals_){from._impl_.signals_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.EndtoolSignalList)
}
inline void EndtoolSignalList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.signals_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
EndtoolSignalList::~EndtoolSignalList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.EndtoolSignalList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EndtoolSignalList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signals_.~RepeatedPtrField();
}
void EndtoolSignalList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void EndtoolSignalList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.EndtoolSignalList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_signals()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EndtoolSignalList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EndtoolSignalList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EndtoolSignalList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.EndtoolSignal signals = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EndtoolSignalList, _impl_.signals_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.EndtoolSignal signals = 1;
    {PROTOBUF_FIELD_OFFSET(EndtoolSignalList, _impl_.signals_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::EndtoolSignal>()},
  }}, {{
  }},
};

::uint8_t* EndtoolSignalList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.EndtoolSignalList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.EndtoolSignal signals = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signals_size()); i < n; i++) {
    const auto& repfield = this->_internal_signals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.EndtoolSignalList)
  return target;
}

::size_t EndtoolSignalList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.EndtoolSignalList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.EndtoolSignal signals = 1;
  total_size += 1UL * this->_internal_signals_size();
  for (const auto& msg : this->_internal_signals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EndtoolSignalList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    EndtoolSignalList::MergeImpl
};
const ::google::protobuf::Message::ClassData*EndtoolSignalList::GetClassData() const { return &_class_data_; }


void EndtoolSignalList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EndtoolSignalList*>(&to_msg);
  auto& from = static_cast<const EndtoolSignalList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.EndtoolSignalList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signals()->MergeFrom(from._internal_signals());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EndtoolSignalList::CopyFrom(const EndtoolSignalList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.EndtoolSignalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EndtoolSignalList::IsInitialized() const {
  return true;
}

void EndtoolSignalList::InternalSwap(EndtoolSignalList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signals_.InternalSwap(&other->_impl_.signals_);
}

::google::protobuf::Metadata EndtoolSignalList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[10]);
}
// ===================================================================

class AnalogList::_Internal {
 public:
};

AnalogList::AnalogList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.AnalogList)
}
AnalogList::AnalogList(const AnalogList& from) : ::google::protobuf::Message() {
  AnalogList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signals_){from._impl_.signals_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.AnalogList)
}
inline void AnalogList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.signals_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AnalogList::~AnalogList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.AnalogList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AnalogList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signals_.~RepeatedPtrField();
}
void AnalogList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AnalogList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.AnalogList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_signals()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AnalogList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AnalogList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AnalogList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.AnalogSignal signals = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AnalogList, _impl_.signals_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.AnalogSignal signals = 1;
    {PROTOBUF_FIELD_OFFSET(AnalogList, _impl_.signals_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
  }}, {{
  }},
};

::uint8_t* AnalogList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.AnalogList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.AnalogSignal signals = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signals_size()); i < n; i++) {
    const auto& repfield = this->_internal_signals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.AnalogList)
  return target;
}

::size_t AnalogList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.AnalogList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.AnalogSignal signals = 1;
  total_size += 1UL * this->_internal_signals_size();
  for (const auto& msg : this->_internal_signals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AnalogList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AnalogList::MergeImpl
};
const ::google::protobuf::Message::ClassData*AnalogList::GetClassData() const { return &_class_data_; }


void AnalogList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AnalogList*>(&to_msg);
  auto& from = static_cast<const AnalogList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.AnalogList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signals()->MergeFrom(from._internal_signals());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AnalogList::CopyFrom(const AnalogList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.AnalogList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AnalogList::IsInitialized() const {
  return true;
}

void AnalogList::InternalSwap(AnalogList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signals_.InternalSwap(&other->_impl_.signals_);
}

::google::protobuf::Metadata AnalogList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[11]);
}
// ===================================================================

class DeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const DeviceInfo* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& DeviceInfo::_Internal::response(const DeviceInfo* msg) {
  return *msg->_impl_.response_;
}
void DeviceInfo::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DeviceInfo::DeviceInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from) : ::google::protobuf::Message() {
  DeviceInfo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.core_board_fw_vers_){from._impl_.core_board_fw_vers_},
      decltype(_impl_.robot_serial_){},
      decltype(_impl_.io_board_fw_ver_){},
      decltype(_impl_.endtool_board_fw_ver_){},
      decltype(_impl_.controller_ver_){},
      decltype(_impl_.controller_detail_){},
      decltype(_impl_.controller_date_){},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.num_joints_){},
      decltype(_impl_.payload_){},
      decltype(_impl_.teleop_loaded_){},
      decltype(_impl_.calibrated_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.robot_serial_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.robot_serial_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robot_serial().empty()) {
    _this->_impl_.robot_serial_.Set(from._internal_robot_serial(), _this->GetArenaForAllocation());
  }
  _impl_.io_board_fw_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.io_board_fw_ver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_io_board_fw_ver().empty()) {
    _this->_impl_.io_board_fw_ver_.Set(from._internal_io_board_fw_ver(), _this->GetArenaForAllocation());
  }
  _impl_.endtool_board_fw_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.endtool_board_fw_ver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_endtool_board_fw_ver().empty()) {
    _this->_impl_.endtool_board_fw_ver_.Set(from._internal_endtool_board_fw_ver(), _this->GetArenaForAllocation());
  }
  _impl_.controller_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.controller_ver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_controller_ver().empty()) {
    _this->_impl_.controller_ver_.Set(from._internal_controller_ver(), _this->GetArenaForAllocation());
  }
  _impl_.controller_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.controller_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_controller_detail().empty()) {
    _this->_impl_.controller_detail_.Set(from._internal_controller_detail(), _this->GetArenaForAllocation());
  }
  _impl_.controller_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.controller_date_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_controller_date().empty()) {
    _this->_impl_.controller_date_.Set(from._internal_controller_date(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.num_joints_, &from._impl_.num_joints_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.calibrated_) -
    reinterpret_cast<char*>(&_impl_.num_joints_)) + sizeof(_impl_.calibrated_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.DeviceInfo)
}
inline void DeviceInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.core_board_fw_vers_){arena},
      decltype(_impl_.robot_serial_){},
      decltype(_impl_.io_board_fw_ver_){},
      decltype(_impl_.endtool_board_fw_ver_){},
      decltype(_impl_.controller_ver_){},
      decltype(_impl_.controller_detail_){},
      decltype(_impl_.controller_date_){},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.num_joints_){0u},
      decltype(_impl_.payload_){0},
      decltype(_impl_.teleop_loaded_){false},
      decltype(_impl_.calibrated_){false},
  };
  _impl_.robot_serial_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.robot_serial_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.io_board_fw_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.io_board_fw_ver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.endtool_board_fw_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.endtool_board_fw_ver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.controller_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.controller_ver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.controller_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.controller_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.controller_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.controller_date_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.DeviceInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DeviceInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_core_board_fw_vers()->~RepeatedPtrField();
  _impl_.robot_serial_.Destroy();
  _impl_.io_board_fw_ver_.Destroy();
  _impl_.endtool_board_fw_ver_.Destroy();
  _impl_.controller_ver_.Destroy();
  _impl_.controller_detail_.Destroy();
  _impl_.controller_date_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void DeviceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.DeviceInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_core_board_fw_vers()->Clear();
  _impl_.robot_serial_.ClearToEmpty();
  _impl_.io_board_fw_ver_.ClearToEmpty();
  _impl_.endtool_board_fw_ver_.ClearToEmpty();
  _impl_.controller_ver_.ClearToEmpty();
  _impl_.controller_detail_.ClearToEmpty();
  _impl_.controller_date_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  ::memset(&_impl_.num_joints_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.calibrated_) -
      reinterpret_cast<char*>(&_impl_.num_joints_)) + sizeof(_impl_.calibrated_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 1, 157, 7> DeviceInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_._has_bits_),
    0, // no _extensions_
    100, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    2680680952,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DeviceInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 num_joints = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceInfo, _impl_.num_joints_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.num_joints_)}},
    // string robot_serial = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.robot_serial_)}},
    // float payload = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.payload_)}},
    // string controller_ver = 20;
    {::_pbi::TcParser::FastUS2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.controller_ver_)}},
    // string controller_detail = 21;
    {::_pbi::TcParser::FastUS2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.controller_detail_)}},
    // string controller_date = 22;
    {::_pbi::TcParser::FastUS2,
     {434, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.controller_date_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string io_board_fw_ver = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.io_board_fw_ver_)}},
    // repeated string core_board_fw_vers = 11;
    {::_pbi::TcParser::FastUR1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.core_board_fw_vers_)}},
    // string endtool_board_fw_ver = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.endtool_board_fw_ver_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool teleop_loaded = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.teleop_loaded_)}},
    // bool calibrated = 31;
    {::_pbi::TcParser::FastV8S2,
     {504, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.calibrated_)}},
  }}, {{
    100, 0, 1,
    65534, 11,
    65535, 65535
  }}, {{
    // uint32 num_joints = 1;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.num_joints_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string robot_serial = 2;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.robot_serial_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float payload = 3;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.payload_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string io_board_fw_ver = 10;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.io_board_fw_ver_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string core_board_fw_vers = 11;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.core_board_fw_vers_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string endtool_board_fw_ver = 12;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.endtool_board_fw_ver_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string controller_ver = 20;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.controller_ver_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string controller_detail = 21;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.controller_detail_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string controller_date = 22;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.controller_date_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool teleop_loaded = 30;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.teleop_loaded_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool calibrated = 31;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.calibrated_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
    "\35\0\14\0\17\22\24\16\21\17\0\0\0\0\0\0"
    "Nrmk.IndyFramework.DeviceInfo"
    "robot_serial"
    "io_board_fw_ver"
    "core_board_fw_vers"
    "endtool_board_fw_ver"
    "controller_ver"
    "controller_detail"
    "controller_date"
  }},
};

::uint8_t* DeviceInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.DeviceInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 num_joints = 1;
  if (this->_internal_num_joints() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_num_joints(), target);
  }

  // string robot_serial = 2;
  if (!this->_internal_robot_serial().empty()) {
    const std::string& _s = this->_internal_robot_serial();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DeviceInfo.robot_serial");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // float payload = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_payload = this->_internal_payload();
  ::uint32_t raw_payload;
  memcpy(&raw_payload, &tmp_payload, sizeof(tmp_payload));
  if (raw_payload != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_payload(), target);
  }

  // string io_board_fw_ver = 10;
  if (!this->_internal_io_board_fw_ver().empty()) {
    const std::string& _s = this->_internal_io_board_fw_ver();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DeviceInfo.io_board_fw_ver");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // repeated string core_board_fw_vers = 11;
  for (int i = 0, n = this->_internal_core_board_fw_vers_size(); i < n; ++i) {
    const auto& s = this->_internal_core_board_fw_vers().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers");
    target = stream->WriteString(11, s, target);
  }

  // string endtool_board_fw_ver = 12;
  if (!this->_internal_endtool_board_fw_ver().empty()) {
    const std::string& _s = this->_internal_endtool_board_fw_ver();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DeviceInfo.endtool_board_fw_ver");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string controller_ver = 20;
  if (!this->_internal_controller_ver().empty()) {
    const std::string& _s = this->_internal_controller_ver();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DeviceInfo.controller_ver");
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  // string controller_detail = 21;
  if (!this->_internal_controller_detail().empty()) {
    const std::string& _s = this->_internal_controller_detail();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DeviceInfo.controller_detail");
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  // string controller_date = 22;
  if (!this->_internal_controller_date().empty()) {
    const std::string& _s = this->_internal_controller_date();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DeviceInfo.controller_date");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // bool teleop_loaded = 30;
  if (this->_internal_teleop_loaded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        30, this->_internal_teleop_loaded(), target);
  }

  // bool calibrated = 31;
  if (this->_internal_calibrated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        31, this->_internal_calibrated(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.DeviceInfo)
  return target;
}

::size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.DeviceInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string core_board_fw_vers = 11;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_core_board_fw_vers().size());
  for (int i = 0, n = _internal_core_board_fw_vers().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_core_board_fw_vers().Get(i));
  }
  // string robot_serial = 2;
  if (!this->_internal_robot_serial().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_robot_serial());
  }

  // string io_board_fw_ver = 10;
  if (!this->_internal_io_board_fw_ver().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_io_board_fw_ver());
  }

  // string endtool_board_fw_ver = 12;
  if (!this->_internal_endtool_board_fw_ver().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_endtool_board_fw_ver());
  }

  // string controller_ver = 20;
  if (!this->_internal_controller_ver().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_controller_ver());
  }

  // string controller_detail = 21;
  if (!this->_internal_controller_detail().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_controller_detail());
  }

  // string controller_date = 22;
  if (!this->_internal_controller_date().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_controller_date());
  }

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // uint32 num_joints = 1;
  if (this->_internal_num_joints() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_num_joints());
  }

  // float payload = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_payload = this->_internal_payload();
  ::uint32_t raw_payload;
  memcpy(&raw_payload, &tmp_payload, sizeof(tmp_payload));
  if (raw_payload != 0) {
    total_size += 5;
  }

  // bool teleop_loaded = 30;
  if (this->_internal_teleop_loaded() != 0) {
    total_size += 3;
  }

  // bool calibrated = 31;
  if (this->_internal_calibrated() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DeviceInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    DeviceInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*DeviceInfo::GetClassData() const { return &_class_data_; }


void DeviceInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DeviceInfo*>(&to_msg);
  auto& from = static_cast<const DeviceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.DeviceInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_core_board_fw_vers()->MergeFrom(from._internal_core_board_fw_vers());
  if (!from._internal_robot_serial().empty()) {
    _this->_internal_set_robot_serial(from._internal_robot_serial());
  }
  if (!from._internal_io_board_fw_ver().empty()) {
    _this->_internal_set_io_board_fw_ver(from._internal_io_board_fw_ver());
  }
  if (!from._internal_endtool_board_fw_ver().empty()) {
    _this->_internal_set_endtool_board_fw_ver(from._internal_endtool_board_fw_ver());
  }
  if (!from._internal_controller_ver().empty()) {
    _this->_internal_set_controller_ver(from._internal_controller_ver());
  }
  if (!from._internal_controller_detail().empty()) {
    _this->_internal_set_controller_detail(from._internal_controller_detail());
  }
  if (!from._internal_controller_date().empty()) {
    _this->_internal_set_controller_date(from._internal_controller_date());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_num_joints() != 0) {
    _this->_internal_set_num_joints(from._internal_num_joints());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_payload = from._internal_payload();
  ::uint32_t raw_payload;
  memcpy(&raw_payload, &tmp_payload, sizeof(tmp_payload));
  if (raw_payload != 0) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_teleop_loaded() != 0) {
    _this->_internal_set_teleop_loaded(from._internal_teleop_loaded());
  }
  if (from._internal_calibrated() != 0) {
    _this->_internal_set_calibrated(from._internal_calibrated());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.core_board_fw_vers_.InternalSwap(&other->_impl_.core_board_fw_vers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.robot_serial_, lhs_arena,
                                       &other->_impl_.robot_serial_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.io_board_fw_ver_, lhs_arena,
                                       &other->_impl_.io_board_fw_ver_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.endtool_board_fw_ver_, lhs_arena,
                                       &other->_impl_.endtool_board_fw_ver_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.controller_ver_, lhs_arena,
                                       &other->_impl_.controller_ver_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.controller_detail_, lhs_arena,
                                       &other->_impl_.controller_detail_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.controller_date_, lhs_arena,
                                       &other->_impl_.controller_date_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.calibrated_)
      + sizeof(DeviceInfo::_impl_.calibrated_)
      - PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[12]);
}
// ===================================================================

class BrakeControlStyle::_Internal {
 public:
  using HasBits = decltype(std::declval<BrakeControlStyle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const BrakeControlStyle* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& BrakeControlStyle::_Internal::response(const BrakeControlStyle* msg) {
  return *msg->_impl_.response_;
}
void BrakeControlStyle::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BrakeControlStyle::BrakeControlStyle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.BrakeControlStyle)
}
BrakeControlStyle::BrakeControlStyle(const BrakeControlStyle& from) : ::google::protobuf::Message() {
  BrakeControlStyle* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.style_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  _this->_impl_.style_ = from._impl_.style_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.BrakeControlStyle)
}
inline void BrakeControlStyle::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.style_){0},
  };
}
BrakeControlStyle::~BrakeControlStyle() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.BrakeControlStyle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BrakeControlStyle::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}
void BrakeControlStyle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BrakeControlStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.BrakeControlStyle)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_.style_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BrakeControlStyle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 7> BrakeControlStyle::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_._has_bits_),
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BrakeControlStyle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 0, PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_.response_)}},
    // .Nrmk.IndyFramework.BrakeControlStyle.ControlStyle style = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BrakeControlStyle, _impl_.style_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_.style_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.BrakeControlStyle.ControlStyle style = 1;
    {PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_.style_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* BrakeControlStyle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.BrakeControlStyle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.BrakeControlStyle.ControlStyle style = 1;
  if (this->_internal_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_style(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.BrakeControlStyle)
  return target;
}

::size_t BrakeControlStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.BrakeControlStyle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .Nrmk.IndyFramework.BrakeControlStyle.ControlStyle style = 1;
  if (this->_internal_style() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_style());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BrakeControlStyle::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BrakeControlStyle::MergeImpl
};
const ::google::protobuf::Message::ClassData*BrakeControlStyle::GetClassData() const { return &_class_data_; }


void BrakeControlStyle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BrakeControlStyle*>(&to_msg);
  auto& from = static_cast<const BrakeControlStyle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.BrakeControlStyle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_style() != 0) {
    _this->_internal_set_style(from._internal_style());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BrakeControlStyle::CopyFrom(const BrakeControlStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.BrakeControlStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BrakeControlStyle::IsInitialized() const {
  return true;
}

void BrakeControlStyle::InternalSwap(BrakeControlStyle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_.style_)
      + sizeof(BrakeControlStyle::_impl_.style_)
      - PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata BrakeControlStyle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[13]);
}
// ===================================================================

class GetEL5001Data::_Internal {
 public:
  using HasBits = decltype(std::declval<GetEL5001Data>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const GetEL5001Data* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& GetEL5001Data::_Internal::response(const GetEL5001Data* msg) {
  return *msg->_impl_.response_;
}
void GetEL5001Data::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetEL5001Data::GetEL5001Data(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.GetEL5001Data)
}
GetEL5001Data::GetEL5001Data(const GetEL5001Data& from) : ::google::protobuf::Message() {
  GetEL5001Data* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.status_){},
      decltype(_impl_.value_){},
      decltype(_impl_.delta_){},
      decltype(_impl_.average_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.average_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.average_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.GetEL5001Data)
}
inline void GetEL5001Data::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.status_){0},
      decltype(_impl_.value_){0},
      decltype(_impl_.delta_){0},
      decltype(_impl_.average_){0},
  };
}
GetEL5001Data::~GetEL5001Data() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.GetEL5001Data)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetEL5001Data::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}
void GetEL5001Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GetEL5001Data::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.GetEL5001Data)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  ::memset(&_impl_.status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.average_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.average_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetEL5001Data::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 1, 0, 7> GetEL5001Data::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_._has_bits_),
    0, // no _extensions_
    100, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetEL5001Data_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float average = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.average_)}},
    // int32 status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetEL5001Data, _impl_.status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.status_)}},
    // int32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetEL5001Data, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.value_)}},
    // int32 delta = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetEL5001Data, _impl_.delta_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.delta_)}},
  }}, {{
    100, 0, 1,
    65534, 4,
    65535, 65535
  }}, {{
    // int32 status = 1;
    {PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 value = 2;
    {PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 delta = 3;
    {PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.delta_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float average = 4;
    {PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.average_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* GetEL5001Data::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.GetEL5001Data)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_status(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_value(), target);
  }

  // int32 delta = 3;
  if (this->_internal_delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_delta(), target);
  }

  // float average = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_average = this->_internal_average();
  ::uint32_t raw_average;
  memcpy(&raw_average, &tmp_average, sizeof(tmp_average));
  if (raw_average != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_average(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.GetEL5001Data)
  return target;
}

::size_t GetEL5001Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.GetEL5001Data)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_status());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());
  }

  // int32 delta = 3;
  if (this->_internal_delta() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_delta());
  }

  // float average = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_average = this->_internal_average();
  ::uint32_t raw_average;
  memcpy(&raw_average, &tmp_average, sizeof(tmp_average));
  if (raw_average != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetEL5001Data::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GetEL5001Data::MergeImpl
};
const ::google::protobuf::Message::ClassData*GetEL5001Data::GetClassData() const { return &_class_data_; }


void GetEL5001Data::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetEL5001Data*>(&to_msg);
  auto& from = static_cast<const GetEL5001Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.GetEL5001Data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_delta() != 0) {
    _this->_internal_set_delta(from._internal_delta());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_average = from._internal_average();
  ::uint32_t raw_average;
  memcpy(&raw_average, &tmp_average, sizeof(tmp_average));
  if (raw_average != 0) {
    _this->_internal_set_average(from._internal_average());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetEL5001Data::CopyFrom(const GetEL5001Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.GetEL5001Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetEL5001Data::IsInitialized() const {
  return true;
}

void GetEL5001Data::InternalSwap(GetEL5001Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.average_)
      + sizeof(GetEL5001Data::_impl_.average_)
      - PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata GetEL5001Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[14]);
}
// ===================================================================

class GetEL5101Data::_Internal {
 public:
  using HasBits = decltype(std::declval<GetEL5101Data>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const GetEL5101Data* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& GetEL5101Data::_Internal::response(const GetEL5101Data* msg) {
  return *msg->_impl_.response_;
}
void GetEL5101Data::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetEL5101Data::GetEL5101Data(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.GetEL5101Data)
}
GetEL5101Data::GetEL5101Data(const GetEL5101Data& from) : ::google::protobuf::Message() {
  GetEL5101Data* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.status_){},
      decltype(_impl_.value_){},
      decltype(_impl_.latch_){},
      decltype(_impl_.delta_){},
      decltype(_impl_.average_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.average_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.average_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.GetEL5101Data)
}
inline void GetEL5101Data::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.status_){0},
      decltype(_impl_.value_){0},
      decltype(_impl_.latch_){0},
      decltype(_impl_.delta_){0},
      decltype(_impl_.average_){0},
  };
}
GetEL5101Data::~GetEL5101Data() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.GetEL5101Data)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetEL5101Data::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}
void GetEL5101Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GetEL5101Data::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.GetEL5101Data)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  ::memset(&_impl_.status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.average_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.average_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetEL5101Data::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 7> GetEL5101Data::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_._has_bits_),
    0, // no _extensions_
    100, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetEL5101Data_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetEL5101Data, _impl_.status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.status_)}},
    // int32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetEL5101Data, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.value_)}},
    // int32 latch = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetEL5101Data, _impl_.latch_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.latch_)}},
    // int32 delta = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetEL5101Data, _impl_.delta_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.delta_)}},
    // float average = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.average_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 5,
    65535, 65535
  }}, {{
    // int32 status = 1;
    {PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 value = 2;
    {PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 latch = 3;
    {PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.latch_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 delta = 4;
    {PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.delta_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float average = 5;
    {PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.average_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* GetEL5101Data::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.GetEL5101Data)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_status(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_value(), target);
  }

  // int32 latch = 3;
  if (this->_internal_latch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_latch(), target);
  }

  // int32 delta = 4;
  if (this->_internal_delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_delta(), target);
  }

  // float average = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_average = this->_internal_average();
  ::uint32_t raw_average;
  memcpy(&raw_average, &tmp_average, sizeof(tmp_average));
  if (raw_average != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_average(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.GetEL5101Data)
  return target;
}

::size_t GetEL5101Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.GetEL5101Data)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_status());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());
  }

  // int32 latch = 3;
  if (this->_internal_latch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_latch());
  }

  // int32 delta = 4;
  if (this->_internal_delta() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_delta());
  }

  // float average = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_average = this->_internal_average();
  ::uint32_t raw_average;
  memcpy(&raw_average, &tmp_average, sizeof(tmp_average));
  if (raw_average != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetEL5101Data::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GetEL5101Data::MergeImpl
};
const ::google::protobuf::Message::ClassData*GetEL5101Data::GetClassData() const { return &_class_data_; }


void GetEL5101Data::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetEL5101Data*>(&to_msg);
  auto& from = static_cast<const GetEL5101Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.GetEL5101Data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_latch() != 0) {
    _this->_internal_set_latch(from._internal_latch());
  }
  if (from._internal_delta() != 0) {
    _this->_internal_set_delta(from._internal_delta());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_average = from._internal_average();
  ::uint32_t raw_average;
  memcpy(&raw_average, &tmp_average, sizeof(tmp_average));
  if (raw_average != 0) {
    _this->_internal_set_average(from._internal_average());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetEL5101Data::CopyFrom(const GetEL5101Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.GetEL5101Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetEL5101Data::IsInitialized() const {
  return true;
}

void GetEL5101Data::InternalSwap(GetEL5101Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.average_)
      + sizeof(GetEL5101Data::_impl_.average_)
      - PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata GetEL5101Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[15]);
}
// ===================================================================

class FTSensorData::_Internal {
 public:
  using HasBits = decltype(std::declval<FTSensorData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const FTSensorData* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& FTSensorData::_Internal::response(const FTSensorData* msg) {
  return *msg->_impl_.response_;
}
void FTSensorData::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FTSensorData::FTSensorData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.FTSensorData)
}
FTSensorData::FTSensorData(const FTSensorData& from) : ::google::protobuf::Message() {
  FTSensorData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.ft_fx_){},
      decltype(_impl_.ft_fy_){},
      decltype(_impl_.ft_fz_){},
      decltype(_impl_.ft_tx_){},
      decltype(_impl_.ft_ty_){},
      decltype(_impl_.ft_tz_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.ft_fx_, &from._impl_.ft_fx_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ft_tz_) -
    reinterpret_cast<char*>(&_impl_.ft_fx_)) + sizeof(_impl_.ft_tz_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.FTSensorData)
}
inline void FTSensorData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.ft_fx_){0},
      decltype(_impl_.ft_fy_){0},
      decltype(_impl_.ft_fz_){0},
      decltype(_impl_.ft_tx_){0},
      decltype(_impl_.ft_ty_){0},
      decltype(_impl_.ft_tz_){0},
  };
}
FTSensorData::~FTSensorData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.FTSensorData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FTSensorData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}
void FTSensorData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FTSensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.FTSensorData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  ::memset(&_impl_.ft_fx_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ft_tz_) -
      reinterpret_cast<char*>(&_impl_.ft_fx_)) + sizeof(_impl_.ft_tz_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FTSensorData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 0, 7> FTSensorData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_._has_bits_),
    0, // no _extensions_
    100, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FTSensorData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float ft_Fx = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_fx_)}},
    // float ft_Fy = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_fy_)}},
    // float ft_Fz = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_fz_)}},
    // float ft_Tx = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_tx_)}},
    // float ft_Ty = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_ty_)}},
    // float ft_Tz = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_tz_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 6,
    65535, 65535
  }}, {{
    // float ft_Fx = 1;
    {PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_fx_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Fy = 2;
    {PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_fy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Fz = 3;
    {PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_fz_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Tx = 4;
    {PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_tx_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Ty = 5;
    {PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_ty_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Tz = 6;
    {PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_tz_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* FTSensorData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.FTSensorData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float ft_Fx = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fx = this->_internal_ft_fx();
  ::uint32_t raw_ft_fx;
  memcpy(&raw_ft_fx, &tmp_ft_fx, sizeof(tmp_ft_fx));
  if (raw_ft_fx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_ft_fx(), target);
  }

  // float ft_Fy = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fy = this->_internal_ft_fy();
  ::uint32_t raw_ft_fy;
  memcpy(&raw_ft_fy, &tmp_ft_fy, sizeof(tmp_ft_fy));
  if (raw_ft_fy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_ft_fy(), target);
  }

  // float ft_Fz = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fz = this->_internal_ft_fz();
  ::uint32_t raw_ft_fz;
  memcpy(&raw_ft_fz, &tmp_ft_fz, sizeof(tmp_ft_fz));
  if (raw_ft_fz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_ft_fz(), target);
  }

  // float ft_Tx = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tx = this->_internal_ft_tx();
  ::uint32_t raw_ft_tx;
  memcpy(&raw_ft_tx, &tmp_ft_tx, sizeof(tmp_ft_tx));
  if (raw_ft_tx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_ft_tx(), target);
  }

  // float ft_Ty = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_ty = this->_internal_ft_ty();
  ::uint32_t raw_ft_ty;
  memcpy(&raw_ft_ty, &tmp_ft_ty, sizeof(tmp_ft_ty));
  if (raw_ft_ty != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_ft_ty(), target);
  }

  // float ft_Tz = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tz = this->_internal_ft_tz();
  ::uint32_t raw_ft_tz;
  memcpy(&raw_ft_tz, &tmp_ft_tz, sizeof(tmp_ft_tz));
  if (raw_ft_tz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_ft_tz(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.FTSensorData)
  return target;
}

::size_t FTSensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.FTSensorData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // float ft_Fx = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fx = this->_internal_ft_fx();
  ::uint32_t raw_ft_fx;
  memcpy(&raw_ft_fx, &tmp_ft_fx, sizeof(tmp_ft_fx));
  if (raw_ft_fx != 0) {
    total_size += 5;
  }

  // float ft_Fy = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fy = this->_internal_ft_fy();
  ::uint32_t raw_ft_fy;
  memcpy(&raw_ft_fy, &tmp_ft_fy, sizeof(tmp_ft_fy));
  if (raw_ft_fy != 0) {
    total_size += 5;
  }

  // float ft_Fz = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fz = this->_internal_ft_fz();
  ::uint32_t raw_ft_fz;
  memcpy(&raw_ft_fz, &tmp_ft_fz, sizeof(tmp_ft_fz));
  if (raw_ft_fz != 0) {
    total_size += 5;
  }

  // float ft_Tx = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tx = this->_internal_ft_tx();
  ::uint32_t raw_ft_tx;
  memcpy(&raw_ft_tx, &tmp_ft_tx, sizeof(tmp_ft_tx));
  if (raw_ft_tx != 0) {
    total_size += 5;
  }

  // float ft_Ty = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_ty = this->_internal_ft_ty();
  ::uint32_t raw_ft_ty;
  memcpy(&raw_ft_ty, &tmp_ft_ty, sizeof(tmp_ft_ty));
  if (raw_ft_ty != 0) {
    total_size += 5;
  }

  // float ft_Tz = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tz = this->_internal_ft_tz();
  ::uint32_t raw_ft_tz;
  memcpy(&raw_ft_tz, &tmp_ft_tz, sizeof(tmp_ft_tz));
  if (raw_ft_tz != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FTSensorData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FTSensorData::MergeImpl
};
const ::google::protobuf::Message::ClassData*FTSensorData::GetClassData() const { return &_class_data_; }


void FTSensorData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FTSensorData*>(&to_msg);
  auto& from = static_cast<const FTSensorData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.FTSensorData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fx = from._internal_ft_fx();
  ::uint32_t raw_ft_fx;
  memcpy(&raw_ft_fx, &tmp_ft_fx, sizeof(tmp_ft_fx));
  if (raw_ft_fx != 0) {
    _this->_internal_set_ft_fx(from._internal_ft_fx());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fy = from._internal_ft_fy();
  ::uint32_t raw_ft_fy;
  memcpy(&raw_ft_fy, &tmp_ft_fy, sizeof(tmp_ft_fy));
  if (raw_ft_fy != 0) {
    _this->_internal_set_ft_fy(from._internal_ft_fy());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fz = from._internal_ft_fz();
  ::uint32_t raw_ft_fz;
  memcpy(&raw_ft_fz, &tmp_ft_fz, sizeof(tmp_ft_fz));
  if (raw_ft_fz != 0) {
    _this->_internal_set_ft_fz(from._internal_ft_fz());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tx = from._internal_ft_tx();
  ::uint32_t raw_ft_tx;
  memcpy(&raw_ft_tx, &tmp_ft_tx, sizeof(tmp_ft_tx));
  if (raw_ft_tx != 0) {
    _this->_internal_set_ft_tx(from._internal_ft_tx());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_ty = from._internal_ft_ty();
  ::uint32_t raw_ft_ty;
  memcpy(&raw_ft_ty, &tmp_ft_ty, sizeof(tmp_ft_ty));
  if (raw_ft_ty != 0) {
    _this->_internal_set_ft_ty(from._internal_ft_ty());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tz = from._internal_ft_tz();
  ::uint32_t raw_ft_tz;
  memcpy(&raw_ft_tz, &tmp_ft_tz, sizeof(tmp_ft_tz));
  if (raw_ft_tz != 0) {
    _this->_internal_set_ft_tz(from._internal_ft_tz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FTSensorData::CopyFrom(const FTSensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.FTSensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FTSensorData::IsInitialized() const {
  return true;
}

void FTSensorData::InternalSwap(FTSensorData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_tz_)
      + sizeof(FTSensorData::_impl_.ft_tz_)
      - PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata FTSensorData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[16]);
}
// ===================================================================

class GetLoadFactorsRes::_Internal {
 public:
  using HasBits = decltype(std::declval<GetLoadFactorsRes>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetLoadFactorsRes, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const GetLoadFactorsRes* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& GetLoadFactorsRes::_Internal::response(const GetLoadFactorsRes* msg) {
  return *msg->_impl_.response_;
}
void GetLoadFactorsRes::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetLoadFactorsRes::GetLoadFactorsRes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.GetLoadFactorsRes)
}
GetLoadFactorsRes::GetLoadFactorsRes(const GetLoadFactorsRes& from) : ::google::protobuf::Message() {
  GetLoadFactorsRes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.percents_){from._impl_.percents_},
      /* _impl_._percents_cached_byte_size_ = */ {0},
      decltype(_impl_.torques_){from._impl_.torques_},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.GetLoadFactorsRes)
}
inline void GetLoadFactorsRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.percents_){arena},
      /* _impl_._percents_cached_byte_size_ = */ {0},
      decltype(_impl_.torques_){arena},
      decltype(_impl_.response_){nullptr},
  };
}
GetLoadFactorsRes::~GetLoadFactorsRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.GetLoadFactorsRes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetLoadFactorsRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.percents_.~RepeatedField();
  _impl_.torques_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void GetLoadFactorsRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GetLoadFactorsRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.GetLoadFactorsRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_percents()->Clear();
  _internal_mutable_torques()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetLoadFactorsRes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 7> GetLoadFactorsRes::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetLoadFactorsRes, _impl_._has_bits_),
    0, // no _extensions_
    100, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetLoadFactorsRes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 0, PROTOBUF_FIELD_OFFSET(GetLoadFactorsRes, _impl_.response_)}},
    // repeated int32 percents = 1;
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetLoadFactorsRes, _impl_.percents_)}},
    // repeated float torques = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetLoadFactorsRes, _impl_.torques_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 2,
    65535, 65535
  }}, {{
    // repeated int32 percents = 1;
    {PROTOBUF_FIELD_OFFSET(GetLoadFactorsRes, _impl_.percents_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated float torques = 2;
    {PROTOBUF_FIELD_OFFSET(GetLoadFactorsRes, _impl_.torques_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(GetLoadFactorsRes, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* GetLoadFactorsRes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.GetLoadFactorsRes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int32 percents = 1;
  {
    int byte_size = _impl_._percents_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(1, _internal_percents(),
                                                 byte_size, target);
    }
  }

  // repeated float torques = 2;
  if (this->_internal_torques_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_torques(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.GetLoadFactorsRes)
  return target;
}

::size_t GetLoadFactorsRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.GetLoadFactorsRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 percents = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_percents())
    ;
    _impl_._percents_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float torques = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_torques_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetLoadFactorsRes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GetLoadFactorsRes::MergeImpl
};
const ::google::protobuf::Message::ClassData*GetLoadFactorsRes::GetClassData() const { return &_class_data_; }


void GetLoadFactorsRes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetLoadFactorsRes*>(&to_msg);
  auto& from = static_cast<const GetLoadFactorsRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.GetLoadFactorsRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_percents()->MergeFrom(from._internal_percents());
  _this->_internal_mutable_torques()->MergeFrom(from._internal_torques());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetLoadFactorsRes::CopyFrom(const GetLoadFactorsRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.GetLoadFactorsRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetLoadFactorsRes::IsInitialized() const {
  return true;
}

void GetLoadFactorsRes::InternalSwap(GetLoadFactorsRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.percents_.InternalSwap(&other->_impl_.percents_);
  _impl_.torques_.InternalSwap(&other->_impl_.torques_);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata GetLoadFactorsRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[17]);
}
// ===================================================================

class SetAutoModeReq::_Internal {
 public:
};

SetAutoModeReq::SetAutoModeReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.SetAutoModeReq)
}
SetAutoModeReq::SetAutoModeReq(const SetAutoModeReq& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.SetAutoModeReq)
}
inline void SetAutoModeReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.on_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
SetAutoModeReq::~SetAutoModeReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.SetAutoModeReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetAutoModeReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void SetAutoModeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SetAutoModeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.SetAutoModeReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.on_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetAutoModeReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SetAutoModeReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetAutoModeReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool on = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SetAutoModeReq, _impl_.on_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SetAutoModeReq, _impl_.on_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool on = 1;
    {PROTOBUF_FIELD_OFFSET(SetAutoModeReq, _impl_.on_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SetAutoModeReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.SetAutoModeReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool on = 1;
  if (this->_internal_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.SetAutoModeReq)
  return target;
}

::size_t SetAutoModeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.SetAutoModeReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool on = 1;
  if (this->_internal_on() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetAutoModeReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SetAutoModeReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*SetAutoModeReq::GetClassData() const { return &_class_data_; }


void SetAutoModeReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetAutoModeReq*>(&to_msg);
  auto& from = static_cast<const SetAutoModeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.SetAutoModeReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_on() != 0) {
    _this->_internal_set_on(from._internal_on());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetAutoModeReq::CopyFrom(const SetAutoModeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.SetAutoModeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetAutoModeReq::IsInitialized() const {
  return true;
}

void SetAutoModeReq::InternalSwap(SetAutoModeReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.on_, other->_impl_.on_);
}

::google::protobuf::Metadata SetAutoModeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[18]);
}
// ===================================================================

class SetAutoModeRes::_Internal {
 public:
};

SetAutoModeRes::SetAutoModeRes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.SetAutoModeRes)
}
SetAutoModeRes::SetAutoModeRes(const SetAutoModeRes& from) : ::google::protobuf::Message() {
  SetAutoModeRes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.SetAutoModeRes)
}
inline void SetAutoModeRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
SetAutoModeRes::~SetAutoModeRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.SetAutoModeRes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetAutoModeRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}
void SetAutoModeRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SetAutoModeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.SetAutoModeRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetAutoModeRes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 45, 7> SetAutoModeRes::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    100, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetAutoModeRes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string msg = 100;
    {::_pbi::TcParser::FastUS2,
     {1698, 63, 0, PROTOBUF_FIELD_OFFSET(SetAutoModeRes, _impl_.msg_)}},
  }}, {{
    100, 0, 1,
    65534, 0,
    65535, 65535
  }}, {{
    // string msg = 100;
    {PROTOBUF_FIELD_OFFSET(SetAutoModeRes, _impl_.msg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\41\3\0\0\0\0\0\0"
    "Nrmk.IndyFramework.SetAutoModeRes"
    "msg"
  }},
};

::uint8_t* SetAutoModeRes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.SetAutoModeRes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.SetAutoModeRes.msg");
    target = stream->WriteStringMaybeAliased(100, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.SetAutoModeRes)
  return target;
}

::size_t SetAutoModeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.SetAutoModeRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetAutoModeRes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SetAutoModeRes::MergeImpl
};
const ::google::protobuf::Message::ClassData*SetAutoModeRes::GetClassData() const { return &_class_data_; }


void SetAutoModeRes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetAutoModeRes*>(&to_msg);
  auto& from = static_cast<const SetAutoModeRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.SetAutoModeRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetAutoModeRes::CopyFrom(const SetAutoModeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.SetAutoModeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetAutoModeRes::IsInitialized() const {
  return true;
}

void SetAutoModeRes::InternalSwap(SetAutoModeRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
}

::google::protobuf::Metadata SetAutoModeRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[19]);
}
// ===================================================================

class CheckAutoModeRes::_Internal {
 public:
};

CheckAutoModeRes::CheckAutoModeRes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CheckAutoModeRes)
}
CheckAutoModeRes::CheckAutoModeRes(const CheckAutoModeRes& from) : ::google::protobuf::Message() {
  CheckAutoModeRes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      decltype(_impl_.on_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  _this->_impl_.on_ = from._impl_.on_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CheckAutoModeRes)
}
inline void CheckAutoModeRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      decltype(_impl_.on_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CheckAutoModeRes::~CheckAutoModeRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CheckAutoModeRes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CheckAutoModeRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}
void CheckAutoModeRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CheckAutoModeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CheckAutoModeRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.on_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CheckAutoModeRes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 47, 7> CheckAutoModeRes::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CheckAutoModeRes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string msg = 100;
    {::_pbi::TcParser::FastUS2,
     {1698, 63, 0, PROTOBUF_FIELD_OFFSET(CheckAutoModeRes, _impl_.msg_)}},
    // bool on = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CheckAutoModeRes, _impl_.on_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CheckAutoModeRes, _impl_.on_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // bool on = 1;
    {PROTOBUF_FIELD_OFFSET(CheckAutoModeRes, _impl_.on_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string msg = 100;
    {PROTOBUF_FIELD_OFFSET(CheckAutoModeRes, _impl_.msg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\43\0\3\0\0\0\0\0"
    "Nrmk.IndyFramework.CheckAutoModeRes"
    "msg"
  }},
};

::uint8_t* CheckAutoModeRes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CheckAutoModeRes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool on = 1;
  if (this->_internal_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_on(), target);
  }

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.CheckAutoModeRes.msg");
    target = stream->WriteStringMaybeAliased(100, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CheckAutoModeRes)
  return target;
}

::size_t CheckAutoModeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CheckAutoModeRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  // bool on = 1;
  if (this->_internal_on() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CheckAutoModeRes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CheckAutoModeRes::MergeImpl
};
const ::google::protobuf::Message::ClassData*CheckAutoModeRes::GetClassData() const { return &_class_data_; }


void CheckAutoModeRes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CheckAutoModeRes*>(&to_msg);
  auto& from = static_cast<const CheckAutoModeRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CheckAutoModeRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_on() != 0) {
    _this->_internal_set_on(from._internal_on());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CheckAutoModeRes::CopyFrom(const CheckAutoModeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CheckAutoModeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CheckAutoModeRes::IsInitialized() const {
  return true;
}

void CheckAutoModeRes::InternalSwap(CheckAutoModeRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
        swap(_impl_.on_, other->_impl_.on_);
}

::google::protobuf::Metadata CheckAutoModeRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[20]);
}
// ===================================================================

class CheckReducedModeRes::_Internal {
 public:
};

CheckReducedModeRes::CheckReducedModeRes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CheckReducedModeRes)
}
CheckReducedModeRes::CheckReducedModeRes(const CheckReducedModeRes& from) : ::google::protobuf::Message() {
  CheckReducedModeRes* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      decltype(_impl_.on_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  _this->_impl_.on_ = from._impl_.on_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CheckReducedModeRes)
}
inline void CheckReducedModeRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      decltype(_impl_.on_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CheckReducedModeRes::~CheckReducedModeRes() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CheckReducedModeRes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CheckReducedModeRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}
void CheckReducedModeRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CheckReducedModeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CheckReducedModeRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.on_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CheckReducedModeRes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 50, 7> CheckReducedModeRes::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CheckReducedModeRes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string msg = 100;
    {::_pbi::TcParser::FastUS2,
     {1698, 63, 0, PROTOBUF_FIELD_OFFSET(CheckReducedModeRes, _impl_.msg_)}},
    // bool on = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CheckReducedModeRes, _impl_.on_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CheckReducedModeRes, _impl_.on_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // bool on = 1;
    {PROTOBUF_FIELD_OFFSET(CheckReducedModeRes, _impl_.on_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string msg = 100;
    {PROTOBUF_FIELD_OFFSET(CheckReducedModeRes, _impl_.msg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\46\0\3\0\0\0\0\0"
    "Nrmk.IndyFramework.CheckReducedModeRes"
    "msg"
  }},
};

::uint8_t* CheckReducedModeRes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CheckReducedModeRes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool on = 1;
  if (this->_internal_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_on(), target);
  }

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.CheckReducedModeRes.msg");
    target = stream->WriteStringMaybeAliased(100, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CheckReducedModeRes)
  return target;
}

::size_t CheckReducedModeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CheckReducedModeRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  // bool on = 1;
  if (this->_internal_on() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CheckReducedModeRes::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CheckReducedModeRes::MergeImpl
};
const ::google::protobuf::Message::ClassData*CheckReducedModeRes::GetClassData() const { return &_class_data_; }


void CheckReducedModeRes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CheckReducedModeRes*>(&to_msg);
  auto& from = static_cast<const CheckReducedModeRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CheckReducedModeRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_on() != 0) {
    _this->_internal_set_on(from._internal_on());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CheckReducedModeRes::CopyFrom(const CheckReducedModeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CheckReducedModeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CheckReducedModeRes::IsInitialized() const {
  return true;
}

void CheckReducedModeRes::InternalSwap(CheckReducedModeRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
        swap(_impl_.on_, other->_impl_.on_);
}

::google::protobuf::Metadata CheckReducedModeRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[21]);
}
// ===================================================================

class SafetyFunctionState::_Internal {
 public:
  using HasBits = decltype(std::declval<SafetyFunctionState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SafetyFunctionState, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const SafetyFunctionState* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& SafetyFunctionState::_Internal::response(const SafetyFunctionState* msg) {
  return *msg->_impl_.response_;
}
void SafetyFunctionState::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SafetyFunctionState::SafetyFunctionState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.SafetyFunctionState)
}
SafetyFunctionState::SafetyFunctionState(const SafetyFunctionState& from) : ::google::protobuf::Message() {
  SafetyFunctionState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.id_){},
      decltype(_impl_.state_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.SafetyFunctionState)
}
inline void SafetyFunctionState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.id_){0u},
      decltype(_impl_.state_){0u},
  };
}
SafetyFunctionState::~SafetyFunctionState() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.SafetyFunctionState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SafetyFunctionState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}
void SafetyFunctionState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SafetyFunctionState::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.SafetyFunctionState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SafetyFunctionState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 7> SafetyFunctionState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SafetyFunctionState, _impl_._has_bits_),
    0, // no _extensions_
    100, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SafetyFunctionState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 0, PROTOBUF_FIELD_OFFSET(SafetyFunctionState, _impl_.response_)}},
    // uint32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SafetyFunctionState, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyFunctionState, _impl_.id_)}},
    // uint32 state = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SafetyFunctionState, _impl_.state_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyFunctionState, _impl_.state_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 2,
    65535, 65535
  }}, {{
    // uint32 id = 1;
    {PROTOBUF_FIELD_OFFSET(SafetyFunctionState, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 state = 2;
    {PROTOBUF_FIELD_OFFSET(SafetyFunctionState, _impl_.state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(SafetyFunctionState, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* SafetyFunctionState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.SafetyFunctionState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // uint32 state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_state(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.SafetyFunctionState)
  return target;
}

::size_t SafetyFunctionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.SafetyFunctionState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  // uint32 state = 2;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SafetyFunctionState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SafetyFunctionState::MergeImpl
};
const ::google::protobuf::Message::ClassData*SafetyFunctionState::GetClassData() const { return &_class_data_; }


void SafetyFunctionState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SafetyFunctionState*>(&to_msg);
  auto& from = static_cast<const SafetyFunctionState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.SafetyFunctionState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SafetyFunctionState::CopyFrom(const SafetyFunctionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.SafetyFunctionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SafetyFunctionState::IsInitialized() const {
  return true;
}

void SafetyFunctionState::InternalSwap(SafetyFunctionState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SafetyFunctionState, _impl_.state_)
      + sizeof(SafetyFunctionState::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(SafetyFunctionState, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata SafetyFunctionState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[22]);
}
// ===================================================================

class SafetyControlData::_Internal {
 public:
  using HasBits = decltype(std::declval<SafetyControlData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SafetyControlData, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::SafetyFunctionState& safety_state(const SafetyControlData* msg);
  static void set_has_safety_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::SafetyFunctionState& SafetyControlData::_Internal::safety_state(const SafetyControlData* msg) {
  return *msg->_impl_.safety_state_;
}
SafetyControlData::SafetyControlData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.SafetyControlData)
}
SafetyControlData::SafetyControlData(const SafetyControlData& from) : ::google::protobuf::Message() {
  SafetyControlData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.safety_state_){nullptr},
      decltype(_impl_.auto_mode_){},
      decltype(_impl_.reduced_mode_){},
      decltype(_impl_.enabler_pressed_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.safety_state_ = new ::Nrmk::IndyFramework::SafetyFunctionState(*from._impl_.safety_state_);
  }
  ::memcpy(&_impl_.auto_mode_, &from._impl_.auto_mode_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.enabler_pressed_) -
    reinterpret_cast<char*>(&_impl_.auto_mode_)) + sizeof(_impl_.enabler_pressed_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.SafetyControlData)
}
inline void SafetyControlData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.safety_state_){nullptr},
      decltype(_impl_.auto_mode_){false},
      decltype(_impl_.reduced_mode_){false},
      decltype(_impl_.enabler_pressed_){false},
  };
}
SafetyControlData::~SafetyControlData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.SafetyControlData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SafetyControlData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.safety_state_;
}
void SafetyControlData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SafetyControlData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.SafetyControlData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.safety_state_ != nullptr);
    _impl_.safety_state_->Clear();
  }
  ::memset(&_impl_.auto_mode_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.enabler_pressed_) -
      reinterpret_cast<char*>(&_impl_.auto_mode_)) + sizeof(_impl_.enabler_pressed_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SafetyControlData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 1, 0, 2> SafetyControlData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SafetyControlData, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SafetyControlData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool auto_mode = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SafetyControlData, _impl_.auto_mode_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyControlData, _impl_.auto_mode_)}},
    // bool reduced_mode = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SafetyControlData, _impl_.reduced_mode_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyControlData, _impl_.reduced_mode_)}},
    // bool enabler_pressed = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SafetyControlData, _impl_.enabler_pressed_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SafetyControlData, _impl_.enabler_pressed_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.SafetyFunctionState safety_state = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(SafetyControlData, _impl_.safety_state_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool auto_mode = 1;
    {PROTOBUF_FIELD_OFFSET(SafetyControlData, _impl_.auto_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool reduced_mode = 2;
    {PROTOBUF_FIELD_OFFSET(SafetyControlData, _impl_.reduced_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool enabler_pressed = 3;
    {PROTOBUF_FIELD_OFFSET(SafetyControlData, _impl_.enabler_pressed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .Nrmk.IndyFramework.SafetyFunctionState safety_state = 5;
    {PROTOBUF_FIELD_OFFSET(SafetyControlData, _impl_.safety_state_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::SafetyFunctionState>()},
  }}, {{
  }},
};

::uint8_t* SafetyControlData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.SafetyControlData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool auto_mode = 1;
  if (this->_internal_auto_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_auto_mode(), target);
  }

  // bool reduced_mode = 2;
  if (this->_internal_reduced_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_reduced_mode(), target);
  }

  // bool enabler_pressed = 3;
  if (this->_internal_enabler_pressed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_enabler_pressed(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.SafetyFunctionState safety_state = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::safety_state(this),
        _Internal::safety_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.SafetyControlData)
  return target;
}

::size_t SafetyControlData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.SafetyControlData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.SafetyFunctionState safety_state = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.safety_state_);
  }

  // bool auto_mode = 1;
  if (this->_internal_auto_mode() != 0) {
    total_size += 2;
  }

  // bool reduced_mode = 2;
  if (this->_internal_reduced_mode() != 0) {
    total_size += 2;
  }

  // bool enabler_pressed = 3;
  if (this->_internal_enabler_pressed() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SafetyControlData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SafetyControlData::MergeImpl
};
const ::google::protobuf::Message::ClassData*SafetyControlData::GetClassData() const { return &_class_data_; }


void SafetyControlData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SafetyControlData*>(&to_msg);
  auto& from = static_cast<const SafetyControlData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.SafetyControlData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_safety_state()->::Nrmk::IndyFramework::SafetyFunctionState::MergeFrom(
        from._internal_safety_state());
  }
  if (from._internal_auto_mode() != 0) {
    _this->_internal_set_auto_mode(from._internal_auto_mode());
  }
  if (from._internal_reduced_mode() != 0) {
    _this->_internal_set_reduced_mode(from._internal_reduced_mode());
  }
  if (from._internal_enabler_pressed() != 0) {
    _this->_internal_set_enabler_pressed(from._internal_enabler_pressed());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SafetyControlData::CopyFrom(const SafetyControlData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.SafetyControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SafetyControlData::IsInitialized() const {
  return true;
}

void SafetyControlData::InternalSwap(SafetyControlData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SafetyControlData, _impl_.enabler_pressed_)
      + sizeof(SafetyControlData::_impl_.enabler_pressed_)
      - PROTOBUF_FIELD_OFFSET(SafetyControlData, _impl_.safety_state_)>(
          reinterpret_cast<char*>(&_impl_.safety_state_),
          reinterpret_cast<char*>(&other->_impl_.safety_state_));
}

::google::protobuf::Metadata SafetyControlData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[23]);
}
// ===================================================================

class SanderCommand::_Internal {
 public:
};

SanderCommand::SanderCommand(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.SanderCommand)
}
SanderCommand::SanderCommand(const SanderCommand& from) : ::google::protobuf::Message() {
  SanderCommand* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){},
      decltype(_impl_.type_){},
      decltype(_impl_.speed_){},
      decltype(_impl_.state_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.state_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.SanderCommand)
}
inline void SanderCommand::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){},
      decltype(_impl_.type_){0},
      decltype(_impl_.speed_){0},
      decltype(_impl_.state_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
SanderCommand::~SanderCommand() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.SanderCommand)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SanderCommand::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
}
void SanderCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SanderCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.SanderCommand)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SanderCommand::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 43, 2> SanderCommand::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966776,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SanderCommand_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.SanderCommand.SanderType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SanderCommand, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SanderCommand, _impl_.type_)}},
    // string ip = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SanderCommand, _impl_.ip_)}},
    // float speed = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(SanderCommand, _impl_.speed_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.SanderCommand.SanderType type = 1;
    {PROTOBUF_FIELD_OFFSET(SanderCommand, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string ip = 2;
    {PROTOBUF_FIELD_OFFSET(SanderCommand, _impl_.ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float speed = 3;
    {PROTOBUF_FIELD_OFFSET(SanderCommand, _impl_.speed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool state = 10;
    {PROTOBUF_FIELD_OFFSET(SanderCommand, _impl_.state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\40\0\2\0\0\0\0\0"
    "Nrmk.IndyFramework.SanderCommand"
    "ip"
  }},
};

::uint8_t* SanderCommand::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.SanderCommand)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.SanderCommand.SanderType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    const std::string& _s = this->_internal_ip();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.SanderCommand.ip");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // float speed = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  ::uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_speed(), target);
  }

  // bool state = 10;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.SanderCommand)
  return target;
}

::size_t SanderCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.SanderCommand)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ip());
  }

  // .Nrmk.IndyFramework.SanderCommand.SanderType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float speed = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  ::uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 5;
  }

  // bool state = 10;
  if (this->_internal_state() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SanderCommand::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SanderCommand::MergeImpl
};
const ::google::protobuf::Message::ClassData*SanderCommand::GetClassData() const { return &_class_data_; }


void SanderCommand::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SanderCommand*>(&to_msg);
  auto& from = static_cast<const SanderCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.SanderCommand)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  ::uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SanderCommand::CopyFrom(const SanderCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.SanderCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SanderCommand::IsInitialized() const {
  return true;
}

void SanderCommand::InternalSwap(SanderCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, lhs_arena,
                                       &other->_impl_.ip_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SanderCommand, _impl_.state_)
      + sizeof(SanderCommand::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(SanderCommand, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::google::protobuf::Metadata SanderCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[24]);
}
// ===================================================================

class Encoder::_Internal {
 public:
};

Encoder::Encoder(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.Encoder)
}
Encoder::Encoder(const Encoder& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.Encoder)
}
inline void Encoder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channel1_){::int64_t{0}},
      decltype(_impl_.channel2_){::int64_t{0}},
      decltype(_impl_.type_){0},
      decltype(_impl_.mm_per_tick_){0},
      decltype(_impl_.sample_num_){::int64_t{0}},
      decltype(_impl_.vel_const_mmps_){0},
      decltype(_impl_.reversed_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Encoder::~Encoder() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.Encoder)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Encoder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Encoder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Encoder::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.Encoder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.channel1_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.reversed_) -
      reinterpret_cast<char*>(&_impl_.channel1_)) + sizeof(_impl_.reversed_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Encoder::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> Encoder::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Encoder_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.Encoder.EncoderType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Encoder, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Encoder, _impl_.type_)}},
    // int64 channel1 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Encoder, _impl_.channel1_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Encoder, _impl_.channel1_)}},
    // int64 channel2 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Encoder, _impl_.channel2_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Encoder, _impl_.channel2_)}},
    // int64 sample_num = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Encoder, _impl_.sample_num_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Encoder, _impl_.sample_num_)}},
    // float mm_per_tick = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Encoder, _impl_.mm_per_tick_)}},
    // float vel_const_mmps = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Encoder, _impl_.vel_const_mmps_)}},
    // bool reversed = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Encoder, _impl_.reversed_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Encoder, _impl_.reversed_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.Encoder.EncoderType type = 1;
    {PROTOBUF_FIELD_OFFSET(Encoder, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 channel1 = 2;
    {PROTOBUF_FIELD_OFFSET(Encoder, _impl_.channel1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 channel2 = 3;
    {PROTOBUF_FIELD_OFFSET(Encoder, _impl_.channel2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 sample_num = 4;
    {PROTOBUF_FIELD_OFFSET(Encoder, _impl_.sample_num_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // float mm_per_tick = 5;
    {PROTOBUF_FIELD_OFFSET(Encoder, _impl_.mm_per_tick_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float vel_const_mmps = 6;
    {PROTOBUF_FIELD_OFFSET(Encoder, _impl_.vel_const_mmps_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool reversed = 7;
    {PROTOBUF_FIELD_OFFSET(Encoder, _impl_.reversed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Encoder::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.Encoder)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.Encoder.EncoderType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // int64 channel1 = 2;
  if (this->_internal_channel1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_channel1(), target);
  }

  // int64 channel2 = 3;
  if (this->_internal_channel2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_channel2(), target);
  }

  // int64 sample_num = 4;
  if (this->_internal_sample_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_sample_num(), target);
  }

  // float mm_per_tick = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_mm_per_tick = this->_internal_mm_per_tick();
  ::uint32_t raw_mm_per_tick;
  memcpy(&raw_mm_per_tick, &tmp_mm_per_tick, sizeof(tmp_mm_per_tick));
  if (raw_mm_per_tick != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_mm_per_tick(), target);
  }

  // float vel_const_mmps = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_const_mmps = this->_internal_vel_const_mmps();
  ::uint32_t raw_vel_const_mmps;
  memcpy(&raw_vel_const_mmps, &tmp_vel_const_mmps, sizeof(tmp_vel_const_mmps));
  if (raw_vel_const_mmps != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_vel_const_mmps(), target);
  }

  // bool reversed = 7;
  if (this->_internal_reversed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_reversed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.Encoder)
  return target;
}

::size_t Encoder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.Encoder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 channel1 = 2;
  if (this->_internal_channel1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_channel1());
  }

  // int64 channel2 = 3;
  if (this->_internal_channel2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_channel2());
  }

  // .Nrmk.IndyFramework.Encoder.EncoderType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float mm_per_tick = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_mm_per_tick = this->_internal_mm_per_tick();
  ::uint32_t raw_mm_per_tick;
  memcpy(&raw_mm_per_tick, &tmp_mm_per_tick, sizeof(tmp_mm_per_tick));
  if (raw_mm_per_tick != 0) {
    total_size += 5;
  }

  // int64 sample_num = 4;
  if (this->_internal_sample_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_sample_num());
  }

  // float vel_const_mmps = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_const_mmps = this->_internal_vel_const_mmps();
  ::uint32_t raw_vel_const_mmps;
  memcpy(&raw_vel_const_mmps, &tmp_vel_const_mmps, sizeof(tmp_vel_const_mmps));
  if (raw_vel_const_mmps != 0) {
    total_size += 5;
  }

  // bool reversed = 7;
  if (this->_internal_reversed() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Encoder::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Encoder::MergeImpl
};
const ::google::protobuf::Message::ClassData*Encoder::GetClassData() const { return &_class_data_; }


void Encoder::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Encoder*>(&to_msg);
  auto& from = static_cast<const Encoder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.Encoder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel1() != 0) {
    _this->_internal_set_channel1(from._internal_channel1());
  }
  if (from._internal_channel2() != 0) {
    _this->_internal_set_channel2(from._internal_channel2());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_mm_per_tick = from._internal_mm_per_tick();
  ::uint32_t raw_mm_per_tick;
  memcpy(&raw_mm_per_tick, &tmp_mm_per_tick, sizeof(tmp_mm_per_tick));
  if (raw_mm_per_tick != 0) {
    _this->_internal_set_mm_per_tick(from._internal_mm_per_tick());
  }
  if (from._internal_sample_num() != 0) {
    _this->_internal_set_sample_num(from._internal_sample_num());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vel_const_mmps = from._internal_vel_const_mmps();
  ::uint32_t raw_vel_const_mmps;
  memcpy(&raw_vel_const_mmps, &tmp_vel_const_mmps, sizeof(tmp_vel_const_mmps));
  if (raw_vel_const_mmps != 0) {
    _this->_internal_set_vel_const_mmps(from._internal_vel_const_mmps());
  }
  if (from._internal_reversed() != 0) {
    _this->_internal_set_reversed(from._internal_reversed());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Encoder::CopyFrom(const Encoder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.Encoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Encoder::IsInitialized() const {
  return true;
}

void Encoder::InternalSwap(Encoder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Encoder, _impl_.reversed_)
      + sizeof(Encoder::_impl_.reversed_)
      - PROTOBUF_FIELD_OFFSET(Encoder, _impl_.channel1_)>(
          reinterpret_cast<char*>(&_impl_.channel1_),
          reinterpret_cast<char*>(&other->_impl_.channel1_));
}

::google::protobuf::Metadata Encoder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[25]);
}
// ===================================================================

class Trigger::_Internal {
 public:
};

Trigger::Trigger(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.Trigger)
}
Trigger::Trigger(const Trigger& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.Trigger)
}
inline void Trigger::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_){::int64_t{0}},
      decltype(_impl_.type_){0},
      decltype(_impl_.detect_rise_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Trigger::~Trigger() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.Trigger)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Trigger::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Trigger::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.Trigger)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.channel_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.detect_rise_) -
      reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.detect_rise_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Trigger::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Trigger::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Trigger_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.Trigger.TriggerType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Trigger, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Trigger, _impl_.type_)}},
    // int64 channel = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Trigger, _impl_.channel_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Trigger, _impl_.channel_)}},
    // bool detect_rise = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Trigger, _impl_.detect_rise_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Trigger, _impl_.detect_rise_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.Trigger.TriggerType type = 1;
    {PROTOBUF_FIELD_OFFSET(Trigger, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 channel = 2;
    {PROTOBUF_FIELD_OFFSET(Trigger, _impl_.channel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool detect_rise = 3;
    {PROTOBUF_FIELD_OFFSET(Trigger, _impl_.detect_rise_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Trigger::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.Trigger)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.Trigger.TriggerType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // int64 channel = 2;
  if (this->_internal_channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_channel(), target);
  }

  // bool detect_rise = 3;
  if (this->_internal_detect_rise() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_detect_rise(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.Trigger)
  return target;
}

::size_t Trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.Trigger)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 channel = 2;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_channel());
  }

  // .Nrmk.IndyFramework.Trigger.TriggerType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool detect_rise = 3;
  if (this->_internal_detect_rise() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Trigger::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Trigger::MergeImpl
};
const ::google::protobuf::Message::ClassData*Trigger::GetClassData() const { return &_class_data_; }


void Trigger::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Trigger*>(&to_msg);
  auto& from = static_cast<const Trigger&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.Trigger)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_detect_rise() != 0) {
    _this->_internal_set_detect_rise(from._internal_detect_rise());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Trigger::CopyFrom(const Trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Trigger::IsInitialized() const {
  return true;
}

void Trigger::InternalSwap(Trigger* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trigger, _impl_.detect_rise_)
      + sizeof(Trigger::_impl_.detect_rise_)
      - PROTOBUF_FIELD_OFFSET(Trigger, _impl_.channel_)>(
          reinterpret_cast<char*>(&_impl_.channel_),
          reinterpret_cast<char*>(&other->_impl_.channel_));
}

::google::protobuf::Metadata Trigger::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[26]);
}
// ===================================================================

class Conveyor::_Internal {
 public:
  using HasBits = decltype(std::declval<Conveyor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Conveyor, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Encoder& encoder(const Conveyor* msg);
  static void set_has_encoder(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Nrmk::IndyFramework::Trigger& trigger(const Conveyor* msg);
  static void set_has_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Nrmk::IndyFramework::Vector& direction(const Conveyor* msg);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Nrmk::IndyFramework::PosePair& starting_pose(const Conveyor* msg);
  static void set_has_starting_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Nrmk::IndyFramework::PosePair& terminal_pose(const Conveyor* msg);
  static void set_has_terminal_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::Nrmk::IndyFramework::Encoder& Conveyor::_Internal::encoder(const Conveyor* msg) {
  return *msg->_impl_.encoder_;
}
const ::Nrmk::IndyFramework::Trigger& Conveyor::_Internal::trigger(const Conveyor* msg) {
  return *msg->_impl_.trigger_;
}
const ::Nrmk::IndyFramework::Vector& Conveyor::_Internal::direction(const Conveyor* msg) {
  return *msg->_impl_.direction_;
}
const ::Nrmk::IndyFramework::PosePair& Conveyor::_Internal::starting_pose(const Conveyor* msg) {
  return *msg->_impl_.starting_pose_;
}
const ::Nrmk::IndyFramework::PosePair& Conveyor::_Internal::terminal_pose(const Conveyor* msg) {
  return *msg->_impl_.terminal_pose_;
}
void Conveyor::clear_direction() {
  if (_impl_.direction_ != nullptr) _impl_.direction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Conveyor::clear_starting_pose() {
  if (_impl_.starting_pose_ != nullptr) _impl_.starting_pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Conveyor::clear_terminal_pose() {
  if (_impl_.terminal_pose_ != nullptr) _impl_.terminal_pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
Conveyor::Conveyor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.Conveyor)
}
Conveyor::Conveyor(const Conveyor& from) : ::google::protobuf::Message() {
  Conveyor* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.encoder_){nullptr},
      decltype(_impl_.trigger_){nullptr},
      decltype(_impl_.direction_){nullptr},
      decltype(_impl_.starting_pose_){nullptr},
      decltype(_impl_.terminal_pose_){nullptr},
      decltype(_impl_.offset_dist_){},
      decltype(_impl_.working_dist_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.encoder_ = new ::Nrmk::IndyFramework::Encoder(*from._impl_.encoder_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.trigger_ = new ::Nrmk::IndyFramework::Trigger(*from._impl_.trigger_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.direction_ = new ::Nrmk::IndyFramework::Vector(*from._impl_.direction_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.starting_pose_ = new ::Nrmk::IndyFramework::PosePair(*from._impl_.starting_pose_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.terminal_pose_ = new ::Nrmk::IndyFramework::PosePair(*from._impl_.terminal_pose_);
  }
  ::memcpy(&_impl_.offset_dist_, &from._impl_.offset_dist_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.working_dist_) -
    reinterpret_cast<char*>(&_impl_.offset_dist_)) + sizeof(_impl_.working_dist_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.Conveyor)
}
inline void Conveyor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.encoder_){nullptr},
      decltype(_impl_.trigger_){nullptr},
      decltype(_impl_.direction_){nullptr},
      decltype(_impl_.starting_pose_){nullptr},
      decltype(_impl_.terminal_pose_){nullptr},
      decltype(_impl_.offset_dist_){0},
      decltype(_impl_.working_dist_){0},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Conveyor::~Conveyor() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.Conveyor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Conveyor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.encoder_;
  if (this != internal_default_instance()) delete _impl_.trigger_;
  if (this != internal_default_instance()) delete _impl_.direction_;
  if (this != internal_default_instance()) delete _impl_.starting_pose_;
  if (this != internal_default_instance()) delete _impl_.terminal_pose_;
}
void Conveyor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Conveyor::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.Conveyor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.encoder_ != nullptr);
      _impl_.encoder_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.trigger_ != nullptr);
      _impl_.trigger_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.direction_ != nullptr);
      _impl_.direction_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.starting_pose_ != nullptr);
      _impl_.starting_pose_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.terminal_pose_ != nullptr);
      _impl_.terminal_pose_->Clear();
    }
  }
  ::memset(&_impl_.offset_dist_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.working_dist_) -
      reinterpret_cast<char*>(&_impl_.offset_dist_)) + sizeof(_impl_.working_dist_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Conveyor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 5, 48, 2> Conveyor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Conveyor, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965696,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Conveyor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.name_)}},
    // .Nrmk.IndyFramework.Encoder encoder = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.encoder_)}},
    // .Nrmk.IndyFramework.Trigger trigger = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.trigger_)}},
    // float offset_dist = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.offset_dist_)}},
    // float working_dist = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.working_dist_)}},
    // .Nrmk.IndyFramework.Vector direction = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 2, PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.direction_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.PosePair starting_pose = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 3, PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.starting_pose_)}},
    // .Nrmk.IndyFramework.PosePair terminal_pose = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 4, 4, PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.terminal_pose_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .Nrmk.IndyFramework.Encoder encoder = 2;
    {PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.encoder_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.Trigger trigger = 3;
    {PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.trigger_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float offset_dist = 4;
    {PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.offset_dist_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float working_dist = 5;
    {PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.working_dist_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.Vector direction = 6;
    {PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.direction_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.PosePair starting_pose = 10;
    {PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.starting_pose_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Nrmk.IndyFramework.PosePair terminal_pose = 11;
    {PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.terminal_pose_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Encoder>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Trigger>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Vector>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::PosePair>()},
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::PosePair>()},
  }}, {{
    "\33\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "Nrmk.IndyFramework.Conveyor"
    "name"
  }},
};

::uint8_t* Conveyor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.Conveyor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.Conveyor.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Encoder encoder = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::encoder(this),
        _Internal::encoder(this).GetCachedSize(), target, stream);
  }

  // .Nrmk.IndyFramework.Trigger trigger = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::trigger(this),
        _Internal::trigger(this).GetCachedSize(), target, stream);
  }

  // float offset_dist = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_offset_dist = this->_internal_offset_dist();
  ::uint32_t raw_offset_dist;
  memcpy(&raw_offset_dist, &tmp_offset_dist, sizeof(tmp_offset_dist));
  if (raw_offset_dist != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_offset_dist(), target);
  }

  // float working_dist = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_working_dist = this->_internal_working_dist();
  ::uint32_t raw_working_dist;
  memcpy(&raw_working_dist, &tmp_working_dist, sizeof(tmp_working_dist));
  if (raw_working_dist != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_working_dist(), target);
  }

  // .Nrmk.IndyFramework.Vector direction = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::direction(this),
        _Internal::direction(this).GetCachedSize(), target, stream);
  }

  // .Nrmk.IndyFramework.PosePair starting_pose = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::starting_pose(this),
        _Internal::starting_pose(this).GetCachedSize(), target, stream);
  }

  // .Nrmk.IndyFramework.PosePair terminal_pose = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::terminal_pose(this),
        _Internal::terminal_pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.Conveyor)
  return target;
}

::size_t Conveyor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.Conveyor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .Nrmk.IndyFramework.Encoder encoder = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.encoder_);
    }

    // .Nrmk.IndyFramework.Trigger trigger = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.trigger_);
    }

    // .Nrmk.IndyFramework.Vector direction = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.direction_);
    }

    // .Nrmk.IndyFramework.PosePair starting_pose = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.starting_pose_);
    }

    // .Nrmk.IndyFramework.PosePair terminal_pose = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.terminal_pose_);
    }

  }
  // float offset_dist = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_offset_dist = this->_internal_offset_dist();
  ::uint32_t raw_offset_dist;
  memcpy(&raw_offset_dist, &tmp_offset_dist, sizeof(tmp_offset_dist));
  if (raw_offset_dist != 0) {
    total_size += 5;
  }

  // float working_dist = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_working_dist = this->_internal_working_dist();
  ::uint32_t raw_working_dist;
  memcpy(&raw_working_dist, &tmp_working_dist, sizeof(tmp_working_dist));
  if (raw_working_dist != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Conveyor::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Conveyor::MergeImpl
};
const ::google::protobuf::Message::ClassData*Conveyor::GetClassData() const { return &_class_data_; }


void Conveyor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Conveyor*>(&to_msg);
  auto& from = static_cast<const Conveyor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.Conveyor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_encoder()->::Nrmk::IndyFramework::Encoder::MergeFrom(
          from._internal_encoder());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_trigger()->::Nrmk::IndyFramework::Trigger::MergeFrom(
          from._internal_trigger());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_direction()->::Nrmk::IndyFramework::Vector::MergeFrom(
          from._internal_direction());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_starting_pose()->::Nrmk::IndyFramework::PosePair::MergeFrom(
          from._internal_starting_pose());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_terminal_pose()->::Nrmk::IndyFramework::PosePair::MergeFrom(
          from._internal_terminal_pose());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_offset_dist = from._internal_offset_dist();
  ::uint32_t raw_offset_dist;
  memcpy(&raw_offset_dist, &tmp_offset_dist, sizeof(tmp_offset_dist));
  if (raw_offset_dist != 0) {
    _this->_internal_set_offset_dist(from._internal_offset_dist());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_working_dist = from._internal_working_dist();
  ::uint32_t raw_working_dist;
  memcpy(&raw_working_dist, &tmp_working_dist, sizeof(tmp_working_dist));
  if (raw_working_dist != 0) {
    _this->_internal_set_working_dist(from._internal_working_dist());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Conveyor::CopyFrom(const Conveyor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.Conveyor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Conveyor::IsInitialized() const {
  return true;
}

void Conveyor::InternalSwap(Conveyor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.working_dist_)
      + sizeof(Conveyor::_impl_.working_dist_)
      - PROTOBUF_FIELD_OFFSET(Conveyor, _impl_.encoder_)>(
          reinterpret_cast<char*>(&_impl_.encoder_),
          reinterpret_cast<char*>(&other->_impl_.encoder_));
}

::google::protobuf::Metadata Conveyor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[27]);
}
// ===================================================================

class ConveyorState::_Internal {
 public:
};

ConveyorState::ConveyorState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ConveyorState)
}
ConveyorState::ConveyorState(const ConveyorState& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ConveyorState)
}
inline void ConveyorState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.velocity_){0},
      decltype(_impl_.triggered_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
ConveyorState::~ConveyorState() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ConveyorState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ConveyorState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void ConveyorState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ConveyorState::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ConveyorState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.velocity_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.triggered_) -
      reinterpret_cast<char*>(&_impl_.velocity_)) + sizeof(_impl_.triggered_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ConveyorState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ConveyorState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ConveyorState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float triggered = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(ConveyorState, _impl_.triggered_)}},
    // float velocity = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(ConveyorState, _impl_.velocity_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float velocity = 1;
    {PROTOBUF_FIELD_OFFSET(ConveyorState, _impl_.velocity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float triggered = 2;
    {PROTOBUF_FIELD_OFFSET(ConveyorState, _impl_.triggered_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ConveyorState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ConveyorState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float velocity = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_velocity = this->_internal_velocity();
  ::uint32_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_velocity(), target);
  }

  // float triggered = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_triggered = this->_internal_triggered();
  ::uint32_t raw_triggered;
  memcpy(&raw_triggered, &tmp_triggered, sizeof(tmp_triggered));
  if (raw_triggered != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_triggered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ConveyorState)
  return target;
}

::size_t ConveyorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ConveyorState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float velocity = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_velocity = this->_internal_velocity();
  ::uint32_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    total_size += 5;
  }

  // float triggered = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_triggered = this->_internal_triggered();
  ::uint32_t raw_triggered;
  memcpy(&raw_triggered, &tmp_triggered, sizeof(tmp_triggered));
  if (raw_triggered != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ConveyorState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ConveyorState::MergeImpl
};
const ::google::protobuf::Message::ClassData*ConveyorState::GetClassData() const { return &_class_data_; }


void ConveyorState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ConveyorState*>(&to_msg);
  auto& from = static_cast<const ConveyorState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ConveyorState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_velocity = from._internal_velocity();
  ::uint32_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    _this->_internal_set_velocity(from._internal_velocity());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_triggered = from._internal_triggered();
  ::uint32_t raw_triggered;
  memcpy(&raw_triggered, &tmp_triggered, sizeof(tmp_triggered));
  if (raw_triggered != 0) {
    _this->_internal_set_triggered(from._internal_triggered());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConveyorState::CopyFrom(const ConveyorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ConveyorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ConveyorState::IsInitialized() const {
  return true;
}

void ConveyorState::InternalSwap(ConveyorState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConveyorState, _impl_.triggered_)
      + sizeof(ConveyorState::_impl_.triggered_)
      - PROTOBUF_FIELD_OFFSET(ConveyorState, _impl_.velocity_)>(
          reinterpret_cast<char*>(&_impl_.velocity_),
          reinterpret_cast<char*>(&other->_impl_.velocity_));
}

::google::protobuf::Metadata ConveyorState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[28]);
}
// ===================================================================

class AddPhotoneoCalibPointReq::_Internal {
 public:
};

AddPhotoneoCalibPointReq::AddPhotoneoCalibPointReq(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.AddPhotoneoCalibPointReq)
}
AddPhotoneoCalibPointReq::AddPhotoneoCalibPointReq(const AddPhotoneoCalibPointReq& from) : ::google::protobuf::Message() {
  AddPhotoneoCalibPointReq* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vision_name_){},
      decltype(_impl_.px_){},
      decltype(_impl_.py_){},
      decltype(_impl_.pz_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.vision_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.vision_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vision_name().empty()) {
    _this->_impl_.vision_name_.Set(from._internal_vision_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.px_, &from._impl_.px_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.pz_) -
    reinterpret_cast<char*>(&_impl_.px_)) + sizeof(_impl_.pz_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.AddPhotoneoCalibPointReq)
}
inline void AddPhotoneoCalibPointReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.vision_name_){},
      decltype(_impl_.px_){0},
      decltype(_impl_.py_){0},
      decltype(_impl_.pz_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.vision_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.vision_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AddPhotoneoCalibPointReq::~AddPhotoneoCalibPointReq() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.AddPhotoneoCalibPointReq)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddPhotoneoCalibPointReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vision_name_.Destroy();
}
void AddPhotoneoCalibPointReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AddPhotoneoCalibPointReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.AddPhotoneoCalibPointReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vision_name_.ClearToEmpty();
  ::memset(&_impl_.px_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.pz_) -
      reinterpret_cast<char*>(&_impl_.px_)) + sizeof(_impl_.pz_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AddPhotoneoCalibPointReq::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 63, 2> AddPhotoneoCalibPointReq::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AddPhotoneoCalibPointReq_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double pz = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(AddPhotoneoCalibPointReq, _impl_.pz_)}},
    // string vision_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AddPhotoneoCalibPointReq, _impl_.vision_name_)}},
    // double px = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(AddPhotoneoCalibPointReq, _impl_.px_)}},
    // double py = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(AddPhotoneoCalibPointReq, _impl_.py_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string vision_name = 1;
    {PROTOBUF_FIELD_OFFSET(AddPhotoneoCalibPointReq, _impl_.vision_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double px = 2;
    {PROTOBUF_FIELD_OFFSET(AddPhotoneoCalibPointReq, _impl_.px_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double py = 3;
    {PROTOBUF_FIELD_OFFSET(AddPhotoneoCalibPointReq, _impl_.py_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double pz = 4;
    {PROTOBUF_FIELD_OFFSET(AddPhotoneoCalibPointReq, _impl_.pz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\53\13\0\0\0\0\0\0"
    "Nrmk.IndyFramework.AddPhotoneoCalibPointReq"
    "vision_name"
  }},
};

::uint8_t* AddPhotoneoCalibPointReq::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.AddPhotoneoCalibPointReq)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string vision_name = 1;
  if (!this->_internal_vision_name().empty()) {
    const std::string& _s = this->_internal_vision_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.AddPhotoneoCalibPointReq.vision_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // double px = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_px = this->_internal_px();
  ::uint64_t raw_px;
  memcpy(&raw_px, &tmp_px, sizeof(tmp_px));
  if (raw_px != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_px(), target);
  }

  // double py = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_py = this->_internal_py();
  ::uint64_t raw_py;
  memcpy(&raw_py, &tmp_py, sizeof(tmp_py));
  if (raw_py != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_py(), target);
  }

  // double pz = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pz = this->_internal_pz();
  ::uint64_t raw_pz;
  memcpy(&raw_pz, &tmp_pz, sizeof(tmp_pz));
  if (raw_pz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_pz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.AddPhotoneoCalibPointReq)
  return target;
}

::size_t AddPhotoneoCalibPointReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.AddPhotoneoCalibPointReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vision_name = 1;
  if (!this->_internal_vision_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_vision_name());
  }

  // double px = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_px = this->_internal_px();
  ::uint64_t raw_px;
  memcpy(&raw_px, &tmp_px, sizeof(tmp_px));
  if (raw_px != 0) {
    total_size += 9;
  }

  // double py = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_py = this->_internal_py();
  ::uint64_t raw_py;
  memcpy(&raw_py, &tmp_py, sizeof(tmp_py));
  if (raw_py != 0) {
    total_size += 9;
  }

  // double pz = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pz = this->_internal_pz();
  ::uint64_t raw_pz;
  memcpy(&raw_pz, &tmp_pz, sizeof(tmp_pz));
  if (raw_pz != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AddPhotoneoCalibPointReq::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AddPhotoneoCalibPointReq::MergeImpl
};
const ::google::protobuf::Message::ClassData*AddPhotoneoCalibPointReq::GetClassData() const { return &_class_data_; }


void AddPhotoneoCalibPointReq::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AddPhotoneoCalibPointReq*>(&to_msg);
  auto& from = static_cast<const AddPhotoneoCalibPointReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.AddPhotoneoCalibPointReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vision_name().empty()) {
    _this->_internal_set_vision_name(from._internal_vision_name());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_px = from._internal_px();
  ::uint64_t raw_px;
  memcpy(&raw_px, &tmp_px, sizeof(tmp_px));
  if (raw_px != 0) {
    _this->_internal_set_px(from._internal_px());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_py = from._internal_py();
  ::uint64_t raw_py;
  memcpy(&raw_py, &tmp_py, sizeof(tmp_py));
  if (raw_py != 0) {
    _this->_internal_set_py(from._internal_py());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pz = from._internal_pz();
  ::uint64_t raw_pz;
  memcpy(&raw_pz, &tmp_pz, sizeof(tmp_pz));
  if (raw_pz != 0) {
    _this->_internal_set_pz(from._internal_pz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddPhotoneoCalibPointReq::CopyFrom(const AddPhotoneoCalibPointReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.AddPhotoneoCalibPointReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AddPhotoneoCalibPointReq::IsInitialized() const {
  return true;
}

void AddPhotoneoCalibPointReq::InternalSwap(AddPhotoneoCalibPointReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.vision_name_, lhs_arena,
                                       &other->_impl_.vision_name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPhotoneoCalibPointReq, _impl_.pz_)
      + sizeof(AddPhotoneoCalibPointReq::_impl_.pz_)
      - PROTOBUF_FIELD_OFFSET(AddPhotoneoCalibPointReq, _impl_.px_)>(
          reinterpret_cast<char*>(&_impl_.px_),
          reinterpret_cast<char*>(&other->_impl_.px_));
}

::google::protobuf::Metadata AddPhotoneoCalibPointReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[29]);
}
// ===================================================================

class VisionServer::_Internal {
 public:
};

VisionServer::VisionServer(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.VisionServer)
}
VisionServer::VisionServer(const VisionServer& from) : ::google::protobuf::Message() {
  VisionServer* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.ip_){},
      decltype(_impl_.vision_server_type_){},
      decltype(_impl_.port_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.vision_server_type_, &from._impl_.vision_server_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.port_) -
    reinterpret_cast<char*>(&_impl_.vision_server_type_)) + sizeof(_impl_.port_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.VisionServer)
}
inline void VisionServer::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.ip_){},
      decltype(_impl_.vision_server_type_){0},
      decltype(_impl_.port_){0u},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
VisionServer::~VisionServer() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.VisionServer)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VisionServer::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.ip_.Destroy();
}
void VisionServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void VisionServer::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.VisionServer)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  ::memset(&_impl_.vision_server_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.port_) -
      reinterpret_cast<char*>(&_impl_.vision_server_type_)) + sizeof(_impl_.port_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VisionServer::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 46, 2> VisionServer::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VisionServer_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 port = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VisionServer, _impl_.port_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(VisionServer, _impl_.port_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VisionServer, _impl_.name_)}},
    // .Nrmk.IndyFramework.VisionServer.VisionServerType vision_server_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VisionServer, _impl_.vision_server_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VisionServer, _impl_.vision_server_type_)}},
    // string ip = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(VisionServer, _impl_.ip_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(VisionServer, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .Nrmk.IndyFramework.VisionServer.VisionServerType vision_server_type = 2;
    {PROTOBUF_FIELD_OFFSET(VisionServer, _impl_.vision_server_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string ip = 3;
    {PROTOBUF_FIELD_OFFSET(VisionServer, _impl_.ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 port = 4;
    {PROTOBUF_FIELD_OFFSET(VisionServer, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\37\4\0\2\0\0\0\0"
    "Nrmk.IndyFramework.VisionServer"
    "name"
    "ip"
  }},
};

::uint8_t* VisionServer::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.VisionServer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.VisionServer.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .Nrmk.IndyFramework.VisionServer.VisionServerType vision_server_type = 2;
  if (this->_internal_vision_server_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_vision_server_type(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    const std::string& _s = this->_internal_ip();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.VisionServer.ip");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.VisionServer)
  return target;
}

::size_t VisionServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.VisionServer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ip());
  }

  // .Nrmk.IndyFramework.VisionServer.VisionServerType vision_server_type = 2;
  if (this->_internal_vision_server_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_vision_server_type());
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VisionServer::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    VisionServer::MergeImpl
};
const ::google::protobuf::Message::ClassData*VisionServer::GetClassData() const { return &_class_data_; }


void VisionServer::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VisionServer*>(&to_msg);
  auto& from = static_cast<const VisionServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.VisionServer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_vision_server_type() != 0) {
    _this->_internal_set_vision_server_type(from._internal_vision_server_type());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VisionServer::CopyFrom(const VisionServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.VisionServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VisionServer::IsInitialized() const {
  return true;
}

void VisionServer::InternalSwap(VisionServer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, lhs_arena,
                                       &other->_impl_.ip_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionServer, _impl_.port_)
      + sizeof(VisionServer::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(VisionServer, _impl_.vision_server_type_)>(
          reinterpret_cast<char*>(&_impl_.vision_server_type_),
          reinterpret_cast<char*>(&other->_impl_.vision_server_type_));
}

::google::protobuf::Metadata VisionServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[30]);
}
// ===================================================================

class VisionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<VisionRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VisionRequest, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::VisionServer& vision_server(const VisionRequest* msg);
  static void set_has_vision_server(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::VisionServer& VisionRequest::_Internal::vision_server(const VisionRequest* msg) {
  return *msg->_impl_.vision_server_;
}
VisionRequest::VisionRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.VisionRequest)
}
VisionRequest::VisionRequest(const VisionRequest& from) : ::google::protobuf::Message() {
  VisionRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.object_){},
      decltype(_impl_.vision_server_){nullptr},
      decltype(_impl_.frame_type_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.object_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object().empty()) {
    _this->_impl_.object_.Set(from._internal_object(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.vision_server_ = new ::Nrmk::IndyFramework::VisionServer(*from._impl_.vision_server_);
  }
  _this->_impl_.frame_type_ = from._impl_.frame_type_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.VisionRequest)
}
inline void VisionRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.object_){},
      decltype(_impl_.vision_server_){nullptr},
      decltype(_impl_.frame_type_){0},
  };
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.object_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
VisionRequest::~VisionRequest() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.VisionRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VisionRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_.Destroy();
  if (this != internal_default_instance()) delete _impl_.vision_server_;
}
void VisionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void VisionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.VisionRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.vision_server_ != nullptr);
    _impl_.vision_server_->Clear();
  }
  _impl_.frame_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VisionRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 47, 2> VisionRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VisionRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VisionRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Nrmk.IndyFramework.VisionServer vision_server = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(VisionRequest, _impl_.vision_server_)}},
    // string object = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(VisionRequest, _impl_.object_)}},
    // .Nrmk.IndyFramework.VisionFrameType frame_type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VisionRequest, _impl_.frame_type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(VisionRequest, _impl_.frame_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.VisionServer vision_server = 1;
    {PROTOBUF_FIELD_OFFSET(VisionRequest, _impl_.vision_server_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string object = 2;
    {PROTOBUF_FIELD_OFFSET(VisionRequest, _impl_.object_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .Nrmk.IndyFramework.VisionFrameType frame_type = 3;
    {PROTOBUF_FIELD_OFFSET(VisionRequest, _impl_.frame_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::VisionServer>()},
  }}, {{
    "\40\0\6\0\0\0\0\0"
    "Nrmk.IndyFramework.VisionRequest"
    "object"
  }},
};

::uint8_t* VisionRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.VisionRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.VisionServer vision_server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vision_server(this),
        _Internal::vision_server(this).GetCachedSize(), target, stream);
  }

  // string object = 2;
  if (!this->_internal_object().empty()) {
    const std::string& _s = this->_internal_object();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.VisionRequest.object");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .Nrmk.IndyFramework.VisionFrameType frame_type = 3;
  if (this->_internal_frame_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_frame_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.VisionRequest)
  return target;
}

::size_t VisionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.VisionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object = 2;
  if (!this->_internal_object().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_object());
  }

  // .Nrmk.IndyFramework.VisionServer vision_server = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.vision_server_);
  }

  // .Nrmk.IndyFramework.VisionFrameType frame_type = 3;
  if (this->_internal_frame_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_frame_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VisionRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    VisionRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*VisionRequest::GetClassData() const { return &_class_data_; }


void VisionRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VisionRequest*>(&to_msg);
  auto& from = static_cast<const VisionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.VisionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_object().empty()) {
    _this->_internal_set_object(from._internal_object());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_vision_server()->::Nrmk::IndyFramework::VisionServer::MergeFrom(
        from._internal_vision_server());
  }
  if (from._internal_frame_type() != 0) {
    _this->_internal_set_frame_type(from._internal_frame_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VisionRequest::CopyFrom(const VisionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.VisionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VisionRequest::IsInitialized() const {
  return true;
}

void VisionRequest::InternalSwap(VisionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.object_, lhs_arena,
                                       &other->_impl_.object_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionRequest, _impl_.frame_type_)
      + sizeof(VisionRequest::_impl_.frame_type_)
      - PROTOBUF_FIELD_OFFSET(VisionRequest, _impl_.vision_server_)>(
          reinterpret_cast<char*>(&_impl_.vision_server_),
          reinterpret_cast<char*>(&other->_impl_.vision_server_));
}

::google::protobuf::Metadata VisionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[31]);
}
// ===================================================================

class VisionResult::_Internal {
 public:
};

VisionResult::VisionResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.VisionResult)
}
VisionResult::VisionResult(const VisionResult& from) : ::google::protobuf::Message() {
  VisionResult* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.frame_){from._impl_.frame_},
      decltype(_impl_.object_){},
      decltype(_impl_.msg_){},
      decltype(_impl_.frame_type_){},
      decltype(_impl_.detected_){},
      decltype(_impl_.passed_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.object_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object().empty()) {
    _this->_impl_.object_.Set(from._internal_object(), _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.frame_type_, &from._impl_.frame_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.passed_) -
    reinterpret_cast<char*>(&_impl_.frame_type_)) + sizeof(_impl_.passed_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.VisionResult)
}
inline void VisionResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.frame_){arena},
      decltype(_impl_.object_){},
      decltype(_impl_.msg_){},
      decltype(_impl_.frame_type_){0},
      decltype(_impl_.detected_){false},
      decltype(_impl_.passed_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.object_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
VisionResult::~VisionResult() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.VisionResult)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VisionResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.frame_.~RepeatedField();
  _impl_.object_.Destroy();
  _impl_.msg_.Destroy();
}
void VisionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void VisionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.VisionResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_frame()->Clear();
  _impl_.object_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  ::memset(&_impl_.frame_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.passed_) -
      reinterpret_cast<char*>(&_impl_.frame_type_)) + sizeof(_impl_.passed_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VisionResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 49, 7> VisionResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    100, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VisionResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated float frame = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VisionResult, _impl_.frame_)}},
    // .Nrmk.IndyFramework.VisionFrameType frame_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VisionResult, _impl_.frame_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VisionResult, _impl_.frame_type_)}},
    // string object = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(VisionResult, _impl_.object_)}},
    // bool detected = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(VisionResult, _impl_.detected_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(VisionResult, _impl_.detected_)}},
    // bool passed = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(VisionResult, _impl_.passed_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(VisionResult, _impl_.passed_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 5,
    65535, 65535
  }}, {{
    // repeated float frame = 1;
    {PROTOBUF_FIELD_OFFSET(VisionResult, _impl_.frame_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // .Nrmk.IndyFramework.VisionFrameType frame_type = 2;
    {PROTOBUF_FIELD_OFFSET(VisionResult, _impl_.frame_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string object = 3;
    {PROTOBUF_FIELD_OFFSET(VisionResult, _impl_.object_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool detected = 4;
    {PROTOBUF_FIELD_OFFSET(VisionResult, _impl_.detected_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool passed = 5;
    {PROTOBUF_FIELD_OFFSET(VisionResult, _impl_.passed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string msg = 100;
    {PROTOBUF_FIELD_OFFSET(VisionResult, _impl_.msg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\37\0\0\6\0\0\3\0"
    "Nrmk.IndyFramework.VisionResult"
    "object"
    "msg"
  }},
};

::uint8_t* VisionResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.VisionResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated float frame = 1;
  if (this->_internal_frame_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_frame(), target);
  }

  // .Nrmk.IndyFramework.VisionFrameType frame_type = 2;
  if (this->_internal_frame_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_frame_type(), target);
  }

  // string object = 3;
  if (!this->_internal_object().empty()) {
    const std::string& _s = this->_internal_object();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.VisionResult.object");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool detected = 4;
  if (this->_internal_detected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_detected(), target);
  }

  // bool passed = 5;
  if (this->_internal_passed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_passed(), target);
  }

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.VisionResult.msg");
    target = stream->WriteStringMaybeAliased(100, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.VisionResult)
  return target;
}

::size_t VisionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.VisionResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float frame = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_frame_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string object = 3;
  if (!this->_internal_object().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_object());
  }

  // string msg = 100;
  if (!this->_internal_msg().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  // .Nrmk.IndyFramework.VisionFrameType frame_type = 2;
  if (this->_internal_frame_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_frame_type());
  }

  // bool detected = 4;
  if (this->_internal_detected() != 0) {
    total_size += 2;
  }

  // bool passed = 5;
  if (this->_internal_passed() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VisionResult::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    VisionResult::MergeImpl
};
const ::google::protobuf::Message::ClassData*VisionResult::GetClassData() const { return &_class_data_; }


void VisionResult::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VisionResult*>(&to_msg);
  auto& from = static_cast<const VisionResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.VisionResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_frame()->MergeFrom(from._internal_frame());
  if (!from._internal_object().empty()) {
    _this->_internal_set_object(from._internal_object());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_frame_type() != 0) {
    _this->_internal_set_frame_type(from._internal_frame_type());
  }
  if (from._internal_detected() != 0) {
    _this->_internal_set_detected(from._internal_detected());
  }
  if (from._internal_passed() != 0) {
    _this->_internal_set_passed(from._internal_passed());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VisionResult::CopyFrom(const VisionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.VisionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VisionResult::IsInitialized() const {
  return true;
}

void VisionResult::InternalSwap(VisionResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.frame_.InternalSwap(&other->_impl_.frame_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.object_, lhs_arena,
                                       &other->_impl_.object_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionResult, _impl_.passed_)
      + sizeof(VisionResult::_impl_.passed_)
      - PROTOBUF_FIELD_OFFSET(VisionResult, _impl_.frame_type_)>(
          reinterpret_cast<char*>(&_impl_.frame_type_),
          reinterpret_cast<char*>(&other->_impl_.frame_type_));
}

::google::protobuf::Metadata VisionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[32]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
