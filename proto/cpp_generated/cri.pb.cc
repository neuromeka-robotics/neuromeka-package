// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cri.proto

#include "cri.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Nrmk {
namespace IndyFramework {
        template <typename>
PROTOBUF_CONSTEXPR Account::Account(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.email_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.token_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountDefaultTypeInternal() {}
  union {
    Account _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountDefaultTypeInternal _Account_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CriTarget::CriTarget(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.pn_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.fn_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.rn_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.iso_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CriTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CriTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CriTargetDefaultTypeInternal() {}
  union {
    CriTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CriTargetDefaultTypeInternal _CriTarget_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CriData::CriData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.time_)*/ 0,
      /*decltype(_impl_.cri_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CriDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CriDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CriDataDefaultTypeInternal() {}
  union {
    CriData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CriDataDefaultTypeInternal _CriData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ProjectList::ProjectList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.list_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ProjectListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectListDefaultTypeInternal() {}
  union {
    ProjectList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectListDefaultTypeInternal _ProjectList_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
static ::_pb::Metadata file_level_metadata_cri_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cri_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cri_2eproto = nullptr;
const ::uint32_t TableStruct_cri_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Account, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Account, _impl_.email_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Account, _impl_.token_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CriTarget, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CriTarget, _impl_.pn_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CriTarget, _impl_.fn_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CriTarget, _impl_.rn_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CriTarget, _impl_.iso_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CriData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CriData, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::CriData, _impl_.cri_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProjectList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProjectList, _impl_.list_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Nrmk::IndyFramework::Account)},
        {10, -1, -1, sizeof(::Nrmk::IndyFramework::CriTarget)},
        {22, -1, -1, sizeof(::Nrmk::IndyFramework::CriData)},
        {32, -1, -1, sizeof(::Nrmk::IndyFramework::ProjectList)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::Nrmk::IndyFramework::_Account_default_instance_._instance,
    &::Nrmk::IndyFramework::_CriTarget_default_instance_._instance,
    &::Nrmk::IndyFramework::_CriData_default_instance_._instance,
    &::Nrmk::IndyFramework::_ProjectList_default_instance_._instance,
};
const char descriptor_table_protodef_cri_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\tcri.proto\022\022Nrmk.IndyFramework\032\021common_"
    "msgs.proto\"\'\n\007Account\022\r\n\005email\030\001 \001(\t\022\r\n\005"
    "token\030\002 \001(\t\"<\n\tCriTarget\022\n\n\002pn\030\001 \001(\t\022\n\n\002"
    "fn\030\002 \001(\t\022\n\n\002rn\030\003 \001(\t\022\013\n\003iso\030\004 \001(\010\"$\n\007Cri"
    "Data\022\014\n\004time\030\001 \001(\001\022\013\n\003cri\030\002 \001(\001\"\033\n\013Proje"
    "ctList\022\014\n\004list\030\001 \001(\t2\303\004\n\003CRI\022H\n\013SetActiv"
    "ate\022\031.Nrmk.IndyFramework.State\032\034.Nrmk.In"
    "dyFramework.Response\"\000\022D\n\nIsActivate\022\031.N"
    "rmk.IndyFramework.Empty\032\031.Nrmk.IndyFrame"
    "work.State\"\000\022D\n\005Login\022\033.Nrmk.IndyFramewo"
    "rk.Account\032\034.Nrmk.IndyFramework.Response"
    "\"\000\022A\n\007IsLogin\022\031.Nrmk.IndyFramework.Empty"
    "\032\031.Nrmk.IndyFramework.State\"\000\022J\n\tSetTarg"
    "et\022\035.Nrmk.IndyFramework.CriTarget\032\034.Nrmk"
    ".IndyFramework.Response\"\000\022F\n\tSetOption\022\031"
    ".Nrmk.IndyFramework.State\032\034.Nrmk.IndyFra"
    "mework.Response\"\000\022K\n\013GetProjList\022\031.Nrmk."
    "IndyFramework.Empty\032\037.Nrmk.IndyFramework"
    ".ProjectList\"\000\022B\n\006GetCRI\022\031.Nrmk.IndyFram"
    "ework.Empty\032\033.Nrmk.IndyFramework.CriData"
    "\"\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cri_2eproto_deps[1] =
    {
        &::descriptor_table_common_5fmsgs_2eproto,
};
static ::absl::once_flag descriptor_table_cri_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cri_2eproto = {
    false,
    false,
    810,
    descriptor_table_protodef_cri_2eproto,
    "cri.proto",
    &descriptor_table_cri_2eproto_once,
    descriptor_table_cri_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_cri_2eproto::offsets,
    file_level_metadata_cri_2eproto,
    file_level_enum_descriptors_cri_2eproto,
    file_level_service_descriptors_cri_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cri_2eproto_getter() {
  return &descriptor_table_cri_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cri_2eproto(&descriptor_table_cri_2eproto);
namespace Nrmk {
namespace IndyFramework {
// ===================================================================

class Account::_Internal {
 public:
};

Account::Account(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.Account)
}
Account::Account(const Account& from) : ::google::protobuf::Message() {
  Account* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){},
      decltype(_impl_.token_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.email_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.Account)
}
inline void Account::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){},
      decltype(_impl_.token_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.email_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Account::~Account() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.Account)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Account::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
  _impl_.token_.Destroy();
}
void Account::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.Account)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_.ClearToEmpty();
  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Account::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 45, 2> Account::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Account_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string token = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Account, _impl_.token_)}},
    // string email = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Account, _impl_.email_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string email = 1;
    {PROTOBUF_FIELD_OFFSET(Account, _impl_.email_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string token = 2;
    {PROTOBUF_FIELD_OFFSET(Account, _impl_.token_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\32\5\5\0\0\0\0\0"
    "Nrmk.IndyFramework.Account"
    "email"
    "token"
  }},
};

::uint8_t* Account::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.Account)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    const std::string& _s = this->_internal_email();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.Account.email");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    const std::string& _s = this->_internal_token();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.Account.token");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.Account)
  return target;
}

::size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.Account)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_email());
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Account::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Account::MergeImpl
};
const ::google::protobuf::Message::ClassData*Account::GetClassData() const { return &_class_data_; }


void Account::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Account*>(&to_msg);
  auto& from = static_cast<const Account&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.Account)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_, lhs_arena,
                                       &other->_impl_.email_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.token_, lhs_arena,
                                       &other->_impl_.token_, rhs_arena);
}

::google::protobuf::Metadata Account::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cri_2eproto_getter, &descriptor_table_cri_2eproto_once,
      file_level_metadata_cri_2eproto[0]);
}
// ===================================================================

class CriTarget::_Internal {
 public:
};

CriTarget::CriTarget(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CriTarget)
}
CriTarget::CriTarget(const CriTarget& from) : ::google::protobuf::Message() {
  CriTarget* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pn_){},
      decltype(_impl_.fn_){},
      decltype(_impl_.rn_){},
      decltype(_impl_.iso_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.pn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pn_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pn().empty()) {
    _this->_impl_.pn_.Set(from._internal_pn(), _this->GetArenaForAllocation());
  }
  _impl_.fn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fn_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fn().empty()) {
    _this->_impl_.fn_.Set(from._internal_fn(), _this->GetArenaForAllocation());
  }
  _impl_.rn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rn_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rn().empty()) {
    _this->_impl_.rn_.Set(from._internal_rn(), _this->GetArenaForAllocation());
  }
  _this->_impl_.iso_ = from._impl_.iso_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CriTarget)
}
inline void CriTarget::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.pn_){},
      decltype(_impl_.fn_){},
      decltype(_impl_.rn_){},
      decltype(_impl_.iso_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.pn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pn_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fn_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rn_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CriTarget::~CriTarget() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CriTarget)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CriTarget::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pn_.Destroy();
  _impl_.fn_.Destroy();
  _impl_.rn_.Destroy();
}
void CriTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CriTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CriTarget)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pn_.ClearToEmpty();
  _impl_.fn_.ClearToEmpty();
  _impl_.rn_.ClearToEmpty();
  _impl_.iso_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CriTarget::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 43, 2> CriTarget::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CriTarget_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool iso = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CriTarget, _impl_.iso_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(CriTarget, _impl_.iso_)}},
    // string pn = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CriTarget, _impl_.pn_)}},
    // string fn = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CriTarget, _impl_.fn_)}},
    // string rn = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CriTarget, _impl_.rn_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string pn = 1;
    {PROTOBUF_FIELD_OFFSET(CriTarget, _impl_.pn_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string fn = 2;
    {PROTOBUF_FIELD_OFFSET(CriTarget, _impl_.fn_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string rn = 3;
    {PROTOBUF_FIELD_OFFSET(CriTarget, _impl_.rn_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool iso = 4;
    {PROTOBUF_FIELD_OFFSET(CriTarget, _impl_.iso_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\34\2\2\2\0\0\0\0"
    "Nrmk.IndyFramework.CriTarget"
    "pn"
    "fn"
    "rn"
  }},
};

::uint8_t* CriTarget::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CriTarget)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string pn = 1;
  if (!this->_internal_pn().empty()) {
    const std::string& _s = this->_internal_pn();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.CriTarget.pn");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string fn = 2;
  if (!this->_internal_fn().empty()) {
    const std::string& _s = this->_internal_fn();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.CriTarget.fn");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string rn = 3;
  if (!this->_internal_rn().empty()) {
    const std::string& _s = this->_internal_rn();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.CriTarget.rn");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool iso = 4;
  if (this->_internal_iso() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_iso(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CriTarget)
  return target;
}

::size_t CriTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CriTarget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pn = 1;
  if (!this->_internal_pn().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_pn());
  }

  // string fn = 2;
  if (!this->_internal_fn().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_fn());
  }

  // string rn = 3;
  if (!this->_internal_rn().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_rn());
  }

  // bool iso = 4;
  if (this->_internal_iso() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CriTarget::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CriTarget::MergeImpl
};
const ::google::protobuf::Message::ClassData*CriTarget::GetClassData() const { return &_class_data_; }


void CriTarget::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CriTarget*>(&to_msg);
  auto& from = static_cast<const CriTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CriTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pn().empty()) {
    _this->_internal_set_pn(from._internal_pn());
  }
  if (!from._internal_fn().empty()) {
    _this->_internal_set_fn(from._internal_fn());
  }
  if (!from._internal_rn().empty()) {
    _this->_internal_set_rn(from._internal_rn());
  }
  if (from._internal_iso() != 0) {
    _this->_internal_set_iso(from._internal_iso());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CriTarget::CopyFrom(const CriTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CriTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CriTarget::IsInitialized() const {
  return true;
}

void CriTarget::InternalSwap(CriTarget* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pn_, lhs_arena,
                                       &other->_impl_.pn_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fn_, lhs_arena,
                                       &other->_impl_.fn_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rn_, lhs_arena,
                                       &other->_impl_.rn_, rhs_arena);
        swap(_impl_.iso_, other->_impl_.iso_);
}

::google::protobuf::Metadata CriTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cri_2eproto_getter, &descriptor_table_cri_2eproto_once,
      file_level_metadata_cri_2eproto[1]);
}
// ===================================================================

class CriData::_Internal {
 public:
};

CriData::CriData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.CriData)
}
CriData::CriData(const CriData& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.CriData)
}
inline void CriData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){0},
      decltype(_impl_.cri_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
CriData::~CriData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.CriData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CriData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CriData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CriData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.CriData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cri_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.cri_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CriData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> CriData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CriData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double cri = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(CriData, _impl_.cri_)}},
    // double time = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(CriData, _impl_.time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double time = 1;
    {PROTOBUF_FIELD_OFFSET(CriData, _impl_.time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double cri = 2;
    {PROTOBUF_FIELD_OFFSET(CriData, _impl_.cri_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CriData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.CriData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double time = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_time(), target);
  }

  // double cri = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_cri = this->_internal_cri();
  ::uint64_t raw_cri;
  memcpy(&raw_cri, &tmp_cri, sizeof(tmp_cri));
  if (raw_cri != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_cri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.CriData)
  return target;
}

::size_t CriData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.CriData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double time = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 9;
  }

  // double cri = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_cri = this->_internal_cri();
  ::uint64_t raw_cri;
  memcpy(&raw_cri, &tmp_cri, sizeof(tmp_cri));
  if (raw_cri != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CriData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CriData::MergeImpl
};
const ::google::protobuf::Message::ClassData*CriData::GetClassData() const { return &_class_data_; }


void CriData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CriData*>(&to_msg);
  auto& from = static_cast<const CriData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.CriData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = from._internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_cri = from._internal_cri();
  ::uint64_t raw_cri;
  memcpy(&raw_cri, &tmp_cri, sizeof(tmp_cri));
  if (raw_cri != 0) {
    _this->_internal_set_cri(from._internal_cri());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CriData::CopyFrom(const CriData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.CriData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CriData::IsInitialized() const {
  return true;
}

void CriData::InternalSwap(CriData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CriData, _impl_.cri_)
      + sizeof(CriData::_impl_.cri_)
      - PROTOBUF_FIELD_OFFSET(CriData, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata CriData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cri_2eproto_getter, &descriptor_table_cri_2eproto_once,
      file_level_metadata_cri_2eproto[2]);
}
// ===================================================================

class ProjectList::_Internal {
 public:
};

ProjectList::ProjectList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.ProjectList)
}
ProjectList::ProjectList(const ProjectList& from) : ::google::protobuf::Message() {
  ProjectList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.list_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.list_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_list().empty()) {
    _this->_impl_.list_.Set(from._internal_list(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ProjectList)
}
inline void ProjectList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.list_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.list_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ProjectList::~ProjectList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ProjectList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ProjectList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.Destroy();
}
void ProjectList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ProjectList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ProjectList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ProjectList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 43, 2> ProjectList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ProjectList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string list = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ProjectList, _impl_.list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string list = 1;
    {PROTOBUF_FIELD_OFFSET(ProjectList, _impl_.list_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\36\4\0\0\0\0\0\0"
    "Nrmk.IndyFramework.ProjectList"
    "list"
  }},
};

::uint8_t* ProjectList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ProjectList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string list = 1;
  if (!this->_internal_list().empty()) {
    const std::string& _s = this->_internal_list();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.ProjectList.list");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ProjectList)
  return target;
}

::size_t ProjectList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ProjectList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string list = 1;
  if (!this->_internal_list().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_list());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ProjectList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ProjectList::MergeImpl
};
const ::google::protobuf::Message::ClassData*ProjectList::GetClassData() const { return &_class_data_; }


void ProjectList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ProjectList*>(&to_msg);
  auto& from = static_cast<const ProjectList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ProjectList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_list().empty()) {
    _this->_internal_set_list(from._internal_list());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectList::CopyFrom(const ProjectList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ProjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ProjectList::IsInitialized() const {
  return true;
}

void ProjectList::InternalSwap(ProjectList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.list_, lhs_arena,
                                       &other->_impl_.list_, rhs_arena);
}

::google::protobuf::Metadata ProjectList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cri_2eproto_getter, &descriptor_table_cri_2eproto_once,
      file_level_metadata_cri_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
