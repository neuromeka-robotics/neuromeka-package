// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ethercat.proto

#include "ethercat.pb.h"
#include "ethercat.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace Nrmk {
namespace IndyFramework {

static const char* EtherCAT_method_names[] = {
  "/Nrmk.IndyFramework.EtherCAT/GetMasterStatus",
  "/Nrmk.IndyFramework.EtherCAT/GetSlaveStatus",
  "/Nrmk.IndyFramework.EtherCAT/GetRxDomainStatus",
  "/Nrmk.IndyFramework.EtherCAT/GetTxDomainStatus",
  "/Nrmk.IndyFramework.EtherCAT/IsSystemReady",
  "/Nrmk.IndyFramework.EtherCAT/IsServoOn",
  "/Nrmk.IndyFramework.EtherCAT/GetSlaveTypeNum",
  "/Nrmk.IndyFramework.EtherCAT/ResetOverflowCount",
  "/Nrmk.IndyFramework.EtherCAT/SetServoRx",
  "/Nrmk.IndyFramework.EtherCAT/GetServoRx",
  "/Nrmk.IndyFramework.EtherCAT/GetServoTx",
  "/Nrmk.IndyFramework.EtherCAT/SetServoRxKeba",
  "/Nrmk.IndyFramework.EtherCAT/GetServoRxKeba",
  "/Nrmk.IndyFramework.EtherCAT/GetServoTxKeba",
  "/Nrmk.IndyFramework.EtherCAT/SetServoOn",
  "/Nrmk.IndyFramework.EtherCAT/SetServoOff",
  "/Nrmk.IndyFramework.EtherCAT/GetServoTemperature",
  "/Nrmk.IndyFramework.EtherCAT/GetServoErrorCode",
  "/Nrmk.IndyFramework.EtherCAT/ResetServo",
  "/Nrmk.IndyFramework.EtherCAT/SetCOREManualBrake",
  "/Nrmk.IndyFramework.EtherCAT/SetEndtoolRx",
  "/Nrmk.IndyFramework.EtherCAT/GetEndtoolRx",
  "/Nrmk.IndyFramework.EtherCAT/GetEndtoolTx",
  "/Nrmk.IndyFramework.EtherCAT/GetEndtoolDockingTx",
  "/Nrmk.IndyFramework.EtherCAT/SetEndtoolRS485Rx",
  "/Nrmk.IndyFramework.EtherCAT/GetEndtoolRS485Rx",
  "/Nrmk.IndyFramework.EtherCAT/GetEndtoolRS485Tx",
  "/Nrmk.IndyFramework.EtherCAT/SetEndtoolLedDim",
  "/Nrmk.IndyFramework.EtherCAT/SetSRKeyEndtoolRx",
  "/Nrmk.IndyFramework.EtherCAT/GetSRKeyEndtoolRx",
  "/Nrmk.IndyFramework.EtherCAT/GetSRKeyEndtoolTx",
  "/Nrmk.IndyFramework.EtherCAT/SetIOBoardRx",
  "/Nrmk.IndyFramework.EtherCAT/GetIOBoardTx",
  "/Nrmk.IndyFramework.EtherCAT/GetIOBoardRx",
  "/Nrmk.IndyFramework.EtherCAT/GetDI",
  "/Nrmk.IndyFramework.EtherCAT/GetDO",
  "/Nrmk.IndyFramework.EtherCAT/SetDO",
  "/Nrmk.IndyFramework.EtherCAT/GetMaxTorqueSDO",
  "/Nrmk.IndyFramework.EtherCAT/GetProfileVelSDO",
  "/Nrmk.IndyFramework.EtherCAT/GetProfileAccSDO",
  "/Nrmk.IndyFramework.EtherCAT/GetProfileDecSDO",
  "/Nrmk.IndyFramework.EtherCAT/SetMaxTorqueSDO",
  "/Nrmk.IndyFramework.EtherCAT/SetProfileVelSDO",
  "/Nrmk.IndyFramework.EtherCAT/SetProfileAccSDO",
  "/Nrmk.IndyFramework.EtherCAT/SetProfileDecSDO",
  "/Nrmk.IndyFramework.EtherCAT/GetRobotZeroCount",
  "/Nrmk.IndyFramework.EtherCAT/SetRobotZeroAsCurrent",
};

std::unique_ptr< EtherCAT::Stub> EtherCAT::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EtherCAT::Stub> stub(new EtherCAT::Stub(channel, options));
  return stub;
}

EtherCAT::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetMasterStatus_(EtherCAT_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSlaveStatus_(EtherCAT_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRxDomainStatus_(EtherCAT_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTxDomainStatus_(EtherCAT_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsSystemReady_(EtherCAT_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsServoOn_(EtherCAT_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSlaveTypeNum_(EtherCAT_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetOverflowCount_(EtherCAT_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetServoRx_(EtherCAT_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServoRx_(EtherCAT_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServoTx_(EtherCAT_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetServoRxKeba_(EtherCAT_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServoRxKeba_(EtherCAT_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServoTxKeba_(EtherCAT_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetServoOn_(EtherCAT_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetServoOff_(EtherCAT_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServoTemperature_(EtherCAT_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServoErrorCode_(EtherCAT_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetServo_(EtherCAT_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCOREManualBrake_(EtherCAT_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEndtoolRx_(EtherCAT_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEndtoolRx_(EtherCAT_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEndtoolTx_(EtherCAT_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEndtoolDockingTx_(EtherCAT_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEndtoolRS485Rx_(EtherCAT_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEndtoolRS485Rx_(EtherCAT_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEndtoolRS485Tx_(EtherCAT_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEndtoolLedDim_(EtherCAT_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSRKeyEndtoolRx_(EtherCAT_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSRKeyEndtoolRx_(EtherCAT_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSRKeyEndtoolTx_(EtherCAT_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetIOBoardRx_(EtherCAT_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIOBoardTx_(EtherCAT_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIOBoardRx_(EtherCAT_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDI_(EtherCAT_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDO_(EtherCAT_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDO_(EtherCAT_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMaxTorqueSDO_(EtherCAT_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProfileVelSDO_(EtherCAT_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProfileAccSDO_(EtherCAT_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProfileDecSDO_(EtherCAT_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMaxTorqueSDO_(EtherCAT_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetProfileVelSDO_(EtherCAT_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetProfileAccSDO_(EtherCAT_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetProfileDecSDO_(EtherCAT_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRobotZeroCount_(EtherCAT_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRobotZeroAsCurrent_(EtherCAT_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EtherCAT::Stub::GetMasterStatus(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::MasterStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::MasterStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMasterStatus_, context, request, response);
}

void EtherCAT::Stub::async::GetMasterStatus(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::MasterStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::MasterStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMasterStatus_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetMasterStatus(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::MasterStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMasterStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::MasterStatus>* EtherCAT::Stub::PrepareAsyncGetMasterStatusRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::MasterStatus, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMasterStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::MasterStatus>* EtherCAT::Stub::AsyncGetMasterStatusRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMasterStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetSlaveStatus(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::SlaveStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SlaveStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSlaveStatus_, context, request, response);
}

void EtherCAT::Stub::async::GetSlaveStatus(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SlaveStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SlaveStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlaveStatus_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetSlaveStatus(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SlaveStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlaveStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SlaveStatus>* EtherCAT::Stub::PrepareAsyncGetSlaveStatusRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::SlaveStatus, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSlaveStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SlaveStatus>* EtherCAT::Stub::AsyncGetSlaveStatusRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSlaveStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetRxDomainStatus(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::EcatDomainStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EcatDomainStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRxDomainStatus_, context, request, response);
}

void EtherCAT::Stub::async::GetRxDomainStatus(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EcatDomainStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EcatDomainStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRxDomainStatus_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetRxDomainStatus(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EcatDomainStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRxDomainStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EcatDomainStatus>* EtherCAT::Stub::PrepareAsyncGetRxDomainStatusRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::EcatDomainStatus, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRxDomainStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EcatDomainStatus>* EtherCAT::Stub::AsyncGetRxDomainStatusRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRxDomainStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetTxDomainStatus(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::EcatDomainStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EcatDomainStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTxDomainStatus_, context, request, response);
}

void EtherCAT::Stub::async::GetTxDomainStatus(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EcatDomainStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EcatDomainStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTxDomainStatus_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetTxDomainStatus(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EcatDomainStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTxDomainStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EcatDomainStatus>* EtherCAT::Stub::PrepareAsyncGetTxDomainStatusRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::EcatDomainStatus, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTxDomainStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EcatDomainStatus>* EtherCAT::Stub::AsyncGetTxDomainStatusRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTxDomainStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::IsSystemReady(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::EcatSystemReady* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EcatSystemReady, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsSystemReady_, context, request, response);
}

void EtherCAT::Stub::async::IsSystemReady(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EcatSystemReady* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EcatSystemReady, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsSystemReady_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::IsSystemReady(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EcatSystemReady* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsSystemReady_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EcatSystemReady>* EtherCAT::Stub::PrepareAsyncIsSystemReadyRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::EcatSystemReady, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsSystemReady_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EcatSystemReady>* EtherCAT::Stub::AsyncIsSystemReadyRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsSystemReadyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::IsServoOn(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::EcatServoOn* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EcatServoOn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsServoOn_, context, request, response);
}

void EtherCAT::Stub::async::IsServoOn(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EcatServoOn* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EcatServoOn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsServoOn_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::IsServoOn(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EcatServoOn* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsServoOn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EcatServoOn>* EtherCAT::Stub::PrepareAsyncIsServoOnRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::EcatServoOn, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsServoOn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EcatServoOn>* EtherCAT::Stub::AsyncIsServoOnRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsServoOnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetSlaveTypeNum(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::SlaveTypeNum* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SlaveTypeNum, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSlaveTypeNum_, context, request, response);
}

void EtherCAT::Stub::async::GetSlaveTypeNum(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SlaveTypeNum* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SlaveTypeNum, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlaveTypeNum_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetSlaveTypeNum(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SlaveTypeNum* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlaveTypeNum_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SlaveTypeNum>* EtherCAT::Stub::PrepareAsyncGetSlaveTypeNumRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::SlaveTypeNum, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSlaveTypeNum_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SlaveTypeNum>* EtherCAT::Stub::AsyncGetSlaveTypeNumRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSlaveTypeNumRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::ResetOverflowCount(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetOverflowCount_, context, request, response);
}

void EtherCAT::Stub::async::ResetOverflowCount(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetOverflowCount_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::ResetOverflowCount(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetOverflowCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncResetOverflowCountRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetOverflowCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncResetOverflowCountRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetOverflowCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetServoRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoRxIndex& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoRxIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetServoRx_, context, request, response);
}

void EtherCAT::Stub::async::SetServoRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoRxIndex* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoRxIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServoRx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetServoRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoRxIndex* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServoRx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetServoRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoRxIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ServoRxIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetServoRx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetServoRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoRxIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetServoRxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetServoRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::Nrmk::IndyFramework::ServoRx* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServoRx_, context, request, response);
}

void EtherCAT::Stub::async::GetServoRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoRx* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServoRx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetServoRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoRx* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServoRx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ServoRx>* EtherCAT::Stub::PrepareAsyncGetServoRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::ServoRx, ::Nrmk::IndyFramework::ServoIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServoRx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ServoRx>* EtherCAT::Stub::AsyncGetServoRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServoRxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetServoTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::Nrmk::IndyFramework::ServoTx* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServoTx_, context, request, response);
}

void EtherCAT::Stub::async::GetServoTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServoTx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetServoTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoTx* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServoTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ServoTx>* EtherCAT::Stub::PrepareAsyncGetServoTxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::ServoTx, ::Nrmk::IndyFramework::ServoIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServoTx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ServoTx>* EtherCAT::Stub::AsyncGetServoTxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServoTxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetServoRxKeba(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoRxIndexKeba& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoRxIndexKeba, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetServoRxKeba_, context, request, response);
}

void EtherCAT::Stub::async::SetServoRxKeba(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoRxIndexKeba* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoRxIndexKeba, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServoRxKeba_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetServoRxKeba(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoRxIndexKeba* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServoRxKeba_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetServoRxKebaRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoRxIndexKeba& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ServoRxIndexKeba, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetServoRxKeba_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetServoRxKebaRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoRxIndexKeba& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetServoRxKebaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetServoRxKeba(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::Nrmk::IndyFramework::ServoRxKeba* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoRxKeba, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServoRxKeba_, context, request, response);
}

void EtherCAT::Stub::async::GetServoRxKeba(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoRxKeba* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoRxKeba, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServoRxKeba_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetServoRxKeba(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoRxKeba* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServoRxKeba_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ServoRxKeba>* EtherCAT::Stub::PrepareAsyncGetServoRxKebaRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::ServoRxKeba, ::Nrmk::IndyFramework::ServoIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServoRxKeba_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ServoRxKeba>* EtherCAT::Stub::AsyncGetServoRxKebaRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServoRxKebaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetServoTxKeba(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::Nrmk::IndyFramework::ServoTxKeba* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoTxKeba, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServoTxKeba_, context, request, response);
}

void EtherCAT::Stub::async::GetServoTxKeba(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoTxKeba* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoTxKeba, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServoTxKeba_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetServoTxKeba(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoTxKeba* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServoTxKeba_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ServoTxKeba>* EtherCAT::Stub::PrepareAsyncGetServoTxKebaRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::ServoTxKeba, ::Nrmk::IndyFramework::ServoIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServoTxKeba_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ServoTxKeba>* EtherCAT::Stub::AsyncGetServoTxKebaRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServoTxKebaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetServoOn(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetServoOn_, context, request, response);
}

void EtherCAT::Stub::async::SetServoOn(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServoOn_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetServoOn(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServoOn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetServoOnRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ServoIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetServoOn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetServoOnRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetServoOnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetServoOff(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetServoOff_, context, request, response);
}

void EtherCAT::Stub::async::SetServoOff(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServoOff_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetServoOff(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServoOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetServoOffRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ServoIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetServoOff_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetServoOffRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetServoOffRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetServoTemperature(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::Nrmk::IndyFramework::ServoTemp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoTemp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServoTemperature_, context, request, response);
}

void EtherCAT::Stub::async::GetServoTemperature(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoTemp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoTemp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServoTemperature_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetServoTemperature(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoTemp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServoTemperature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ServoTemp>* EtherCAT::Stub::PrepareAsyncGetServoTemperatureRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::ServoTemp, ::Nrmk::IndyFramework::ServoIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServoTemperature_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ServoTemp>* EtherCAT::Stub::AsyncGetServoTemperatureRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServoTemperatureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetServoErrorCode(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::Nrmk::IndyFramework::ServoError* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoError, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServoErrorCode_, context, request, response);
}

void EtherCAT::Stub::async::GetServoErrorCode(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoError* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoError, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServoErrorCode_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetServoErrorCode(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoError* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServoErrorCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ServoError>* EtherCAT::Stub::PrepareAsyncGetServoErrorCodeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::ServoError, ::Nrmk::IndyFramework::ServoIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServoErrorCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::ServoError>* EtherCAT::Stub::AsyncGetServoErrorCodeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServoErrorCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::ResetServo(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetServo_, context, request, response);
}

void EtherCAT::Stub::async::ResetServo(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetServo_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::ResetServo(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetServo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncResetServoRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ServoIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetServo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncResetServoRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetServoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetCOREManualBrake(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoBrake& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoBrake, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCOREManualBrake_, context, request, response);
}

void EtherCAT::Stub::async::SetCOREManualBrake(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoBrake* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoBrake, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCOREManualBrake_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetCOREManualBrake(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoBrake* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCOREManualBrake_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetCOREManualBrakeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoBrake& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ServoBrake, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCOREManualBrake_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetCOREManualBrakeRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoBrake& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCOREManualBrakeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetEndtoolRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EndtoolRx& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::EndtoolRx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetEndtoolRx_, context, request, response);
}

void EtherCAT::Stub::async::SetEndtoolRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EndtoolRx* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::EndtoolRx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEndtoolRx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetEndtoolRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EndtoolRx* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEndtoolRx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetEndtoolRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EndtoolRx& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetEndtoolRx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetEndtoolRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EndtoolRx& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetEndtoolRxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetEndtoolRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::EndtoolRx* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEndtoolRx_, context, request, response);
}

void EtherCAT::Stub::async::GetEndtoolRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolRx* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEndtoolRx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetEndtoolRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolRx* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEndtoolRx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EndtoolRx>* EtherCAT::Stub::PrepareAsyncGetEndtoolRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::EndtoolRx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEndtoolRx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EndtoolRx>* EtherCAT::Stub::AsyncGetEndtoolRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEndtoolRxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetEndtoolTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::EndtoolTx* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEndtoolTx_, context, request, response);
}

void EtherCAT::Stub::async::GetEndtoolTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEndtoolTx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetEndtoolTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolTx* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEndtoolTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EndtoolTx>* EtherCAT::Stub::PrepareAsyncGetEndtoolTxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::EndtoolTx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEndtoolTx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EndtoolTx>* EtherCAT::Stub::AsyncGetEndtoolTxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEndtoolTxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetEndtoolDockingTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::EndtoolDockingTx* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolDockingTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEndtoolDockingTx_, context, request, response);
}

void EtherCAT::Stub::async::GetEndtoolDockingTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolDockingTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolDockingTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEndtoolDockingTx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetEndtoolDockingTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolDockingTx* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEndtoolDockingTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EndtoolDockingTx>* EtherCAT::Stub::PrepareAsyncGetEndtoolDockingTxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::EndtoolDockingTx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEndtoolDockingTx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EndtoolDockingTx>* EtherCAT::Stub::AsyncGetEndtoolDockingTxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEndtoolDockingTxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetEndtoolRS485Rx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EndtoolRS485Rx& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::EndtoolRS485Rx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetEndtoolRS485Rx_, context, request, response);
}

void EtherCAT::Stub::async::SetEndtoolRS485Rx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EndtoolRS485Rx* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::EndtoolRS485Rx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEndtoolRS485Rx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetEndtoolRS485Rx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EndtoolRS485Rx* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEndtoolRS485Rx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetEndtoolRS485RxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EndtoolRS485Rx& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolRS485Rx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetEndtoolRS485Rx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetEndtoolRS485RxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EndtoolRS485Rx& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetEndtoolRS485RxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetEndtoolRS485Rx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::EndtoolRS485Rx* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolRS485Rx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEndtoolRS485Rx_, context, request, response);
}

void EtherCAT::Stub::async::GetEndtoolRS485Rx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolRS485Rx* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolRS485Rx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEndtoolRS485Rx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetEndtoolRS485Rx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolRS485Rx* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEndtoolRS485Rx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EndtoolRS485Rx>* EtherCAT::Stub::PrepareAsyncGetEndtoolRS485RxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::EndtoolRS485Rx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEndtoolRS485Rx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EndtoolRS485Rx>* EtherCAT::Stub::AsyncGetEndtoolRS485RxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEndtoolRS485RxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetEndtoolRS485Tx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::EndtoolRS485Tx* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolRS485Tx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEndtoolRS485Tx_, context, request, response);
}

void EtherCAT::Stub::async::GetEndtoolRS485Tx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolRS485Tx* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolRS485Tx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEndtoolRS485Tx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetEndtoolRS485Tx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolRS485Tx* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEndtoolRS485Tx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EndtoolRS485Tx>* EtherCAT::Stub::PrepareAsyncGetEndtoolRS485TxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::EndtoolRS485Tx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEndtoolRS485Tx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::EndtoolRS485Tx>* EtherCAT::Stub::AsyncGetEndtoolRS485TxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEndtoolRS485TxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetEndtoolLedDim(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::LedDim& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::LedDim, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetEndtoolLedDim_, context, request, response);
}

void EtherCAT::Stub::async::SetEndtoolLedDim(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::LedDim* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::LedDim, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEndtoolLedDim_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetEndtoolLedDim(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::LedDim* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEndtoolLedDim_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetEndtoolLedDimRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::LedDim& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::LedDim, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetEndtoolLedDim_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetEndtoolLedDimRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::LedDim& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetEndtoolLedDimRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetSRKeyEndtoolRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SRKeyEndtoolRx& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::SRKeyEndtoolRx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSRKeyEndtoolRx_, context, request, response);
}

void EtherCAT::Stub::async::SetSRKeyEndtoolRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SRKeyEndtoolRx* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::SRKeyEndtoolRx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSRKeyEndtoolRx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetSRKeyEndtoolRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SRKeyEndtoolRx* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSRKeyEndtoolRx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetSRKeyEndtoolRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SRKeyEndtoolRx& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SRKeyEndtoolRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSRKeyEndtoolRx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetSRKeyEndtoolRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::SRKeyEndtoolRx& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSRKeyEndtoolRxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetSRKeyEndtoolRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::SRKeyEndtoolRx* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SRKeyEndtoolRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSRKeyEndtoolRx_, context, request, response);
}

void EtherCAT::Stub::async::GetSRKeyEndtoolRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SRKeyEndtoolRx* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SRKeyEndtoolRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSRKeyEndtoolRx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetSRKeyEndtoolRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SRKeyEndtoolRx* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSRKeyEndtoolRx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SRKeyEndtoolRx>* EtherCAT::Stub::PrepareAsyncGetSRKeyEndtoolRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::SRKeyEndtoolRx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSRKeyEndtoolRx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SRKeyEndtoolRx>* EtherCAT::Stub::AsyncGetSRKeyEndtoolRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSRKeyEndtoolRxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetSRKeyEndtoolTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::SRKeyEndtoolTx* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SRKeyEndtoolTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSRKeyEndtoolTx_, context, request, response);
}

void EtherCAT::Stub::async::GetSRKeyEndtoolTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SRKeyEndtoolTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SRKeyEndtoolTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSRKeyEndtoolTx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetSRKeyEndtoolTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SRKeyEndtoolTx* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSRKeyEndtoolTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SRKeyEndtoolTx>* EtherCAT::Stub::PrepareAsyncGetSRKeyEndtoolTxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::SRKeyEndtoolTx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSRKeyEndtoolTx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SRKeyEndtoolTx>* EtherCAT::Stub::AsyncGetSRKeyEndtoolTxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSRKeyEndtoolTxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetIOBoardRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IOBoardRx& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::IOBoardRx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetIOBoardRx_, context, request, response);
}

void EtherCAT::Stub::async::SetIOBoardRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IOBoardRx* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::IOBoardRx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetIOBoardRx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetIOBoardRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IOBoardRx* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetIOBoardRx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetIOBoardRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IOBoardRx& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::IOBoardRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetIOBoardRx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetIOBoardRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::IOBoardRx& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetIOBoardRxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetIOBoardTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::IOBoardTx* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::IOBoardTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIOBoardTx_, context, request, response);
}

void EtherCAT::Stub::async::GetIOBoardTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::IOBoardTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::IOBoardTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIOBoardTx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetIOBoardTx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::IOBoardTx* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIOBoardTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::IOBoardTx>* EtherCAT::Stub::PrepareAsyncGetIOBoardTxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::IOBoardTx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIOBoardTx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::IOBoardTx>* EtherCAT::Stub::AsyncGetIOBoardTxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIOBoardTxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetIOBoardRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::Nrmk::IndyFramework::IOBoardRx* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::IOBoardRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIOBoardRx_, context, request, response);
}

void EtherCAT::Stub::async::GetIOBoardRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::IOBoardRx* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::IOBoardRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIOBoardRx_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetIOBoardRx(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::IOBoardRx* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIOBoardRx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::IOBoardRx>* EtherCAT::Stub::PrepareAsyncGetIOBoardRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::IOBoardRx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIOBoardRx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::IOBoardRx>* EtherCAT::Stub::AsyncGetIOBoardRxRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIOBoardRxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetDI(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIOIndex& request, ::Nrmk::IndyFramework::DIODigitalInput* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::DIOIndex, ::Nrmk::IndyFramework::DIODigitalInput, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDI_, context, request, response);
}

void EtherCAT::Stub::async::GetDI(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIOIndex* request, ::Nrmk::IndyFramework::DIODigitalInput* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::DIOIndex, ::Nrmk::IndyFramework::DIODigitalInput, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDI_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetDI(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIOIndex* request, ::Nrmk::IndyFramework::DIODigitalInput* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::DIODigitalInput>* EtherCAT::Stub::PrepareAsyncGetDIRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIOIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::DIODigitalInput, ::Nrmk::IndyFramework::DIOIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::DIODigitalInput>* EtherCAT::Stub::AsyncGetDIRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIOIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIOIndex& request, ::Nrmk::IndyFramework::DIODigitalOutput* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::DIOIndex, ::Nrmk::IndyFramework::DIODigitalOutput, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDO_, context, request, response);
}

void EtherCAT::Stub::async::GetDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIOIndex* request, ::Nrmk::IndyFramework::DIODigitalOutput* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::DIOIndex, ::Nrmk::IndyFramework::DIODigitalOutput, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDO_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIOIndex* request, ::Nrmk::IndyFramework::DIODigitalOutput* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::DIODigitalOutput>* EtherCAT::Stub::PrepareAsyncGetDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIOIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::DIODigitalOutput, ::Nrmk::IndyFramework::DIOIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::DIODigitalOutput>* EtherCAT::Stub::AsyncGetDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIOIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIODigitalOutput& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::DIODigitalOutput, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDO_, context, request, response);
}

void EtherCAT::Stub::async::SetDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIODigitalOutput* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::DIODigitalOutput, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDO_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIODigitalOutput* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIODigitalOutput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::DIODigitalOutput, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::DIODigitalOutput& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetMaxTorqueSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex& request, ::Nrmk::IndyFramework::SDOIntVal* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::EcatIndex, ::Nrmk::IndyFramework::SDOIntVal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMaxTorqueSDO_, context, request, response);
}

void EtherCAT::Stub::async::GetMaxTorqueSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex* request, ::Nrmk::IndyFramework::SDOIntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::EcatIndex, ::Nrmk::IndyFramework::SDOIntVal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMaxTorqueSDO_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetMaxTorqueSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex* request, ::Nrmk::IndyFramework::SDOIntVal* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMaxTorqueSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SDOIntVal>* EtherCAT::Stub::PrepareAsyncGetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::SDOIntVal, ::Nrmk::IndyFramework::EcatIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMaxTorqueSDO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SDOIntVal>* EtherCAT::Stub::AsyncGetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMaxTorqueSDORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetProfileVelSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex& request, ::Nrmk::IndyFramework::SDOIntVal* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::EcatIndex, ::Nrmk::IndyFramework::SDOIntVal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProfileVelSDO_, context, request, response);
}

void EtherCAT::Stub::async::GetProfileVelSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex* request, ::Nrmk::IndyFramework::SDOIntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::EcatIndex, ::Nrmk::IndyFramework::SDOIntVal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProfileVelSDO_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetProfileVelSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex* request, ::Nrmk::IndyFramework::SDOIntVal* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProfileVelSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SDOIntVal>* EtherCAT::Stub::PrepareAsyncGetProfileVelSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::SDOIntVal, ::Nrmk::IndyFramework::EcatIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProfileVelSDO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SDOIntVal>* EtherCAT::Stub::AsyncGetProfileVelSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProfileVelSDORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetProfileAccSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex& request, ::Nrmk::IndyFramework::SDOIntVal* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::EcatIndex, ::Nrmk::IndyFramework::SDOIntVal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProfileAccSDO_, context, request, response);
}

void EtherCAT::Stub::async::GetProfileAccSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex* request, ::Nrmk::IndyFramework::SDOIntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::EcatIndex, ::Nrmk::IndyFramework::SDOIntVal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProfileAccSDO_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetProfileAccSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex* request, ::Nrmk::IndyFramework::SDOIntVal* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProfileAccSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SDOIntVal>* EtherCAT::Stub::PrepareAsyncGetProfileAccSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::SDOIntVal, ::Nrmk::IndyFramework::EcatIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProfileAccSDO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SDOIntVal>* EtherCAT::Stub::AsyncGetProfileAccSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProfileAccSDORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetProfileDecSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex& request, ::Nrmk::IndyFramework::SDOIntVal* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::EcatIndex, ::Nrmk::IndyFramework::SDOIntVal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProfileDecSDO_, context, request, response);
}

void EtherCAT::Stub::async::GetProfileDecSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex* request, ::Nrmk::IndyFramework::SDOIntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::EcatIndex, ::Nrmk::IndyFramework::SDOIntVal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProfileDecSDO_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetProfileDecSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex* request, ::Nrmk::IndyFramework::SDOIntVal* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProfileDecSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SDOIntVal>* EtherCAT::Stub::PrepareAsyncGetProfileDecSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::SDOIntVal, ::Nrmk::IndyFramework::EcatIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProfileDecSDO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::SDOIntVal>* EtherCAT::Stub::AsyncGetProfileDecSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::EcatIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProfileDecSDORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetMaxTorqueSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoParam, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMaxTorqueSDO_, context, request, response);
}

void EtherCAT::Stub::async::SetMaxTorqueSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoParam, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMaxTorqueSDO_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetMaxTorqueSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMaxTorqueSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ServoParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMaxTorqueSDO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMaxTorqueSDORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetProfileVelSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoParam, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetProfileVelSDO_, context, request, response);
}

void EtherCAT::Stub::async::SetProfileVelSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoParam, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetProfileVelSDO_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetProfileVelSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetProfileVelSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetProfileVelSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ServoParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetProfileVelSDO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetProfileVelSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetProfileVelSDORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetProfileAccSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoParam, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetProfileAccSDO_, context, request, response);
}

void EtherCAT::Stub::async::SetProfileAccSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoParam, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetProfileAccSDO_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetProfileAccSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetProfileAccSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetProfileAccSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ServoParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetProfileAccSDO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetProfileAccSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetProfileAccSDORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetProfileDecSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoParam, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetProfileDecSDO_, context, request, response);
}

void EtherCAT::Stub::async::SetProfileDecSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoParam, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetProfileDecSDO_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetProfileDecSDO(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetProfileDecSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetProfileDecSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ServoParam, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetProfileDecSDO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetProfileDecSDORaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoParam& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetProfileDecSDORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::GetRobotZeroCount(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::Nrmk::IndyFramework::RobotZeroCount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::RobotZeroCount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRobotZeroCount_, context, request, response);
}

void EtherCAT::Stub::async::GetRobotZeroCount(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::RobotZeroCount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::RobotZeroCount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRobotZeroCount_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::GetRobotZeroCount(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::RobotZeroCount* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRobotZeroCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::RobotZeroCount>* EtherCAT::Stub::PrepareAsyncGetRobotZeroCountRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::RobotZeroCount, ::Nrmk::IndyFramework::ServoIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRobotZeroCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::RobotZeroCount>* EtherCAT::Stub::AsyncGetRobotZeroCountRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRobotZeroCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EtherCAT::Stub::SetRobotZeroAsCurrent(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::Nrmk::IndyFramework::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetRobotZeroAsCurrent_, context, request, response);
}

void EtherCAT::Stub::async::SetRobotZeroAsCurrent(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRobotZeroAsCurrent_, context, request, response, std::move(f));
}

void EtherCAT::Stub::async::SetRobotZeroAsCurrent(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRobotZeroAsCurrent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::PrepareAsyncSetRobotZeroAsCurrentRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::ServoIndex, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetRobotZeroAsCurrent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Nrmk::IndyFramework::Empty>* EtherCAT::Stub::AsyncSetRobotZeroAsCurrentRaw(::grpc::ClientContext* context, const ::Nrmk::IndyFramework::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRobotZeroAsCurrentRaw(context, request, cq);
  result->StartCall();
  return result;
}

EtherCAT::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::MasterStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::MasterStatus* resp) {
               return service->GetMasterStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SlaveStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::SlaveStatus* resp) {
               return service->GetSlaveStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EcatDomainStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::EcatDomainStatus* resp) {
               return service->GetRxDomainStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EcatDomainStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::EcatDomainStatus* resp) {
               return service->GetTxDomainStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EcatSystemReady, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::EcatSystemReady* resp) {
               return service->IsSystemReady(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EcatServoOn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::EcatServoOn* resp) {
               return service->IsServoOn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SlaveTypeNum, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::SlaveTypeNum* resp) {
               return service->GetSlaveTypeNum(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->ResetOverflowCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoRxIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoRxIndex* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetServoRx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoIndex* req,
             ::Nrmk::IndyFramework::ServoRx* resp) {
               return service->GetServoRx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoIndex* req,
             ::Nrmk::IndyFramework::ServoTx* resp) {
               return service->GetServoTx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoRxIndexKeba, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoRxIndexKeba* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetServoRxKeba(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoRxKeba, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoIndex* req,
             ::Nrmk::IndyFramework::ServoRxKeba* resp) {
               return service->GetServoRxKeba(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoTxKeba, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoIndex* req,
             ::Nrmk::IndyFramework::ServoTxKeba* resp) {
               return service->GetServoTxKeba(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoIndex* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetServoOn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoIndex* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetServoOff(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoTemp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoIndex* req,
             ::Nrmk::IndyFramework::ServoTemp* resp) {
               return service->GetServoTemperature(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::ServoError, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoIndex* req,
             ::Nrmk::IndyFramework::ServoError* resp) {
               return service->GetServoErrorCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoIndex* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->ResetServo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoBrake, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoBrake* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetCOREManualBrake(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::EndtoolRx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::EndtoolRx* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetEndtoolRx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::EndtoolRx* resp) {
               return service->GetEndtoolRx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::EndtoolTx* resp) {
               return service->GetEndtoolTx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolDockingTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::EndtoolDockingTx* resp) {
               return service->GetEndtoolDockingTx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::EndtoolRS485Rx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::EndtoolRS485Rx* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetEndtoolRS485Rx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolRS485Rx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::EndtoolRS485Rx* resp) {
               return service->GetEndtoolRS485Rx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::EndtoolRS485Tx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::EndtoolRS485Tx* resp) {
               return service->GetEndtoolRS485Tx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::LedDim, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::LedDim* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetEndtoolLedDim(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::SRKeyEndtoolRx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::SRKeyEndtoolRx* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetSRKeyEndtoolRx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SRKeyEndtoolRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::SRKeyEndtoolRx* resp) {
               return service->GetSRKeyEndtoolRx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::SRKeyEndtoolTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::SRKeyEndtoolTx* resp) {
               return service->GetSRKeyEndtoolTx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::IOBoardRx, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::IOBoardRx* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetIOBoardRx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::IOBoardTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::IOBoardTx* resp) {
               return service->GetIOBoardTx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::Empty, ::Nrmk::IndyFramework::IOBoardRx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::Empty* req,
             ::Nrmk::IndyFramework::IOBoardRx* resp) {
               return service->GetIOBoardRx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::DIOIndex, ::Nrmk::IndyFramework::DIODigitalInput, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::DIOIndex* req,
             ::Nrmk::IndyFramework::DIODigitalInput* resp) {
               return service->GetDI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::DIOIndex, ::Nrmk::IndyFramework::DIODigitalOutput, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::DIOIndex* req,
             ::Nrmk::IndyFramework::DIODigitalOutput* resp) {
               return service->GetDO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::DIODigitalOutput, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::DIODigitalOutput* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetDO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::EcatIndex, ::Nrmk::IndyFramework::SDOIntVal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::EcatIndex* req,
             ::Nrmk::IndyFramework::SDOIntVal* resp) {
               return service->GetMaxTorqueSDO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::EcatIndex, ::Nrmk::IndyFramework::SDOIntVal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::EcatIndex* req,
             ::Nrmk::IndyFramework::SDOIntVal* resp) {
               return service->GetProfileVelSDO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::EcatIndex, ::Nrmk::IndyFramework::SDOIntVal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::EcatIndex* req,
             ::Nrmk::IndyFramework::SDOIntVal* resp) {
               return service->GetProfileAccSDO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::EcatIndex, ::Nrmk::IndyFramework::SDOIntVal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::EcatIndex* req,
             ::Nrmk::IndyFramework::SDOIntVal* resp) {
               return service->GetProfileDecSDO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoParam, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoParam* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetMaxTorqueSDO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoParam, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoParam* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetProfileVelSDO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoParam, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoParam* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetProfileAccSDO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoParam, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoParam* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetProfileDecSDO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::RobotZeroCount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoIndex* req,
             ::Nrmk::IndyFramework::RobotZeroCount* resp) {
               return service->GetRobotZeroCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtherCAT_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtherCAT::Service, ::Nrmk::IndyFramework::ServoIndex, ::Nrmk::IndyFramework::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EtherCAT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Nrmk::IndyFramework::ServoIndex* req,
             ::Nrmk::IndyFramework::Empty* resp) {
               return service->SetRobotZeroAsCurrent(ctx, req, resp);
             }, this)));
}

EtherCAT::Service::~Service() {
}

::grpc::Status EtherCAT::Service::GetMasterStatus(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::MasterStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetSlaveStatus(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SlaveStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetRxDomainStatus(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EcatDomainStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetTxDomainStatus(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EcatDomainStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::IsSystemReady(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EcatSystemReady* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::IsServoOn(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EcatServoOn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetSlaveTypeNum(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SlaveTypeNum* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::ResetOverflowCount(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetServoRx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoRxIndex* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetServoRx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoRx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetServoTx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoTx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetServoRxKeba(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoRxIndexKeba* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetServoRxKeba(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoRxKeba* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetServoTxKeba(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoTxKeba* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetServoOn(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetServoOff(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetServoTemperature(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoTemp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetServoErrorCode(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::ServoError* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::ResetServo(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetCOREManualBrake(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoBrake* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetEndtoolRx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::EndtoolRx* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetEndtoolRx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolRx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetEndtoolTx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolTx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetEndtoolDockingTx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolDockingTx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetEndtoolRS485Rx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::EndtoolRS485Rx* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetEndtoolRS485Rx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolRS485Rx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetEndtoolRS485Tx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::EndtoolRS485Tx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetEndtoolLedDim(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::LedDim* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetSRKeyEndtoolRx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::SRKeyEndtoolRx* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetSRKeyEndtoolRx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SRKeyEndtoolRx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetSRKeyEndtoolTx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::SRKeyEndtoolTx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetIOBoardRx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::IOBoardRx* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetIOBoardTx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::IOBoardTx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetIOBoardRx(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::Empty* request, ::Nrmk::IndyFramework::IOBoardRx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetDI(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::DIOIndex* request, ::Nrmk::IndyFramework::DIODigitalInput* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetDO(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::DIOIndex* request, ::Nrmk::IndyFramework::DIODigitalOutput* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetDO(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::DIODigitalOutput* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetMaxTorqueSDO(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::EcatIndex* request, ::Nrmk::IndyFramework::SDOIntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetProfileVelSDO(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::EcatIndex* request, ::Nrmk::IndyFramework::SDOIntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetProfileAccSDO(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::EcatIndex* request, ::Nrmk::IndyFramework::SDOIntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetProfileDecSDO(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::EcatIndex* request, ::Nrmk::IndyFramework::SDOIntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetMaxTorqueSDO(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoParam* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetProfileVelSDO(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoParam* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetProfileAccSDO(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoParam* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetProfileDecSDO(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoParam* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::GetRobotZeroCount(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::RobotZeroCount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EtherCAT::Service::SetRobotZeroAsCurrent(::grpc::ServerContext* context, const ::Nrmk::IndyFramework::ServoIndex* request, ::Nrmk::IndyFramework::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Nrmk
}  // namespace IndyFramework

