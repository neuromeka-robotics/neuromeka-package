// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cri.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cri_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cri_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common_msgs.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cri_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cri_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cri_2eproto;
namespace Nrmk {
namespace IndyFramework {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class CriData;
struct CriDataDefaultTypeInternal;
extern CriDataDefaultTypeInternal _CriData_default_instance_;
class CriTarget;
struct CriTargetDefaultTypeInternal;
extern CriTargetDefaultTypeInternal _CriTarget_default_instance_;
class ProjectList;
struct ProjectListDefaultTypeInternal;
extern ProjectListDefaultTypeInternal _ProjectList_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Nrmk {
namespace IndyFramework {

// ===================================================================


// -------------------------------------------------------------------

class Account final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  ~Account() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Account(::google::protobuf::internal::ConstantInitialized);

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Account* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Account& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Account& from) {
    Account::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Account";
  }
  protected:
  explicit Account(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // string email = 1;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // string token = 2;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* ptr);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Account)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cri_2eproto;
};// -------------------------------------------------------------------

class CriTarget final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CriTarget) */ {
 public:
  inline CriTarget() : CriTarget(nullptr) {}
  ~CriTarget() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CriTarget(::google::protobuf::internal::ConstantInitialized);

  CriTarget(const CriTarget& from);
  CriTarget(CriTarget&& from) noexcept
    : CriTarget() {
    *this = ::std::move(from);
  }

  inline CriTarget& operator=(const CriTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline CriTarget& operator=(CriTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CriTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const CriTarget* internal_default_instance() {
    return reinterpret_cast<const CriTarget*>(
               &_CriTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CriTarget& a, CriTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(CriTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CriTarget* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CriTarget* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CriTarget>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CriTarget& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CriTarget& from) {
    CriTarget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CriTarget* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.CriTarget";
  }
  protected:
  explicit CriTarget(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPnFieldNumber = 1,
    kFnFieldNumber = 2,
    kRnFieldNumber = 3,
    kIsoFieldNumber = 4,
  };
  // string pn = 1;
  void clear_pn() ;
  const std::string& pn() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pn(Arg_&& arg, Args_... args);
  std::string* mutable_pn();
  PROTOBUF_NODISCARD std::string* release_pn();
  void set_allocated_pn(std::string* ptr);

  private:
  const std::string& _internal_pn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pn(
      const std::string& value);
  std::string* _internal_mutable_pn();

  public:
  // string fn = 2;
  void clear_fn() ;
  const std::string& fn() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fn(Arg_&& arg, Args_... args);
  std::string* mutable_fn();
  PROTOBUF_NODISCARD std::string* release_fn();
  void set_allocated_fn(std::string* ptr);

  private:
  const std::string& _internal_fn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fn(
      const std::string& value);
  std::string* _internal_mutable_fn();

  public:
  // string rn = 3;
  void clear_rn() ;
  const std::string& rn() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rn(Arg_&& arg, Args_... args);
  std::string* mutable_rn();
  PROTOBUF_NODISCARD std::string* release_rn();
  void set_allocated_rn(std::string* ptr);

  private:
  const std::string& _internal_rn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rn(
      const std::string& value);
  std::string* _internal_mutable_rn();

  public:
  // bool iso = 4;
  void clear_iso() ;
  bool iso() const;
  void set_iso(bool value);

  private:
  bool _internal_iso() const;
  void _internal_set_iso(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CriTarget)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 43, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr pn_;
    ::google::protobuf::internal::ArenaStringPtr fn_;
    ::google::protobuf::internal::ArenaStringPtr rn_;
    bool iso_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cri_2eproto;
};// -------------------------------------------------------------------

class CriData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CriData) */ {
 public:
  inline CriData() : CriData(nullptr) {}
  ~CriData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CriData(::google::protobuf::internal::ConstantInitialized);

  CriData(const CriData& from);
  CriData(CriData&& from) noexcept
    : CriData() {
    *this = ::std::move(from);
  }

  inline CriData& operator=(const CriData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CriData& operator=(CriData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CriData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CriData* internal_default_instance() {
    return reinterpret_cast<const CriData*>(
               &_CriData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CriData& a, CriData& b) {
    a.Swap(&b);
  }
  inline void Swap(CriData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CriData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CriData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CriData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CriData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CriData& from) {
    CriData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CriData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.CriData";
  }
  protected:
  explicit CriData(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kCriFieldNumber = 2,
  };
  // double time = 1;
  void clear_time() ;
  double time() const;
  void set_time(double value);

  private:
  double _internal_time() const;
  void _internal_set_time(double value);

  public:
  // double cri = 2;
  void clear_cri() ;
  double cri() const;
  void set_cri(double value);

  private:
  double _internal_cri() const;
  void _internal_set_cri(double value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CriData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double time_;
    double cri_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cri_2eproto;
};// -------------------------------------------------------------------

class ProjectList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ProjectList) */ {
 public:
  inline ProjectList() : ProjectList(nullptr) {}
  ~ProjectList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProjectList(::google::protobuf::internal::ConstantInitialized);

  ProjectList(const ProjectList& from);
  ProjectList(ProjectList&& from) noexcept
    : ProjectList() {
    *this = ::std::move(from);
  }

  inline ProjectList& operator=(const ProjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectList& operator=(ProjectList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectList* internal_default_instance() {
    return reinterpret_cast<const ProjectList*>(
               &_ProjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProjectList& a, ProjectList& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProjectList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProjectList& from) {
    ProjectList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.ProjectList";
  }
  protected:
  explicit ProjectList(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // string list = 1;
  void clear_list() ;
  const std::string& list() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_list(Arg_&& arg, Args_... args);
  std::string* mutable_list();
  PROTOBUF_NODISCARD std::string* release_list();
  void set_allocated_list(std::string* ptr);

  private:
  const std::string& _internal_list() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_list(
      const std::string& value);
  std::string* _internal_mutable_list();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ProjectList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 43, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr list_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cri_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Account

// string email = 1;
inline void Account::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& Account::email() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Account.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Account::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Account.email)
}
inline std::string* Account::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Account.email)
  return _s;
}
inline const std::string& Account::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void Account::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* Account::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Account.email)
  return _impl_.email_.Release();
}
inline void Account::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Account.email)
}

// string token = 2;
inline void Account::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& Account::token() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Account.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Account::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Account.token)
}
inline std::string* Account::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Account.token)
  return _s;
}
inline const std::string& Account::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void Account::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArenaForAllocation());
}
inline std::string* Account::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Account.token)
  return _impl_.token_.Release();
}
inline void Account::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Account.token)
}

// -------------------------------------------------------------------

// CriTarget

// string pn = 1;
inline void CriTarget::clear_pn() {
  _impl_.pn_.ClearToEmpty();
}
inline const std::string& CriTarget::pn() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CriTarget.pn)
  return _internal_pn();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CriTarget::set_pn(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pn_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CriTarget.pn)
}
inline std::string* CriTarget::mutable_pn() {
  std::string* _s = _internal_mutable_pn();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.CriTarget.pn)
  return _s;
}
inline const std::string& CriTarget::_internal_pn() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pn_.Get();
}
inline void CriTarget::_internal_set_pn(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pn_.Set(value, GetArenaForAllocation());
}
inline std::string* CriTarget::_internal_mutable_pn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pn_.Mutable( GetArenaForAllocation());
}
inline std::string* CriTarget::release_pn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.CriTarget.pn)
  return _impl_.pn_.Release();
}
inline void CriTarget::set_allocated_pn(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pn_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pn_.IsDefault()) {
          _impl_.pn_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.CriTarget.pn)
}

// string fn = 2;
inline void CriTarget::clear_fn() {
  _impl_.fn_.ClearToEmpty();
}
inline const std::string& CriTarget::fn() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CriTarget.fn)
  return _internal_fn();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CriTarget::set_fn(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fn_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CriTarget.fn)
}
inline std::string* CriTarget::mutable_fn() {
  std::string* _s = _internal_mutable_fn();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.CriTarget.fn)
  return _s;
}
inline const std::string& CriTarget::_internal_fn() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fn_.Get();
}
inline void CriTarget::_internal_set_fn(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fn_.Set(value, GetArenaForAllocation());
}
inline std::string* CriTarget::_internal_mutable_fn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.fn_.Mutable( GetArenaForAllocation());
}
inline std::string* CriTarget::release_fn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.CriTarget.fn)
  return _impl_.fn_.Release();
}
inline void CriTarget::set_allocated_fn(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fn_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fn_.IsDefault()) {
          _impl_.fn_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.CriTarget.fn)
}

// string rn = 3;
inline void CriTarget::clear_rn() {
  _impl_.rn_.ClearToEmpty();
}
inline const std::string& CriTarget::rn() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CriTarget.rn)
  return _internal_rn();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CriTarget::set_rn(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rn_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CriTarget.rn)
}
inline std::string* CriTarget::mutable_rn() {
  std::string* _s = _internal_mutable_rn();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.CriTarget.rn)
  return _s;
}
inline const std::string& CriTarget::_internal_rn() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rn_.Get();
}
inline void CriTarget::_internal_set_rn(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rn_.Set(value, GetArenaForAllocation());
}
inline std::string* CriTarget::_internal_mutable_rn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rn_.Mutable( GetArenaForAllocation());
}
inline std::string* CriTarget::release_rn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.CriTarget.rn)
  return _impl_.rn_.Release();
}
inline void CriTarget::set_allocated_rn(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rn_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rn_.IsDefault()) {
          _impl_.rn_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.CriTarget.rn)
}

// bool iso = 4;
inline void CriTarget::clear_iso() {
  _impl_.iso_ = false;
}
inline bool CriTarget::iso() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CriTarget.iso)
  return _internal_iso();
}
inline void CriTarget::set_iso(bool value) {
  _internal_set_iso(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CriTarget.iso)
}
inline bool CriTarget::_internal_iso() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iso_;
}
inline void CriTarget::_internal_set_iso(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.iso_ = value;
}

// -------------------------------------------------------------------

// CriData

// double time = 1;
inline void CriData::clear_time() {
  _impl_.time_ = 0;
}
inline double CriData::time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CriData.time)
  return _internal_time();
}
inline void CriData::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CriData.time)
}
inline double CriData::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void CriData::_internal_set_time(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_ = value;
}

// double cri = 2;
inline void CriData::clear_cri() {
  _impl_.cri_ = 0;
}
inline double CriData::cri() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CriData.cri)
  return _internal_cri();
}
inline void CriData::set_cri(double value) {
  _internal_set_cri(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CriData.cri)
}
inline double CriData::_internal_cri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cri_;
}
inline void CriData::_internal_set_cri(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cri_ = value;
}

// -------------------------------------------------------------------

// ProjectList

// string list = 1;
inline void ProjectList::clear_list() {
  _impl_.list_.ClearToEmpty();
}
inline const std::string& ProjectList::list() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProjectList.list)
  return _internal_list();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProjectList::set_list(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.list_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProjectList.list)
}
inline std::string* ProjectList::mutable_list() {
  std::string* _s = _internal_mutable_list();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ProjectList.list)
  return _s;
}
inline const std::string& ProjectList::_internal_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.list_.Get();
}
inline void ProjectList::_internal_set_list(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.list_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectList::_internal_mutable_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.list_.Mutable( GetArenaForAllocation());
}
inline std::string* ProjectList::release_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ProjectList.list)
  return _impl_.list_.Release();
}
inline void ProjectList::set_allocated_list(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.list_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.list_.IsDefault()) {
          _impl_.list_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ProjectList.list)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cri_2eproto_2epb_2eh
