// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cri.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cri_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cri_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cri_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cri_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cri_2eproto;
namespace Nrmk {
namespace IndyFramework {
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class CriData;
class CriDataDefaultTypeInternal;
extern CriDataDefaultTypeInternal _CriData_default_instance_;
class CriTarget;
class CriTargetDefaultTypeInternal;
extern CriTargetDefaultTypeInternal _CriTarget_default_instance_;
class ProjectList;
class ProjectListDefaultTypeInternal;
extern ProjectListDefaultTypeInternal _ProjectList_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
PROTOBUF_NAMESPACE_OPEN
template<> ::Nrmk::IndyFramework::Account* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::Account>(Arena*);
template<> ::Nrmk::IndyFramework::CriData* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::CriData>(Arena*);
template<> ::Nrmk::IndyFramework::CriTarget* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::CriTarget>(Arena*);
template<> ::Nrmk::IndyFramework::ProjectList* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ProjectList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Nrmk {
namespace IndyFramework {

// ===================================================================

class Account :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Account) */ {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Account* other);
  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.Account";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cri_2eproto);
    return ::descriptor_table_cri_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Account)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cri_2eproto;
};
// -------------------------------------------------------------------

class CriTarget :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CriTarget) */ {
 public:
  CriTarget();
  virtual ~CriTarget();

  CriTarget(const CriTarget& from);
  CriTarget(CriTarget&& from) noexcept
    : CriTarget() {
    *this = ::std::move(from);
  }

  inline CriTarget& operator=(const CriTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline CriTarget& operator=(CriTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CriTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CriTarget* internal_default_instance() {
    return reinterpret_cast<const CriTarget*>(
               &_CriTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CriTarget* other);
  friend void swap(CriTarget& a, CriTarget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CriTarget* New() const final {
    return CreateMaybeMessage<CriTarget>(nullptr);
  }

  CriTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CriTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CriTarget& from);
  void MergeFrom(const CriTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CriTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.CriTarget";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cri_2eproto);
    return ::descriptor_table_cri_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pn = 1;
  void clear_pn();
  static const int kPnFieldNumber = 1;
  const std::string& pn() const;
  void set_pn(const std::string& value);
  void set_pn(std::string&& value);
  void set_pn(const char* value);
  void set_pn(const char* value, size_t size);
  std::string* mutable_pn();
  std::string* release_pn();
  void set_allocated_pn(std::string* pn);

  // string fn = 2;
  void clear_fn();
  static const int kFnFieldNumber = 2;
  const std::string& fn() const;
  void set_fn(const std::string& value);
  void set_fn(std::string&& value);
  void set_fn(const char* value);
  void set_fn(const char* value, size_t size);
  std::string* mutable_fn();
  std::string* release_fn();
  void set_allocated_fn(std::string* fn);

  // string rn = 3;
  void clear_rn();
  static const int kRnFieldNumber = 3;
  const std::string& rn() const;
  void set_rn(const std::string& value);
  void set_rn(std::string&& value);
  void set_rn(const char* value);
  void set_rn(const char* value, size_t size);
  std::string* mutable_rn();
  std::string* release_rn();
  void set_allocated_rn(std::string* rn);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CriTarget)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cri_2eproto;
};
// -------------------------------------------------------------------

class CriData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CriData) */ {
 public:
  CriData();
  virtual ~CriData();

  CriData(const CriData& from);
  CriData(CriData&& from) noexcept
    : CriData() {
    *this = ::std::move(from);
  }

  inline CriData& operator=(const CriData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CriData& operator=(CriData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CriData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CriData* internal_default_instance() {
    return reinterpret_cast<const CriData*>(
               &_CriData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CriData* other);
  friend void swap(CriData& a, CriData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CriData* New() const final {
    return CreateMaybeMessage<CriData>(nullptr);
  }

  CriData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CriData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CriData& from);
  void MergeFrom(const CriData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CriData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.CriData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cri_2eproto);
    return ::descriptor_table_cri_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // double cri = 2;
  void clear_cri();
  static const int kCriFieldNumber = 2;
  double cri() const;
  void set_cri(double value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CriData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double time_;
  double cri_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cri_2eproto;
};
// -------------------------------------------------------------------

class ProjectList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ProjectList) */ {
 public:
  ProjectList();
  virtual ~ProjectList();

  ProjectList(const ProjectList& from);
  ProjectList(ProjectList&& from) noexcept
    : ProjectList() {
    *this = ::std::move(from);
  }

  inline ProjectList& operator=(const ProjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectList& operator=(ProjectList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProjectList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectList* internal_default_instance() {
    return reinterpret_cast<const ProjectList*>(
               &_ProjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ProjectList* other);
  friend void swap(ProjectList& a, ProjectList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectList* New() const final {
    return CreateMaybeMessage<ProjectList>(nullptr);
  }

  ProjectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProjectList& from);
  void MergeFrom(const ProjectList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ProjectList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cri_2eproto);
    return ::descriptor_table_cri_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string list = 1;
  void clear_list();
  static const int kListFieldNumber = 1;
  const std::string& list() const;
  void set_list(const std::string& value);
  void set_list(std::string&& value);
  void set_list(const char* value);
  void set_list(const char* value, size_t size);
  std::string* mutable_list();
  std::string* release_list();
  void set_allocated_list(std::string* list);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ProjectList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cri_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account

// string email = 1;
inline void Account::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::email() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Account.email)
  return email_.GetNoArena();
}
inline void Account::set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Account.email)
}
inline void Account::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.Account.email)
}
inline void Account::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.Account.email)
}
inline void Account::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.Account.email)
}
inline std::string* Account::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Account.email)
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_email() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Account.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Account.email)
}

// string token = 2;
inline void Account::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::token() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Account.token)
  return token_.GetNoArena();
}
inline void Account::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Account.token)
}
inline void Account::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.Account.token)
}
inline void Account::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.Account.token)
}
inline void Account::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.Account.token)
}
inline std::string* Account::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Account.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_token() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Account.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Account.token)
}

// -------------------------------------------------------------------

// CriTarget

// string pn = 1;
inline void CriTarget::clear_pn() {
  pn_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CriTarget::pn() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CriTarget.pn)
  return pn_.GetNoArena();
}
inline void CriTarget::set_pn(const std::string& value) {
  
  pn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CriTarget.pn)
}
inline void CriTarget::set_pn(std::string&& value) {
  
  pn_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.CriTarget.pn)
}
inline void CriTarget::set_pn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.CriTarget.pn)
}
inline void CriTarget::set_pn(const char* value, size_t size) {
  
  pn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.CriTarget.pn)
}
inline std::string* CriTarget::mutable_pn() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.CriTarget.pn)
  return pn_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CriTarget::release_pn() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.CriTarget.pn)
  
  return pn_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CriTarget::set_allocated_pn(std::string* pn) {
  if (pn != nullptr) {
    
  } else {
    
  }
  pn_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pn);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.CriTarget.pn)
}

// string fn = 2;
inline void CriTarget::clear_fn() {
  fn_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CriTarget::fn() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CriTarget.fn)
  return fn_.GetNoArena();
}
inline void CriTarget::set_fn(const std::string& value) {
  
  fn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CriTarget.fn)
}
inline void CriTarget::set_fn(std::string&& value) {
  
  fn_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.CriTarget.fn)
}
inline void CriTarget::set_fn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.CriTarget.fn)
}
inline void CriTarget::set_fn(const char* value, size_t size) {
  
  fn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.CriTarget.fn)
}
inline std::string* CriTarget::mutable_fn() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.CriTarget.fn)
  return fn_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CriTarget::release_fn() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.CriTarget.fn)
  
  return fn_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CriTarget::set_allocated_fn(std::string* fn) {
  if (fn != nullptr) {
    
  } else {
    
  }
  fn_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fn);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.CriTarget.fn)
}

// string rn = 3;
inline void CriTarget::clear_rn() {
  rn_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CriTarget::rn() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CriTarget.rn)
  return rn_.GetNoArena();
}
inline void CriTarget::set_rn(const std::string& value) {
  
  rn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CriTarget.rn)
}
inline void CriTarget::set_rn(std::string&& value) {
  
  rn_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.CriTarget.rn)
}
inline void CriTarget::set_rn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.CriTarget.rn)
}
inline void CriTarget::set_rn(const char* value, size_t size) {
  
  rn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.CriTarget.rn)
}
inline std::string* CriTarget::mutable_rn() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.CriTarget.rn)
  return rn_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CriTarget::release_rn() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.CriTarget.rn)
  
  return rn_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CriTarget::set_allocated_rn(std::string* rn) {
  if (rn != nullptr) {
    
  } else {
    
  }
  rn_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rn);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.CriTarget.rn)
}

// -------------------------------------------------------------------

// CriData

// double time = 1;
inline void CriData::clear_time() {
  time_ = 0;
}
inline double CriData::time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CriData.time)
  return time_;
}
inline void CriData::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CriData.time)
}

// double cri = 2;
inline void CriData::clear_cri() {
  cri_ = 0;
}
inline double CriData::cri() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CriData.cri)
  return cri_;
}
inline void CriData::set_cri(double value) {
  
  cri_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CriData.cri)
}

// -------------------------------------------------------------------

// ProjectList

// string list = 1;
inline void ProjectList::clear_list() {
  list_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProjectList::list() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProjectList.list)
  return list_.GetNoArena();
}
inline void ProjectList::set_list(const std::string& value) {
  
  list_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProjectList.list)
}
inline void ProjectList::set_list(std::string&& value) {
  
  list_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.ProjectList.list)
}
inline void ProjectList::set_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  list_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.ProjectList.list)
}
inline void ProjectList::set_list(const char* value, size_t size) {
  
  list_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.ProjectList.list)
}
inline std::string* ProjectList::mutable_list() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ProjectList.list)
  return list_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProjectList::release_list() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ProjectList.list)
  
  return list_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectList::set_allocated_list(std::string* list) {
  if (list != nullptr) {
    
  } else {
    
  }
  list_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), list);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ProjectList.list)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IndyFramework
}  // namespace Nrmk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cri_2eproto
