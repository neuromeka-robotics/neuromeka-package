// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_device_5fmsgs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_device_5fmsgs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common_msgs.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_device_5fmsgs_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_device_5fmsgs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_device_5fmsgs_2eproto;
namespace Nrmk {
namespace IndyFramework {
class AnalogList;
struct AnalogListDefaultTypeInternal;
extern AnalogListDefaultTypeInternal _AnalogList_default_instance_;
class AnalogSignal;
struct AnalogSignalDefaultTypeInternal;
extern AnalogSignalDefaultTypeInternal _AnalogSignal_default_instance_;
class BrakeControlStyle;
struct BrakeControlStyleDefaultTypeInternal;
extern BrakeControlStyleDefaultTypeInternal _BrakeControlStyle_default_instance_;
class DeviceInfo;
struct DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class DigitalList;
struct DigitalListDefaultTypeInternal;
extern DigitalListDefaultTypeInternal _DigitalList_default_instance_;
class DigitalSignal;
struct DigitalSignalDefaultTypeInternal;
extern DigitalSignalDefaultTypeInternal _DigitalSignal_default_instance_;
class EndtoolSignal;
struct EndtoolSignalDefaultTypeInternal;
extern EndtoolSignalDefaultTypeInternal _EndtoolSignal_default_instance_;
class EndtoolSignalList;
struct EndtoolSignalListDefaultTypeInternal;
extern EndtoolSignalListDefaultTypeInternal _EndtoolSignalList_default_instance_;
class FTSensorData;
struct FTSensorDataDefaultTypeInternal;
extern FTSensorDataDefaultTypeInternal _FTSensorData_default_instance_;
class FTSensorType;
struct FTSensorTypeDefaultTypeInternal;
extern FTSensorTypeDefaultTypeInternal _FTSensorType_default_instance_;
class GetEL5001Data;
struct GetEL5001DataDefaultTypeInternal;
extern GetEL5001DataDefaultTypeInternal _GetEL5001Data_default_instance_;
class GetEL5101Data;
struct GetEL5101DataDefaultTypeInternal;
extern GetEL5101DataDefaultTypeInternal _GetEL5101Data_default_instance_;
class Motor;
struct MotorDefaultTypeInternal;
extern MotorDefaultTypeInternal _Motor_default_instance_;
class MotorList;
struct MotorListDefaultTypeInternal;
extern MotorListDefaultTypeInternal _MotorList_default_instance_;
class Servo;
struct ServoDefaultTypeInternal;
extern ServoDefaultTypeInternal _Servo_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Nrmk {
namespace IndyFramework {
enum BrakeControlStyle_ControlStyle : int {
  BrakeControlStyle_ControlStyle_UNAVAILABLE = 0,
  BrakeControlStyle_ControlStyle_CONCURRENT = 1,
  BrakeControlStyle_ControlStyle_INDIVIDUAL = 2,
  BrakeControlStyle_ControlStyle_BrakeControlStyle_ControlStyle_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BrakeControlStyle_ControlStyle_BrakeControlStyle_ControlStyle_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BrakeControlStyle_ControlStyle_IsValid(int value);
constexpr BrakeControlStyle_ControlStyle BrakeControlStyle_ControlStyle_ControlStyle_MIN = static_cast<BrakeControlStyle_ControlStyle>(0);
constexpr BrakeControlStyle_ControlStyle BrakeControlStyle_ControlStyle_ControlStyle_MAX = static_cast<BrakeControlStyle_ControlStyle>(2);
constexpr int BrakeControlStyle_ControlStyle_ControlStyle_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
BrakeControlStyle_ControlStyle_descriptor();
template <typename T>
const std::string& BrakeControlStyle_ControlStyle_Name(T value) {
  static_assert(std::is_same<T, BrakeControlStyle_ControlStyle>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ControlStyle_Name().");
  return BrakeControlStyle_ControlStyle_Name(static_cast<BrakeControlStyle_ControlStyle>(value));
}
template <>
inline const std::string& BrakeControlStyle_ControlStyle_Name(BrakeControlStyle_ControlStyle value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BrakeControlStyle_ControlStyle_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool BrakeControlStyle_ControlStyle_Parse(absl::string_view name, BrakeControlStyle_ControlStyle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BrakeControlStyle_ControlStyle>(
      BrakeControlStyle_ControlStyle_descriptor(), name, value);
}
enum DigitalState : int {
  OFF_STATE = 0,
  ON_STATE = 1,
  UNUSED_STATE = 2,
  DigitalState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DigitalState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DigitalState_IsValid(int value);
constexpr DigitalState DigitalState_MIN = static_cast<DigitalState>(0);
constexpr DigitalState DigitalState_MAX = static_cast<DigitalState>(2);
constexpr int DigitalState_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
DigitalState_descriptor();
template <typename T>
const std::string& DigitalState_Name(T value) {
  static_assert(std::is_same<T, DigitalState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DigitalState_Name().");
  return DigitalState_Name(static_cast<DigitalState>(value));
}
template <>
inline const std::string& DigitalState_Name(DigitalState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DigitalState_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool DigitalState_Parse(absl::string_view name, DigitalState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DigitalState>(
      DigitalState_descriptor(), name, value);
}
enum EndtoolState : int {
  UNUSED = 0,
  HIGH_PNP = 2,
  HIGH_NPN = 1,
  LOW_NPN = -1,
  LOW_PNP = -2,
  EndtoolState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EndtoolState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EndtoolState_IsValid(int value);
constexpr EndtoolState EndtoolState_MIN = static_cast<EndtoolState>(-2);
constexpr EndtoolState EndtoolState_MAX = static_cast<EndtoolState>(2);
constexpr int EndtoolState_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
EndtoolState_descriptor();
template <typename T>
const std::string& EndtoolState_Name(T value) {
  static_assert(std::is_same<T, EndtoolState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EndtoolState_Name().");
  return EndtoolState_Name(static_cast<EndtoolState>(value));
}
template <>
inline const std::string& EndtoolState_Name(EndtoolState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EndtoolState_descriptor,
                                                 -2, 2>(
      static_cast<int>(value));
}
inline bool EndtoolState_Parse(absl::string_view name, EndtoolState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EndtoolState>(
      EndtoolState_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Motor final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Motor) */ {
 public:
  inline Motor() : Motor(nullptr) {}
  ~Motor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Motor(::google::protobuf::internal::ConstantInitialized);

  Motor(const Motor& from);
  Motor(Motor&& from) noexcept
    : Motor() {
    *this = ::std::move(from);
  }

  inline Motor& operator=(const Motor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Motor& operator=(Motor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Motor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Motor* internal_default_instance() {
    return reinterpret_cast<const Motor*>(
               &_Motor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Motor& a, Motor& b) {
    a.Swap(&b);
  }
  inline void Swap(Motor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Motor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Motor* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Motor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Motor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Motor& from) {
    Motor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Motor* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Motor";
  }
  protected:
  explicit Motor(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kEnableFieldNumber = 2,
  };
  // uint32 index = 1;
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // bool enable = 2;
  void clear_enable() ;
  bool enable() const;
  void set_enable(bool value);

  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Motor)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t index_;
    bool enable_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class Servo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Servo) */ {
 public:
  inline Servo() : Servo(nullptr) {}
  ~Servo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Servo(::google::protobuf::internal::ConstantInitialized);

  Servo(const Servo& from);
  Servo(Servo&& from) noexcept
    : Servo() {
    *this = ::std::move(from);
  }

  inline Servo& operator=(const Servo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Servo& operator=(Servo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Servo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Servo* internal_default_instance() {
    return reinterpret_cast<const Servo*>(
               &_Servo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Servo& a, Servo& b) {
    a.Swap(&b);
  }
  inline void Swap(Servo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Servo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Servo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Servo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Servo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Servo& from) {
    Servo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Servo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Servo";
  }
  protected:
  explicit Servo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kEnableFieldNumber = 2,
  };
  // uint32 index = 1;
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // bool enable = 2;
  void clear_enable() ;
  bool enable() const;
  void set_enable(bool value);

  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Servo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t index_;
    bool enable_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class DigitalSignal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DigitalSignal) */ {
 public:
  inline DigitalSignal() : DigitalSignal(nullptr) {}
  ~DigitalSignal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DigitalSignal(::google::protobuf::internal::ConstantInitialized);

  DigitalSignal(const DigitalSignal& from);
  DigitalSignal(DigitalSignal&& from) noexcept
    : DigitalSignal() {
    *this = ::std::move(from);
  }

  inline DigitalSignal& operator=(const DigitalSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalSignal& operator=(DigitalSignal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigitalSignal& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigitalSignal* internal_default_instance() {
    return reinterpret_cast<const DigitalSignal*>(
               &_DigitalSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DigitalSignal& a, DigitalSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalSignal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalSignal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DigitalSignal* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DigitalSignal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DigitalSignal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DigitalSignal& from) {
    DigitalSignal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalSignal* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.DigitalSignal";
  }
  protected:
  explicit DigitalSignal(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // uint32 address = 1;
  void clear_address() ;
  ::uint32_t address() const;
  void set_address(::uint32_t value);

  private:
  ::uint32_t _internal_address() const;
  void _internal_set_address(::uint32_t value);

  public:
  // .Nrmk.IndyFramework.DigitalState state = 2;
  void clear_state() ;
  ::Nrmk::IndyFramework::DigitalState state() const;
  void set_state(::Nrmk::IndyFramework::DigitalState value);

  private:
  ::Nrmk::IndyFramework::DigitalState _internal_state() const;
  void _internal_set_state(::Nrmk::IndyFramework::DigitalState value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DigitalSignal)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t address_;
    int state_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class EndtoolSignal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.EndtoolSignal) */ {
 public:
  inline EndtoolSignal() : EndtoolSignal(nullptr) {}
  ~EndtoolSignal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EndtoolSignal(::google::protobuf::internal::ConstantInitialized);

  EndtoolSignal(const EndtoolSignal& from);
  EndtoolSignal(EndtoolSignal&& from) noexcept
    : EndtoolSignal() {
    *this = ::std::move(from);
  }

  inline EndtoolSignal& operator=(const EndtoolSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndtoolSignal& operator=(EndtoolSignal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndtoolSignal& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndtoolSignal* internal_default_instance() {
    return reinterpret_cast<const EndtoolSignal*>(
               &_EndtoolSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EndtoolSignal& a, EndtoolSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(EndtoolSignal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndtoolSignal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EndtoolSignal* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EndtoolSignal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EndtoolSignal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EndtoolSignal& from) {
    EndtoolSignal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndtoolSignal* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.EndtoolSignal";
  }
  protected:
  explicit EndtoolSignal(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 2,
    kPortFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.EndtoolState states = 2;
  int states_size() const;
  private:
  int _internal_states_size() const;

  public:
  void clear_states() ;
  public:
  ::Nrmk::IndyFramework::EndtoolState states(int index) const;
  void set_states(int index, ::Nrmk::IndyFramework::EndtoolState value);
  void add_states(::Nrmk::IndyFramework::EndtoolState value);
  const ::google::protobuf::RepeatedField<int>& states() const;
  ::google::protobuf::RepeatedField<int>* mutable_states();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_states() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_states();

  public:
  // string port = 1;
  void clear_port() ;
  const std::string& port() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port(Arg_&& arg, Args_... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* ptr);

  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(
      const std::string& value);
  std::string* _internal_mutable_port();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.EndtoolSignal)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<int> states_;
    mutable ::google::protobuf::internal::CachedSize _states_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class AnalogSignal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.AnalogSignal) */ {
 public:
  inline AnalogSignal() : AnalogSignal(nullptr) {}
  ~AnalogSignal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AnalogSignal(::google::protobuf::internal::ConstantInitialized);

  AnalogSignal(const AnalogSignal& from);
  AnalogSignal(AnalogSignal&& from) noexcept
    : AnalogSignal() {
    *this = ::std::move(from);
  }

  inline AnalogSignal& operator=(const AnalogSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogSignal& operator=(AnalogSignal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalogSignal& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalogSignal* internal_default_instance() {
    return reinterpret_cast<const AnalogSignal*>(
               &_AnalogSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AnalogSignal& a, AnalogSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogSignal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogSignal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalogSignal* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnalogSignal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnalogSignal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AnalogSignal& from) {
    AnalogSignal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogSignal* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.AnalogSignal";
  }
  protected:
  explicit AnalogSignal(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kVoltageFieldNumber = 2,
  };
  // uint32 address = 1;
  void clear_address() ;
  ::uint32_t address() const;
  void set_address(::uint32_t value);

  private:
  ::uint32_t _internal_address() const;
  void _internal_set_address(::uint32_t value);

  public:
  // int32 voltage = 2;
  void clear_voltage() ;
  ::int32_t voltage() const;
  void set_voltage(::int32_t value);

  private:
  ::int32_t _internal_voltage() const;
  void _internal_set_voltage(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.AnalogSignal)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t address_;
    ::int32_t voltage_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class MotorList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MotorList) */ {
 public:
  inline MotorList() : MotorList(nullptr) {}
  ~MotorList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MotorList(::google::protobuf::internal::ConstantInitialized);

  MotorList(const MotorList& from);
  MotorList(MotorList&& from) noexcept
    : MotorList() {
    *this = ::std::move(from);
  }

  inline MotorList& operator=(const MotorList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorList& operator=(MotorList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotorList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotorList* internal_default_instance() {
    return reinterpret_cast<const MotorList*>(
               &_MotorList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MotorList& a, MotorList& b) {
    a.Swap(&b);
  }
  inline void Swap(MotorList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotorList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotorList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotorList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MotorList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MotorList& from) {
    MotorList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.MotorList";
  }
  protected:
  explicit MotorList(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotorsFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.Motor motors = 1;
  int motors_size() const;
  private:
  int _internal_motors_size() const;

  public:
  void clear_motors() ;
  ::Nrmk::IndyFramework::Motor* mutable_motors(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Motor >*
      mutable_motors();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Motor>& _internal_motors() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Motor>* _internal_mutable_motors();
  public:
  const ::Nrmk::IndyFramework::Motor& motors(int index) const;
  ::Nrmk::IndyFramework::Motor* add_motors();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Motor >&
      motors() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MotorList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Motor > motors_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class DigitalList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DigitalList) */ {
 public:
  inline DigitalList() : DigitalList(nullptr) {}
  ~DigitalList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DigitalList(::google::protobuf::internal::ConstantInitialized);

  DigitalList(const DigitalList& from);
  DigitalList(DigitalList&& from) noexcept
    : DigitalList() {
    *this = ::std::move(from);
  }

  inline DigitalList& operator=(const DigitalList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalList& operator=(DigitalList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigitalList& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigitalList* internal_default_instance() {
    return reinterpret_cast<const DigitalList*>(
               &_DigitalList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DigitalList& a, DigitalList& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DigitalList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DigitalList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DigitalList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DigitalList& from) {
    DigitalList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.DigitalList";
  }
  protected:
  explicit DigitalList(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalsFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.DigitalSignal signals = 1;
  int signals_size() const;
  private:
  int _internal_signals_size() const;

  public:
  void clear_signals() ;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_signals(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_signals();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>& _internal_signals() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>* _internal_mutable_signals();
  public:
  const ::Nrmk::IndyFramework::DigitalSignal& signals(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_signals();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      signals() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DigitalList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > signals_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class EndtoolSignalList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.EndtoolSignalList) */ {
 public:
  inline EndtoolSignalList() : EndtoolSignalList(nullptr) {}
  ~EndtoolSignalList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EndtoolSignalList(::google::protobuf::internal::ConstantInitialized);

  EndtoolSignalList(const EndtoolSignalList& from);
  EndtoolSignalList(EndtoolSignalList&& from) noexcept
    : EndtoolSignalList() {
    *this = ::std::move(from);
  }

  inline EndtoolSignalList& operator=(const EndtoolSignalList& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndtoolSignalList& operator=(EndtoolSignalList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndtoolSignalList& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndtoolSignalList* internal_default_instance() {
    return reinterpret_cast<const EndtoolSignalList*>(
               &_EndtoolSignalList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EndtoolSignalList& a, EndtoolSignalList& b) {
    a.Swap(&b);
  }
  inline void Swap(EndtoolSignalList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndtoolSignalList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EndtoolSignalList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EndtoolSignalList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EndtoolSignalList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EndtoolSignalList& from) {
    EndtoolSignalList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndtoolSignalList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.EndtoolSignalList";
  }
  protected:
  explicit EndtoolSignalList(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalsFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.EndtoolSignal signals = 1;
  int signals_size() const;
  private:
  int _internal_signals_size() const;

  public:
  void clear_signals() ;
  ::Nrmk::IndyFramework::EndtoolSignal* mutable_signals(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >*
      mutable_signals();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::EndtoolSignal>& _internal_signals() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::EndtoolSignal>* _internal_mutable_signals();
  public:
  const ::Nrmk::IndyFramework::EndtoolSignal& signals(int index) const;
  ::Nrmk::IndyFramework::EndtoolSignal* add_signals();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >&
      signals() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.EndtoolSignalList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal > signals_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class AnalogList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.AnalogList) */ {
 public:
  inline AnalogList() : AnalogList(nullptr) {}
  ~AnalogList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AnalogList(::google::protobuf::internal::ConstantInitialized);

  AnalogList(const AnalogList& from);
  AnalogList(AnalogList&& from) noexcept
    : AnalogList() {
    *this = ::std::move(from);
  }

  inline AnalogList& operator=(const AnalogList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogList& operator=(AnalogList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalogList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalogList* internal_default_instance() {
    return reinterpret_cast<const AnalogList*>(
               &_AnalogList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AnalogList& a, AnalogList& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalogList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnalogList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnalogList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AnalogList& from) {
    AnalogList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.AnalogList";
  }
  protected:
  explicit AnalogList(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalsFieldNumber = 1,
  };
  // repeated .Nrmk.IndyFramework.AnalogSignal signals = 1;
  int signals_size() const;
  private:
  int _internal_signals_size() const;

  public:
  void clear_signals() ;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_signals(int index);
  ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_signals();
  private:
  const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>& _internal_signals() const;
  ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>* _internal_mutable_signals();
  public:
  const ::Nrmk::IndyFramework::AnalogSignal& signals(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_signals();
  const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      signals() const;
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.AnalogList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > signals_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class DeviceInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DeviceInfo) */ {
 public:
  inline DeviceInfo() : DeviceInfo(nullptr) {}
  ~DeviceInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceInfo(::google::protobuf::internal::ConstantInitialized);

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceInfo& from) {
    DeviceInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.DeviceInfo";
  }
  protected:
  explicit DeviceInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoreBoardFwVersFieldNumber = 11,
    kRobotSerialFieldNumber = 2,
    kIoBoardFwVerFieldNumber = 10,
    kEndtoolBoardFwVerFieldNumber = 12,
    kControllerVerFieldNumber = 20,
    kControllerDetailFieldNumber = 21,
    kControllerDateFieldNumber = 22,
    kResponseFieldNumber = 100,
    kNumJointsFieldNumber = 1,
    kPayloadFieldNumber = 3,
  };
  // repeated string core_board_fw_vers = 11;
  int core_board_fw_vers_size() const;
  private:
  int _internal_core_board_fw_vers_size() const;

  public:
  void clear_core_board_fw_vers() ;
  const std::string& core_board_fw_vers(int index) const;
  std::string* mutable_core_board_fw_vers(int index);
  void set_core_board_fw_vers(int index, const std::string& value);
  void set_core_board_fw_vers(int index, std::string&& value);
  void set_core_board_fw_vers(int index, const char* value);
  void set_core_board_fw_vers(int index, const char* value, std::size_t size);
  void set_core_board_fw_vers(int index, absl::string_view value);
  std::string* add_core_board_fw_vers();
  void add_core_board_fw_vers(const std::string& value);
  void add_core_board_fw_vers(std::string&& value);
  void add_core_board_fw_vers(const char* value);
  void add_core_board_fw_vers(const char* value, std::size_t size);
  void add_core_board_fw_vers(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& core_board_fw_vers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_core_board_fw_vers();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_core_board_fw_vers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_core_board_fw_vers();

  public:
  // string robot_serial = 2;
  void clear_robot_serial() ;
  const std::string& robot_serial() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_robot_serial(Arg_&& arg, Args_... args);
  std::string* mutable_robot_serial();
  PROTOBUF_NODISCARD std::string* release_robot_serial();
  void set_allocated_robot_serial(std::string* ptr);

  private:
  const std::string& _internal_robot_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_serial(
      const std::string& value);
  std::string* _internal_mutable_robot_serial();

  public:
  // string io_board_fw_ver = 10;
  void clear_io_board_fw_ver() ;
  const std::string& io_board_fw_ver() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_io_board_fw_ver(Arg_&& arg, Args_... args);
  std::string* mutable_io_board_fw_ver();
  PROTOBUF_NODISCARD std::string* release_io_board_fw_ver();
  void set_allocated_io_board_fw_ver(std::string* ptr);

  private:
  const std::string& _internal_io_board_fw_ver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_io_board_fw_ver(
      const std::string& value);
  std::string* _internal_mutable_io_board_fw_ver();

  public:
  // string endtool_board_fw_ver = 12;
  void clear_endtool_board_fw_ver() ;
  const std::string& endtool_board_fw_ver() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_endtool_board_fw_ver(Arg_&& arg, Args_... args);
  std::string* mutable_endtool_board_fw_ver();
  PROTOBUF_NODISCARD std::string* release_endtool_board_fw_ver();
  void set_allocated_endtool_board_fw_ver(std::string* ptr);

  private:
  const std::string& _internal_endtool_board_fw_ver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endtool_board_fw_ver(
      const std::string& value);
  std::string* _internal_mutable_endtool_board_fw_ver();

  public:
  // string controller_ver = 20;
  void clear_controller_ver() ;
  const std::string& controller_ver() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_controller_ver(Arg_&& arg, Args_... args);
  std::string* mutable_controller_ver();
  PROTOBUF_NODISCARD std::string* release_controller_ver();
  void set_allocated_controller_ver(std::string* ptr);

  private:
  const std::string& _internal_controller_ver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller_ver(
      const std::string& value);
  std::string* _internal_mutable_controller_ver();

  public:
  // string controller_detail = 21;
  void clear_controller_detail() ;
  const std::string& controller_detail() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_controller_detail(Arg_&& arg, Args_... args);
  std::string* mutable_controller_detail();
  PROTOBUF_NODISCARD std::string* release_controller_detail();
  void set_allocated_controller_detail(std::string* ptr);

  private:
  const std::string& _internal_controller_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller_detail(
      const std::string& value);
  std::string* _internal_mutable_controller_detail();

  public:
  // string controller_date = 22;
  void clear_controller_date() ;
  const std::string& controller_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_controller_date(Arg_&& arg, Args_... args);
  std::string* mutable_controller_date();
  PROTOBUF_NODISCARD std::string* release_controller_date();
  void set_allocated_controller_date(std::string* ptr);

  private:
  const std::string& _internal_controller_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller_date(
      const std::string& value);
  std::string* _internal_mutable_controller_date();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // uint32 num_joints = 1;
  void clear_num_joints() ;
  ::uint32_t num_joints() const;
  void set_num_joints(::uint32_t value);

  private:
  ::uint32_t _internal_num_joints() const;
  void _internal_set_num_joints(::uint32_t value);

  public:
  // float payload = 3;
  void clear_payload() ;
  float payload() const;
  void set_payload(float value);

  private:
  float _internal_payload() const;
  void _internal_set_payload(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DeviceInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10, 1, 157, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> core_board_fw_vers_;
    ::google::protobuf::internal::ArenaStringPtr robot_serial_;
    ::google::protobuf::internal::ArenaStringPtr io_board_fw_ver_;
    ::google::protobuf::internal::ArenaStringPtr endtool_board_fw_ver_;
    ::google::protobuf::internal::ArenaStringPtr controller_ver_;
    ::google::protobuf::internal::ArenaStringPtr controller_detail_;
    ::google::protobuf::internal::ArenaStringPtr controller_date_;
    ::Nrmk::IndyFramework::Response* response_;
    ::uint32_t num_joints_;
    float payload_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class BrakeControlStyle final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.BrakeControlStyle) */ {
 public:
  inline BrakeControlStyle() : BrakeControlStyle(nullptr) {}
  ~BrakeControlStyle() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BrakeControlStyle(::google::protobuf::internal::ConstantInitialized);

  BrakeControlStyle(const BrakeControlStyle& from);
  BrakeControlStyle(BrakeControlStyle&& from) noexcept
    : BrakeControlStyle() {
    *this = ::std::move(from);
  }

  inline BrakeControlStyle& operator=(const BrakeControlStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrakeControlStyle& operator=(BrakeControlStyle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrakeControlStyle& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrakeControlStyle* internal_default_instance() {
    return reinterpret_cast<const BrakeControlStyle*>(
               &_BrakeControlStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BrakeControlStyle& a, BrakeControlStyle& b) {
    a.Swap(&b);
  }
  inline void Swap(BrakeControlStyle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrakeControlStyle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrakeControlStyle* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrakeControlStyle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BrakeControlStyle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BrakeControlStyle& from) {
    BrakeControlStyle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrakeControlStyle* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.BrakeControlStyle";
  }
  protected:
  explicit BrakeControlStyle(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ControlStyle = BrakeControlStyle_ControlStyle;
  static constexpr ControlStyle UNAVAILABLE = BrakeControlStyle_ControlStyle_UNAVAILABLE;
  static constexpr ControlStyle CONCURRENT = BrakeControlStyle_ControlStyle_CONCURRENT;
  static constexpr ControlStyle INDIVIDUAL = BrakeControlStyle_ControlStyle_INDIVIDUAL;
  static inline bool ControlStyle_IsValid(int value) {
    return BrakeControlStyle_ControlStyle_IsValid(value);
  }
  static constexpr ControlStyle ControlStyle_MIN = BrakeControlStyle_ControlStyle_ControlStyle_MIN;
  static constexpr ControlStyle ControlStyle_MAX = BrakeControlStyle_ControlStyle_ControlStyle_MAX;
  static constexpr int ControlStyle_ARRAYSIZE = BrakeControlStyle_ControlStyle_ControlStyle_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ControlStyle_descriptor() {
    return BrakeControlStyle_ControlStyle_descriptor();
  }
  template <typename T>
  static inline const std::string& ControlStyle_Name(T value) {
    return BrakeControlStyle_ControlStyle_Name(value);
  }
  static inline bool ControlStyle_Parse(absl::string_view name, ControlStyle* value) {
    return BrakeControlStyle_ControlStyle_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 100,
    kStyleFieldNumber = 1,
  };
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // .Nrmk.IndyFramework.BrakeControlStyle.ControlStyle style = 1;
  void clear_style() ;
  ::Nrmk::IndyFramework::BrakeControlStyle_ControlStyle style() const;
  void set_style(::Nrmk::IndyFramework::BrakeControlStyle_ControlStyle value);

  private:
  ::Nrmk::IndyFramework::BrakeControlStyle_ControlStyle _internal_style() const;
  void _internal_set_style(::Nrmk::IndyFramework::BrakeControlStyle_ControlStyle value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.BrakeControlStyle)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::Response* response_;
    int style_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class GetEL5001Data final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.GetEL5001Data) */ {
 public:
  inline GetEL5001Data() : GetEL5001Data(nullptr) {}
  ~GetEL5001Data() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetEL5001Data(::google::protobuf::internal::ConstantInitialized);

  GetEL5001Data(const GetEL5001Data& from);
  GetEL5001Data(GetEL5001Data&& from) noexcept
    : GetEL5001Data() {
    *this = ::std::move(from);
  }

  inline GetEL5001Data& operator=(const GetEL5001Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEL5001Data& operator=(GetEL5001Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEL5001Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEL5001Data* internal_default_instance() {
    return reinterpret_cast<const GetEL5001Data*>(
               &_GetEL5001Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetEL5001Data& a, GetEL5001Data& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEL5001Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEL5001Data* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEL5001Data* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEL5001Data>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetEL5001Data& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetEL5001Data& from) {
    GetEL5001Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEL5001Data* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.GetEL5001Data";
  }
  protected:
  explicit GetEL5001Data(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 100,
    kStatusFieldNumber = 1,
    kValueFieldNumber = 2,
    kDeltaFieldNumber = 3,
    kAverageFieldNumber = 4,
  };
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // int32 status = 1;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // int32 value = 2;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // int32 delta = 3;
  void clear_delta() ;
  ::int32_t delta() const;
  void set_delta(::int32_t value);

  private:
  ::int32_t _internal_delta() const;
  void _internal_set_delta(::int32_t value);

  public:
  // float average = 4;
  void clear_average() ;
  float average() const;
  void set_average(float value);

  private:
  float _internal_average() const;
  void _internal_set_average(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.GetEL5001Data)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 5, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::Response* response_;
    ::int32_t status_;
    ::int32_t value_;
    ::int32_t delta_;
    float average_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class GetEL5101Data final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.GetEL5101Data) */ {
 public:
  inline GetEL5101Data() : GetEL5101Data(nullptr) {}
  ~GetEL5101Data() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetEL5101Data(::google::protobuf::internal::ConstantInitialized);

  GetEL5101Data(const GetEL5101Data& from);
  GetEL5101Data(GetEL5101Data&& from) noexcept
    : GetEL5101Data() {
    *this = ::std::move(from);
  }

  inline GetEL5101Data& operator=(const GetEL5101Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEL5101Data& operator=(GetEL5101Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEL5101Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEL5101Data* internal_default_instance() {
    return reinterpret_cast<const GetEL5101Data*>(
               &_GetEL5101Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetEL5101Data& a, GetEL5101Data& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEL5101Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEL5101Data* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEL5101Data* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEL5101Data>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetEL5101Data& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetEL5101Data& from) {
    GetEL5101Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEL5101Data* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.GetEL5101Data";
  }
  protected:
  explicit GetEL5101Data(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 100,
    kStatusFieldNumber = 1,
    kValueFieldNumber = 2,
    kLatchFieldNumber = 3,
    kDeltaFieldNumber = 4,
    kAverageFieldNumber = 5,
  };
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // int32 status = 1;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // int32 value = 2;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // int32 latch = 3;
  void clear_latch() ;
  ::int32_t latch() const;
  void set_latch(::int32_t value);

  private:
  ::int32_t _internal_latch() const;
  void _internal_set_latch(::int32_t value);

  public:
  // int32 delta = 4;
  void clear_delta() ;
  ::int32_t delta() const;
  void set_delta(::int32_t value);

  private:
  ::int32_t _internal_delta() const;
  void _internal_set_delta(::int32_t value);

  public:
  // float average = 5;
  void clear_average() ;
  float average() const;
  void set_average(float value);

  private:
  float _internal_average() const;
  void _internal_set_average(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.GetEL5101Data)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::Response* response_;
    ::int32_t status_;
    ::int32_t value_;
    ::int32_t latch_;
    ::int32_t delta_;
    float average_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class FTSensorType final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FTSensorType) */ {
 public:
  inline FTSensorType() : FTSensorType(nullptr) {}
  ~FTSensorType() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FTSensorType(::google::protobuf::internal::ConstantInitialized);

  FTSensorType(const FTSensorType& from);
  FTSensorType(FTSensorType&& from) noexcept
    : FTSensorType() {
    *this = ::std::move(from);
  }

  inline FTSensorType& operator=(const FTSensorType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FTSensorType& operator=(FTSensorType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FTSensorType& default_instance() {
    return *internal_default_instance();
  }
  static inline const FTSensorType* internal_default_instance() {
    return reinterpret_cast<const FTSensorType*>(
               &_FTSensorType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FTSensorType& a, FTSensorType& b) {
    a.Swap(&b);
  }
  inline void Swap(FTSensorType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FTSensorType* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FTSensorType* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FTSensorType>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FTSensorType& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FTSensorType& from) {
    FTSensorType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FTSensorType* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.FTSensorType";
  }
  protected:
  explicit FTSensorType(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFtSensorTypeFieldNumber = 1,
    kResponseFieldNumber = 100,
  };
  // string ft_sensor_type = 1;
  void clear_ft_sensor_type() ;
  const std::string& ft_sensor_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ft_sensor_type(Arg_&& arg, Args_... args);
  std::string* mutable_ft_sensor_type();
  PROTOBUF_NODISCARD std::string* release_ft_sensor_type();
  void set_allocated_ft_sensor_type(std::string* ptr);

  private:
  const std::string& _internal_ft_sensor_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ft_sensor_type(
      const std::string& value);
  std::string* _internal_mutable_ft_sensor_type();

  public:
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FTSensorType)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 54, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr ft_sensor_type_;
    ::Nrmk::IndyFramework::Response* response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class FTSensorData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FTSensorData) */ {
 public:
  inline FTSensorData() : FTSensorData(nullptr) {}
  ~FTSensorData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FTSensorData(::google::protobuf::internal::ConstantInitialized);

  FTSensorData(const FTSensorData& from);
  FTSensorData(FTSensorData&& from) noexcept
    : FTSensorData() {
    *this = ::std::move(from);
  }

  inline FTSensorData& operator=(const FTSensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FTSensorData& operator=(FTSensorData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FTSensorData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FTSensorData* internal_default_instance() {
    return reinterpret_cast<const FTSensorData*>(
               &_FTSensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FTSensorData& a, FTSensorData& b) {
    a.Swap(&b);
  }
  inline void Swap(FTSensorData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FTSensorData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FTSensorData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FTSensorData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FTSensorData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FTSensorData& from) {
    FTSensorData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FTSensorData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.FTSensorData";
  }
  protected:
  explicit FTSensorData(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 100,
    kFtFxFieldNumber = 1,
    kFtFyFieldNumber = 2,
    kFtFzFieldNumber = 3,
    kFtTxFieldNumber = 4,
    kFtTyFieldNumber = 5,
    kFtTzFieldNumber = 6,
  };
  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response() ;
  const ::Nrmk::IndyFramework::Response& response() const;
  PROTOBUF_NODISCARD ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* value);
  void unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value);
  ::Nrmk::IndyFramework::Response* unsafe_arena_release_response();

  private:
  const ::Nrmk::IndyFramework::Response& _internal_response() const;
  ::Nrmk::IndyFramework::Response* _internal_mutable_response();

  public:
  // float ft_Fx = 1;
  void clear_ft_fx() ;
  float ft_fx() const;
  void set_ft_fx(float value);

  private:
  float _internal_ft_fx() const;
  void _internal_set_ft_fx(float value);

  public:
  // float ft_Fy = 2;
  void clear_ft_fy() ;
  float ft_fy() const;
  void set_ft_fy(float value);

  private:
  float _internal_ft_fy() const;
  void _internal_set_ft_fy(float value);

  public:
  // float ft_Fz = 3;
  void clear_ft_fz() ;
  float ft_fz() const;
  void set_ft_fz(float value);

  private:
  float _internal_ft_fz() const;
  void _internal_set_ft_fz(float value);

  public:
  // float ft_Tx = 4;
  void clear_ft_tx() ;
  float ft_tx() const;
  void set_ft_tx(float value);

  private:
  float _internal_ft_tx() const;
  void _internal_set_ft_tx(float value);

  public:
  // float ft_Ty = 5;
  void clear_ft_ty() ;
  float ft_ty() const;
  void set_ft_ty(float value);

  private:
  float _internal_ft_ty() const;
  void _internal_set_ft_ty(float value);

  public:
  // float ft_Tz = 6;
  void clear_ft_tz() ;
  float ft_tz() const;
  void set_ft_tz(float value);

  private:
  float _internal_ft_tz() const;
  void _internal_set_ft_tz(float value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FTSensorData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 1, 0, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Nrmk::IndyFramework::Response* response_;
    float ft_fx_;
    float ft_fy_;
    float ft_fz_;
    float ft_tx_;
    float ft_ty_;
    float ft_tz_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fmsgs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Motor

// uint32 index = 1;
inline void Motor::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t Motor::index() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Motor.index)
  return _internal_index();
}
inline void Motor::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Motor.index)
}
inline ::uint32_t Motor::_internal_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_;
}
inline void Motor::_internal_set_index(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_ = value;
}

// bool enable = 2;
inline void Motor::clear_enable() {
  _impl_.enable_ = false;
}
inline bool Motor::enable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Motor.enable)
  return _internal_enable();
}
inline void Motor::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Motor.enable)
}
inline bool Motor::_internal_enable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enable_;
}
inline void Motor::_internal_set_enable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.enable_ = value;
}

// -------------------------------------------------------------------

// Servo

// uint32 index = 1;
inline void Servo::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t Servo::index() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Servo.index)
  return _internal_index();
}
inline void Servo::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Servo.index)
}
inline ::uint32_t Servo::_internal_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_;
}
inline void Servo::_internal_set_index(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_ = value;
}

// bool enable = 2;
inline void Servo::clear_enable() {
  _impl_.enable_ = false;
}
inline bool Servo::enable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Servo.enable)
  return _internal_enable();
}
inline void Servo::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Servo.enable)
}
inline bool Servo::_internal_enable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enable_;
}
inline void Servo::_internal_set_enable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.enable_ = value;
}

// -------------------------------------------------------------------

// DigitalSignal

// uint32 address = 1;
inline void DigitalSignal::clear_address() {
  _impl_.address_ = 0u;
}
inline ::uint32_t DigitalSignal::address() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DigitalSignal.address)
  return _internal_address();
}
inline void DigitalSignal::set_address(::uint32_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DigitalSignal.address)
}
inline ::uint32_t DigitalSignal::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_;
}
inline void DigitalSignal::_internal_set_address(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_ = value;
}

// .Nrmk.IndyFramework.DigitalState state = 2;
inline void DigitalSignal::clear_state() {
  _impl_.state_ = 0;
}
inline ::Nrmk::IndyFramework::DigitalState DigitalSignal::state() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DigitalSignal.state)
  return _internal_state();
}
inline void DigitalSignal::set_state(::Nrmk::IndyFramework::DigitalState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DigitalSignal.state)
}
inline ::Nrmk::IndyFramework::DigitalState DigitalSignal::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::DigitalState>(_impl_.state_);
}
inline void DigitalSignal::_internal_set_state(::Nrmk::IndyFramework::DigitalState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_ = value;
}

// -------------------------------------------------------------------

// EndtoolSignal

// string port = 1;
inline void EndtoolSignal::clear_port() {
  _impl_.port_.ClearToEmpty();
}
inline const std::string& EndtoolSignal::port() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolSignal.port)
  return _internal_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EndtoolSignal::set_port(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolSignal.port)
}
inline std::string* EndtoolSignal::mutable_port() {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.EndtoolSignal.port)
  return _s;
}
inline const std::string& EndtoolSignal::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_.Get();
}
inline void EndtoolSignal::_internal_set_port(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_.Set(value, GetArenaForAllocation());
}
inline std::string* EndtoolSignal::_internal_mutable_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.port_.Mutable( GetArenaForAllocation());
}
inline std::string* EndtoolSignal::release_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.EndtoolSignal.port)
  return _impl_.port_.Release();
}
inline void EndtoolSignal::set_allocated_port(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_.IsDefault()) {
          _impl_.port_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.EndtoolSignal.port)
}

// repeated .Nrmk.IndyFramework.EndtoolState states = 2;
inline int EndtoolSignal::_internal_states_size() const {
  return _internal_states().size();
}
inline int EndtoolSignal::states_size() const {
  return _internal_states_size();
}
inline void EndtoolSignal::clear_states() {
  _internal_mutable_states()->Clear();
}
inline ::Nrmk::IndyFramework::EndtoolState EndtoolSignal::states(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolSignal.states)
  return static_cast<::Nrmk::IndyFramework::EndtoolState>(_internal_states().Get(index));
}
inline void EndtoolSignal::set_states(int index, ::Nrmk::IndyFramework::EndtoolState value) {
  _internal_mutable_states()->Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.EndtoolSignal.states)
}
inline void EndtoolSignal::add_states(::Nrmk::IndyFramework::EndtoolState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_states()->Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.EndtoolSignal.states)
}
inline const ::google::protobuf::RepeatedField<int>& EndtoolSignal::states() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.EndtoolSignal.states)
  return _internal_states();
}
inline ::google::protobuf::RepeatedField<int>* EndtoolSignal::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.EndtoolSignal.states)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_states();
}
inline const ::google::protobuf::RepeatedField<int>& EndtoolSignal::_internal_states() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.states_;
}
inline ::google::protobuf::RepeatedField<int>* EndtoolSignal::_internal_mutable_states() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.states_;
}

// -------------------------------------------------------------------

// AnalogSignal

// uint32 address = 1;
inline void AnalogSignal::clear_address() {
  _impl_.address_ = 0u;
}
inline ::uint32_t AnalogSignal::address() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.AnalogSignal.address)
  return _internal_address();
}
inline void AnalogSignal::set_address(::uint32_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.AnalogSignal.address)
}
inline ::uint32_t AnalogSignal::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_;
}
inline void AnalogSignal::_internal_set_address(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_ = value;
}

// int32 voltage = 2;
inline void AnalogSignal::clear_voltage() {
  _impl_.voltage_ = 0;
}
inline ::int32_t AnalogSignal::voltage() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.AnalogSignal.voltage)
  return _internal_voltage();
}
inline void AnalogSignal::set_voltage(::int32_t value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.AnalogSignal.voltage)
}
inline ::int32_t AnalogSignal::_internal_voltage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.voltage_;
}
inline void AnalogSignal::_internal_set_voltage(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.voltage_ = value;
}

// -------------------------------------------------------------------

// MotorList

// repeated .Nrmk.IndyFramework.Motor motors = 1;
inline int MotorList::_internal_motors_size() const {
  return _internal_motors().size();
}
inline int MotorList::motors_size() const {
  return _internal_motors_size();
}
inline void MotorList::clear_motors() {
  _internal_mutable_motors()->Clear();
}
inline ::Nrmk::IndyFramework::Motor* MotorList::mutable_motors(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MotorList.motors)
  return _internal_mutable_motors()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Motor >*
MotorList::mutable_motors() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MotorList.motors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_motors();
}
inline const ::Nrmk::IndyFramework::Motor& MotorList::motors(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotorList.motors)
    return _internal_motors().Get(index);
}
inline ::Nrmk::IndyFramework::Motor* MotorList::add_motors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::Motor* _add = _internal_mutable_motors()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MotorList.motors)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::Motor >&
MotorList::motors() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MotorList.motors)
  return _internal_motors();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Motor>&
MotorList::_internal_motors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.motors_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::Motor>*
MotorList::_internal_mutable_motors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.motors_;
}

// -------------------------------------------------------------------

// DigitalList

// repeated .Nrmk.IndyFramework.DigitalSignal signals = 1;
inline int DigitalList::_internal_signals_size() const {
  return _internal_signals().size();
}
inline int DigitalList::signals_size() const {
  return _internal_signals_size();
}
inline void DigitalList::clear_signals() {
  _internal_mutable_signals()->Clear();
}
inline ::Nrmk::IndyFramework::DigitalSignal* DigitalList::mutable_signals(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DigitalList.signals)
  return _internal_mutable_signals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
DigitalList::mutable_signals() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DigitalList.signals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_signals();
}
inline const ::Nrmk::IndyFramework::DigitalSignal& DigitalList::signals(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DigitalList.signals)
    return _internal_signals().Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* DigitalList::add_signals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::DigitalSignal* _add = _internal_mutable_signals()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DigitalList.signals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
DigitalList::signals() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DigitalList.signals)
  return _internal_signals();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>&
DigitalList::_internal_signals() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.signals_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::DigitalSignal>*
DigitalList::_internal_mutable_signals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.signals_;
}

// -------------------------------------------------------------------

// EndtoolSignalList

// repeated .Nrmk.IndyFramework.EndtoolSignal signals = 1;
inline int EndtoolSignalList::_internal_signals_size() const {
  return _internal_signals().size();
}
inline int EndtoolSignalList::signals_size() const {
  return _internal_signals_size();
}
inline void EndtoolSignalList::clear_signals() {
  _internal_mutable_signals()->Clear();
}
inline ::Nrmk::IndyFramework::EndtoolSignal* EndtoolSignalList::mutable_signals(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.EndtoolSignalList.signals)
  return _internal_mutable_signals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >*
EndtoolSignalList::mutable_signals() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.EndtoolSignalList.signals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_signals();
}
inline const ::Nrmk::IndyFramework::EndtoolSignal& EndtoolSignalList::signals(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.EndtoolSignalList.signals)
    return _internal_signals().Get(index);
}
inline ::Nrmk::IndyFramework::EndtoolSignal* EndtoolSignalList::add_signals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::EndtoolSignal* _add = _internal_mutable_signals()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.EndtoolSignalList.signals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >&
EndtoolSignalList::signals() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.EndtoolSignalList.signals)
  return _internal_signals();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::EndtoolSignal>&
EndtoolSignalList::_internal_signals() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.signals_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::EndtoolSignal>*
EndtoolSignalList::_internal_mutable_signals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.signals_;
}

// -------------------------------------------------------------------

// AnalogList

// repeated .Nrmk.IndyFramework.AnalogSignal signals = 1;
inline int AnalogList::_internal_signals_size() const {
  return _internal_signals().size();
}
inline int AnalogList::signals_size() const {
  return _internal_signals_size();
}
inline void AnalogList::clear_signals() {
  _internal_mutable_signals()->Clear();
}
inline ::Nrmk::IndyFramework::AnalogSignal* AnalogList::mutable_signals(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.AnalogList.signals)
  return _internal_mutable_signals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
AnalogList::mutable_signals() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.AnalogList.signals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_signals();
}
inline const ::Nrmk::IndyFramework::AnalogSignal& AnalogList::signals(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.AnalogList.signals)
    return _internal_signals().Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* AnalogList::add_signals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Nrmk::IndyFramework::AnalogSignal* _add = _internal_mutable_signals()->Add();
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.AnalogList.signals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
AnalogList::signals() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.AnalogList.signals)
  return _internal_signals();
}
inline const ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>&
AnalogList::_internal_signals() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.signals_;
}
inline ::google::protobuf::RepeatedPtrField<::Nrmk::IndyFramework::AnalogSignal>*
AnalogList::_internal_mutable_signals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.signals_;
}

// -------------------------------------------------------------------

// DeviceInfo

// uint32 num_joints = 1;
inline void DeviceInfo::clear_num_joints() {
  _impl_.num_joints_ = 0u;
}
inline ::uint32_t DeviceInfo::num_joints() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DeviceInfo.num_joints)
  return _internal_num_joints();
}
inline void DeviceInfo::set_num_joints(::uint32_t value) {
  _internal_set_num_joints(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DeviceInfo.num_joints)
}
inline ::uint32_t DeviceInfo::_internal_num_joints() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_joints_;
}
inline void DeviceInfo::_internal_set_num_joints(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_joints_ = value;
}

// string robot_serial = 2;
inline void DeviceInfo::clear_robot_serial() {
  _impl_.robot_serial_.ClearToEmpty();
}
inline const std::string& DeviceInfo::robot_serial() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DeviceInfo.robot_serial)
  return _internal_robot_serial();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceInfo::set_robot_serial(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.robot_serial_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DeviceInfo.robot_serial)
}
inline std::string* DeviceInfo::mutable_robot_serial() {
  std::string* _s = _internal_mutable_robot_serial();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DeviceInfo.robot_serial)
  return _s;
}
inline const std::string& DeviceInfo::_internal_robot_serial() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.robot_serial_.Get();
}
inline void DeviceInfo::_internal_set_robot_serial(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.robot_serial_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_robot_serial() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.robot_serial_.Mutable( GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_robot_serial() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.DeviceInfo.robot_serial)
  return _impl_.robot_serial_.Release();
}
inline void DeviceInfo::set_allocated_robot_serial(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.robot_serial_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.robot_serial_.IsDefault()) {
          _impl_.robot_serial_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.DeviceInfo.robot_serial)
}

// float payload = 3;
inline void DeviceInfo::clear_payload() {
  _impl_.payload_ = 0;
}
inline float DeviceInfo::payload() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DeviceInfo.payload)
  return _internal_payload();
}
inline void DeviceInfo::set_payload(float value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DeviceInfo.payload)
}
inline float DeviceInfo::_internal_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.payload_;
}
inline void DeviceInfo::_internal_set_payload(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_ = value;
}

// string io_board_fw_ver = 10;
inline void DeviceInfo::clear_io_board_fw_ver() {
  _impl_.io_board_fw_ver_.ClearToEmpty();
}
inline const std::string& DeviceInfo::io_board_fw_ver() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DeviceInfo.io_board_fw_ver)
  return _internal_io_board_fw_ver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceInfo::set_io_board_fw_ver(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.io_board_fw_ver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DeviceInfo.io_board_fw_ver)
}
inline std::string* DeviceInfo::mutable_io_board_fw_ver() {
  std::string* _s = _internal_mutable_io_board_fw_ver();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DeviceInfo.io_board_fw_ver)
  return _s;
}
inline const std::string& DeviceInfo::_internal_io_board_fw_ver() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.io_board_fw_ver_.Get();
}
inline void DeviceInfo::_internal_set_io_board_fw_ver(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.io_board_fw_ver_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_io_board_fw_ver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.io_board_fw_ver_.Mutable( GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_io_board_fw_ver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.DeviceInfo.io_board_fw_ver)
  return _impl_.io_board_fw_ver_.Release();
}
inline void DeviceInfo::set_allocated_io_board_fw_ver(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.io_board_fw_ver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.io_board_fw_ver_.IsDefault()) {
          _impl_.io_board_fw_ver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.DeviceInfo.io_board_fw_ver)
}

// repeated string core_board_fw_vers = 11;
inline int DeviceInfo::_internal_core_board_fw_vers_size() const {
  return _internal_core_board_fw_vers().size();
}
inline int DeviceInfo::core_board_fw_vers_size() const {
  return _internal_core_board_fw_vers_size();
}
inline void DeviceInfo::clear_core_board_fw_vers() {
  _internal_mutable_core_board_fw_vers()->Clear();
}
inline std::string* DeviceInfo::add_core_board_fw_vers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_core_board_fw_vers()->Add();
  // @@protoc_insertion_point(field_add_mutable:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
  return _s;
}
inline const std::string& DeviceInfo::core_board_fw_vers(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
  return _internal_core_board_fw_vers().Get(index);
}
inline std::string* DeviceInfo::mutable_core_board_fw_vers(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
  return _internal_mutable_core_board_fw_vers()->Mutable(index);
}
inline void DeviceInfo::set_core_board_fw_vers(int index, const std::string& value) {
  _internal_mutable_core_board_fw_vers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
}
inline void DeviceInfo::set_core_board_fw_vers(int index, std::string&& value) {
  _internal_mutable_core_board_fw_vers()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
}
inline void DeviceInfo::set_core_board_fw_vers(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_core_board_fw_vers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
}
inline void DeviceInfo::set_core_board_fw_vers(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_core_board_fw_vers()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
}
inline void DeviceInfo::set_core_board_fw_vers(int index, absl::string_view value) {
  _internal_mutable_core_board_fw_vers()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
}
inline void DeviceInfo::add_core_board_fw_vers(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_core_board_fw_vers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
}
inline void DeviceInfo::add_core_board_fw_vers(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_core_board_fw_vers()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
}
inline void DeviceInfo::add_core_board_fw_vers(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_core_board_fw_vers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
}
inline void DeviceInfo::add_core_board_fw_vers(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_core_board_fw_vers()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
}
inline void DeviceInfo::add_core_board_fw_vers(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_core_board_fw_vers()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DeviceInfo::core_board_fw_vers() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
  return _internal_core_board_fw_vers();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* DeviceInfo::mutable_core_board_fw_vers() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_core_board_fw_vers();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DeviceInfo::_internal_core_board_fw_vers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.core_board_fw_vers_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DeviceInfo::_internal_mutable_core_board_fw_vers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.core_board_fw_vers_;
}

// string endtool_board_fw_ver = 12;
inline void DeviceInfo::clear_endtool_board_fw_ver() {
  _impl_.endtool_board_fw_ver_.ClearToEmpty();
}
inline const std::string& DeviceInfo::endtool_board_fw_ver() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DeviceInfo.endtool_board_fw_ver)
  return _internal_endtool_board_fw_ver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceInfo::set_endtool_board_fw_ver(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.endtool_board_fw_ver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DeviceInfo.endtool_board_fw_ver)
}
inline std::string* DeviceInfo::mutable_endtool_board_fw_ver() {
  std::string* _s = _internal_mutable_endtool_board_fw_ver();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DeviceInfo.endtool_board_fw_ver)
  return _s;
}
inline const std::string& DeviceInfo::_internal_endtool_board_fw_ver() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.endtool_board_fw_ver_.Get();
}
inline void DeviceInfo::_internal_set_endtool_board_fw_ver(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.endtool_board_fw_ver_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_endtool_board_fw_ver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.endtool_board_fw_ver_.Mutable( GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_endtool_board_fw_ver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.DeviceInfo.endtool_board_fw_ver)
  return _impl_.endtool_board_fw_ver_.Release();
}
inline void DeviceInfo::set_allocated_endtool_board_fw_ver(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.endtool_board_fw_ver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.endtool_board_fw_ver_.IsDefault()) {
          _impl_.endtool_board_fw_ver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.DeviceInfo.endtool_board_fw_ver)
}

// string controller_ver = 20;
inline void DeviceInfo::clear_controller_ver() {
  _impl_.controller_ver_.ClearToEmpty();
}
inline const std::string& DeviceInfo::controller_ver() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DeviceInfo.controller_ver)
  return _internal_controller_ver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceInfo::set_controller_ver(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.controller_ver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DeviceInfo.controller_ver)
}
inline std::string* DeviceInfo::mutable_controller_ver() {
  std::string* _s = _internal_mutable_controller_ver();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DeviceInfo.controller_ver)
  return _s;
}
inline const std::string& DeviceInfo::_internal_controller_ver() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.controller_ver_.Get();
}
inline void DeviceInfo::_internal_set_controller_ver(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.controller_ver_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_controller_ver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.controller_ver_.Mutable( GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_controller_ver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.DeviceInfo.controller_ver)
  return _impl_.controller_ver_.Release();
}
inline void DeviceInfo::set_allocated_controller_ver(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.controller_ver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.controller_ver_.IsDefault()) {
          _impl_.controller_ver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.DeviceInfo.controller_ver)
}

// string controller_detail = 21;
inline void DeviceInfo::clear_controller_detail() {
  _impl_.controller_detail_.ClearToEmpty();
}
inline const std::string& DeviceInfo::controller_detail() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DeviceInfo.controller_detail)
  return _internal_controller_detail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceInfo::set_controller_detail(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.controller_detail_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DeviceInfo.controller_detail)
}
inline std::string* DeviceInfo::mutable_controller_detail() {
  std::string* _s = _internal_mutable_controller_detail();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DeviceInfo.controller_detail)
  return _s;
}
inline const std::string& DeviceInfo::_internal_controller_detail() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.controller_detail_.Get();
}
inline void DeviceInfo::_internal_set_controller_detail(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.controller_detail_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_controller_detail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.controller_detail_.Mutable( GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_controller_detail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.DeviceInfo.controller_detail)
  return _impl_.controller_detail_.Release();
}
inline void DeviceInfo::set_allocated_controller_detail(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.controller_detail_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.controller_detail_.IsDefault()) {
          _impl_.controller_detail_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.DeviceInfo.controller_detail)
}

// string controller_date = 22;
inline void DeviceInfo::clear_controller_date() {
  _impl_.controller_date_.ClearToEmpty();
}
inline const std::string& DeviceInfo::controller_date() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DeviceInfo.controller_date)
  return _internal_controller_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceInfo::set_controller_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.controller_date_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DeviceInfo.controller_date)
}
inline std::string* DeviceInfo::mutable_controller_date() {
  std::string* _s = _internal_mutable_controller_date();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DeviceInfo.controller_date)
  return _s;
}
inline const std::string& DeviceInfo::_internal_controller_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.controller_date_.Get();
}
inline void DeviceInfo::_internal_set_controller_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.controller_date_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_controller_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.controller_date_.Mutable( GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_controller_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.DeviceInfo.controller_date)
  return _impl_.controller_date_.Release();
}
inline void DeviceInfo::set_allocated_controller_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.controller_date_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.controller_date_.IsDefault()) {
          _impl_.controller_date_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.DeviceInfo.controller_date)
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool DeviceInfo::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& DeviceInfo::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& DeviceInfo::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DeviceInfo.response)
  return _internal_response();
}
inline void DeviceInfo::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.DeviceInfo.response)
}
inline ::Nrmk::IndyFramework::Response* DeviceInfo::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* DeviceInfo::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.DeviceInfo.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* DeviceInfo::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* DeviceInfo::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.DeviceInfo.response)
  return _msg;
}
inline void DeviceInfo::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.DeviceInfo.response)
}

// -------------------------------------------------------------------

// BrakeControlStyle

// .Nrmk.IndyFramework.BrakeControlStyle.ControlStyle style = 1;
inline void BrakeControlStyle::clear_style() {
  _impl_.style_ = 0;
}
inline ::Nrmk::IndyFramework::BrakeControlStyle_ControlStyle BrakeControlStyle::style() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BrakeControlStyle.style)
  return _internal_style();
}
inline void BrakeControlStyle::set_style(::Nrmk::IndyFramework::BrakeControlStyle_ControlStyle value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BrakeControlStyle.style)
}
inline ::Nrmk::IndyFramework::BrakeControlStyle_ControlStyle BrakeControlStyle::_internal_style() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::BrakeControlStyle_ControlStyle>(_impl_.style_);
}
inline void BrakeControlStyle::_internal_set_style(::Nrmk::IndyFramework::BrakeControlStyle_ControlStyle value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.style_ = value;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool BrakeControlStyle::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& BrakeControlStyle::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& BrakeControlStyle::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BrakeControlStyle.response)
  return _internal_response();
}
inline void BrakeControlStyle::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.BrakeControlStyle.response)
}
inline ::Nrmk::IndyFramework::Response* BrakeControlStyle::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* BrakeControlStyle::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.BrakeControlStyle.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* BrakeControlStyle::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* BrakeControlStyle::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.BrakeControlStyle.response)
  return _msg;
}
inline void BrakeControlStyle::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.BrakeControlStyle.response)
}

// -------------------------------------------------------------------

// GetEL5001Data

// int32 status = 1;
inline void GetEL5001Data::clear_status() {
  _impl_.status_ = 0;
}
inline ::int32_t GetEL5001Data::status() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetEL5001Data.status)
  return _internal_status();
}
inline void GetEL5001Data::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetEL5001Data.status)
}
inline ::int32_t GetEL5001Data::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline void GetEL5001Data::_internal_set_status(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// int32 value = 2;
inline void GetEL5001Data::clear_value() {
  _impl_.value_ = 0;
}
inline ::int32_t GetEL5001Data::value() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetEL5001Data.value)
  return _internal_value();
}
inline void GetEL5001Data::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetEL5001Data.value)
}
inline ::int32_t GetEL5001Data::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void GetEL5001Data::_internal_set_value(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// int32 delta = 3;
inline void GetEL5001Data::clear_delta() {
  _impl_.delta_ = 0;
}
inline ::int32_t GetEL5001Data::delta() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetEL5001Data.delta)
  return _internal_delta();
}
inline void GetEL5001Data::set_delta(::int32_t value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetEL5001Data.delta)
}
inline ::int32_t GetEL5001Data::_internal_delta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delta_;
}
inline void GetEL5001Data::_internal_set_delta(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.delta_ = value;
}

// float average = 4;
inline void GetEL5001Data::clear_average() {
  _impl_.average_ = 0;
}
inline float GetEL5001Data::average() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetEL5001Data.average)
  return _internal_average();
}
inline void GetEL5001Data::set_average(float value) {
  _internal_set_average(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetEL5001Data.average)
}
inline float GetEL5001Data::_internal_average() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.average_;
}
inline void GetEL5001Data::_internal_set_average(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.average_ = value;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool GetEL5001Data::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& GetEL5001Data::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& GetEL5001Data::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetEL5001Data.response)
  return _internal_response();
}
inline void GetEL5001Data::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.GetEL5001Data.response)
}
inline ::Nrmk::IndyFramework::Response* GetEL5001Data::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* GetEL5001Data::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.GetEL5001Data.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* GetEL5001Data::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* GetEL5001Data::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.GetEL5001Data.response)
  return _msg;
}
inline void GetEL5001Data::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.GetEL5001Data.response)
}

// -------------------------------------------------------------------

// GetEL5101Data

// int32 status = 1;
inline void GetEL5101Data::clear_status() {
  _impl_.status_ = 0;
}
inline ::int32_t GetEL5101Data::status() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetEL5101Data.status)
  return _internal_status();
}
inline void GetEL5101Data::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetEL5101Data.status)
}
inline ::int32_t GetEL5101Data::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline void GetEL5101Data::_internal_set_status(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// int32 value = 2;
inline void GetEL5101Data::clear_value() {
  _impl_.value_ = 0;
}
inline ::int32_t GetEL5101Data::value() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetEL5101Data.value)
  return _internal_value();
}
inline void GetEL5101Data::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetEL5101Data.value)
}
inline ::int32_t GetEL5101Data::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void GetEL5101Data::_internal_set_value(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// int32 latch = 3;
inline void GetEL5101Data::clear_latch() {
  _impl_.latch_ = 0;
}
inline ::int32_t GetEL5101Data::latch() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetEL5101Data.latch)
  return _internal_latch();
}
inline void GetEL5101Data::set_latch(::int32_t value) {
  _internal_set_latch(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetEL5101Data.latch)
}
inline ::int32_t GetEL5101Data::_internal_latch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.latch_;
}
inline void GetEL5101Data::_internal_set_latch(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.latch_ = value;
}

// int32 delta = 4;
inline void GetEL5101Data::clear_delta() {
  _impl_.delta_ = 0;
}
inline ::int32_t GetEL5101Data::delta() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetEL5101Data.delta)
  return _internal_delta();
}
inline void GetEL5101Data::set_delta(::int32_t value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetEL5101Data.delta)
}
inline ::int32_t GetEL5101Data::_internal_delta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delta_;
}
inline void GetEL5101Data::_internal_set_delta(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.delta_ = value;
}

// float average = 5;
inline void GetEL5101Data::clear_average() {
  _impl_.average_ = 0;
}
inline float GetEL5101Data::average() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetEL5101Data.average)
  return _internal_average();
}
inline void GetEL5101Data::set_average(float value) {
  _internal_set_average(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetEL5101Data.average)
}
inline float GetEL5101Data::_internal_average() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.average_;
}
inline void GetEL5101Data::_internal_set_average(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.average_ = value;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool GetEL5101Data::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& GetEL5101Data::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& GetEL5101Data::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetEL5101Data.response)
  return _internal_response();
}
inline void GetEL5101Data::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.GetEL5101Data.response)
}
inline ::Nrmk::IndyFramework::Response* GetEL5101Data::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* GetEL5101Data::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.GetEL5101Data.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* GetEL5101Data::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* GetEL5101Data::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.GetEL5101Data.response)
  return _msg;
}
inline void GetEL5101Data::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.GetEL5101Data.response)
}

// -------------------------------------------------------------------

// FTSensorType

// string ft_sensor_type = 1;
inline void FTSensorType::clear_ft_sensor_type() {
  _impl_.ft_sensor_type_.ClearToEmpty();
}
inline const std::string& FTSensorType::ft_sensor_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorType.ft_sensor_type)
  return _internal_ft_sensor_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FTSensorType::set_ft_sensor_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_sensor_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorType.ft_sensor_type)
}
inline std::string* FTSensorType::mutable_ft_sensor_type() {
  std::string* _s = _internal_mutable_ft_sensor_type();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.FTSensorType.ft_sensor_type)
  return _s;
}
inline const std::string& FTSensorType::_internal_ft_sensor_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_sensor_type_.Get();
}
inline void FTSensorType::_internal_set_ft_sensor_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_sensor_type_.Set(value, GetArenaForAllocation());
}
inline std::string* FTSensorType::_internal_mutable_ft_sensor_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ft_sensor_type_.Mutable( GetArenaForAllocation());
}
inline std::string* FTSensorType::release_ft_sensor_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.FTSensorType.ft_sensor_type)
  return _impl_.ft_sensor_type_.Release();
}
inline void FTSensorType::set_allocated_ft_sensor_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ft_sensor_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ft_sensor_type_.IsDefault()) {
          _impl_.ft_sensor_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.FTSensorType.ft_sensor_type)
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool FTSensorType::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& FTSensorType::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& FTSensorType::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorType.response)
  return _internal_response();
}
inline void FTSensorType::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.FTSensorType.response)
}
inline ::Nrmk::IndyFramework::Response* FTSensorType::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* FTSensorType::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.FTSensorType.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* FTSensorType::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* FTSensorType::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.FTSensorType.response)
  return _msg;
}
inline void FTSensorType::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.FTSensorType.response)
}

// -------------------------------------------------------------------

// FTSensorData

// float ft_Fx = 1;
inline void FTSensorData::clear_ft_fx() {
  _impl_.ft_fx_ = 0;
}
inline float FTSensorData::ft_fx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorData.ft_Fx)
  return _internal_ft_fx();
}
inline void FTSensorData::set_ft_fx(float value) {
  _internal_set_ft_fx(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorData.ft_Fx)
}
inline float FTSensorData::_internal_ft_fx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_fx_;
}
inline void FTSensorData::_internal_set_ft_fx(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_fx_ = value;
}

// float ft_Fy = 2;
inline void FTSensorData::clear_ft_fy() {
  _impl_.ft_fy_ = 0;
}
inline float FTSensorData::ft_fy() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorData.ft_Fy)
  return _internal_ft_fy();
}
inline void FTSensorData::set_ft_fy(float value) {
  _internal_set_ft_fy(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorData.ft_Fy)
}
inline float FTSensorData::_internal_ft_fy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_fy_;
}
inline void FTSensorData::_internal_set_ft_fy(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_fy_ = value;
}

// float ft_Fz = 3;
inline void FTSensorData::clear_ft_fz() {
  _impl_.ft_fz_ = 0;
}
inline float FTSensorData::ft_fz() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorData.ft_Fz)
  return _internal_ft_fz();
}
inline void FTSensorData::set_ft_fz(float value) {
  _internal_set_ft_fz(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorData.ft_Fz)
}
inline float FTSensorData::_internal_ft_fz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_fz_;
}
inline void FTSensorData::_internal_set_ft_fz(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_fz_ = value;
}

// float ft_Tx = 4;
inline void FTSensorData::clear_ft_tx() {
  _impl_.ft_tx_ = 0;
}
inline float FTSensorData::ft_tx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorData.ft_Tx)
  return _internal_ft_tx();
}
inline void FTSensorData::set_ft_tx(float value) {
  _internal_set_ft_tx(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorData.ft_Tx)
}
inline float FTSensorData::_internal_ft_tx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_tx_;
}
inline void FTSensorData::_internal_set_ft_tx(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_tx_ = value;
}

// float ft_Ty = 5;
inline void FTSensorData::clear_ft_ty() {
  _impl_.ft_ty_ = 0;
}
inline float FTSensorData::ft_ty() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorData.ft_Ty)
  return _internal_ft_ty();
}
inline void FTSensorData::set_ft_ty(float value) {
  _internal_set_ft_ty(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorData.ft_Ty)
}
inline float FTSensorData::_internal_ft_ty() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_ty_;
}
inline void FTSensorData::_internal_set_ft_ty(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_ty_ = value;
}

// float ft_Tz = 6;
inline void FTSensorData::clear_ft_tz() {
  _impl_.ft_tz_ = 0;
}
inline float FTSensorData::ft_tz() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorData.ft_Tz)
  return _internal_ft_tz();
}
inline void FTSensorData::set_ft_tz(float value) {
  _internal_set_ft_tz(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FTSensorData.ft_Tz)
}
inline float FTSensorData::_internal_ft_tz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ft_tz_;
}
inline void FTSensorData::_internal_set_ft_tz(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ft_tz_ = value;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool FTSensorData::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::Nrmk::IndyFramework::Response& FTSensorData::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Nrmk::IndyFramework::Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Nrmk::IndyFramework::Response&>(::Nrmk::IndyFramework::_Response_default_instance_);
}
inline const ::Nrmk::IndyFramework::Response& FTSensorData::response() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FTSensorData.response)
  return _internal_response();
}
inline void FTSensorData::unsafe_arena_set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Nrmk.IndyFramework.FTSensorData.response)
}
inline ::Nrmk::IndyFramework::Response* FTSensorData::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Nrmk::IndyFramework::Response* FTSensorData::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.FTSensorData.response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Nrmk::IndyFramework::Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* FTSensorData::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaForAllocation());
    _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(p);
  }
  return _impl_.response_;
}
inline ::Nrmk::IndyFramework::Response* FTSensorData::mutable_response() {
  ::Nrmk::IndyFramework::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.FTSensorData.response)
  return _msg;
}
inline void FTSensorData::set_allocated_response(::Nrmk::IndyFramework::Response* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_ = reinterpret_cast<::Nrmk::IndyFramework::Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.FTSensorData.response)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Nrmk::IndyFramework::BrakeControlStyle_ControlStyle> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::BrakeControlStyle_ControlStyle>() {
  return ::Nrmk::IndyFramework::BrakeControlStyle_ControlStyle_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::DigitalState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::DigitalState>() {
  return ::Nrmk::IndyFramework::DigitalState_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::EndtoolState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::EndtoolState>() {
  return ::Nrmk::IndyFramework::EndtoolState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_device_5fmsgs_2eproto_2epb_2eh
