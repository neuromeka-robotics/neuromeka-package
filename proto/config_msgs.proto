syntax = "proto3";
package Nrmk.IndyFramework;
import "common_msgs.proto";
import "device_msgs.proto";

//////////////////////////Frame/////////////////////////
message Frame {
  repeated float fpos = 1;
}

//////////////////////////FT sensor Frame/////////////////////////
message FTsensorFrame {
  float translation = 1;
  float rotation = 2;
}


//////////////////////////JointPos/////////////////////////
message JointPos {
  repeated float jpos = 1;
}

//////////////////////////Frame/////////////////////////
message PlanarFrame {
  repeated float fpos0 = 1;
  repeated float fpos1 = 2;
  repeated float fpos2 = 3;
}

//////////////////////////FrameResult/////////////////////////
message FrameResult {
  repeated float fpos = 1;
  Response response = 2;
}

//////////////////////////Ratio/////////////////////////
message Ratio {
  uint32 ratio = 1; // 0 ~ 100
}

//////////////////////////AutoServoOffConfig/////////////////////////
message AutoServoOffConfig {
  bool enable = 1;
  float time = 2;
}

//////////////////////////CollTuningConfig/////////////////////////
message CollTuningConfig {
  enum TuningPrecision {
    LOW_TUNE = 0;
    MIDDLE_TUNE = 1;
    HIGH_TUNE = 2;
  }
  enum TuningSpace {
    NO_TUNE = 0;
    JOINT_TUNE = 1;
    TASK_TUNE = 2;
    ALL_TUNE = 3;
  }

  TuningPrecision precision = 1;
  TuningSpace tuning_space = 2;
  int32 vel_level_max = 3;
}

//////////////////////////JointGainSet/////////////////////////
message JointGainSet {
  repeated float kp = 1;
  repeated float kv = 2;
  repeated float kl2 = 3;
}
//////////////////////////TaskGainSet/////////////////////////
message TaskGainSet {
  repeated float kp = 1;
  repeated float kv = 2;
  repeated float kl2 = 3;
}
//////////////////////////ImpedanceGainSet/////////////////////////
message ImpedanceGainSet {
  repeated float mass = 1;
  repeated float damping = 2;
  repeated float stiffness = 3;
  repeated float kl2 = 4;
}

//////////////////////////ForceGainSet/////////////////////////
message ForceGainSet {
  repeated float kp = 1;
  repeated float kv = 2;
  repeated float kl2 = 3;
  repeated float mass = 4;
  repeated float damping = 5;
  repeated float stiffness = 6;
  repeated float kpf = 7;
  repeated float kif = 8;
}

//////////////////////////TestGainSet/////////////////////////
message TestGainSet {
  repeated float kpctc = 1;
  repeated float kvctc = 2;
  repeated float kictc = 3;
  repeated float knric = 4;
  repeated float kpnric = 5;
  repeated float kinric = 6;
}

//////////////////////////CustomGainSet/////////////////////////
message CustomGainSet {
  repeated float gain0 = 1;
  repeated float gain1 = 2;
  repeated float gain2 = 3;
  repeated float gain3 = 4;
  repeated float gain4 = 5;
  repeated float gain5 = 6;
  repeated float gain6 = 7;
  repeated float gain7 = 8;
  repeated float gain8 = 9;
  repeated float gain9 = 10;
}

message NewControllerTestState {
  bool Jenable = 1;
  bool Tenable = 2;
}
//////////////////////////FrictionCompSet/////////////////////////
message FrictionCompSet {
  bool control_comp_enable = 1;
  repeated int32 control_comp_levels = 2;

  bool teaching_comp_enable = 3;
  repeated int32 teaching_comp_levels = 4;

}
//////////////////////////MountingAngles/////////////////////////
message MountingAngles {
  float ry = 1;
  float rz = 2;
}
//////////////////////////ToolProperties/////////////////////////
message ToolProperties {
  float mass = 1;
  repeated float center_of_mass = 2;
  repeated float inertia = 3;
}
//////////////////////////CollisionSensLevel/////////////////////////
message CollisionSensLevel {
  uint32 level = 1;
}
//////////////////////////CollisionThresholds/////////////////////////
message CollisionThresholds {
  repeated float j_torque_bases = 1;
  repeated float j_torque_tangents = 2;
  repeated float t_torque_bases = 3;
  repeated float t_torque_tangents = 4;
  repeated float error_bases = 5;
  repeated float error_tangents = 6;
  repeated float t_constvel_torque_bases = 7;
  repeated float t_constvel_torque_tangents = 8;
  repeated float t_conveyor_torque_bases = 9;
  repeated float t_conveyor_torque_tangents = 10;
}
//////////////////////////CollisionPolicy/////////////////////////
message CollisionPolicy {
  CollisionPolicyType policy = 1;
  float sleep_time = 2;
  float gravity_time = 3;
}
//////////////////////////SafetyLimits/////////////////////////
message SafetyLimits {
  float power_limit = 1;
  float power_limit_ratio = 2;
  float tcp_force_limit = 3;
  float tcp_force_limit_ratio = 4;
  float tcp_speed_limit = 5;
  float tcp_speed_limit_ratio = 6;
  repeated float joint_limits = 7;
}
//////////////////////////SafetyStopConfig/////////////////////////
message SafetyStopConfig {
  StopCategory joint_position_limit_stop_cat = 1;
  StopCategory joint_speed_limit_stop_cat = 2;
  StopCategory joint_torque_limit_stop_cat = 3;
  StopCategory tcp_speed_limit_stop_cat = 4;
  StopCategory tcp_force_limit_stop_cat = 5;
  StopCategory power_limit_stop_cat = 6;
}
//////////////////////////IOFunction/////////////////////////
//message DIFunction {
//  int32 function_code = 1;
//  int32 parameter = 2;
//}
//////////////////////////DIConfig/////////////////////////
message DIConfig {
  int32 function_code = 1;
  string function_name = 2;
  repeated DigitalSignal triggerSignals = 3;
  repeated DigitalSignal successSignals = 4;
  repeated DigitalSignal failureSignals = 5;
}
//////////////////////////DIConfigList/////////////////////////
message DIConfigList {
  repeated DIConfig di_configs = 1;
}
//////////////////////////DOConfig/////////////////////////
message DOConfig {
  int32 state_code = 1;
  string state_name = 2;
  repeated DigitalSignal onSignals = 3;
  repeated DigitalSignal offSignals = 4;
}
//////////////////////////DOConfigList/////////////////////////
message DOConfigList {
  repeated DOConfig do_configs = 1;
}