syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.custom.neuromeka.EyeTask";
option java_outer_classname = "EyeTaskProto";
option objc_class_prefix = "FDDO";

//package EyeTask;
package IndyFramework.Protobuf.EyeTask;

service EyeTask {
  rpc GetServerInfo(ServerInfoRequest) returns (ServerInfoResponse) {}
  rpc GetImage(ImageRequest) returns (ImageResponse) {}
  rpc GetClassList(Request) returns (ClassList) {}
  rpc Detect(DetectRequest) returns (DetectResponse) {}
  rpc Retrieve(RetrieveRequest) returns (DetectResponse) {}

  rpc GetWeldingLinesInfo(WeldingLinesInfoRequest) returns (WeldingLinesInfoResponse) {}
  rpc GetStraightLineInfo(StraightLineInfoRequest) returns (StraightLineInfoResponse) {}
  rpc GetCircularLineInfo(CircularLineInfoRequest) returns (CircularLineInfoResponse) {}
  rpc DoCalibration(CalibrationRequest) returns (CalibrationResponse) {}  //Calibration Trigger
  rpc IsCalibrationDone(CalibrationDoneRequest) returns (CalibrationDoneResponse) {} // Calibration polling
}

message Point {
  float x = 1;
  float y = 2;
  float z = 3;
}

message WeldingLinesInfo {// CNBL-38
  string name = 1;                      // LeftVertical, RightVertical, CenterHorizontal
  Point start_point = 2;                // Start Point
  Point end_point = 3;                  // End Point
}

message WeldingLinesInfoRequest {       // Client -> Eye
  int32 id = 1;                         // response has same id as request
}

message WeldingLinesInfoResponse {      // Eye -> Client
  int32 id = 1;                         // response has same id as request
  repeated WeldingLinesInfo welding = 2;// list of welding lines (CNBL-38)
  repeated string cell_types = 3;       // 0: left, 1: right // "Girder","Slit","Slot","Slot_CPF","Slot_CPB"
  bool error_state = 4;                 // response error flag: true on error
}

message StraightLineInfoRequest {       // Client -> Eye
  int32 id = 1;                         // response has same id as request
}

message StraightLineInfoResponse {      // Eye -> Client
  int32 id = 1;                         // response has same id as request
  Point normal_vector = 2;              // normal vector on straight line plane
  Point start_point = 3;                // start point
  Point end_point = 4;                  // end point
  bool error_state = 5;                 // response error flag: true on error
}

message CircularLineThreePoints {       // three points method for a circle equation
  Point start_point = 1;                // start point
  Point via_point = 2;                  // via point
  Point end_point = 3;                  // end point
}

message CircularLineCenterRadius {      // center and radius method for a circle equation
  Point center_point = 1;               // center point
  float radius = 2;                     // radius
}

message CircularLineInfoRequest {       // Client -> Eye
  int32 id = 1;                         // response has same id as request
}

message CircularLineInfoResponse{       // Eye -> Client
  int32 id = 1;                               // response has same id as request
  Point normal_vector = 2;                    // normal vector on circle plane
  Point reference_vector = 3;                 // vector from start point to center
  CircularLineThreePoints point_method = 4;   // three points method for a circle equation
  CircularLineCenterRadius vector_method = 5; // center and radius method for a circle equation
  bool error_state = 6;                       // response error flag: true on error
}

message ServerInfoRequest {
  int32 id = 1;            // response has same id as request
}

message ServerInfoResponse {
  int32 id = 1;            // response has same id as request
  string version = 2;            // software version info
  string release_date = 3;            // release date
  string program_name = 4;            // program name
}

message CalibrationRequest {
  int32 id = 1;            // response has same id as request
}

message CalibrationResponse {
  int32 id = 1;  // response has same id as request
  repeated bool is_succeeded = 2;   // calibration success(true), [0]:Indy~Cam1, [1]:Indy~Cam2, [2]:Cam1~Cam2
  repeated float indy_cam_rms = 3;   // calibration rms, [0]:Indy~Cam1, [1]:Indy~Cam2, [2]:Cam1~Cam2
}

message CalibrationDoneRequest {
  int32 id = 1;      // same id as CalibrationRequest
}

message CalibrationDoneResponse {
  int32 id = 1;  // response has same id as request
  bool is_calibrated = 2;
  repeated bool is_succeeded = 3;   // calibration success(true), [0]:Indy~Cam1, [1]:Indy~Cam2, [2]:Cam1~Cam2
  repeated float indy_cam_rms = 4;   // calibration rms, [0]:Indy~Cam1, [1]:Indy~Cam2, [2]:Cam1~Cam2
}

message ImageRequest {// Client -> Eye
  int32 id = 1;                       // response has same id as request
  int32 type = 2;                     // 0=color, 1=depth, 2=both
}

message ImageResponse {// Eye -> Client
  int32 id = 1;                       // response has same id as request
  int32 type = 2;                     // 0=color, 1=depth, 2=both
  int32 width = 3;
  int32 height = 4;
  bytes color = 5;                    // byte array for uint8 color image
  bytes depth = 6;                    // byte array for uint16 depth image
  float depth_scale = 7;              // multiplier to convert the depth values to m-scale
  bool error_state = 8;               // response error flag: true on error
}

message Request {// Client -> Eye
  int32 id = 1;                       // response has same id as request
}

message ClassList {// Client -> Eye
  int32 id = 1;                       // response has same id as request
  repeated string class_names = 2;    // list of class names
  bool error_state = 8;               // response error flag: true on error
}

message DetectRequest {// Client -> Eye
  int32 id = 1;                       // response has same id as request
  int32 cls = 2;                      // target class index - 0: all, specific: 1~
  repeated float pose_cmd = 3;        // current end-effector pose: x,y,z,u,v,w
  string robot_ip = 4;                // ip of robot from the xavier side, for multi-robot case
}

message RetrieveRequest {// Client -> Eye
  int32 id = 1;                       // response has same id as request
  int32 cls = 2;                      // target class index - 0: all, specific: 1~
}

message DetectResponse {// Camera -> Master
  int32 id = 1;                       // response has same id as request
  bool detected = 2;                  // true if something detected
  bool passed = 3;                    // true if no inspection failure occurred
  int32 cls = 4;                      // index of detected class
  repeated float tar_ee_pose = 5;     // end-effector pose of target action : x,y,z,u,v,w
  repeated float tar_tool_pose = 6;   // selected tool pose of target action : x,y,z,u,v,w
  repeated float tar_obj_pose = 7;    // pose of detected object : x,y,z,u,v,w
  int32 tool_idx = 8;                 // index of selected tool
  bool error_state = 9;               // true if error is raised
  string error_module = 10;           // name of error-causing module, if error occured
}