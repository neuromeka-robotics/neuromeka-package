// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtde_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rtde_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rtde_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "device_msgs.pb.h"
#include "common_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rtde_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rtde_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rtde_5fmsgs_2eproto;
namespace Nrmk {
namespace IndyFramework {
class ControlData;
class ControlDataDefaultTypeInternal;
extern ControlDataDefaultTypeInternal _ControlData_default_instance_;
class ControlData2;
class ControlData2DefaultTypeInternal;
extern ControlData2DefaultTypeInternal _ControlData2_default_instance_;
class IOData;
class IODataDefaultTypeInternal;
extern IODataDefaultTypeInternal _IOData_default_instance_;
class MotionData;
class MotionDataDefaultTypeInternal;
extern MotionDataDefaultTypeInternal _MotionData_default_instance_;
class ProgramData;
class ProgramDataDefaultTypeInternal;
extern ProgramDataDefaultTypeInternal _ProgramData_default_instance_;
class ServoData;
class ServoDataDefaultTypeInternal;
extern ServoDataDefaultTypeInternal _ServoData_default_instance_;
class StopState;
class StopStateDefaultTypeInternal;
extern StopStateDefaultTypeInternal _StopState_default_instance_;
class TestRequest;
class TestRequestDefaultTypeInternal;
extern TestRequestDefaultTypeInternal _TestRequest_default_instance_;
class TestResponse;
class TestResponseDefaultTypeInternal;
extern TestResponseDefaultTypeInternal _TestResponse_default_instance_;
class ViolationData;
class ViolationDataDefaultTypeInternal;
extern ViolationDataDefaultTypeInternal _ViolationData_default_instance_;
class ViolationMessageQueue;
class ViolationMessageQueueDefaultTypeInternal;
extern ViolationMessageQueueDefaultTypeInternal _ViolationMessageQueue_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
PROTOBUF_NAMESPACE_OPEN
template<> ::Nrmk::IndyFramework::ControlData* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ControlData>(Arena*);
template<> ::Nrmk::IndyFramework::ControlData2* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ControlData2>(Arena*);
template<> ::Nrmk::IndyFramework::IOData* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::IOData>(Arena*);
template<> ::Nrmk::IndyFramework::MotionData* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MotionData>(Arena*);
template<> ::Nrmk::IndyFramework::ProgramData* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ProgramData>(Arena*);
template<> ::Nrmk::IndyFramework::ServoData* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ServoData>(Arena*);
template<> ::Nrmk::IndyFramework::StopState* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::StopState>(Arena*);
template<> ::Nrmk::IndyFramework::TestRequest* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TestRequest>(Arena*);
template<> ::Nrmk::IndyFramework::TestResponse* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TestResponse>(Arena*);
template<> ::Nrmk::IndyFramework::ViolationData* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ViolationData>(Arena*);
template<> ::Nrmk::IndyFramework::ViolationMessageQueue* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ViolationMessageQueue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Nrmk {
namespace IndyFramework {

enum StopState_StopCategory : int {
  StopState_StopCategory_STOP_CAT_0 = 0,
  StopState_StopCategory_STOP_CAT_1 = 1,
  StopState_StopCategory_STOP_CAT_2 = 2,
  StopState_StopCategory_STOP_CAT_NONE = -1,
  StopState_StopCategory_StopState_StopCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StopState_StopCategory_StopState_StopCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StopState_StopCategory_IsValid(int value);
constexpr StopState_StopCategory StopState_StopCategory_StopCategory_MIN = StopState_StopCategory_STOP_CAT_NONE;
constexpr StopState_StopCategory StopState_StopCategory_StopCategory_MAX = StopState_StopCategory_STOP_CAT_2;
constexpr int StopState_StopCategory_StopCategory_ARRAYSIZE = StopState_StopCategory_StopCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopState_StopCategory_descriptor();
template<typename T>
inline const std::string& StopState_StopCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StopState_StopCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StopState_StopCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StopState_StopCategory_descriptor(), enum_t_value);
}
inline bool StopState_StopCategory_Parse(
    const std::string& name, StopState_StopCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StopState_StopCategory>(
    StopState_StopCategory_descriptor(), name, value);
}
// ===================================================================

class TestRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TestRequest) */ {
 public:
  TestRequest();
  virtual ~TestRequest();

  TestRequest(const TestRequest& from);
  TestRequest(TestRequest&& from) noexcept
    : TestRequest() {
    *this = ::std::move(from);
  }

  inline TestRequest& operator=(const TestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRequest& operator=(TestRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestRequest* internal_default_instance() {
    return reinterpret_cast<const TestRequest*>(
               &_TestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TestRequest* other);
  friend void swap(TestRequest& a, TestRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestRequest* New() const final {
    return CreateMaybeMessage<TestRequest>(nullptr);
  }

  TestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestRequest& from);
  void MergeFrom(const TestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TestRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rtde_5fmsgs_2eproto);
    return ::descriptor_table_rtde_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strVal = 2;
  void clear_strval();
  static const int kStrValFieldNumber = 2;
  const std::string& strval() const;
  void set_strval(const std::string& value);
  void set_strval(std::string&& value);
  void set_strval(const char* value);
  void set_strval(const char* value, size_t size);
  std::string* mutable_strval();
  std::string* release_strval();
  void set_allocated_strval(std::string* strval);

  // int32 intVal = 1;
  void clear_intval();
  static const int kIntValFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 intval() const;
  void set_intval(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TestRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strval_;
  ::PROTOBUF_NAMESPACE_ID::int32 intval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TestResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TestResponse) */ {
 public:
  TestResponse();
  virtual ~TestResponse();

  TestResponse(const TestResponse& from);
  TestResponse(TestResponse&& from) noexcept
    : TestResponse() {
    *this = ::std::move(from);
  }

  inline TestResponse& operator=(const TestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestResponse& operator=(TestResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestResponse* internal_default_instance() {
    return reinterpret_cast<const TestResponse*>(
               &_TestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TestResponse* other);
  friend void swap(TestResponse& a, TestResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestResponse* New() const final {
    return CreateMaybeMessage<TestResponse>(nullptr);
  }

  TestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestResponse& from);
  void MergeFrom(const TestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TestResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rtde_5fmsgs_2eproto);
    return ::descriptor_table_rtde_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // int64 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TestResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int64 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MotionData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MotionData) */ {
 public:
  MotionData();
  virtual ~MotionData();

  MotionData(const MotionData& from);
  MotionData(MotionData&& from) noexcept
    : MotionData() {
    *this = ::std::move(from);
  }

  inline MotionData& operator=(const MotionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionData& operator=(MotionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MotionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotionData* internal_default_instance() {
    return reinterpret_cast<const MotionData*>(
               &_MotionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MotionData* other);
  friend void swap(MotionData& a, MotionData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MotionData* New() const final {
    return CreateMaybeMessage<MotionData>(nullptr);
  }

  MotionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionData& from);
  void MergeFrom(const MotionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MotionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rtde_5fmsgs_2eproto);
    return ::descriptor_table_rtde_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // .Nrmk.IndyFramework.TrajState traj_state = 1;
  void clear_traj_state();
  static const int kTrajStateFieldNumber = 1;
  ::Nrmk::IndyFramework::TrajState traj_state() const;
  void set_traj_state(::Nrmk::IndyFramework::TrajState value);

  // int32 traj_progress = 2;
  void clear_traj_progress();
  static const int kTrajProgressFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 traj_progress() const;
  void set_traj_progress(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_in_motion = 3;
  void clear_is_in_motion();
  static const int kIsInMotionFieldNumber = 3;
  bool is_in_motion() const;
  void set_is_in_motion(bool value);

  // bool is_target_reached = 4;
  void clear_is_target_reached();
  static const int kIsTargetReachedFieldNumber = 4;
  bool is_target_reached() const;
  void set_is_target_reached(bool value);

  // bool is_pausing = 5;
  void clear_is_pausing();
  static const int kIsPausingFieldNumber = 5;
  bool is_pausing() const;
  void set_is_pausing(bool value);

  // bool is_stopping = 6;
  void clear_is_stopping();
  static const int kIsStoppingFieldNumber = 6;
  bool is_stopping() const;
  void set_is_stopping(bool value);

  // bool has_motion = 7;
  void clear_has_motion();
  static const int kHasMotionFieldNumber = 7;
  bool has_motion() const;
  void set_has_motion(bool value);

  // int32 speed_ratio = 8;
  void clear_speed_ratio();
  static const int kSpeedRatioFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_ratio() const;
  void set_speed_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 motion_id = 9;
  void clear_motion_id();
  static const int kMotionIdFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 motion_id() const;
  void set_motion_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float remain_distance = 10;
  void clear_remain_distance();
  static const int kRemainDistanceFieldNumber = 10;
  float remain_distance() const;
  void set_remain_distance(float value);

  // uint32 motion_queue_size = 11;
  void clear_motion_queue_size();
  static const int kMotionQueueSizeFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::uint32 motion_queue_size() const;
  void set_motion_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 cur_traj_progress = 12;
  void clear_cur_traj_progress();
  static const int kCurTrajProgressFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_traj_progress() const;
  void set_cur_traj_progress(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MotionData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::Response* response_;
  int traj_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 traj_progress_;
  bool is_in_motion_;
  bool is_target_reached_;
  bool is_pausing_;
  bool is_stopping_;
  bool has_motion_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 motion_id_;
  float remain_distance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 motion_queue_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_traj_progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ControlData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ControlData) */ {
 public:
  ControlData();
  virtual ~ControlData();

  ControlData(const ControlData& from);
  ControlData(ControlData&& from) noexcept
    : ControlData() {
    *this = ::std::move(from);
  }

  inline ControlData& operator=(const ControlData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlData& operator=(ControlData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlData* internal_default_instance() {
    return reinterpret_cast<const ControlData*>(
               &_ControlData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ControlData* other);
  friend void swap(ControlData& a, ControlData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlData* New() const final {
    return CreateMaybeMessage<ControlData>(nullptr);
  }

  ControlData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlData& from);
  void MergeFrom(const ControlData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ControlData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rtde_5fmsgs_2eproto);
    return ::descriptor_table_rtde_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float q = 10;
  int q_size() const;
  void clear_q();
  static const int kQFieldNumber = 10;
  float q(int index) const;
  void set_q(int index, float value);
  void add_q(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      q() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_q();

  // repeated float qdot = 11;
  int qdot_size() const;
  void clear_qdot();
  static const int kQdotFieldNumber = 11;
  float qdot(int index) const;
  void set_qdot(int index, float value);
  void add_qdot(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      qdot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_qdot();

  // repeated float p = 12;
  int p_size() const;
  void clear_p();
  static const int kPFieldNumber = 12;
  float p(int index) const;
  void set_p(int index, float value);
  void add_p(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      p() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_p();

  // repeated float pdot = 13;
  int pdot_size() const;
  void clear_pdot();
  static const int kPdotFieldNumber = 13;
  float pdot(int index) const;
  void set_pdot(int index, float value);
  void add_pdot(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pdot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pdot();

  // repeated float ref_frame = 20;
  int ref_frame_size() const;
  void clear_ref_frame();
  static const int kRefFrameFieldNumber = 20;
  float ref_frame(int index) const;
  void set_ref_frame(int index, float value);
  void add_ref_frame(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ref_frame() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ref_frame();

  // repeated float tool_frame = 21;
  int tool_frame_size() const;
  void clear_tool_frame();
  static const int kToolFrameFieldNumber = 21;
  float tool_frame(int index) const;
  void set_tool_frame(int index, float value);
  void add_tool_frame(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tool_frame() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tool_frame();

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // uint32 running_hours = 1;
  void clear_running_hours();
  static const int kRunningHoursFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 running_hours() const;
  void set_running_hours(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 running_mins = 2;
  void clear_running_mins();
  static const int kRunningMinsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 running_mins() const;
  void set_running_mins(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 running_secs = 3;
  void clear_running_secs();
  static const int kRunningSecsFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 running_secs() const;
  void set_running_secs(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .Nrmk.IndyFramework.OpState op_state = 4;
  void clear_op_state();
  static const int kOpStateFieldNumber = 4;
  ::Nrmk::IndyFramework::OpState op_state() const;
  void set_op_state(::Nrmk::IndyFramework::OpState value);

  // bool sim_mode = 5;
  void clear_sim_mode();
  static const int kSimModeFieldNumber = 5;
  bool sim_mode() const;
  void set_sim_mode(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ControlData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > q_;
  mutable std::atomic<int> _q_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > qdot_;
  mutable std::atomic<int> _qdot_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > p_;
  mutable std::atomic<int> _p_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pdot_;
  mutable std::atomic<int> _pdot_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ref_frame_;
  mutable std::atomic<int> _ref_frame_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tool_frame_;
  mutable std::atomic<int> _tool_frame_cached_byte_size_;
  ::Nrmk::IndyFramework::Response* response_;
  ::PROTOBUF_NAMESPACE_ID::uint32 running_hours_;
  ::PROTOBUF_NAMESPACE_ID::uint32 running_mins_;
  ::PROTOBUF_NAMESPACE_ID::uint32 running_secs_;
  int op_state_;
  bool sim_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ControlData2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ControlData2) */ {
 public:
  ControlData2();
  virtual ~ControlData2();

  ControlData2(const ControlData2& from);
  ControlData2(ControlData2&& from) noexcept
    : ControlData2() {
    *this = ::std::move(from);
  }

  inline ControlData2& operator=(const ControlData2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlData2& operator=(ControlData2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlData2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlData2* internal_default_instance() {
    return reinterpret_cast<const ControlData2*>(
               &_ControlData2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ControlData2* other);
  friend void swap(ControlData2& a, ControlData2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlData2* New() const final {
    return CreateMaybeMessage<ControlData2>(nullptr);
  }

  ControlData2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlData2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlData2& from);
  void MergeFrom(const ControlData2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlData2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ControlData2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rtde_5fmsgs_2eproto);
    return ::descriptor_table_rtde_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float q = 1;
  int q_size() const;
  void clear_q();
  static const int kQFieldNumber = 1;
  float q(int index) const;
  void set_q(int index, float value);
  void add_q(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      q() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_q();

  // repeated float qdot = 2;
  int qdot_size() const;
  void clear_qdot();
  static const int kQdotFieldNumber = 2;
  float qdot(int index) const;
  void set_qdot(int index, float value);
  void add_qdot(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      qdot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_qdot();

  // repeated float qddot = 3;
  int qddot_size() const;
  void clear_qddot();
  static const int kQddotFieldNumber = 3;
  float qddot(int index) const;
  void set_qddot(int index, float value);
  void add_qddot(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      qddot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_qddot();

  // repeated float qdes = 4;
  int qdes_size() const;
  void clear_qdes();
  static const int kQdesFieldNumber = 4;
  float qdes(int index) const;
  void set_qdes(int index, float value);
  void add_qdes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      qdes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_qdes();

  // repeated float qdotdes = 5;
  int qdotdes_size() const;
  void clear_qdotdes();
  static const int kQdotdesFieldNumber = 5;
  float qdotdes(int index) const;
  void set_qdotdes(int index, float value);
  void add_qdotdes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      qdotdes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_qdotdes();

  // repeated float qddotdes = 6;
  int qddotdes_size() const;
  void clear_qddotdes();
  static const int kQddotdesFieldNumber = 6;
  float qddotdes(int index) const;
  void set_qddotdes(int index, float value);
  void add_qddotdes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      qddotdes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_qddotdes();

  // repeated float p = 10;
  int p_size() const;
  void clear_p();
  static const int kPFieldNumber = 10;
  float p(int index) const;
  void set_p(int index, float value);
  void add_p(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      p() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_p();

  // repeated float pdot = 11;
  int pdot_size() const;
  void clear_pdot();
  static const int kPdotFieldNumber = 11;
  float pdot(int index) const;
  void set_pdot(int index, float value);
  void add_pdot(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pdot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pdot();

  // repeated float pddot = 12;
  int pddot_size() const;
  void clear_pddot();
  static const int kPddotFieldNumber = 12;
  float pddot(int index) const;
  void set_pddot(int index, float value);
  void add_pddot(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pddot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pddot();

  // repeated float pdes = 13;
  int pdes_size() const;
  void clear_pdes();
  static const int kPdesFieldNumber = 13;
  float pdes(int index) const;
  void set_pdes(int index, float value);
  void add_pdes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pdes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pdes();

  // repeated float pdotdes = 14;
  int pdotdes_size() const;
  void clear_pdotdes();
  static const int kPdotdesFieldNumber = 14;
  float pdotdes(int index) const;
  void set_pdotdes(int index, float value);
  void add_pdotdes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pdotdes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pdotdes();

  // repeated float pddotdes = 15;
  int pddotdes_size() const;
  void clear_pddotdes();
  static const int kPddotdesFieldNumber = 15;
  float pddotdes(int index) const;
  void set_pddotdes(int index, float value);
  void add_pddotdes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pddotdes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pddotdes();

  // repeated float tau = 20;
  int tau_size() const;
  void clear_tau();
  static const int kTauFieldNumber = 20;
  float tau(int index) const;
  void set_tau(int index, float value);
  void add_tau(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tau() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tau();

  // repeated float tau_act = 21;
  int tau_act_size() const;
  void clear_tau_act();
  static const int kTauActFieldNumber = 21;
  float tau_act(int index) const;
  void set_tau_act(int index, float value);
  void add_tau_act(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tau_act() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tau_act();

  // repeated float tau_ext = 22;
  int tau_ext_size() const;
  void clear_tau_ext();
  static const int kTauExtFieldNumber = 22;
  float tau_ext(int index) const;
  void set_tau_ext(int index, float value);
  void add_tau_ext(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tau_ext() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tau_ext();

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ControlData2)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > q_;
  mutable std::atomic<int> _q_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > qdot_;
  mutable std::atomic<int> _qdot_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > qddot_;
  mutable std::atomic<int> _qddot_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > qdes_;
  mutable std::atomic<int> _qdes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > qdotdes_;
  mutable std::atomic<int> _qdotdes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > qddotdes_;
  mutable std::atomic<int> _qddotdes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > p_;
  mutable std::atomic<int> _p_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pdot_;
  mutable std::atomic<int> _pdot_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pddot_;
  mutable std::atomic<int> _pddot_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pdes_;
  mutable std::atomic<int> _pdes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pdotdes_;
  mutable std::atomic<int> _pdotdes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pddotdes_;
  mutable std::atomic<int> _pddotdes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tau_;
  mutable std::atomic<int> _tau_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tau_act_;
  mutable std::atomic<int> _tau_act_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tau_ext_;
  mutable std::atomic<int> _tau_ext_cached_byte_size_;
  ::Nrmk::IndyFramework::Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class IOData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IOData) */ {
 public:
  IOData();
  virtual ~IOData();

  IOData(const IOData& from);
  IOData(IOData&& from) noexcept
    : IOData() {
    *this = ::std::move(from);
  }

  inline IOData& operator=(const IOData& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOData& operator=(IOData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IOData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IOData* internal_default_instance() {
    return reinterpret_cast<const IOData*>(
               &_IOData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(IOData* other);
  friend void swap(IOData& a, IOData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IOData* New() const final {
    return CreateMaybeMessage<IOData>(nullptr);
  }

  IOData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IOData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IOData& from);
  void MergeFrom(const IOData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.IOData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rtde_5fmsgs_2eproto);
    return ::descriptor_table_rtde_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
  int di_size() const;
  void clear_di();
  static const int kDiFieldNumber = 1;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_di(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_di();
  const ::Nrmk::IndyFramework::DigitalSignal& di(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_di();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      di() const;

  // repeated .Nrmk.IndyFramework.DigitalSignal do = 2;
  int do__size() const;
  void clear_do_();
  static const int kDoFieldNumber = 2;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_do_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_do_();
  const ::Nrmk::IndyFramework::DigitalSignal& do_(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_do_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      do_() const;

  // repeated .Nrmk.IndyFramework.AnalogSignal ai = 3;
  int ai_size() const;
  void clear_ai();
  static const int kAiFieldNumber = 3;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_ai(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_ai();
  const ::Nrmk::IndyFramework::AnalogSignal& ai(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_ai();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      ai() const;

  // repeated .Nrmk.IndyFramework.AnalogSignal ao = 4;
  int ao_size() const;
  void clear_ao();
  static const int kAoFieldNumber = 4;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_ao(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_ao();
  const ::Nrmk::IndyFramework::AnalogSignal& ao(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_ao();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      ao() const;

  // repeated .Nrmk.IndyFramework.EndtoolSignal end_di = 5;
  int end_di_size() const;
  void clear_end_di();
  static const int kEndDiFieldNumber = 5;
  ::Nrmk::IndyFramework::EndtoolSignal* mutable_end_di(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >*
      mutable_end_di();
  const ::Nrmk::IndyFramework::EndtoolSignal& end_di(int index) const;
  ::Nrmk::IndyFramework::EndtoolSignal* add_end_di();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >&
      end_di() const;

  // repeated .Nrmk.IndyFramework.EndtoolSignal end_do = 6;
  int end_do_size() const;
  void clear_end_do();
  static const int kEndDoFieldNumber = 6;
  ::Nrmk::IndyFramework::EndtoolSignal* mutable_end_do(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >*
      mutable_end_do();
  const ::Nrmk::IndyFramework::EndtoolSignal& end_do(int index) const;
  ::Nrmk::IndyFramework::EndtoolSignal* add_end_do();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >&
      end_do() const;

  // repeated .Nrmk.IndyFramework.AnalogSignal end_ai = 7;
  int end_ai_size() const;
  void clear_end_ai();
  static const int kEndAiFieldNumber = 7;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_end_ai(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_end_ai();
  const ::Nrmk::IndyFramework::AnalogSignal& end_ai(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_end_ai();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      end_ai() const;

  // repeated .Nrmk.IndyFramework.AnalogSignal end_ao = 8;
  int end_ao_size() const;
  void clear_end_ao();
  static const int kEndAoFieldNumber = 8;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_end_ao(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_end_ao();
  const ::Nrmk::IndyFramework::AnalogSignal& end_ao(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_end_ao();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      end_ao() const;

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IOData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > di_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > do__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > ai_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > ao_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal > end_di_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal > end_do_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > end_ai_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > end_ao_;
  ::Nrmk::IndyFramework::Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ViolationData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ViolationData) */ {
 public:
  ViolationData();
  virtual ~ViolationData();

  ViolationData(const ViolationData& from);
  ViolationData(ViolationData&& from) noexcept
    : ViolationData() {
    *this = ::std::move(from);
  }

  inline ViolationData& operator=(const ViolationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViolationData& operator=(ViolationData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViolationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViolationData* internal_default_instance() {
    return reinterpret_cast<const ViolationData*>(
               &_ViolationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ViolationData* other);
  friend void swap(ViolationData& a, ViolationData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ViolationData* New() const final {
    return CreateMaybeMessage<ViolationData>(nullptr);
  }

  ViolationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViolationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViolationData& from);
  void MergeFrom(const ViolationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViolationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ViolationData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rtde_5fmsgs_2eproto);
    return ::descriptor_table_rtde_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 i_args = 3;
  int i_args_size() const;
  void clear_i_args();
  static const int kIArgsFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 i_args(int index) const;
  void set_i_args(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_i_args(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      i_args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_i_args();

  // repeated float f_args = 4;
  int f_args_size() const;
  void clear_f_args();
  static const int kFArgsFieldNumber = 4;
  float f_args(int index) const;
  void set_f_args(int index, float value);
  void add_f_args(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      f_args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_f_args();

  // string violation_str = 5;
  void clear_violation_str();
  static const int kViolationStrFieldNumber = 5;
  const std::string& violation_str() const;
  void set_violation_str(const std::string& value);
  void set_violation_str(std::string&& value);
  void set_violation_str(const char* value);
  void set_violation_str(const char* value, size_t size);
  std::string* mutable_violation_str();
  std::string* release_violation_str();
  void set_allocated_violation_str(std::string* violation_str);

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // uint64 violation_code = 1;
  void clear_violation_code();
  static const int kViolationCodeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 violation_code() const;
  void set_violation_code(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 j_index = 2;
  void clear_j_index();
  static const int kJIndexFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 j_index() const;
  void set_j_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ViolationData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > i_args_;
  mutable std::atomic<int> _i_args_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > f_args_;
  mutable std::atomic<int> _f_args_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr violation_str_;
  ::Nrmk::IndyFramework::Response* response_;
  ::PROTOBUF_NAMESPACE_ID::uint64 violation_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 j_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ViolationMessageQueue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ViolationMessageQueue) */ {
 public:
  ViolationMessageQueue();
  virtual ~ViolationMessageQueue();

  ViolationMessageQueue(const ViolationMessageQueue& from);
  ViolationMessageQueue(ViolationMessageQueue&& from) noexcept
    : ViolationMessageQueue() {
    *this = ::std::move(from);
  }

  inline ViolationMessageQueue& operator=(const ViolationMessageQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViolationMessageQueue& operator=(ViolationMessageQueue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViolationMessageQueue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViolationMessageQueue* internal_default_instance() {
    return reinterpret_cast<const ViolationMessageQueue*>(
               &_ViolationMessageQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ViolationMessageQueue* other);
  friend void swap(ViolationMessageQueue& a, ViolationMessageQueue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ViolationMessageQueue* New() const final {
    return CreateMaybeMessage<ViolationMessageQueue>(nullptr);
  }

  ViolationMessageQueue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViolationMessageQueue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViolationMessageQueue& from);
  void MergeFrom(const ViolationMessageQueue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViolationMessageQueue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ViolationMessageQueue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rtde_5fmsgs_2eproto);
    return ::descriptor_table_rtde_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.ViolationData violation_queue = 1;
  int violation_queue_size() const;
  void clear_violation_queue();
  static const int kViolationQueueFieldNumber = 1;
  ::Nrmk::IndyFramework::ViolationData* mutable_violation_queue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ViolationData >*
      mutable_violation_queue();
  const ::Nrmk::IndyFramework::ViolationData& violation_queue(int index) const;
  ::Nrmk::IndyFramework::ViolationData* add_violation_queue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ViolationData >&
      violation_queue() const;

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ViolationMessageQueue)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ViolationData > violation_queue_;
  ::Nrmk::IndyFramework::Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ServoData) */ {
 public:
  ServoData();
  virtual ~ServoData();

  ServoData(const ServoData& from);
  ServoData(ServoData&& from) noexcept
    : ServoData() {
    *this = ::std::move(from);
  }

  inline ServoData& operator=(const ServoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoData& operator=(ServoData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoData* internal_default_instance() {
    return reinterpret_cast<const ServoData*>(
               &_ServoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ServoData* other);
  friend void swap(ServoData& a, ServoData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoData* New() const final {
    return CreateMaybeMessage<ServoData>(nullptr);
  }

  ServoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoData& from);
  void MergeFrom(const ServoData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ServoData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rtde_5fmsgs_2eproto);
    return ::descriptor_table_rtde_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string status_codes = 1;
  int status_codes_size() const;
  void clear_status_codes();
  static const int kStatusCodesFieldNumber = 1;
  const std::string& status_codes(int index) const;
  std::string* mutable_status_codes(int index);
  void set_status_codes(int index, const std::string& value);
  void set_status_codes(int index, std::string&& value);
  void set_status_codes(int index, const char* value);
  void set_status_codes(int index, const char* value, size_t size);
  std::string* add_status_codes();
  void add_status_codes(const std::string& value);
  void add_status_codes(std::string&& value);
  void add_status_codes(const char* value);
  void add_status_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& status_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_status_codes();

  // repeated float temperatures = 2;
  int temperatures_size() const;
  void clear_temperatures();
  static const int kTemperaturesFieldNumber = 2;
  float temperatures(int index) const;
  void set_temperatures(int index, float value);
  void add_temperatures(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      temperatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_temperatures();

  // repeated float voltages = 3;
  int voltages_size() const;
  void clear_voltages();
  static const int kVoltagesFieldNumber = 3;
  float voltages(int index) const;
  void set_voltages(int index, float value);
  void add_voltages(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      voltages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_voltages();

  // repeated float currents = 4;
  int currents_size() const;
  void clear_currents();
  static const int kCurrentsFieldNumber = 4;
  float currents(int index) const;
  void set_currents(int index, float value);
  void add_currents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      currents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_currents();

  // repeated bool servo_actives = 10;
  int servo_actives_size() const;
  void clear_servo_actives();
  static const int kServoActivesFieldNumber = 10;
  bool servo_actives(int index) const;
  void set_servo_actives(int index, bool value);
  void add_servo_actives(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      servo_actives() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_servo_actives();

  // repeated bool brake_actives = 11;
  int brake_actives_size() const;
  void clear_brake_actives();
  static const int kBrakeActivesFieldNumber = 11;
  bool brake_actives(int index) const;
  void set_brake_actives(int index, bool value);
  void add_brake_actives(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      brake_actives() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_brake_actives();

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ServoData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> status_codes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > temperatures_;
  mutable std::atomic<int> _temperatures_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > voltages_;
  mutable std::atomic<int> _voltages_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > currents_;
  mutable std::atomic<int> _currents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > servo_actives_;
  mutable std::atomic<int> _servo_actives_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > brake_actives_;
  mutable std::atomic<int> _brake_actives_cached_byte_size_;
  ::Nrmk::IndyFramework::Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ProgramData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ProgramData) */ {
 public:
  ProgramData();
  virtual ~ProgramData();

  ProgramData(const ProgramData& from);
  ProgramData(ProgramData&& from) noexcept
    : ProgramData() {
    *this = ::std::move(from);
  }

  inline ProgramData& operator=(const ProgramData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramData& operator=(ProgramData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProgramData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgramData* internal_default_instance() {
    return reinterpret_cast<const ProgramData*>(
               &_ProgramData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ProgramData* other);
  friend void swap(ProgramData& a, ProgramData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProgramData* New() const final {
    return CreateMaybeMessage<ProgramData>(nullptr);
  }

  ProgramData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProgramData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProgramData& from);
  void MergeFrom(const ProgramData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ProgramData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rtde_5fmsgs_2eproto);
    return ::descriptor_table_rtde_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string program_name = 7;
  void clear_program_name();
  static const int kProgramNameFieldNumber = 7;
  const std::string& program_name() const;
  void set_program_name(const std::string& value);
  void set_program_name(std::string&& value);
  void set_program_name(const char* value);
  void set_program_name(const char* value, size_t size);
  std::string* mutable_program_name();
  std::string* release_program_name();
  void set_allocated_program_name(std::string* program_name);

  // string program_alarm = 8;
  void clear_program_alarm();
  static const int kProgramAlarmFieldNumber = 8;
  const std::string& program_alarm() const;
  void set_program_alarm(const std::string& value);
  void set_program_alarm(std::string&& value);
  void set_program_alarm(const char* value);
  void set_program_alarm(const char* value, size_t size);
  std::string* mutable_program_alarm();
  std::string* release_program_alarm();
  void set_allocated_program_alarm(std::string* program_alarm);

  // string program_annotation = 9;
  void clear_program_annotation();
  static const int kProgramAnnotationFieldNumber = 9;
  const std::string& program_annotation() const;
  void set_program_annotation(const std::string& value);
  void set_program_annotation(std::string&& value);
  void set_program_annotation(const char* value);
  void set_program_annotation(const char* value, size_t size);
  std::string* mutable_program_annotation();
  std::string* release_program_annotation();
  void set_allocated_program_annotation(std::string* program_annotation);

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // .Nrmk.IndyFramework.ProgramState program_state = 1;
  void clear_program_state();
  static const int kProgramStateFieldNumber = 1;
  ::Nrmk::IndyFramework::ProgramState program_state() const;
  void set_program_state(::Nrmk::IndyFramework::ProgramState value);

  // int32 cmd_id = 2;
  void clear_cmd_id();
  static const int kCmdIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 cmd_id() const;
  void set_cmd_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 sub_cmd_id = 3;
  void clear_sub_cmd_id();
  static const int kSubCmdIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 sub_cmd_id() const;
  void set_sub_cmd_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 running_hours = 4;
  void clear_running_hours();
  static const int kRunningHoursFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 running_hours() const;
  void set_running_hours(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 running_mins = 5;
  void clear_running_mins();
  static const int kRunningMinsFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 running_mins() const;
  void set_running_mins(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 running_secs = 6;
  void clear_running_secs();
  static const int kRunningSecsFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint32 running_secs() const;
  void set_running_secs(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 speed_ratio = 10;
  void clear_speed_ratio();
  static const int kSpeedRatioFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_ratio() const;
  void set_speed_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ProgramData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr program_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr program_alarm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr program_annotation_;
  ::Nrmk::IndyFramework::Response* response_;
  int program_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmd_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sub_cmd_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 running_hours_;
  ::PROTOBUF_NAMESPACE_ID::uint32 running_mins_;
  ::PROTOBUF_NAMESPACE_ID::uint32 running_secs_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class StopState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.StopState) */ {
 public:
  StopState();
  virtual ~StopState();

  StopState(const StopState& from);
  StopState(StopState&& from) noexcept
    : StopState() {
    *this = ::std::move(from);
  }

  inline StopState& operator=(const StopState& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopState& operator=(StopState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopState* internal_default_instance() {
    return reinterpret_cast<const StopState*>(
               &_StopState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(StopState* other);
  friend void swap(StopState& a, StopState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopState* New() const final {
    return CreateMaybeMessage<StopState>(nullptr);
  }

  StopState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopState& from);
  void MergeFrom(const StopState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.StopState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rtde_5fmsgs_2eproto);
    return ::descriptor_table_rtde_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StopState_StopCategory StopCategory;
  static constexpr StopCategory STOP_CAT_0 =
    StopState_StopCategory_STOP_CAT_0;
  static constexpr StopCategory STOP_CAT_1 =
    StopState_StopCategory_STOP_CAT_1;
  static constexpr StopCategory STOP_CAT_2 =
    StopState_StopCategory_STOP_CAT_2;
  static constexpr StopCategory STOP_CAT_NONE =
    StopState_StopCategory_STOP_CAT_NONE;
  static inline bool StopCategory_IsValid(int value) {
    return StopState_StopCategory_IsValid(value);
  }
  static constexpr StopCategory StopCategory_MIN =
    StopState_StopCategory_StopCategory_MIN;
  static constexpr StopCategory StopCategory_MAX =
    StopState_StopCategory_StopCategory_MAX;
  static constexpr int StopCategory_ARRAYSIZE =
    StopState_StopCategory_StopCategory_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StopCategory_descriptor() {
    return StopState_StopCategory_descriptor();
  }
  template<typename T>
  static inline const std::string& StopCategory_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StopCategory>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StopCategory_Name.");
    return StopState_StopCategory_Name(enum_t_value);
  }
  static inline bool StopCategory_Parse(const std::string& name,
      StopCategory* value) {
    return StopState_StopCategory_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // .Nrmk.IndyFramework.StopState.StopCategory category = 1;
  void clear_category();
  static const int kCategoryFieldNumber = 1;
  ::Nrmk::IndyFramework::StopState_StopCategory category() const;
  void set_category(::Nrmk::IndyFramework::StopState_StopCategory value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.StopState)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::Response* response_;
  int category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rtde_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestRequest

// int32 intVal = 1;
inline void TestRequest::clear_intval() {
  intval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestRequest::intval() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestRequest.intVal)
  return intval_;
}
inline void TestRequest::set_intval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  intval_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestRequest.intVal)
}

// string strVal = 2;
inline void TestRequest::clear_strval() {
  strval_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TestRequest::strval() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestRequest.strVal)
  return strval_.GetNoArena();
}
inline void TestRequest::set_strval(const std::string& value) {
  
  strval_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestRequest.strVal)
}
inline void TestRequest::set_strval(std::string&& value) {
  
  strval_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.TestRequest.strVal)
}
inline void TestRequest::set_strval(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strval_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.TestRequest.strVal)
}
inline void TestRequest::set_strval(const char* value, size_t size) {
  
  strval_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.TestRequest.strVal)
}
inline std::string* TestRequest::mutable_strval() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TestRequest.strVal)
  return strval_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestRequest::release_strval() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TestRequest.strVal)
  
  return strval_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestRequest::set_allocated_strval(std::string* strval) {
  if (strval != nullptr) {
    
  } else {
    
  }
  strval_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strval);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TestRequest.strVal)
}

// -------------------------------------------------------------------

// TestResponse

// int64 code = 1;
inline void TestResponse::clear_code() {
  code_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestResponse::code() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestResponse.code)
  return code_;
}
inline void TestResponse::set_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestResponse.code)
}

// string msg = 2;
inline void TestResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TestResponse::msg() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TestResponse.msg)
  return msg_.GetNoArena();
}
inline void TestResponse::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TestResponse.msg)
}
inline void TestResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.TestResponse.msg)
}
inline void TestResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.TestResponse.msg)
}
inline void TestResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.TestResponse.msg)
}
inline std::string* TestResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TestResponse.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestResponse::release_msg() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TestResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TestResponse.msg)
}

// -------------------------------------------------------------------

// MotionData

// .Nrmk.IndyFramework.TrajState traj_state = 1;
inline void MotionData::clear_traj_state() {
  traj_state_ = 0;
}
inline ::Nrmk::IndyFramework::TrajState MotionData::traj_state() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.traj_state)
  return static_cast< ::Nrmk::IndyFramework::TrajState >(traj_state_);
}
inline void MotionData::set_traj_state(::Nrmk::IndyFramework::TrajState value) {
  
  traj_state_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.traj_state)
}

// int32 traj_progress = 2;
inline void MotionData::clear_traj_progress() {
  traj_progress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionData::traj_progress() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.traj_progress)
  return traj_progress_;
}
inline void MotionData::set_traj_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  traj_progress_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.traj_progress)
}

// bool is_in_motion = 3;
inline void MotionData::clear_is_in_motion() {
  is_in_motion_ = false;
}
inline bool MotionData::is_in_motion() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.is_in_motion)
  return is_in_motion_;
}
inline void MotionData::set_is_in_motion(bool value) {
  
  is_in_motion_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.is_in_motion)
}

// bool is_target_reached = 4;
inline void MotionData::clear_is_target_reached() {
  is_target_reached_ = false;
}
inline bool MotionData::is_target_reached() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.is_target_reached)
  return is_target_reached_;
}
inline void MotionData::set_is_target_reached(bool value) {
  
  is_target_reached_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.is_target_reached)
}

// bool is_pausing = 5;
inline void MotionData::clear_is_pausing() {
  is_pausing_ = false;
}
inline bool MotionData::is_pausing() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.is_pausing)
  return is_pausing_;
}
inline void MotionData::set_is_pausing(bool value) {
  
  is_pausing_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.is_pausing)
}

// bool is_stopping = 6;
inline void MotionData::clear_is_stopping() {
  is_stopping_ = false;
}
inline bool MotionData::is_stopping() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.is_stopping)
  return is_stopping_;
}
inline void MotionData::set_is_stopping(bool value) {
  
  is_stopping_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.is_stopping)
}

// bool has_motion = 7;
inline void MotionData::clear_has_motion() {
  has_motion_ = false;
}
inline bool MotionData::has_motion() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.has_motion)
  return has_motion_;
}
inline void MotionData::set_has_motion(bool value) {
  
  has_motion_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.has_motion)
}

// int32 speed_ratio = 8;
inline void MotionData::clear_speed_ratio() {
  speed_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionData::speed_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.speed_ratio)
  return speed_ratio_;
}
inline void MotionData::set_speed_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.speed_ratio)
}

// int32 motion_id = 9;
inline void MotionData::clear_motion_id() {
  motion_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionData::motion_id() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.motion_id)
  return motion_id_;
}
inline void MotionData::set_motion_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  motion_id_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.motion_id)
}

// float remain_distance = 10;
inline void MotionData::clear_remain_distance() {
  remain_distance_ = 0;
}
inline float MotionData::remain_distance() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.remain_distance)
  return remain_distance_;
}
inline void MotionData::set_remain_distance(float value) {
  
  remain_distance_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.remain_distance)
}

// uint32 motion_queue_size = 11;
inline void MotionData::clear_motion_queue_size() {
  motion_queue_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionData::motion_queue_size() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.motion_queue_size)
  return motion_queue_size_;
}
inline void MotionData::set_motion_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  motion_queue_size_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.motion_queue_size)
}

// int32 cur_traj_progress = 12;
inline void MotionData::clear_cur_traj_progress() {
  cur_traj_progress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionData::cur_traj_progress() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.cur_traj_progress)
  return cur_traj_progress_;
}
inline void MotionData::set_cur_traj_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_traj_progress_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionData.cur_traj_progress)
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool MotionData::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& MotionData::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionData.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* MotionData::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MotionData.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* MotionData::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MotionData.response)
  return response_;
}
inline void MotionData::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MotionData.response)
}

// -------------------------------------------------------------------

// ControlData

// uint32 running_hours = 1;
inline void ControlData::clear_running_hours() {
  running_hours_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControlData::running_hours() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.running_hours)
  return running_hours_;
}
inline void ControlData::set_running_hours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  running_hours_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.running_hours)
}

// uint32 running_mins = 2;
inline void ControlData::clear_running_mins() {
  running_mins_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControlData::running_mins() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.running_mins)
  return running_mins_;
}
inline void ControlData::set_running_mins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  running_mins_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.running_mins)
}

// uint32 running_secs = 3;
inline void ControlData::clear_running_secs() {
  running_secs_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControlData::running_secs() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.running_secs)
  return running_secs_;
}
inline void ControlData::set_running_secs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  running_secs_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.running_secs)
}

// .Nrmk.IndyFramework.OpState op_state = 4;
inline void ControlData::clear_op_state() {
  op_state_ = 0;
}
inline ::Nrmk::IndyFramework::OpState ControlData::op_state() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.op_state)
  return static_cast< ::Nrmk::IndyFramework::OpState >(op_state_);
}
inline void ControlData::set_op_state(::Nrmk::IndyFramework::OpState value) {
  
  op_state_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.op_state)
}

// bool sim_mode = 5;
inline void ControlData::clear_sim_mode() {
  sim_mode_ = false;
}
inline bool ControlData::sim_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.sim_mode)
  return sim_mode_;
}
inline void ControlData::set_sim_mode(bool value) {
  
  sim_mode_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.sim_mode)
}

// repeated float q = 10;
inline int ControlData::q_size() const {
  return q_.size();
}
inline void ControlData::clear_q() {
  q_.Clear();
}
inline float ControlData::q(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.q)
  return q_.Get(index);
}
inline void ControlData::set_q(int index, float value) {
  q_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.q)
}
inline void ControlData::add_q(float value) {
  q_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData.q)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData::q() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData.q)
  return q_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData::mutable_q() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData.q)
  return &q_;
}

// repeated float qdot = 11;
inline int ControlData::qdot_size() const {
  return qdot_.size();
}
inline void ControlData::clear_qdot() {
  qdot_.Clear();
}
inline float ControlData::qdot(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.qdot)
  return qdot_.Get(index);
}
inline void ControlData::set_qdot(int index, float value) {
  qdot_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.qdot)
}
inline void ControlData::add_qdot(float value) {
  qdot_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData.qdot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData::qdot() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData.qdot)
  return qdot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData::mutable_qdot() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData.qdot)
  return &qdot_;
}

// repeated float p = 12;
inline int ControlData::p_size() const {
  return p_.size();
}
inline void ControlData::clear_p() {
  p_.Clear();
}
inline float ControlData::p(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.p)
  return p_.Get(index);
}
inline void ControlData::set_p(int index, float value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.p)
}
inline void ControlData::add_p(float value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData.p)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData::p() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData.p)
  return p_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData.p)
  return &p_;
}

// repeated float pdot = 13;
inline int ControlData::pdot_size() const {
  return pdot_.size();
}
inline void ControlData::clear_pdot() {
  pdot_.Clear();
}
inline float ControlData::pdot(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.pdot)
  return pdot_.Get(index);
}
inline void ControlData::set_pdot(int index, float value) {
  pdot_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.pdot)
}
inline void ControlData::add_pdot(float value) {
  pdot_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData.pdot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData::pdot() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData.pdot)
  return pdot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData::mutable_pdot() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData.pdot)
  return &pdot_;
}

// repeated float ref_frame = 20;
inline int ControlData::ref_frame_size() const {
  return ref_frame_.size();
}
inline void ControlData::clear_ref_frame() {
  ref_frame_.Clear();
}
inline float ControlData::ref_frame(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.ref_frame)
  return ref_frame_.Get(index);
}
inline void ControlData::set_ref_frame(int index, float value) {
  ref_frame_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.ref_frame)
}
inline void ControlData::add_ref_frame(float value) {
  ref_frame_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData.ref_frame)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData::ref_frame() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData.ref_frame)
  return ref_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData::mutable_ref_frame() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData.ref_frame)
  return &ref_frame_;
}

// repeated float tool_frame = 21;
inline int ControlData::tool_frame_size() const {
  return tool_frame_.size();
}
inline void ControlData::clear_tool_frame() {
  tool_frame_.Clear();
}
inline float ControlData::tool_frame(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.tool_frame)
  return tool_frame_.Get(index);
}
inline void ControlData::set_tool_frame(int index, float value) {
  tool_frame_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData.tool_frame)
}
inline void ControlData::add_tool_frame(float value) {
  tool_frame_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData.tool_frame)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData::tool_frame() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData.tool_frame)
  return tool_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData::mutable_tool_frame() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData.tool_frame)
  return &tool_frame_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ControlData::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& ControlData::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* ControlData::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ControlData.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ControlData::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ControlData.response)
  return response_;
}
inline void ControlData::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ControlData.response)
}

// -------------------------------------------------------------------

// ControlData2

// repeated float q = 1;
inline int ControlData2::q_size() const {
  return q_.size();
}
inline void ControlData2::clear_q() {
  q_.Clear();
}
inline float ControlData2::q(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.q)
  return q_.Get(index);
}
inline void ControlData2::set_q(int index, float value) {
  q_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.q)
}
inline void ControlData2::add_q(float value) {
  q_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.q)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::q() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.q)
  return q_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_q() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.q)
  return &q_;
}

// repeated float qdot = 2;
inline int ControlData2::qdot_size() const {
  return qdot_.size();
}
inline void ControlData2::clear_qdot() {
  qdot_.Clear();
}
inline float ControlData2::qdot(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.qdot)
  return qdot_.Get(index);
}
inline void ControlData2::set_qdot(int index, float value) {
  qdot_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.qdot)
}
inline void ControlData2::add_qdot(float value) {
  qdot_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.qdot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::qdot() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.qdot)
  return qdot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_qdot() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.qdot)
  return &qdot_;
}

// repeated float qddot = 3;
inline int ControlData2::qddot_size() const {
  return qddot_.size();
}
inline void ControlData2::clear_qddot() {
  qddot_.Clear();
}
inline float ControlData2::qddot(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.qddot)
  return qddot_.Get(index);
}
inline void ControlData2::set_qddot(int index, float value) {
  qddot_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.qddot)
}
inline void ControlData2::add_qddot(float value) {
  qddot_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.qddot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::qddot() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.qddot)
  return qddot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_qddot() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.qddot)
  return &qddot_;
}

// repeated float qdes = 4;
inline int ControlData2::qdes_size() const {
  return qdes_.size();
}
inline void ControlData2::clear_qdes() {
  qdes_.Clear();
}
inline float ControlData2::qdes(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.qdes)
  return qdes_.Get(index);
}
inline void ControlData2::set_qdes(int index, float value) {
  qdes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.qdes)
}
inline void ControlData2::add_qdes(float value) {
  qdes_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.qdes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::qdes() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.qdes)
  return qdes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_qdes() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.qdes)
  return &qdes_;
}

// repeated float qdotdes = 5;
inline int ControlData2::qdotdes_size() const {
  return qdotdes_.size();
}
inline void ControlData2::clear_qdotdes() {
  qdotdes_.Clear();
}
inline float ControlData2::qdotdes(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.qdotdes)
  return qdotdes_.Get(index);
}
inline void ControlData2::set_qdotdes(int index, float value) {
  qdotdes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.qdotdes)
}
inline void ControlData2::add_qdotdes(float value) {
  qdotdes_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.qdotdes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::qdotdes() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.qdotdes)
  return qdotdes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_qdotdes() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.qdotdes)
  return &qdotdes_;
}

// repeated float qddotdes = 6;
inline int ControlData2::qddotdes_size() const {
  return qddotdes_.size();
}
inline void ControlData2::clear_qddotdes() {
  qddotdes_.Clear();
}
inline float ControlData2::qddotdes(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.qddotdes)
  return qddotdes_.Get(index);
}
inline void ControlData2::set_qddotdes(int index, float value) {
  qddotdes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.qddotdes)
}
inline void ControlData2::add_qddotdes(float value) {
  qddotdes_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.qddotdes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::qddotdes() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.qddotdes)
  return qddotdes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_qddotdes() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.qddotdes)
  return &qddotdes_;
}

// repeated float p = 10;
inline int ControlData2::p_size() const {
  return p_.size();
}
inline void ControlData2::clear_p() {
  p_.Clear();
}
inline float ControlData2::p(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.p)
  return p_.Get(index);
}
inline void ControlData2::set_p(int index, float value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.p)
}
inline void ControlData2::add_p(float value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.p)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::p() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.p)
  return p_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.p)
  return &p_;
}

// repeated float pdot = 11;
inline int ControlData2::pdot_size() const {
  return pdot_.size();
}
inline void ControlData2::clear_pdot() {
  pdot_.Clear();
}
inline float ControlData2::pdot(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.pdot)
  return pdot_.Get(index);
}
inline void ControlData2::set_pdot(int index, float value) {
  pdot_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.pdot)
}
inline void ControlData2::add_pdot(float value) {
  pdot_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.pdot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::pdot() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.pdot)
  return pdot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_pdot() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.pdot)
  return &pdot_;
}

// repeated float pddot = 12;
inline int ControlData2::pddot_size() const {
  return pddot_.size();
}
inline void ControlData2::clear_pddot() {
  pddot_.Clear();
}
inline float ControlData2::pddot(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.pddot)
  return pddot_.Get(index);
}
inline void ControlData2::set_pddot(int index, float value) {
  pddot_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.pddot)
}
inline void ControlData2::add_pddot(float value) {
  pddot_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.pddot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::pddot() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.pddot)
  return pddot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_pddot() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.pddot)
  return &pddot_;
}

// repeated float pdes = 13;
inline int ControlData2::pdes_size() const {
  return pdes_.size();
}
inline void ControlData2::clear_pdes() {
  pdes_.Clear();
}
inline float ControlData2::pdes(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.pdes)
  return pdes_.Get(index);
}
inline void ControlData2::set_pdes(int index, float value) {
  pdes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.pdes)
}
inline void ControlData2::add_pdes(float value) {
  pdes_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.pdes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::pdes() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.pdes)
  return pdes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_pdes() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.pdes)
  return &pdes_;
}

// repeated float pdotdes = 14;
inline int ControlData2::pdotdes_size() const {
  return pdotdes_.size();
}
inline void ControlData2::clear_pdotdes() {
  pdotdes_.Clear();
}
inline float ControlData2::pdotdes(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.pdotdes)
  return pdotdes_.Get(index);
}
inline void ControlData2::set_pdotdes(int index, float value) {
  pdotdes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.pdotdes)
}
inline void ControlData2::add_pdotdes(float value) {
  pdotdes_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.pdotdes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::pdotdes() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.pdotdes)
  return pdotdes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_pdotdes() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.pdotdes)
  return &pdotdes_;
}

// repeated float pddotdes = 15;
inline int ControlData2::pddotdes_size() const {
  return pddotdes_.size();
}
inline void ControlData2::clear_pddotdes() {
  pddotdes_.Clear();
}
inline float ControlData2::pddotdes(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.pddotdes)
  return pddotdes_.Get(index);
}
inline void ControlData2::set_pddotdes(int index, float value) {
  pddotdes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.pddotdes)
}
inline void ControlData2::add_pddotdes(float value) {
  pddotdes_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.pddotdes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::pddotdes() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.pddotdes)
  return pddotdes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_pddotdes() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.pddotdes)
  return &pddotdes_;
}

// repeated float tau = 20;
inline int ControlData2::tau_size() const {
  return tau_.size();
}
inline void ControlData2::clear_tau() {
  tau_.Clear();
}
inline float ControlData2::tau(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.tau)
  return tau_.Get(index);
}
inline void ControlData2::set_tau(int index, float value) {
  tau_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.tau)
}
inline void ControlData2::add_tau(float value) {
  tau_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.tau)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::tau() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.tau)
  return tau_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_tau() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.tau)
  return &tau_;
}

// repeated float tau_act = 21;
inline int ControlData2::tau_act_size() const {
  return tau_act_.size();
}
inline void ControlData2::clear_tau_act() {
  tau_act_.Clear();
}
inline float ControlData2::tau_act(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.tau_act)
  return tau_act_.Get(index);
}
inline void ControlData2::set_tau_act(int index, float value) {
  tau_act_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.tau_act)
}
inline void ControlData2::add_tau_act(float value) {
  tau_act_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.tau_act)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::tau_act() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.tau_act)
  return tau_act_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_tau_act() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.tau_act)
  return &tau_act_;
}

// repeated float tau_ext = 22;
inline int ControlData2::tau_ext_size() const {
  return tau_ext_.size();
}
inline void ControlData2::clear_tau_ext() {
  tau_ext_.Clear();
}
inline float ControlData2::tau_ext(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.tau_ext)
  return tau_ext_.Get(index);
}
inline void ControlData2::set_tau_ext(int index, float value) {
  tau_ext_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlData2.tau_ext)
}
inline void ControlData2::add_tau_ext(float value) {
  tau_ext_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ControlData2.tau_ext)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlData2::tau_ext() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ControlData2.tau_ext)
  return tau_ext_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlData2::mutable_tau_ext() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ControlData2.tau_ext)
  return &tau_ext_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ControlData2::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& ControlData2::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlData2.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* ControlData2::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ControlData2.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ControlData2::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ControlData2.response)
  return response_;
}
inline void ControlData2::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ControlData2.response)
}

// -------------------------------------------------------------------

// IOData

// repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
inline int IOData::di_size() const {
  return di_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOData::mutable_di(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.di)
  return di_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
IOData::mutable_di() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.di)
  return &di_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& IOData::di(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.di)
  return di_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOData::add_di() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.di)
  return di_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
IOData::di() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.di)
  return di_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal do = 2;
inline int IOData::do__size() const {
  return do__.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOData::mutable_do_(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.do)
  return do__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
IOData::mutable_do_() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.do)
  return &do__;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& IOData::do_(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.do)
  return do__.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOData::add_do_() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.do)
  return do__.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
IOData::do_() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.do)
  return do__;
}

// repeated .Nrmk.IndyFramework.AnalogSignal ai = 3;
inline int IOData::ai_size() const {
  return ai_.size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::mutable_ai(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.ai)
  return ai_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
IOData::mutable_ai() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.ai)
  return &ai_;
}
inline const ::Nrmk::IndyFramework::AnalogSignal& IOData::ai(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.ai)
  return ai_.Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::add_ai() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.ai)
  return ai_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
IOData::ai() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.ai)
  return ai_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal ao = 4;
inline int IOData::ao_size() const {
  return ao_.size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::mutable_ao(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.ao)
  return ao_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
IOData::mutable_ao() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.ao)
  return &ao_;
}
inline const ::Nrmk::IndyFramework::AnalogSignal& IOData::ao(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.ao)
  return ao_.Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::add_ao() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.ao)
  return ao_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
IOData::ao() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.ao)
  return ao_;
}

// repeated .Nrmk.IndyFramework.EndtoolSignal end_di = 5;
inline int IOData::end_di_size() const {
  return end_di_.size();
}
inline ::Nrmk::IndyFramework::EndtoolSignal* IOData::mutable_end_di(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.end_di)
  return end_di_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >*
IOData::mutable_end_di() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.end_di)
  return &end_di_;
}
inline const ::Nrmk::IndyFramework::EndtoolSignal& IOData::end_di(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.end_di)
  return end_di_.Get(index);
}
inline ::Nrmk::IndyFramework::EndtoolSignal* IOData::add_end_di() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.end_di)
  return end_di_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >&
IOData::end_di() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.end_di)
  return end_di_;
}

// repeated .Nrmk.IndyFramework.EndtoolSignal end_do = 6;
inline int IOData::end_do_size() const {
  return end_do_.size();
}
inline ::Nrmk::IndyFramework::EndtoolSignal* IOData::mutable_end_do(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.end_do)
  return end_do_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >*
IOData::mutable_end_do() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.end_do)
  return &end_do_;
}
inline const ::Nrmk::IndyFramework::EndtoolSignal& IOData::end_do(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.end_do)
  return end_do_.Get(index);
}
inline ::Nrmk::IndyFramework::EndtoolSignal* IOData::add_end_do() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.end_do)
  return end_do_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::EndtoolSignal >&
IOData::end_do() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.end_do)
  return end_do_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal end_ai = 7;
inline int IOData::end_ai_size() const {
  return end_ai_.size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::mutable_end_ai(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.end_ai)
  return end_ai_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
IOData::mutable_end_ai() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.end_ai)
  return &end_ai_;
}
inline const ::Nrmk::IndyFramework::AnalogSignal& IOData::end_ai(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.end_ai)
  return end_ai_.Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::add_end_ai() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.end_ai)
  return end_ai_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
IOData::end_ai() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.end_ai)
  return end_ai_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal end_ao = 8;
inline int IOData::end_ao_size() const {
  return end_ao_.size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::mutable_end_ao(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.end_ao)
  return end_ao_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
IOData::mutable_end_ao() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOData.end_ao)
  return &end_ao_;
}
inline const ::Nrmk::IndyFramework::AnalogSignal& IOData::end_ao(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.end_ao)
  return end_ao_.Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* IOData::add_end_ao() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOData.end_ao)
  return end_ao_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
IOData::end_ao() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOData.end_ao)
  return end_ao_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool IOData::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& IOData::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOData.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* IOData::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.IOData.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* IOData::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOData.response)
  return response_;
}
inline void IOData::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.IOData.response)
}

// -------------------------------------------------------------------

// ViolationData

// uint64 violation_code = 1;
inline void ViolationData::clear_violation_code() {
  violation_code_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ViolationData::violation_code() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationData.violation_code)
  return violation_code_;
}
inline void ViolationData::set_violation_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  violation_code_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ViolationData.violation_code)
}

// uint32 j_index = 2;
inline void ViolationData::clear_j_index() {
  j_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ViolationData::j_index() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationData.j_index)
  return j_index_;
}
inline void ViolationData::set_j_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  j_index_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ViolationData.j_index)
}

// repeated int32 i_args = 3;
inline int ViolationData::i_args_size() const {
  return i_args_.size();
}
inline void ViolationData::clear_i_args() {
  i_args_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViolationData::i_args(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationData.i_args)
  return i_args_.Get(index);
}
inline void ViolationData::set_i_args(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  i_args_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ViolationData.i_args)
}
inline void ViolationData::add_i_args(::PROTOBUF_NAMESPACE_ID::int32 value) {
  i_args_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ViolationData.i_args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ViolationData::i_args() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ViolationData.i_args)
  return i_args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ViolationData::mutable_i_args() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ViolationData.i_args)
  return &i_args_;
}

// repeated float f_args = 4;
inline int ViolationData::f_args_size() const {
  return f_args_.size();
}
inline void ViolationData::clear_f_args() {
  f_args_.Clear();
}
inline float ViolationData::f_args(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationData.f_args)
  return f_args_.Get(index);
}
inline void ViolationData::set_f_args(int index, float value) {
  f_args_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ViolationData.f_args)
}
inline void ViolationData::add_f_args(float value) {
  f_args_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ViolationData.f_args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ViolationData::f_args() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ViolationData.f_args)
  return f_args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ViolationData::mutable_f_args() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ViolationData.f_args)
  return &f_args_;
}

// string violation_str = 5;
inline void ViolationData::clear_violation_str() {
  violation_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ViolationData::violation_str() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationData.violation_str)
  return violation_str_.GetNoArena();
}
inline void ViolationData::set_violation_str(const std::string& value) {
  
  violation_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ViolationData.violation_str)
}
inline void ViolationData::set_violation_str(std::string&& value) {
  
  violation_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.ViolationData.violation_str)
}
inline void ViolationData::set_violation_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  violation_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.ViolationData.violation_str)
}
inline void ViolationData::set_violation_str(const char* value, size_t size) {
  
  violation_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.ViolationData.violation_str)
}
inline std::string* ViolationData::mutable_violation_str() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ViolationData.violation_str)
  return violation_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ViolationData::release_violation_str() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ViolationData.violation_str)
  
  return violation_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ViolationData::set_allocated_violation_str(std::string* violation_str) {
  if (violation_str != nullptr) {
    
  } else {
    
  }
  violation_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), violation_str);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ViolationData.violation_str)
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ViolationData::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& ViolationData::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationData.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* ViolationData::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ViolationData.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ViolationData::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ViolationData.response)
  return response_;
}
inline void ViolationData::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ViolationData.response)
}

// -------------------------------------------------------------------

// ViolationMessageQueue

// repeated .Nrmk.IndyFramework.ViolationData violation_queue = 1;
inline int ViolationMessageQueue::violation_queue_size() const {
  return violation_queue_.size();
}
inline void ViolationMessageQueue::clear_violation_queue() {
  violation_queue_.Clear();
}
inline ::Nrmk::IndyFramework::ViolationData* ViolationMessageQueue::mutable_violation_queue(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ViolationMessageQueue.violation_queue)
  return violation_queue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ViolationData >*
ViolationMessageQueue::mutable_violation_queue() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ViolationMessageQueue.violation_queue)
  return &violation_queue_;
}
inline const ::Nrmk::IndyFramework::ViolationData& ViolationMessageQueue::violation_queue(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationMessageQueue.violation_queue)
  return violation_queue_.Get(index);
}
inline ::Nrmk::IndyFramework::ViolationData* ViolationMessageQueue::add_violation_queue() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ViolationMessageQueue.violation_queue)
  return violation_queue_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ViolationData >&
ViolationMessageQueue::violation_queue() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ViolationMessageQueue.violation_queue)
  return violation_queue_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ViolationMessageQueue::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& ViolationMessageQueue::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ViolationMessageQueue.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* ViolationMessageQueue::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ViolationMessageQueue.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ViolationMessageQueue::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ViolationMessageQueue.response)
  return response_;
}
inline void ViolationMessageQueue::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ViolationMessageQueue.response)
}

// -------------------------------------------------------------------

// ServoData

// repeated string status_codes = 1;
inline int ServoData::status_codes_size() const {
  return status_codes_.size();
}
inline void ServoData::clear_status_codes() {
  status_codes_.Clear();
}
inline const std::string& ServoData::status_codes(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoData.status_codes)
  return status_codes_.Get(index);
}
inline std::string* ServoData::mutable_status_codes(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ServoData.status_codes)
  return status_codes_.Mutable(index);
}
inline void ServoData::set_status_codes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoData.status_codes)
  status_codes_.Mutable(index)->assign(value);
}
inline void ServoData::set_status_codes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoData.status_codes)
  status_codes_.Mutable(index)->assign(std::move(value));
}
inline void ServoData::set_status_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  status_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.ServoData.status_codes)
}
inline void ServoData::set_status_codes(int index, const char* value, size_t size) {
  status_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.ServoData.status_codes)
}
inline std::string* ServoData::add_status_codes() {
  // @@protoc_insertion_point(field_add_mutable:Nrmk.IndyFramework.ServoData.status_codes)
  return status_codes_.Add();
}
inline void ServoData::add_status_codes(const std::string& value) {
  status_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ServoData.status_codes)
}
inline void ServoData::add_status_codes(std::string&& value) {
  status_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ServoData.status_codes)
}
inline void ServoData::add_status_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  status_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Nrmk.IndyFramework.ServoData.status_codes)
}
inline void ServoData::add_status_codes(const char* value, size_t size) {
  status_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Nrmk.IndyFramework.ServoData.status_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ServoData::status_codes() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ServoData.status_codes)
  return status_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ServoData::mutable_status_codes() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ServoData.status_codes)
  return &status_codes_;
}

// repeated float temperatures = 2;
inline int ServoData::temperatures_size() const {
  return temperatures_.size();
}
inline void ServoData::clear_temperatures() {
  temperatures_.Clear();
}
inline float ServoData::temperatures(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoData.temperatures)
  return temperatures_.Get(index);
}
inline void ServoData::set_temperatures(int index, float value) {
  temperatures_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoData.temperatures)
}
inline void ServoData::add_temperatures(float value) {
  temperatures_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ServoData.temperatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ServoData::temperatures() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ServoData.temperatures)
  return temperatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ServoData::mutable_temperatures() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ServoData.temperatures)
  return &temperatures_;
}

// repeated float voltages = 3;
inline int ServoData::voltages_size() const {
  return voltages_.size();
}
inline void ServoData::clear_voltages() {
  voltages_.Clear();
}
inline float ServoData::voltages(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoData.voltages)
  return voltages_.Get(index);
}
inline void ServoData::set_voltages(int index, float value) {
  voltages_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoData.voltages)
}
inline void ServoData::add_voltages(float value) {
  voltages_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ServoData.voltages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ServoData::voltages() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ServoData.voltages)
  return voltages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ServoData::mutable_voltages() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ServoData.voltages)
  return &voltages_;
}

// repeated float currents = 4;
inline int ServoData::currents_size() const {
  return currents_.size();
}
inline void ServoData::clear_currents() {
  currents_.Clear();
}
inline float ServoData::currents(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoData.currents)
  return currents_.Get(index);
}
inline void ServoData::set_currents(int index, float value) {
  currents_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoData.currents)
}
inline void ServoData::add_currents(float value) {
  currents_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ServoData.currents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ServoData::currents() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ServoData.currents)
  return currents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ServoData::mutable_currents() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ServoData.currents)
  return &currents_;
}

// repeated bool servo_actives = 10;
inline int ServoData::servo_actives_size() const {
  return servo_actives_.size();
}
inline void ServoData::clear_servo_actives() {
  servo_actives_.Clear();
}
inline bool ServoData::servo_actives(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoData.servo_actives)
  return servo_actives_.Get(index);
}
inline void ServoData::set_servo_actives(int index, bool value) {
  servo_actives_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoData.servo_actives)
}
inline void ServoData::add_servo_actives(bool value) {
  servo_actives_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ServoData.servo_actives)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ServoData::servo_actives() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ServoData.servo_actives)
  return servo_actives_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ServoData::mutable_servo_actives() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ServoData.servo_actives)
  return &servo_actives_;
}

// repeated bool brake_actives = 11;
inline int ServoData::brake_actives_size() const {
  return brake_actives_.size();
}
inline void ServoData::clear_brake_actives() {
  brake_actives_.Clear();
}
inline bool ServoData::brake_actives(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoData.brake_actives)
  return brake_actives_.Get(index);
}
inline void ServoData::set_brake_actives(int index, bool value) {
  brake_actives_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ServoData.brake_actives)
}
inline void ServoData::add_brake_actives(bool value) {
  brake_actives_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ServoData.brake_actives)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ServoData::brake_actives() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ServoData.brake_actives)
  return brake_actives_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ServoData::mutable_brake_actives() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ServoData.brake_actives)
  return &brake_actives_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ServoData::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& ServoData::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ServoData.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* ServoData::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ServoData.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ServoData::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ServoData.response)
  return response_;
}
inline void ServoData::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ServoData.response)
}

// -------------------------------------------------------------------

// ProgramData

// .Nrmk.IndyFramework.ProgramState program_state = 1;
inline void ProgramData::clear_program_state() {
  program_state_ = 0;
}
inline ::Nrmk::IndyFramework::ProgramState ProgramData::program_state() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.program_state)
  return static_cast< ::Nrmk::IndyFramework::ProgramState >(program_state_);
}
inline void ProgramData::set_program_state(::Nrmk::IndyFramework::ProgramState value) {
  
  program_state_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.program_state)
}

// int32 cmd_id = 2;
inline void ProgramData::clear_cmd_id() {
  cmd_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProgramData::cmd_id() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.cmd_id)
  return cmd_id_;
}
inline void ProgramData::set_cmd_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmd_id_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.cmd_id)
}

// int32 sub_cmd_id = 3;
inline void ProgramData::clear_sub_cmd_id() {
  sub_cmd_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProgramData::sub_cmd_id() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.sub_cmd_id)
  return sub_cmd_id_;
}
inline void ProgramData::set_sub_cmd_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sub_cmd_id_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.sub_cmd_id)
}

// uint32 running_hours = 4;
inline void ProgramData::clear_running_hours() {
  running_hours_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProgramData::running_hours() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.running_hours)
  return running_hours_;
}
inline void ProgramData::set_running_hours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  running_hours_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.running_hours)
}

// uint32 running_mins = 5;
inline void ProgramData::clear_running_mins() {
  running_mins_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProgramData::running_mins() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.running_mins)
  return running_mins_;
}
inline void ProgramData::set_running_mins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  running_mins_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.running_mins)
}

// uint32 running_secs = 6;
inline void ProgramData::clear_running_secs() {
  running_secs_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProgramData::running_secs() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.running_secs)
  return running_secs_;
}
inline void ProgramData::set_running_secs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  running_secs_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.running_secs)
}

// string program_name = 7;
inline void ProgramData::clear_program_name() {
  program_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProgramData::program_name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.program_name)
  return program_name_.GetNoArena();
}
inline void ProgramData::set_program_name(const std::string& value) {
  
  program_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.program_name)
}
inline void ProgramData::set_program_name(std::string&& value) {
  
  program_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.ProgramData.program_name)
}
inline void ProgramData::set_program_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  program_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.ProgramData.program_name)
}
inline void ProgramData::set_program_name(const char* value, size_t size) {
  
  program_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.ProgramData.program_name)
}
inline std::string* ProgramData::mutable_program_name() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ProgramData.program_name)
  return program_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProgramData::release_program_name() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ProgramData.program_name)
  
  return program_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProgramData::set_allocated_program_name(std::string* program_name) {
  if (program_name != nullptr) {
    
  } else {
    
  }
  program_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), program_name);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ProgramData.program_name)
}

// string program_alarm = 8;
inline void ProgramData::clear_program_alarm() {
  program_alarm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProgramData::program_alarm() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.program_alarm)
  return program_alarm_.GetNoArena();
}
inline void ProgramData::set_program_alarm(const std::string& value) {
  
  program_alarm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.program_alarm)
}
inline void ProgramData::set_program_alarm(std::string&& value) {
  
  program_alarm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.ProgramData.program_alarm)
}
inline void ProgramData::set_program_alarm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  program_alarm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.ProgramData.program_alarm)
}
inline void ProgramData::set_program_alarm(const char* value, size_t size) {
  
  program_alarm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.ProgramData.program_alarm)
}
inline std::string* ProgramData::mutable_program_alarm() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ProgramData.program_alarm)
  return program_alarm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProgramData::release_program_alarm() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ProgramData.program_alarm)
  
  return program_alarm_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProgramData::set_allocated_program_alarm(std::string* program_alarm) {
  if (program_alarm != nullptr) {
    
  } else {
    
  }
  program_alarm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), program_alarm);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ProgramData.program_alarm)
}

// string program_annotation = 9;
inline void ProgramData::clear_program_annotation() {
  program_annotation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProgramData::program_annotation() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.program_annotation)
  return program_annotation_.GetNoArena();
}
inline void ProgramData::set_program_annotation(const std::string& value) {
  
  program_annotation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.program_annotation)
}
inline void ProgramData::set_program_annotation(std::string&& value) {
  
  program_annotation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.ProgramData.program_annotation)
}
inline void ProgramData::set_program_annotation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  program_annotation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.ProgramData.program_annotation)
}
inline void ProgramData::set_program_annotation(const char* value, size_t size) {
  
  program_annotation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.ProgramData.program_annotation)
}
inline std::string* ProgramData::mutable_program_annotation() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ProgramData.program_annotation)
  return program_annotation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProgramData::release_program_annotation() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ProgramData.program_annotation)
  
  return program_annotation_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProgramData::set_allocated_program_annotation(std::string* program_annotation) {
  if (program_annotation != nullptr) {
    
  } else {
    
  }
  program_annotation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), program_annotation);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ProgramData.program_annotation)
}

// int32 speed_ratio = 10;
inline void ProgramData::clear_speed_ratio() {
  speed_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProgramData::speed_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.speed_ratio)
  return speed_ratio_;
}
inline void ProgramData::set_speed_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramData.speed_ratio)
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ProgramData::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& ProgramData::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramData.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* ProgramData::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ProgramData.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ProgramData::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ProgramData.response)
  return response_;
}
inline void ProgramData::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ProgramData.response)
}

// -------------------------------------------------------------------

// StopState

// .Nrmk.IndyFramework.StopState.StopCategory category = 1;
inline void StopState::clear_category() {
  category_ = 0;
}
inline ::Nrmk::IndyFramework::StopState_StopCategory StopState::category() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.StopState.category)
  return static_cast< ::Nrmk::IndyFramework::StopState_StopCategory >(category_);
}
inline void StopState::set_category(::Nrmk::IndyFramework::StopState_StopCategory value) {
  
  category_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.StopState.category)
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool StopState::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& StopState::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.StopState.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* StopState::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.StopState.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* StopState::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.StopState.response)
  return response_;
}
inline void StopState::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.StopState.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IndyFramework
}  // namespace Nrmk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Nrmk::IndyFramework::StopState_StopCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::StopState_StopCategory>() {
  return ::Nrmk::IndyFramework::StopState_StopCategory_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rtde_5fmsgs_2eproto
