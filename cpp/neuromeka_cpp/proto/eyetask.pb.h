// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eyetask.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_eyetask_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_eyetask_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_eyetask_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_eyetask_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_eyetask_2eproto;
namespace EyeTask {
class ClassList;
struct ClassListDefaultTypeInternal;
extern ClassListDefaultTypeInternal _ClassList_default_instance_;
class DetectRequest;
struct DetectRequestDefaultTypeInternal;
extern DetectRequestDefaultTypeInternal _DetectRequest_default_instance_;
class DetectResponse;
struct DetectResponseDefaultTypeInternal;
extern DetectResponseDefaultTypeInternal _DetectResponse_default_instance_;
class ImageRequest;
struct ImageRequestDefaultTypeInternal;
extern ImageRequestDefaultTypeInternal _ImageRequest_default_instance_;
class ImageResponse;
struct ImageResponseDefaultTypeInternal;
extern ImageResponseDefaultTypeInternal _ImageResponse_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class RetrieveRequest;
struct RetrieveRequestDefaultTypeInternal;
extern RetrieveRequestDefaultTypeInternal _RetrieveRequest_default_instance_;
}  // namespace EyeTask
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace EyeTask {

// ===================================================================


// -------------------------------------------------------------------

class ImageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EyeTask.ImageRequest) */ {
 public:
  inline ImageRequest() : ImageRequest(nullptr) {}
  ~ImageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ImageRequest(::google::protobuf::internal::ConstantInitialized);

  ImageRequest(const ImageRequest& from);
  ImageRequest(ImageRequest&& from) noexcept
    : ImageRequest() {
    *this = ::std::move(from);
  }

  inline ImageRequest& operator=(const ImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageRequest& operator=(ImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageRequest* internal_default_instance() {
    return reinterpret_cast<const ImageRequest*>(
               &_ImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageRequest& a, ImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ImageRequest& from) {
    ImageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EyeTask.ImageRequest";
  }
  protected:
  explicit ImageRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 type = 2;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:EyeTask.ImageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    ::int32_t type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_eyetask_2eproto;
};// -------------------------------------------------------------------

class ImageResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EyeTask.ImageResponse) */ {
 public:
  inline ImageResponse() : ImageResponse(nullptr) {}
  ~ImageResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ImageResponse(::google::protobuf::internal::ConstantInitialized);

  ImageResponse(const ImageResponse& from);
  ImageResponse(ImageResponse&& from) noexcept
    : ImageResponse() {
    *this = ::std::move(from);
  }

  inline ImageResponse& operator=(const ImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageResponse& operator=(ImageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageResponse* internal_default_instance() {
    return reinterpret_cast<const ImageResponse*>(
               &_ImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImageResponse& a, ImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ImageResponse& from) {
    ImageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EyeTask.ImageResponse";
  }
  protected:
  explicit ImageResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 5,
    kDepthFieldNumber = 6,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kDepthScaleFieldNumber = 7,
    kErrorStateFieldNumber = 8,
  };
  // bytes color = 5;
  void clear_color() ;
  const std::string& color() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_color(Arg_&& arg, Args_... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* ptr);

  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(
      const std::string& value);
  std::string* _internal_mutable_color();

  public:
  // bytes depth = 6;
  void clear_depth() ;
  const std::string& depth() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_depth(Arg_&& arg, Args_... args);
  std::string* mutable_depth();
  PROTOBUF_NODISCARD std::string* release_depth();
  void set_allocated_depth(std::string* ptr);

  private:
  const std::string& _internal_depth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_depth(
      const std::string& value);
  std::string* _internal_mutable_depth();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 type = 2;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // int32 width = 3;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // int32 height = 4;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // float depth_scale = 7;
  void clear_depth_scale() ;
  float depth_scale() const;
  void set_depth_scale(float value);

  private:
  float _internal_depth_scale() const;
  void _internal_set_depth_scale(float value);

  public:
  // bool error_state = 8;
  void clear_error_state() ;
  bool error_state() const;
  void set_error_state(bool value);

  private:
  bool _internal_error_state() const;
  void _internal_set_error_state(bool value);

  public:
  // @@protoc_insertion_point(class_scope:EyeTask.ImageResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr color_;
    ::google::protobuf::internal::ArenaStringPtr depth_;
    ::int32_t id_;
    ::int32_t type_;
    ::int32_t width_;
    ::int32_t height_;
    float depth_scale_;
    bool error_state_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_eyetask_2eproto;
};// -------------------------------------------------------------------

class Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EyeTask.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Request(::google::protobuf::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EyeTask.Request";
  }
  protected:
  explicit Request(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:EyeTask.Request)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_eyetask_2eproto;
};// -------------------------------------------------------------------

class ClassList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EyeTask.ClassList) */ {
 public:
  inline ClassList() : ClassList(nullptr) {}
  ~ClassList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClassList(::google::protobuf::internal::ConstantInitialized);

  ClassList(const ClassList& from);
  ClassList(ClassList&& from) noexcept
    : ClassList() {
    *this = ::std::move(from);
  }

  inline ClassList& operator=(const ClassList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassList& operator=(ClassList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassList* internal_default_instance() {
    return reinterpret_cast<const ClassList*>(
               &_ClassList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClassList& a, ClassList& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClassList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClassList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClassList& from) {
    ClassList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EyeTask.ClassList";
  }
  protected:
  explicit ClassList(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassNamesFieldNumber = 2,
    kIdFieldNumber = 1,
    kErrorStateFieldNumber = 8,
  };
  // repeated string class_names = 2;
  int class_names_size() const;
  private:
  int _internal_class_names_size() const;

  public:
  void clear_class_names() ;
  const std::string& class_names(int index) const;
  std::string* mutable_class_names(int index);
  void set_class_names(int index, const std::string& value);
  void set_class_names(int index, std::string&& value);
  void set_class_names(int index, const char* value);
  void set_class_names(int index, const char* value, std::size_t size);
  void set_class_names(int index, absl::string_view value);
  std::string* add_class_names();
  void add_class_names(const std::string& value);
  void add_class_names(std::string&& value);
  void add_class_names(const char* value);
  void add_class_names(const char* value, std::size_t size);
  void add_class_names(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& class_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_class_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_class_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_class_names();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // bool error_state = 8;
  void clear_error_state() ;
  bool error_state() const;
  void set_error_state(bool value);

  private:
  bool _internal_error_state() const;
  void _internal_set_error_state(bool value);

  public:
  // @@protoc_insertion_point(class_scope:EyeTask.ClassList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 37, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> class_names_;
    ::int32_t id_;
    bool error_state_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_eyetask_2eproto;
};// -------------------------------------------------------------------

class DetectRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EyeTask.DetectRequest) */ {
 public:
  inline DetectRequest() : DetectRequest(nullptr) {}
  ~DetectRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DetectRequest(::google::protobuf::internal::ConstantInitialized);

  DetectRequest(const DetectRequest& from);
  DetectRequest(DetectRequest&& from) noexcept
    : DetectRequest() {
    *this = ::std::move(from);
  }

  inline DetectRequest& operator=(const DetectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectRequest& operator=(DetectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectRequest* internal_default_instance() {
    return reinterpret_cast<const DetectRequest*>(
               &_DetectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DetectRequest& a, DetectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DetectRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DetectRequest& from) {
    DetectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EyeTask.DetectRequest";
  }
  protected:
  explicit DetectRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseCmdFieldNumber = 3,
    kRobotIpFieldNumber = 4,
    kIdFieldNumber = 1,
    kClsFieldNumber = 2,
  };
  // repeated float pose_cmd = 3;
  int pose_cmd_size() const;
  private:
  int _internal_pose_cmd_size() const;

  public:
  void clear_pose_cmd() ;
  float pose_cmd(int index) const;
  void set_pose_cmd(int index, float value);
  void add_pose_cmd(float value);
  const ::google::protobuf::RepeatedField<float>& pose_cmd() const;
  ::google::protobuf::RepeatedField<float>* mutable_pose_cmd();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_pose_cmd() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_pose_cmd();

  public:
  // string robot_ip = 4;
  void clear_robot_ip() ;
  const std::string& robot_ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_robot_ip(Arg_&& arg, Args_... args);
  std::string* mutable_robot_ip();
  PROTOBUF_NODISCARD std::string* release_robot_ip();
  void set_allocated_robot_ip(std::string* ptr);

  private:
  const std::string& _internal_robot_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_ip(
      const std::string& value);
  std::string* _internal_mutable_robot_ip();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 cls = 2;
  void clear_cls() ;
  ::int32_t cls() const;
  void set_cls(::int32_t value);

  private:
  ::int32_t _internal_cls() const;
  void _internal_set_cls(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:EyeTask.DetectRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 38, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> pose_cmd_;
    ::google::protobuf::internal::ArenaStringPtr robot_ip_;
    ::int32_t id_;
    ::int32_t cls_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_eyetask_2eproto;
};// -------------------------------------------------------------------

class RetrieveRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EyeTask.RetrieveRequest) */ {
 public:
  inline RetrieveRequest() : RetrieveRequest(nullptr) {}
  ~RetrieveRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RetrieveRequest(::google::protobuf::internal::ConstantInitialized);

  RetrieveRequest(const RetrieveRequest& from);
  RetrieveRequest(RetrieveRequest&& from) noexcept
    : RetrieveRequest() {
    *this = ::std::move(from);
  }

  inline RetrieveRequest& operator=(const RetrieveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveRequest& operator=(RetrieveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetrieveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetrieveRequest* internal_default_instance() {
    return reinterpret_cast<const RetrieveRequest*>(
               &_RetrieveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RetrieveRequest& a, RetrieveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RetrieveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetrieveRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetrieveRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RetrieveRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RetrieveRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RetrieveRequest& from) {
    RetrieveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetrieveRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EyeTask.RetrieveRequest";
  }
  protected:
  explicit RetrieveRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kClsFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 cls = 2;
  void clear_cls() ;
  ::int32_t cls() const;
  void set_cls(::int32_t value);

  private:
  ::int32_t _internal_cls() const;
  void _internal_set_cls(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:EyeTask.RetrieveRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    ::int32_t cls_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_eyetask_2eproto;
};// -------------------------------------------------------------------

class DetectResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EyeTask.DetectResponse) */ {
 public:
  inline DetectResponse() : DetectResponse(nullptr) {}
  ~DetectResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DetectResponse(::google::protobuf::internal::ConstantInitialized);

  DetectResponse(const DetectResponse& from);
  DetectResponse(DetectResponse&& from) noexcept
    : DetectResponse() {
    *this = ::std::move(from);
  }

  inline DetectResponse& operator=(const DetectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectResponse& operator=(DetectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectResponse* internal_default_instance() {
    return reinterpret_cast<const DetectResponse*>(
               &_DetectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DetectResponse& a, DetectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DetectResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DetectResponse& from) {
    DetectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EyeTask.DetectResponse";
  }
  protected:
  explicit DetectResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTarEePoseFieldNumber = 5,
    kTarToolPoseFieldNumber = 6,
    kTarObjPoseFieldNumber = 7,
    kErrorModuleFieldNumber = 10,
    kIdFieldNumber = 1,
    kClsFieldNumber = 4,
    kDetectedFieldNumber = 2,
    kPassedFieldNumber = 3,
    kErrorStateFieldNumber = 9,
    kToolIdxFieldNumber = 8,
  };
  // repeated float tar_ee_pose = 5;
  int tar_ee_pose_size() const;
  private:
  int _internal_tar_ee_pose_size() const;

  public:
  void clear_tar_ee_pose() ;
  float tar_ee_pose(int index) const;
  void set_tar_ee_pose(int index, float value);
  void add_tar_ee_pose(float value);
  const ::google::protobuf::RepeatedField<float>& tar_ee_pose() const;
  ::google::protobuf::RepeatedField<float>* mutable_tar_ee_pose();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tar_ee_pose() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tar_ee_pose();

  public:
  // repeated float tar_tool_pose = 6;
  int tar_tool_pose_size() const;
  private:
  int _internal_tar_tool_pose_size() const;

  public:
  void clear_tar_tool_pose() ;
  float tar_tool_pose(int index) const;
  void set_tar_tool_pose(int index, float value);
  void add_tar_tool_pose(float value);
  const ::google::protobuf::RepeatedField<float>& tar_tool_pose() const;
  ::google::protobuf::RepeatedField<float>* mutable_tar_tool_pose();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tar_tool_pose() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tar_tool_pose();

  public:
  // repeated float tar_obj_pose = 7;
  int tar_obj_pose_size() const;
  private:
  int _internal_tar_obj_pose_size() const;

  public:
  void clear_tar_obj_pose() ;
  float tar_obj_pose(int index) const;
  void set_tar_obj_pose(int index, float value);
  void add_tar_obj_pose(float value);
  const ::google::protobuf::RepeatedField<float>& tar_obj_pose() const;
  ::google::protobuf::RepeatedField<float>* mutable_tar_obj_pose();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tar_obj_pose() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tar_obj_pose();

  public:
  // string error_module = 10;
  void clear_error_module() ;
  const std::string& error_module() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_module(Arg_&& arg, Args_... args);
  std::string* mutable_error_module();
  PROTOBUF_NODISCARD std::string* release_error_module();
  void set_allocated_error_module(std::string* ptr);

  private:
  const std::string& _internal_error_module() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_module(
      const std::string& value);
  std::string* _internal_mutable_error_module();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 cls = 4;
  void clear_cls() ;
  ::int32_t cls() const;
  void set_cls(::int32_t value);

  private:
  ::int32_t _internal_cls() const;
  void _internal_set_cls(::int32_t value);

  public:
  // bool detected = 2;
  void clear_detected() ;
  bool detected() const;
  void set_detected(bool value);

  private:
  bool _internal_detected() const;
  void _internal_set_detected(bool value);

  public:
  // bool passed = 3;
  void clear_passed() ;
  bool passed() const;
  void set_passed(bool value);

  private:
  bool _internal_passed() const;
  void _internal_set_passed(bool value);

  public:
  // bool error_state = 9;
  void clear_error_state() ;
  bool error_state() const;
  void set_error_state(bool value);

  private:
  bool _internal_error_state() const;
  void _internal_set_error_state(bool value);

  public:
  // int32 tool_idx = 8;
  void clear_tool_idx() ;
  ::int32_t tool_idx() const;
  void set_tool_idx(::int32_t value);

  private:
  ::int32_t _internal_tool_idx() const;
  void _internal_set_tool_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:EyeTask.DetectResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10, 0, 51, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> tar_ee_pose_;
    ::google::protobuf::RepeatedField<float> tar_tool_pose_;
    ::google::protobuf::RepeatedField<float> tar_obj_pose_;
    ::google::protobuf::internal::ArenaStringPtr error_module_;
    ::int32_t id_;
    ::int32_t cls_;
    bool detected_;
    bool passed_;
    bool error_state_;
    ::int32_t tool_idx_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_eyetask_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ImageRequest

// int32 id = 1;
inline void ImageRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t ImageRequest::id() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageRequest.id)
  return _internal_id();
}
inline void ImageRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:EyeTask.ImageRequest.id)
}
inline ::int32_t ImageRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void ImageRequest::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int32 type = 2;
inline void ImageRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::int32_t ImageRequest::type() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageRequest.type)
  return _internal_type();
}
inline void ImageRequest::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:EyeTask.ImageRequest.type)
}
inline ::int32_t ImageRequest::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void ImageRequest::_internal_set_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// ImageResponse

// int32 id = 1;
inline void ImageResponse::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t ImageResponse::id() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.id)
  return _internal_id();
}
inline void ImageResponse::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.id)
}
inline ::int32_t ImageResponse::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void ImageResponse::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int32 type = 2;
inline void ImageResponse::clear_type() {
  _impl_.type_ = 0;
}
inline ::int32_t ImageResponse::type() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.type)
  return _internal_type();
}
inline void ImageResponse::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.type)
}
inline ::int32_t ImageResponse::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void ImageResponse::_internal_set_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// int32 width = 3;
inline void ImageResponse::clear_width() {
  _impl_.width_ = 0;
}
inline ::int32_t ImageResponse::width() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.width)
  return _internal_width();
}
inline void ImageResponse::set_width(::int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.width)
}
inline ::int32_t ImageResponse::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void ImageResponse::_internal_set_width(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// int32 height = 4;
inline void ImageResponse::clear_height() {
  _impl_.height_ = 0;
}
inline ::int32_t ImageResponse::height() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.height)
  return _internal_height();
}
inline void ImageResponse::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.height)
}
inline ::int32_t ImageResponse::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void ImageResponse::_internal_set_height(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// bytes color = 5;
inline void ImageResponse::clear_color() {
  _impl_.color_.ClearToEmpty();
}
inline const std::string& ImageResponse::color() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.color)
  return _internal_color();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageResponse::set_color(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.color_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.color)
}
inline std::string* ImageResponse::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:EyeTask.ImageResponse.color)
  return _s;
}
inline const std::string& ImageResponse::_internal_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.color_.Get();
}
inline void ImageResponse::_internal_set_color(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.color_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageResponse::_internal_mutable_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.color_.Mutable( GetArenaForAllocation());
}
inline std::string* ImageResponse::release_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:EyeTask.ImageResponse.color)
  return _impl_.color_.Release();
}
inline void ImageResponse::set_allocated_color(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.color_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.color_.IsDefault()) {
          _impl_.color_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EyeTask.ImageResponse.color)
}

// bytes depth = 6;
inline void ImageResponse::clear_depth() {
  _impl_.depth_.ClearToEmpty();
}
inline const std::string& ImageResponse::depth() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.depth)
  return _internal_depth();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageResponse::set_depth(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.depth_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.depth)
}
inline std::string* ImageResponse::mutable_depth() {
  std::string* _s = _internal_mutable_depth();
  // @@protoc_insertion_point(field_mutable:EyeTask.ImageResponse.depth)
  return _s;
}
inline const std::string& ImageResponse::_internal_depth() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.depth_.Get();
}
inline void ImageResponse::_internal_set_depth(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.depth_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageResponse::_internal_mutable_depth() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.depth_.Mutable( GetArenaForAllocation());
}
inline std::string* ImageResponse::release_depth() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:EyeTask.ImageResponse.depth)
  return _impl_.depth_.Release();
}
inline void ImageResponse::set_allocated_depth(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.depth_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.depth_.IsDefault()) {
          _impl_.depth_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EyeTask.ImageResponse.depth)
}

// float depth_scale = 7;
inline void ImageResponse::clear_depth_scale() {
  _impl_.depth_scale_ = 0;
}
inline float ImageResponse::depth_scale() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.depth_scale)
  return _internal_depth_scale();
}
inline void ImageResponse::set_depth_scale(float value) {
  _internal_set_depth_scale(value);
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.depth_scale)
}
inline float ImageResponse::_internal_depth_scale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.depth_scale_;
}
inline void ImageResponse::_internal_set_depth_scale(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.depth_scale_ = value;
}

// bool error_state = 8;
inline void ImageResponse::clear_error_state() {
  _impl_.error_state_ = false;
}
inline bool ImageResponse::error_state() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.error_state)
  return _internal_error_state();
}
inline void ImageResponse::set_error_state(bool value) {
  _internal_set_error_state(value);
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.error_state)
}
inline bool ImageResponse::_internal_error_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_state_;
}
inline void ImageResponse::_internal_set_error_state(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_state_ = value;
}

// -------------------------------------------------------------------

// Request

// int32 id = 1;
inline void Request::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t Request::id() const {
  // @@protoc_insertion_point(field_get:EyeTask.Request.id)
  return _internal_id();
}
inline void Request::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:EyeTask.Request.id)
}
inline ::int32_t Request::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Request::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// ClassList

// int32 id = 1;
inline void ClassList::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t ClassList::id() const {
  // @@protoc_insertion_point(field_get:EyeTask.ClassList.id)
  return _internal_id();
}
inline void ClassList::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:EyeTask.ClassList.id)
}
inline ::int32_t ClassList::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void ClassList::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// repeated string class_names = 2;
inline int ClassList::_internal_class_names_size() const {
  return _internal_class_names().size();
}
inline int ClassList::class_names_size() const {
  return _internal_class_names_size();
}
inline void ClassList::clear_class_names() {
  _internal_mutable_class_names()->Clear();
}
inline std::string* ClassList::add_class_names() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_class_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:EyeTask.ClassList.class_names)
  return _s;
}
inline const std::string& ClassList::class_names(int index) const {
  // @@protoc_insertion_point(field_get:EyeTask.ClassList.class_names)
  return _internal_class_names().Get(index);
}
inline std::string* ClassList::mutable_class_names(int index) {
  // @@protoc_insertion_point(field_mutable:EyeTask.ClassList.class_names)
  return _internal_mutable_class_names()->Mutable(index);
}
inline void ClassList::set_class_names(int index, const std::string& value) {
  _internal_mutable_class_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:EyeTask.ClassList.class_names)
}
inline void ClassList::set_class_names(int index, std::string&& value) {
  _internal_mutable_class_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:EyeTask.ClassList.class_names)
}
inline void ClassList::set_class_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_class_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:EyeTask.ClassList.class_names)
}
inline void ClassList::set_class_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_class_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:EyeTask.ClassList.class_names)
}
inline void ClassList::set_class_names(int index, absl::string_view value) {
  _internal_mutable_class_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:EyeTask.ClassList.class_names)
}
inline void ClassList::add_class_names(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:EyeTask.ClassList.class_names)
}
inline void ClassList::add_class_names(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:EyeTask.ClassList.class_names)
}
inline void ClassList::add_class_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:EyeTask.ClassList.class_names)
}
inline void ClassList::add_class_names(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:EyeTask.ClassList.class_names)
}
inline void ClassList::add_class_names(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:EyeTask.ClassList.class_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ClassList::class_names() const {
  // @@protoc_insertion_point(field_list:EyeTask.ClassList.class_names)
  return _internal_class_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* ClassList::mutable_class_names() {
  // @@protoc_insertion_point(field_mutable_list:EyeTask.ClassList.class_names)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_class_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ClassList::_internal_class_names() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ClassList::_internal_mutable_class_names() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.class_names_;
}

// bool error_state = 8;
inline void ClassList::clear_error_state() {
  _impl_.error_state_ = false;
}
inline bool ClassList::error_state() const {
  // @@protoc_insertion_point(field_get:EyeTask.ClassList.error_state)
  return _internal_error_state();
}
inline void ClassList::set_error_state(bool value) {
  _internal_set_error_state(value);
  // @@protoc_insertion_point(field_set:EyeTask.ClassList.error_state)
}
inline bool ClassList::_internal_error_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_state_;
}
inline void ClassList::_internal_set_error_state(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_state_ = value;
}

// -------------------------------------------------------------------

// DetectRequest

// int32 id = 1;
inline void DetectRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t DetectRequest::id() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectRequest.id)
  return _internal_id();
}
inline void DetectRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectRequest.id)
}
inline ::int32_t DetectRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void DetectRequest::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int32 cls = 2;
inline void DetectRequest::clear_cls() {
  _impl_.cls_ = 0;
}
inline ::int32_t DetectRequest::cls() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectRequest.cls)
  return _internal_cls();
}
inline void DetectRequest::set_cls(::int32_t value) {
  _internal_set_cls(value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectRequest.cls)
}
inline ::int32_t DetectRequest::_internal_cls() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cls_;
}
inline void DetectRequest::_internal_set_cls(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cls_ = value;
}

// repeated float pose_cmd = 3;
inline int DetectRequest::_internal_pose_cmd_size() const {
  return _internal_pose_cmd().size();
}
inline int DetectRequest::pose_cmd_size() const {
  return _internal_pose_cmd_size();
}
inline void DetectRequest::clear_pose_cmd() {
  _internal_mutable_pose_cmd()->Clear();
}
inline float DetectRequest::pose_cmd(int index) const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectRequest.pose_cmd)
  return _internal_pose_cmd().Get(index);
}
inline void DetectRequest::set_pose_cmd(int index, float value) {
  _internal_mutable_pose_cmd()->Set(index, value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectRequest.pose_cmd)
}
inline void DetectRequest::add_pose_cmd(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pose_cmd()->Add(value);
  // @@protoc_insertion_point(field_add:EyeTask.DetectRequest.pose_cmd)
}
inline const ::google::protobuf::RepeatedField<float>& DetectRequest::pose_cmd() const {
  // @@protoc_insertion_point(field_list:EyeTask.DetectRequest.pose_cmd)
  return _internal_pose_cmd();
}
inline ::google::protobuf::RepeatedField<float>* DetectRequest::mutable_pose_cmd() {
  // @@protoc_insertion_point(field_mutable_list:EyeTask.DetectRequest.pose_cmd)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pose_cmd();
}

inline const ::google::protobuf::RepeatedField<float>& DetectRequest::_internal_pose_cmd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pose_cmd_;
}
inline ::google::protobuf::RepeatedField<float>* DetectRequest::_internal_mutable_pose_cmd() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pose_cmd_;
}

// string robot_ip = 4;
inline void DetectRequest::clear_robot_ip() {
  _impl_.robot_ip_.ClearToEmpty();
}
inline const std::string& DetectRequest::robot_ip() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectRequest.robot_ip)
  return _internal_robot_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DetectRequest::set_robot_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.robot_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EyeTask.DetectRequest.robot_ip)
}
inline std::string* DetectRequest::mutable_robot_ip() {
  std::string* _s = _internal_mutable_robot_ip();
  // @@protoc_insertion_point(field_mutable:EyeTask.DetectRequest.robot_ip)
  return _s;
}
inline const std::string& DetectRequest::_internal_robot_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.robot_ip_.Get();
}
inline void DetectRequest::_internal_set_robot_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.robot_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* DetectRequest::_internal_mutable_robot_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.robot_ip_.Mutable( GetArenaForAllocation());
}
inline std::string* DetectRequest::release_robot_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:EyeTask.DetectRequest.robot_ip)
  return _impl_.robot_ip_.Release();
}
inline void DetectRequest::set_allocated_robot_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.robot_ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.robot_ip_.IsDefault()) {
          _impl_.robot_ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EyeTask.DetectRequest.robot_ip)
}

// -------------------------------------------------------------------

// RetrieveRequest

// int32 id = 1;
inline void RetrieveRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t RetrieveRequest::id() const {
  // @@protoc_insertion_point(field_get:EyeTask.RetrieveRequest.id)
  return _internal_id();
}
inline void RetrieveRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:EyeTask.RetrieveRequest.id)
}
inline ::int32_t RetrieveRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void RetrieveRequest::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int32 cls = 2;
inline void RetrieveRequest::clear_cls() {
  _impl_.cls_ = 0;
}
inline ::int32_t RetrieveRequest::cls() const {
  // @@protoc_insertion_point(field_get:EyeTask.RetrieveRequest.cls)
  return _internal_cls();
}
inline void RetrieveRequest::set_cls(::int32_t value) {
  _internal_set_cls(value);
  // @@protoc_insertion_point(field_set:EyeTask.RetrieveRequest.cls)
}
inline ::int32_t RetrieveRequest::_internal_cls() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cls_;
}
inline void RetrieveRequest::_internal_set_cls(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cls_ = value;
}

// -------------------------------------------------------------------

// DetectResponse

// int32 id = 1;
inline void DetectResponse::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t DetectResponse::id() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.id)
  return _internal_id();
}
inline void DetectResponse::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.id)
}
inline ::int32_t DetectResponse::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void DetectResponse::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// bool detected = 2;
inline void DetectResponse::clear_detected() {
  _impl_.detected_ = false;
}
inline bool DetectResponse::detected() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.detected)
  return _internal_detected();
}
inline void DetectResponse::set_detected(bool value) {
  _internal_set_detected(value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.detected)
}
inline bool DetectResponse::_internal_detected() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.detected_;
}
inline void DetectResponse::_internal_set_detected(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.detected_ = value;
}

// bool passed = 3;
inline void DetectResponse::clear_passed() {
  _impl_.passed_ = false;
}
inline bool DetectResponse::passed() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.passed)
  return _internal_passed();
}
inline void DetectResponse::set_passed(bool value) {
  _internal_set_passed(value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.passed)
}
inline bool DetectResponse::_internal_passed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.passed_;
}
inline void DetectResponse::_internal_set_passed(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.passed_ = value;
}

// int32 cls = 4;
inline void DetectResponse::clear_cls() {
  _impl_.cls_ = 0;
}
inline ::int32_t DetectResponse::cls() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.cls)
  return _internal_cls();
}
inline void DetectResponse::set_cls(::int32_t value) {
  _internal_set_cls(value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.cls)
}
inline ::int32_t DetectResponse::_internal_cls() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cls_;
}
inline void DetectResponse::_internal_set_cls(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cls_ = value;
}

// repeated float tar_ee_pose = 5;
inline int DetectResponse::_internal_tar_ee_pose_size() const {
  return _internal_tar_ee_pose().size();
}
inline int DetectResponse::tar_ee_pose_size() const {
  return _internal_tar_ee_pose_size();
}
inline void DetectResponse::clear_tar_ee_pose() {
  _internal_mutable_tar_ee_pose()->Clear();
}
inline float DetectResponse::tar_ee_pose(int index) const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.tar_ee_pose)
  return _internal_tar_ee_pose().Get(index);
}
inline void DetectResponse::set_tar_ee_pose(int index, float value) {
  _internal_mutable_tar_ee_pose()->Set(index, value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.tar_ee_pose)
}
inline void DetectResponse::add_tar_ee_pose(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tar_ee_pose()->Add(value);
  // @@protoc_insertion_point(field_add:EyeTask.DetectResponse.tar_ee_pose)
}
inline const ::google::protobuf::RepeatedField<float>& DetectResponse::tar_ee_pose() const {
  // @@protoc_insertion_point(field_list:EyeTask.DetectResponse.tar_ee_pose)
  return _internal_tar_ee_pose();
}
inline ::google::protobuf::RepeatedField<float>* DetectResponse::mutable_tar_ee_pose() {
  // @@protoc_insertion_point(field_mutable_list:EyeTask.DetectResponse.tar_ee_pose)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tar_ee_pose();
}

inline const ::google::protobuf::RepeatedField<float>& DetectResponse::_internal_tar_ee_pose() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tar_ee_pose_;
}
inline ::google::protobuf::RepeatedField<float>* DetectResponse::_internal_mutable_tar_ee_pose() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tar_ee_pose_;
}

// repeated float tar_tool_pose = 6;
inline int DetectResponse::_internal_tar_tool_pose_size() const {
  return _internal_tar_tool_pose().size();
}
inline int DetectResponse::tar_tool_pose_size() const {
  return _internal_tar_tool_pose_size();
}
inline void DetectResponse::clear_tar_tool_pose() {
  _internal_mutable_tar_tool_pose()->Clear();
}
inline float DetectResponse::tar_tool_pose(int index) const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.tar_tool_pose)
  return _internal_tar_tool_pose().Get(index);
}
inline void DetectResponse::set_tar_tool_pose(int index, float value) {
  _internal_mutable_tar_tool_pose()->Set(index, value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.tar_tool_pose)
}
inline void DetectResponse::add_tar_tool_pose(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tar_tool_pose()->Add(value);
  // @@protoc_insertion_point(field_add:EyeTask.DetectResponse.tar_tool_pose)
}
inline const ::google::protobuf::RepeatedField<float>& DetectResponse::tar_tool_pose() const {
  // @@protoc_insertion_point(field_list:EyeTask.DetectResponse.tar_tool_pose)
  return _internal_tar_tool_pose();
}
inline ::google::protobuf::RepeatedField<float>* DetectResponse::mutable_tar_tool_pose() {
  // @@protoc_insertion_point(field_mutable_list:EyeTask.DetectResponse.tar_tool_pose)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tar_tool_pose();
}

inline const ::google::protobuf::RepeatedField<float>& DetectResponse::_internal_tar_tool_pose() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tar_tool_pose_;
}
inline ::google::protobuf::RepeatedField<float>* DetectResponse::_internal_mutable_tar_tool_pose() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tar_tool_pose_;
}

// repeated float tar_obj_pose = 7;
inline int DetectResponse::_internal_tar_obj_pose_size() const {
  return _internal_tar_obj_pose().size();
}
inline int DetectResponse::tar_obj_pose_size() const {
  return _internal_tar_obj_pose_size();
}
inline void DetectResponse::clear_tar_obj_pose() {
  _internal_mutable_tar_obj_pose()->Clear();
}
inline float DetectResponse::tar_obj_pose(int index) const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.tar_obj_pose)
  return _internal_tar_obj_pose().Get(index);
}
inline void DetectResponse::set_tar_obj_pose(int index, float value) {
  _internal_mutable_tar_obj_pose()->Set(index, value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.tar_obj_pose)
}
inline void DetectResponse::add_tar_obj_pose(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tar_obj_pose()->Add(value);
  // @@protoc_insertion_point(field_add:EyeTask.DetectResponse.tar_obj_pose)
}
inline const ::google::protobuf::RepeatedField<float>& DetectResponse::tar_obj_pose() const {
  // @@protoc_insertion_point(field_list:EyeTask.DetectResponse.tar_obj_pose)
  return _internal_tar_obj_pose();
}
inline ::google::protobuf::RepeatedField<float>* DetectResponse::mutable_tar_obj_pose() {
  // @@protoc_insertion_point(field_mutable_list:EyeTask.DetectResponse.tar_obj_pose)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tar_obj_pose();
}

inline const ::google::protobuf::RepeatedField<float>& DetectResponse::_internal_tar_obj_pose() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tar_obj_pose_;
}
inline ::google::protobuf::RepeatedField<float>* DetectResponse::_internal_mutable_tar_obj_pose() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tar_obj_pose_;
}

// int32 tool_idx = 8;
inline void DetectResponse::clear_tool_idx() {
  _impl_.tool_idx_ = 0;
}
inline ::int32_t DetectResponse::tool_idx() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.tool_idx)
  return _internal_tool_idx();
}
inline void DetectResponse::set_tool_idx(::int32_t value) {
  _internal_set_tool_idx(value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.tool_idx)
}
inline ::int32_t DetectResponse::_internal_tool_idx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tool_idx_;
}
inline void DetectResponse::_internal_set_tool_idx(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tool_idx_ = value;
}

// bool error_state = 9;
inline void DetectResponse::clear_error_state() {
  _impl_.error_state_ = false;
}
inline bool DetectResponse::error_state() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.error_state)
  return _internal_error_state();
}
inline void DetectResponse::set_error_state(bool value) {
  _internal_set_error_state(value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.error_state)
}
inline bool DetectResponse::_internal_error_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_state_;
}
inline void DetectResponse::_internal_set_error_state(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_state_ = value;
}

// string error_module = 10;
inline void DetectResponse::clear_error_module() {
  _impl_.error_module_.ClearToEmpty();
}
inline const std::string& DetectResponse::error_module() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.error_module)
  return _internal_error_module();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DetectResponse::set_error_module(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_module_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.error_module)
}
inline std::string* DetectResponse::mutable_error_module() {
  std::string* _s = _internal_mutable_error_module();
  // @@protoc_insertion_point(field_mutable:EyeTask.DetectResponse.error_module)
  return _s;
}
inline const std::string& DetectResponse::_internal_error_module() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_module_.Get();
}
inline void DetectResponse::_internal_set_error_module(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_module_.Set(value, GetArenaForAllocation());
}
inline std::string* DetectResponse::_internal_mutable_error_module() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_module_.Mutable( GetArenaForAllocation());
}
inline std::string* DetectResponse::release_error_module() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:EyeTask.DetectResponse.error_module)
  return _impl_.error_module_.Release();
}
inline void DetectResponse::set_allocated_error_module(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_module_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_module_.IsDefault()) {
          _impl_.error_module_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EyeTask.DetectResponse.error_module)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace EyeTask


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_eyetask_2eproto_2epb_2eh
