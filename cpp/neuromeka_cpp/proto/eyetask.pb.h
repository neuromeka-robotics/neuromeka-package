// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eyetask.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_eyetask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_eyetask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_eyetask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_eyetask_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eyetask_2eproto;
namespace EyeTask {
class ClassList;
class ClassListDefaultTypeInternal;
extern ClassListDefaultTypeInternal _ClassList_default_instance_;
class DetectRequest;
class DetectRequestDefaultTypeInternal;
extern DetectRequestDefaultTypeInternal _DetectRequest_default_instance_;
class DetectResponse;
class DetectResponseDefaultTypeInternal;
extern DetectResponseDefaultTypeInternal _DetectResponse_default_instance_;
class ImageRequest;
class ImageRequestDefaultTypeInternal;
extern ImageRequestDefaultTypeInternal _ImageRequest_default_instance_;
class ImageResponse;
class ImageResponseDefaultTypeInternal;
extern ImageResponseDefaultTypeInternal _ImageResponse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class RetrieveRequest;
class RetrieveRequestDefaultTypeInternal;
extern RetrieveRequestDefaultTypeInternal _RetrieveRequest_default_instance_;
}  // namespace EyeTask
PROTOBUF_NAMESPACE_OPEN
template<> ::EyeTask::ClassList* Arena::CreateMaybeMessage<::EyeTask::ClassList>(Arena*);
template<> ::EyeTask::DetectRequest* Arena::CreateMaybeMessage<::EyeTask::DetectRequest>(Arena*);
template<> ::EyeTask::DetectResponse* Arena::CreateMaybeMessage<::EyeTask::DetectResponse>(Arena*);
template<> ::EyeTask::ImageRequest* Arena::CreateMaybeMessage<::EyeTask::ImageRequest>(Arena*);
template<> ::EyeTask::ImageResponse* Arena::CreateMaybeMessage<::EyeTask::ImageResponse>(Arena*);
template<> ::EyeTask::Request* Arena::CreateMaybeMessage<::EyeTask::Request>(Arena*);
template<> ::EyeTask::RetrieveRequest* Arena::CreateMaybeMessage<::EyeTask::RetrieveRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace EyeTask {

// ===================================================================

class ImageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EyeTask.ImageRequest) */ {
 public:
  ImageRequest();
  virtual ~ImageRequest();

  ImageRequest(const ImageRequest& from);
  ImageRequest(ImageRequest&& from) noexcept
    : ImageRequest() {
    *this = ::std::move(from);
  }

  inline ImageRequest& operator=(const ImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageRequest& operator=(ImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageRequest* internal_default_instance() {
    return reinterpret_cast<const ImageRequest*>(
               &_ImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ImageRequest* other);
  friend void swap(ImageRequest& a, ImageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageRequest* New() const final {
    return CreateMaybeMessage<ImageRequest>(nullptr);
  }

  ImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageRequest& from);
  void MergeFrom(const ImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EyeTask.ImageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eyetask_2eproto);
    return ::descriptor_table_eyetask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:EyeTask.ImageRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eyetask_2eproto;
};
// -------------------------------------------------------------------

class ImageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EyeTask.ImageResponse) */ {
 public:
  ImageResponse();
  virtual ~ImageResponse();

  ImageResponse(const ImageResponse& from);
  ImageResponse(ImageResponse&& from) noexcept
    : ImageResponse() {
    *this = ::std::move(from);
  }

  inline ImageResponse& operator=(const ImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageResponse& operator=(ImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageResponse* internal_default_instance() {
    return reinterpret_cast<const ImageResponse*>(
               &_ImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ImageResponse* other);
  friend void swap(ImageResponse& a, ImageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageResponse* New() const final {
    return CreateMaybeMessage<ImageResponse>(nullptr);
  }

  ImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageResponse& from);
  void MergeFrom(const ImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EyeTask.ImageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eyetask_2eproto);
    return ::descriptor_table_eyetask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes color = 5;
  void clear_color();
  static const int kColorFieldNumber = 5;
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const void* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);

  // bytes depth = 6;
  void clear_depth();
  static const int kDepthFieldNumber = 6;
  const std::string& depth() const;
  void set_depth(const std::string& value);
  void set_depth(std::string&& value);
  void set_depth(const char* value);
  void set_depth(const void* value, size_t size);
  std::string* mutable_depth();
  std::string* release_depth();
  void set_allocated_depth(std::string* depth);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float depth_scale = 7;
  void clear_depth_scale();
  static const int kDepthScaleFieldNumber = 7;
  float depth_scale() const;
  void set_depth_scale(float value);

  // bool error_state = 8;
  void clear_error_state();
  static const int kErrorStateFieldNumber = 8;
  bool error_state() const;
  void set_error_state(bool value);

  // @@protoc_insertion_point(class_scope:EyeTask.ImageResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  float depth_scale_;
  bool error_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eyetask_2eproto;
};
// -------------------------------------------------------------------

class Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EyeTask.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EyeTask.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eyetask_2eproto);
    return ::descriptor_table_eyetask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:EyeTask.Request)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eyetask_2eproto;
};
// -------------------------------------------------------------------

class ClassList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EyeTask.ClassList) */ {
 public:
  ClassList();
  virtual ~ClassList();

  ClassList(const ClassList& from);
  ClassList(ClassList&& from) noexcept
    : ClassList() {
    *this = ::std::move(from);
  }

  inline ClassList& operator=(const ClassList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassList& operator=(ClassList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClassList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassList* internal_default_instance() {
    return reinterpret_cast<const ClassList*>(
               &_ClassList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ClassList* other);
  friend void swap(ClassList& a, ClassList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClassList* New() const final {
    return CreateMaybeMessage<ClassList>(nullptr);
  }

  ClassList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClassList& from);
  void MergeFrom(const ClassList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EyeTask.ClassList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eyetask_2eproto);
    return ::descriptor_table_eyetask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string class_names = 2;
  int class_names_size() const;
  void clear_class_names();
  static const int kClassNamesFieldNumber = 2;
  const std::string& class_names(int index) const;
  std::string* mutable_class_names(int index);
  void set_class_names(int index, const std::string& value);
  void set_class_names(int index, std::string&& value);
  void set_class_names(int index, const char* value);
  void set_class_names(int index, const char* value, size_t size);
  std::string* add_class_names();
  void add_class_names(const std::string& value);
  void add_class_names(std::string&& value);
  void add_class_names(const char* value);
  void add_class_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& class_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_class_names();

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool error_state = 8;
  void clear_error_state();
  static const int kErrorStateFieldNumber = 8;
  bool error_state() const;
  void set_error_state(bool value);

  // @@protoc_insertion_point(class_scope:EyeTask.ClassList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> class_names_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool error_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eyetask_2eproto;
};
// -------------------------------------------------------------------

class DetectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EyeTask.DetectRequest) */ {
 public:
  DetectRequest();
  virtual ~DetectRequest();

  DetectRequest(const DetectRequest& from);
  DetectRequest(DetectRequest&& from) noexcept
    : DetectRequest() {
    *this = ::std::move(from);
  }

  inline DetectRequest& operator=(const DetectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectRequest& operator=(DetectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectRequest* internal_default_instance() {
    return reinterpret_cast<const DetectRequest*>(
               &_DetectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DetectRequest* other);
  friend void swap(DetectRequest& a, DetectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectRequest* New() const final {
    return CreateMaybeMessage<DetectRequest>(nullptr);
  }

  DetectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectRequest& from);
  void MergeFrom(const DetectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EyeTask.DetectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eyetask_2eproto);
    return ::descriptor_table_eyetask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float pose_cmd = 3;
  int pose_cmd_size() const;
  void clear_pose_cmd();
  static const int kPoseCmdFieldNumber = 3;
  float pose_cmd(int index) const;
  void set_pose_cmd(int index, float value);
  void add_pose_cmd(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pose_cmd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pose_cmd();

  // string robot_ip = 4;
  void clear_robot_ip();
  static const int kRobotIpFieldNumber = 4;
  const std::string& robot_ip() const;
  void set_robot_ip(const std::string& value);
  void set_robot_ip(std::string&& value);
  void set_robot_ip(const char* value);
  void set_robot_ip(const char* value, size_t size);
  std::string* mutable_robot_ip();
  std::string* release_robot_ip();
  void set_allocated_robot_ip(std::string* robot_ip);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 cls = 2;
  void clear_cls();
  static const int kClsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 cls() const;
  void set_cls(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:EyeTask.DetectRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pose_cmd_;
  mutable std::atomic<int> _pose_cmd_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 cls_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eyetask_2eproto;
};
// -------------------------------------------------------------------

class RetrieveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EyeTask.RetrieveRequest) */ {
 public:
  RetrieveRequest();
  virtual ~RetrieveRequest();

  RetrieveRequest(const RetrieveRequest& from);
  RetrieveRequest(RetrieveRequest&& from) noexcept
    : RetrieveRequest() {
    *this = ::std::move(from);
  }

  inline RetrieveRequest& operator=(const RetrieveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveRequest& operator=(RetrieveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetrieveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetrieveRequest* internal_default_instance() {
    return reinterpret_cast<const RetrieveRequest*>(
               &_RetrieveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RetrieveRequest* other);
  friend void swap(RetrieveRequest& a, RetrieveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RetrieveRequest* New() const final {
    return CreateMaybeMessage<RetrieveRequest>(nullptr);
  }

  RetrieveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetrieveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetrieveRequest& from);
  void MergeFrom(const RetrieveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetrieveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EyeTask.RetrieveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eyetask_2eproto);
    return ::descriptor_table_eyetask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 cls = 2;
  void clear_cls();
  static const int kClsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 cls() const;
  void set_cls(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:EyeTask.RetrieveRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 cls_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eyetask_2eproto;
};
// -------------------------------------------------------------------

class DetectResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EyeTask.DetectResponse) */ {
 public:
  DetectResponse();
  virtual ~DetectResponse();

  DetectResponse(const DetectResponse& from);
  DetectResponse(DetectResponse&& from) noexcept
    : DetectResponse() {
    *this = ::std::move(from);
  }

  inline DetectResponse& operator=(const DetectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectResponse& operator=(DetectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectResponse* internal_default_instance() {
    return reinterpret_cast<const DetectResponse*>(
               &_DetectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DetectResponse* other);
  friend void swap(DetectResponse& a, DetectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectResponse* New() const final {
    return CreateMaybeMessage<DetectResponse>(nullptr);
  }

  DetectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectResponse& from);
  void MergeFrom(const DetectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EyeTask.DetectResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eyetask_2eproto);
    return ::descriptor_table_eyetask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tar_ee_pose = 5;
  int tar_ee_pose_size() const;
  void clear_tar_ee_pose();
  static const int kTarEePoseFieldNumber = 5;
  float tar_ee_pose(int index) const;
  void set_tar_ee_pose(int index, float value);
  void add_tar_ee_pose(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tar_ee_pose() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tar_ee_pose();

  // repeated float tar_tool_pose = 6;
  int tar_tool_pose_size() const;
  void clear_tar_tool_pose();
  static const int kTarToolPoseFieldNumber = 6;
  float tar_tool_pose(int index) const;
  void set_tar_tool_pose(int index, float value);
  void add_tar_tool_pose(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tar_tool_pose() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tar_tool_pose();

  // repeated float tar_obj_pose = 7;
  int tar_obj_pose_size() const;
  void clear_tar_obj_pose();
  static const int kTarObjPoseFieldNumber = 7;
  float tar_obj_pose(int index) const;
  void set_tar_obj_pose(int index, float value);
  void add_tar_obj_pose(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tar_obj_pose() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tar_obj_pose();

  // string error_module = 10;
  void clear_error_module();
  static const int kErrorModuleFieldNumber = 10;
  const std::string& error_module() const;
  void set_error_module(const std::string& value);
  void set_error_module(std::string&& value);
  void set_error_module(const char* value);
  void set_error_module(const char* value, size_t size);
  std::string* mutable_error_module();
  std::string* release_error_module();
  void set_allocated_error_module(std::string* error_module);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 cls = 4;
  void clear_cls();
  static const int kClsFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 cls() const;
  void set_cls(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool detected = 2;
  void clear_detected();
  static const int kDetectedFieldNumber = 2;
  bool detected() const;
  void set_detected(bool value);

  // bool passed = 3;
  void clear_passed();
  static const int kPassedFieldNumber = 3;
  bool passed() const;
  void set_passed(bool value);

  // bool error_state = 9;
  void clear_error_state();
  static const int kErrorStateFieldNumber = 9;
  bool error_state() const;
  void set_error_state(bool value);

  // int32 tool_idx = 8;
  void clear_tool_idx();
  static const int kToolIdxFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 tool_idx() const;
  void set_tool_idx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:EyeTask.DetectResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tar_ee_pose_;
  mutable std::atomic<int> _tar_ee_pose_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tar_tool_pose_;
  mutable std::atomic<int> _tar_tool_pose_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tar_obj_pose_;
  mutable std::atomic<int> _tar_obj_pose_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_module_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 cls_;
  bool detected_;
  bool passed_;
  bool error_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 tool_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eyetask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageRequest

// int32 id = 1;
inline void ImageRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageRequest::id() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageRequest.id)
  return id_;
}
inline void ImageRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.ImageRequest.id)
}

// int32 type = 2;
inline void ImageRequest::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageRequest::type() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageRequest.type)
  return type_;
}
inline void ImageRequest::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.ImageRequest.type)
}

// -------------------------------------------------------------------

// ImageResponse

// int32 id = 1;
inline void ImageResponse::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageResponse::id() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.id)
  return id_;
}
inline void ImageResponse::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.id)
}

// int32 type = 2;
inline void ImageResponse::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageResponse::type() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.type)
  return type_;
}
inline void ImageResponse::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.type)
}

// int32 width = 3;
inline void ImageResponse::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageResponse::width() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.width)
  return width_;
}
inline void ImageResponse::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.width)
}

// int32 height = 4;
inline void ImageResponse::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageResponse::height() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.height)
  return height_;
}
inline void ImageResponse::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.height)
}

// bytes color = 5;
inline void ImageResponse::clear_color() {
  color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ImageResponse::color() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.color)
  return color_.GetNoArena();
}
inline void ImageResponse::set_color(const std::string& value) {
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.color)
}
inline void ImageResponse::set_color(std::string&& value) {
  
  color_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EyeTask.ImageResponse.color)
}
inline void ImageResponse::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EyeTask.ImageResponse.color)
}
inline void ImageResponse::set_color(const void* value, size_t size) {
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EyeTask.ImageResponse.color)
}
inline std::string* ImageResponse::mutable_color() {
  
  // @@protoc_insertion_point(field_mutable:EyeTask.ImageResponse.color)
  return color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageResponse::release_color() {
  // @@protoc_insertion_point(field_release:EyeTask.ImageResponse.color)
  
  return color_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageResponse::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:EyeTask.ImageResponse.color)
}

// bytes depth = 6;
inline void ImageResponse::clear_depth() {
  depth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ImageResponse::depth() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.depth)
  return depth_.GetNoArena();
}
inline void ImageResponse::set_depth(const std::string& value) {
  
  depth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.depth)
}
inline void ImageResponse::set_depth(std::string&& value) {
  
  depth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EyeTask.ImageResponse.depth)
}
inline void ImageResponse::set_depth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  depth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EyeTask.ImageResponse.depth)
}
inline void ImageResponse::set_depth(const void* value, size_t size) {
  
  depth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EyeTask.ImageResponse.depth)
}
inline std::string* ImageResponse::mutable_depth() {
  
  // @@protoc_insertion_point(field_mutable:EyeTask.ImageResponse.depth)
  return depth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageResponse::release_depth() {
  // @@protoc_insertion_point(field_release:EyeTask.ImageResponse.depth)
  
  return depth_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageResponse::set_allocated_depth(std::string* depth) {
  if (depth != nullptr) {
    
  } else {
    
  }
  depth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), depth);
  // @@protoc_insertion_point(field_set_allocated:EyeTask.ImageResponse.depth)
}

// float depth_scale = 7;
inline void ImageResponse::clear_depth_scale() {
  depth_scale_ = 0;
}
inline float ImageResponse::depth_scale() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.depth_scale)
  return depth_scale_;
}
inline void ImageResponse::set_depth_scale(float value) {
  
  depth_scale_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.depth_scale)
}

// bool error_state = 8;
inline void ImageResponse::clear_error_state() {
  error_state_ = false;
}
inline bool ImageResponse::error_state() const {
  // @@protoc_insertion_point(field_get:EyeTask.ImageResponse.error_state)
  return error_state_;
}
inline void ImageResponse::set_error_state(bool value) {
  
  error_state_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.ImageResponse.error_state)
}

// -------------------------------------------------------------------

// Request

// int32 id = 1;
inline void Request::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::id() const {
  // @@protoc_insertion_point(field_get:EyeTask.Request.id)
  return id_;
}
inline void Request::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.Request.id)
}

// -------------------------------------------------------------------

// ClassList

// int32 id = 1;
inline void ClassList::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassList::id() const {
  // @@protoc_insertion_point(field_get:EyeTask.ClassList.id)
  return id_;
}
inline void ClassList::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.ClassList.id)
}

// repeated string class_names = 2;
inline int ClassList::class_names_size() const {
  return class_names_.size();
}
inline void ClassList::clear_class_names() {
  class_names_.Clear();
}
inline const std::string& ClassList::class_names(int index) const {
  // @@protoc_insertion_point(field_get:EyeTask.ClassList.class_names)
  return class_names_.Get(index);
}
inline std::string* ClassList::mutable_class_names(int index) {
  // @@protoc_insertion_point(field_mutable:EyeTask.ClassList.class_names)
  return class_names_.Mutable(index);
}
inline void ClassList::set_class_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:EyeTask.ClassList.class_names)
  class_names_.Mutable(index)->assign(value);
}
inline void ClassList::set_class_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:EyeTask.ClassList.class_names)
  class_names_.Mutable(index)->assign(std::move(value));
}
inline void ClassList::set_class_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:EyeTask.ClassList.class_names)
}
inline void ClassList::set_class_names(int index, const char* value, size_t size) {
  class_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:EyeTask.ClassList.class_names)
}
inline std::string* ClassList::add_class_names() {
  // @@protoc_insertion_point(field_add_mutable:EyeTask.ClassList.class_names)
  return class_names_.Add();
}
inline void ClassList::add_class_names(const std::string& value) {
  class_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:EyeTask.ClassList.class_names)
}
inline void ClassList::add_class_names(std::string&& value) {
  class_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:EyeTask.ClassList.class_names)
}
inline void ClassList::add_class_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  class_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:EyeTask.ClassList.class_names)
}
inline void ClassList::add_class_names(const char* value, size_t size) {
  class_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:EyeTask.ClassList.class_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClassList::class_names() const {
  // @@protoc_insertion_point(field_list:EyeTask.ClassList.class_names)
  return class_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClassList::mutable_class_names() {
  // @@protoc_insertion_point(field_mutable_list:EyeTask.ClassList.class_names)
  return &class_names_;
}

// bool error_state = 8;
inline void ClassList::clear_error_state() {
  error_state_ = false;
}
inline bool ClassList::error_state() const {
  // @@protoc_insertion_point(field_get:EyeTask.ClassList.error_state)
  return error_state_;
}
inline void ClassList::set_error_state(bool value) {
  
  error_state_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.ClassList.error_state)
}

// -------------------------------------------------------------------

// DetectRequest

// int32 id = 1;
inline void DetectRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectRequest::id() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectRequest.id)
  return id_;
}
inline void DetectRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.DetectRequest.id)
}

// int32 cls = 2;
inline void DetectRequest::clear_cls() {
  cls_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectRequest::cls() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectRequest.cls)
  return cls_;
}
inline void DetectRequest::set_cls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cls_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.DetectRequest.cls)
}

// repeated float pose_cmd = 3;
inline int DetectRequest::pose_cmd_size() const {
  return pose_cmd_.size();
}
inline void DetectRequest::clear_pose_cmd() {
  pose_cmd_.Clear();
}
inline float DetectRequest::pose_cmd(int index) const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectRequest.pose_cmd)
  return pose_cmd_.Get(index);
}
inline void DetectRequest::set_pose_cmd(int index, float value) {
  pose_cmd_.Set(index, value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectRequest.pose_cmd)
}
inline void DetectRequest::add_pose_cmd(float value) {
  pose_cmd_.Add(value);
  // @@protoc_insertion_point(field_add:EyeTask.DetectRequest.pose_cmd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectRequest::pose_cmd() const {
  // @@protoc_insertion_point(field_list:EyeTask.DetectRequest.pose_cmd)
  return pose_cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectRequest::mutable_pose_cmd() {
  // @@protoc_insertion_point(field_mutable_list:EyeTask.DetectRequest.pose_cmd)
  return &pose_cmd_;
}

// string robot_ip = 4;
inline void DetectRequest::clear_robot_ip() {
  robot_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetectRequest::robot_ip() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectRequest.robot_ip)
  return robot_ip_.GetNoArena();
}
inline void DetectRequest::set_robot_ip(const std::string& value) {
  
  robot_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectRequest.robot_ip)
}
inline void DetectRequest::set_robot_ip(std::string&& value) {
  
  robot_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EyeTask.DetectRequest.robot_ip)
}
inline void DetectRequest::set_robot_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EyeTask.DetectRequest.robot_ip)
}
inline void DetectRequest::set_robot_ip(const char* value, size_t size) {
  
  robot_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EyeTask.DetectRequest.robot_ip)
}
inline std::string* DetectRequest::mutable_robot_ip() {
  
  // @@protoc_insertion_point(field_mutable:EyeTask.DetectRequest.robot_ip)
  return robot_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectRequest::release_robot_ip() {
  // @@protoc_insertion_point(field_release:EyeTask.DetectRequest.robot_ip)
  
  return robot_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectRequest::set_allocated_robot_ip(std::string* robot_ip) {
  if (robot_ip != nullptr) {
    
  } else {
    
  }
  robot_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_ip);
  // @@protoc_insertion_point(field_set_allocated:EyeTask.DetectRequest.robot_ip)
}

// -------------------------------------------------------------------

// RetrieveRequest

// int32 id = 1;
inline void RetrieveRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RetrieveRequest::id() const {
  // @@protoc_insertion_point(field_get:EyeTask.RetrieveRequest.id)
  return id_;
}
inline void RetrieveRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.RetrieveRequest.id)
}

// int32 cls = 2;
inline void RetrieveRequest::clear_cls() {
  cls_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RetrieveRequest::cls() const {
  // @@protoc_insertion_point(field_get:EyeTask.RetrieveRequest.cls)
  return cls_;
}
inline void RetrieveRequest::set_cls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cls_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.RetrieveRequest.cls)
}

// -------------------------------------------------------------------

// DetectResponse

// int32 id = 1;
inline void DetectResponse::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectResponse::id() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.id)
  return id_;
}
inline void DetectResponse::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.id)
}

// bool detected = 2;
inline void DetectResponse::clear_detected() {
  detected_ = false;
}
inline bool DetectResponse::detected() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.detected)
  return detected_;
}
inline void DetectResponse::set_detected(bool value) {
  
  detected_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.detected)
}

// bool passed = 3;
inline void DetectResponse::clear_passed() {
  passed_ = false;
}
inline bool DetectResponse::passed() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.passed)
  return passed_;
}
inline void DetectResponse::set_passed(bool value) {
  
  passed_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.passed)
}

// int32 cls = 4;
inline void DetectResponse::clear_cls() {
  cls_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectResponse::cls() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.cls)
  return cls_;
}
inline void DetectResponse::set_cls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cls_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.cls)
}

// repeated float tar_ee_pose = 5;
inline int DetectResponse::tar_ee_pose_size() const {
  return tar_ee_pose_.size();
}
inline void DetectResponse::clear_tar_ee_pose() {
  tar_ee_pose_.Clear();
}
inline float DetectResponse::tar_ee_pose(int index) const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.tar_ee_pose)
  return tar_ee_pose_.Get(index);
}
inline void DetectResponse::set_tar_ee_pose(int index, float value) {
  tar_ee_pose_.Set(index, value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.tar_ee_pose)
}
inline void DetectResponse::add_tar_ee_pose(float value) {
  tar_ee_pose_.Add(value);
  // @@protoc_insertion_point(field_add:EyeTask.DetectResponse.tar_ee_pose)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectResponse::tar_ee_pose() const {
  // @@protoc_insertion_point(field_list:EyeTask.DetectResponse.tar_ee_pose)
  return tar_ee_pose_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectResponse::mutable_tar_ee_pose() {
  // @@protoc_insertion_point(field_mutable_list:EyeTask.DetectResponse.tar_ee_pose)
  return &tar_ee_pose_;
}

// repeated float tar_tool_pose = 6;
inline int DetectResponse::tar_tool_pose_size() const {
  return tar_tool_pose_.size();
}
inline void DetectResponse::clear_tar_tool_pose() {
  tar_tool_pose_.Clear();
}
inline float DetectResponse::tar_tool_pose(int index) const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.tar_tool_pose)
  return tar_tool_pose_.Get(index);
}
inline void DetectResponse::set_tar_tool_pose(int index, float value) {
  tar_tool_pose_.Set(index, value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.tar_tool_pose)
}
inline void DetectResponse::add_tar_tool_pose(float value) {
  tar_tool_pose_.Add(value);
  // @@protoc_insertion_point(field_add:EyeTask.DetectResponse.tar_tool_pose)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectResponse::tar_tool_pose() const {
  // @@protoc_insertion_point(field_list:EyeTask.DetectResponse.tar_tool_pose)
  return tar_tool_pose_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectResponse::mutable_tar_tool_pose() {
  // @@protoc_insertion_point(field_mutable_list:EyeTask.DetectResponse.tar_tool_pose)
  return &tar_tool_pose_;
}

// repeated float tar_obj_pose = 7;
inline int DetectResponse::tar_obj_pose_size() const {
  return tar_obj_pose_.size();
}
inline void DetectResponse::clear_tar_obj_pose() {
  tar_obj_pose_.Clear();
}
inline float DetectResponse::tar_obj_pose(int index) const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.tar_obj_pose)
  return tar_obj_pose_.Get(index);
}
inline void DetectResponse::set_tar_obj_pose(int index, float value) {
  tar_obj_pose_.Set(index, value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.tar_obj_pose)
}
inline void DetectResponse::add_tar_obj_pose(float value) {
  tar_obj_pose_.Add(value);
  // @@protoc_insertion_point(field_add:EyeTask.DetectResponse.tar_obj_pose)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectResponse::tar_obj_pose() const {
  // @@protoc_insertion_point(field_list:EyeTask.DetectResponse.tar_obj_pose)
  return tar_obj_pose_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectResponse::mutable_tar_obj_pose() {
  // @@protoc_insertion_point(field_mutable_list:EyeTask.DetectResponse.tar_obj_pose)
  return &tar_obj_pose_;
}

// int32 tool_idx = 8;
inline void DetectResponse::clear_tool_idx() {
  tool_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectResponse::tool_idx() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.tool_idx)
  return tool_idx_;
}
inline void DetectResponse::set_tool_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tool_idx_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.tool_idx)
}

// bool error_state = 9;
inline void DetectResponse::clear_error_state() {
  error_state_ = false;
}
inline bool DetectResponse::error_state() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.error_state)
  return error_state_;
}
inline void DetectResponse::set_error_state(bool value) {
  
  error_state_ = value;
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.error_state)
}

// string error_module = 10;
inline void DetectResponse::clear_error_module() {
  error_module_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetectResponse::error_module() const {
  // @@protoc_insertion_point(field_get:EyeTask.DetectResponse.error_module)
  return error_module_.GetNoArena();
}
inline void DetectResponse::set_error_module(const std::string& value) {
  
  error_module_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EyeTask.DetectResponse.error_module)
}
inline void DetectResponse::set_error_module(std::string&& value) {
  
  error_module_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EyeTask.DetectResponse.error_module)
}
inline void DetectResponse::set_error_module(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_module_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EyeTask.DetectResponse.error_module)
}
inline void DetectResponse::set_error_module(const char* value, size_t size) {
  
  error_module_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EyeTask.DetectResponse.error_module)
}
inline std::string* DetectResponse::mutable_error_module() {
  
  // @@protoc_insertion_point(field_mutable:EyeTask.DetectResponse.error_module)
  return error_module_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectResponse::release_error_module() {
  // @@protoc_insertion_point(field_release:EyeTask.DetectResponse.error_module)
  
  return error_module_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectResponse::set_allocated_error_module(std::string* error_module) {
  if (error_module != nullptr) {
    
  } else {
    
  }
  error_module_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_module);
  // @@protoc_insertion_point(field_set_allocated:EyeTask.DetectResponse.error_module)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace EyeTask

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_eyetask_2eproto
