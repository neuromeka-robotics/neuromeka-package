// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: indyeye.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_indyeye_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_indyeye_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_indyeye_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_indyeye_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_indyeye_2eproto;
namespace IndyFramework {
namespace Protobuf {
namespace EyeTask {
class CalibrationDoneRequest;
struct CalibrationDoneRequestDefaultTypeInternal;
extern CalibrationDoneRequestDefaultTypeInternal _CalibrationDoneRequest_default_instance_;
class CalibrationDoneResponse;
struct CalibrationDoneResponseDefaultTypeInternal;
extern CalibrationDoneResponseDefaultTypeInternal _CalibrationDoneResponse_default_instance_;
class CalibrationRequest;
struct CalibrationRequestDefaultTypeInternal;
extern CalibrationRequestDefaultTypeInternal _CalibrationRequest_default_instance_;
class CalibrationResponse;
struct CalibrationResponseDefaultTypeInternal;
extern CalibrationResponseDefaultTypeInternal _CalibrationResponse_default_instance_;
class CircularLineCenterRadius;
struct CircularLineCenterRadiusDefaultTypeInternal;
extern CircularLineCenterRadiusDefaultTypeInternal _CircularLineCenterRadius_default_instance_;
class CircularLineInfoRequest;
struct CircularLineInfoRequestDefaultTypeInternal;
extern CircularLineInfoRequestDefaultTypeInternal _CircularLineInfoRequest_default_instance_;
class CircularLineInfoResponse;
struct CircularLineInfoResponseDefaultTypeInternal;
extern CircularLineInfoResponseDefaultTypeInternal _CircularLineInfoResponse_default_instance_;
class CircularLineThreePoints;
struct CircularLineThreePointsDefaultTypeInternal;
extern CircularLineThreePointsDefaultTypeInternal _CircularLineThreePoints_default_instance_;
class ClassList;
struct ClassListDefaultTypeInternal;
extern ClassListDefaultTypeInternal _ClassList_default_instance_;
class DetectRequest;
struct DetectRequestDefaultTypeInternal;
extern DetectRequestDefaultTypeInternal _DetectRequest_default_instance_;
class DetectResponse;
struct DetectResponseDefaultTypeInternal;
extern DetectResponseDefaultTypeInternal _DetectResponse_default_instance_;
class ImageRequest;
struct ImageRequestDefaultTypeInternal;
extern ImageRequestDefaultTypeInternal _ImageRequest_default_instance_;
class ImageResponse;
struct ImageResponseDefaultTypeInternal;
extern ImageResponseDefaultTypeInternal _ImageResponse_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class RetrieveRequest;
struct RetrieveRequestDefaultTypeInternal;
extern RetrieveRequestDefaultTypeInternal _RetrieveRequest_default_instance_;
class ServerInfoRequest;
struct ServerInfoRequestDefaultTypeInternal;
extern ServerInfoRequestDefaultTypeInternal _ServerInfoRequest_default_instance_;
class ServerInfoResponse;
struct ServerInfoResponseDefaultTypeInternal;
extern ServerInfoResponseDefaultTypeInternal _ServerInfoResponse_default_instance_;
class StraightLineInfoRequest;
struct StraightLineInfoRequestDefaultTypeInternal;
extern StraightLineInfoRequestDefaultTypeInternal _StraightLineInfoRequest_default_instance_;
class StraightLineInfoResponse;
struct StraightLineInfoResponseDefaultTypeInternal;
extern StraightLineInfoResponseDefaultTypeInternal _StraightLineInfoResponse_default_instance_;
class WeldingLinesInfo;
struct WeldingLinesInfoDefaultTypeInternal;
extern WeldingLinesInfoDefaultTypeInternal _WeldingLinesInfo_default_instance_;
class WeldingLinesInfoRequest;
struct WeldingLinesInfoRequestDefaultTypeInternal;
extern WeldingLinesInfoRequestDefaultTypeInternal _WeldingLinesInfoRequest_default_instance_;
class WeldingLinesInfoResponse;
struct WeldingLinesInfoResponseDefaultTypeInternal;
extern WeldingLinesInfoResponseDefaultTypeInternal _WeldingLinesInfoResponse_default_instance_;
}  // namespace EyeTask
}  // namespace Protobuf
}  // namespace IndyFramework
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace IndyFramework {
namespace Protobuf {
namespace EyeTask {

// ===================================================================


// -------------------------------------------------------------------

class Point final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Point(::google::protobuf::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.Point";
  }
  protected:
  explicit Point(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.Point)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class WeldingLinesInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo) */ {
 public:
  inline WeldingLinesInfo() : WeldingLinesInfo(nullptr) {}
  ~WeldingLinesInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WeldingLinesInfo(::google::protobuf::internal::ConstantInitialized);

  WeldingLinesInfo(const WeldingLinesInfo& from);
  WeldingLinesInfo(WeldingLinesInfo&& from) noexcept
    : WeldingLinesInfo() {
    *this = ::std::move(from);
  }

  inline WeldingLinesInfo& operator=(const WeldingLinesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeldingLinesInfo& operator=(WeldingLinesInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WeldingLinesInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WeldingLinesInfo* internal_default_instance() {
    return reinterpret_cast<const WeldingLinesInfo*>(
               &_WeldingLinesInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WeldingLinesInfo& a, WeldingLinesInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WeldingLinesInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeldingLinesInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WeldingLinesInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WeldingLinesInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WeldingLinesInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WeldingLinesInfo& from) {
    WeldingLinesInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeldingLinesInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.WeldingLinesInfo";
  }
  protected:
  explicit WeldingLinesInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStartPointFieldNumber = 2,
    kEndPointFieldNumber = 3,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .IndyFramework.Protobuf.EyeTask.Point start_point = 2;
  bool has_start_point() const;
  void clear_start_point() ;
  const ::IndyFramework::Protobuf::EyeTask::Point& start_point() const;
  PROTOBUF_NODISCARD ::IndyFramework::Protobuf::EyeTask::Point* release_start_point();
  ::IndyFramework::Protobuf::EyeTask::Point* mutable_start_point();
  void set_allocated_start_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  void unsafe_arena_set_allocated_start_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  ::IndyFramework::Protobuf::EyeTask::Point* unsafe_arena_release_start_point();

  private:
  const ::IndyFramework::Protobuf::EyeTask::Point& _internal_start_point() const;
  ::IndyFramework::Protobuf::EyeTask::Point* _internal_mutable_start_point();

  public:
  // .IndyFramework.Protobuf.EyeTask.Point end_point = 3;
  bool has_end_point() const;
  void clear_end_point() ;
  const ::IndyFramework::Protobuf::EyeTask::Point& end_point() const;
  PROTOBUF_NODISCARD ::IndyFramework::Protobuf::EyeTask::Point* release_end_point();
  ::IndyFramework::Protobuf::EyeTask::Point* mutable_end_point();
  void set_allocated_end_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  void unsafe_arena_set_allocated_end_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  ::IndyFramework::Protobuf::EyeTask::Point* unsafe_arena_release_end_point();

  private:
  const ::IndyFramework::Protobuf::EyeTask::Point& _internal_end_point() const;
  ::IndyFramework::Protobuf::EyeTask::Point* _internal_mutable_end_point();

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 2, 60, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::IndyFramework::Protobuf::EyeTask::Point* start_point_;
    ::IndyFramework::Protobuf::EyeTask::Point* end_point_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class WeldingLinesInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoRequest) */ {
 public:
  inline WeldingLinesInfoRequest() : WeldingLinesInfoRequest(nullptr) {}
  ~WeldingLinesInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WeldingLinesInfoRequest(::google::protobuf::internal::ConstantInitialized);

  WeldingLinesInfoRequest(const WeldingLinesInfoRequest& from);
  WeldingLinesInfoRequest(WeldingLinesInfoRequest&& from) noexcept
    : WeldingLinesInfoRequest() {
    *this = ::std::move(from);
  }

  inline WeldingLinesInfoRequest& operator=(const WeldingLinesInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeldingLinesInfoRequest& operator=(WeldingLinesInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WeldingLinesInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WeldingLinesInfoRequest* internal_default_instance() {
    return reinterpret_cast<const WeldingLinesInfoRequest*>(
               &_WeldingLinesInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WeldingLinesInfoRequest& a, WeldingLinesInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WeldingLinesInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeldingLinesInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WeldingLinesInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WeldingLinesInfoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WeldingLinesInfoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WeldingLinesInfoRequest& from) {
    WeldingLinesInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeldingLinesInfoRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.WeldingLinesInfoRequest";
  }
  protected:
  explicit WeldingLinesInfoRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class WeldingLinesInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse) */ {
 public:
  inline WeldingLinesInfoResponse() : WeldingLinesInfoResponse(nullptr) {}
  ~WeldingLinesInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WeldingLinesInfoResponse(::google::protobuf::internal::ConstantInitialized);

  WeldingLinesInfoResponse(const WeldingLinesInfoResponse& from);
  WeldingLinesInfoResponse(WeldingLinesInfoResponse&& from) noexcept
    : WeldingLinesInfoResponse() {
    *this = ::std::move(from);
  }

  inline WeldingLinesInfoResponse& operator=(const WeldingLinesInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeldingLinesInfoResponse& operator=(WeldingLinesInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WeldingLinesInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WeldingLinesInfoResponse* internal_default_instance() {
    return reinterpret_cast<const WeldingLinesInfoResponse*>(
               &_WeldingLinesInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WeldingLinesInfoResponse& a, WeldingLinesInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WeldingLinesInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeldingLinesInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WeldingLinesInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WeldingLinesInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WeldingLinesInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WeldingLinesInfoResponse& from) {
    WeldingLinesInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeldingLinesInfoResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse";
  }
  protected:
  explicit WeldingLinesInfoResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeldingFieldNumber = 2,
    kCellTypesFieldNumber = 3,
    kIdFieldNumber = 1,
    kErrorStateFieldNumber = 4,
  };
  // repeated .IndyFramework.Protobuf.EyeTask.WeldingLinesInfo welding = 2;
  int welding_size() const;
  private:
  int _internal_welding_size() const;

  public:
  void clear_welding() ;
  ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo* mutable_welding(int index);
  ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo >*
      mutable_welding();
  private:
  const ::google::protobuf::RepeatedPtrField<::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo>& _internal_welding() const;
  ::google::protobuf::RepeatedPtrField<::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo>* _internal_mutable_welding();
  public:
  const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo& welding(int index) const;
  ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo* add_welding();
  const ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo >&
      welding() const;
  // repeated string cell_types = 3;
  int cell_types_size() const;
  private:
  int _internal_cell_types_size() const;

  public:
  void clear_cell_types() ;
  const std::string& cell_types(int index) const;
  std::string* mutable_cell_types(int index);
  void set_cell_types(int index, const std::string& value);
  void set_cell_types(int index, std::string&& value);
  void set_cell_types(int index, const char* value);
  void set_cell_types(int index, const char* value, std::size_t size);
  void set_cell_types(int index, absl::string_view value);
  std::string* add_cell_types();
  void add_cell_types(const std::string& value);
  void add_cell_types(std::string&& value);
  void add_cell_types(const char* value);
  void add_cell_types(const char* value, std::size_t size);
  void add_cell_types(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& cell_types() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_cell_types();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_cell_types() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_cell_types();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // bool error_state = 4;
  void clear_error_state() ;
  bool error_state() const;
  void set_error_state(bool value);

  private:
  bool _internal_error_state() const;
  void _internal_set_error_state(bool value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 74, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo > welding_;
    ::google::protobuf::RepeatedPtrField<std::string> cell_types_;
    ::int32_t id_;
    bool error_state_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class StraightLineInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.StraightLineInfoRequest) */ {
 public:
  inline StraightLineInfoRequest() : StraightLineInfoRequest(nullptr) {}
  ~StraightLineInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StraightLineInfoRequest(::google::protobuf::internal::ConstantInitialized);

  StraightLineInfoRequest(const StraightLineInfoRequest& from);
  StraightLineInfoRequest(StraightLineInfoRequest&& from) noexcept
    : StraightLineInfoRequest() {
    *this = ::std::move(from);
  }

  inline StraightLineInfoRequest& operator=(const StraightLineInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StraightLineInfoRequest& operator=(StraightLineInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StraightLineInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StraightLineInfoRequest* internal_default_instance() {
    return reinterpret_cast<const StraightLineInfoRequest*>(
               &_StraightLineInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StraightLineInfoRequest& a, StraightLineInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StraightLineInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StraightLineInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StraightLineInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StraightLineInfoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StraightLineInfoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StraightLineInfoRequest& from) {
    StraightLineInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StraightLineInfoRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.StraightLineInfoRequest";
  }
  protected:
  explicit StraightLineInfoRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.StraightLineInfoRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class StraightLineInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse) */ {
 public:
  inline StraightLineInfoResponse() : StraightLineInfoResponse(nullptr) {}
  ~StraightLineInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StraightLineInfoResponse(::google::protobuf::internal::ConstantInitialized);

  StraightLineInfoResponse(const StraightLineInfoResponse& from);
  StraightLineInfoResponse(StraightLineInfoResponse&& from) noexcept
    : StraightLineInfoResponse() {
    *this = ::std::move(from);
  }

  inline StraightLineInfoResponse& operator=(const StraightLineInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StraightLineInfoResponse& operator=(StraightLineInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StraightLineInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StraightLineInfoResponse* internal_default_instance() {
    return reinterpret_cast<const StraightLineInfoResponse*>(
               &_StraightLineInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StraightLineInfoResponse& a, StraightLineInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StraightLineInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StraightLineInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StraightLineInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StraightLineInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StraightLineInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StraightLineInfoResponse& from) {
    StraightLineInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StraightLineInfoResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse";
  }
  protected:
  explicit StraightLineInfoResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNormalVectorFieldNumber = 2,
    kStartPointFieldNumber = 3,
    kEndPointFieldNumber = 4,
    kIdFieldNumber = 1,
    kErrorStateFieldNumber = 5,
  };
  // .IndyFramework.Protobuf.EyeTask.Point normal_vector = 2;
  bool has_normal_vector() const;
  void clear_normal_vector() ;
  const ::IndyFramework::Protobuf::EyeTask::Point& normal_vector() const;
  PROTOBUF_NODISCARD ::IndyFramework::Protobuf::EyeTask::Point* release_normal_vector();
  ::IndyFramework::Protobuf::EyeTask::Point* mutable_normal_vector();
  void set_allocated_normal_vector(::IndyFramework::Protobuf::EyeTask::Point* value);
  void unsafe_arena_set_allocated_normal_vector(::IndyFramework::Protobuf::EyeTask::Point* value);
  ::IndyFramework::Protobuf::EyeTask::Point* unsafe_arena_release_normal_vector();

  private:
  const ::IndyFramework::Protobuf::EyeTask::Point& _internal_normal_vector() const;
  ::IndyFramework::Protobuf::EyeTask::Point* _internal_mutable_normal_vector();

  public:
  // .IndyFramework.Protobuf.EyeTask.Point start_point = 3;
  bool has_start_point() const;
  void clear_start_point() ;
  const ::IndyFramework::Protobuf::EyeTask::Point& start_point() const;
  PROTOBUF_NODISCARD ::IndyFramework::Protobuf::EyeTask::Point* release_start_point();
  ::IndyFramework::Protobuf::EyeTask::Point* mutable_start_point();
  void set_allocated_start_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  void unsafe_arena_set_allocated_start_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  ::IndyFramework::Protobuf::EyeTask::Point* unsafe_arena_release_start_point();

  private:
  const ::IndyFramework::Protobuf::EyeTask::Point& _internal_start_point() const;
  ::IndyFramework::Protobuf::EyeTask::Point* _internal_mutable_start_point();

  public:
  // .IndyFramework.Protobuf.EyeTask.Point end_point = 4;
  bool has_end_point() const;
  void clear_end_point() ;
  const ::IndyFramework::Protobuf::EyeTask::Point& end_point() const;
  PROTOBUF_NODISCARD ::IndyFramework::Protobuf::EyeTask::Point* release_end_point();
  ::IndyFramework::Protobuf::EyeTask::Point* mutable_end_point();
  void set_allocated_end_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  void unsafe_arena_set_allocated_end_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  ::IndyFramework::Protobuf::EyeTask::Point* unsafe_arena_release_end_point();

  private:
  const ::IndyFramework::Protobuf::EyeTask::Point& _internal_end_point() const;
  ::IndyFramework::Protobuf::EyeTask::Point* _internal_mutable_end_point();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // bool error_state = 5;
  void clear_error_state() ;
  bool error_state() const;
  void set_error_state(bool value);

  private:
  bool _internal_error_state() const;
  void _internal_set_error_state(bool value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::IndyFramework::Protobuf::EyeTask::Point* normal_vector_;
    ::IndyFramework::Protobuf::EyeTask::Point* start_point_;
    ::IndyFramework::Protobuf::EyeTask::Point* end_point_;
    ::int32_t id_;
    bool error_state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class CircularLineThreePoints final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints) */ {
 public:
  inline CircularLineThreePoints() : CircularLineThreePoints(nullptr) {}
  ~CircularLineThreePoints() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CircularLineThreePoints(::google::protobuf::internal::ConstantInitialized);

  CircularLineThreePoints(const CircularLineThreePoints& from);
  CircularLineThreePoints(CircularLineThreePoints&& from) noexcept
    : CircularLineThreePoints() {
    *this = ::std::move(from);
  }

  inline CircularLineThreePoints& operator=(const CircularLineThreePoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline CircularLineThreePoints& operator=(CircularLineThreePoints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CircularLineThreePoints& default_instance() {
    return *internal_default_instance();
  }
  static inline const CircularLineThreePoints* internal_default_instance() {
    return reinterpret_cast<const CircularLineThreePoints*>(
               &_CircularLineThreePoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CircularLineThreePoints& a, CircularLineThreePoints& b) {
    a.Swap(&b);
  }
  inline void Swap(CircularLineThreePoints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CircularLineThreePoints* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CircularLineThreePoints* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CircularLineThreePoints>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CircularLineThreePoints& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CircularLineThreePoints& from) {
    CircularLineThreePoints::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CircularLineThreePoints* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.CircularLineThreePoints";
  }
  protected:
  explicit CircularLineThreePoints(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPointFieldNumber = 1,
    kViaPointFieldNumber = 2,
    kEndPointFieldNumber = 3,
  };
  // .IndyFramework.Protobuf.EyeTask.Point start_point = 1;
  bool has_start_point() const;
  void clear_start_point() ;
  const ::IndyFramework::Protobuf::EyeTask::Point& start_point() const;
  PROTOBUF_NODISCARD ::IndyFramework::Protobuf::EyeTask::Point* release_start_point();
  ::IndyFramework::Protobuf::EyeTask::Point* mutable_start_point();
  void set_allocated_start_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  void unsafe_arena_set_allocated_start_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  ::IndyFramework::Protobuf::EyeTask::Point* unsafe_arena_release_start_point();

  private:
  const ::IndyFramework::Protobuf::EyeTask::Point& _internal_start_point() const;
  ::IndyFramework::Protobuf::EyeTask::Point* _internal_mutable_start_point();

  public:
  // .IndyFramework.Protobuf.EyeTask.Point via_point = 2;
  bool has_via_point() const;
  void clear_via_point() ;
  const ::IndyFramework::Protobuf::EyeTask::Point& via_point() const;
  PROTOBUF_NODISCARD ::IndyFramework::Protobuf::EyeTask::Point* release_via_point();
  ::IndyFramework::Protobuf::EyeTask::Point* mutable_via_point();
  void set_allocated_via_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  void unsafe_arena_set_allocated_via_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  ::IndyFramework::Protobuf::EyeTask::Point* unsafe_arena_release_via_point();

  private:
  const ::IndyFramework::Protobuf::EyeTask::Point& _internal_via_point() const;
  ::IndyFramework::Protobuf::EyeTask::Point* _internal_mutable_via_point();

  public:
  // .IndyFramework.Protobuf.EyeTask.Point end_point = 3;
  bool has_end_point() const;
  void clear_end_point() ;
  const ::IndyFramework::Protobuf::EyeTask::Point& end_point() const;
  PROTOBUF_NODISCARD ::IndyFramework::Protobuf::EyeTask::Point* release_end_point();
  ::IndyFramework::Protobuf::EyeTask::Point* mutable_end_point();
  void set_allocated_end_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  void unsafe_arena_set_allocated_end_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  ::IndyFramework::Protobuf::EyeTask::Point* unsafe_arena_release_end_point();

  private:
  const ::IndyFramework::Protobuf::EyeTask::Point& _internal_end_point() const;
  ::IndyFramework::Protobuf::EyeTask::Point* _internal_mutable_end_point();

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::IndyFramework::Protobuf::EyeTask::Point* start_point_;
    ::IndyFramework::Protobuf::EyeTask::Point* via_point_;
    ::IndyFramework::Protobuf::EyeTask::Point* end_point_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class CircularLineCenterRadius final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.CircularLineCenterRadius) */ {
 public:
  inline CircularLineCenterRadius() : CircularLineCenterRadius(nullptr) {}
  ~CircularLineCenterRadius() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CircularLineCenterRadius(::google::protobuf::internal::ConstantInitialized);

  CircularLineCenterRadius(const CircularLineCenterRadius& from);
  CircularLineCenterRadius(CircularLineCenterRadius&& from) noexcept
    : CircularLineCenterRadius() {
    *this = ::std::move(from);
  }

  inline CircularLineCenterRadius& operator=(const CircularLineCenterRadius& from) {
    CopyFrom(from);
    return *this;
  }
  inline CircularLineCenterRadius& operator=(CircularLineCenterRadius&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CircularLineCenterRadius& default_instance() {
    return *internal_default_instance();
  }
  static inline const CircularLineCenterRadius* internal_default_instance() {
    return reinterpret_cast<const CircularLineCenterRadius*>(
               &_CircularLineCenterRadius_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CircularLineCenterRadius& a, CircularLineCenterRadius& b) {
    a.Swap(&b);
  }
  inline void Swap(CircularLineCenterRadius* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CircularLineCenterRadius* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CircularLineCenterRadius* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CircularLineCenterRadius>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CircularLineCenterRadius& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CircularLineCenterRadius& from) {
    CircularLineCenterRadius::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CircularLineCenterRadius* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.CircularLineCenterRadius";
  }
  protected:
  explicit CircularLineCenterRadius(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterPointFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // .IndyFramework.Protobuf.EyeTask.Point center_point = 1;
  bool has_center_point() const;
  void clear_center_point() ;
  const ::IndyFramework::Protobuf::EyeTask::Point& center_point() const;
  PROTOBUF_NODISCARD ::IndyFramework::Protobuf::EyeTask::Point* release_center_point();
  ::IndyFramework::Protobuf::EyeTask::Point* mutable_center_point();
  void set_allocated_center_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  void unsafe_arena_set_allocated_center_point(::IndyFramework::Protobuf::EyeTask::Point* value);
  ::IndyFramework::Protobuf::EyeTask::Point* unsafe_arena_release_center_point();

  private:
  const ::IndyFramework::Protobuf::EyeTask::Point& _internal_center_point() const;
  ::IndyFramework::Protobuf::EyeTask::Point* _internal_mutable_center_point();

  public:
  // float radius = 2;
  void clear_radius() ;
  float radius() const;
  void set_radius(float value);

  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.CircularLineCenterRadius)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::IndyFramework::Protobuf::EyeTask::Point* center_point_;
    float radius_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class CircularLineInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.CircularLineInfoRequest) */ {
 public:
  inline CircularLineInfoRequest() : CircularLineInfoRequest(nullptr) {}
  ~CircularLineInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CircularLineInfoRequest(::google::protobuf::internal::ConstantInitialized);

  CircularLineInfoRequest(const CircularLineInfoRequest& from);
  CircularLineInfoRequest(CircularLineInfoRequest&& from) noexcept
    : CircularLineInfoRequest() {
    *this = ::std::move(from);
  }

  inline CircularLineInfoRequest& operator=(const CircularLineInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CircularLineInfoRequest& operator=(CircularLineInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CircularLineInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CircularLineInfoRequest* internal_default_instance() {
    return reinterpret_cast<const CircularLineInfoRequest*>(
               &_CircularLineInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CircularLineInfoRequest& a, CircularLineInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CircularLineInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CircularLineInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CircularLineInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CircularLineInfoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CircularLineInfoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CircularLineInfoRequest& from) {
    CircularLineInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CircularLineInfoRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.CircularLineInfoRequest";
  }
  protected:
  explicit CircularLineInfoRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.CircularLineInfoRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class CircularLineInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse) */ {
 public:
  inline CircularLineInfoResponse() : CircularLineInfoResponse(nullptr) {}
  ~CircularLineInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CircularLineInfoResponse(::google::protobuf::internal::ConstantInitialized);

  CircularLineInfoResponse(const CircularLineInfoResponse& from);
  CircularLineInfoResponse(CircularLineInfoResponse&& from) noexcept
    : CircularLineInfoResponse() {
    *this = ::std::move(from);
  }

  inline CircularLineInfoResponse& operator=(const CircularLineInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CircularLineInfoResponse& operator=(CircularLineInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CircularLineInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CircularLineInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CircularLineInfoResponse*>(
               &_CircularLineInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CircularLineInfoResponse& a, CircularLineInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CircularLineInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CircularLineInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CircularLineInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CircularLineInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CircularLineInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CircularLineInfoResponse& from) {
    CircularLineInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CircularLineInfoResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse";
  }
  protected:
  explicit CircularLineInfoResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNormalVectorFieldNumber = 2,
    kReferenceVectorFieldNumber = 3,
    kPointMethodFieldNumber = 4,
    kVectorMethodFieldNumber = 5,
    kIdFieldNumber = 1,
    kErrorStateFieldNumber = 6,
  };
  // .IndyFramework.Protobuf.EyeTask.Point normal_vector = 2;
  bool has_normal_vector() const;
  void clear_normal_vector() ;
  const ::IndyFramework::Protobuf::EyeTask::Point& normal_vector() const;
  PROTOBUF_NODISCARD ::IndyFramework::Protobuf::EyeTask::Point* release_normal_vector();
  ::IndyFramework::Protobuf::EyeTask::Point* mutable_normal_vector();
  void set_allocated_normal_vector(::IndyFramework::Protobuf::EyeTask::Point* value);
  void unsafe_arena_set_allocated_normal_vector(::IndyFramework::Protobuf::EyeTask::Point* value);
  ::IndyFramework::Protobuf::EyeTask::Point* unsafe_arena_release_normal_vector();

  private:
  const ::IndyFramework::Protobuf::EyeTask::Point& _internal_normal_vector() const;
  ::IndyFramework::Protobuf::EyeTask::Point* _internal_mutable_normal_vector();

  public:
  // .IndyFramework.Protobuf.EyeTask.Point reference_vector = 3;
  bool has_reference_vector() const;
  void clear_reference_vector() ;
  const ::IndyFramework::Protobuf::EyeTask::Point& reference_vector() const;
  PROTOBUF_NODISCARD ::IndyFramework::Protobuf::EyeTask::Point* release_reference_vector();
  ::IndyFramework::Protobuf::EyeTask::Point* mutable_reference_vector();
  void set_allocated_reference_vector(::IndyFramework::Protobuf::EyeTask::Point* value);
  void unsafe_arena_set_allocated_reference_vector(::IndyFramework::Protobuf::EyeTask::Point* value);
  ::IndyFramework::Protobuf::EyeTask::Point* unsafe_arena_release_reference_vector();

  private:
  const ::IndyFramework::Protobuf::EyeTask::Point& _internal_reference_vector() const;
  ::IndyFramework::Protobuf::EyeTask::Point* _internal_mutable_reference_vector();

  public:
  // .IndyFramework.Protobuf.EyeTask.CircularLineThreePoints point_method = 4;
  bool has_point_method() const;
  void clear_point_method() ;
  const ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints& point_method() const;
  PROTOBUF_NODISCARD ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* release_point_method();
  ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* mutable_point_method();
  void set_allocated_point_method(::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* value);
  void unsafe_arena_set_allocated_point_method(::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* value);
  ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* unsafe_arena_release_point_method();

  private:
  const ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints& _internal_point_method() const;
  ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* _internal_mutable_point_method();

  public:
  // .IndyFramework.Protobuf.EyeTask.CircularLineCenterRadius vector_method = 5;
  bool has_vector_method() const;
  void clear_vector_method() ;
  const ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius& vector_method() const;
  PROTOBUF_NODISCARD ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* release_vector_method();
  ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* mutable_vector_method();
  void set_allocated_vector_method(::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* value);
  void unsafe_arena_set_allocated_vector_method(::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* value);
  ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* unsafe_arena_release_vector_method();

  private:
  const ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius& _internal_vector_method() const;
  ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* _internal_mutable_vector_method();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // bool error_state = 6;
  void clear_error_state() ;
  bool error_state() const;
  void set_error_state(bool value);

  private:
  bool _internal_error_state() const;
  void _internal_set_error_state(bool value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 4, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::IndyFramework::Protobuf::EyeTask::Point* normal_vector_;
    ::IndyFramework::Protobuf::EyeTask::Point* reference_vector_;
    ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* point_method_;
    ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* vector_method_;
    ::int32_t id_;
    bool error_state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class ServerInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.ServerInfoRequest) */ {
 public:
  inline ServerInfoRequest() : ServerInfoRequest(nullptr) {}
  ~ServerInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerInfoRequest(::google::protobuf::internal::ConstantInitialized);

  ServerInfoRequest(const ServerInfoRequest& from);
  ServerInfoRequest(ServerInfoRequest&& from) noexcept
    : ServerInfoRequest() {
    *this = ::std::move(from);
  }

  inline ServerInfoRequest& operator=(const ServerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfoRequest& operator=(ServerInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ServerInfoRequest*>(
               &_ServerInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ServerInfoRequest& a, ServerInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerInfoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerInfoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerInfoRequest& from) {
    ServerInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.ServerInfoRequest";
  }
  protected:
  explicit ServerInfoRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.ServerInfoRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class ServerInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.ServerInfoResponse) */ {
 public:
  inline ServerInfoResponse() : ServerInfoResponse(nullptr) {}
  ~ServerInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerInfoResponse(::google::protobuf::internal::ConstantInitialized);

  ServerInfoResponse(const ServerInfoResponse& from);
  ServerInfoResponse(ServerInfoResponse&& from) noexcept
    : ServerInfoResponse() {
    *this = ::std::move(from);
  }

  inline ServerInfoResponse& operator=(const ServerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfoResponse& operator=(ServerInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ServerInfoResponse*>(
               &_ServerInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ServerInfoResponse& a, ServerInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerInfoResponse& from) {
    ServerInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.ServerInfoResponse";
  }
  protected:
  explicit ServerInfoResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 2,
    kReleaseDateFieldNumber = 3,
    kProgramNameFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string release_date = 3;
  void clear_release_date() ;
  const std::string& release_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_release_date(Arg_&& arg, Args_... args);
  std::string* mutable_release_date();
  PROTOBUF_NODISCARD std::string* release_release_date();
  void set_allocated_release_date(std::string* ptr);

  private:
  const std::string& _internal_release_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_release_date(
      const std::string& value);
  std::string* _internal_mutable_release_date();

  public:
  // string program_name = 4;
  void clear_program_name() ;
  const std::string& program_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_program_name(Arg_&& arg, Args_... args);
  std::string* mutable_program_name();
  PROTOBUF_NODISCARD std::string* release_program_name();
  void set_allocated_program_name(std::string* ptr);

  private:
  const std::string& _internal_program_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_program_name(
      const std::string& value);
  std::string* _internal_mutable_program_name();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.ServerInfoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 89, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr release_date_;
    ::google::protobuf::internal::ArenaStringPtr program_name_;
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class CalibrationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.CalibrationRequest) */ {
 public:
  inline CalibrationRequest() : CalibrationRequest(nullptr) {}
  ~CalibrationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrationRequest(::google::protobuf::internal::ConstantInitialized);

  CalibrationRequest(const CalibrationRequest& from);
  CalibrationRequest(CalibrationRequest&& from) noexcept
    : CalibrationRequest() {
    *this = ::std::move(from);
  }

  inline CalibrationRequest& operator=(const CalibrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationRequest& operator=(CalibrationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrationRequest* internal_default_instance() {
    return reinterpret_cast<const CalibrationRequest*>(
               &_CalibrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CalibrationRequest& a, CalibrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrationRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalibrationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CalibrationRequest& from) {
    CalibrationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrationRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.CalibrationRequest";
  }
  protected:
  explicit CalibrationRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.CalibrationRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class CalibrationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.CalibrationResponse) */ {
 public:
  inline CalibrationResponse() : CalibrationResponse(nullptr) {}
  ~CalibrationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrationResponse(::google::protobuf::internal::ConstantInitialized);

  CalibrationResponse(const CalibrationResponse& from);
  CalibrationResponse(CalibrationResponse&& from) noexcept
    : CalibrationResponse() {
    *this = ::std::move(from);
  }

  inline CalibrationResponse& operator=(const CalibrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationResponse& operator=(CalibrationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrationResponse* internal_default_instance() {
    return reinterpret_cast<const CalibrationResponse*>(
               &_CalibrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CalibrationResponse& a, CalibrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrationResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalibrationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CalibrationResponse& from) {
    CalibrationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrationResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.CalibrationResponse";
  }
  protected:
  explicit CalibrationResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSucceededFieldNumber = 2,
    kIndyCamRmsFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated bool is_succeeded = 2;
  int is_succeeded_size() const;
  private:
  int _internal_is_succeeded_size() const;

  public:
  void clear_is_succeeded() ;
  bool is_succeeded(int index) const;
  void set_is_succeeded(int index, bool value);
  void add_is_succeeded(bool value);
  const ::google::protobuf::RepeatedField<bool>& is_succeeded() const;
  ::google::protobuf::RepeatedField<bool>* mutable_is_succeeded();

  private:
  const ::google::protobuf::RepeatedField<bool>& _internal_is_succeeded() const;
  ::google::protobuf::RepeatedField<bool>* _internal_mutable_is_succeeded();

  public:
  // repeated float indy_cam_rms = 3;
  int indy_cam_rms_size() const;
  private:
  int _internal_indy_cam_rms_size() const;

  public:
  void clear_indy_cam_rms() ;
  float indy_cam_rms(int index) const;
  void set_indy_cam_rms(int index, float value);
  void add_indy_cam_rms(float value);
  const ::google::protobuf::RepeatedField<float>& indy_cam_rms() const;
  ::google::protobuf::RepeatedField<float>* mutable_indy_cam_rms();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_indy_cam_rms() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_indy_cam_rms();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.CalibrationResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<bool> is_succeeded_;
    ::google::protobuf::RepeatedField<float> indy_cam_rms_;
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class CalibrationDoneRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.CalibrationDoneRequest) */ {
 public:
  inline CalibrationDoneRequest() : CalibrationDoneRequest(nullptr) {}
  ~CalibrationDoneRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrationDoneRequest(::google::protobuf::internal::ConstantInitialized);

  CalibrationDoneRequest(const CalibrationDoneRequest& from);
  CalibrationDoneRequest(CalibrationDoneRequest&& from) noexcept
    : CalibrationDoneRequest() {
    *this = ::std::move(from);
  }

  inline CalibrationDoneRequest& operator=(const CalibrationDoneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationDoneRequest& operator=(CalibrationDoneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrationDoneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrationDoneRequest* internal_default_instance() {
    return reinterpret_cast<const CalibrationDoneRequest*>(
               &_CalibrationDoneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CalibrationDoneRequest& a, CalibrationDoneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrationDoneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrationDoneRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrationDoneRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalibrationDoneRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrationDoneRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CalibrationDoneRequest& from) {
    CalibrationDoneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrationDoneRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.CalibrationDoneRequest";
  }
  protected:
  explicit CalibrationDoneRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.CalibrationDoneRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class CalibrationDoneResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse) */ {
 public:
  inline CalibrationDoneResponse() : CalibrationDoneResponse(nullptr) {}
  ~CalibrationDoneResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrationDoneResponse(::google::protobuf::internal::ConstantInitialized);

  CalibrationDoneResponse(const CalibrationDoneResponse& from);
  CalibrationDoneResponse(CalibrationDoneResponse&& from) noexcept
    : CalibrationDoneResponse() {
    *this = ::std::move(from);
  }

  inline CalibrationDoneResponse& operator=(const CalibrationDoneResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationDoneResponse& operator=(CalibrationDoneResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrationDoneResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrationDoneResponse* internal_default_instance() {
    return reinterpret_cast<const CalibrationDoneResponse*>(
               &_CalibrationDoneResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CalibrationDoneResponse& a, CalibrationDoneResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrationDoneResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrationDoneResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrationDoneResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalibrationDoneResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrationDoneResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CalibrationDoneResponse& from) {
    CalibrationDoneResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrationDoneResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse";
  }
  protected:
  explicit CalibrationDoneResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSucceededFieldNumber = 3,
    kIndyCamRmsFieldNumber = 4,
    kIdFieldNumber = 1,
    kIsCalibratedFieldNumber = 2,
  };
  // repeated bool is_succeeded = 3;
  int is_succeeded_size() const;
  private:
  int _internal_is_succeeded_size() const;

  public:
  void clear_is_succeeded() ;
  bool is_succeeded(int index) const;
  void set_is_succeeded(int index, bool value);
  void add_is_succeeded(bool value);
  const ::google::protobuf::RepeatedField<bool>& is_succeeded() const;
  ::google::protobuf::RepeatedField<bool>* mutable_is_succeeded();

  private:
  const ::google::protobuf::RepeatedField<bool>& _internal_is_succeeded() const;
  ::google::protobuf::RepeatedField<bool>* _internal_mutable_is_succeeded();

  public:
  // repeated float indy_cam_rms = 4;
  int indy_cam_rms_size() const;
  private:
  int _internal_indy_cam_rms_size() const;

  public:
  void clear_indy_cam_rms() ;
  float indy_cam_rms(int index) const;
  void set_indy_cam_rms(int index, float value);
  void add_indy_cam_rms(float value);
  const ::google::protobuf::RepeatedField<float>& indy_cam_rms() const;
  ::google::protobuf::RepeatedField<float>* mutable_indy_cam_rms();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_indy_cam_rms() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_indy_cam_rms();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // bool is_calibrated = 2;
  void clear_is_calibrated() ;
  bool is_calibrated() const;
  void set_is_calibrated(bool value);

  private:
  bool _internal_is_calibrated() const;
  void _internal_set_is_calibrated(bool value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<bool> is_succeeded_;
    ::google::protobuf::RepeatedField<float> indy_cam_rms_;
    ::int32_t id_;
    bool is_calibrated_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class ImageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.ImageRequest) */ {
 public:
  inline ImageRequest() : ImageRequest(nullptr) {}
  ~ImageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ImageRequest(::google::protobuf::internal::ConstantInitialized);

  ImageRequest(const ImageRequest& from);
  ImageRequest(ImageRequest&& from) noexcept
    : ImageRequest() {
    *this = ::std::move(from);
  }

  inline ImageRequest& operator=(const ImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageRequest& operator=(ImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageRequest* internal_default_instance() {
    return reinterpret_cast<const ImageRequest*>(
               &_ImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ImageRequest& a, ImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ImageRequest& from) {
    ImageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.ImageRequest";
  }
  protected:
  explicit ImageRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 type = 2;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.ImageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    ::int32_t type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class ImageResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.ImageResponse) */ {
 public:
  inline ImageResponse() : ImageResponse(nullptr) {}
  ~ImageResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ImageResponse(::google::protobuf::internal::ConstantInitialized);

  ImageResponse(const ImageResponse& from);
  ImageResponse(ImageResponse&& from) noexcept
    : ImageResponse() {
    *this = ::std::move(from);
  }

  inline ImageResponse& operator=(const ImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageResponse& operator=(ImageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageResponse* internal_default_instance() {
    return reinterpret_cast<const ImageResponse*>(
               &_ImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ImageResponse& a, ImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ImageResponse& from) {
    ImageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.ImageResponse";
  }
  protected:
  explicit ImageResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 5,
    kDepthFieldNumber = 6,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kDepthScaleFieldNumber = 7,
    kErrorStateFieldNumber = 8,
  };
  // bytes color = 5;
  void clear_color() ;
  const std::string& color() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_color(Arg_&& arg, Args_... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* ptr);

  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(
      const std::string& value);
  std::string* _internal_mutable_color();

  public:
  // bytes depth = 6;
  void clear_depth() ;
  const std::string& depth() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_depth(Arg_&& arg, Args_... args);
  std::string* mutable_depth();
  PROTOBUF_NODISCARD std::string* release_depth();
  void set_allocated_depth(std::string* ptr);

  private:
  const std::string& _internal_depth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_depth(
      const std::string& value);
  std::string* _internal_mutable_depth();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 type = 2;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // int32 width = 3;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // int32 height = 4;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // float depth_scale = 7;
  void clear_depth_scale() ;
  float depth_scale() const;
  void set_depth_scale(float value);

  private:
  float _internal_depth_scale() const;
  void _internal_set_depth_scale(float value);

  public:
  // bool error_state = 8;
  void clear_error_state() ;
  bool error_state() const;
  void set_error_state(bool value);

  private:
  bool _internal_error_state() const;
  void _internal_set_error_state(bool value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.ImageResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr color_;
    ::google::protobuf::internal::ArenaStringPtr depth_;
    ::int32_t id_;
    ::int32_t type_;
    ::int32_t width_;
    ::int32_t height_;
    float depth_scale_;
    bool error_state_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Request(::google::protobuf::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.Request";
  }
  protected:
  explicit Request(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.Request)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class ClassList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.ClassList) */ {
 public:
  inline ClassList() : ClassList(nullptr) {}
  ~ClassList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClassList(::google::protobuf::internal::ConstantInitialized);

  ClassList(const ClassList& from);
  ClassList(ClassList&& from) noexcept
    : ClassList() {
    *this = ::std::move(from);
  }

  inline ClassList& operator=(const ClassList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassList& operator=(ClassList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassList* internal_default_instance() {
    return reinterpret_cast<const ClassList*>(
               &_ClassList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ClassList& a, ClassList& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClassList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClassList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClassList& from) {
    ClassList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.ClassList";
  }
  protected:
  explicit ClassList(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassNamesFieldNumber = 2,
    kIdFieldNumber = 1,
    kErrorStateFieldNumber = 8,
  };
  // repeated string class_names = 2;
  int class_names_size() const;
  private:
  int _internal_class_names_size() const;

  public:
  void clear_class_names() ;
  const std::string& class_names(int index) const;
  std::string* mutable_class_names(int index);
  void set_class_names(int index, const std::string& value);
  void set_class_names(int index, std::string&& value);
  void set_class_names(int index, const char* value);
  void set_class_names(int index, const char* value, std::size_t size);
  void set_class_names(int index, absl::string_view value);
  std::string* add_class_names();
  void add_class_names(const std::string& value);
  void add_class_names(std::string&& value);
  void add_class_names(const char* value);
  void add_class_names(const char* value, std::size_t size);
  void add_class_names(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& class_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_class_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_class_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_class_names();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // bool error_state = 8;
  void clear_error_state() ;
  bool error_state() const;
  void set_error_state(bool value);

  private:
  bool _internal_error_state() const;
  void _internal_set_error_state(bool value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.ClassList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 60, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> class_names_;
    ::int32_t id_;
    bool error_state_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class DetectRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.DetectRequest) */ {
 public:
  inline DetectRequest() : DetectRequest(nullptr) {}
  ~DetectRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DetectRequest(::google::protobuf::internal::ConstantInitialized);

  DetectRequest(const DetectRequest& from);
  DetectRequest(DetectRequest&& from) noexcept
    : DetectRequest() {
    *this = ::std::move(from);
  }

  inline DetectRequest& operator=(const DetectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectRequest& operator=(DetectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectRequest* internal_default_instance() {
    return reinterpret_cast<const DetectRequest*>(
               &_DetectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DetectRequest& a, DetectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DetectRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DetectRequest& from) {
    DetectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.DetectRequest";
  }
  protected:
  explicit DetectRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseCmdFieldNumber = 3,
    kRobotIpFieldNumber = 4,
    kIdFieldNumber = 1,
    kClsFieldNumber = 2,
  };
  // repeated float pose_cmd = 3;
  int pose_cmd_size() const;
  private:
  int _internal_pose_cmd_size() const;

  public:
  void clear_pose_cmd() ;
  float pose_cmd(int index) const;
  void set_pose_cmd(int index, float value);
  void add_pose_cmd(float value);
  const ::google::protobuf::RepeatedField<float>& pose_cmd() const;
  ::google::protobuf::RepeatedField<float>* mutable_pose_cmd();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_pose_cmd() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_pose_cmd();

  public:
  // string robot_ip = 4;
  void clear_robot_ip() ;
  const std::string& robot_ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_robot_ip(Arg_&& arg, Args_... args);
  std::string* mutable_robot_ip();
  PROTOBUF_NODISCARD std::string* release_robot_ip();
  void set_allocated_robot_ip(std::string* ptr);

  private:
  const std::string& _internal_robot_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_ip(
      const std::string& value);
  std::string* _internal_mutable_robot_ip();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 cls = 2;
  void clear_cls() ;
  ::int32_t cls() const;
  void set_cls(::int32_t value);

  private:
  ::int32_t _internal_cls() const;
  void _internal_set_cls(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.DetectRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 61, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> pose_cmd_;
    ::google::protobuf::internal::ArenaStringPtr robot_ip_;
    ::int32_t id_;
    ::int32_t cls_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class RetrieveRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.RetrieveRequest) */ {
 public:
  inline RetrieveRequest() : RetrieveRequest(nullptr) {}
  ~RetrieveRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RetrieveRequest(::google::protobuf::internal::ConstantInitialized);

  RetrieveRequest(const RetrieveRequest& from);
  RetrieveRequest(RetrieveRequest&& from) noexcept
    : RetrieveRequest() {
    *this = ::std::move(from);
  }

  inline RetrieveRequest& operator=(const RetrieveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveRequest& operator=(RetrieveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetrieveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetrieveRequest* internal_default_instance() {
    return reinterpret_cast<const RetrieveRequest*>(
               &_RetrieveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RetrieveRequest& a, RetrieveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RetrieveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetrieveRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetrieveRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RetrieveRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RetrieveRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RetrieveRequest& from) {
    RetrieveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetrieveRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.RetrieveRequest";
  }
  protected:
  explicit RetrieveRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kClsFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 cls = 2;
  void clear_cls() ;
  ::int32_t cls() const;
  void set_cls(::int32_t value);

  private:
  ::int32_t _internal_cls() const;
  void _internal_set_cls(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.RetrieveRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    ::int32_t cls_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};// -------------------------------------------------------------------

class DetectResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.EyeTask.DetectResponse) */ {
 public:
  inline DetectResponse() : DetectResponse(nullptr) {}
  ~DetectResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DetectResponse(::google::protobuf::internal::ConstantInitialized);

  DetectResponse(const DetectResponse& from);
  DetectResponse(DetectResponse&& from) noexcept
    : DetectResponse() {
    *this = ::std::move(from);
  }

  inline DetectResponse& operator=(const DetectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectResponse& operator=(DetectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectResponse* internal_default_instance() {
    return reinterpret_cast<const DetectResponse*>(
               &_DetectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DetectResponse& a, DetectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DetectResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DetectResponse& from) {
    DetectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "IndyFramework.Protobuf.EyeTask.DetectResponse";
  }
  protected:
  explicit DetectResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTarEePoseFieldNumber = 5,
    kTarToolPoseFieldNumber = 6,
    kTarObjPoseFieldNumber = 7,
    kErrorModuleFieldNumber = 10,
    kIdFieldNumber = 1,
    kClsFieldNumber = 4,
    kDetectedFieldNumber = 2,
    kPassedFieldNumber = 3,
    kErrorStateFieldNumber = 9,
    kToolIdxFieldNumber = 8,
  };
  // repeated float tar_ee_pose = 5;
  int tar_ee_pose_size() const;
  private:
  int _internal_tar_ee_pose_size() const;

  public:
  void clear_tar_ee_pose() ;
  float tar_ee_pose(int index) const;
  void set_tar_ee_pose(int index, float value);
  void add_tar_ee_pose(float value);
  const ::google::protobuf::RepeatedField<float>& tar_ee_pose() const;
  ::google::protobuf::RepeatedField<float>* mutable_tar_ee_pose();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tar_ee_pose() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tar_ee_pose();

  public:
  // repeated float tar_tool_pose = 6;
  int tar_tool_pose_size() const;
  private:
  int _internal_tar_tool_pose_size() const;

  public:
  void clear_tar_tool_pose() ;
  float tar_tool_pose(int index) const;
  void set_tar_tool_pose(int index, float value);
  void add_tar_tool_pose(float value);
  const ::google::protobuf::RepeatedField<float>& tar_tool_pose() const;
  ::google::protobuf::RepeatedField<float>* mutable_tar_tool_pose();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tar_tool_pose() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tar_tool_pose();

  public:
  // repeated float tar_obj_pose = 7;
  int tar_obj_pose_size() const;
  private:
  int _internal_tar_obj_pose_size() const;

  public:
  void clear_tar_obj_pose() ;
  float tar_obj_pose(int index) const;
  void set_tar_obj_pose(int index, float value);
  void add_tar_obj_pose(float value);
  const ::google::protobuf::RepeatedField<float>& tar_obj_pose() const;
  ::google::protobuf::RepeatedField<float>* mutable_tar_obj_pose();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_tar_obj_pose() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_tar_obj_pose();

  public:
  // string error_module = 10;
  void clear_error_module() ;
  const std::string& error_module() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_module(Arg_&& arg, Args_... args);
  std::string* mutable_error_module();
  PROTOBUF_NODISCARD std::string* release_error_module();
  void set_allocated_error_module(std::string* ptr);

  private:
  const std::string& _internal_error_module() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_module(
      const std::string& value);
  std::string* _internal_mutable_error_module();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 cls = 4;
  void clear_cls() ;
  ::int32_t cls() const;
  void set_cls(::int32_t value);

  private:
  ::int32_t _internal_cls() const;
  void _internal_set_cls(::int32_t value);

  public:
  // bool detected = 2;
  void clear_detected() ;
  bool detected() const;
  void set_detected(bool value);

  private:
  bool _internal_detected() const;
  void _internal_set_detected(bool value);

  public:
  // bool passed = 3;
  void clear_passed() ;
  bool passed() const;
  void set_passed(bool value);

  private:
  bool _internal_passed() const;
  void _internal_set_passed(bool value);

  public:
  // bool error_state = 9;
  void clear_error_state() ;
  bool error_state() const;
  void set_error_state(bool value);

  private:
  bool _internal_error_state() const;
  void _internal_set_error_state(bool value);

  public:
  // int32 tool_idx = 8;
  void clear_tool_idx() ;
  ::int32_t tool_idx() const;
  void set_tool_idx(::int32_t value);

  private:
  ::int32_t _internal_tool_idx() const;
  void _internal_set_tool_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.EyeTask.DetectResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10, 0, 74, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> tar_ee_pose_;
    ::google::protobuf::RepeatedField<float> tar_tool_pose_;
    ::google::protobuf::RepeatedField<float> tar_obj_pose_;
    ::google::protobuf::internal::ArenaStringPtr error_module_;
    ::int32_t id_;
    ::int32_t cls_;
    bool detected_;
    bool passed_;
    bool error_state_;
    ::int32_t tool_idx_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_indyeye_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Point

// float x = 1;
inline void Point::clear_x() {
  _impl_.x_ = 0;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.Point.x)
  return _internal_x();
}
inline void Point::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.Point.x)
}
inline float Point::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void Point::_internal_set_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// float y = 2;
inline void Point::clear_y() {
  _impl_.y_ = 0;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.Point.y)
  return _internal_y();
}
inline void Point::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.Point.y)
}
inline float Point::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void Point::_internal_set_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// float z = 3;
inline void Point::clear_z() {
  _impl_.z_ = 0;
}
inline float Point::z() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.Point.z)
  return _internal_z();
}
inline void Point::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.Point.z)
}
inline float Point::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void Point::_internal_set_z(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// WeldingLinesInfo

// string name = 1;
inline void WeldingLinesInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& WeldingLinesInfo::name() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WeldingLinesInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.name)
}
inline std::string* WeldingLinesInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.name)
  return _s;
}
inline const std::string& WeldingLinesInfo::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void WeldingLinesInfo::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* WeldingLinesInfo::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* WeldingLinesInfo::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.name)
  return _impl_.name_.Release();
}
inline void WeldingLinesInfo::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.name)
}

// .IndyFramework.Protobuf.EyeTask.Point start_point = 2;
inline bool WeldingLinesInfo::has_start_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_point_ != nullptr);
  return value;
}
inline void WeldingLinesInfo::clear_start_point() {
  if (_impl_.start_point_ != nullptr) _impl_.start_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& WeldingLinesInfo::_internal_start_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::IndyFramework::Protobuf::EyeTask::Point* p = _impl_.start_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndyFramework::Protobuf::EyeTask::Point&>(::IndyFramework::Protobuf::EyeTask::_Point_default_instance_);
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& WeldingLinesInfo::start_point() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.start_point)
  return _internal_start_point();
}
inline void WeldingLinesInfo::unsafe_arena_set_allocated_start_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_point_);
  }
  _impl_.start_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.start_point)
}
inline ::IndyFramework::Protobuf::EyeTask::Point* WeldingLinesInfo::release_start_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IndyFramework::Protobuf::EyeTask::Point* released = _impl_.start_point_;
  _impl_.start_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* WeldingLinesInfo::unsafe_arena_release_start_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.start_point)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IndyFramework::Protobuf::EyeTask::Point* temp = _impl_.start_point_;
  _impl_.start_point_ = nullptr;
  return temp;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* WeldingLinesInfo::_internal_mutable_start_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndyFramework::Protobuf::EyeTask::Point>(GetArenaForAllocation());
    _impl_.start_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(p);
  }
  return _impl_.start_point_;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* WeldingLinesInfo::mutable_start_point() {
  ::IndyFramework::Protobuf::EyeTask::Point* _msg = _internal_mutable_start_point();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.start_point)
  return _msg;
}
inline void WeldingLinesInfo::set_allocated_start_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(_impl_.start_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.start_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.start_point)
}

// .IndyFramework.Protobuf.EyeTask.Point end_point = 3;
inline bool WeldingLinesInfo::has_end_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_point_ != nullptr);
  return value;
}
inline void WeldingLinesInfo::clear_end_point() {
  if (_impl_.end_point_ != nullptr) _impl_.end_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& WeldingLinesInfo::_internal_end_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::IndyFramework::Protobuf::EyeTask::Point* p = _impl_.end_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndyFramework::Protobuf::EyeTask::Point&>(::IndyFramework::Protobuf::EyeTask::_Point_default_instance_);
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& WeldingLinesInfo::end_point() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.end_point)
  return _internal_end_point();
}
inline void WeldingLinesInfo::unsafe_arena_set_allocated_end_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_point_);
  }
  _impl_.end_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.end_point)
}
inline ::IndyFramework::Protobuf::EyeTask::Point* WeldingLinesInfo::release_end_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::IndyFramework::Protobuf::EyeTask::Point* released = _impl_.end_point_;
  _impl_.end_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* WeldingLinesInfo::unsafe_arena_release_end_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.end_point)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::IndyFramework::Protobuf::EyeTask::Point* temp = _impl_.end_point_;
  _impl_.end_point_ = nullptr;
  return temp;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* WeldingLinesInfo::_internal_mutable_end_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.end_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndyFramework::Protobuf::EyeTask::Point>(GetArenaForAllocation());
    _impl_.end_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(p);
  }
  return _impl_.end_point_;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* WeldingLinesInfo::mutable_end_point() {
  ::IndyFramework::Protobuf::EyeTask::Point* _msg = _internal_mutable_end_point();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.end_point)
  return _msg;
}
inline void WeldingLinesInfo::set_allocated_end_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(_impl_.end_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.end_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.WeldingLinesInfo.end_point)
}

// -------------------------------------------------------------------

// WeldingLinesInfoRequest

// int32 id = 1;
inline void WeldingLinesInfoRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t WeldingLinesInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoRequest.id)
  return _internal_id();
}
inline void WeldingLinesInfoRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoRequest.id)
}
inline ::int32_t WeldingLinesInfoRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void WeldingLinesInfoRequest::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// WeldingLinesInfoResponse

// int32 id = 1;
inline void WeldingLinesInfoResponse::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t WeldingLinesInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.id)
  return _internal_id();
}
inline void WeldingLinesInfoResponse::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.id)
}
inline ::int32_t WeldingLinesInfoResponse::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void WeldingLinesInfoResponse::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// repeated .IndyFramework.Protobuf.EyeTask.WeldingLinesInfo welding = 2;
inline int WeldingLinesInfoResponse::_internal_welding_size() const {
  return _internal_welding().size();
}
inline int WeldingLinesInfoResponse::welding_size() const {
  return _internal_welding_size();
}
inline void WeldingLinesInfoResponse::clear_welding() {
  _internal_mutable_welding()->Clear();
}
inline ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo* WeldingLinesInfoResponse::mutable_welding(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.welding)
  return _internal_mutable_welding()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo >*
WeldingLinesInfoResponse::mutable_welding() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.welding)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_welding();
}
inline const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo& WeldingLinesInfoResponse::welding(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.welding)
    return _internal_welding().Get(index);
}
inline ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo* WeldingLinesInfoResponse::add_welding() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo* _add = _internal_mutable_welding()->Add();
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.welding)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo >&
WeldingLinesInfoResponse::welding() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.welding)
  return _internal_welding();
}
inline const ::google::protobuf::RepeatedPtrField<::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo>&
WeldingLinesInfoResponse::_internal_welding() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.welding_;
}
inline ::google::protobuf::RepeatedPtrField<::IndyFramework::Protobuf::EyeTask::WeldingLinesInfo>*
WeldingLinesInfoResponse::_internal_mutable_welding() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.welding_;
}

// repeated string cell_types = 3;
inline int WeldingLinesInfoResponse::_internal_cell_types_size() const {
  return _internal_cell_types().size();
}
inline int WeldingLinesInfoResponse::cell_types_size() const {
  return _internal_cell_types_size();
}
inline void WeldingLinesInfoResponse::clear_cell_types() {
  _internal_mutable_cell_types()->Clear();
}
inline std::string* WeldingLinesInfoResponse::add_cell_types() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_cell_types()->Add();
  // @@protoc_insertion_point(field_add_mutable:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
  return _s;
}
inline const std::string& WeldingLinesInfoResponse::cell_types(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
  return _internal_cell_types().Get(index);
}
inline std::string* WeldingLinesInfoResponse::mutable_cell_types(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
  return _internal_mutable_cell_types()->Mutable(index);
}
inline void WeldingLinesInfoResponse::set_cell_types(int index, const std::string& value) {
  _internal_mutable_cell_types()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
}
inline void WeldingLinesInfoResponse::set_cell_types(int index, std::string&& value) {
  _internal_mutable_cell_types()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
}
inline void WeldingLinesInfoResponse::set_cell_types(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_cell_types()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
}
inline void WeldingLinesInfoResponse::set_cell_types(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_cell_types()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
}
inline void WeldingLinesInfoResponse::set_cell_types(int index, absl::string_view value) {
  _internal_mutable_cell_types()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
}
inline void WeldingLinesInfoResponse::add_cell_types(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_cell_types()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
}
inline void WeldingLinesInfoResponse::add_cell_types(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_cell_types()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
}
inline void WeldingLinesInfoResponse::add_cell_types(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_cell_types()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
}
inline void WeldingLinesInfoResponse::add_cell_types(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_cell_types()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
}
inline void WeldingLinesInfoResponse::add_cell_types(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_cell_types()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WeldingLinesInfoResponse::cell_types() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
  return _internal_cell_types();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* WeldingLinesInfoResponse::mutable_cell_types() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.cell_types)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_cell_types();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WeldingLinesInfoResponse::_internal_cell_types() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cell_types_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WeldingLinesInfoResponse::_internal_mutable_cell_types() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.cell_types_;
}

// bool error_state = 4;
inline void WeldingLinesInfoResponse::clear_error_state() {
  _impl_.error_state_ = false;
}
inline bool WeldingLinesInfoResponse::error_state() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.error_state)
  return _internal_error_state();
}
inline void WeldingLinesInfoResponse::set_error_state(bool value) {
  _internal_set_error_state(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.WeldingLinesInfoResponse.error_state)
}
inline bool WeldingLinesInfoResponse::_internal_error_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_state_;
}
inline void WeldingLinesInfoResponse::_internal_set_error_state(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_state_ = value;
}

// -------------------------------------------------------------------

// StraightLineInfoRequest

// int32 id = 1;
inline void StraightLineInfoRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t StraightLineInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.StraightLineInfoRequest.id)
  return _internal_id();
}
inline void StraightLineInfoRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.StraightLineInfoRequest.id)
}
inline ::int32_t StraightLineInfoRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void StraightLineInfoRequest::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// StraightLineInfoResponse

// int32 id = 1;
inline void StraightLineInfoResponse::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t StraightLineInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.id)
  return _internal_id();
}
inline void StraightLineInfoResponse::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.id)
}
inline ::int32_t StraightLineInfoResponse::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void StraightLineInfoResponse::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .IndyFramework.Protobuf.EyeTask.Point normal_vector = 2;
inline bool StraightLineInfoResponse::has_normal_vector() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.normal_vector_ != nullptr);
  return value;
}
inline void StraightLineInfoResponse::clear_normal_vector() {
  if (_impl_.normal_vector_ != nullptr) _impl_.normal_vector_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& StraightLineInfoResponse::_internal_normal_vector() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::IndyFramework::Protobuf::EyeTask::Point* p = _impl_.normal_vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndyFramework::Protobuf::EyeTask::Point&>(::IndyFramework::Protobuf::EyeTask::_Point_default_instance_);
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& StraightLineInfoResponse::normal_vector() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.normal_vector)
  return _internal_normal_vector();
}
inline void StraightLineInfoResponse::unsafe_arena_set_allocated_normal_vector(::IndyFramework::Protobuf::EyeTask::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.normal_vector_);
  }
  _impl_.normal_vector_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.normal_vector)
}
inline ::IndyFramework::Protobuf::EyeTask::Point* StraightLineInfoResponse::release_normal_vector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IndyFramework::Protobuf::EyeTask::Point* released = _impl_.normal_vector_;
  _impl_.normal_vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* StraightLineInfoResponse::unsafe_arena_release_normal_vector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.normal_vector)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IndyFramework::Protobuf::EyeTask::Point* temp = _impl_.normal_vector_;
  _impl_.normal_vector_ = nullptr;
  return temp;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* StraightLineInfoResponse::_internal_mutable_normal_vector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.normal_vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndyFramework::Protobuf::EyeTask::Point>(GetArenaForAllocation());
    _impl_.normal_vector_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(p);
  }
  return _impl_.normal_vector_;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* StraightLineInfoResponse::mutable_normal_vector() {
  ::IndyFramework::Protobuf::EyeTask::Point* _msg = _internal_mutable_normal_vector();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.normal_vector)
  return _msg;
}
inline void StraightLineInfoResponse::set_allocated_normal_vector(::IndyFramework::Protobuf::EyeTask::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(_impl_.normal_vector_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.normal_vector_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.normal_vector)
}

// .IndyFramework.Protobuf.EyeTask.Point start_point = 3;
inline bool StraightLineInfoResponse::has_start_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_point_ != nullptr);
  return value;
}
inline void StraightLineInfoResponse::clear_start_point() {
  if (_impl_.start_point_ != nullptr) _impl_.start_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& StraightLineInfoResponse::_internal_start_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::IndyFramework::Protobuf::EyeTask::Point* p = _impl_.start_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndyFramework::Protobuf::EyeTask::Point&>(::IndyFramework::Protobuf::EyeTask::_Point_default_instance_);
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& StraightLineInfoResponse::start_point() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.start_point)
  return _internal_start_point();
}
inline void StraightLineInfoResponse::unsafe_arena_set_allocated_start_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_point_);
  }
  _impl_.start_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.start_point)
}
inline ::IndyFramework::Protobuf::EyeTask::Point* StraightLineInfoResponse::release_start_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::IndyFramework::Protobuf::EyeTask::Point* released = _impl_.start_point_;
  _impl_.start_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* StraightLineInfoResponse::unsafe_arena_release_start_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.start_point)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::IndyFramework::Protobuf::EyeTask::Point* temp = _impl_.start_point_;
  _impl_.start_point_ = nullptr;
  return temp;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* StraightLineInfoResponse::_internal_mutable_start_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.start_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndyFramework::Protobuf::EyeTask::Point>(GetArenaForAllocation());
    _impl_.start_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(p);
  }
  return _impl_.start_point_;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* StraightLineInfoResponse::mutable_start_point() {
  ::IndyFramework::Protobuf::EyeTask::Point* _msg = _internal_mutable_start_point();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.start_point)
  return _msg;
}
inline void StraightLineInfoResponse::set_allocated_start_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(_impl_.start_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.start_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.start_point)
}

// .IndyFramework.Protobuf.EyeTask.Point end_point = 4;
inline bool StraightLineInfoResponse::has_end_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_point_ != nullptr);
  return value;
}
inline void StraightLineInfoResponse::clear_end_point() {
  if (_impl_.end_point_ != nullptr) _impl_.end_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& StraightLineInfoResponse::_internal_end_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::IndyFramework::Protobuf::EyeTask::Point* p = _impl_.end_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndyFramework::Protobuf::EyeTask::Point&>(::IndyFramework::Protobuf::EyeTask::_Point_default_instance_);
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& StraightLineInfoResponse::end_point() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.end_point)
  return _internal_end_point();
}
inline void StraightLineInfoResponse::unsafe_arena_set_allocated_end_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_point_);
  }
  _impl_.end_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.end_point)
}
inline ::IndyFramework::Protobuf::EyeTask::Point* StraightLineInfoResponse::release_end_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::IndyFramework::Protobuf::EyeTask::Point* released = _impl_.end_point_;
  _impl_.end_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* StraightLineInfoResponse::unsafe_arena_release_end_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.end_point)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::IndyFramework::Protobuf::EyeTask::Point* temp = _impl_.end_point_;
  _impl_.end_point_ = nullptr;
  return temp;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* StraightLineInfoResponse::_internal_mutable_end_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.end_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndyFramework::Protobuf::EyeTask::Point>(GetArenaForAllocation());
    _impl_.end_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(p);
  }
  return _impl_.end_point_;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* StraightLineInfoResponse::mutable_end_point() {
  ::IndyFramework::Protobuf::EyeTask::Point* _msg = _internal_mutable_end_point();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.end_point)
  return _msg;
}
inline void StraightLineInfoResponse::set_allocated_end_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(_impl_.end_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.end_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.end_point)
}

// bool error_state = 5;
inline void StraightLineInfoResponse::clear_error_state() {
  _impl_.error_state_ = false;
}
inline bool StraightLineInfoResponse::error_state() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.error_state)
  return _internal_error_state();
}
inline void StraightLineInfoResponse::set_error_state(bool value) {
  _internal_set_error_state(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.StraightLineInfoResponse.error_state)
}
inline bool StraightLineInfoResponse::_internal_error_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_state_;
}
inline void StraightLineInfoResponse::_internal_set_error_state(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_state_ = value;
}

// -------------------------------------------------------------------

// CircularLineThreePoints

// .IndyFramework.Protobuf.EyeTask.Point start_point = 1;
inline bool CircularLineThreePoints::has_start_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_point_ != nullptr);
  return value;
}
inline void CircularLineThreePoints::clear_start_point() {
  if (_impl_.start_point_ != nullptr) _impl_.start_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& CircularLineThreePoints::_internal_start_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::IndyFramework::Protobuf::EyeTask::Point* p = _impl_.start_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndyFramework::Protobuf::EyeTask::Point&>(::IndyFramework::Protobuf::EyeTask::_Point_default_instance_);
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& CircularLineThreePoints::start_point() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.start_point)
  return _internal_start_point();
}
inline void CircularLineThreePoints::unsafe_arena_set_allocated_start_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_point_);
  }
  _impl_.start_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.start_point)
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineThreePoints::release_start_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IndyFramework::Protobuf::EyeTask::Point* released = _impl_.start_point_;
  _impl_.start_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineThreePoints::unsafe_arena_release_start_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.start_point)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IndyFramework::Protobuf::EyeTask::Point* temp = _impl_.start_point_;
  _impl_.start_point_ = nullptr;
  return temp;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineThreePoints::_internal_mutable_start_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndyFramework::Protobuf::EyeTask::Point>(GetArenaForAllocation());
    _impl_.start_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(p);
  }
  return _impl_.start_point_;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineThreePoints::mutable_start_point() {
  ::IndyFramework::Protobuf::EyeTask::Point* _msg = _internal_mutable_start_point();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.start_point)
  return _msg;
}
inline void CircularLineThreePoints::set_allocated_start_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(_impl_.start_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.start_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.start_point)
}

// .IndyFramework.Protobuf.EyeTask.Point via_point = 2;
inline bool CircularLineThreePoints::has_via_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.via_point_ != nullptr);
  return value;
}
inline void CircularLineThreePoints::clear_via_point() {
  if (_impl_.via_point_ != nullptr) _impl_.via_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& CircularLineThreePoints::_internal_via_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::IndyFramework::Protobuf::EyeTask::Point* p = _impl_.via_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndyFramework::Protobuf::EyeTask::Point&>(::IndyFramework::Protobuf::EyeTask::_Point_default_instance_);
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& CircularLineThreePoints::via_point() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.via_point)
  return _internal_via_point();
}
inline void CircularLineThreePoints::unsafe_arena_set_allocated_via_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.via_point_);
  }
  _impl_.via_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.via_point)
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineThreePoints::release_via_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::IndyFramework::Protobuf::EyeTask::Point* released = _impl_.via_point_;
  _impl_.via_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineThreePoints::unsafe_arena_release_via_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.via_point)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::IndyFramework::Protobuf::EyeTask::Point* temp = _impl_.via_point_;
  _impl_.via_point_ = nullptr;
  return temp;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineThreePoints::_internal_mutable_via_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.via_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndyFramework::Protobuf::EyeTask::Point>(GetArenaForAllocation());
    _impl_.via_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(p);
  }
  return _impl_.via_point_;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineThreePoints::mutable_via_point() {
  ::IndyFramework::Protobuf::EyeTask::Point* _msg = _internal_mutable_via_point();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.via_point)
  return _msg;
}
inline void CircularLineThreePoints::set_allocated_via_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(_impl_.via_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.via_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.via_point)
}

// .IndyFramework.Protobuf.EyeTask.Point end_point = 3;
inline bool CircularLineThreePoints::has_end_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_point_ != nullptr);
  return value;
}
inline void CircularLineThreePoints::clear_end_point() {
  if (_impl_.end_point_ != nullptr) _impl_.end_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& CircularLineThreePoints::_internal_end_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::IndyFramework::Protobuf::EyeTask::Point* p = _impl_.end_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndyFramework::Protobuf::EyeTask::Point&>(::IndyFramework::Protobuf::EyeTask::_Point_default_instance_);
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& CircularLineThreePoints::end_point() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.end_point)
  return _internal_end_point();
}
inline void CircularLineThreePoints::unsafe_arena_set_allocated_end_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_point_);
  }
  _impl_.end_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.end_point)
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineThreePoints::release_end_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::IndyFramework::Protobuf::EyeTask::Point* released = _impl_.end_point_;
  _impl_.end_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineThreePoints::unsafe_arena_release_end_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.end_point)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::IndyFramework::Protobuf::EyeTask::Point* temp = _impl_.end_point_;
  _impl_.end_point_ = nullptr;
  return temp;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineThreePoints::_internal_mutable_end_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.end_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndyFramework::Protobuf::EyeTask::Point>(GetArenaForAllocation());
    _impl_.end_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(p);
  }
  return _impl_.end_point_;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineThreePoints::mutable_end_point() {
  ::IndyFramework::Protobuf::EyeTask::Point* _msg = _internal_mutable_end_point();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.end_point)
  return _msg;
}
inline void CircularLineThreePoints::set_allocated_end_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(_impl_.end_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.end_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineThreePoints.end_point)
}

// -------------------------------------------------------------------

// CircularLineCenterRadius

// .IndyFramework.Protobuf.EyeTask.Point center_point = 1;
inline bool CircularLineCenterRadius::has_center_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.center_point_ != nullptr);
  return value;
}
inline void CircularLineCenterRadius::clear_center_point() {
  if (_impl_.center_point_ != nullptr) _impl_.center_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& CircularLineCenterRadius::_internal_center_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::IndyFramework::Protobuf::EyeTask::Point* p = _impl_.center_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndyFramework::Protobuf::EyeTask::Point&>(::IndyFramework::Protobuf::EyeTask::_Point_default_instance_);
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& CircularLineCenterRadius::center_point() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CircularLineCenterRadius.center_point)
  return _internal_center_point();
}
inline void CircularLineCenterRadius::unsafe_arena_set_allocated_center_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.center_point_);
  }
  _impl_.center_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineCenterRadius.center_point)
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineCenterRadius::release_center_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IndyFramework::Protobuf::EyeTask::Point* released = _impl_.center_point_;
  _impl_.center_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineCenterRadius::unsafe_arena_release_center_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.CircularLineCenterRadius.center_point)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IndyFramework::Protobuf::EyeTask::Point* temp = _impl_.center_point_;
  _impl_.center_point_ = nullptr;
  return temp;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineCenterRadius::_internal_mutable_center_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.center_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndyFramework::Protobuf::EyeTask::Point>(GetArenaForAllocation());
    _impl_.center_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(p);
  }
  return _impl_.center_point_;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineCenterRadius::mutable_center_point() {
  ::IndyFramework::Protobuf::EyeTask::Point* _msg = _internal_mutable_center_point();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.CircularLineCenterRadius.center_point)
  return _msg;
}
inline void CircularLineCenterRadius::set_allocated_center_point(::IndyFramework::Protobuf::EyeTask::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(_impl_.center_point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.center_point_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineCenterRadius.center_point)
}

// float radius = 2;
inline void CircularLineCenterRadius::clear_radius() {
  _impl_.radius_ = 0;
}
inline float CircularLineCenterRadius::radius() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CircularLineCenterRadius.radius)
  return _internal_radius();
}
inline void CircularLineCenterRadius::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.CircularLineCenterRadius.radius)
}
inline float CircularLineCenterRadius::_internal_radius() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.radius_;
}
inline void CircularLineCenterRadius::_internal_set_radius(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.radius_ = value;
}

// -------------------------------------------------------------------

// CircularLineInfoRequest

// int32 id = 1;
inline void CircularLineInfoRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t CircularLineInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CircularLineInfoRequest.id)
  return _internal_id();
}
inline void CircularLineInfoRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.CircularLineInfoRequest.id)
}
inline ::int32_t CircularLineInfoRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void CircularLineInfoRequest::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// CircularLineInfoResponse

// int32 id = 1;
inline void CircularLineInfoResponse::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t CircularLineInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.id)
  return _internal_id();
}
inline void CircularLineInfoResponse::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.id)
}
inline ::int32_t CircularLineInfoResponse::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void CircularLineInfoResponse::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .IndyFramework.Protobuf.EyeTask.Point normal_vector = 2;
inline bool CircularLineInfoResponse::has_normal_vector() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.normal_vector_ != nullptr);
  return value;
}
inline void CircularLineInfoResponse::clear_normal_vector() {
  if (_impl_.normal_vector_ != nullptr) _impl_.normal_vector_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& CircularLineInfoResponse::_internal_normal_vector() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::IndyFramework::Protobuf::EyeTask::Point* p = _impl_.normal_vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndyFramework::Protobuf::EyeTask::Point&>(::IndyFramework::Protobuf::EyeTask::_Point_default_instance_);
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& CircularLineInfoResponse::normal_vector() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.normal_vector)
  return _internal_normal_vector();
}
inline void CircularLineInfoResponse::unsafe_arena_set_allocated_normal_vector(::IndyFramework::Protobuf::EyeTask::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.normal_vector_);
  }
  _impl_.normal_vector_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.normal_vector)
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineInfoResponse::release_normal_vector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IndyFramework::Protobuf::EyeTask::Point* released = _impl_.normal_vector_;
  _impl_.normal_vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineInfoResponse::unsafe_arena_release_normal_vector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.normal_vector)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::IndyFramework::Protobuf::EyeTask::Point* temp = _impl_.normal_vector_;
  _impl_.normal_vector_ = nullptr;
  return temp;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineInfoResponse::_internal_mutable_normal_vector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.normal_vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndyFramework::Protobuf::EyeTask::Point>(GetArenaForAllocation());
    _impl_.normal_vector_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(p);
  }
  return _impl_.normal_vector_;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineInfoResponse::mutable_normal_vector() {
  ::IndyFramework::Protobuf::EyeTask::Point* _msg = _internal_mutable_normal_vector();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.normal_vector)
  return _msg;
}
inline void CircularLineInfoResponse::set_allocated_normal_vector(::IndyFramework::Protobuf::EyeTask::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(_impl_.normal_vector_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.normal_vector_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.normal_vector)
}

// .IndyFramework.Protobuf.EyeTask.Point reference_vector = 3;
inline bool CircularLineInfoResponse::has_reference_vector() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reference_vector_ != nullptr);
  return value;
}
inline void CircularLineInfoResponse::clear_reference_vector() {
  if (_impl_.reference_vector_ != nullptr) _impl_.reference_vector_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& CircularLineInfoResponse::_internal_reference_vector() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::IndyFramework::Protobuf::EyeTask::Point* p = _impl_.reference_vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndyFramework::Protobuf::EyeTask::Point&>(::IndyFramework::Protobuf::EyeTask::_Point_default_instance_);
}
inline const ::IndyFramework::Protobuf::EyeTask::Point& CircularLineInfoResponse::reference_vector() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.reference_vector)
  return _internal_reference_vector();
}
inline void CircularLineInfoResponse::unsafe_arena_set_allocated_reference_vector(::IndyFramework::Protobuf::EyeTask::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reference_vector_);
  }
  _impl_.reference_vector_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.reference_vector)
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineInfoResponse::release_reference_vector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::IndyFramework::Protobuf::EyeTask::Point* released = _impl_.reference_vector_;
  _impl_.reference_vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineInfoResponse::unsafe_arena_release_reference_vector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.reference_vector)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::IndyFramework::Protobuf::EyeTask::Point* temp = _impl_.reference_vector_;
  _impl_.reference_vector_ = nullptr;
  return temp;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineInfoResponse::_internal_mutable_reference_vector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.reference_vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndyFramework::Protobuf::EyeTask::Point>(GetArenaForAllocation());
    _impl_.reference_vector_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(p);
  }
  return _impl_.reference_vector_;
}
inline ::IndyFramework::Protobuf::EyeTask::Point* CircularLineInfoResponse::mutable_reference_vector() {
  ::IndyFramework::Protobuf::EyeTask::Point* _msg = _internal_mutable_reference_vector();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.reference_vector)
  return _msg;
}
inline void CircularLineInfoResponse::set_allocated_reference_vector(::IndyFramework::Protobuf::EyeTask::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(_impl_.reference_vector_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.reference_vector_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.reference_vector)
}

// .IndyFramework.Protobuf.EyeTask.CircularLineThreePoints point_method = 4;
inline bool CircularLineInfoResponse::has_point_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.point_method_ != nullptr);
  return value;
}
inline void CircularLineInfoResponse::clear_point_method() {
  if (_impl_.point_method_ != nullptr) _impl_.point_method_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints& CircularLineInfoResponse::_internal_point_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* p = _impl_.point_method_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints&>(::IndyFramework::Protobuf::EyeTask::_CircularLineThreePoints_default_instance_);
}
inline const ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints& CircularLineInfoResponse::point_method() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.point_method)
  return _internal_point_method();
}
inline void CircularLineInfoResponse::unsafe_arena_set_allocated_point_method(::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.point_method_);
  }
  _impl_.point_method_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.point_method)
}
inline ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* CircularLineInfoResponse::release_point_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* released = _impl_.point_method_;
  _impl_.point_method_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* CircularLineInfoResponse::unsafe_arena_release_point_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.point_method)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* temp = _impl_.point_method_;
  _impl_.point_method_ = nullptr;
  return temp;
}
inline ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* CircularLineInfoResponse::_internal_mutable_point_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.point_method_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints>(GetArenaForAllocation());
    _impl_.point_method_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints*>(p);
  }
  return _impl_.point_method_;
}
inline ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* CircularLineInfoResponse::mutable_point_method() {
  ::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* _msg = _internal_mutable_point_method();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.point_method)
  return _msg;
}
inline void CircularLineInfoResponse::set_allocated_point_method(::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints*>(_impl_.point_method_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.point_method_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::CircularLineThreePoints*>(value);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.point_method)
}

// .IndyFramework.Protobuf.EyeTask.CircularLineCenterRadius vector_method = 5;
inline bool CircularLineInfoResponse::has_vector_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vector_method_ != nullptr);
  return value;
}
inline void CircularLineInfoResponse::clear_vector_method() {
  if (_impl_.vector_method_ != nullptr) _impl_.vector_method_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius& CircularLineInfoResponse::_internal_vector_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* p = _impl_.vector_method_;
  return p != nullptr ? *p : reinterpret_cast<const ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius&>(::IndyFramework::Protobuf::EyeTask::_CircularLineCenterRadius_default_instance_);
}
inline const ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius& CircularLineInfoResponse::vector_method() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.vector_method)
  return _internal_vector_method();
}
inline void CircularLineInfoResponse::unsafe_arena_set_allocated_vector_method(::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vector_method_);
  }
  _impl_.vector_method_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.vector_method)
}
inline ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* CircularLineInfoResponse::release_vector_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* released = _impl_.vector_method_;
  _impl_.vector_method_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* CircularLineInfoResponse::unsafe_arena_release_vector_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.vector_method)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* temp = _impl_.vector_method_;
  _impl_.vector_method_ = nullptr;
  return temp;
}
inline ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* CircularLineInfoResponse::_internal_mutable_vector_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.vector_method_ == nullptr) {
    auto* p = CreateMaybeMessage<::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius>(GetArenaForAllocation());
    _impl_.vector_method_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius*>(p);
  }
  return _impl_.vector_method_;
}
inline ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* CircularLineInfoResponse::mutable_vector_method() {
  ::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* _msg = _internal_mutable_vector_method();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.vector_method)
  return _msg;
}
inline void CircularLineInfoResponse::set_allocated_vector_method(::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius*>(_impl_.vector_method_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.vector_method_ = reinterpret_cast<::IndyFramework::Protobuf::EyeTask::CircularLineCenterRadius*>(value);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.vector_method)
}

// bool error_state = 6;
inline void CircularLineInfoResponse::clear_error_state() {
  _impl_.error_state_ = false;
}
inline bool CircularLineInfoResponse::error_state() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.error_state)
  return _internal_error_state();
}
inline void CircularLineInfoResponse::set_error_state(bool value) {
  _internal_set_error_state(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.CircularLineInfoResponse.error_state)
}
inline bool CircularLineInfoResponse::_internal_error_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_state_;
}
inline void CircularLineInfoResponse::_internal_set_error_state(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_state_ = value;
}

// -------------------------------------------------------------------

// ServerInfoRequest

// int32 id = 1;
inline void ServerInfoRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t ServerInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ServerInfoRequest.id)
  return _internal_id();
}
inline void ServerInfoRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ServerInfoRequest.id)
}
inline ::int32_t ServerInfoRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void ServerInfoRequest::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// ServerInfoResponse

// int32 id = 1;
inline void ServerInfoResponse::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t ServerInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.id)
  return _internal_id();
}
inline void ServerInfoResponse::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.id)
}
inline ::int32_t ServerInfoResponse::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void ServerInfoResponse::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string version = 2;
inline void ServerInfoResponse::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& ServerInfoResponse::version() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfoResponse::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.version)
}
inline std::string* ServerInfoResponse::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.version)
  return _s;
}
inline const std::string& ServerInfoResponse::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void ServerInfoResponse::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfoResponse::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* ServerInfoResponse::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.version)
  return _impl_.version_.Release();
}
inline void ServerInfoResponse::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.version)
}

// string release_date = 3;
inline void ServerInfoResponse::clear_release_date() {
  _impl_.release_date_.ClearToEmpty();
}
inline const std::string& ServerInfoResponse::release_date() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.release_date)
  return _internal_release_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfoResponse::set_release_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.release_date_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.release_date)
}
inline std::string* ServerInfoResponse::mutable_release_date() {
  std::string* _s = _internal_mutable_release_date();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.release_date)
  return _s;
}
inline const std::string& ServerInfoResponse::_internal_release_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.release_date_.Get();
}
inline void ServerInfoResponse::_internal_set_release_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.release_date_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfoResponse::_internal_mutable_release_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.release_date_.Mutable( GetArenaForAllocation());
}
inline std::string* ServerInfoResponse::release_release_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.release_date)
  return _impl_.release_date_.Release();
}
inline void ServerInfoResponse::set_allocated_release_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.release_date_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.release_date_.IsDefault()) {
          _impl_.release_date_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.release_date)
}

// string program_name = 4;
inline void ServerInfoResponse::clear_program_name() {
  _impl_.program_name_.ClearToEmpty();
}
inline const std::string& ServerInfoResponse::program_name() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.program_name)
  return _internal_program_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfoResponse::set_program_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.program_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.program_name)
}
inline std::string* ServerInfoResponse::mutable_program_name() {
  std::string* _s = _internal_mutable_program_name();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.program_name)
  return _s;
}
inline const std::string& ServerInfoResponse::_internal_program_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.program_name_.Get();
}
inline void ServerInfoResponse::_internal_set_program_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.program_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfoResponse::_internal_mutable_program_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.program_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ServerInfoResponse::release_program_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.program_name)
  return _impl_.program_name_.Release();
}
inline void ServerInfoResponse::set_allocated_program_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.program_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.program_name_.IsDefault()) {
          _impl_.program_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.ServerInfoResponse.program_name)
}

// -------------------------------------------------------------------

// CalibrationRequest

// int32 id = 1;
inline void CalibrationRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t CalibrationRequest::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CalibrationRequest.id)
  return _internal_id();
}
inline void CalibrationRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.CalibrationRequest.id)
}
inline ::int32_t CalibrationRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void CalibrationRequest::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// CalibrationResponse

// int32 id = 1;
inline void CalibrationResponse::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t CalibrationResponse::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CalibrationResponse.id)
  return _internal_id();
}
inline void CalibrationResponse::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.CalibrationResponse.id)
}
inline ::int32_t CalibrationResponse::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void CalibrationResponse::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// repeated bool is_succeeded = 2;
inline int CalibrationResponse::_internal_is_succeeded_size() const {
  return _internal_is_succeeded().size();
}
inline int CalibrationResponse::is_succeeded_size() const {
  return _internal_is_succeeded_size();
}
inline void CalibrationResponse::clear_is_succeeded() {
  _internal_mutable_is_succeeded()->Clear();
}
inline bool CalibrationResponse::is_succeeded(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CalibrationResponse.is_succeeded)
  return _internal_is_succeeded().Get(index);
}
inline void CalibrationResponse::set_is_succeeded(int index, bool value) {
  _internal_mutable_is_succeeded()->Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.CalibrationResponse.is_succeeded)
}
inline void CalibrationResponse::add_is_succeeded(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_is_succeeded()->Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.EyeTask.CalibrationResponse.is_succeeded)
}
inline const ::google::protobuf::RepeatedField<bool>& CalibrationResponse::is_succeeded() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.EyeTask.CalibrationResponse.is_succeeded)
  return _internal_is_succeeded();
}
inline ::google::protobuf::RepeatedField<bool>* CalibrationResponse::mutable_is_succeeded() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.EyeTask.CalibrationResponse.is_succeeded)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_is_succeeded();
}

inline const ::google::protobuf::RepeatedField<bool>& CalibrationResponse::_internal_is_succeeded() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_succeeded_;
}
inline ::google::protobuf::RepeatedField<bool>* CalibrationResponse::_internal_mutable_is_succeeded() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.is_succeeded_;
}

// repeated float indy_cam_rms = 3;
inline int CalibrationResponse::_internal_indy_cam_rms_size() const {
  return _internal_indy_cam_rms().size();
}
inline int CalibrationResponse::indy_cam_rms_size() const {
  return _internal_indy_cam_rms_size();
}
inline void CalibrationResponse::clear_indy_cam_rms() {
  _internal_mutable_indy_cam_rms()->Clear();
}
inline float CalibrationResponse::indy_cam_rms(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CalibrationResponse.indy_cam_rms)
  return _internal_indy_cam_rms().Get(index);
}
inline void CalibrationResponse::set_indy_cam_rms(int index, float value) {
  _internal_mutable_indy_cam_rms()->Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.CalibrationResponse.indy_cam_rms)
}
inline void CalibrationResponse::add_indy_cam_rms(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_indy_cam_rms()->Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.EyeTask.CalibrationResponse.indy_cam_rms)
}
inline const ::google::protobuf::RepeatedField<float>& CalibrationResponse::indy_cam_rms() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.EyeTask.CalibrationResponse.indy_cam_rms)
  return _internal_indy_cam_rms();
}
inline ::google::protobuf::RepeatedField<float>* CalibrationResponse::mutable_indy_cam_rms() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.EyeTask.CalibrationResponse.indy_cam_rms)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_indy_cam_rms();
}

inline const ::google::protobuf::RepeatedField<float>& CalibrationResponse::_internal_indy_cam_rms() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.indy_cam_rms_;
}
inline ::google::protobuf::RepeatedField<float>* CalibrationResponse::_internal_mutable_indy_cam_rms() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.indy_cam_rms_;
}

// -------------------------------------------------------------------

// CalibrationDoneRequest

// int32 id = 1;
inline void CalibrationDoneRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t CalibrationDoneRequest::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CalibrationDoneRequest.id)
  return _internal_id();
}
inline void CalibrationDoneRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.CalibrationDoneRequest.id)
}
inline ::int32_t CalibrationDoneRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void CalibrationDoneRequest::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// CalibrationDoneResponse

// int32 id = 1;
inline void CalibrationDoneResponse::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t CalibrationDoneResponse::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse.id)
  return _internal_id();
}
inline void CalibrationDoneResponse::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse.id)
}
inline ::int32_t CalibrationDoneResponse::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void CalibrationDoneResponse::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// bool is_calibrated = 2;
inline void CalibrationDoneResponse::clear_is_calibrated() {
  _impl_.is_calibrated_ = false;
}
inline bool CalibrationDoneResponse::is_calibrated() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse.is_calibrated)
  return _internal_is_calibrated();
}
inline void CalibrationDoneResponse::set_is_calibrated(bool value) {
  _internal_set_is_calibrated(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse.is_calibrated)
}
inline bool CalibrationDoneResponse::_internal_is_calibrated() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_calibrated_;
}
inline void CalibrationDoneResponse::_internal_set_is_calibrated(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_calibrated_ = value;
}

// repeated bool is_succeeded = 3;
inline int CalibrationDoneResponse::_internal_is_succeeded_size() const {
  return _internal_is_succeeded().size();
}
inline int CalibrationDoneResponse::is_succeeded_size() const {
  return _internal_is_succeeded_size();
}
inline void CalibrationDoneResponse::clear_is_succeeded() {
  _internal_mutable_is_succeeded()->Clear();
}
inline bool CalibrationDoneResponse::is_succeeded(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse.is_succeeded)
  return _internal_is_succeeded().Get(index);
}
inline void CalibrationDoneResponse::set_is_succeeded(int index, bool value) {
  _internal_mutable_is_succeeded()->Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse.is_succeeded)
}
inline void CalibrationDoneResponse::add_is_succeeded(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_is_succeeded()->Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse.is_succeeded)
}
inline const ::google::protobuf::RepeatedField<bool>& CalibrationDoneResponse::is_succeeded() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse.is_succeeded)
  return _internal_is_succeeded();
}
inline ::google::protobuf::RepeatedField<bool>* CalibrationDoneResponse::mutable_is_succeeded() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse.is_succeeded)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_is_succeeded();
}

inline const ::google::protobuf::RepeatedField<bool>& CalibrationDoneResponse::_internal_is_succeeded() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_succeeded_;
}
inline ::google::protobuf::RepeatedField<bool>* CalibrationDoneResponse::_internal_mutable_is_succeeded() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.is_succeeded_;
}

// repeated float indy_cam_rms = 4;
inline int CalibrationDoneResponse::_internal_indy_cam_rms_size() const {
  return _internal_indy_cam_rms().size();
}
inline int CalibrationDoneResponse::indy_cam_rms_size() const {
  return _internal_indy_cam_rms_size();
}
inline void CalibrationDoneResponse::clear_indy_cam_rms() {
  _internal_mutable_indy_cam_rms()->Clear();
}
inline float CalibrationDoneResponse::indy_cam_rms(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse.indy_cam_rms)
  return _internal_indy_cam_rms().Get(index);
}
inline void CalibrationDoneResponse::set_indy_cam_rms(int index, float value) {
  _internal_mutable_indy_cam_rms()->Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse.indy_cam_rms)
}
inline void CalibrationDoneResponse::add_indy_cam_rms(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_indy_cam_rms()->Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse.indy_cam_rms)
}
inline const ::google::protobuf::RepeatedField<float>& CalibrationDoneResponse::indy_cam_rms() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse.indy_cam_rms)
  return _internal_indy_cam_rms();
}
inline ::google::protobuf::RepeatedField<float>* CalibrationDoneResponse::mutable_indy_cam_rms() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.EyeTask.CalibrationDoneResponse.indy_cam_rms)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_indy_cam_rms();
}

inline const ::google::protobuf::RepeatedField<float>& CalibrationDoneResponse::_internal_indy_cam_rms() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.indy_cam_rms_;
}
inline ::google::protobuf::RepeatedField<float>* CalibrationDoneResponse::_internal_mutable_indy_cam_rms() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.indy_cam_rms_;
}

// -------------------------------------------------------------------

// ImageRequest

// int32 id = 1;
inline void ImageRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t ImageRequest::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ImageRequest.id)
  return _internal_id();
}
inline void ImageRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ImageRequest.id)
}
inline ::int32_t ImageRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void ImageRequest::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int32 type = 2;
inline void ImageRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::int32_t ImageRequest::type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ImageRequest.type)
  return _internal_type();
}
inline void ImageRequest::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ImageRequest.type)
}
inline ::int32_t ImageRequest::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void ImageRequest::_internal_set_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// ImageResponse

// int32 id = 1;
inline void ImageResponse::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t ImageResponse::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ImageResponse.id)
  return _internal_id();
}
inline void ImageResponse::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ImageResponse.id)
}
inline ::int32_t ImageResponse::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void ImageResponse::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int32 type = 2;
inline void ImageResponse::clear_type() {
  _impl_.type_ = 0;
}
inline ::int32_t ImageResponse::type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ImageResponse.type)
  return _internal_type();
}
inline void ImageResponse::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ImageResponse.type)
}
inline ::int32_t ImageResponse::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void ImageResponse::_internal_set_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// int32 width = 3;
inline void ImageResponse::clear_width() {
  _impl_.width_ = 0;
}
inline ::int32_t ImageResponse::width() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ImageResponse.width)
  return _internal_width();
}
inline void ImageResponse::set_width(::int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ImageResponse.width)
}
inline ::int32_t ImageResponse::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void ImageResponse::_internal_set_width(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// int32 height = 4;
inline void ImageResponse::clear_height() {
  _impl_.height_ = 0;
}
inline ::int32_t ImageResponse::height() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ImageResponse.height)
  return _internal_height();
}
inline void ImageResponse::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ImageResponse.height)
}
inline ::int32_t ImageResponse::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void ImageResponse::_internal_set_height(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// bytes color = 5;
inline void ImageResponse::clear_color() {
  _impl_.color_.ClearToEmpty();
}
inline const std::string& ImageResponse::color() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ImageResponse.color)
  return _internal_color();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageResponse::set_color(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.color_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ImageResponse.color)
}
inline std::string* ImageResponse::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.ImageResponse.color)
  return _s;
}
inline const std::string& ImageResponse::_internal_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.color_.Get();
}
inline void ImageResponse::_internal_set_color(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.color_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageResponse::_internal_mutable_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.color_.Mutable( GetArenaForAllocation());
}
inline std::string* ImageResponse::release_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.ImageResponse.color)
  return _impl_.color_.Release();
}
inline void ImageResponse::set_allocated_color(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.color_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.color_.IsDefault()) {
          _impl_.color_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.ImageResponse.color)
}

// bytes depth = 6;
inline void ImageResponse::clear_depth() {
  _impl_.depth_.ClearToEmpty();
}
inline const std::string& ImageResponse::depth() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ImageResponse.depth)
  return _internal_depth();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageResponse::set_depth(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.depth_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ImageResponse.depth)
}
inline std::string* ImageResponse::mutable_depth() {
  std::string* _s = _internal_mutable_depth();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.ImageResponse.depth)
  return _s;
}
inline const std::string& ImageResponse::_internal_depth() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.depth_.Get();
}
inline void ImageResponse::_internal_set_depth(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.depth_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageResponse::_internal_mutable_depth() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.depth_.Mutable( GetArenaForAllocation());
}
inline std::string* ImageResponse::release_depth() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.ImageResponse.depth)
  return _impl_.depth_.Release();
}
inline void ImageResponse::set_allocated_depth(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.depth_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.depth_.IsDefault()) {
          _impl_.depth_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.ImageResponse.depth)
}

// float depth_scale = 7;
inline void ImageResponse::clear_depth_scale() {
  _impl_.depth_scale_ = 0;
}
inline float ImageResponse::depth_scale() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ImageResponse.depth_scale)
  return _internal_depth_scale();
}
inline void ImageResponse::set_depth_scale(float value) {
  _internal_set_depth_scale(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ImageResponse.depth_scale)
}
inline float ImageResponse::_internal_depth_scale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.depth_scale_;
}
inline void ImageResponse::_internal_set_depth_scale(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.depth_scale_ = value;
}

// bool error_state = 8;
inline void ImageResponse::clear_error_state() {
  _impl_.error_state_ = false;
}
inline bool ImageResponse::error_state() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ImageResponse.error_state)
  return _internal_error_state();
}
inline void ImageResponse::set_error_state(bool value) {
  _internal_set_error_state(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ImageResponse.error_state)
}
inline bool ImageResponse::_internal_error_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_state_;
}
inline void ImageResponse::_internal_set_error_state(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_state_ = value;
}

// -------------------------------------------------------------------

// Request

// int32 id = 1;
inline void Request::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t Request::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.Request.id)
  return _internal_id();
}
inline void Request::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.Request.id)
}
inline ::int32_t Request::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Request::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// ClassList

// int32 id = 1;
inline void ClassList::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t ClassList::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ClassList.id)
  return _internal_id();
}
inline void ClassList::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ClassList.id)
}
inline ::int32_t ClassList::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void ClassList::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// repeated string class_names = 2;
inline int ClassList::_internal_class_names_size() const {
  return _internal_class_names().size();
}
inline int ClassList::class_names_size() const {
  return _internal_class_names_size();
}
inline void ClassList::clear_class_names() {
  _internal_mutable_class_names()->Clear();
}
inline std::string* ClassList::add_class_names() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_class_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
  return _s;
}
inline const std::string& ClassList::class_names(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
  return _internal_class_names().Get(index);
}
inline std::string* ClassList::mutable_class_names(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
  return _internal_mutable_class_names()->Mutable(index);
}
inline void ClassList::set_class_names(int index, const std::string& value) {
  _internal_mutable_class_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
}
inline void ClassList::set_class_names(int index, std::string&& value) {
  _internal_mutable_class_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
}
inline void ClassList::set_class_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_class_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
}
inline void ClassList::set_class_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_class_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
}
inline void ClassList::set_class_names(int index, absl::string_view value) {
  _internal_mutable_class_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
}
inline void ClassList::add_class_names(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
}
inline void ClassList::add_class_names(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
}
inline void ClassList::add_class_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
}
inline void ClassList::add_class_names(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
}
inline void ClassList::add_class_names(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_class_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ClassList::class_names() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
  return _internal_class_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* ClassList::mutable_class_names() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.EyeTask.ClassList.class_names)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_class_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ClassList::_internal_class_names() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ClassList::_internal_mutable_class_names() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.class_names_;
}

// bool error_state = 8;
inline void ClassList::clear_error_state() {
  _impl_.error_state_ = false;
}
inline bool ClassList::error_state() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.ClassList.error_state)
  return _internal_error_state();
}
inline void ClassList::set_error_state(bool value) {
  _internal_set_error_state(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.ClassList.error_state)
}
inline bool ClassList::_internal_error_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_state_;
}
inline void ClassList::_internal_set_error_state(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_state_ = value;
}

// -------------------------------------------------------------------

// DetectRequest

// int32 id = 1;
inline void DetectRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t DetectRequest::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.DetectRequest.id)
  return _internal_id();
}
inline void DetectRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.DetectRequest.id)
}
inline ::int32_t DetectRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void DetectRequest::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int32 cls = 2;
inline void DetectRequest::clear_cls() {
  _impl_.cls_ = 0;
}
inline ::int32_t DetectRequest::cls() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.DetectRequest.cls)
  return _internal_cls();
}
inline void DetectRequest::set_cls(::int32_t value) {
  _internal_set_cls(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.DetectRequest.cls)
}
inline ::int32_t DetectRequest::_internal_cls() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cls_;
}
inline void DetectRequest::_internal_set_cls(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cls_ = value;
}

// repeated float pose_cmd = 3;
inline int DetectRequest::_internal_pose_cmd_size() const {
  return _internal_pose_cmd().size();
}
inline int DetectRequest::pose_cmd_size() const {
  return _internal_pose_cmd_size();
}
inline void DetectRequest::clear_pose_cmd() {
  _internal_mutable_pose_cmd()->Clear();
}
inline float DetectRequest::pose_cmd(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.DetectRequest.pose_cmd)
  return _internal_pose_cmd().Get(index);
}
inline void DetectRequest::set_pose_cmd(int index, float value) {
  _internal_mutable_pose_cmd()->Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.DetectRequest.pose_cmd)
}
inline void DetectRequest::add_pose_cmd(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pose_cmd()->Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.EyeTask.DetectRequest.pose_cmd)
}
inline const ::google::protobuf::RepeatedField<float>& DetectRequest::pose_cmd() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.EyeTask.DetectRequest.pose_cmd)
  return _internal_pose_cmd();
}
inline ::google::protobuf::RepeatedField<float>* DetectRequest::mutable_pose_cmd() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.EyeTask.DetectRequest.pose_cmd)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pose_cmd();
}

inline const ::google::protobuf::RepeatedField<float>& DetectRequest::_internal_pose_cmd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pose_cmd_;
}
inline ::google::protobuf::RepeatedField<float>* DetectRequest::_internal_mutable_pose_cmd() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pose_cmd_;
}

// string robot_ip = 4;
inline void DetectRequest::clear_robot_ip() {
  _impl_.robot_ip_.ClearToEmpty();
}
inline const std::string& DetectRequest::robot_ip() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.DetectRequest.robot_ip)
  return _internal_robot_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DetectRequest::set_robot_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.robot_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.DetectRequest.robot_ip)
}
inline std::string* DetectRequest::mutable_robot_ip() {
  std::string* _s = _internal_mutable_robot_ip();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.DetectRequest.robot_ip)
  return _s;
}
inline const std::string& DetectRequest::_internal_robot_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.robot_ip_.Get();
}
inline void DetectRequest::_internal_set_robot_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.robot_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* DetectRequest::_internal_mutable_robot_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.robot_ip_.Mutable( GetArenaForAllocation());
}
inline std::string* DetectRequest::release_robot_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.DetectRequest.robot_ip)
  return _impl_.robot_ip_.Release();
}
inline void DetectRequest::set_allocated_robot_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.robot_ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.robot_ip_.IsDefault()) {
          _impl_.robot_ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.DetectRequest.robot_ip)
}

// -------------------------------------------------------------------

// RetrieveRequest

// int32 id = 1;
inline void RetrieveRequest::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t RetrieveRequest::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.RetrieveRequest.id)
  return _internal_id();
}
inline void RetrieveRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.RetrieveRequest.id)
}
inline ::int32_t RetrieveRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void RetrieveRequest::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int32 cls = 2;
inline void RetrieveRequest::clear_cls() {
  _impl_.cls_ = 0;
}
inline ::int32_t RetrieveRequest::cls() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.RetrieveRequest.cls)
  return _internal_cls();
}
inline void RetrieveRequest::set_cls(::int32_t value) {
  _internal_set_cls(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.RetrieveRequest.cls)
}
inline ::int32_t RetrieveRequest::_internal_cls() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cls_;
}
inline void RetrieveRequest::_internal_set_cls(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cls_ = value;
}

// -------------------------------------------------------------------

// DetectResponse

// int32 id = 1;
inline void DetectResponse::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t DetectResponse::id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.DetectResponse.id)
  return _internal_id();
}
inline void DetectResponse::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.DetectResponse.id)
}
inline ::int32_t DetectResponse::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void DetectResponse::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// bool detected = 2;
inline void DetectResponse::clear_detected() {
  _impl_.detected_ = false;
}
inline bool DetectResponse::detected() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.DetectResponse.detected)
  return _internal_detected();
}
inline void DetectResponse::set_detected(bool value) {
  _internal_set_detected(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.DetectResponse.detected)
}
inline bool DetectResponse::_internal_detected() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.detected_;
}
inline void DetectResponse::_internal_set_detected(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.detected_ = value;
}

// bool passed = 3;
inline void DetectResponse::clear_passed() {
  _impl_.passed_ = false;
}
inline bool DetectResponse::passed() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.DetectResponse.passed)
  return _internal_passed();
}
inline void DetectResponse::set_passed(bool value) {
  _internal_set_passed(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.DetectResponse.passed)
}
inline bool DetectResponse::_internal_passed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.passed_;
}
inline void DetectResponse::_internal_set_passed(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.passed_ = value;
}

// int32 cls = 4;
inline void DetectResponse::clear_cls() {
  _impl_.cls_ = 0;
}
inline ::int32_t DetectResponse::cls() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.DetectResponse.cls)
  return _internal_cls();
}
inline void DetectResponse::set_cls(::int32_t value) {
  _internal_set_cls(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.DetectResponse.cls)
}
inline ::int32_t DetectResponse::_internal_cls() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cls_;
}
inline void DetectResponse::_internal_set_cls(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cls_ = value;
}

// repeated float tar_ee_pose = 5;
inline int DetectResponse::_internal_tar_ee_pose_size() const {
  return _internal_tar_ee_pose().size();
}
inline int DetectResponse::tar_ee_pose_size() const {
  return _internal_tar_ee_pose_size();
}
inline void DetectResponse::clear_tar_ee_pose() {
  _internal_mutable_tar_ee_pose()->Clear();
}
inline float DetectResponse::tar_ee_pose(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_ee_pose)
  return _internal_tar_ee_pose().Get(index);
}
inline void DetectResponse::set_tar_ee_pose(int index, float value) {
  _internal_mutable_tar_ee_pose()->Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_ee_pose)
}
inline void DetectResponse::add_tar_ee_pose(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tar_ee_pose()->Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_ee_pose)
}
inline const ::google::protobuf::RepeatedField<float>& DetectResponse::tar_ee_pose() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_ee_pose)
  return _internal_tar_ee_pose();
}
inline ::google::protobuf::RepeatedField<float>* DetectResponse::mutable_tar_ee_pose() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_ee_pose)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tar_ee_pose();
}

inline const ::google::protobuf::RepeatedField<float>& DetectResponse::_internal_tar_ee_pose() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tar_ee_pose_;
}
inline ::google::protobuf::RepeatedField<float>* DetectResponse::_internal_mutable_tar_ee_pose() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tar_ee_pose_;
}

// repeated float tar_tool_pose = 6;
inline int DetectResponse::_internal_tar_tool_pose_size() const {
  return _internal_tar_tool_pose().size();
}
inline int DetectResponse::tar_tool_pose_size() const {
  return _internal_tar_tool_pose_size();
}
inline void DetectResponse::clear_tar_tool_pose() {
  _internal_mutable_tar_tool_pose()->Clear();
}
inline float DetectResponse::tar_tool_pose(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_tool_pose)
  return _internal_tar_tool_pose().Get(index);
}
inline void DetectResponse::set_tar_tool_pose(int index, float value) {
  _internal_mutable_tar_tool_pose()->Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_tool_pose)
}
inline void DetectResponse::add_tar_tool_pose(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tar_tool_pose()->Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_tool_pose)
}
inline const ::google::protobuf::RepeatedField<float>& DetectResponse::tar_tool_pose() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_tool_pose)
  return _internal_tar_tool_pose();
}
inline ::google::protobuf::RepeatedField<float>* DetectResponse::mutable_tar_tool_pose() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_tool_pose)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tar_tool_pose();
}

inline const ::google::protobuf::RepeatedField<float>& DetectResponse::_internal_tar_tool_pose() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tar_tool_pose_;
}
inline ::google::protobuf::RepeatedField<float>* DetectResponse::_internal_mutable_tar_tool_pose() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tar_tool_pose_;
}

// repeated float tar_obj_pose = 7;
inline int DetectResponse::_internal_tar_obj_pose_size() const {
  return _internal_tar_obj_pose().size();
}
inline int DetectResponse::tar_obj_pose_size() const {
  return _internal_tar_obj_pose_size();
}
inline void DetectResponse::clear_tar_obj_pose() {
  _internal_mutable_tar_obj_pose()->Clear();
}
inline float DetectResponse::tar_obj_pose(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_obj_pose)
  return _internal_tar_obj_pose().Get(index);
}
inline void DetectResponse::set_tar_obj_pose(int index, float value) {
  _internal_mutable_tar_obj_pose()->Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_obj_pose)
}
inline void DetectResponse::add_tar_obj_pose(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tar_obj_pose()->Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_obj_pose)
}
inline const ::google::protobuf::RepeatedField<float>& DetectResponse::tar_obj_pose() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_obj_pose)
  return _internal_tar_obj_pose();
}
inline ::google::protobuf::RepeatedField<float>* DetectResponse::mutable_tar_obj_pose() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.EyeTask.DetectResponse.tar_obj_pose)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tar_obj_pose();
}

inline const ::google::protobuf::RepeatedField<float>& DetectResponse::_internal_tar_obj_pose() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tar_obj_pose_;
}
inline ::google::protobuf::RepeatedField<float>* DetectResponse::_internal_mutable_tar_obj_pose() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tar_obj_pose_;
}

// int32 tool_idx = 8;
inline void DetectResponse::clear_tool_idx() {
  _impl_.tool_idx_ = 0;
}
inline ::int32_t DetectResponse::tool_idx() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.DetectResponse.tool_idx)
  return _internal_tool_idx();
}
inline void DetectResponse::set_tool_idx(::int32_t value) {
  _internal_set_tool_idx(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.DetectResponse.tool_idx)
}
inline ::int32_t DetectResponse::_internal_tool_idx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tool_idx_;
}
inline void DetectResponse::_internal_set_tool_idx(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tool_idx_ = value;
}

// bool error_state = 9;
inline void DetectResponse::clear_error_state() {
  _impl_.error_state_ = false;
}
inline bool DetectResponse::error_state() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.DetectResponse.error_state)
  return _internal_error_state();
}
inline void DetectResponse::set_error_state(bool value) {
  _internal_set_error_state(value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.DetectResponse.error_state)
}
inline bool DetectResponse::_internal_error_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_state_;
}
inline void DetectResponse::_internal_set_error_state(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_state_ = value;
}

// string error_module = 10;
inline void DetectResponse::clear_error_module() {
  _impl_.error_module_.ClearToEmpty();
}
inline const std::string& DetectResponse::error_module() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.EyeTask.DetectResponse.error_module)
  return _internal_error_module();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DetectResponse::set_error_module(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_module_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.EyeTask.DetectResponse.error_module)
}
inline std::string* DetectResponse::mutable_error_module() {
  std::string* _s = _internal_mutable_error_module();
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.EyeTask.DetectResponse.error_module)
  return _s;
}
inline const std::string& DetectResponse::_internal_error_module() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_module_.Get();
}
inline void DetectResponse::_internal_set_error_module(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_module_.Set(value, GetArenaForAllocation());
}
inline std::string* DetectResponse::_internal_mutable_error_module() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_module_.Mutable( GetArenaForAllocation());
}
inline std::string* DetectResponse::release_error_module() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.EyeTask.DetectResponse.error_module)
  return _impl_.error_module_.Release();
}
inline void DetectResponse::set_allocated_error_module(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_module_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_module_.IsDefault()) {
          _impl_.error_module_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.EyeTask.DetectResponse.error_module)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace EyeTask
}  // namespace Protobuf
}  // namespace IndyFramework


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_indyeye_2eproto_2epb_2eh
