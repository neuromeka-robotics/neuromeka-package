// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: eyetask.proto
#ifndef GRPC_eyetask_2eproto__INCLUDED
#define GRPC_eyetask_2eproto__INCLUDED

#include "eyetask.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace EyeTask {

class EyeTask final {
 public:
  static constexpr char const* service_full_name() {
    return "EyeTask.EyeTask";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetImage(::grpc::ClientContext* context, const ::EyeTask::ImageRequest& request, ::EyeTask::ImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::ImageResponse>> AsyncGetImage(::grpc::ClientContext* context, const ::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::ImageResponse>>(AsyncGetImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::ImageResponse>> PrepareAsyncGetImage(::grpc::ClientContext* context, const ::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::ImageResponse>>(PrepareAsyncGetImageRaw(context, request, cq));
    }
    virtual ::grpc::Status GetClassList(::grpc::ClientContext* context, const ::EyeTask::Request& request, ::EyeTask::ClassList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::ClassList>> AsyncGetClassList(::grpc::ClientContext* context, const ::EyeTask::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::ClassList>>(AsyncGetClassListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::ClassList>> PrepareAsyncGetClassList(::grpc::ClientContext* context, const ::EyeTask::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::ClassList>>(PrepareAsyncGetClassListRaw(context, request, cq));
    }
    virtual ::grpc::Status Detect(::grpc::ClientContext* context, const ::EyeTask::DetectRequest& request, ::EyeTask::DetectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::DetectResponse>> AsyncDetect(::grpc::ClientContext* context, const ::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::DetectResponse>>(AsyncDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::DetectResponse>> PrepareAsyncDetect(::grpc::ClientContext* context, const ::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::DetectResponse>>(PrepareAsyncDetectRaw(context, request, cq));
    }
    virtual ::grpc::Status Retrieve(::grpc::ClientContext* context, const ::EyeTask::RetrieveRequest& request, ::EyeTask::DetectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::DetectResponse>> AsyncRetrieve(::grpc::ClientContext* context, const ::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::DetectResponse>>(AsyncRetrieveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::DetectResponse>> PrepareAsyncRetrieve(::grpc::ClientContext* context, const ::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::DetectResponse>>(PrepareAsyncRetrieveRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetImage(::grpc::ClientContext* context, const ::EyeTask::ImageRequest* request, ::EyeTask::ImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::ImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImage(::grpc::ClientContext* context, const ::EyeTask::ImageRequest* request, ::EyeTask::ImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::ImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetClassList(::grpc::ClientContext* context, const ::EyeTask::Request* request, ::EyeTask::ClassList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetClassList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::ClassList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetClassList(::grpc::ClientContext* context, const ::EyeTask::Request* request, ::EyeTask::ClassList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetClassList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::ClassList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Detect(::grpc::ClientContext* context, const ::EyeTask::DetectRequest* request, ::EyeTask::DetectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::DetectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Detect(::grpc::ClientContext* context, const ::EyeTask::DetectRequest* request, ::EyeTask::DetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::DetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Retrieve(::grpc::ClientContext* context, const ::EyeTask::RetrieveRequest* request, ::EyeTask::DetectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Retrieve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::DetectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Retrieve(::grpc::ClientContext* context, const ::EyeTask::RetrieveRequest* request, ::EyeTask::DetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Retrieve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::DetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::ImageResponse>* AsyncGetImageRaw(::grpc::ClientContext* context, const ::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::ImageResponse>* PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::ClassList>* AsyncGetClassListRaw(::grpc::ClientContext* context, const ::EyeTask::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::ClassList>* PrepareAsyncGetClassListRaw(::grpc::ClientContext* context, const ::EyeTask::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::DetectResponse>* AsyncDetectRaw(::grpc::ClientContext* context, const ::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::DetectResponse>* PrepareAsyncDetectRaw(::grpc::ClientContext* context, const ::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::DetectResponse>* AsyncRetrieveRaw(::grpc::ClientContext* context, const ::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EyeTask::DetectResponse>* PrepareAsyncRetrieveRaw(::grpc::ClientContext* context, const ::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetImage(::grpc::ClientContext* context, const ::EyeTask::ImageRequest& request, ::EyeTask::ImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::ImageResponse>> AsyncGetImage(::grpc::ClientContext* context, const ::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::ImageResponse>>(AsyncGetImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::ImageResponse>> PrepareAsyncGetImage(::grpc::ClientContext* context, const ::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::ImageResponse>>(PrepareAsyncGetImageRaw(context, request, cq));
    }
    ::grpc::Status GetClassList(::grpc::ClientContext* context, const ::EyeTask::Request& request, ::EyeTask::ClassList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::ClassList>> AsyncGetClassList(::grpc::ClientContext* context, const ::EyeTask::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::ClassList>>(AsyncGetClassListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::ClassList>> PrepareAsyncGetClassList(::grpc::ClientContext* context, const ::EyeTask::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::ClassList>>(PrepareAsyncGetClassListRaw(context, request, cq));
    }
    ::grpc::Status Detect(::grpc::ClientContext* context, const ::EyeTask::DetectRequest& request, ::EyeTask::DetectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::DetectResponse>> AsyncDetect(::grpc::ClientContext* context, const ::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::DetectResponse>>(AsyncDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::DetectResponse>> PrepareAsyncDetect(::grpc::ClientContext* context, const ::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::DetectResponse>>(PrepareAsyncDetectRaw(context, request, cq));
    }
    ::grpc::Status Retrieve(::grpc::ClientContext* context, const ::EyeTask::RetrieveRequest& request, ::EyeTask::DetectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::DetectResponse>> AsyncRetrieve(::grpc::ClientContext* context, const ::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::DetectResponse>>(AsyncRetrieveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::DetectResponse>> PrepareAsyncRetrieve(::grpc::ClientContext* context, const ::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EyeTask::DetectResponse>>(PrepareAsyncRetrieveRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetImage(::grpc::ClientContext* context, const ::EyeTask::ImageRequest* request, ::EyeTask::ImageResponse* response, std::function<void(::grpc::Status)>) override;
      void GetImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::ImageResponse* response, std::function<void(::grpc::Status)>) override;
      void GetImage(::grpc::ClientContext* context, const ::EyeTask::ImageRequest* request, ::EyeTask::ImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::ImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetClassList(::grpc::ClientContext* context, const ::EyeTask::Request* request, ::EyeTask::ClassList* response, std::function<void(::grpc::Status)>) override;
      void GetClassList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::ClassList* response, std::function<void(::grpc::Status)>) override;
      void GetClassList(::grpc::ClientContext* context, const ::EyeTask::Request* request, ::EyeTask::ClassList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetClassList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::ClassList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Detect(::grpc::ClientContext* context, const ::EyeTask::DetectRequest* request, ::EyeTask::DetectResponse* response, std::function<void(::grpc::Status)>) override;
      void Detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::DetectResponse* response, std::function<void(::grpc::Status)>) override;
      void Detect(::grpc::ClientContext* context, const ::EyeTask::DetectRequest* request, ::EyeTask::DetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Detect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::DetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Retrieve(::grpc::ClientContext* context, const ::EyeTask::RetrieveRequest* request, ::EyeTask::DetectResponse* response, std::function<void(::grpc::Status)>) override;
      void Retrieve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::DetectResponse* response, std::function<void(::grpc::Status)>) override;
      void Retrieve(::grpc::ClientContext* context, const ::EyeTask::RetrieveRequest* request, ::EyeTask::DetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Retrieve(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::EyeTask::DetectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::EyeTask::ImageResponse>* AsyncGetImageRaw(::grpc::ClientContext* context, const ::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EyeTask::ImageResponse>* PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EyeTask::ClassList>* AsyncGetClassListRaw(::grpc::ClientContext* context, const ::EyeTask::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EyeTask::ClassList>* PrepareAsyncGetClassListRaw(::grpc::ClientContext* context, const ::EyeTask::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EyeTask::DetectResponse>* AsyncDetectRaw(::grpc::ClientContext* context, const ::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EyeTask::DetectResponse>* PrepareAsyncDetectRaw(::grpc::ClientContext* context, const ::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EyeTask::DetectResponse>* AsyncRetrieveRaw(::grpc::ClientContext* context, const ::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EyeTask::DetectResponse>* PrepareAsyncRetrieveRaw(::grpc::ClientContext* context, const ::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetImage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetClassList_;
    const ::grpc::internal::RpcMethod rpcmethod_Detect_;
    const ::grpc::internal::RpcMethod rpcmethod_Retrieve_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetImage(::grpc::ServerContext* context, const ::EyeTask::ImageRequest* request, ::EyeTask::ImageResponse* response);
    virtual ::grpc::Status GetClassList(::grpc::ServerContext* context, const ::EyeTask::Request* request, ::EyeTask::ClassList* response);
    virtual ::grpc::Status Detect(::grpc::ServerContext* context, const ::EyeTask::DetectRequest* request, ::EyeTask::DetectResponse* response);
    virtual ::grpc::Status Retrieve(::grpc::ServerContext* context, const ::EyeTask::RetrieveRequest* request, ::EyeTask::DetectResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetImage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::EyeTask::ImageRequest* /*request*/, ::EyeTask::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImage(::grpc::ServerContext* context, ::EyeTask::ImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::EyeTask::ImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetClassList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetClassList() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetClassList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClassList(::grpc::ServerContext* /*context*/, const ::EyeTask::Request* /*request*/, ::EyeTask::ClassList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClassList(::grpc::ServerContext* context, ::EyeTask::Request* request, ::grpc::ServerAsyncResponseWriter< ::EyeTask::ClassList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Detect() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::EyeTask::DetectRequest* /*request*/, ::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetect(::grpc::ServerContext* context, ::EyeTask::DetectRequest* request, ::grpc::ServerAsyncResponseWriter< ::EyeTask::DetectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Retrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Retrieve() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Retrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Retrieve(::grpc::ServerContext* /*context*/, const ::EyeTask::RetrieveRequest* /*request*/, ::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRetrieve(::grpc::ServerContext* context, ::EyeTask::RetrieveRequest* request, ::grpc::ServerAsyncResponseWriter< ::EyeTask::DetectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetImage<WithAsyncMethod_GetClassList<WithAsyncMethod_Detect<WithAsyncMethod_Retrieve<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetImage() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::EyeTask::ImageRequest, ::EyeTask::ImageResponse>(
          [this](::grpc::ServerContext* context,
                 const ::EyeTask::ImageRequest* request,
                 ::EyeTask::ImageResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetImage(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetImage(
        ::grpc::experimental::MessageAllocator< ::EyeTask::ImageRequest, ::EyeTask::ImageResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::EyeTask::ImageRequest, ::EyeTask::ImageResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::EyeTask::ImageRequest* /*request*/, ::EyeTask::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetImage(::grpc::ServerContext* /*context*/, const ::EyeTask::ImageRequest* /*request*/, ::EyeTask::ImageResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetClassList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetClassList() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::EyeTask::Request, ::EyeTask::ClassList>(
          [this](::grpc::ServerContext* context,
                 const ::EyeTask::Request* request,
                 ::EyeTask::ClassList* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetClassList(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetClassList(
        ::grpc::experimental::MessageAllocator< ::EyeTask::Request, ::EyeTask::ClassList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::EyeTask::Request, ::EyeTask::ClassList>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetClassList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClassList(::grpc::ServerContext* /*context*/, const ::EyeTask::Request* /*request*/, ::EyeTask::ClassList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetClassList(::grpc::ServerContext* /*context*/, const ::EyeTask::Request* /*request*/, ::EyeTask::ClassList* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Detect() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::EyeTask::DetectRequest, ::EyeTask::DetectResponse>(
          [this](::grpc::ServerContext* context,
                 const ::EyeTask::DetectRequest* request,
                 ::EyeTask::DetectResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Detect(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Detect(
        ::grpc::experimental::MessageAllocator< ::EyeTask::DetectRequest, ::EyeTask::DetectResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::EyeTask::DetectRequest, ::EyeTask::DetectResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::EyeTask::DetectRequest* /*request*/, ::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Detect(::grpc::ServerContext* /*context*/, const ::EyeTask::DetectRequest* /*request*/, ::EyeTask::DetectResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Retrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Retrieve() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::EyeTask::RetrieveRequest, ::EyeTask::DetectResponse>(
          [this](::grpc::ServerContext* context,
                 const ::EyeTask::RetrieveRequest* request,
                 ::EyeTask::DetectResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Retrieve(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Retrieve(
        ::grpc::experimental::MessageAllocator< ::EyeTask::RetrieveRequest, ::EyeTask::DetectResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::EyeTask::RetrieveRequest, ::EyeTask::DetectResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Retrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Retrieve(::grpc::ServerContext* /*context*/, const ::EyeTask::RetrieveRequest* /*request*/, ::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Retrieve(::grpc::ServerContext* /*context*/, const ::EyeTask::RetrieveRequest* /*request*/, ::EyeTask::DetectResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetImage<ExperimentalWithCallbackMethod_GetClassList<ExperimentalWithCallbackMethod_Detect<ExperimentalWithCallbackMethod_Retrieve<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetImage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::EyeTask::ImageRequest* /*request*/, ::EyeTask::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetClassList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetClassList() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetClassList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClassList(::grpc::ServerContext* /*context*/, const ::EyeTask::Request* /*request*/, ::EyeTask::ClassList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Detect() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::EyeTask::DetectRequest* /*request*/, ::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Retrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Retrieve() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Retrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Retrieve(::grpc::ServerContext* /*context*/, const ::EyeTask::RetrieveRequest* /*request*/, ::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetImage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::EyeTask::ImageRequest* /*request*/, ::EyeTask::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetClassList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetClassList() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetClassList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClassList(::grpc::ServerContext* /*context*/, const ::EyeTask::Request* /*request*/, ::EyeTask::ClassList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClassList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Detect() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::EyeTask::DetectRequest* /*request*/, ::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Retrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Retrieve() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Retrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Retrieve(::grpc::ServerContext* /*context*/, const ::EyeTask::RetrieveRequest* /*request*/, ::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRetrieve(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetImage() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetImage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::EyeTask::ImageRequest* /*request*/, ::EyeTask::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetImage(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetClassList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetClassList() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetClassList(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetClassList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClassList(::grpc::ServerContext* /*context*/, const ::EyeTask::Request* /*request*/, ::EyeTask::ClassList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetClassList(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Detect() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Detect(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::EyeTask::DetectRequest* /*request*/, ::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Detect(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Retrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Retrieve() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Retrieve(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Retrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Retrieve(::grpc::ServerContext* /*context*/, const ::EyeTask::RetrieveRequest* /*request*/, ::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Retrieve(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetImage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::EyeTask::ImageRequest, ::EyeTask::ImageResponse>(std::bind(&WithStreamedUnaryMethod_GetImage<BaseClass>::StreamedGetImage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::EyeTask::ImageRequest* /*request*/, ::EyeTask::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EyeTask::ImageRequest,::EyeTask::ImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetClassList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetClassList() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::EyeTask::Request, ::EyeTask::ClassList>(std::bind(&WithStreamedUnaryMethod_GetClassList<BaseClass>::StreamedGetClassList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetClassList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetClassList(::grpc::ServerContext* /*context*/, const ::EyeTask::Request* /*request*/, ::EyeTask::ClassList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetClassList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EyeTask::Request,::EyeTask::ClassList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Detect() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::EyeTask::DetectRequest, ::EyeTask::DetectResponse>(std::bind(&WithStreamedUnaryMethod_Detect<BaseClass>::StreamedDetect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::EyeTask::DetectRequest* /*request*/, ::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDetect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EyeTask::DetectRequest,::EyeTask::DetectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Retrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Retrieve() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::EyeTask::RetrieveRequest, ::EyeTask::DetectResponse>(std::bind(&WithStreamedUnaryMethod_Retrieve<BaseClass>::StreamedRetrieve, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Retrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Retrieve(::grpc::ServerContext* /*context*/, const ::EyeTask::RetrieveRequest* /*request*/, ::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRetrieve(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EyeTask::RetrieveRequest,::EyeTask::DetectResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetImage<WithStreamedUnaryMethod_GetClassList<WithStreamedUnaryMethod_Detect<WithStreamedUnaryMethod_Retrieve<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetImage<WithStreamedUnaryMethod_GetClassList<WithStreamedUnaryMethod_Detect<WithStreamedUnaryMethod_Retrieve<Service > > > > StreamedService;
};

}  // namespace EyeTask


#endif  // GRPC_eyetask_2eproto__INCLUDED
