// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_msgs.proto

#include "device_msgs.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Nrmk {
namespace IndyFramework {
        template <typename>
PROTOBUF_CONSTEXPR Motor::Motor(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.index_)*/ 0u,
      /*decltype(_impl_.enable_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MotorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotorDefaultTypeInternal() {}
  union {
    Motor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotorDefaultTypeInternal _Motor_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Servo::Servo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.index_)*/ 0u,
      /*decltype(_impl_.enable_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ServoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServoDefaultTypeInternal() {}
  union {
    Servo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServoDefaultTypeInternal _Servo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR DigitalSignal::DigitalSignal(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.address_)*/ 0u,
      /*decltype(_impl_.state_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct DigitalSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DigitalSignalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DigitalSignalDefaultTypeInternal() {}
  union {
    DigitalSignal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DigitalSignalDefaultTypeInternal _DigitalSignal_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR EndtoolSignal::EndtoolSignal(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.states_)*/ {},
      /*decltype(_impl_._states_cached_byte_size_)*/ {0},
      /*decltype(_impl_.port_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct EndtoolSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndtoolSignalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndtoolSignalDefaultTypeInternal() {}
  union {
    EndtoolSignal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndtoolSignalDefaultTypeInternal _EndtoolSignal_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AnalogSignal::AnalogSignal(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.address_)*/ 0u,
      /*decltype(_impl_.voltage_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AnalogSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnalogSignalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnalogSignalDefaultTypeInternal() {}
  union {
    AnalogSignal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnalogSignalDefaultTypeInternal _AnalogSignal_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MotorList::MotorList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.motors_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct MotorListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotorListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotorListDefaultTypeInternal() {}
  union {
    MotorList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotorListDefaultTypeInternal _MotorList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR DigitalList::DigitalList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.signals_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct DigitalListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DigitalListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DigitalListDefaultTypeInternal() {}
  union {
    DigitalList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DigitalListDefaultTypeInternal _DigitalList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR EndtoolSignalList::EndtoolSignalList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.signals_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct EndtoolSignalListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndtoolSignalListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndtoolSignalListDefaultTypeInternal() {}
  union {
    EndtoolSignalList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndtoolSignalListDefaultTypeInternal _EndtoolSignalList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AnalogList::AnalogList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.signals_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AnalogListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnalogListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnalogListDefaultTypeInternal() {}
  union {
    AnalogList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnalogListDefaultTypeInternal _AnalogList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR DeviceInfo::DeviceInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.core_board_fw_vers_)*/ {},
      /*decltype(_impl_.robot_serial_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.io_board_fw_ver_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.endtool_board_fw_ver_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.controller_ver_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.controller_detail_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.controller_date_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.num_joints_)*/ 0u,
      /*decltype(_impl_.payload_)*/ 0,
    } {}
struct DeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceInfoDefaultTypeInternal() {}
  union {
    DeviceInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BrakeControlStyle::BrakeControlStyle(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.style_)*/ 0,
    } {}
struct BrakeControlStyleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrakeControlStyleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrakeControlStyleDefaultTypeInternal() {}
  union {
    BrakeControlStyle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrakeControlStyleDefaultTypeInternal _BrakeControlStyle_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GetEL5001Data::GetEL5001Data(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.status_)*/ 0,
      /*decltype(_impl_.value_)*/ 0,
      /*decltype(_impl_.delta_)*/ 0,
      /*decltype(_impl_.average_)*/ 0,
    } {}
struct GetEL5001DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEL5001DataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEL5001DataDefaultTypeInternal() {}
  union {
    GetEL5001Data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEL5001DataDefaultTypeInternal _GetEL5001Data_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GetEL5101Data::GetEL5101Data(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.status_)*/ 0,
      /*decltype(_impl_.value_)*/ 0,
      /*decltype(_impl_.latch_)*/ 0,
      /*decltype(_impl_.delta_)*/ 0,
      /*decltype(_impl_.average_)*/ 0,
    } {}
struct GetEL5101DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEL5101DataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEL5101DataDefaultTypeInternal() {}
  union {
    GetEL5101Data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEL5101DataDefaultTypeInternal _GetEL5101Data_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FTSensorType::FTSensorType(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.ft_sensor_type_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.response_)*/ nullptr,
    } {}
struct FTSensorTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FTSensorTypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FTSensorTypeDefaultTypeInternal() {}
  union {
    FTSensorType _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FTSensorTypeDefaultTypeInternal _FTSensorType_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR FTSensorData::FTSensorData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.response_)*/ nullptr,
      /*decltype(_impl_.ft_fx_)*/ 0,
      /*decltype(_impl_.ft_fy_)*/ 0,
      /*decltype(_impl_.ft_fz_)*/ 0,
      /*decltype(_impl_.ft_tx_)*/ 0,
      /*decltype(_impl_.ft_ty_)*/ 0,
      /*decltype(_impl_.ft_tz_)*/ 0,
    } {}
struct FTSensorDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FTSensorDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FTSensorDataDefaultTypeInternal() {}
  union {
    FTSensorData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FTSensorDataDefaultTypeInternal _FTSensorData_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
static ::_pb::Metadata file_level_metadata_device_5fmsgs_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_device_5fmsgs_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_device_5fmsgs_2eproto = nullptr;
const ::uint32_t TableStruct_device_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Motor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Motor, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Motor, _impl_.enable_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Servo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Servo, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::Servo, _impl_.enable_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DigitalSignal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DigitalSignal, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DigitalSignal, _impl_.state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::EndtoolSignal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::EndtoolSignal, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::EndtoolSignal, _impl_.states_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AnalogSignal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AnalogSignal, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AnalogSignal, _impl_.voltage_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotorList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotorList, _impl_.motors_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DigitalList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DigitalList, _impl_.signals_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::EndtoolSignalList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::EndtoolSignalList, _impl_.signals_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AnalogList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::AnalogList, _impl_.signals_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.num_joints_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.robot_serial_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.payload_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.io_board_fw_ver_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.core_board_fw_vers_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.endtool_board_fw_ver_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.controller_ver_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.controller_detail_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.controller_date_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::DeviceInfo, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BrakeControlStyle, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BrakeControlStyle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BrakeControlStyle, _impl_.style_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::BrakeControlStyle, _impl_.response_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5001Data, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5001Data, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5001Data, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5001Data, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5001Data, _impl_.delta_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5001Data, _impl_.average_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5001Data, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _impl_.latch_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _impl_.delta_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _impl_.average_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::GetEL5101Data, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorType, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorType, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorType, _impl_.ft_sensor_type_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorType, _impl_.response_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_.ft_fx_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_.ft_fy_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_.ft_fz_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_.ft_tx_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_.ft_ty_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_.ft_tz_),
    PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::FTSensorData, _impl_.response_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Nrmk::IndyFramework::Motor)},
        {10, -1, -1, sizeof(::Nrmk::IndyFramework::Servo)},
        {20, -1, -1, sizeof(::Nrmk::IndyFramework::DigitalSignal)},
        {30, -1, -1, sizeof(::Nrmk::IndyFramework::EndtoolSignal)},
        {40, -1, -1, sizeof(::Nrmk::IndyFramework::AnalogSignal)},
        {50, -1, -1, sizeof(::Nrmk::IndyFramework::MotorList)},
        {59, -1, -1, sizeof(::Nrmk::IndyFramework::DigitalList)},
        {68, -1, -1, sizeof(::Nrmk::IndyFramework::EndtoolSignalList)},
        {77, -1, -1, sizeof(::Nrmk::IndyFramework::AnalogList)},
        {86, 104, -1, sizeof(::Nrmk::IndyFramework::DeviceInfo)},
        {114, 124, -1, sizeof(::Nrmk::IndyFramework::BrakeControlStyle)},
        {126, 139, -1, sizeof(::Nrmk::IndyFramework::GetEL5001Data)},
        {144, 158, -1, sizeof(::Nrmk::IndyFramework::GetEL5101Data)},
        {164, 174, -1, sizeof(::Nrmk::IndyFramework::FTSensorType)},
        {176, 191, -1, sizeof(::Nrmk::IndyFramework::FTSensorData)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::Nrmk::IndyFramework::_Motor_default_instance_._instance,
    &::Nrmk::IndyFramework::_Servo_default_instance_._instance,
    &::Nrmk::IndyFramework::_DigitalSignal_default_instance_._instance,
    &::Nrmk::IndyFramework::_EndtoolSignal_default_instance_._instance,
    &::Nrmk::IndyFramework::_AnalogSignal_default_instance_._instance,
    &::Nrmk::IndyFramework::_MotorList_default_instance_._instance,
    &::Nrmk::IndyFramework::_DigitalList_default_instance_._instance,
    &::Nrmk::IndyFramework::_EndtoolSignalList_default_instance_._instance,
    &::Nrmk::IndyFramework::_AnalogList_default_instance_._instance,
    &::Nrmk::IndyFramework::_DeviceInfo_default_instance_._instance,
    &::Nrmk::IndyFramework::_BrakeControlStyle_default_instance_._instance,
    &::Nrmk::IndyFramework::_GetEL5001Data_default_instance_._instance,
    &::Nrmk::IndyFramework::_GetEL5101Data_default_instance_._instance,
    &::Nrmk::IndyFramework::_FTSensorType_default_instance_._instance,
    &::Nrmk::IndyFramework::_FTSensorData_default_instance_._instance,
};
const char descriptor_table_protodef_device_5fmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021device_msgs.proto\022\022Nrmk.IndyFramework\032"
    "\021common_msgs.proto\"&\n\005Motor\022\r\n\005index\030\001 \001"
    "(\r\022\016\n\006enable\030\002 \001(\010\"&\n\005Servo\022\r\n\005index\030\001 \001"
    "(\r\022\016\n\006enable\030\002 \001(\010\"Q\n\rDigitalSignal\022\017\n\007a"
    "ddress\030\001 \001(\r\022/\n\005state\030\002 \001(\0162 .Nrmk.IndyF"
    "ramework.DigitalState\"O\n\rEndtoolSignal\022\014"
    "\n\004port\030\001 \001(\t\0220\n\006states\030\002 \003(\0162 .Nrmk.Indy"
    "Framework.EndtoolState\"0\n\014AnalogSignal\022\017"
    "\n\007address\030\001 \001(\r\022\017\n\007voltage\030\002 \001(\005\"6\n\tMoto"
    "rList\022)\n\006motors\030\001 \003(\0132\031.Nrmk.IndyFramewo"
    "rk.Motor\"A\n\013DigitalList\0222\n\007signals\030\001 \003(\013"
    "2!.Nrmk.IndyFramework.DigitalSignal\"G\n\021E"
    "ndtoolSignalList\0222\n\007signals\030\001 \003(\0132!.Nrmk"
    ".IndyFramework.EndtoolSignal\"\?\n\nAnalogLi"
    "st\0221\n\007signals\030\001 \003(\0132 .Nrmk.IndyFramework"
    ".AnalogSignal\"\226\002\n\nDeviceInfo\022\022\n\nnum_join"
    "ts\030\001 \001(\r\022\024\n\014robot_serial\030\002 \001(\t\022\017\n\007payloa"
    "d\030\003 \001(\002\022\027\n\017io_board_fw_ver\030\n \001(\t\022\032\n\022core"
    "_board_fw_vers\030\013 \003(\t\022\034\n\024endtool_board_fw"
    "_ver\030\014 \001(\t\022\026\n\016controller_ver\030\024 \001(\t\022\031\n\021co"
    "ntroller_detail\030\025 \001(\t\022\027\n\017controller_date"
    "\030\026 \001(\t\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFram"
    "ework.Response\"\307\001\n\021BrakeControlStyle\022A\n\005"
    "style\030\001 \001(\01622.Nrmk.IndyFramework.BrakeCo"
    "ntrolStyle.ControlStyle\022.\n\010response\030d \001("
    "\0132\034.Nrmk.IndyFramework.Response\"\?\n\014Contr"
    "olStyle\022\017\n\013UNAVAILABLE\020\000\022\016\n\nCONCURRENT\020\001"
    "\022\016\n\nINDIVIDUAL\020\002\"~\n\rGetEL5001Data\022\016\n\006sta"
    "tus\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\022\r\n\005delta\030\003 \001(\005\022"
    "\017\n\007average\030\004 \001(\002\022.\n\010response\030d \001(\0132\034.Nrm"
    "k.IndyFramework.Response\"\215\001\n\rGetEL5101Da"
    "ta\022\016\n\006status\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\022\r\n\005lat"
    "ch\030\003 \001(\005\022\r\n\005delta\030\004 \001(\005\022\017\n\007average\030\005 \001(\002"
    "\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFramework."
    "Response\"V\n\014FTSensorType\022\026\n\016ft_sensor_ty"
    "pe\030\001 \001(\t\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFr"
    "amework.Response\"\230\001\n\014FTSensorData\022\r\n\005ft_"
    "Fx\030\001 \001(\002\022\r\n\005ft_Fy\030\002 \001(\002\022\r\n\005ft_Fz\030\003 \001(\002\022\r"
    "\n\005ft_Tx\030\004 \001(\002\022\r\n\005ft_Ty\030\005 \001(\002\022\r\n\005ft_Tz\030\006 "
    "\001(\002\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFramewo"
    "rk.Response*=\n\014DigitalState\022\r\n\tOFF_STATE"
    "\020\000\022\014\n\010ON_STATE\020\001\022\020\n\014UNUSED_STATE\020\002*b\n\014En"
    "dtoolState\022\n\n\006UNUSED\020\000\022\014\n\010HIGH_PNP\020\002\022\014\n\010"
    "HIGH_NPN\020\001\022\024\n\007LOW_NPN\020\377\377\377\377\377\377\377\377\377\001\022\024\n\007LOW_"
    "PNP\020\376\377\377\377\377\377\377\377\377\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_device_5fmsgs_2eproto_deps[1] =
    {
        &::descriptor_table_common_5fmsgs_2eproto,
};
static ::absl::once_flag descriptor_table_device_5fmsgs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_device_5fmsgs_2eproto = {
    false,
    false,
    1782,
    descriptor_table_protodef_device_5fmsgs_2eproto,
    "device_msgs.proto",
    &descriptor_table_device_5fmsgs_2eproto_once,
    descriptor_table_device_5fmsgs_2eproto_deps,
    1,
    15,
    schemas,
    file_default_instances,
    TableStruct_device_5fmsgs_2eproto::offsets,
    file_level_metadata_device_5fmsgs_2eproto,
    file_level_enum_descriptors_device_5fmsgs_2eproto,
    file_level_service_descriptors_device_5fmsgs_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_device_5fmsgs_2eproto_getter() {
  return &descriptor_table_device_5fmsgs_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_device_5fmsgs_2eproto(&descriptor_table_device_5fmsgs_2eproto);
namespace Nrmk {
namespace IndyFramework {
const ::google::protobuf::EnumDescriptor* BrakeControlStyle_ControlStyle_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_device_5fmsgs_2eproto);
  return file_level_enum_descriptors_device_5fmsgs_2eproto[0];
}
bool BrakeControlStyle_ControlStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr BrakeControlStyle_ControlStyle BrakeControlStyle::UNAVAILABLE;
constexpr BrakeControlStyle_ControlStyle BrakeControlStyle::CONCURRENT;
constexpr BrakeControlStyle_ControlStyle BrakeControlStyle::INDIVIDUAL;
constexpr BrakeControlStyle_ControlStyle BrakeControlStyle::ControlStyle_MIN;
constexpr BrakeControlStyle_ControlStyle BrakeControlStyle::ControlStyle_MAX;
constexpr int BrakeControlStyle::ControlStyle_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* DigitalState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_device_5fmsgs_2eproto);
  return file_level_enum_descriptors_device_5fmsgs_2eproto[1];
}
bool DigitalState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* EndtoolState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_device_5fmsgs_2eproto);
  return file_level_enum_descriptors_device_5fmsgs_2eproto[2];
}
bool EndtoolState_IsValid(int value) {
  switch (value) {
    case -2:
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Motor::_Internal {
 public:
};

Motor::Motor(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.Motor)
}
Motor::Motor(const Motor& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.Motor)
}
inline void Motor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u},
      decltype(_impl_.enable_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Motor::~Motor() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.Motor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Motor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Motor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Motor::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.Motor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.enable_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.enable_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Motor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Motor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Motor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool enable = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Motor, _impl_.enable_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Motor, _impl_.enable_)}},
    // uint32 index = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Motor, _impl_.index_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Motor, _impl_.index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 index = 1;
    {PROTOBUF_FIELD_OFFSET(Motor, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool enable = 2;
    {PROTOBUF_FIELD_OFFSET(Motor, _impl_.enable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Motor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.Motor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_index(), target);
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.Motor)
  return target;
}

::size_t Motor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.Motor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_index());
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Motor::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Motor::MergeImpl
};
const ::google::protobuf::Message::ClassData*Motor::GetClassData() const { return &_class_data_; }


void Motor::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Motor*>(&to_msg);
  auto& from = static_cast<const Motor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.Motor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Motor::CopyFrom(const Motor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.Motor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Motor::IsInitialized() const {
  return true;
}

void Motor::InternalSwap(Motor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Motor, _impl_.enable_)
      + sizeof(Motor::_impl_.enable_)
      - PROTOBUF_FIELD_OFFSET(Motor, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::google::protobuf::Metadata Motor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[0]);
}
// ===================================================================

class Servo::_Internal {
 public:
};

Servo::Servo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.Servo)
}
Servo::Servo(const Servo& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.Servo)
}
inline void Servo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u},
      decltype(_impl_.enable_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Servo::~Servo() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.Servo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Servo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Servo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Servo::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.Servo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.enable_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.enable_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Servo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Servo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Servo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool enable = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Servo, _impl_.enable_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Servo, _impl_.enable_)}},
    // uint32 index = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Servo, _impl_.index_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Servo, _impl_.index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 index = 1;
    {PROTOBUF_FIELD_OFFSET(Servo, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool enable = 2;
    {PROTOBUF_FIELD_OFFSET(Servo, _impl_.enable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Servo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.Servo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_index(), target);
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.Servo)
  return target;
}

::size_t Servo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.Servo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_index());
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Servo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Servo::MergeImpl
};
const ::google::protobuf::Message::ClassData*Servo::GetClassData() const { return &_class_data_; }


void Servo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Servo*>(&to_msg);
  auto& from = static_cast<const Servo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.Servo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Servo::CopyFrom(const Servo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.Servo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Servo::IsInitialized() const {
  return true;
}

void Servo::InternalSwap(Servo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Servo, _impl_.enable_)
      + sizeof(Servo::_impl_.enable_)
      - PROTOBUF_FIELD_OFFSET(Servo, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::google::protobuf::Metadata Servo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[1]);
}
// ===================================================================

class DigitalSignal::_Internal {
 public:
};

DigitalSignal::DigitalSignal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.DigitalSignal)
}
DigitalSignal::DigitalSignal(const DigitalSignal& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.DigitalSignal)
}
inline void DigitalSignal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){0u},
      decltype(_impl_.state_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
DigitalSignal::~DigitalSignal() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.DigitalSignal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DigitalSignal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void DigitalSignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void DigitalSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.DigitalSignal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.address_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DigitalSignal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> DigitalSignal::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_DigitalSignal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.DigitalState state = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DigitalSignal, _impl_.state_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DigitalSignal, _impl_.state_)}},
    // uint32 address = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DigitalSignal, _impl_.address_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DigitalSignal, _impl_.address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 address = 1;
    {PROTOBUF_FIELD_OFFSET(DigitalSignal, _impl_.address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .Nrmk.IndyFramework.DigitalState state = 2;
    {PROTOBUF_FIELD_OFFSET(DigitalSignal, _impl_.state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* DigitalSignal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.DigitalSignal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_address(), target);
  }

  // .Nrmk.IndyFramework.DigitalState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.DigitalSignal)
  return target;
}

::size_t DigitalSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.DigitalSignal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_address());
  }

  // .Nrmk.IndyFramework.DigitalState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DigitalSignal::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    DigitalSignal::MergeImpl
};
const ::google::protobuf::Message::ClassData*DigitalSignal::GetClassData() const { return &_class_data_; }


void DigitalSignal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DigitalSignal*>(&to_msg);
  auto& from = static_cast<const DigitalSignal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.DigitalSignal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalSignal::CopyFrom(const DigitalSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.DigitalSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DigitalSignal::IsInitialized() const {
  return true;
}

void DigitalSignal::InternalSwap(DigitalSignal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalSignal, _impl_.state_)
      + sizeof(DigitalSignal::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(DigitalSignal, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::google::protobuf::Metadata DigitalSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[2]);
}
// ===================================================================

class EndtoolSignal::_Internal {
 public:
};

EndtoolSignal::EndtoolSignal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.EndtoolSignal)
}
EndtoolSignal::EndtoolSignal(const EndtoolSignal& from) : ::google::protobuf::Message() {
  EndtoolSignal* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){from._internal_states()},
      /*decltype(_impl_._states_cached_byte_size_)*/ {0},
      decltype(_impl_.port_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port().empty()) {
    _this->_impl_.port_.Set(from._internal_port(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.EndtoolSignal)
}
inline void EndtoolSignal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){arena},
      /*decltype(_impl_._states_cached_byte_size_)*/ {0},
      decltype(_impl_.port_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
EndtoolSignal::~EndtoolSignal() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.EndtoolSignal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EndtoolSignal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_states()->~RepeatedField();
  _impl_.port_.Destroy();
}
void EndtoolSignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void EndtoolSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.EndtoolSignal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_states()->Clear();
  _impl_.port_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EndtoolSignal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 45, 2> EndtoolSignal::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EndtoolSignal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.EndtoolState states = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(EndtoolSignal, _impl_.states_)}},
    // string port = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EndtoolSignal, _impl_.port_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string port = 1;
    {PROTOBUF_FIELD_OFFSET(EndtoolSignal, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .Nrmk.IndyFramework.EndtoolState states = 2;
    {PROTOBUF_FIELD_OFFSET(EndtoolSignal, _impl_.states_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
  }},
  // no aux_entries
  {{
    "\40\4\0\0\0\0\0\0"
    "Nrmk.IndyFramework.EndtoolSignal"
    "port"
  }},
};

::uint8_t* EndtoolSignal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.EndtoolSignal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string port = 1;
  if (!this->_internal_port().empty()) {
    const std::string& _s = this->_internal_port();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.EndtoolSignal.port");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .Nrmk.IndyFramework.EndtoolState states = 2;
  {
    int byte_size = _impl_._states_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(2, _internal_states(),
                                       byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.EndtoolSignal)
  return target;
}

::size_t EndtoolSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.EndtoolSignal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.EndtoolState states = 2;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_states_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_states().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._states_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // string port = 1;
  if (!this->_internal_port().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EndtoolSignal::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    EndtoolSignal::MergeImpl
};
const ::google::protobuf::Message::ClassData*EndtoolSignal::GetClassData() const { return &_class_data_; }


void EndtoolSignal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EndtoolSignal*>(&to_msg);
  auto& from = static_cast<const EndtoolSignal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.EndtoolSignal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_states()->MergeFrom(from._internal_states());
  if (!from._internal_port().empty()) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EndtoolSignal::CopyFrom(const EndtoolSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.EndtoolSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EndtoolSignal::IsInitialized() const {
  return true;
}

void EndtoolSignal::InternalSwap(EndtoolSignal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_, lhs_arena,
                                       &other->_impl_.port_, rhs_arena);
}

::google::protobuf::Metadata EndtoolSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[3]);
}
// ===================================================================

class AnalogSignal::_Internal {
 public:
};

AnalogSignal::AnalogSignal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.AnalogSignal)
}
AnalogSignal::AnalogSignal(const AnalogSignal& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.AnalogSignal)
}
inline void AnalogSignal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){0u},
      decltype(_impl_.voltage_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AnalogSignal::~AnalogSignal() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.AnalogSignal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AnalogSignal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void AnalogSignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AnalogSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.AnalogSignal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.address_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.voltage_) -
      reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.voltage_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AnalogSignal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> AnalogSignal::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AnalogSignal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 voltage = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AnalogSignal, _impl_.voltage_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AnalogSignal, _impl_.voltage_)}},
    // uint32 address = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AnalogSignal, _impl_.address_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AnalogSignal, _impl_.address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 address = 1;
    {PROTOBUF_FIELD_OFFSET(AnalogSignal, _impl_.address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int32 voltage = 2;
    {PROTOBUF_FIELD_OFFSET(AnalogSignal, _impl_.voltage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AnalogSignal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.AnalogSignal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_address(), target);
  }

  // int32 voltage = 2;
  if (this->_internal_voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_voltage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.AnalogSignal)
  return target;
}

::size_t AnalogSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.AnalogSignal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_address());
  }

  // int32 voltage = 2;
  if (this->_internal_voltage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_voltage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AnalogSignal::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AnalogSignal::MergeImpl
};
const ::google::protobuf::Message::ClassData*AnalogSignal::GetClassData() const { return &_class_data_; }


void AnalogSignal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AnalogSignal*>(&to_msg);
  auto& from = static_cast<const AnalogSignal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.AnalogSignal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_voltage() != 0) {
    _this->_internal_set_voltage(from._internal_voltage());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AnalogSignal::CopyFrom(const AnalogSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.AnalogSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AnalogSignal::IsInitialized() const {
  return true;
}

void AnalogSignal::InternalSwap(AnalogSignal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnalogSignal, _impl_.voltage_)
      + sizeof(AnalogSignal::_impl_.voltage_)
      - PROTOBUF_FIELD_OFFSET(AnalogSignal, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::google::protobuf::Metadata AnalogSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[4]);
}
// ===================================================================

class MotorList::_Internal {
 public:
};

MotorList::MotorList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.MotorList)
}
MotorList::MotorList(const MotorList& from) : ::google::protobuf::Message() {
  MotorList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.motors_){from._impl_.motors_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MotorList)
}
inline void MotorList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.motors_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
MotorList::~MotorList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MotorList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MotorList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.motors_.~RepeatedPtrField();
}
void MotorList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MotorList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MotorList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_motors()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MotorList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> MotorList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MotorList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.Motor motors = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MotorList, _impl_.motors_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.Motor motors = 1;
    {PROTOBUF_FIELD_OFFSET(MotorList, _impl_.motors_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Motor>()},
  }}, {{
  }},
};

::uint8_t* MotorList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MotorList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.Motor motors = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_motors_size()); i < n; i++) {
    const auto& repfield = this->_internal_motors().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MotorList)
  return target;
}

::size_t MotorList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MotorList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.Motor motors = 1;
  total_size += 1UL * this->_internal_motors_size();
  for (const auto& msg : this->_internal_motors()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MotorList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MotorList::MergeImpl
};
const ::google::protobuf::Message::ClassData*MotorList::GetClassData() const { return &_class_data_; }


void MotorList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MotorList*>(&to_msg);
  auto& from = static_cast<const MotorList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MotorList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_motors()->MergeFrom(from._internal_motors());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MotorList::CopyFrom(const MotorList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MotorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MotorList::IsInitialized() const {
  return true;
}

void MotorList::InternalSwap(MotorList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.motors_.InternalSwap(&other->_impl_.motors_);
}

::google::protobuf::Metadata MotorList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[5]);
}
// ===================================================================

class DigitalList::_Internal {
 public:
};

DigitalList::DigitalList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.DigitalList)
}
DigitalList::DigitalList(const DigitalList& from) : ::google::protobuf::Message() {
  DigitalList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signals_){from._impl_.signals_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.DigitalList)
}
inline void DigitalList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.signals_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
DigitalList::~DigitalList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.DigitalList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DigitalList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signals_.~RepeatedPtrField();
}
void DigitalList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void DigitalList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.DigitalList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_signals()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DigitalList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> DigitalList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DigitalList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.DigitalSignal signals = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DigitalList, _impl_.signals_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.DigitalSignal signals = 1;
    {PROTOBUF_FIELD_OFFSET(DigitalList, _impl_.signals_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::DigitalSignal>()},
  }}, {{
  }},
};

::uint8_t* DigitalList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.DigitalList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal signals = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signals_size()); i < n; i++) {
    const auto& repfield = this->_internal_signals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.DigitalList)
  return target;
}

::size_t DigitalList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.DigitalList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal signals = 1;
  total_size += 1UL * this->_internal_signals_size();
  for (const auto& msg : this->_internal_signals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DigitalList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    DigitalList::MergeImpl
};
const ::google::protobuf::Message::ClassData*DigitalList::GetClassData() const { return &_class_data_; }


void DigitalList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DigitalList*>(&to_msg);
  auto& from = static_cast<const DigitalList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.DigitalList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signals()->MergeFrom(from._internal_signals());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalList::CopyFrom(const DigitalList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.DigitalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DigitalList::IsInitialized() const {
  return true;
}

void DigitalList::InternalSwap(DigitalList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signals_.InternalSwap(&other->_impl_.signals_);
}

::google::protobuf::Metadata DigitalList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[6]);
}
// ===================================================================

class EndtoolSignalList::_Internal {
 public:
};

EndtoolSignalList::EndtoolSignalList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.EndtoolSignalList)
}
EndtoolSignalList::EndtoolSignalList(const EndtoolSignalList& from) : ::google::protobuf::Message() {
  EndtoolSignalList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signals_){from._impl_.signals_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.EndtoolSignalList)
}
inline void EndtoolSignalList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.signals_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
EndtoolSignalList::~EndtoolSignalList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.EndtoolSignalList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EndtoolSignalList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signals_.~RepeatedPtrField();
}
void EndtoolSignalList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void EndtoolSignalList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.EndtoolSignalList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_signals()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EndtoolSignalList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EndtoolSignalList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EndtoolSignalList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.EndtoolSignal signals = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EndtoolSignalList, _impl_.signals_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.EndtoolSignal signals = 1;
    {PROTOBUF_FIELD_OFFSET(EndtoolSignalList, _impl_.signals_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::EndtoolSignal>()},
  }}, {{
  }},
};

::uint8_t* EndtoolSignalList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.EndtoolSignalList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.EndtoolSignal signals = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signals_size()); i < n; i++) {
    const auto& repfield = this->_internal_signals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.EndtoolSignalList)
  return target;
}

::size_t EndtoolSignalList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.EndtoolSignalList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.EndtoolSignal signals = 1;
  total_size += 1UL * this->_internal_signals_size();
  for (const auto& msg : this->_internal_signals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EndtoolSignalList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    EndtoolSignalList::MergeImpl
};
const ::google::protobuf::Message::ClassData*EndtoolSignalList::GetClassData() const { return &_class_data_; }


void EndtoolSignalList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EndtoolSignalList*>(&to_msg);
  auto& from = static_cast<const EndtoolSignalList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.EndtoolSignalList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signals()->MergeFrom(from._internal_signals());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EndtoolSignalList::CopyFrom(const EndtoolSignalList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.EndtoolSignalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EndtoolSignalList::IsInitialized() const {
  return true;
}

void EndtoolSignalList::InternalSwap(EndtoolSignalList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signals_.InternalSwap(&other->_impl_.signals_);
}

::google::protobuf::Metadata EndtoolSignalList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[7]);
}
// ===================================================================

class AnalogList::_Internal {
 public:
};

AnalogList::AnalogList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.AnalogList)
}
AnalogList::AnalogList(const AnalogList& from) : ::google::protobuf::Message() {
  AnalogList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signals_){from._impl_.signals_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.AnalogList)
}
inline void AnalogList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.signals_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AnalogList::~AnalogList() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.AnalogList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AnalogList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signals_.~RepeatedPtrField();
}
void AnalogList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AnalogList::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.AnalogList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_signals()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AnalogList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AnalogList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AnalogList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Nrmk.IndyFramework.AnalogSignal signals = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AnalogList, _impl_.signals_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Nrmk.IndyFramework.AnalogSignal signals = 1;
    {PROTOBUF_FIELD_OFFSET(AnalogList, _impl_.signals_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::AnalogSignal>()},
  }}, {{
  }},
};

::uint8_t* AnalogList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.AnalogList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Nrmk.IndyFramework.AnalogSignal signals = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signals_size()); i < n; i++) {
    const auto& repfield = this->_internal_signals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.AnalogList)
  return target;
}

::size_t AnalogList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.AnalogList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.AnalogSignal signals = 1;
  total_size += 1UL * this->_internal_signals_size();
  for (const auto& msg : this->_internal_signals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AnalogList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AnalogList::MergeImpl
};
const ::google::protobuf::Message::ClassData*AnalogList::GetClassData() const { return &_class_data_; }


void AnalogList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AnalogList*>(&to_msg);
  auto& from = static_cast<const AnalogList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.AnalogList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signals()->MergeFrom(from._internal_signals());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AnalogList::CopyFrom(const AnalogList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.AnalogList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AnalogList::IsInitialized() const {
  return true;
}

void AnalogList::InternalSwap(AnalogList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signals_.InternalSwap(&other->_impl_.signals_);
}

::google::protobuf::Metadata AnalogList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[8]);
}
// ===================================================================

class DeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const DeviceInfo* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& DeviceInfo::_Internal::response(const DeviceInfo* msg) {
  return *msg->_impl_.response_;
}
void DeviceInfo::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DeviceInfo::DeviceInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from) : ::google::protobuf::Message() {
  DeviceInfo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.core_board_fw_vers_){from._impl_.core_board_fw_vers_},
      decltype(_impl_.robot_serial_){},
      decltype(_impl_.io_board_fw_ver_){},
      decltype(_impl_.endtool_board_fw_ver_){},
      decltype(_impl_.controller_ver_){},
      decltype(_impl_.controller_detail_){},
      decltype(_impl_.controller_date_){},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.num_joints_){},
      decltype(_impl_.payload_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.robot_serial_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.robot_serial_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robot_serial().empty()) {
    _this->_impl_.robot_serial_.Set(from._internal_robot_serial(), _this->GetArenaForAllocation());
  }
  _impl_.io_board_fw_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.io_board_fw_ver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_io_board_fw_ver().empty()) {
    _this->_impl_.io_board_fw_ver_.Set(from._internal_io_board_fw_ver(), _this->GetArenaForAllocation());
  }
  _impl_.endtool_board_fw_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.endtool_board_fw_ver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_endtool_board_fw_ver().empty()) {
    _this->_impl_.endtool_board_fw_ver_.Set(from._internal_endtool_board_fw_ver(), _this->GetArenaForAllocation());
  }
  _impl_.controller_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.controller_ver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_controller_ver().empty()) {
    _this->_impl_.controller_ver_.Set(from._internal_controller_ver(), _this->GetArenaForAllocation());
  }
  _impl_.controller_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.controller_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_controller_detail().empty()) {
    _this->_impl_.controller_detail_.Set(from._internal_controller_detail(), _this->GetArenaForAllocation());
  }
  _impl_.controller_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.controller_date_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_controller_date().empty()) {
    _this->_impl_.controller_date_.Set(from._internal_controller_date(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.num_joints_, &from._impl_.num_joints_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.payload_) -
    reinterpret_cast<char*>(&_impl_.num_joints_)) + sizeof(_impl_.payload_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.DeviceInfo)
}
inline void DeviceInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.core_board_fw_vers_){arena},
      decltype(_impl_.robot_serial_){},
      decltype(_impl_.io_board_fw_ver_){},
      decltype(_impl_.endtool_board_fw_ver_){},
      decltype(_impl_.controller_ver_){},
      decltype(_impl_.controller_detail_){},
      decltype(_impl_.controller_date_){},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.num_joints_){0u},
      decltype(_impl_.payload_){0},
  };
  _impl_.robot_serial_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.robot_serial_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.io_board_fw_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.io_board_fw_ver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.endtool_board_fw_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.endtool_board_fw_ver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.controller_ver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.controller_ver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.controller_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.controller_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.controller_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.controller_date_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.DeviceInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DeviceInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_core_board_fw_vers()->~RepeatedPtrField();
  _impl_.robot_serial_.Destroy();
  _impl_.io_board_fw_ver_.Destroy();
  _impl_.endtool_board_fw_ver_.Destroy();
  _impl_.controller_ver_.Destroy();
  _impl_.controller_detail_.Destroy();
  _impl_.controller_date_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void DeviceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.DeviceInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_core_board_fw_vers()->Clear();
  _impl_.robot_serial_.ClearToEmpty();
  _impl_.io_board_fw_ver_.ClearToEmpty();
  _impl_.endtool_board_fw_ver_.ClearToEmpty();
  _impl_.controller_ver_.ClearToEmpty();
  _impl_.controller_detail_.ClearToEmpty();
  _impl_.controller_date_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  ::memset(&_impl_.num_joints_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.payload_) -
      reinterpret_cast<char*>(&_impl_.num_joints_)) + sizeof(_impl_.payload_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 1, 157, 7> DeviceInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_._has_bits_),
    0, // no _extensions_
    100, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4291293688,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DeviceInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 num_joints = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DeviceInfo, _impl_.num_joints_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.num_joints_)}},
    // string robot_serial = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.robot_serial_)}},
    // float payload = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.payload_)}},
    // string controller_ver = 20;
    {::_pbi::TcParser::FastUS2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.controller_ver_)}},
    // string controller_detail = 21;
    {::_pbi::TcParser::FastUS2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.controller_detail_)}},
    // string controller_date = 22;
    {::_pbi::TcParser::FastUS2,
     {434, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.controller_date_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string io_board_fw_ver = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.io_board_fw_ver_)}},
    // repeated string core_board_fw_vers = 11;
    {::_pbi::TcParser::FastUR1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.core_board_fw_vers_)}},
    // string endtool_board_fw_ver = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.endtool_board_fw_ver_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 9,
    65535, 65535
  }}, {{
    // uint32 num_joints = 1;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.num_joints_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string robot_serial = 2;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.robot_serial_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float payload = 3;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.payload_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string io_board_fw_ver = 10;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.io_board_fw_ver_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string core_board_fw_vers = 11;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.core_board_fw_vers_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string endtool_board_fw_ver = 12;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.endtool_board_fw_ver_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string controller_ver = 20;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.controller_ver_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string controller_detail = 21;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.controller_detail_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string controller_date = 22;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.controller_date_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
    "\35\0\14\0\17\22\24\16\21\17\0\0\0\0\0\0"
    "Nrmk.IndyFramework.DeviceInfo"
    "robot_serial"
    "io_board_fw_ver"
    "core_board_fw_vers"
    "endtool_board_fw_ver"
    "controller_ver"
    "controller_detail"
    "controller_date"
  }},
};

::uint8_t* DeviceInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.DeviceInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 num_joints = 1;
  if (this->_internal_num_joints() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_num_joints(), target);
  }

  // string robot_serial = 2;
  if (!this->_internal_robot_serial().empty()) {
    const std::string& _s = this->_internal_robot_serial();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DeviceInfo.robot_serial");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // float payload = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_payload = this->_internal_payload();
  ::uint32_t raw_payload;
  memcpy(&raw_payload, &tmp_payload, sizeof(tmp_payload));
  if (raw_payload != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_payload(), target);
  }

  // string io_board_fw_ver = 10;
  if (!this->_internal_io_board_fw_ver().empty()) {
    const std::string& _s = this->_internal_io_board_fw_ver();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DeviceInfo.io_board_fw_ver");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // repeated string core_board_fw_vers = 11;
  for (int i = 0, n = this->_internal_core_board_fw_vers_size(); i < n; ++i) {
    const auto& s = this->_internal_core_board_fw_vers().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DeviceInfo.core_board_fw_vers");
    target = stream->WriteString(11, s, target);
  }

  // string endtool_board_fw_ver = 12;
  if (!this->_internal_endtool_board_fw_ver().empty()) {
    const std::string& _s = this->_internal_endtool_board_fw_ver();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DeviceInfo.endtool_board_fw_ver");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string controller_ver = 20;
  if (!this->_internal_controller_ver().empty()) {
    const std::string& _s = this->_internal_controller_ver();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DeviceInfo.controller_ver");
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  // string controller_detail = 21;
  if (!this->_internal_controller_detail().empty()) {
    const std::string& _s = this->_internal_controller_detail();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DeviceInfo.controller_detail");
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  // string controller_date = 22;
  if (!this->_internal_controller_date().empty()) {
    const std::string& _s = this->_internal_controller_date();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.DeviceInfo.controller_date");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.DeviceInfo)
  return target;
}

::size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.DeviceInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string core_board_fw_vers = 11;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_core_board_fw_vers().size());
  for (int i = 0, n = _internal_core_board_fw_vers().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_core_board_fw_vers().Get(i));
  }
  // string robot_serial = 2;
  if (!this->_internal_robot_serial().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_robot_serial());
  }

  // string io_board_fw_ver = 10;
  if (!this->_internal_io_board_fw_ver().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_io_board_fw_ver());
  }

  // string endtool_board_fw_ver = 12;
  if (!this->_internal_endtool_board_fw_ver().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_endtool_board_fw_ver());
  }

  // string controller_ver = 20;
  if (!this->_internal_controller_ver().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_controller_ver());
  }

  // string controller_detail = 21;
  if (!this->_internal_controller_detail().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_controller_detail());
  }

  // string controller_date = 22;
  if (!this->_internal_controller_date().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_controller_date());
  }

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // uint32 num_joints = 1;
  if (this->_internal_num_joints() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_num_joints());
  }

  // float payload = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_payload = this->_internal_payload();
  ::uint32_t raw_payload;
  memcpy(&raw_payload, &tmp_payload, sizeof(tmp_payload));
  if (raw_payload != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DeviceInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    DeviceInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*DeviceInfo::GetClassData() const { return &_class_data_; }


void DeviceInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DeviceInfo*>(&to_msg);
  auto& from = static_cast<const DeviceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.DeviceInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_core_board_fw_vers()->MergeFrom(from._internal_core_board_fw_vers());
  if (!from._internal_robot_serial().empty()) {
    _this->_internal_set_robot_serial(from._internal_robot_serial());
  }
  if (!from._internal_io_board_fw_ver().empty()) {
    _this->_internal_set_io_board_fw_ver(from._internal_io_board_fw_ver());
  }
  if (!from._internal_endtool_board_fw_ver().empty()) {
    _this->_internal_set_endtool_board_fw_ver(from._internal_endtool_board_fw_ver());
  }
  if (!from._internal_controller_ver().empty()) {
    _this->_internal_set_controller_ver(from._internal_controller_ver());
  }
  if (!from._internal_controller_detail().empty()) {
    _this->_internal_set_controller_detail(from._internal_controller_detail());
  }
  if (!from._internal_controller_date().empty()) {
    _this->_internal_set_controller_date(from._internal_controller_date());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_num_joints() != 0) {
    _this->_internal_set_num_joints(from._internal_num_joints());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_payload = from._internal_payload();
  ::uint32_t raw_payload;
  memcpy(&raw_payload, &tmp_payload, sizeof(tmp_payload));
  if (raw_payload != 0) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.core_board_fw_vers_.InternalSwap(&other->_impl_.core_board_fw_vers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.robot_serial_, lhs_arena,
                                       &other->_impl_.robot_serial_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.io_board_fw_ver_, lhs_arena,
                                       &other->_impl_.io_board_fw_ver_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.endtool_board_fw_ver_, lhs_arena,
                                       &other->_impl_.endtool_board_fw_ver_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.controller_ver_, lhs_arena,
                                       &other->_impl_.controller_ver_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.controller_detail_, lhs_arena,
                                       &other->_impl_.controller_detail_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.controller_date_, lhs_arena,
                                       &other->_impl_.controller_date_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.payload_)
      + sizeof(DeviceInfo::_impl_.payload_)
      - PROTOBUF_FIELD_OFFSET(DeviceInfo, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[9]);
}
// ===================================================================

class BrakeControlStyle::_Internal {
 public:
  using HasBits = decltype(std::declval<BrakeControlStyle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const BrakeControlStyle* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& BrakeControlStyle::_Internal::response(const BrakeControlStyle* msg) {
  return *msg->_impl_.response_;
}
void BrakeControlStyle::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BrakeControlStyle::BrakeControlStyle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.BrakeControlStyle)
}
BrakeControlStyle::BrakeControlStyle(const BrakeControlStyle& from) : ::google::protobuf::Message() {
  BrakeControlStyle* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.style_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  _this->_impl_.style_ = from._impl_.style_;

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.BrakeControlStyle)
}
inline void BrakeControlStyle::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.style_){0},
  };
}
BrakeControlStyle::~BrakeControlStyle() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.BrakeControlStyle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BrakeControlStyle::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}
void BrakeControlStyle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BrakeControlStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.BrakeControlStyle)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_.style_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BrakeControlStyle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 7> BrakeControlStyle::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_._has_bits_),
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BrakeControlStyle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 0, PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_.response_)}},
    // .Nrmk.IndyFramework.BrakeControlStyle.ControlStyle style = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BrakeControlStyle, _impl_.style_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_.style_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // .Nrmk.IndyFramework.BrakeControlStyle.ControlStyle style = 1;
    {PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_.style_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* BrakeControlStyle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.BrakeControlStyle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Nrmk.IndyFramework.BrakeControlStyle.ControlStyle style = 1;
  if (this->_internal_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_style(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.BrakeControlStyle)
  return target;
}

::size_t BrakeControlStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.BrakeControlStyle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .Nrmk.IndyFramework.BrakeControlStyle.ControlStyle style = 1;
  if (this->_internal_style() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_style());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BrakeControlStyle::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BrakeControlStyle::MergeImpl
};
const ::google::protobuf::Message::ClassData*BrakeControlStyle::GetClassData() const { return &_class_data_; }


void BrakeControlStyle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BrakeControlStyle*>(&to_msg);
  auto& from = static_cast<const BrakeControlStyle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.BrakeControlStyle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_style() != 0) {
    _this->_internal_set_style(from._internal_style());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BrakeControlStyle::CopyFrom(const BrakeControlStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.BrakeControlStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BrakeControlStyle::IsInitialized() const {
  return true;
}

void BrakeControlStyle::InternalSwap(BrakeControlStyle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_.style_)
      + sizeof(BrakeControlStyle::_impl_.style_)
      - PROTOBUF_FIELD_OFFSET(BrakeControlStyle, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata BrakeControlStyle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[10]);
}
// ===================================================================

class GetEL5001Data::_Internal {
 public:
  using HasBits = decltype(std::declval<GetEL5001Data>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const GetEL5001Data* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& GetEL5001Data::_Internal::response(const GetEL5001Data* msg) {
  return *msg->_impl_.response_;
}
void GetEL5001Data::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetEL5001Data::GetEL5001Data(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.GetEL5001Data)
}
GetEL5001Data::GetEL5001Data(const GetEL5001Data& from) : ::google::protobuf::Message() {
  GetEL5001Data* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.status_){},
      decltype(_impl_.value_){},
      decltype(_impl_.delta_){},
      decltype(_impl_.average_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.average_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.average_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.GetEL5001Data)
}
inline void GetEL5001Data::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.status_){0},
      decltype(_impl_.value_){0},
      decltype(_impl_.delta_){0},
      decltype(_impl_.average_){0},
  };
}
GetEL5001Data::~GetEL5001Data() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.GetEL5001Data)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetEL5001Data::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}
void GetEL5001Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GetEL5001Data::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.GetEL5001Data)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  ::memset(&_impl_.status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.average_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.average_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetEL5001Data::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 1, 0, 7> GetEL5001Data::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_._has_bits_),
    0, // no _extensions_
    100, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetEL5001Data_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float average = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.average_)}},
    // int32 status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetEL5001Data, _impl_.status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.status_)}},
    // int32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetEL5001Data, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.value_)}},
    // int32 delta = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetEL5001Data, _impl_.delta_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.delta_)}},
  }}, {{
    100, 0, 1,
    65534, 4,
    65535, 65535
  }}, {{
    // int32 status = 1;
    {PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 value = 2;
    {PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 delta = 3;
    {PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.delta_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float average = 4;
    {PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.average_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* GetEL5001Data::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.GetEL5001Data)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_status(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_value(), target);
  }

  // int32 delta = 3;
  if (this->_internal_delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_delta(), target);
  }

  // float average = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_average = this->_internal_average();
  ::uint32_t raw_average;
  memcpy(&raw_average, &tmp_average, sizeof(tmp_average));
  if (raw_average != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_average(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.GetEL5001Data)
  return target;
}

::size_t GetEL5001Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.GetEL5001Data)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_status());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());
  }

  // int32 delta = 3;
  if (this->_internal_delta() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_delta());
  }

  // float average = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_average = this->_internal_average();
  ::uint32_t raw_average;
  memcpy(&raw_average, &tmp_average, sizeof(tmp_average));
  if (raw_average != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetEL5001Data::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GetEL5001Data::MergeImpl
};
const ::google::protobuf::Message::ClassData*GetEL5001Data::GetClassData() const { return &_class_data_; }


void GetEL5001Data::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetEL5001Data*>(&to_msg);
  auto& from = static_cast<const GetEL5001Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.GetEL5001Data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_delta() != 0) {
    _this->_internal_set_delta(from._internal_delta());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_average = from._internal_average();
  ::uint32_t raw_average;
  memcpy(&raw_average, &tmp_average, sizeof(tmp_average));
  if (raw_average != 0) {
    _this->_internal_set_average(from._internal_average());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetEL5001Data::CopyFrom(const GetEL5001Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.GetEL5001Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetEL5001Data::IsInitialized() const {
  return true;
}

void GetEL5001Data::InternalSwap(GetEL5001Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.average_)
      + sizeof(GetEL5001Data::_impl_.average_)
      - PROTOBUF_FIELD_OFFSET(GetEL5001Data, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata GetEL5001Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[11]);
}
// ===================================================================

class GetEL5101Data::_Internal {
 public:
  using HasBits = decltype(std::declval<GetEL5101Data>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const GetEL5101Data* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& GetEL5101Data::_Internal::response(const GetEL5101Data* msg) {
  return *msg->_impl_.response_;
}
void GetEL5101Data::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetEL5101Data::GetEL5101Data(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.GetEL5101Data)
}
GetEL5101Data::GetEL5101Data(const GetEL5101Data& from) : ::google::protobuf::Message() {
  GetEL5101Data* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.status_){},
      decltype(_impl_.value_){},
      decltype(_impl_.latch_){},
      decltype(_impl_.delta_){},
      decltype(_impl_.average_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.average_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.average_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.GetEL5101Data)
}
inline void GetEL5101Data::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.status_){0},
      decltype(_impl_.value_){0},
      decltype(_impl_.latch_){0},
      decltype(_impl_.delta_){0},
      decltype(_impl_.average_){0},
  };
}
GetEL5101Data::~GetEL5101Data() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.GetEL5101Data)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetEL5101Data::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}
void GetEL5101Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GetEL5101Data::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.GetEL5101Data)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  ::memset(&_impl_.status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.average_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.average_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetEL5101Data::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 7> GetEL5101Data::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_._has_bits_),
    0, // no _extensions_
    100, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetEL5101Data_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetEL5101Data, _impl_.status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.status_)}},
    // int32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetEL5101Data, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.value_)}},
    // int32 latch = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetEL5101Data, _impl_.latch_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.latch_)}},
    // int32 delta = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetEL5101Data, _impl_.delta_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.delta_)}},
    // float average = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.average_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 5,
    65535, 65535
  }}, {{
    // int32 status = 1;
    {PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 value = 2;
    {PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 latch = 3;
    {PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.latch_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 delta = 4;
    {PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.delta_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float average = 5;
    {PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.average_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* GetEL5101Data::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.GetEL5101Data)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_status(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_value(), target);
  }

  // int32 latch = 3;
  if (this->_internal_latch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_latch(), target);
  }

  // int32 delta = 4;
  if (this->_internal_delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_delta(), target);
  }

  // float average = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_average = this->_internal_average();
  ::uint32_t raw_average;
  memcpy(&raw_average, &tmp_average, sizeof(tmp_average));
  if (raw_average != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_average(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.GetEL5101Data)
  return target;
}

::size_t GetEL5101Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.GetEL5101Data)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_status());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());
  }

  // int32 latch = 3;
  if (this->_internal_latch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_latch());
  }

  // int32 delta = 4;
  if (this->_internal_delta() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_delta());
  }

  // float average = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_average = this->_internal_average();
  ::uint32_t raw_average;
  memcpy(&raw_average, &tmp_average, sizeof(tmp_average));
  if (raw_average != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetEL5101Data::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GetEL5101Data::MergeImpl
};
const ::google::protobuf::Message::ClassData*GetEL5101Data::GetClassData() const { return &_class_data_; }


void GetEL5101Data::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetEL5101Data*>(&to_msg);
  auto& from = static_cast<const GetEL5101Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.GetEL5101Data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_latch() != 0) {
    _this->_internal_set_latch(from._internal_latch());
  }
  if (from._internal_delta() != 0) {
    _this->_internal_set_delta(from._internal_delta());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_average = from._internal_average();
  ::uint32_t raw_average;
  memcpy(&raw_average, &tmp_average, sizeof(tmp_average));
  if (raw_average != 0) {
    _this->_internal_set_average(from._internal_average());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetEL5101Data::CopyFrom(const GetEL5101Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.GetEL5101Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetEL5101Data::IsInitialized() const {
  return true;
}

void GetEL5101Data::InternalSwap(GetEL5101Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.average_)
      + sizeof(GetEL5101Data::_impl_.average_)
      - PROTOBUF_FIELD_OFFSET(GetEL5101Data, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata GetEL5101Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[12]);
}
// ===================================================================

class FTSensorType::_Internal {
 public:
  using HasBits = decltype(std::declval<FTSensorType>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FTSensorType, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const FTSensorType* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& FTSensorType::_Internal::response(const FTSensorType* msg) {
  return *msg->_impl_.response_;
}
void FTSensorType::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FTSensorType::FTSensorType(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.FTSensorType)
}
FTSensorType::FTSensorType(const FTSensorType& from) : ::google::protobuf::Message() {
  FTSensorType* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ft_sensor_type_){},
      decltype(_impl_.response_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.ft_sensor_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ft_sensor_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ft_sensor_type().empty()) {
    _this->_impl_.ft_sensor_type_.Set(from._internal_ft_sensor_type(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.FTSensorType)
}
inline void FTSensorType::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.ft_sensor_type_){},
      decltype(_impl_.response_){nullptr},
  };
  _impl_.ft_sensor_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ft_sensor_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
FTSensorType::~FTSensorType() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.FTSensorType)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FTSensorType::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ft_sensor_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.response_;
}
void FTSensorType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FTSensorType::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.FTSensorType)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ft_sensor_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FTSensorType::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 54, 7> FTSensorType::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FTSensorType, _impl_._has_bits_),
    0, // no _extensions_
    100, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FTSensorType_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .Nrmk.IndyFramework.Response response = 100;
    {::_pbi::TcParser::FastMtS2,
     {1698, 0, 0, PROTOBUF_FIELD_OFFSET(FTSensorType, _impl_.response_)}},
    // string ft_sensor_type = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorType, _impl_.ft_sensor_type_)}},
  }}, {{
    100, 0, 1,
    65534, 1,
    65535, 65535
  }}, {{
    // string ft_sensor_type = 1;
    {PROTOBUF_FIELD_OFFSET(FTSensorType, _impl_.ft_sensor_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(FTSensorType, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
    "\37\16\0\0\0\0\0\0"
    "Nrmk.IndyFramework.FTSensorType"
    "ft_sensor_type"
  }},
};

::uint8_t* FTSensorType::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.FTSensorType)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string ft_sensor_type = 1;
  if (!this->_internal_ft_sensor_type().empty()) {
    const std::string& _s = this->_internal_ft_sensor_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Nrmk.IndyFramework.FTSensorType.ft_sensor_type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.FTSensorType)
  return target;
}

::size_t FTSensorType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.FTSensorType)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ft_sensor_type = 1;
  if (!this->_internal_ft_sensor_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ft_sensor_type());
  }

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FTSensorType::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FTSensorType::MergeImpl
};
const ::google::protobuf::Message::ClassData*FTSensorType::GetClassData() const { return &_class_data_; }


void FTSensorType::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FTSensorType*>(&to_msg);
  auto& from = static_cast<const FTSensorType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.FTSensorType)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ft_sensor_type().empty()) {
    _this->_internal_set_ft_sensor_type(from._internal_ft_sensor_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FTSensorType::CopyFrom(const FTSensorType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.FTSensorType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FTSensorType::IsInitialized() const {
  return true;
}

void FTSensorType::InternalSwap(FTSensorType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ft_sensor_type_, lhs_arena,
                                       &other->_impl_.ft_sensor_type_, rhs_arena);
  swap(_impl_.response_, other->_impl_.response_);
}

::google::protobuf::Metadata FTSensorType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[13]);
}
// ===================================================================

class FTSensorData::_Internal {
 public:
  using HasBits = decltype(std::declval<FTSensorData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_._has_bits_);
  static const ::Nrmk::IndyFramework::Response& response(const FTSensorData* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Nrmk::IndyFramework::Response& FTSensorData::_Internal::response(const FTSensorData* msg) {
  return *msg->_impl_.response_;
}
void FTSensorData::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FTSensorData::FTSensorData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Nrmk.IndyFramework.FTSensorData)
}
FTSensorData::FTSensorData(const FTSensorData& from) : ::google::protobuf::Message() {
  FTSensorData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.ft_fx_){},
      decltype(_impl_.ft_fy_){},
      decltype(_impl_.ft_fz_){},
      decltype(_impl_.ft_tx_){},
      decltype(_impl_.ft_ty_){},
      decltype(_impl_.ft_tz_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.response_ = new ::Nrmk::IndyFramework::Response(*from._impl_.response_);
  }
  ::memcpy(&_impl_.ft_fx_, &from._impl_.ft_fx_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ft_tz_) -
    reinterpret_cast<char*>(&_impl_.ft_fx_)) + sizeof(_impl_.ft_tz_));

  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.FTSensorData)
}
inline void FTSensorData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.response_){nullptr},
      decltype(_impl_.ft_fx_){0},
      decltype(_impl_.ft_fy_){0},
      decltype(_impl_.ft_fz_){0},
      decltype(_impl_.ft_tx_){0},
      decltype(_impl_.ft_ty_){0},
      decltype(_impl_.ft_tz_){0},
  };
}
FTSensorData::~FTSensorData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.FTSensorData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FTSensorData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.response_;
}
void FTSensorData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void FTSensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.FTSensorData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.response_ != nullptr);
    _impl_.response_->Clear();
  }
  ::memset(&_impl_.ft_fx_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ft_tz_) -
      reinterpret_cast<char*>(&_impl_.ft_fx_)) + sizeof(_impl_.ft_tz_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FTSensorData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 0, 7> FTSensorData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_._has_bits_),
    0, // no _extensions_
    100, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FTSensorData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float ft_Fx = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_fx_)}},
    // float ft_Fy = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_fy_)}},
    // float ft_Fz = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_fz_)}},
    // float ft_Tx = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_tx_)}},
    // float ft_Ty = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_ty_)}},
    // float ft_Tz = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_tz_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65534, 6,
    65535, 65535
  }}, {{
    // float ft_Fx = 1;
    {PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_fx_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Fy = 2;
    {PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_fy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Fz = 3;
    {PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_fz_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Tx = 4;
    {PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_tx_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Ty = 5;
    {PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_ty_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ft_Tz = 6;
    {PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_tz_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .Nrmk.IndyFramework.Response response = 100;
    {PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.response_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Nrmk::IndyFramework::Response>()},
  }}, {{
  }},
};

::uint8_t* FTSensorData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.FTSensorData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float ft_Fx = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fx = this->_internal_ft_fx();
  ::uint32_t raw_ft_fx;
  memcpy(&raw_ft_fx, &tmp_ft_fx, sizeof(tmp_ft_fx));
  if (raw_ft_fx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_ft_fx(), target);
  }

  // float ft_Fy = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fy = this->_internal_ft_fy();
  ::uint32_t raw_ft_fy;
  memcpy(&raw_ft_fy, &tmp_ft_fy, sizeof(tmp_ft_fy));
  if (raw_ft_fy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_ft_fy(), target);
  }

  // float ft_Fz = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fz = this->_internal_ft_fz();
  ::uint32_t raw_ft_fz;
  memcpy(&raw_ft_fz, &tmp_ft_fz, sizeof(tmp_ft_fz));
  if (raw_ft_fz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_ft_fz(), target);
  }

  // float ft_Tx = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tx = this->_internal_ft_tx();
  ::uint32_t raw_ft_tx;
  memcpy(&raw_ft_tx, &tmp_ft_tx, sizeof(tmp_ft_tx));
  if (raw_ft_tx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_ft_tx(), target);
  }

  // float ft_Ty = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_ty = this->_internal_ft_ty();
  ::uint32_t raw_ft_ty;
  memcpy(&raw_ft_ty, &tmp_ft_ty, sizeof(tmp_ft_ty));
  if (raw_ft_ty != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_ft_ty(), target);
  }

  // float ft_Tz = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tz = this->_internal_ft_tz();
  ::uint32_t raw_ft_tz;
  memcpy(&raw_ft_tz, &tmp_ft_tz, sizeof(tmp_ft_tz));
  if (raw_ft_tz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_ft_tz(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Nrmk.IndyFramework.Response response = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.FTSensorData)
  return target;
}

::size_t FTSensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.FTSensorData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // float ft_Fx = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fx = this->_internal_ft_fx();
  ::uint32_t raw_ft_fx;
  memcpy(&raw_ft_fx, &tmp_ft_fx, sizeof(tmp_ft_fx));
  if (raw_ft_fx != 0) {
    total_size += 5;
  }

  // float ft_Fy = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fy = this->_internal_ft_fy();
  ::uint32_t raw_ft_fy;
  memcpy(&raw_ft_fy, &tmp_ft_fy, sizeof(tmp_ft_fy));
  if (raw_ft_fy != 0) {
    total_size += 5;
  }

  // float ft_Fz = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fz = this->_internal_ft_fz();
  ::uint32_t raw_ft_fz;
  memcpy(&raw_ft_fz, &tmp_ft_fz, sizeof(tmp_ft_fz));
  if (raw_ft_fz != 0) {
    total_size += 5;
  }

  // float ft_Tx = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tx = this->_internal_ft_tx();
  ::uint32_t raw_ft_tx;
  memcpy(&raw_ft_tx, &tmp_ft_tx, sizeof(tmp_ft_tx));
  if (raw_ft_tx != 0) {
    total_size += 5;
  }

  // float ft_Ty = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_ty = this->_internal_ft_ty();
  ::uint32_t raw_ft_ty;
  memcpy(&raw_ft_ty, &tmp_ft_ty, sizeof(tmp_ft_ty));
  if (raw_ft_ty != 0) {
    total_size += 5;
  }

  // float ft_Tz = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tz = this->_internal_ft_tz();
  ::uint32_t raw_ft_tz;
  memcpy(&raw_ft_tz, &tmp_ft_tz, sizeof(tmp_ft_tz));
  if (raw_ft_tz != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FTSensorData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    FTSensorData::MergeImpl
};
const ::google::protobuf::Message::ClassData*FTSensorData::GetClassData() const { return &_class_data_; }


void FTSensorData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FTSensorData*>(&to_msg);
  auto& from = static_cast<const FTSensorData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.FTSensorData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(
        from._internal_response());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fx = from._internal_ft_fx();
  ::uint32_t raw_ft_fx;
  memcpy(&raw_ft_fx, &tmp_ft_fx, sizeof(tmp_ft_fx));
  if (raw_ft_fx != 0) {
    _this->_internal_set_ft_fx(from._internal_ft_fx());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fy = from._internal_ft_fy();
  ::uint32_t raw_ft_fy;
  memcpy(&raw_ft_fy, &tmp_ft_fy, sizeof(tmp_ft_fy));
  if (raw_ft_fy != 0) {
    _this->_internal_set_ft_fy(from._internal_ft_fy());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_fz = from._internal_ft_fz();
  ::uint32_t raw_ft_fz;
  memcpy(&raw_ft_fz, &tmp_ft_fz, sizeof(tmp_ft_fz));
  if (raw_ft_fz != 0) {
    _this->_internal_set_ft_fz(from._internal_ft_fz());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tx = from._internal_ft_tx();
  ::uint32_t raw_ft_tx;
  memcpy(&raw_ft_tx, &tmp_ft_tx, sizeof(tmp_ft_tx));
  if (raw_ft_tx != 0) {
    _this->_internal_set_ft_tx(from._internal_ft_tx());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_ty = from._internal_ft_ty();
  ::uint32_t raw_ft_ty;
  memcpy(&raw_ft_ty, &tmp_ft_ty, sizeof(tmp_ft_ty));
  if (raw_ft_ty != 0) {
    _this->_internal_set_ft_ty(from._internal_ft_ty());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ft_tz = from._internal_ft_tz();
  ::uint32_t raw_ft_tz;
  memcpy(&raw_ft_tz, &tmp_ft_tz, sizeof(tmp_ft_tz));
  if (raw_ft_tz != 0) {
    _this->_internal_set_ft_tz(from._internal_ft_tz());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FTSensorData::CopyFrom(const FTSensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.FTSensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FTSensorData::IsInitialized() const {
  return true;
}

void FTSensorData::InternalSwap(FTSensorData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.ft_tz_)
      + sizeof(FTSensorData::_impl_.ft_tz_)
      - PROTOBUF_FIELD_OFFSET(FTSensorData, _impl_.response_)>(
          reinterpret_cast<char*>(&_impl_.response_),
          reinterpret_cast<char*>(&other->_impl_.response_));
}

::google::protobuf::Metadata FTSensorData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fmsgs_2eproto_getter, &descriptor_table_device_5fmsgs_2eproto_once,
      file_level_metadata_device_5fmsgs_2eproto[14]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
