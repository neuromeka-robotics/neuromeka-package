// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: indyeye.proto
#ifndef GRPC_indyeye_2eproto__INCLUDED
#define GRPC_indyeye_2eproto__INCLUDED

#include "indyeye.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace IndyFramework {
namespace Protobuf {
namespace EyeTask {

class EyeTask final {
 public:
  static constexpr char const* service_full_name() {
    return "IndyFramework.Protobuf.EyeTask.EyeTask";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetServerInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest& request, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>> AsyncGetServerInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>>(AsyncGetServerInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>> PrepareAsyncGetServerInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>>(PrepareAsyncGetServerInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetImage(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest& request, ::IndyFramework::Protobuf::EyeTask::ImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ImageResponse>> AsyncGetImage(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ImageResponse>>(AsyncGetImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ImageResponse>> PrepareAsyncGetImage(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ImageResponse>>(PrepareAsyncGetImageRaw(context, request, cq));
    }
    virtual ::grpc::Status GetClassList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request& request, ::IndyFramework::Protobuf::EyeTask::ClassList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ClassList>> AsyncGetClassList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ClassList>>(AsyncGetClassListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ClassList>> PrepareAsyncGetClassList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ClassList>>(PrepareAsyncGetClassListRaw(context, request, cq));
    }
    virtual ::grpc::Status Detect(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest& request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::DetectResponse>> AsyncDetect(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::DetectResponse>>(AsyncDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::DetectResponse>> PrepareAsyncDetect(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::DetectResponse>>(PrepareAsyncDetectRaw(context, request, cq));
    }
    virtual ::grpc::Status Retrieve(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest& request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::DetectResponse>> AsyncRetrieve(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::DetectResponse>>(AsyncRetrieveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::DetectResponse>> PrepareAsyncRetrieve(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::DetectResponse>>(PrepareAsyncRetrieveRaw(context, request, cq));
    }
    virtual ::grpc::Status GetWeldingLinesInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest& request, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>> AsyncGetWeldingLinesInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>>(AsyncGetWeldingLinesInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>> PrepareAsyncGetWeldingLinesInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>>(PrepareAsyncGetWeldingLinesInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStraightLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest& request, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>> AsyncGetStraightLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>>(AsyncGetStraightLineInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>> PrepareAsyncGetStraightLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>>(PrepareAsyncGetStraightLineInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCircularLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest& request, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>> AsyncGetCircularLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>>(AsyncGetCircularLineInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>> PrepareAsyncGetCircularLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>>(PrepareAsyncGetCircularLineInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status DoCalibration(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest& request, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>> AsyncDoCalibration(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>>(AsyncDoCalibrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>> PrepareAsyncDoCalibration(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>>(PrepareAsyncDoCalibrationRaw(context, request, cq));
    }
    virtual ::grpc::Status IsCalibrationDone(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest& request, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>> AsyncIsCalibrationDone(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>>(AsyncIsCalibrationDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>> PrepareAsyncIsCalibrationDone(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>>(PrepareAsyncIsCalibrationDoneRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetServerInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServerInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetImage(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* request, ::IndyFramework::Protobuf::EyeTask::ImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImage(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* request, ::IndyFramework::Protobuf::EyeTask::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetClassList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request* request, ::IndyFramework::Protobuf::EyeTask::ClassList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetClassList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request* request, ::IndyFramework::Protobuf::EyeTask::ClassList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Detect(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Detect(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Retrieve(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Retrieve(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetWeldingLinesInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWeldingLinesInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetStraightLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStraightLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCircularLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCircularLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DoCalibration(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DoCalibration(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void IsCalibrationDone(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsCalibrationDone(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>* AsyncGetServerInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>* PrepareAsyncGetServerInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ImageResponse>* AsyncGetImageRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ImageResponse>* PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ClassList>* AsyncGetClassListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::ClassList>* PrepareAsyncGetClassListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::DetectResponse>* AsyncDetectRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::DetectResponse>* PrepareAsyncDetectRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::DetectResponse>* AsyncRetrieveRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::DetectResponse>* PrepareAsyncRetrieveRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>* AsyncGetWeldingLinesInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>* PrepareAsyncGetWeldingLinesInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>* AsyncGetStraightLineInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>* PrepareAsyncGetStraightLineInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>* AsyncGetCircularLineInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>* PrepareAsyncGetCircularLineInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>* AsyncDoCalibrationRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>* PrepareAsyncDoCalibrationRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>* AsyncIsCalibrationDoneRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>* PrepareAsyncIsCalibrationDoneRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetServerInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest& request, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>> AsyncGetServerInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>>(AsyncGetServerInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>> PrepareAsyncGetServerInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>>(PrepareAsyncGetServerInfoRaw(context, request, cq));
    }
    ::grpc::Status GetImage(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest& request, ::IndyFramework::Protobuf::EyeTask::ImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ImageResponse>> AsyncGetImage(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ImageResponse>>(AsyncGetImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ImageResponse>> PrepareAsyncGetImage(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ImageResponse>>(PrepareAsyncGetImageRaw(context, request, cq));
    }
    ::grpc::Status GetClassList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request& request, ::IndyFramework::Protobuf::EyeTask::ClassList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ClassList>> AsyncGetClassList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ClassList>>(AsyncGetClassListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ClassList>> PrepareAsyncGetClassList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ClassList>>(PrepareAsyncGetClassListRaw(context, request, cq));
    }
    ::grpc::Status Detect(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest& request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>> AsyncDetect(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>>(AsyncDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>> PrepareAsyncDetect(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>>(PrepareAsyncDetectRaw(context, request, cq));
    }
    ::grpc::Status Retrieve(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest& request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>> AsyncRetrieve(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>>(AsyncRetrieveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>> PrepareAsyncRetrieve(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>>(PrepareAsyncRetrieveRaw(context, request, cq));
    }
    ::grpc::Status GetWeldingLinesInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest& request, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>> AsyncGetWeldingLinesInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>>(AsyncGetWeldingLinesInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>> PrepareAsyncGetWeldingLinesInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>>(PrepareAsyncGetWeldingLinesInfoRaw(context, request, cq));
    }
    ::grpc::Status GetStraightLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest& request, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>> AsyncGetStraightLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>>(AsyncGetStraightLineInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>> PrepareAsyncGetStraightLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>>(PrepareAsyncGetStraightLineInfoRaw(context, request, cq));
    }
    ::grpc::Status GetCircularLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest& request, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>> AsyncGetCircularLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>>(AsyncGetCircularLineInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>> PrepareAsyncGetCircularLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>>(PrepareAsyncGetCircularLineInfoRaw(context, request, cq));
    }
    ::grpc::Status DoCalibration(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest& request, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>> AsyncDoCalibration(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>>(AsyncDoCalibrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>> PrepareAsyncDoCalibration(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>>(PrepareAsyncDoCalibrationRaw(context, request, cq));
    }
    ::grpc::Status IsCalibrationDone(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest& request, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>> AsyncIsCalibrationDone(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>>(AsyncIsCalibrationDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>> PrepareAsyncIsCalibrationDone(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>>(PrepareAsyncIsCalibrationDoneRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetServerInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetServerInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetImage(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* request, ::IndyFramework::Protobuf::EyeTask::ImageResponse* response, std::function<void(::grpc::Status)>) override;
      void GetImage(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* request, ::IndyFramework::Protobuf::EyeTask::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetClassList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request* request, ::IndyFramework::Protobuf::EyeTask::ClassList* response, std::function<void(::grpc::Status)>) override;
      void GetClassList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request* request, ::IndyFramework::Protobuf::EyeTask::ClassList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Detect(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response, std::function<void(::grpc::Status)>) override;
      void Detect(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Retrieve(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response, std::function<void(::grpc::Status)>) override;
      void Retrieve(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWeldingLinesInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetWeldingLinesInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetStraightLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetStraightLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCircularLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCircularLineInfo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DoCalibration(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* response, std::function<void(::grpc::Status)>) override;
      void DoCalibration(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsCalibrationDone(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* response, std::function<void(::grpc::Status)>) override;
      void IsCalibrationDone(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>* AsyncGetServerInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>* PrepareAsyncGetServerInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ImageResponse>* AsyncGetImageRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ImageResponse>* PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ClassList>* AsyncGetClassListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::ClassList>* PrepareAsyncGetClassListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>* AsyncDetectRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>* PrepareAsyncDetectRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>* AsyncRetrieveRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::DetectResponse>* PrepareAsyncRetrieveRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>* AsyncGetWeldingLinesInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>* PrepareAsyncGetWeldingLinesInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>* AsyncGetStraightLineInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>* PrepareAsyncGetStraightLineInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>* AsyncGetCircularLineInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>* PrepareAsyncGetCircularLineInfoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>* AsyncDoCalibrationRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>* PrepareAsyncDoCalibrationRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>* AsyncIsCalibrationDoneRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>* PrepareAsyncIsCalibrationDoneRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetServerInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetImage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetClassList_;
    const ::grpc::internal::RpcMethod rpcmethod_Detect_;
    const ::grpc::internal::RpcMethod rpcmethod_Retrieve_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWeldingLinesInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStraightLineInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCircularLineInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_DoCalibration_;
    const ::grpc::internal::RpcMethod rpcmethod_IsCalibrationDone_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetServerInfo(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* response);
    virtual ::grpc::Status GetImage(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* request, ::IndyFramework::Protobuf::EyeTask::ImageResponse* response);
    virtual ::grpc::Status GetClassList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::Request* request, ::IndyFramework::Protobuf::EyeTask::ClassList* response);
    virtual ::grpc::Status Detect(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response);
    virtual ::grpc::Status Retrieve(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response);
    virtual ::grpc::Status GetWeldingLinesInfo(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* response);
    virtual ::grpc::Status GetStraightLineInfo(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* response);
    virtual ::grpc::Status GetCircularLineInfo(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* response);
    virtual ::grpc::Status DoCalibration(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* response);
    virtual ::grpc::Status IsCalibrationDone(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServerInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerInfo(::grpc::ServerContext* context, ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetImage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImage(::grpc::ServerContext* context, ::IndyFramework::Protobuf::EyeTask::ImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::IndyFramework::Protobuf::EyeTask::ImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetClassList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetClassList() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetClassList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClassList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::Request* /*request*/, ::IndyFramework::Protobuf::EyeTask::ClassList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClassList(::grpc::ServerContext* context, ::IndyFramework::Protobuf::EyeTask::Request* request, ::grpc::ServerAsyncResponseWriter< ::IndyFramework::Protobuf::EyeTask::ClassList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Detect() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetect(::grpc::ServerContext* context, ::IndyFramework::Protobuf::EyeTask::DetectRequest* request, ::grpc::ServerAsyncResponseWriter< ::IndyFramework::Protobuf::EyeTask::DetectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Retrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Retrieve() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Retrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Retrieve(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRetrieve(::grpc::ServerContext* context, ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* request, ::grpc::ServerAsyncResponseWriter< ::IndyFramework::Protobuf::EyeTask::DetectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWeldingLinesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWeldingLinesInfo() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetWeldingLinesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWeldingLinesInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWeldingLinesInfo(::grpc::ServerContext* context, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStraightLineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStraightLineInfo() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetStraightLineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStraightLineInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStraightLineInfo(::grpc::ServerContext* context, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCircularLineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCircularLineInfo() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetCircularLineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCircularLineInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCircularLineInfo(::grpc::ServerContext* context, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoCalibration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoCalibration() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DoCalibration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCalibration(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCalibration(::grpc::ServerContext* context, ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsCalibrationDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsCalibrationDone() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_IsCalibrationDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCalibrationDone(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsCalibrationDone(::grpc::ServerContext* context, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* request, ::grpc::ServerAsyncResponseWriter< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetServerInfo<WithAsyncMethod_GetImage<WithAsyncMethod_GetClassList<WithAsyncMethod_Detect<WithAsyncMethod_Retrieve<WithAsyncMethod_GetWeldingLinesInfo<WithAsyncMethod_GetStraightLineInfo<WithAsyncMethod_GetCircularLineInfo<WithAsyncMethod_DoCalibration<WithAsyncMethod_IsCalibrationDone<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServerInfo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* response) { return this->GetServerInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetServerInfo(
        ::grpc::MessageAllocator< ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServerInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetImage() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::ImageRequest, ::IndyFramework::Protobuf::EyeTask::ImageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* request, ::IndyFramework::Protobuf::EyeTask::ImageResponse* response) { return this->GetImage(context, request, response); }));}
    void SetMessageAllocatorFor_GetImage(
        ::grpc::MessageAllocator< ::IndyFramework::Protobuf::EyeTask::ImageRequest, ::IndyFramework::Protobuf::EyeTask::ImageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::ImageRequest, ::IndyFramework::Protobuf::EyeTask::ImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImage(
      ::grpc::CallbackServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::ImageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetClassList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetClassList() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::Request, ::IndyFramework::Protobuf::EyeTask::ClassList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IndyFramework::Protobuf::EyeTask::Request* request, ::IndyFramework::Protobuf::EyeTask::ClassList* response) { return this->GetClassList(context, request, response); }));}
    void SetMessageAllocatorFor_GetClassList(
        ::grpc::MessageAllocator< ::IndyFramework::Protobuf::EyeTask::Request, ::IndyFramework::Protobuf::EyeTask::ClassList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::Request, ::IndyFramework::Protobuf::EyeTask::ClassList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetClassList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClassList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::Request* /*request*/, ::IndyFramework::Protobuf::EyeTask::ClassList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetClassList(
      ::grpc::CallbackServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::Request* /*request*/, ::IndyFramework::Protobuf::EyeTask::ClassList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Detect() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::DetectRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response) { return this->Detect(context, request, response); }));}
    void SetMessageAllocatorFor_Detect(
        ::grpc::MessageAllocator< ::IndyFramework::Protobuf::EyeTask::DetectRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::DetectRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Detect(
      ::grpc::CallbackServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::DetectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Retrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Retrieve() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::RetrieveRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* request, ::IndyFramework::Protobuf::EyeTask::DetectResponse* response) { return this->Retrieve(context, request, response); }));}
    void SetMessageAllocatorFor_Retrieve(
        ::grpc::MessageAllocator< ::IndyFramework::Protobuf::EyeTask::RetrieveRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::RetrieveRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Retrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Retrieve(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Retrieve(
      ::grpc::CallbackServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::DetectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWeldingLinesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWeldingLinesInfo() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* response) { return this->GetWeldingLinesInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetWeldingLinesInfo(
        ::grpc::MessageAllocator< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWeldingLinesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWeldingLinesInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWeldingLinesInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetStraightLineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStraightLineInfo() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* response) { return this->GetStraightLineInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetStraightLineInfo(
        ::grpc::MessageAllocator< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStraightLineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStraightLineInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStraightLineInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCircularLineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCircularLineInfo() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* request, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* response) { return this->GetCircularLineInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetCircularLineInfo(
        ::grpc::MessageAllocator< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCircularLineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCircularLineInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCircularLineInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DoCalibration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DoCalibration() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::CalibrationRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* response) { return this->DoCalibration(context, request, response); }));}
    void SetMessageAllocatorFor_DoCalibration(
        ::grpc::MessageAllocator< ::IndyFramework::Protobuf::EyeTask::CalibrationRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::CalibrationRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DoCalibration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCalibration(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCalibration(
      ::grpc::CallbackServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsCalibrationDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsCalibrationDone() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* request, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* response) { return this->IsCalibrationDone(context, request, response); }));}
    void SetMessageAllocatorFor_IsCalibrationDone(
        ::grpc::MessageAllocator< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsCalibrationDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCalibrationDone(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsCalibrationDone(
      ::grpc::CallbackServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetServerInfo<WithCallbackMethod_GetImage<WithCallbackMethod_GetClassList<WithCallbackMethod_Detect<WithCallbackMethod_Retrieve<WithCallbackMethod_GetWeldingLinesInfo<WithCallbackMethod_GetStraightLineInfo<WithCallbackMethod_GetCircularLineInfo<WithCallbackMethod_DoCalibration<WithCallbackMethod_IsCalibrationDone<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServerInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetImage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetClassList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetClassList() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetClassList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClassList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::Request* /*request*/, ::IndyFramework::Protobuf::EyeTask::ClassList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Detect() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Retrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Retrieve() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Retrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Retrieve(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWeldingLinesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWeldingLinesInfo() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetWeldingLinesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWeldingLinesInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStraightLineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStraightLineInfo() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetStraightLineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStraightLineInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCircularLineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCircularLineInfo() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetCircularLineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCircularLineInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoCalibration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoCalibration() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DoCalibration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCalibration(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsCalibrationDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsCalibrationDone() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_IsCalibrationDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCalibrationDone(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServerInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetImage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetClassList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetClassList() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetClassList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClassList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::Request* /*request*/, ::IndyFramework::Protobuf::EyeTask::ClassList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClassList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Detect() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Retrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Retrieve() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Retrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Retrieve(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRetrieve(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWeldingLinesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWeldingLinesInfo() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetWeldingLinesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWeldingLinesInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWeldingLinesInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStraightLineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStraightLineInfo() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetStraightLineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStraightLineInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStraightLineInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCircularLineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCircularLineInfo() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetCircularLineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCircularLineInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCircularLineInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoCalibration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoCalibration() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DoCalibration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCalibration(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCalibration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsCalibrationDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsCalibrationDone() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_IsCalibrationDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCalibrationDone(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsCalibrationDone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServerInfo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServerInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServerInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetImage() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetClassList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetClassList() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetClassList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetClassList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClassList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::Request* /*request*/, ::IndyFramework::Protobuf::EyeTask::ClassList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetClassList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Detect() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Detect(context, request, response); }));
    }
    ~WithRawCallbackMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Detect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Retrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Retrieve() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Retrieve(context, request, response); }));
    }
    ~WithRawCallbackMethod_Retrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Retrieve(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Retrieve(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWeldingLinesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWeldingLinesInfo() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWeldingLinesInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWeldingLinesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWeldingLinesInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWeldingLinesInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStraightLineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStraightLineInfo() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStraightLineInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStraightLineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStraightLineInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStraightLineInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCircularLineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCircularLineInfo() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCircularLineInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCircularLineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCircularLineInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCircularLineInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DoCalibration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DoCalibration() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoCalibration(context, request, response); }));
    }
    ~WithRawCallbackMethod_DoCalibration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCalibration(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCalibration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsCalibrationDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsCalibrationDone() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsCalibrationDone(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsCalibrationDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCalibrationDone(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsCalibrationDone(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServerInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>* streamer) {
                       return this->StreamedGetServerInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServerInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::ServerInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServerInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IndyFramework::Protobuf::EyeTask::ServerInfoRequest,::IndyFramework::Protobuf::EyeTask::ServerInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetImage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IndyFramework::Protobuf::EyeTask::ImageRequest, ::IndyFramework::Protobuf::EyeTask::ImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IndyFramework::Protobuf::EyeTask::ImageRequest, ::IndyFramework::Protobuf::EyeTask::ImageResponse>* streamer) {
                       return this->StreamedGetImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::ImageRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IndyFramework::Protobuf::EyeTask::ImageRequest,::IndyFramework::Protobuf::EyeTask::ImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetClassList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetClassList() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IndyFramework::Protobuf::EyeTask::Request, ::IndyFramework::Protobuf::EyeTask::ClassList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IndyFramework::Protobuf::EyeTask::Request, ::IndyFramework::Protobuf::EyeTask::ClassList>* streamer) {
                       return this->StreamedGetClassList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetClassList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetClassList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::Request* /*request*/, ::IndyFramework::Protobuf::EyeTask::ClassList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetClassList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IndyFramework::Protobuf::EyeTask::Request,::IndyFramework::Protobuf::EyeTask::ClassList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Detect() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IndyFramework::Protobuf::EyeTask::DetectRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IndyFramework::Protobuf::EyeTask::DetectRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse>* streamer) {
                       return this->StreamedDetect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::DetectRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDetect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IndyFramework::Protobuf::EyeTask::DetectRequest,::IndyFramework::Protobuf::EyeTask::DetectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Retrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Retrieve() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IndyFramework::Protobuf::EyeTask::RetrieveRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IndyFramework::Protobuf::EyeTask::RetrieveRequest, ::IndyFramework::Protobuf::EyeTask::DetectResponse>* streamer) {
                       return this->StreamedRetrieve(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Retrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Retrieve(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::RetrieveRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::DetectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRetrieve(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IndyFramework::Protobuf::EyeTask::RetrieveRequest,::IndyFramework::Protobuf::EyeTask::DetectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWeldingLinesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWeldingLinesInfo() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>* streamer) {
                       return this->StreamedGetWeldingLinesInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWeldingLinesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWeldingLinesInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWeldingLinesInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoRequest,::IndyFramework::Protobuf::EyeTask::WeldingLinesInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStraightLineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStraightLineInfo() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>* streamer) {
                       return this->StreamedGetStraightLineInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStraightLineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStraightLineInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStraightLineInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IndyFramework::Protobuf::EyeTask::StraightLineInfoRequest,::IndyFramework::Protobuf::EyeTask::StraightLineInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCircularLineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCircularLineInfo() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>* streamer) {
                       return this->StreamedGetCircularLineInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCircularLineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCircularLineInfo(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCircularLineInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IndyFramework::Protobuf::EyeTask::CircularLineInfoRequest,::IndyFramework::Protobuf::EyeTask::CircularLineInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoCalibration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoCalibration() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IndyFramework::Protobuf::EyeTask::CalibrationRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IndyFramework::Protobuf::EyeTask::CalibrationRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse>* streamer) {
                       return this->StreamedDoCalibration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoCalibration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoCalibration(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CalibrationRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CalibrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoCalibration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IndyFramework::Protobuf::EyeTask::CalibrationRequest,::IndyFramework::Protobuf::EyeTask::CalibrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsCalibrationDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsCalibrationDone() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>* streamer) {
                       return this->StreamedIsCalibrationDone(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsCalibrationDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsCalibrationDone(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest* /*request*/, ::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsCalibrationDone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IndyFramework::Protobuf::EyeTask::CalibrationDoneRequest,::IndyFramework::Protobuf::EyeTask::CalibrationDoneResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetServerInfo<WithStreamedUnaryMethod_GetImage<WithStreamedUnaryMethod_GetClassList<WithStreamedUnaryMethod_Detect<WithStreamedUnaryMethod_Retrieve<WithStreamedUnaryMethod_GetWeldingLinesInfo<WithStreamedUnaryMethod_GetStraightLineInfo<WithStreamedUnaryMethod_GetCircularLineInfo<WithStreamedUnaryMethod_DoCalibration<WithStreamedUnaryMethod_IsCalibrationDone<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetServerInfo<WithStreamedUnaryMethod_GetImage<WithStreamedUnaryMethod_GetClassList<WithStreamedUnaryMethod_Detect<WithStreamedUnaryMethod_Retrieve<WithStreamedUnaryMethod_GetWeldingLinesInfo<WithStreamedUnaryMethod_GetStraightLineInfo<WithStreamedUnaryMethod_GetCircularLineInfo<WithStreamedUnaryMethod_DoCalibration<WithStreamedUnaryMethod_IsCalibrationDone<Service > > > > > > > > > > StreamedService;
};

}  // namespace EyeTask
}  // namespace Protobuf
}  // namespace IndyFramework


#endif  // GRPC_indyeye_2eproto__INCLUDED
