// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: moby_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_moby_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_moby_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_moby_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_moby_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[29]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_moby_5fmsgs_2eproto;
namespace Nrmk {
namespace IndyFramework {
class BMSData;
class BMSDataDefaultTypeInternal;
extern BMSDataDefaultTypeInternal _BMSData_default_instance_;
class BoolVal;
class BoolValDefaultTypeInternal;
extern BoolValDefaultTypeInternal _BoolVal_default_instance_;
class BoolVals;
class BoolValsDefaultTypeInternal;
extern BoolValsDefaultTypeInternal _BoolVals_default_instance_;
class DoubleVal;
class DoubleValDefaultTypeInternal;
extern DoubleValDefaultTypeInternal _DoubleVal_default_instance_;
class DoubleVals;
class DoubleValsDefaultTypeInternal;
extern DoubleValsDefaultTypeInternal _DoubleVals_default_instance_;
class DriveIndex;
class DriveIndexDefaultTypeInternal;
extern DriveIndexDefaultTypeInternal _DriveIndex_default_instance_;
class FloatVal;
class FloatValDefaultTypeInternal;
extern FloatValDefaultTypeInternal _FloatVal_default_instance_;
class FloatVals;
class FloatValsDefaultTypeInternal;
extern FloatValsDefaultTypeInternal _FloatVals_default_instance_;
class ForcedKinematicsData;
class ForcedKinematicsDataDefaultTypeInternal;
extern ForcedKinematicsDataDefaultTypeInternal _ForcedKinematicsData_default_instance_;
class GBool;
class GBoolDefaultTypeInternal;
extern GBoolDefaultTypeInternal _GBool_default_instance_;
class GFloat;
class GFloatDefaultTypeInternal;
extern GFloatDefaultTypeInternal _GFloat_default_instance_;
class GInt;
class GIntDefaultTypeInternal;
extern GIntDefaultTypeInternal _GInt_default_instance_;
class GString;
class GStringDefaultTypeInternal;
extern GStringDefaultTypeInternal _GString_default_instance_;
class IMUData;
class IMUDataDefaultTypeInternal;
extern IMUDataDefaultTypeInternal _IMUData_default_instance_;
class IRData;
class IRDataDefaultTypeInternal;
extern IRDataDefaultTypeInternal _IRData_default_instance_;
class IntVal;
class IntValDefaultTypeInternal;
extern IntValDefaultTypeInternal _IntVal_default_instance_;
class IntVals;
class IntValsDefaultTypeInternal;
extern IntValsDefaultTypeInternal _IntVals_default_instance_;
class MobyErrorState;
class MobyErrorStateDefaultTypeInternal;
extern MobyErrorStateDefaultTypeInternal _MobyErrorState_default_instance_;
class MobyPose;
class MobyPoseDefaultTypeInternal;
extern MobyPoseDefaultTypeInternal _MobyPose_default_instance_;
class MobyState;
class MobyStateDefaultTypeInternal;
extern MobyStateDefaultTypeInternal _MobyState_default_instance_;
class MobyVel;
class MobyVelDefaultTypeInternal;
extern MobyVelDefaultTypeInternal _MobyVel_default_instance_;
class MotorDriverRx;
class MotorDriverRxDefaultTypeInternal;
extern MotorDriverRxDefaultTypeInternal _MotorDriverRx_default_instance_;
class MotorDriverTx;
class MotorDriverTxDefaultTypeInternal;
extern MotorDriverTxDefaultTypeInternal _MotorDriverTx_default_instance_;
class RotationGain;
class RotationGainDefaultTypeInternal;
extern RotationGainDefaultTypeInternal _RotationGain_default_instance_;
class SwerveDoubles;
class SwerveDoublesDefaultTypeInternal;
extern SwerveDoublesDefaultTypeInternal _SwerveDoubles_default_instance_;
class TargetVel;
class TargetVelDefaultTypeInternal;
extern TargetVelDefaultTypeInternal _TargetVel_default_instance_;
class USData;
class USDataDefaultTypeInternal;
extern USDataDefaultTypeInternal _USData_default_instance_;
class VelAccBoundary;
class VelAccBoundaryDefaultTypeInternal;
extern VelAccBoundaryDefaultTypeInternal _VelAccBoundary_default_instance_;
class ZeroCount;
class ZeroCountDefaultTypeInternal;
extern ZeroCountDefaultTypeInternal _ZeroCount_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
PROTOBUF_NAMESPACE_OPEN
template<> ::Nrmk::IndyFramework::BMSData* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::BMSData>(Arena*);
template<> ::Nrmk::IndyFramework::BoolVal* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::BoolVal>(Arena*);
template<> ::Nrmk::IndyFramework::BoolVals* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::BoolVals>(Arena*);
template<> ::Nrmk::IndyFramework::DoubleVal* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::DoubleVal>(Arena*);
template<> ::Nrmk::IndyFramework::DoubleVals* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::DoubleVals>(Arena*);
template<> ::Nrmk::IndyFramework::DriveIndex* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::DriveIndex>(Arena*);
template<> ::Nrmk::IndyFramework::FloatVal* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::FloatVal>(Arena*);
template<> ::Nrmk::IndyFramework::FloatVals* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::FloatVals>(Arena*);
template<> ::Nrmk::IndyFramework::ForcedKinematicsData* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ForcedKinematicsData>(Arena*);
template<> ::Nrmk::IndyFramework::GBool* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::GBool>(Arena*);
template<> ::Nrmk::IndyFramework::GFloat* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::GFloat>(Arena*);
template<> ::Nrmk::IndyFramework::GInt* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::GInt>(Arena*);
template<> ::Nrmk::IndyFramework::GString* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::GString>(Arena*);
template<> ::Nrmk::IndyFramework::IMUData* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::IMUData>(Arena*);
template<> ::Nrmk::IndyFramework::IRData* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::IRData>(Arena*);
template<> ::Nrmk::IndyFramework::IntVal* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::IntVal>(Arena*);
template<> ::Nrmk::IndyFramework::IntVals* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::IntVals>(Arena*);
template<> ::Nrmk::IndyFramework::MobyErrorState* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MobyErrorState>(Arena*);
template<> ::Nrmk::IndyFramework::MobyPose* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MobyPose>(Arena*);
template<> ::Nrmk::IndyFramework::MobyState* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MobyState>(Arena*);
template<> ::Nrmk::IndyFramework::MobyVel* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MobyVel>(Arena*);
template<> ::Nrmk::IndyFramework::MotorDriverRx* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MotorDriverRx>(Arena*);
template<> ::Nrmk::IndyFramework::MotorDriverTx* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MotorDriverTx>(Arena*);
template<> ::Nrmk::IndyFramework::RotationGain* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::RotationGain>(Arena*);
template<> ::Nrmk::IndyFramework::SwerveDoubles* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::SwerveDoubles>(Arena*);
template<> ::Nrmk::IndyFramework::TargetVel* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TargetVel>(Arena*);
template<> ::Nrmk::IndyFramework::USData* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::USData>(Arena*);
template<> ::Nrmk::IndyFramework::VelAccBoundary* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::VelAccBoundary>(Arena*);
template<> ::Nrmk::IndyFramework::ZeroCount* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ZeroCount>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Nrmk {
namespace IndyFramework {

// ===================================================================

class DriveIndex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DriveIndex) */ {
 public:
  DriveIndex();
  virtual ~DriveIndex();

  DriveIndex(const DriveIndex& from);
  DriveIndex(DriveIndex&& from) noexcept
    : DriveIndex() {
    *this = ::std::move(from);
  }

  inline DriveIndex& operator=(const DriveIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline DriveIndex& operator=(DriveIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DriveIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DriveIndex* internal_default_instance() {
    return reinterpret_cast<const DriveIndex*>(
               &_DriveIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DriveIndex* other);
  friend void swap(DriveIndex& a, DriveIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DriveIndex* New() const final {
    return CreateMaybeMessage<DriveIndex>(nullptr);
  }

  DriveIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DriveIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DriveIndex& from);
  void MergeFrom(const DriveIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DriveIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.DriveIndex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 moby_index = 1;
  void clear_moby_index();
  static const int kMobyIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 moby_index() const;
  void set_moby_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DriveIndex)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 moby_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MotorDriverTx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MotorDriverTx) */ {
 public:
  MotorDriverTx();
  virtual ~MotorDriverTx();

  MotorDriverTx(const MotorDriverTx& from);
  MotorDriverTx(MotorDriverTx&& from) noexcept
    : MotorDriverTx() {
    *this = ::std::move(from);
  }

  inline MotorDriverTx& operator=(const MotorDriverTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorDriverTx& operator=(MotorDriverTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MotorDriverTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotorDriverTx* internal_default_instance() {
    return reinterpret_cast<const MotorDriverTx*>(
               &_MotorDriverTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MotorDriverTx* other);
  friend void swap(MotorDriverTx& a, MotorDriverTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MotorDriverTx* New() const final {
    return CreateMaybeMessage<MotorDriverTx>(nullptr);
  }

  MotorDriverTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotorDriverTx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotorDriverTx& from);
  void MergeFrom(const MotorDriverTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorDriverTx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MotorDriverTx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 statusWord = 1;
  void clear_statusword();
  static const int kStatusWordFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 statusword() const;
  void set_statusword(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 modeOpDisp = 2;
  void clear_modeopdisp();
  static const int kModeOpDispFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 modeopdisp() const;
  void set_modeopdisp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 actualPosition = 3;
  void clear_actualposition();
  static const int kActualPositionFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 actualposition() const;
  void set_actualposition(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 actualVelocity = 4;
  void clear_actualvelocity();
  static const int kActualVelocityFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 actualvelocity() const;
  void set_actualvelocity(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 actualTorque = 5;
  void clear_actualtorque();
  static const int kActualTorqueFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 actualtorque() const;
  void set_actualtorque(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MotorDriverTx)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statusword_;
  ::PROTOBUF_NAMESPACE_ID::int32 modeopdisp_;
  ::PROTOBUF_NAMESPACE_ID::int32 actualposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 actualvelocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 actualtorque_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MotorDriverRx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MotorDriverRx) */ {
 public:
  MotorDriverRx();
  virtual ~MotorDriverRx();

  MotorDriverRx(const MotorDriverRx& from);
  MotorDriverRx(MotorDriverRx&& from) noexcept
    : MotorDriverRx() {
    *this = ::std::move(from);
  }

  inline MotorDriverRx& operator=(const MotorDriverRx& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorDriverRx& operator=(MotorDriverRx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MotorDriverRx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotorDriverRx* internal_default_instance() {
    return reinterpret_cast<const MotorDriverRx*>(
               &_MotorDriverRx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MotorDriverRx* other);
  friend void swap(MotorDriverRx& a, MotorDriverRx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MotorDriverRx* New() const final {
    return CreateMaybeMessage<MotorDriverRx>(nullptr);
  }

  MotorDriverRx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotorDriverRx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotorDriverRx& from);
  void MergeFrom(const MotorDriverRx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorDriverRx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MotorDriverRx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 controlWord = 1;
  void clear_controlword();
  static const int kControlWordFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 controlword() const;
  void set_controlword(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 modeOp = 2;
  void clear_modeop();
  static const int kModeOpFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 modeop() const;
  void set_modeop(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 targetPosition = 3;
  void clear_targetposition();
  static const int kTargetPositionFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 targetposition() const;
  void set_targetposition(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 targetVelocity = 4;
  void clear_targetvelocity();
  static const int kTargetVelocityFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 targetvelocity() const;
  void set_targetvelocity(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 targetTorque = 5;
  void clear_targettorque();
  static const int kTargetTorqueFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 targettorque() const;
  void set_targettorque(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MotorDriverRx)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controlword_;
  ::PROTOBUF_NAMESPACE_ID::int32 modeop_;
  ::PROTOBUF_NAMESPACE_ID::int32 targetposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 targetvelocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 targettorque_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MobyState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MobyState) */ {
 public:
  MobyState();
  virtual ~MobyState();

  MobyState(const MobyState& from);
  MobyState(MobyState&& from) noexcept
    : MobyState() {
    *this = ::std::move(from);
  }

  inline MobyState& operator=(const MobyState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobyState& operator=(MobyState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MobyState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MobyState* internal_default_instance() {
    return reinterpret_cast<const MobyState*>(
               &_MobyState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MobyState* other);
  friend void swap(MobyState& a, MobyState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MobyState* New() const final {
    return CreateMaybeMessage<MobyState>(nullptr);
  }

  MobyState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MobyState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MobyState& from);
  void MergeFrom(const MobyState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobyState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MobyState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool is_ready = 2;
  void clear_is_ready();
  static const int kIsReadyFieldNumber = 2;
  bool is_ready() const;
  void set_is_ready(bool value);

  // bool is_enable = 3;
  void clear_is_enable();
  static const int kIsEnableFieldNumber = 3;
  bool is_enable() const;
  void set_is_enable(bool value);

  // bool is_moving = 4;
  void clear_is_moving();
  static const int kIsMovingFieldNumber = 4;
  bool is_moving() const;
  void set_is_moving(bool value);

  // bool is_violation = 5;
  void clear_is_violation();
  static const int kIsViolationFieldNumber = 5;
  bool is_violation() const;
  void set_is_violation(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MobyState)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  bool is_ready_;
  bool is_enable_;
  bool is_moving_;
  bool is_violation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MobyErrorState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MobyErrorState) */ {
 public:
  MobyErrorState();
  virtual ~MobyErrorState();

  MobyErrorState(const MobyErrorState& from);
  MobyErrorState(MobyErrorState&& from) noexcept
    : MobyErrorState() {
    *this = ::std::move(from);
  }

  inline MobyErrorState& operator=(const MobyErrorState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobyErrorState& operator=(MobyErrorState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MobyErrorState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MobyErrorState* internal_default_instance() {
    return reinterpret_cast<const MobyErrorState*>(
               &_MobyErrorState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(MobyErrorState* other);
  friend void swap(MobyErrorState& a, MobyErrorState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MobyErrorState* New() const final {
    return CreateMaybeMessage<MobyErrorState>(nullptr);
  }

  MobyErrorState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MobyErrorState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MobyErrorState& from);
  void MergeFrom(const MobyErrorState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobyErrorState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MobyErrorState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 errorState = 1;
  void clear_errorstate();
  static const int kErrorStateFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 errorstate() const;
  void set_errorstate(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 errorIndex1 = 2;
  void clear_errorindex1();
  static const int kErrorIndex1FieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 errorindex1() const;
  void set_errorindex1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 errorIndex2 = 3;
  void clear_errorindex2();
  static const int kErrorIndex2FieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 errorindex2() const;
  void set_errorindex2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 errorIndex3 = 4;
  void clear_errorindex3();
  static const int kErrorIndex3FieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 errorindex3() const;
  void set_errorindex3(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MobyErrorState)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 errorstate_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorindex1_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorindex2_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorindex3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MobyPose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MobyPose) */ {
 public:
  MobyPose();
  virtual ~MobyPose();

  MobyPose(const MobyPose& from);
  MobyPose(MobyPose&& from) noexcept
    : MobyPose() {
    *this = ::std::move(from);
  }

  inline MobyPose& operator=(const MobyPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobyPose& operator=(MobyPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MobyPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MobyPose* internal_default_instance() {
    return reinterpret_cast<const MobyPose*>(
               &_MobyPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MobyPose* other);
  friend void swap(MobyPose& a, MobyPose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MobyPose* New() const final {
    return CreateMaybeMessage<MobyPose>(nullptr);
  }

  MobyPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MobyPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MobyPose& from);
  void MergeFrom(const MobyPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobyPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MobyPose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double px = 1;
  void clear_px();
  static const int kPxFieldNumber = 1;
  double px() const;
  void set_px(double value);

  // double py = 2;
  void clear_py();
  static const int kPyFieldNumber = 2;
  double py() const;
  void set_py(double value);

  // double pw = 3;
  void clear_pw();
  static const int kPwFieldNumber = 3;
  double pw() const;
  void set_pw(double value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MobyPose)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double px_;
  double py_;
  double pw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MobyVel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MobyVel) */ {
 public:
  MobyVel();
  virtual ~MobyVel();

  MobyVel(const MobyVel& from);
  MobyVel(MobyVel&& from) noexcept
    : MobyVel() {
    *this = ::std::move(from);
  }

  inline MobyVel& operator=(const MobyVel& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobyVel& operator=(MobyVel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MobyVel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MobyVel* internal_default_instance() {
    return reinterpret_cast<const MobyVel*>(
               &_MobyVel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MobyVel* other);
  friend void swap(MobyVel& a, MobyVel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MobyVel* New() const final {
    return CreateMaybeMessage<MobyVel>(nullptr);
  }

  MobyVel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MobyVel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MobyVel& from);
  void MergeFrom(const MobyVel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobyVel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MobyVel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double vx = 1;
  void clear_vx();
  static const int kVxFieldNumber = 1;
  double vx() const;
  void set_vx(double value);

  // double vy = 2;
  void clear_vy();
  static const int kVyFieldNumber = 2;
  double vy() const;
  void set_vy(double value);

  // double vw = 3;
  void clear_vw();
  static const int kVwFieldNumber = 3;
  double vw() const;
  void set_vw(double value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MobyVel)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double vx_;
  double vy_;
  double vw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class IMUData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IMUData) */ {
 public:
  IMUData();
  virtual ~IMUData();

  IMUData(const IMUData& from);
  IMUData(IMUData&& from) noexcept
    : IMUData() {
    *this = ::std::move(from);
  }

  inline IMUData& operator=(const IMUData& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUData& operator=(IMUData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IMUData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUData* internal_default_instance() {
    return reinterpret_cast<const IMUData*>(
               &_IMUData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(IMUData* other);
  friend void swap(IMUData& a, IMUData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMUData* New() const final {
    return CreateMaybeMessage<IMUData>(nullptr);
  }

  IMUData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMUData& from);
  void MergeFrom(const IMUData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.IMUData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double angleX = 1;
  void clear_anglex();
  static const int kAngleXFieldNumber = 1;
  double anglex() const;
  void set_anglex(double value);

  // double angleY = 2;
  void clear_angley();
  static const int kAngleYFieldNumber = 2;
  double angley() const;
  void set_angley(double value);

  // double angleZ = 3;
  void clear_anglez();
  static const int kAngleZFieldNumber = 3;
  double anglez() const;
  void set_anglez(double value);

  // double angleVelX = 4;
  void clear_anglevelx();
  static const int kAngleVelXFieldNumber = 4;
  double anglevelx() const;
  void set_anglevelx(double value);

  // double angleVelY = 5;
  void clear_anglevely();
  static const int kAngleVelYFieldNumber = 5;
  double anglevely() const;
  void set_anglevely(double value);

  // double angleVelZ = 6;
  void clear_anglevelz();
  static const int kAngleVelZFieldNumber = 6;
  double anglevelz() const;
  void set_anglevelz(double value);

  // double linAccX = 7;
  void clear_linaccx();
  static const int kLinAccXFieldNumber = 7;
  double linaccx() const;
  void set_linaccx(double value);

  // double linAccY = 8;
  void clear_linaccy();
  static const int kLinAccYFieldNumber = 8;
  double linaccy() const;
  void set_linaccy(double value);

  // double linAccZ = 9;
  void clear_linaccz();
  static const int kLinAccZFieldNumber = 9;
  double linaccz() const;
  void set_linaccz(double value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IMUData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double anglex_;
  double angley_;
  double anglez_;
  double anglevelx_;
  double anglevely_;
  double anglevelz_;
  double linaccx_;
  double linaccy_;
  double linaccz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SwerveDoubles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SwerveDoubles) */ {
 public:
  SwerveDoubles();
  virtual ~SwerveDoubles();

  SwerveDoubles(const SwerveDoubles& from);
  SwerveDoubles(SwerveDoubles&& from) noexcept
    : SwerveDoubles() {
    *this = ::std::move(from);
  }

  inline SwerveDoubles& operator=(const SwerveDoubles& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwerveDoubles& operator=(SwerveDoubles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwerveDoubles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwerveDoubles* internal_default_instance() {
    return reinterpret_cast<const SwerveDoubles*>(
               &_SwerveDoubles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SwerveDoubles* other);
  friend void swap(SwerveDoubles& a, SwerveDoubles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SwerveDoubles* New() const final {
    return CreateMaybeMessage<SwerveDoubles>(nullptr);
  }

  SwerveDoubles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwerveDoubles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwerveDoubles& from);
  void MergeFrom(const SwerveDoubles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwerveDoubles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.SwerveDoubles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double fl = 1;
  void clear_fl();
  static const int kFlFieldNumber = 1;
  double fl() const;
  void set_fl(double value);

  // double fr = 2;
  void clear_fr();
  static const int kFrFieldNumber = 2;
  double fr() const;
  void set_fr(double value);

  // double bl = 3;
  void clear_bl();
  static const int kBlFieldNumber = 3;
  double bl() const;
  void set_bl(double value);

  // double br = 4;
  void clear_br();
  static const int kBrFieldNumber = 4;
  double br() const;
  void set_br(double value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SwerveDoubles)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double fl_;
  double fr_;
  double bl_;
  double br_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TargetVel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TargetVel) */ {
 public:
  TargetVel();
  virtual ~TargetVel();

  TargetVel(const TargetVel& from);
  TargetVel(TargetVel&& from) noexcept
    : TargetVel() {
    *this = ::std::move(from);
  }

  inline TargetVel& operator=(const TargetVel& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetVel& operator=(TargetVel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetVel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetVel* internal_default_instance() {
    return reinterpret_cast<const TargetVel*>(
               &_TargetVel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(TargetVel* other);
  friend void swap(TargetVel& a, TargetVel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TargetVel* New() const final {
    return CreateMaybeMessage<TargetVel>(nullptr);
  }

  TargetVel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetVel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetVel& from);
  void MergeFrom(const TargetVel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetVel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TargetVel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double vx = 1;
  void clear_vx();
  static const int kVxFieldNumber = 1;
  double vx() const;
  void set_vx(double value);

  // double vy = 2;
  void clear_vy();
  static const int kVyFieldNumber = 2;
  double vy() const;
  void set_vy(double value);

  // double vw = 3;
  void clear_vw();
  static const int kVwFieldNumber = 3;
  double vw() const;
  void set_vw(double value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TargetVel)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double vx_;
  double vy_;
  double vw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ZeroCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ZeroCount) */ {
 public:
  ZeroCount();
  virtual ~ZeroCount();

  ZeroCount(const ZeroCount& from);
  ZeroCount(ZeroCount&& from) noexcept
    : ZeroCount() {
    *this = ::std::move(from);
  }

  inline ZeroCount& operator=(const ZeroCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZeroCount& operator=(ZeroCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZeroCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZeroCount* internal_default_instance() {
    return reinterpret_cast<const ZeroCount*>(
               &_ZeroCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ZeroCount* other);
  friend void swap(ZeroCount& a, ZeroCount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ZeroCount* New() const final {
    return CreateMaybeMessage<ZeroCount>(nullptr);
  }

  ZeroCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZeroCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZeroCount& from);
  void MergeFrom(const ZeroCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZeroCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ZeroCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 fl = 1;
  void clear_fl();
  static const int kFlFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 fl() const;
  void set_fl(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 fr = 2;
  void clear_fr();
  static const int kFrFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 fr() const;
  void set_fr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 bl = 3;
  void clear_bl();
  static const int kBlFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 bl() const;
  void set_bl(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 br = 4;
  void clear_br();
  static const int kBrFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 br() const;
  void set_br(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ZeroCount)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 fl_;
  ::PROTOBUF_NAMESPACE_ID::int32 fr_;
  ::PROTOBUF_NAMESPACE_ID::int32 bl_;
  ::PROTOBUF_NAMESPACE_ID::int32 br_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class IRData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IRData) */ {
 public:
  IRData();
  virtual ~IRData();

  IRData(const IRData& from);
  IRData(IRData&& from) noexcept
    : IRData() {
    *this = ::std::move(from);
  }

  inline IRData& operator=(const IRData& from) {
    CopyFrom(from);
    return *this;
  }
  inline IRData& operator=(IRData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IRData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IRData* internal_default_instance() {
    return reinterpret_cast<const IRData*>(
               &_IRData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(IRData* other);
  friend void swap(IRData& a, IRData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IRData* New() const final {
    return CreateMaybeMessage<IRData>(nullptr);
  }

  IRData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IRData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IRData& from);
  void MergeFrom(const IRData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IRData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.IRData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ir_front1 = 1;
  void clear_ir_front1();
  static const int kIrFront1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_front1() const;
  void set_ir_front1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ir_front2 = 2;
  void clear_ir_front2();
  static const int kIrFront2FieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_front2() const;
  void set_ir_front2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ir_left1 = 3;
  void clear_ir_left1();
  static const int kIrLeft1FieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_left1() const;
  void set_ir_left1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ir_left2 = 4;
  void clear_ir_left2();
  static const int kIrLeft2FieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_left2() const;
  void set_ir_left2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ir_left3 = 5;
  void clear_ir_left3();
  static const int kIrLeft3FieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_left3() const;
  void set_ir_left3(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ir_rear = 6;
  void clear_ir_rear();
  static const int kIrRearFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_rear() const;
  void set_ir_rear(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ir_right1 = 7;
  void clear_ir_right1();
  static const int kIrRight1FieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_right1() const;
  void set_ir_right1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ir_right2 = 8;
  void clear_ir_right2();
  static const int kIrRight2FieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_right2() const;
  void set_ir_right2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ir_right3 = 9;
  void clear_ir_right3();
  static const int kIrRight3FieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_right3() const;
  void set_ir_right3(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IRData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_front1_;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_front2_;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_left1_;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_left2_;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_left3_;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_rear_;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_right1_;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_right2_;
  ::PROTOBUF_NAMESPACE_ID::int32 ir_right3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class USData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.USData) */ {
 public:
  USData();
  virtual ~USData();

  USData(const USData& from);
  USData(USData&& from) noexcept
    : USData() {
    *this = ::std::move(from);
  }

  inline USData& operator=(const USData& from) {
    CopyFrom(from);
    return *this;
  }
  inline USData& operator=(USData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USData* internal_default_instance() {
    return reinterpret_cast<const USData*>(
               &_USData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(USData* other);
  friend void swap(USData& a, USData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline USData* New() const final {
    return CreateMaybeMessage<USData>(nullptr);
  }

  USData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USData& from);
  void MergeFrom(const USData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.USData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 us_front_left1 = 1;
  void clear_us_front_left1();
  static const int kUsFrontLeft1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_left1() const;
  void set_us_front_left1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_front_left2 = 2;
  void clear_us_front_left2();
  static const int kUsFrontLeft2FieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_left2() const;
  void set_us_front_left2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_front_left3 = 3;
  void clear_us_front_left3();
  static const int kUsFrontLeft3FieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_left3() const;
  void set_us_front_left3(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_front_ground = 4;
  void clear_us_front_ground();
  static const int kUsFrontGroundFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_ground() const;
  void set_us_front_ground(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_front_right1 = 5;
  void clear_us_front_right1();
  static const int kUsFrontRight1FieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_right1() const;
  void set_us_front_right1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_front_right2 = 6;
  void clear_us_front_right2();
  static const int kUsFrontRight2FieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_right2() const;
  void set_us_front_right2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_front_right3 = 7;
  void clear_us_front_right3();
  static const int kUsFrontRight3FieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_right3() const;
  void set_us_front_right3(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_front_right4 = 8;
  void clear_us_front_right4();
  static const int kUsFrontRight4FieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_right4() const;
  void set_us_front_right4(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_back_right1 = 9;
  void clear_us_back_right1();
  static const int kUsBackRight1FieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_right1() const;
  void set_us_back_right1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_back_right2 = 10;
  void clear_us_back_right2();
  static const int kUsBackRight2FieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_right2() const;
  void set_us_back_right2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_back_right3 = 11;
  void clear_us_back_right3();
  static const int kUsBackRight3FieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_right3() const;
  void set_us_back_right3(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_back_ground = 12;
  void clear_us_back_ground();
  static const int kUsBackGroundFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_ground() const;
  void set_us_back_ground(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_back_left1 = 13;
  void clear_us_back_left1();
  static const int kUsBackLeft1FieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_left1() const;
  void set_us_back_left1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_back_left2 = 14;
  void clear_us_back_left2();
  static const int kUsBackLeft2FieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_left2() const;
  void set_us_back_left2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_back_left3 = 15;
  void clear_us_back_left3();
  static const int kUsBackLeft3FieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_left3() const;
  void set_us_back_left3(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 us_back_left4 = 16;
  void clear_us_back_left4();
  static const int kUsBackLeft4FieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_left4() const;
  void set_us_back_left4(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.USData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_left1_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_left2_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_left3_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_ground_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_right1_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_right2_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_right3_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_front_right4_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_right1_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_right2_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_right3_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_ground_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_left1_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_left2_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_left3_;
  ::PROTOBUF_NAMESPACE_ID::int32 us_back_left4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class BMSData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.BMSData) */ {
 public:
  BMSData();
  virtual ~BMSData();

  BMSData(const BMSData& from);
  BMSData(BMSData&& from) noexcept
    : BMSData() {
    *this = ::std::move(from);
  }

  inline BMSData& operator=(const BMSData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BMSData& operator=(BMSData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BMSData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BMSData* internal_default_instance() {
    return reinterpret_cast<const BMSData*>(
               &_BMSData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(BMSData* other);
  friend void swap(BMSData& a, BMSData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BMSData* New() const final {
    return CreateMaybeMessage<BMSData>(nullptr);
  }

  BMSData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BMSData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BMSData& from);
  void MergeFrom(const BMSData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BMSData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.BMSData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 bms_status = 1;
  int bms_status_size() const;
  void clear_bms_status();
  static const int kBmsStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 bms_status(int index) const;
  void set_bms_status(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bms_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bms_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bms_status();

  // repeated int32 pack_volt = 2;
  int pack_volt_size() const;
  void clear_pack_volt();
  static const int kPackVoltFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 pack_volt(int index) const;
  void set_pack_volt(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pack_volt(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pack_volt() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pack_volt();

  // repeated int32 battery_volt = 3;
  int battery_volt_size() const;
  void clear_battery_volt();
  static const int kBatteryVoltFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 battery_volt(int index) const;
  void set_battery_volt(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_battery_volt(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      battery_volt() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_battery_volt();

  // repeated int32 pack_current1 = 4;
  int pack_current1_size() const;
  void clear_pack_current1();
  static const int kPackCurrent1FieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 pack_current1(int index) const;
  void set_pack_current1(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pack_current1(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pack_current1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pack_current1();

  // repeated int32 pack_current2 = 5;
  int pack_current2_size() const;
  void clear_pack_current2();
  static const int kPackCurrent2FieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 pack_current2(int index) const;
  void set_pack_current2(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pack_current2(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pack_current2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pack_current2();

  // repeated int32 bms_temperature = 20;
  int bms_temperature_size() const;
  void clear_bms_temperature();
  static const int kBmsTemperatureFieldNumber = 20;
  ::PROTOBUF_NAMESPACE_ID::int32 bms_temperature(int index) const;
  void set_bms_temperature(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bms_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bms_temperature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bms_temperature();

  // repeated int32 cell_volt = 21;
  int cell_volt_size() const;
  void clear_cell_volt();
  static const int kCellVoltFieldNumber = 21;
  ::PROTOBUF_NAMESPACE_ID::int32 cell_volt(int index) const;
  void set_cell_volt(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_cell_volt(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      cell_volt() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_cell_volt();

  // int32 isCharge = 6;
  void clear_ischarge();
  static const int kIsChargeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 ischarge() const;
  void set_ischarge(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 isCellOverVolt = 7;
  void clear_iscellovervolt();
  static const int kIsCellOverVoltFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 iscellovervolt() const;
  void set_iscellovervolt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 isCellUnderVolt = 8;
  void clear_iscellundervolt();
  static const int kIsCellUnderVoltFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 iscellundervolt() const;
  void set_iscellundervolt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 isOverCurCharge = 9;
  void clear_isovercurcharge();
  static const int kIsOverCurChargeFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 isovercurcharge() const;
  void set_isovercurcharge(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 isOverCurDischrg = 10;
  void clear_isovercurdischrg();
  static const int kIsOverCurDischrgFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 isovercurdischrg() const;
  void set_isovercurdischrg(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 isShortCircuit = 11;
  void clear_isshortcircuit();
  static const int kIsShortCircuitFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int32 isshortcircuit() const;
  void set_isshortcircuit(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 isOverTemperature = 12;
  void clear_isovertemperature();
  static const int kIsOverTemperatureFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 isovertemperature() const;
  void set_isovertemperature(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 isPackOverVolt = 13;
  void clear_ispackovervolt();
  static const int kIsPackOverVoltFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 ispackovervolt() const;
  void set_ispackovervolt(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 SOC = 14;
  void clear_soc();
  static const int kSOCFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int32 soc() const;
  void set_soc(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 SOH = 15;
  void clear_soh();
  static const int kSOHFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int32 soh() const;
  void set_soh(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 time_charge = 16;
  void clear_time_charge();
  static const int kTimeChargeFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int32 time_charge() const;
  void set_time_charge(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 time_dcharge = 17;
  void clear_time_dcharge();
  static const int kTimeDchargeFieldNumber = 17;
  ::PROTOBUF_NAMESPACE_ID::int32 time_dcharge() const;
  void set_time_dcharge(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 rem_capAh = 18;
  void clear_rem_capah();
  static const int kRemCapAhFieldNumber = 18;
  ::PROTOBUF_NAMESPACE_ID::int32 rem_capah() const;
  void set_rem_capah(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 rem_capWh = 19;
  void clear_rem_capwh();
  static const int kRemCapWhFieldNumber = 19;
  ::PROTOBUF_NAMESPACE_ID::int32 rem_capwh() const;
  void set_rem_capwh(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.BMSData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bms_status_;
  mutable std::atomic<int> _bms_status_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pack_volt_;
  mutable std::atomic<int> _pack_volt_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > battery_volt_;
  mutable std::atomic<int> _battery_volt_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pack_current1_;
  mutable std::atomic<int> _pack_current1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pack_current2_;
  mutable std::atomic<int> _pack_current2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bms_temperature_;
  mutable std::atomic<int> _bms_temperature_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > cell_volt_;
  mutable std::atomic<int> _cell_volt_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 ischarge_;
  ::PROTOBUF_NAMESPACE_ID::int32 iscellovervolt_;
  ::PROTOBUF_NAMESPACE_ID::int32 iscellundervolt_;
  ::PROTOBUF_NAMESPACE_ID::int32 isovercurcharge_;
  ::PROTOBUF_NAMESPACE_ID::int32 isovercurdischrg_;
  ::PROTOBUF_NAMESPACE_ID::int32 isshortcircuit_;
  ::PROTOBUF_NAMESPACE_ID::int32 isovertemperature_;
  ::PROTOBUF_NAMESPACE_ID::int32 ispackovervolt_;
  ::PROTOBUF_NAMESPACE_ID::int32 soc_;
  ::PROTOBUF_NAMESPACE_ID::int32 soh_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_charge_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_dcharge_;
  ::PROTOBUF_NAMESPACE_ID::int32 rem_capah_;
  ::PROTOBUF_NAMESPACE_ID::int32 rem_capwh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ForcedKinematicsData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ForcedKinematicsData) */ {
 public:
  ForcedKinematicsData();
  virtual ~ForcedKinematicsData();

  ForcedKinematicsData(const ForcedKinematicsData& from);
  ForcedKinematicsData(ForcedKinematicsData&& from) noexcept
    : ForcedKinematicsData() {
    *this = ::std::move(from);
  }

  inline ForcedKinematicsData& operator=(const ForcedKinematicsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForcedKinematicsData& operator=(ForcedKinematicsData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForcedKinematicsData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForcedKinematicsData* internal_default_instance() {
    return reinterpret_cast<const ForcedKinematicsData*>(
               &_ForcedKinematicsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ForcedKinematicsData* other);
  friend void swap(ForcedKinematicsData& a, ForcedKinematicsData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForcedKinematicsData* New() const final {
    return CreateMaybeMessage<ForcedKinematicsData>(nullptr);
  }

  ForcedKinematicsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForcedKinematicsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForcedKinematicsData& from);
  void MergeFrom(const ForcedKinematicsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForcedKinematicsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ForcedKinematicsData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool activate = 1;
  void clear_activate();
  static const int kActivateFieldNumber = 1;
  bool activate() const;
  void set_activate(bool value);

  // int32 angle = 2;
  void clear_angle();
  static const int kAngleFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 angle() const;
  void set_angle(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ForcedKinematicsData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool activate_;
  ::PROTOBUF_NAMESPACE_ID::int32 angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GBool :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.GBool) */ {
 public:
  GBool();
  virtual ~GBool();

  GBool(const GBool& from);
  GBool(GBool&& from) noexcept
    : GBool() {
    *this = ::std::move(from);
  }

  inline GBool& operator=(const GBool& from) {
    CopyFrom(from);
    return *this;
  }
  inline GBool& operator=(GBool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GBool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GBool* internal_default_instance() {
    return reinterpret_cast<const GBool*>(
               &_GBool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(GBool* other);
  friend void swap(GBool& a, GBool& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GBool* New() const final {
    return CreateMaybeMessage<GBool>(nullptr);
  }

  GBool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GBool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GBool& from);
  void MergeFrom(const GBool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GBool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.GBool";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 idx = 1;
  void clear_idx();
  static const int kIdxFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool val = 2;
  void clear_val();
  static const int kValFieldNumber = 2;
  bool val() const;
  void set_val(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.GBool)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  bool val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GInt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.GInt) */ {
 public:
  GInt();
  virtual ~GInt();

  GInt(const GInt& from);
  GInt(GInt&& from) noexcept
    : GInt() {
    *this = ::std::move(from);
  }

  inline GInt& operator=(const GInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline GInt& operator=(GInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GInt* internal_default_instance() {
    return reinterpret_cast<const GInt*>(
               &_GInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(GInt* other);
  friend void swap(GInt& a, GInt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GInt* New() const final {
    return CreateMaybeMessage<GInt>(nullptr);
  }

  GInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GInt& from);
  void MergeFrom(const GInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.GInt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 idx = 1;
  void clear_idx();
  static const int kIdxFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 val = 2;
  void clear_val();
  static const int kValFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.GInt)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GFloat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.GFloat) */ {
 public:
  GFloat();
  virtual ~GFloat();

  GFloat(const GFloat& from);
  GFloat(GFloat&& from) noexcept
    : GFloat() {
    *this = ::std::move(from);
  }

  inline GFloat& operator=(const GFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline GFloat& operator=(GFloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GFloat* internal_default_instance() {
    return reinterpret_cast<const GFloat*>(
               &_GFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(GFloat* other);
  friend void swap(GFloat& a, GFloat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GFloat* New() const final {
    return CreateMaybeMessage<GFloat>(nullptr);
  }

  GFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GFloat& from);
  void MergeFrom(const GFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.GFloat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 idx = 1;
  void clear_idx();
  static const int kIdxFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float val = 2;
  void clear_val();
  static const int kValFieldNumber = 2;
  float val() const;
  void set_val(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.GFloat)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  float val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GString :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.GString) */ {
 public:
  GString();
  virtual ~GString();

  GString(const GString& from);
  GString(GString&& from) noexcept
    : GString() {
    *this = ::std::move(from);
  }

  inline GString& operator=(const GString& from) {
    CopyFrom(from);
    return *this;
  }
  inline GString& operator=(GString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GString* internal_default_instance() {
    return reinterpret_cast<const GString*>(
               &_GString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(GString* other);
  friend void swap(GString& a, GString& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GString* New() const final {
    return CreateMaybeMessage<GString>(nullptr);
  }

  GString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GString& from);
  void MergeFrom(const GString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.GString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string val = 2;
  void clear_val();
  static const int kValFieldNumber = 2;
  const std::string& val() const;
  void set_val(const std::string& value);
  void set_val(std::string&& value);
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  std::string* mutable_val();
  std::string* release_val();
  void set_allocated_val(std::string* val);

  // int32 idx = 1;
  void clear_idx();
  static const int kIdxFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.GString)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class BoolVal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.BoolVal) */ {
 public:
  BoolVal();
  virtual ~BoolVal();

  BoolVal(const BoolVal& from);
  BoolVal(BoolVal&& from) noexcept
    : BoolVal() {
    *this = ::std::move(from);
  }

  inline BoolVal& operator=(const BoolVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolVal& operator=(BoolVal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoolVal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoolVal* internal_default_instance() {
    return reinterpret_cast<const BoolVal*>(
               &_BoolVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(BoolVal* other);
  friend void swap(BoolVal& a, BoolVal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoolVal* New() const final {
    return CreateMaybeMessage<BoolVal>(nullptr);
  }

  BoolVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolVal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoolVal& from);
  void MergeFrom(const BoolVal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolVal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.BoolVal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  bool val() const;
  void set_val(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.BoolVal)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class BoolVals :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.BoolVals) */ {
 public:
  BoolVals();
  virtual ~BoolVals();

  BoolVals(const BoolVals& from);
  BoolVals(BoolVals&& from) noexcept
    : BoolVals() {
    *this = ::std::move(from);
  }

  inline BoolVals& operator=(const BoolVals& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolVals& operator=(BoolVals&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoolVals& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoolVals* internal_default_instance() {
    return reinterpret_cast<const BoolVals*>(
               &_BoolVals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(BoolVals* other);
  friend void swap(BoolVals& a, BoolVals& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoolVals* New() const final {
    return CreateMaybeMessage<BoolVals>(nullptr);
  }

  BoolVals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolVals>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoolVals& from);
  void MergeFrom(const BoolVals& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolVals* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.BoolVals";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool val = 1;
  int val_size() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  bool val(int index) const;
  void set_val(int index, bool value);
  void add_val(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.BoolVals)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > val_;
  mutable std::atomic<int> _val_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class IntVal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IntVal) */ {
 public:
  IntVal();
  virtual ~IntVal();

  IntVal(const IntVal& from);
  IntVal(IntVal&& from) noexcept
    : IntVal() {
    *this = ::std::move(from);
  }

  inline IntVal& operator=(const IntVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntVal& operator=(IntVal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntVal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntVal* internal_default_instance() {
    return reinterpret_cast<const IntVal*>(
               &_IntVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(IntVal* other);
  friend void swap(IntVal& a, IntVal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntVal* New() const final {
    return CreateMaybeMessage<IntVal>(nullptr);
  }

  IntVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntVal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntVal& from);
  void MergeFrom(const IntVal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntVal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.IntVal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IntVal)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class IntVals :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IntVals) */ {
 public:
  IntVals();
  virtual ~IntVals();

  IntVals(const IntVals& from);
  IntVals(IntVals&& from) noexcept
    : IntVals() {
    *this = ::std::move(from);
  }

  inline IntVals& operator=(const IntVals& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntVals& operator=(IntVals&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntVals& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntVals* internal_default_instance() {
    return reinterpret_cast<const IntVals*>(
               &_IntVals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(IntVals* other);
  friend void swap(IntVals& a, IntVals& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntVals* New() const final {
    return CreateMaybeMessage<IntVals>(nullptr);
  }

  IntVals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntVals>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntVals& from);
  void MergeFrom(const IntVals& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntVals* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.IntVals";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 val = 1;
  int val_size() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 val(int index) const;
  void set_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IntVals)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > val_;
  mutable std::atomic<int> _val_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class FloatVal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FloatVal) */ {
 public:
  FloatVal();
  virtual ~FloatVal();

  FloatVal(const FloatVal& from);
  FloatVal(FloatVal&& from) noexcept
    : FloatVal() {
    *this = ::std::move(from);
  }

  inline FloatVal& operator=(const FloatVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatVal& operator=(FloatVal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatVal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatVal* internal_default_instance() {
    return reinterpret_cast<const FloatVal*>(
               &_FloatVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(FloatVal* other);
  friend void swap(FloatVal& a, FloatVal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FloatVal* New() const final {
    return CreateMaybeMessage<FloatVal>(nullptr);
  }

  FloatVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatVal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatVal& from);
  void MergeFrom(const FloatVal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatVal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.FloatVal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  float val() const;
  void set_val(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FloatVal)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class FloatVals :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FloatVals) */ {
 public:
  FloatVals();
  virtual ~FloatVals();

  FloatVals(const FloatVals& from);
  FloatVals(FloatVals&& from) noexcept
    : FloatVals() {
    *this = ::std::move(from);
  }

  inline FloatVals& operator=(const FloatVals& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatVals& operator=(FloatVals&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatVals& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatVals* internal_default_instance() {
    return reinterpret_cast<const FloatVals*>(
               &_FloatVals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(FloatVals* other);
  friend void swap(FloatVals& a, FloatVals& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FloatVals* New() const final {
    return CreateMaybeMessage<FloatVals>(nullptr);
  }

  FloatVals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatVals>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatVals& from);
  void MergeFrom(const FloatVals& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatVals* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.FloatVals";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float val = 1;
  int val_size() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  float val(int index) const;
  void set_val(int index, float value);
  void add_val(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FloatVals)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > val_;
  mutable std::atomic<int> _val_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DoubleVal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DoubleVal) */ {
 public:
  DoubleVal();
  virtual ~DoubleVal();

  DoubleVal(const DoubleVal& from);
  DoubleVal(DoubleVal&& from) noexcept
    : DoubleVal() {
    *this = ::std::move(from);
  }

  inline DoubleVal& operator=(const DoubleVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleVal& operator=(DoubleVal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleVal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleVal* internal_default_instance() {
    return reinterpret_cast<const DoubleVal*>(
               &_DoubleVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(DoubleVal* other);
  friend void swap(DoubleVal& a, DoubleVal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoubleVal* New() const final {
    return CreateMaybeMessage<DoubleVal>(nullptr);
  }

  DoubleVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleVal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleVal& from);
  void MergeFrom(const DoubleVal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleVal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.DoubleVal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  double val() const;
  void set_val(double value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DoubleVal)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DoubleVals :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.DoubleVals) */ {
 public:
  DoubleVals();
  virtual ~DoubleVals();

  DoubleVals(const DoubleVals& from);
  DoubleVals(DoubleVals&& from) noexcept
    : DoubleVals() {
    *this = ::std::move(from);
  }

  inline DoubleVals& operator=(const DoubleVals& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleVals& operator=(DoubleVals&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleVals& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleVals* internal_default_instance() {
    return reinterpret_cast<const DoubleVals*>(
               &_DoubleVals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(DoubleVals* other);
  friend void swap(DoubleVals& a, DoubleVals& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoubleVals* New() const final {
    return CreateMaybeMessage<DoubleVals>(nullptr);
  }

  DoubleVals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleVals>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleVals& from);
  void MergeFrom(const DoubleVals& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleVals* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.DoubleVals";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double val = 1;
  int val_size() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  double val(int index) const;
  void set_val(int index, double value);
  void add_val(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.DoubleVals)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > val_;
  mutable std::atomic<int> _val_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class RotationGain :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.RotationGain) */ {
 public:
  RotationGain();
  virtual ~RotationGain();

  RotationGain(const RotationGain& from);
  RotationGain(RotationGain&& from) noexcept
    : RotationGain() {
    *this = ::std::move(from);
  }

  inline RotationGain& operator=(const RotationGain& from) {
    CopyFrom(from);
    return *this;
  }
  inline RotationGain& operator=(RotationGain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RotationGain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RotationGain* internal_default_instance() {
    return reinterpret_cast<const RotationGain*>(
               &_RotationGain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(RotationGain* other);
  friend void swap(RotationGain& a, RotationGain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RotationGain* New() const final {
    return CreateMaybeMessage<RotationGain>(nullptr);
  }

  RotationGain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RotationGain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RotationGain& from);
  void MergeFrom(const RotationGain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RotationGain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.RotationGain";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double k = 2;
  void clear_k();
  static const int kKFieldNumber = 2;
  double k() const;
  void set_k(double value);

  // double kv = 3;
  void clear_kv();
  static const int kKvFieldNumber = 3;
  double kv() const;
  void set_kv(double value);

  // double kp = 4;
  void clear_kp();
  static const int kKpFieldNumber = 4;
  double kp() const;
  void set_kp(double value);

  // int32 idx = 1;
  void clear_idx();
  static const int kIdxFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.RotationGain)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double k_;
  double kv_;
  double kp_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class VelAccBoundary :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.VelAccBoundary) */ {
 public:
  VelAccBoundary();
  virtual ~VelAccBoundary();

  VelAccBoundary(const VelAccBoundary& from);
  VelAccBoundary(VelAccBoundary&& from) noexcept
    : VelAccBoundary() {
    *this = ::std::move(from);
  }

  inline VelAccBoundary& operator=(const VelAccBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelAccBoundary& operator=(VelAccBoundary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VelAccBoundary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VelAccBoundary* internal_default_instance() {
    return reinterpret_cast<const VelAccBoundary*>(
               &_VelAccBoundary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(VelAccBoundary* other);
  friend void swap(VelAccBoundary& a, VelAccBoundary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VelAccBoundary* New() const final {
    return CreateMaybeMessage<VelAccBoundary>(nullptr);
  }

  VelAccBoundary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VelAccBoundary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VelAccBoundary& from);
  void MergeFrom(const VelAccBoundary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelAccBoundary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.VelAccBoundary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_moby_5fmsgs_2eproto);
    return ::descriptor_table_moby_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 idx = 1;
  void clear_idx();
  static const int kIdxFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float vmax = 2;
  void clear_vmax();
  static const int kVmaxFieldNumber = 2;
  float vmax() const;
  void set_vmax(float value);

  // float amax = 3;
  void clear_amax();
  static const int kAmaxFieldNumber = 3;
  float amax() const;
  void set_amax(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.VelAccBoundary)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  float vmax_;
  float amax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_moby_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DriveIndex

// uint32 moby_index = 1;
inline void DriveIndex::clear_moby_index() {
  moby_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DriveIndex::moby_index() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DriveIndex.moby_index)
  return moby_index_;
}
inline void DriveIndex::set_moby_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  moby_index_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DriveIndex.moby_index)
}

// -------------------------------------------------------------------

// MotorDriverTx

// uint32 statusWord = 1;
inline void MotorDriverTx::clear_statusword() {
  statusword_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotorDriverTx::statusword() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotorDriverTx.statusWord)
  return statusword_;
}
inline void MotorDriverTx::set_statusword(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statusword_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotorDriverTx.statusWord)
}

// int32 modeOpDisp = 2;
inline void MotorDriverTx::clear_modeopdisp() {
  modeopdisp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotorDriverTx::modeopdisp() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotorDriverTx.modeOpDisp)
  return modeopdisp_;
}
inline void MotorDriverTx::set_modeopdisp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modeopdisp_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotorDriverTx.modeOpDisp)
}

// int32 actualPosition = 3;
inline void MotorDriverTx::clear_actualposition() {
  actualposition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotorDriverTx::actualposition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotorDriverTx.actualPosition)
  return actualposition_;
}
inline void MotorDriverTx::set_actualposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actualposition_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotorDriverTx.actualPosition)
}

// int32 actualVelocity = 4;
inline void MotorDriverTx::clear_actualvelocity() {
  actualvelocity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotorDriverTx::actualvelocity() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotorDriverTx.actualVelocity)
  return actualvelocity_;
}
inline void MotorDriverTx::set_actualvelocity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actualvelocity_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotorDriverTx.actualVelocity)
}

// int32 actualTorque = 5;
inline void MotorDriverTx::clear_actualtorque() {
  actualtorque_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotorDriverTx::actualtorque() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotorDriverTx.actualTorque)
  return actualtorque_;
}
inline void MotorDriverTx::set_actualtorque(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actualtorque_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotorDriverTx.actualTorque)
}

// -------------------------------------------------------------------

// MotorDriverRx

// uint32 controlWord = 1;
inline void MotorDriverRx::clear_controlword() {
  controlword_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotorDriverRx::controlword() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotorDriverRx.controlWord)
  return controlword_;
}
inline void MotorDriverRx::set_controlword(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  controlword_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotorDriverRx.controlWord)
}

// int32 modeOp = 2;
inline void MotorDriverRx::clear_modeop() {
  modeop_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotorDriverRx::modeop() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotorDriverRx.modeOp)
  return modeop_;
}
inline void MotorDriverRx::set_modeop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modeop_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotorDriverRx.modeOp)
}

// int32 targetPosition = 3;
inline void MotorDriverRx::clear_targetposition() {
  targetposition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotorDriverRx::targetposition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotorDriverRx.targetPosition)
  return targetposition_;
}
inline void MotorDriverRx::set_targetposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targetposition_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotorDriverRx.targetPosition)
}

// int32 targetVelocity = 4;
inline void MotorDriverRx::clear_targetvelocity() {
  targetvelocity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotorDriverRx::targetvelocity() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotorDriverRx.targetVelocity)
  return targetvelocity_;
}
inline void MotorDriverRx::set_targetvelocity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targetvelocity_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotorDriverRx.targetVelocity)
}

// int32 targetTorque = 5;
inline void MotorDriverRx::clear_targettorque() {
  targettorque_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotorDriverRx::targettorque() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotorDriverRx.targetTorque)
  return targettorque_;
}
inline void MotorDriverRx::set_targettorque(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targettorque_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotorDriverRx.targetTorque)
}

// -------------------------------------------------------------------

// MobyState

// uint32 status = 1;
inline void MobyState::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MobyState::status() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyState.status)
  return status_;
}
inline void MobyState::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyState.status)
}

// bool is_ready = 2;
inline void MobyState::clear_is_ready() {
  is_ready_ = false;
}
inline bool MobyState::is_ready() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyState.is_ready)
  return is_ready_;
}
inline void MobyState::set_is_ready(bool value) {
  
  is_ready_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyState.is_ready)
}

// bool is_enable = 3;
inline void MobyState::clear_is_enable() {
  is_enable_ = false;
}
inline bool MobyState::is_enable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyState.is_enable)
  return is_enable_;
}
inline void MobyState::set_is_enable(bool value) {
  
  is_enable_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyState.is_enable)
}

// bool is_moving = 4;
inline void MobyState::clear_is_moving() {
  is_moving_ = false;
}
inline bool MobyState::is_moving() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyState.is_moving)
  return is_moving_;
}
inline void MobyState::set_is_moving(bool value) {
  
  is_moving_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyState.is_moving)
}

// bool is_violation = 5;
inline void MobyState::clear_is_violation() {
  is_violation_ = false;
}
inline bool MobyState::is_violation() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyState.is_violation)
  return is_violation_;
}
inline void MobyState::set_is_violation(bool value) {
  
  is_violation_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyState.is_violation)
}

// -------------------------------------------------------------------

// MobyErrorState

// uint64 errorState = 1;
inline void MobyErrorState::clear_errorstate() {
  errorstate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MobyErrorState::errorstate() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyErrorState.errorState)
  return errorstate_;
}
inline void MobyErrorState::set_errorstate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  errorstate_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyErrorState.errorState)
}

// int32 errorIndex1 = 2;
inline void MobyErrorState::clear_errorindex1() {
  errorindex1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MobyErrorState::errorindex1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyErrorState.errorIndex1)
  return errorindex1_;
}
inline void MobyErrorState::set_errorindex1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorindex1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyErrorState.errorIndex1)
}

// int32 errorIndex2 = 3;
inline void MobyErrorState::clear_errorindex2() {
  errorindex2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MobyErrorState::errorindex2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyErrorState.errorIndex2)
  return errorindex2_;
}
inline void MobyErrorState::set_errorindex2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorindex2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyErrorState.errorIndex2)
}

// int32 errorIndex3 = 4;
inline void MobyErrorState::clear_errorindex3() {
  errorindex3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MobyErrorState::errorindex3() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyErrorState.errorIndex3)
  return errorindex3_;
}
inline void MobyErrorState::set_errorindex3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorindex3_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyErrorState.errorIndex3)
}

// -------------------------------------------------------------------

// MobyPose

// double px = 1;
inline void MobyPose::clear_px() {
  px_ = 0;
}
inline double MobyPose::px() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyPose.px)
  return px_;
}
inline void MobyPose::set_px(double value) {
  
  px_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyPose.px)
}

// double py = 2;
inline void MobyPose::clear_py() {
  py_ = 0;
}
inline double MobyPose::py() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyPose.py)
  return py_;
}
inline void MobyPose::set_py(double value) {
  
  py_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyPose.py)
}

// double pw = 3;
inline void MobyPose::clear_pw() {
  pw_ = 0;
}
inline double MobyPose::pw() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyPose.pw)
  return pw_;
}
inline void MobyPose::set_pw(double value) {
  
  pw_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyPose.pw)
}

// -------------------------------------------------------------------

// MobyVel

// double vx = 1;
inline void MobyVel::clear_vx() {
  vx_ = 0;
}
inline double MobyVel::vx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyVel.vx)
  return vx_;
}
inline void MobyVel::set_vx(double value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyVel.vx)
}

// double vy = 2;
inline void MobyVel::clear_vy() {
  vy_ = 0;
}
inline double MobyVel::vy() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyVel.vy)
  return vy_;
}
inline void MobyVel::set_vy(double value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyVel.vy)
}

// double vw = 3;
inline void MobyVel::clear_vw() {
  vw_ = 0;
}
inline double MobyVel::vw() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MobyVel.vw)
  return vw_;
}
inline void MobyVel::set_vw(double value) {
  
  vw_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MobyVel.vw)
}

// -------------------------------------------------------------------

// IMUData

// double angleX = 1;
inline void IMUData::clear_anglex() {
  anglex_ = 0;
}
inline double IMUData::anglex() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IMUData.angleX)
  return anglex_;
}
inline void IMUData::set_anglex(double value) {
  
  anglex_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IMUData.angleX)
}

// double angleY = 2;
inline void IMUData::clear_angley() {
  angley_ = 0;
}
inline double IMUData::angley() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IMUData.angleY)
  return angley_;
}
inline void IMUData::set_angley(double value) {
  
  angley_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IMUData.angleY)
}

// double angleZ = 3;
inline void IMUData::clear_anglez() {
  anglez_ = 0;
}
inline double IMUData::anglez() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IMUData.angleZ)
  return anglez_;
}
inline void IMUData::set_anglez(double value) {
  
  anglez_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IMUData.angleZ)
}

// double angleVelX = 4;
inline void IMUData::clear_anglevelx() {
  anglevelx_ = 0;
}
inline double IMUData::anglevelx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IMUData.angleVelX)
  return anglevelx_;
}
inline void IMUData::set_anglevelx(double value) {
  
  anglevelx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IMUData.angleVelX)
}

// double angleVelY = 5;
inline void IMUData::clear_anglevely() {
  anglevely_ = 0;
}
inline double IMUData::anglevely() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IMUData.angleVelY)
  return anglevely_;
}
inline void IMUData::set_anglevely(double value) {
  
  anglevely_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IMUData.angleVelY)
}

// double angleVelZ = 6;
inline void IMUData::clear_anglevelz() {
  anglevelz_ = 0;
}
inline double IMUData::anglevelz() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IMUData.angleVelZ)
  return anglevelz_;
}
inline void IMUData::set_anglevelz(double value) {
  
  anglevelz_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IMUData.angleVelZ)
}

// double linAccX = 7;
inline void IMUData::clear_linaccx() {
  linaccx_ = 0;
}
inline double IMUData::linaccx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IMUData.linAccX)
  return linaccx_;
}
inline void IMUData::set_linaccx(double value) {
  
  linaccx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IMUData.linAccX)
}

// double linAccY = 8;
inline void IMUData::clear_linaccy() {
  linaccy_ = 0;
}
inline double IMUData::linaccy() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IMUData.linAccY)
  return linaccy_;
}
inline void IMUData::set_linaccy(double value) {
  
  linaccy_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IMUData.linAccY)
}

// double linAccZ = 9;
inline void IMUData::clear_linaccz() {
  linaccz_ = 0;
}
inline double IMUData::linaccz() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IMUData.linAccZ)
  return linaccz_;
}
inline void IMUData::set_linaccz(double value) {
  
  linaccz_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IMUData.linAccZ)
}

// -------------------------------------------------------------------

// SwerveDoubles

// double fl = 1;
inline void SwerveDoubles::clear_fl() {
  fl_ = 0;
}
inline double SwerveDoubles::fl() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SwerveDoubles.fl)
  return fl_;
}
inline void SwerveDoubles::set_fl(double value) {
  
  fl_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SwerveDoubles.fl)
}

// double fr = 2;
inline void SwerveDoubles::clear_fr() {
  fr_ = 0;
}
inline double SwerveDoubles::fr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SwerveDoubles.fr)
  return fr_;
}
inline void SwerveDoubles::set_fr(double value) {
  
  fr_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SwerveDoubles.fr)
}

// double bl = 3;
inline void SwerveDoubles::clear_bl() {
  bl_ = 0;
}
inline double SwerveDoubles::bl() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SwerveDoubles.bl)
  return bl_;
}
inline void SwerveDoubles::set_bl(double value) {
  
  bl_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SwerveDoubles.bl)
}

// double br = 4;
inline void SwerveDoubles::clear_br() {
  br_ = 0;
}
inline double SwerveDoubles::br() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SwerveDoubles.br)
  return br_;
}
inline void SwerveDoubles::set_br(double value) {
  
  br_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SwerveDoubles.br)
}

// -------------------------------------------------------------------

// TargetVel

// double vx = 1;
inline void TargetVel::clear_vx() {
  vx_ = 0;
}
inline double TargetVel::vx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetVel.vx)
  return vx_;
}
inline void TargetVel::set_vx(double value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetVel.vx)
}

// double vy = 2;
inline void TargetVel::clear_vy() {
  vy_ = 0;
}
inline double TargetVel::vy() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetVel.vy)
  return vy_;
}
inline void TargetVel::set_vy(double value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetVel.vy)
}

// double vw = 3;
inline void TargetVel::clear_vw() {
  vw_ = 0;
}
inline double TargetVel::vw() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetVel.vw)
  return vw_;
}
inline void TargetVel::set_vw(double value) {
  
  vw_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetVel.vw)
}

// -------------------------------------------------------------------

// ZeroCount

// int32 fl = 1;
inline void ZeroCount::clear_fl() {
  fl_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ZeroCount::fl() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ZeroCount.fl)
  return fl_;
}
inline void ZeroCount::set_fl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fl_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ZeroCount.fl)
}

// int32 fr = 2;
inline void ZeroCount::clear_fr() {
  fr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ZeroCount::fr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ZeroCount.fr)
  return fr_;
}
inline void ZeroCount::set_fr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fr_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ZeroCount.fr)
}

// int32 bl = 3;
inline void ZeroCount::clear_bl() {
  bl_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ZeroCount::bl() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ZeroCount.bl)
  return bl_;
}
inline void ZeroCount::set_bl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bl_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ZeroCount.bl)
}

// int32 br = 4;
inline void ZeroCount::clear_br() {
  br_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ZeroCount::br() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ZeroCount.br)
  return br_;
}
inline void ZeroCount::set_br(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  br_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ZeroCount.br)
}

// -------------------------------------------------------------------

// IRData

// int32 ir_front1 = 1;
inline void IRData::clear_ir_front1() {
  ir_front1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IRData::ir_front1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IRData.ir_front1)
  return ir_front1_;
}
inline void IRData::set_ir_front1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ir_front1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IRData.ir_front1)
}

// int32 ir_front2 = 2;
inline void IRData::clear_ir_front2() {
  ir_front2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IRData::ir_front2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IRData.ir_front2)
  return ir_front2_;
}
inline void IRData::set_ir_front2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ir_front2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IRData.ir_front2)
}

// int32 ir_left1 = 3;
inline void IRData::clear_ir_left1() {
  ir_left1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IRData::ir_left1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IRData.ir_left1)
  return ir_left1_;
}
inline void IRData::set_ir_left1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ir_left1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IRData.ir_left1)
}

// int32 ir_left2 = 4;
inline void IRData::clear_ir_left2() {
  ir_left2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IRData::ir_left2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IRData.ir_left2)
  return ir_left2_;
}
inline void IRData::set_ir_left2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ir_left2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IRData.ir_left2)
}

// int32 ir_left3 = 5;
inline void IRData::clear_ir_left3() {
  ir_left3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IRData::ir_left3() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IRData.ir_left3)
  return ir_left3_;
}
inline void IRData::set_ir_left3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ir_left3_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IRData.ir_left3)
}

// int32 ir_rear = 6;
inline void IRData::clear_ir_rear() {
  ir_rear_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IRData::ir_rear() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IRData.ir_rear)
  return ir_rear_;
}
inline void IRData::set_ir_rear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ir_rear_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IRData.ir_rear)
}

// int32 ir_right1 = 7;
inline void IRData::clear_ir_right1() {
  ir_right1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IRData::ir_right1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IRData.ir_right1)
  return ir_right1_;
}
inline void IRData::set_ir_right1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ir_right1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IRData.ir_right1)
}

// int32 ir_right2 = 8;
inline void IRData::clear_ir_right2() {
  ir_right2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IRData::ir_right2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IRData.ir_right2)
  return ir_right2_;
}
inline void IRData::set_ir_right2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ir_right2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IRData.ir_right2)
}

// int32 ir_right3 = 9;
inline void IRData::clear_ir_right3() {
  ir_right3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IRData::ir_right3() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IRData.ir_right3)
  return ir_right3_;
}
inline void IRData::set_ir_right3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ir_right3_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IRData.ir_right3)
}

// -------------------------------------------------------------------

// USData

// int32 us_front_left1 = 1;
inline void USData::clear_us_front_left1() {
  us_front_left1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_front_left1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_front_left1)
  return us_front_left1_;
}
inline void USData::set_us_front_left1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_front_left1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_front_left1)
}

// int32 us_front_left2 = 2;
inline void USData::clear_us_front_left2() {
  us_front_left2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_front_left2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_front_left2)
  return us_front_left2_;
}
inline void USData::set_us_front_left2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_front_left2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_front_left2)
}

// int32 us_front_left3 = 3;
inline void USData::clear_us_front_left3() {
  us_front_left3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_front_left3() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_front_left3)
  return us_front_left3_;
}
inline void USData::set_us_front_left3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_front_left3_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_front_left3)
}

// int32 us_front_ground = 4;
inline void USData::clear_us_front_ground() {
  us_front_ground_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_front_ground() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_front_ground)
  return us_front_ground_;
}
inline void USData::set_us_front_ground(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_front_ground_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_front_ground)
}

// int32 us_front_right1 = 5;
inline void USData::clear_us_front_right1() {
  us_front_right1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_front_right1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_front_right1)
  return us_front_right1_;
}
inline void USData::set_us_front_right1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_front_right1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_front_right1)
}

// int32 us_front_right2 = 6;
inline void USData::clear_us_front_right2() {
  us_front_right2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_front_right2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_front_right2)
  return us_front_right2_;
}
inline void USData::set_us_front_right2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_front_right2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_front_right2)
}

// int32 us_front_right3 = 7;
inline void USData::clear_us_front_right3() {
  us_front_right3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_front_right3() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_front_right3)
  return us_front_right3_;
}
inline void USData::set_us_front_right3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_front_right3_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_front_right3)
}

// int32 us_front_right4 = 8;
inline void USData::clear_us_front_right4() {
  us_front_right4_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_front_right4() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_front_right4)
  return us_front_right4_;
}
inline void USData::set_us_front_right4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_front_right4_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_front_right4)
}

// int32 us_back_right1 = 9;
inline void USData::clear_us_back_right1() {
  us_back_right1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_back_right1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_back_right1)
  return us_back_right1_;
}
inline void USData::set_us_back_right1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_back_right1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_back_right1)
}

// int32 us_back_right2 = 10;
inline void USData::clear_us_back_right2() {
  us_back_right2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_back_right2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_back_right2)
  return us_back_right2_;
}
inline void USData::set_us_back_right2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_back_right2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_back_right2)
}

// int32 us_back_right3 = 11;
inline void USData::clear_us_back_right3() {
  us_back_right3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_back_right3() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_back_right3)
  return us_back_right3_;
}
inline void USData::set_us_back_right3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_back_right3_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_back_right3)
}

// int32 us_back_ground = 12;
inline void USData::clear_us_back_ground() {
  us_back_ground_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_back_ground() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_back_ground)
  return us_back_ground_;
}
inline void USData::set_us_back_ground(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_back_ground_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_back_ground)
}

// int32 us_back_left1 = 13;
inline void USData::clear_us_back_left1() {
  us_back_left1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_back_left1() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_back_left1)
  return us_back_left1_;
}
inline void USData::set_us_back_left1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_back_left1_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_back_left1)
}

// int32 us_back_left2 = 14;
inline void USData::clear_us_back_left2() {
  us_back_left2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_back_left2() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_back_left2)
  return us_back_left2_;
}
inline void USData::set_us_back_left2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_back_left2_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_back_left2)
}

// int32 us_back_left3 = 15;
inline void USData::clear_us_back_left3() {
  us_back_left3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_back_left3() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_back_left3)
  return us_back_left3_;
}
inline void USData::set_us_back_left3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_back_left3_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_back_left3)
}

// int32 us_back_left4 = 16;
inline void USData::clear_us_back_left4() {
  us_back_left4_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 USData::us_back_left4() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.USData.us_back_left4)
  return us_back_left4_;
}
inline void USData::set_us_back_left4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  us_back_left4_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.USData.us_back_left4)
}

// -------------------------------------------------------------------

// BMSData

// repeated int32 bms_status = 1;
inline int BMSData::bms_status_size() const {
  return bms_status_.size();
}
inline void BMSData::clear_bms_status() {
  bms_status_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::bms_status(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.bms_status)
  return bms_status_.Get(index);
}
inline void BMSData::set_bms_status(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bms_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.bms_status)
}
inline void BMSData::add_bms_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bms_status_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.BMSData.bms_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BMSData::bms_status() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.BMSData.bms_status)
  return bms_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BMSData::mutable_bms_status() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.BMSData.bms_status)
  return &bms_status_;
}

// repeated int32 pack_volt = 2;
inline int BMSData::pack_volt_size() const {
  return pack_volt_.size();
}
inline void BMSData::clear_pack_volt() {
  pack_volt_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::pack_volt(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.pack_volt)
  return pack_volt_.Get(index);
}
inline void BMSData::set_pack_volt(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pack_volt_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.pack_volt)
}
inline void BMSData::add_pack_volt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pack_volt_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.BMSData.pack_volt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BMSData::pack_volt() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.BMSData.pack_volt)
  return pack_volt_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BMSData::mutable_pack_volt() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.BMSData.pack_volt)
  return &pack_volt_;
}

// repeated int32 battery_volt = 3;
inline int BMSData::battery_volt_size() const {
  return battery_volt_.size();
}
inline void BMSData::clear_battery_volt() {
  battery_volt_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::battery_volt(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.battery_volt)
  return battery_volt_.Get(index);
}
inline void BMSData::set_battery_volt(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  battery_volt_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.battery_volt)
}
inline void BMSData::add_battery_volt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  battery_volt_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.BMSData.battery_volt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BMSData::battery_volt() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.BMSData.battery_volt)
  return battery_volt_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BMSData::mutable_battery_volt() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.BMSData.battery_volt)
  return &battery_volt_;
}

// repeated int32 pack_current1 = 4;
inline int BMSData::pack_current1_size() const {
  return pack_current1_.size();
}
inline void BMSData::clear_pack_current1() {
  pack_current1_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::pack_current1(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.pack_current1)
  return pack_current1_.Get(index);
}
inline void BMSData::set_pack_current1(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pack_current1_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.pack_current1)
}
inline void BMSData::add_pack_current1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pack_current1_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.BMSData.pack_current1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BMSData::pack_current1() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.BMSData.pack_current1)
  return pack_current1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BMSData::mutable_pack_current1() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.BMSData.pack_current1)
  return &pack_current1_;
}

// repeated int32 pack_current2 = 5;
inline int BMSData::pack_current2_size() const {
  return pack_current2_.size();
}
inline void BMSData::clear_pack_current2() {
  pack_current2_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::pack_current2(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.pack_current2)
  return pack_current2_.Get(index);
}
inline void BMSData::set_pack_current2(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pack_current2_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.pack_current2)
}
inline void BMSData::add_pack_current2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pack_current2_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.BMSData.pack_current2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BMSData::pack_current2() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.BMSData.pack_current2)
  return pack_current2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BMSData::mutable_pack_current2() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.BMSData.pack_current2)
  return &pack_current2_;
}

// int32 isCharge = 6;
inline void BMSData::clear_ischarge() {
  ischarge_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::ischarge() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.isCharge)
  return ischarge_;
}
inline void BMSData::set_ischarge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ischarge_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.isCharge)
}

// int32 isCellOverVolt = 7;
inline void BMSData::clear_iscellovervolt() {
  iscellovervolt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::iscellovervolt() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.isCellOverVolt)
  return iscellovervolt_;
}
inline void BMSData::set_iscellovervolt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iscellovervolt_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.isCellOverVolt)
}

// int32 isCellUnderVolt = 8;
inline void BMSData::clear_iscellundervolt() {
  iscellundervolt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::iscellundervolt() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.isCellUnderVolt)
  return iscellundervolt_;
}
inline void BMSData::set_iscellundervolt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iscellundervolt_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.isCellUnderVolt)
}

// int32 isOverCurCharge = 9;
inline void BMSData::clear_isovercurcharge() {
  isovercurcharge_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::isovercurcharge() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.isOverCurCharge)
  return isovercurcharge_;
}
inline void BMSData::set_isovercurcharge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isovercurcharge_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.isOverCurCharge)
}

// int32 isOverCurDischrg = 10;
inline void BMSData::clear_isovercurdischrg() {
  isovercurdischrg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::isovercurdischrg() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.isOverCurDischrg)
  return isovercurdischrg_;
}
inline void BMSData::set_isovercurdischrg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isovercurdischrg_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.isOverCurDischrg)
}

// int32 isShortCircuit = 11;
inline void BMSData::clear_isshortcircuit() {
  isshortcircuit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::isshortcircuit() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.isShortCircuit)
  return isshortcircuit_;
}
inline void BMSData::set_isshortcircuit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isshortcircuit_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.isShortCircuit)
}

// int32 isOverTemperature = 12;
inline void BMSData::clear_isovertemperature() {
  isovertemperature_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::isovertemperature() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.isOverTemperature)
  return isovertemperature_;
}
inline void BMSData::set_isovertemperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isovertemperature_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.isOverTemperature)
}

// int32 isPackOverVolt = 13;
inline void BMSData::clear_ispackovervolt() {
  ispackovervolt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::ispackovervolt() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.isPackOverVolt)
  return ispackovervolt_;
}
inline void BMSData::set_ispackovervolt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ispackovervolt_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.isPackOverVolt)
}

// int32 SOC = 14;
inline void BMSData::clear_soc() {
  soc_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::soc() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.SOC)
  return soc_;
}
inline void BMSData::set_soc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  soc_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.SOC)
}

// int32 SOH = 15;
inline void BMSData::clear_soh() {
  soh_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::soh() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.SOH)
  return soh_;
}
inline void BMSData::set_soh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  soh_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.SOH)
}

// int32 time_charge = 16;
inline void BMSData::clear_time_charge() {
  time_charge_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::time_charge() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.time_charge)
  return time_charge_;
}
inline void BMSData::set_time_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_charge_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.time_charge)
}

// int32 time_dcharge = 17;
inline void BMSData::clear_time_dcharge() {
  time_dcharge_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::time_dcharge() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.time_dcharge)
  return time_dcharge_;
}
inline void BMSData::set_time_dcharge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_dcharge_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.time_dcharge)
}

// int32 rem_capAh = 18;
inline void BMSData::clear_rem_capah() {
  rem_capah_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::rem_capah() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.rem_capAh)
  return rem_capah_;
}
inline void BMSData::set_rem_capah(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rem_capah_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.rem_capAh)
}

// int32 rem_capWh = 19;
inline void BMSData::clear_rem_capwh() {
  rem_capwh_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::rem_capwh() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.rem_capWh)
  return rem_capwh_;
}
inline void BMSData::set_rem_capwh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rem_capwh_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.rem_capWh)
}

// repeated int32 bms_temperature = 20;
inline int BMSData::bms_temperature_size() const {
  return bms_temperature_.size();
}
inline void BMSData::clear_bms_temperature() {
  bms_temperature_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::bms_temperature(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.bms_temperature)
  return bms_temperature_.Get(index);
}
inline void BMSData::set_bms_temperature(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bms_temperature_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.bms_temperature)
}
inline void BMSData::add_bms_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bms_temperature_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.BMSData.bms_temperature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BMSData::bms_temperature() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.BMSData.bms_temperature)
  return bms_temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BMSData::mutable_bms_temperature() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.BMSData.bms_temperature)
  return &bms_temperature_;
}

// repeated int32 cell_volt = 21;
inline int BMSData::cell_volt_size() const {
  return cell_volt_.size();
}
inline void BMSData::clear_cell_volt() {
  cell_volt_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BMSData::cell_volt(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BMSData.cell_volt)
  return cell_volt_.Get(index);
}
inline void BMSData::set_cell_volt(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  cell_volt_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BMSData.cell_volt)
}
inline void BMSData::add_cell_volt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  cell_volt_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.BMSData.cell_volt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BMSData::cell_volt() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.BMSData.cell_volt)
  return cell_volt_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BMSData::mutable_cell_volt() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.BMSData.cell_volt)
  return &cell_volt_;
}

// -------------------------------------------------------------------

// ForcedKinematicsData

// bool activate = 1;
inline void ForcedKinematicsData::clear_activate() {
  activate_ = false;
}
inline bool ForcedKinematicsData::activate() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForcedKinematicsData.activate)
  return activate_;
}
inline void ForcedKinematicsData::set_activate(bool value) {
  
  activate_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForcedKinematicsData.activate)
}

// int32 angle = 2;
inline void ForcedKinematicsData::clear_angle() {
  angle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ForcedKinematicsData::angle() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForcedKinematicsData.angle)
  return angle_;
}
inline void ForcedKinematicsData::set_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForcedKinematicsData.angle)
}

// -------------------------------------------------------------------

// GBool

// int32 idx = 1;
inline void GBool::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GBool::idx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GBool.idx)
  return idx_;
}
inline void GBool::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GBool.idx)
}

// bool val = 2;
inline void GBool::clear_val() {
  val_ = false;
}
inline bool GBool::val() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GBool.val)
  return val_;
}
inline void GBool::set_val(bool value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GBool.val)
}

// -------------------------------------------------------------------

// GInt

// int32 idx = 1;
inline void GInt::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GInt::idx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GInt.idx)
  return idx_;
}
inline void GInt::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GInt.idx)
}

// int32 val = 2;
inline void GInt::clear_val() {
  val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GInt::val() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GInt.val)
  return val_;
}
inline void GInt::set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GInt.val)
}

// -------------------------------------------------------------------

// GFloat

// int32 idx = 1;
inline void GFloat::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GFloat::idx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GFloat.idx)
  return idx_;
}
inline void GFloat::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GFloat.idx)
}

// float val = 2;
inline void GFloat::clear_val() {
  val_ = 0;
}
inline float GFloat::val() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GFloat.val)
  return val_;
}
inline void GFloat::set_val(float value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GFloat.val)
}

// -------------------------------------------------------------------

// GString

// int32 idx = 1;
inline void GString::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GString::idx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GString.idx)
  return idx_;
}
inline void GString::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GString.idx)
}

// string val = 2;
inline void GString::clear_val() {
  val_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GString::val() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GString.val)
  return val_.GetNoArena();
}
inline void GString::set_val(const std::string& value) {
  
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GString.val)
}
inline void GString::set_val(std::string&& value) {
  
  val_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.GString.val)
}
inline void GString::set_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.GString.val)
}
inline void GString::set_val(const char* value, size_t size) {
  
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.GString.val)
}
inline std::string* GString::mutable_val() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.GString.val)
  return val_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GString::release_val() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.GString.val)
  
  return val_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GString::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  val_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.GString.val)
}

// -------------------------------------------------------------------

// BoolVal

// bool val = 1;
inline void BoolVal::clear_val() {
  val_ = false;
}
inline bool BoolVal::val() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BoolVal.val)
  return val_;
}
inline void BoolVal::set_val(bool value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BoolVal.val)
}

// -------------------------------------------------------------------

// BoolVals

// repeated bool val = 1;
inline int BoolVals::val_size() const {
  return val_.size();
}
inline void BoolVals::clear_val() {
  val_.Clear();
}
inline bool BoolVals::val(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BoolVals.val)
  return val_.Get(index);
}
inline void BoolVals::set_val(int index, bool value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BoolVals.val)
}
inline void BoolVals::add_val(bool value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.BoolVals.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BoolVals::val() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.BoolVals.val)
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BoolVals::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.BoolVals.val)
  return &val_;
}

// -------------------------------------------------------------------

// IntVal

// int32 val = 1;
inline void IntVal::clear_val() {
  val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntVal::val() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IntVal.val)
  return val_;
}
inline void IntVal::set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IntVal.val)
}

// -------------------------------------------------------------------

// IntVals

// repeated int32 val = 1;
inline int IntVals::val_size() const {
  return val_.size();
}
inline void IntVals::clear_val() {
  val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntVals::val(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IntVals.val)
  return val_.Get(index);
}
inline void IntVals::set_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IntVals.val)
}
inline void IntVals::add_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IntVals.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntVals::val() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IntVals.val)
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntVals::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IntVals.val)
  return &val_;
}

// -------------------------------------------------------------------

// FloatVal

// float val = 1;
inline void FloatVal::clear_val() {
  val_ = 0;
}
inline float FloatVal::val() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FloatVal.val)
  return val_;
}
inline void FloatVal::set_val(float value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FloatVal.val)
}

// -------------------------------------------------------------------

// FloatVals

// repeated float val = 1;
inline int FloatVals::val_size() const {
  return val_.size();
}
inline void FloatVals::clear_val() {
  val_.Clear();
}
inline float FloatVals::val(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FloatVals.val)
  return val_.Get(index);
}
inline void FloatVals::set_val(int index, float value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FloatVals.val)
}
inline void FloatVals::add_val(float value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.FloatVals.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatVals::val() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.FloatVals.val)
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatVals::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.FloatVals.val)
  return &val_;
}

// -------------------------------------------------------------------

// DoubleVal

// double val = 1;
inline void DoubleVal::clear_val() {
  val_ = 0;
}
inline double DoubleVal::val() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DoubleVal.val)
  return val_;
}
inline void DoubleVal::set_val(double value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DoubleVal.val)
}

// -------------------------------------------------------------------

// DoubleVals

// repeated double val = 1;
inline int DoubleVals::val_size() const {
  return val_.size();
}
inline void DoubleVals::clear_val() {
  val_.Clear();
}
inline double DoubleVals::val(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.DoubleVals.val)
  return val_.Get(index);
}
inline void DoubleVals::set_val(int index, double value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.DoubleVals.val)
}
inline void DoubleVals::add_val(double value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.DoubleVals.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleVals::val() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.DoubleVals.val)
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleVals::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.DoubleVals.val)
  return &val_;
}

// -------------------------------------------------------------------

// RotationGain

// int32 idx = 1;
inline void RotationGain::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RotationGain::idx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.RotationGain.idx)
  return idx_;
}
inline void RotationGain::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.RotationGain.idx)
}

// double k = 2;
inline void RotationGain::clear_k() {
  k_ = 0;
}
inline double RotationGain::k() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.RotationGain.k)
  return k_;
}
inline void RotationGain::set_k(double value) {
  
  k_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.RotationGain.k)
}

// double kv = 3;
inline void RotationGain::clear_kv() {
  kv_ = 0;
}
inline double RotationGain::kv() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.RotationGain.kv)
  return kv_;
}
inline void RotationGain::set_kv(double value) {
  
  kv_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.RotationGain.kv)
}

// double kp = 4;
inline void RotationGain::clear_kp() {
  kp_ = 0;
}
inline double RotationGain::kp() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.RotationGain.kp)
  return kp_;
}
inline void RotationGain::set_kp(double value) {
  
  kp_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.RotationGain.kp)
}

// -------------------------------------------------------------------

// VelAccBoundary

// int32 idx = 1;
inline void VelAccBoundary::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VelAccBoundary::idx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VelAccBoundary.idx)
  return idx_;
}
inline void VelAccBoundary::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.VelAccBoundary.idx)
}

// float vmax = 2;
inline void VelAccBoundary::clear_vmax() {
  vmax_ = 0;
}
inline float VelAccBoundary::vmax() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VelAccBoundary.vmax)
  return vmax_;
}
inline void VelAccBoundary::set_vmax(float value) {
  
  vmax_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.VelAccBoundary.vmax)
}

// float amax = 3;
inline void VelAccBoundary::clear_amax() {
  amax_ = 0;
}
inline float VelAccBoundary::amax() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VelAccBoundary.amax)
  return amax_;
}
inline void VelAccBoundary::set_amax(float value) {
  
  amax_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.VelAccBoundary.amax)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IndyFramework
}  // namespace Nrmk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_moby_5fmsgs_2eproto
