// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_5fmsgs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_5fmsgs_2eproto;
namespace Nrmk {
namespace IndyFramework {
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class IntMode;
struct IntModeDefaultTypeInternal;
extern IntModeDefaultTypeInternal _IntMode_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class PauseCat;
struct PauseCatDefaultTypeInternal;
extern PauseCatDefaultTypeInternal _PauseCat_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class StopCat;
struct StopCatDefaultTypeInternal;
extern StopCatDefaultTypeInternal _StopCat_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Nrmk {
namespace IndyFramework {
enum OpState : int {
  OP_SYSTEM_OFF = 0,
  OP_SYSTEM_ON = 1,
  OP_VIOLATE = 2,
  OP_RECOVER_HARD = 3,
  OP_RECOVER_SOFT = 4,
  OP_IDLE = 5,
  OP_MOVING = 6,
  OP_TEACHING = 7,
  OP_COLLISION = 8,
  OP_STOP_AND_OFF = 9,
  OP_COMPLIANCE = 10,
  OP_BRAKE_CONTROL = 11,
  OP_SYSTEM_RESET = 12,
  OP_SYSTEM_SWITCH = 13,
  OP_VIOLATE_HARD = 15,
  OP_MANUAL_RECOVER = 16,
  TELE_OP = 17,
  OpState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OpState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OpState_IsValid(int value);
constexpr OpState OpState_MIN = static_cast<OpState>(0);
constexpr OpState OpState_MAX = static_cast<OpState>(17);
constexpr int OpState_ARRAYSIZE = 17 + 1;
const ::google::protobuf::EnumDescriptor*
OpState_descriptor();
template <typename T>
const std::string& OpState_Name(T value) {
  static_assert(std::is_same<T, OpState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OpState_Name().");
  return OpState_Name(static_cast<OpState>(value));
}
template <>
inline const std::string& OpState_Name(OpState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OpState_descriptor,
                                                 0, 17>(
      static_cast<int>(value));
}
inline bool OpState_Parse(absl::string_view name, OpState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpState>(
      OpState_descriptor(), name, value);
}
enum TrajState : int {
  TRAJ_NONE = 0,
  TRAJ_INIT = 1,
  TRAJ_CALC = 2,
  TRAJ_STAND_BY = 3,
  TRAJ_ACC = 4,
  TRAJ_CRUISE = 5,
  TRAJ_DEC = 6,
  TRAJ_CANCELLING = 7,
  TRAJ_FINISHED = 8,
  TRAJ_ERROR = 9,
  TrajState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TrajState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TrajState_IsValid(int value);
constexpr TrajState TrajState_MIN = static_cast<TrajState>(0);
constexpr TrajState TrajState_MAX = static_cast<TrajState>(9);
constexpr int TrajState_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
TrajState_descriptor();
template <typename T>
const std::string& TrajState_Name(T value) {
  static_assert(std::is_same<T, TrajState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TrajState_Name().");
  return TrajState_Name(static_cast<TrajState>(value));
}
template <>
inline const std::string& TrajState_Name(TrajState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrajState_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool TrajState_Parse(absl::string_view name, TrajState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrajState>(
      TrajState_descriptor(), name, value);
}
enum TrajCondition : int {
  TRAJ_STARTED = 0,
  TRAJ_ACC_DONE = 1,
  TRAJ_CRZ_DONE = 2,
  TRAJ_DEC_DONE = 3,
  TrajCondition_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TrajCondition_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TrajCondition_IsValid(int value);
constexpr TrajCondition TrajCondition_MIN = static_cast<TrajCondition>(0);
constexpr TrajCondition TrajCondition_MAX = static_cast<TrajCondition>(3);
constexpr int TrajCondition_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
TrajCondition_descriptor();
template <typename T>
const std::string& TrajCondition_Name(T value) {
  static_assert(std::is_same<T, TrajCondition>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TrajCondition_Name().");
  return TrajCondition_Name(static_cast<TrajCondition>(value));
}
template <>
inline const std::string& TrajCondition_Name(TrajCondition value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrajCondition_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool TrajCondition_Parse(absl::string_view name, TrajCondition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrajCondition>(
      TrajCondition_descriptor(), name, value);
}
enum StopCategory : int {
  IMMEDIATE_BRAKE = 0,
  SMOOTH_BRAKE = 1,
  SMOOTH_ONLY = 2,
  StopCategory_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StopCategory_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StopCategory_IsValid(int value);
constexpr StopCategory StopCategory_MIN = static_cast<StopCategory>(0);
constexpr StopCategory StopCategory_MAX = static_cast<StopCategory>(2);
constexpr int StopCategory_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
StopCategory_descriptor();
template <typename T>
const std::string& StopCategory_Name(T value) {
  static_assert(std::is_same<T, StopCategory>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StopCategory_Name().");
  return StopCategory_Name(static_cast<StopCategory>(value));
}
template <>
inline const std::string& StopCategory_Name(StopCategory value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StopCategory_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool StopCategory_Parse(absl::string_view name, StopCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StopCategory>(
      StopCategory_descriptor(), name, value);
}
enum PauseCategory : int {
  SMOOTH_PAUSE = 0,
  IMMEDIATE_PAUSE = 1,
  PauseCategory_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PauseCategory_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PauseCategory_IsValid(int value);
constexpr PauseCategory PauseCategory_MIN = static_cast<PauseCategory>(0);
constexpr PauseCategory PauseCategory_MAX = static_cast<PauseCategory>(1);
constexpr int PauseCategory_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
PauseCategory_descriptor();
template <typename T>
const std::string& PauseCategory_Name(T value) {
  static_assert(std::is_same<T, PauseCategory>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PauseCategory_Name().");
  return PauseCategory_Name(static_cast<PauseCategory>(value));
}
template <>
inline const std::string& PauseCategory_Name(PauseCategory value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PauseCategory_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool PauseCategory_Parse(absl::string_view name, PauseCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PauseCategory>(
      PauseCategory_descriptor(), name, value);
}
enum ProgramState : int {
  PROG_IDLE = 0,
  PROG_RUNNING = 1,
  PROG_PAUSING = 2,
  PROG_STOPPING = 3,
  ProgramState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProgramState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ProgramState_IsValid(int value);
constexpr ProgramState ProgramState_MIN = static_cast<ProgramState>(0);
constexpr ProgramState ProgramState_MAX = static_cast<ProgramState>(3);
constexpr int ProgramState_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ProgramState_descriptor();
template <typename T>
const std::string& ProgramState_Name(T value) {
  static_assert(std::is_same<T, ProgramState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProgramState_Name().");
  return ProgramState_Name(static_cast<ProgramState>(value));
}
template <>
inline const std::string& ProgramState_Name(ProgramState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProgramState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ProgramState_Parse(absl::string_view name, ProgramState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProgramState>(
      ProgramState_descriptor(), name, value);
}
enum CollisionPolicyType : int {
  COLL_NO_DETECT = 0,
  COLL_PAUSE = 1,
  COLL_RESUME_AFTER_SLEEP = 2,
  COLL_STOP = 3,
  CollisionPolicyType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CollisionPolicyType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CollisionPolicyType_IsValid(int value);
constexpr CollisionPolicyType CollisionPolicyType_MIN = static_cast<CollisionPolicyType>(0);
constexpr CollisionPolicyType CollisionPolicyType_MAX = static_cast<CollisionPolicyType>(3);
constexpr int CollisionPolicyType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
CollisionPolicyType_descriptor();
template <typename T>
const std::string& CollisionPolicyType_Name(T value) {
  static_assert(std::is_same<T, CollisionPolicyType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CollisionPolicyType_Name().");
  return CollisionPolicyType_Name(static_cast<CollisionPolicyType>(value));
}
template <>
inline const std::string& CollisionPolicyType_Name(CollisionPolicyType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CollisionPolicyType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool CollisionPolicyType_Parse(absl::string_view name, CollisionPolicyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CollisionPolicyType>(
      CollisionPolicyType_descriptor(), name, value);
}
enum TuningSpace : int {
  TUNE_ALL = 0,
  TUNE_JOINT = 1,
  TUNE_TASK = 2,
  TuningSpace_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TuningSpace_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TuningSpace_IsValid(int value);
constexpr TuningSpace TuningSpace_MIN = static_cast<TuningSpace>(0);
constexpr TuningSpace TuningSpace_MAX = static_cast<TuningSpace>(2);
constexpr int TuningSpace_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
TuningSpace_descriptor();
template <typename T>
const std::string& TuningSpace_Name(T value) {
  static_assert(std::is_same<T, TuningSpace>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TuningSpace_Name().");
  return TuningSpace_Name(static_cast<TuningSpace>(value));
}
template <>
inline const std::string& TuningSpace_Name(TuningSpace value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TuningSpace_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TuningSpace_Parse(absl::string_view name, TuningSpace* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TuningSpace>(
      TuningSpace_descriptor(), name, value);
}
enum TuningPrecision : int {
  LOW_PRECISION = 0,
  MIDDLE_PRECISION = 1,
  HIGH_PRECISION = 2,
  TuningPrecision_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TuningPrecision_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TuningPrecision_IsValid(int value);
constexpr TuningPrecision TuningPrecision_MIN = static_cast<TuningPrecision>(0);
constexpr TuningPrecision TuningPrecision_MAX = static_cast<TuningPrecision>(2);
constexpr int TuningPrecision_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
TuningPrecision_descriptor();
template <typename T>
const std::string& TuningPrecision_Name(T value) {
  static_assert(std::is_same<T, TuningPrecision>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TuningPrecision_Name().");
  return TuningPrecision_Name(static_cast<TuningPrecision>(value));
}
template <>
inline const std::string& TuningPrecision_Name(TuningPrecision value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TuningPrecision_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TuningPrecision_Parse(absl::string_view name, TuningPrecision* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TuningPrecision>(
      TuningPrecision_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Empty final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Empty(::google::protobuf::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Empty";
  }
  protected:
  explicit Empty(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class State final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR State(::google::protobuf::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<State>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const State& from) {
    State::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.State";
  }
  protected:
  explicit State(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
  };
  // bool enable = 1;
  void clear_enable() ;
  bool enable() const;
  void set_enable(bool value);

  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.State)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool enable_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class IntMode final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IntMode) */ {
 public:
  inline IntMode() : IntMode(nullptr) {}
  ~IntMode() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IntMode(::google::protobuf::internal::ConstantInitialized);

  IntMode(const IntMode& from);
  IntMode(IntMode&& from) noexcept
    : IntMode() {
    *this = ::std::move(from);
  }

  inline IntMode& operator=(const IntMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntMode& operator=(IntMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntMode* internal_default_instance() {
    return reinterpret_cast<const IntMode*>(
               &_IntMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IntMode& a, IntMode& b) {
    a.Swap(&b);
  }
  inline void Swap(IntMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntMode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntMode* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntMode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntMode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IntMode& from) {
    IntMode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntMode* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.IntMode";
  }
  protected:
  explicit IntMode(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // uint64 mode = 1;
  void clear_mode() ;
  ::uint64_t mode() const;
  void set_mode(::uint64_t value);

  private:
  ::uint64_t _internal_mode() const;
  void _internal_set_mode(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IntMode)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t mode_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class StopCat final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.StopCat) */ {
 public:
  inline StopCat() : StopCat(nullptr) {}
  ~StopCat() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StopCat(::google::protobuf::internal::ConstantInitialized);

  StopCat(const StopCat& from);
  StopCat(StopCat&& from) noexcept
    : StopCat() {
    *this = ::std::move(from);
  }

  inline StopCat& operator=(const StopCat& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopCat& operator=(StopCat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopCat& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopCat* internal_default_instance() {
    return reinterpret_cast<const StopCat*>(
               &_StopCat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopCat& a, StopCat& b) {
    a.Swap(&b);
  }
  inline void Swap(StopCat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopCat* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopCat* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopCat>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StopCat& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StopCat& from) {
    StopCat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopCat* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.StopCat";
  }
  protected:
  explicit StopCat(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
  };
  // .Nrmk.IndyFramework.StopCategory category = 1;
  void clear_category() ;
  ::Nrmk::IndyFramework::StopCategory category() const;
  void set_category(::Nrmk::IndyFramework::StopCategory value);

  private:
  ::Nrmk::IndyFramework::StopCategory _internal_category() const;
  void _internal_set_category(::Nrmk::IndyFramework::StopCategory value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.StopCat)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int category_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class PauseCat final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.PauseCat) */ {
 public:
  inline PauseCat() : PauseCat(nullptr) {}
  ~PauseCat() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PauseCat(::google::protobuf::internal::ConstantInitialized);

  PauseCat(const PauseCat& from);
  PauseCat(PauseCat&& from) noexcept
    : PauseCat() {
    *this = ::std::move(from);
  }

  inline PauseCat& operator=(const PauseCat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseCat& operator=(PauseCat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PauseCat& default_instance() {
    return *internal_default_instance();
  }
  static inline const PauseCat* internal_default_instance() {
    return reinterpret_cast<const PauseCat*>(
               &_PauseCat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PauseCat& a, PauseCat& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseCat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseCat* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PauseCat* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PauseCat>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PauseCat& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PauseCat& from) {
    PauseCat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseCat* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.PauseCat";
  }
  protected:
  explicit PauseCat(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
  };
  // .Nrmk.IndyFramework.PauseCategory category = 1;
  void clear_category() ;
  ::Nrmk::IndyFramework::PauseCategory category() const;
  void set_category(::Nrmk::IndyFramework::PauseCategory value);

  private:
  ::Nrmk::IndyFramework::PauseCategory _internal_category() const;
  void _internal_set_category(::Nrmk::IndyFramework::PauseCategory value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.PauseCat)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int category_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Response(::google::protobuf::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Response";
  }
  protected:
  explicit Response(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // int64 code = 1;
  void clear_code() ;
  ::int64_t code() const;
  void set_code(::int64_t value);

  private:
  ::int64_t _internal_code() const;
  void _internal_set_code(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Response)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 39, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::int64_t code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};// -------------------------------------------------------------------

class Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Message(::google::protobuf::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Nrmk.IndyFramework.Message";
  }
  protected:
  explicit Message(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* ptr);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Message)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 42, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr content_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fmsgs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// State

// bool enable = 1;
inline void State::clear_enable() {
  _impl_.enable_ = false;
}
inline bool State::enable() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.State.enable)
  return _internal_enable();
}
inline void State::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.State.enable)
}
inline bool State::_internal_enable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enable_;
}
inline void State::_internal_set_enable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.enable_ = value;
}

// -------------------------------------------------------------------

// IntMode

// uint64 mode = 1;
inline void IntMode::clear_mode() {
  _impl_.mode_ = ::uint64_t{0u};
}
inline ::uint64_t IntMode::mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IntMode.mode)
  return _internal_mode();
}
inline void IntMode::set_mode(::uint64_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IntMode.mode)
}
inline ::uint64_t IntMode::_internal_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mode_;
}
inline void IntMode::_internal_set_mode(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// StopCat

// .Nrmk.IndyFramework.StopCategory category = 1;
inline void StopCat::clear_category() {
  _impl_.category_ = 0;
}
inline ::Nrmk::IndyFramework::StopCategory StopCat::category() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.StopCat.category)
  return _internal_category();
}
inline void StopCat::set_category(::Nrmk::IndyFramework::StopCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.StopCat.category)
}
inline ::Nrmk::IndyFramework::StopCategory StopCat::_internal_category() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::StopCategory>(_impl_.category_);
}
inline void StopCat::_internal_set_category(::Nrmk::IndyFramework::StopCategory value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.category_ = value;
}

// -------------------------------------------------------------------

// PauseCat

// .Nrmk.IndyFramework.PauseCategory category = 1;
inline void PauseCat::clear_category() {
  _impl_.category_ = 0;
}
inline ::Nrmk::IndyFramework::PauseCategory PauseCat::category() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PauseCat.category)
  return _internal_category();
}
inline void PauseCat::set_category(::Nrmk::IndyFramework::PauseCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PauseCat.category)
}
inline ::Nrmk::IndyFramework::PauseCategory PauseCat::_internal_category() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Nrmk::IndyFramework::PauseCategory>(_impl_.category_);
}
inline void PauseCat::_internal_set_category(::Nrmk::IndyFramework::PauseCategory value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.category_ = value;
}

// -------------------------------------------------------------------

// Response

// int64 code = 1;
inline void Response::clear_code() {
  _impl_.code_ = ::int64_t{0};
}
inline ::int64_t Response::code() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Response.code)
  return _internal_code();
}
inline void Response::set_code(::int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Response.code)
}
inline ::int64_t Response::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_;
}
inline void Response::_internal_set_code(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_ = value;
}

// string msg = 2;
inline void Response::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& Response::msg() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Response.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Response::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Response.msg)
}
inline std::string* Response::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Response.msg)
  return _s;
}
inline const std::string& Response::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void Response::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* Response::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Response.msg)
  return _impl_.msg_.Release();
}
inline void Response::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Response.msg)
}

// -------------------------------------------------------------------

// Message

// string content = 1;
inline void Message::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Message::content() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Message.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Message.content)
}
inline std::string* Message::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Message.content)
  return _s;
}
inline const std::string& Message::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void Message::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.content_.Mutable( GetArenaForAllocation());
}
inline std::string* Message::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Message.content)
  return _impl_.content_.Release();
}
inline void Message::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Message.content)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Nrmk::IndyFramework::OpState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::OpState>() {
  return ::Nrmk::IndyFramework::OpState_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::TrajState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::TrajState>() {
  return ::Nrmk::IndyFramework::TrajState_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::TrajCondition> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::TrajCondition>() {
  return ::Nrmk::IndyFramework::TrajCondition_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::StopCategory> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::StopCategory>() {
  return ::Nrmk::IndyFramework::StopCategory_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::PauseCategory> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::PauseCategory>() {
  return ::Nrmk::IndyFramework::PauseCategory_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::ProgramState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::ProgramState>() {
  return ::Nrmk::IndyFramework::ProgramState_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::CollisionPolicyType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::CollisionPolicyType>() {
  return ::Nrmk::IndyFramework::CollisionPolicyType_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::TuningSpace> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::TuningSpace>() {
  return ::Nrmk::IndyFramework::TuningSpace_descriptor();
}
template <>
struct is_proto_enum<::Nrmk::IndyFramework::TuningPrecision> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Nrmk::IndyFramework::TuningPrecision>() {
  return ::Nrmk::IndyFramework::TuningPrecision_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_5fmsgs_2eproto_2epb_2eh
