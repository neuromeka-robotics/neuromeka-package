// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "device_msgs.pb.h"
#include "common_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[69]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fmsgs_2eproto;
namespace Nrmk {
namespace IndyFramework {
class AllVars;
class AllVarsDefaultTypeInternal;
extern AllVarsDefaultTypeInternal _AllVars_default_instance_;
class BlendingType;
class BlendingTypeDefaultTypeInternal;
extern BlendingTypeDefaultTypeInternal _BlendingType_default_instance_;
class BoolVariable;
class BoolVariableDefaultTypeInternal;
extern BoolVariableDefaultTypeInternal _BoolVariable_default_instance_;
class BoolVars;
class BoolVarsDefaultTypeInternal;
extern BoolVarsDefaultTypeInternal _BoolVars_default_instance_;
class CalculateCurrentPoseRelReq;
class CalculateCurrentPoseRelReqDefaultTypeInternal;
extern CalculateCurrentPoseRelReqDefaultTypeInternal _CalculateCurrentPoseRelReq_default_instance_;
class CalculateCurrentPoseRelRes;
class CalculateCurrentPoseRelResDefaultTypeInternal;
extern CalculateCurrentPoseRelResDefaultTypeInternal _CalculateCurrentPoseRelRes_default_instance_;
class CalculateRelativePoseReq;
class CalculateRelativePoseReqDefaultTypeInternal;
extern CalculateRelativePoseReqDefaultTypeInternal _CalculateRelativePoseReq_default_instance_;
class CalculateRelativePoseRes;
class CalculateRelativePoseResDefaultTypeInternal;
extern CalculateRelativePoseResDefaultTypeInternal _CalculateRelativePoseRes_default_instance_;
class CheckAproachRetractValidReq;
class CheckAproachRetractValidReqDefaultTypeInternal;
extern CheckAproachRetractValidReqDefaultTypeInternal _CheckAproachRetractValidReq_default_instance_;
class CheckAproachRetractValidRes;
class CheckAproachRetractValidResDefaultTypeInternal;
extern CheckAproachRetractValidResDefaultTypeInternal _CheckAproachRetractValidRes_default_instance_;
class ControlInfo;
class ControlInfoDefaultTypeInternal;
extern ControlInfoDefaultTypeInternal _ControlInfo_default_instance_;
class FloatVariable;
class FloatVariableDefaultTypeInternal;
extern FloatVariableDefaultTypeInternal _FloatVariable_default_instance_;
class FloatVars;
class FloatVarsDefaultTypeInternal;
extern FloatVarsDefaultTypeInternal _FloatVars_default_instance_;
class ForwardKinematicsReq;
class ForwardKinematicsReqDefaultTypeInternal;
extern ForwardKinematicsReqDefaultTypeInternal _ForwardKinematicsReq_default_instance_;
class ForwardKinematicsRes;
class ForwardKinematicsResDefaultTypeInternal;
extern ForwardKinematicsResDefaultTypeInternal _ForwardKinematicsRes_default_instance_;
class GetPalletPointListReq;
class GetPalletPointListReqDefaultTypeInternal;
extern GetPalletPointListReqDefaultTypeInternal _GetPalletPointListReq_default_instance_;
class GetPalletPointListRes;
class GetPalletPointListResDefaultTypeInternal;
extern GetPalletPointListResDefaultTypeInternal _GetPalletPointListRes_default_instance_;
class IOCondition;
class IOConditionDefaultTypeInternal;
extern IOConditionDefaultTypeInternal _IOCondition_default_instance_;
class IntVariable;
class IntVariableDefaultTypeInternal;
extern IntVariableDefaultTypeInternal _IntVariable_default_instance_;
class IntVars;
class IntVarsDefaultTypeInternal;
extern IntVarsDefaultTypeInternal _IntVars_default_instance_;
class InverseKinematicsReq;
class InverseKinematicsReqDefaultTypeInternal;
extern InverseKinematicsReqDefaultTypeInternal _InverseKinematicsReq_default_instance_;
class InverseKinematicsRes;
class InverseKinematicsResDefaultTypeInternal;
extern InverseKinematicsResDefaultTypeInternal _InverseKinematicsRes_default_instance_;
class JPosVariable;
class JPosVariableDefaultTypeInternal;
extern JPosVariableDefaultTypeInternal _JPosVariable_default_instance_;
class JPosVars;
class JPosVarsDefaultTypeInternal;
extern JPosVarsDefaultTypeInternal _JPosVars_default_instance_;
class ModbusServer;
class ModbusServerDefaultTypeInternal;
extern ModbusServerDefaultTypeInternal _ModbusServer_default_instance_;
class ModbusVariable;
class ModbusVariableDefaultTypeInternal;
extern ModbusVariableDefaultTypeInternal _ModbusVariable_default_instance_;
class ModbusVariableList;
class ModbusVariableListDefaultTypeInternal;
extern ModbusVariableListDefaultTypeInternal _ModbusVariableList_default_instance_;
class ModbusVars;
class ModbusVarsDefaultTypeInternal;
extern ModbusVarsDefaultTypeInternal _ModbusVars_default_instance_;
class MotionCondition;
class MotionConditionDefaultTypeInternal;
extern MotionConditionDefaultTypeInternal _MotionCondition_default_instance_;
class MoveAxisReq;
class MoveAxisReqDefaultTypeInternal;
extern MoveAxisReqDefaultTypeInternal _MoveAxisReq_default_instance_;
class MoveCReq;
class MoveCReqDefaultTypeInternal;
extern MoveCReqDefaultTypeInternal _MoveCReq_default_instance_;
class MoveCTReq;
class MoveCTReqDefaultTypeInternal;
extern MoveCTReqDefaultTypeInternal _MoveCTReq_default_instance_;
class MoveConveyorReq;
class MoveConveyorReqDefaultTypeInternal;
extern MoveConveyorReqDefaultTypeInternal _MoveConveyorReq_default_instance_;
class MoveFLRes;
class MoveFLResDefaultTypeInternal;
extern MoveFLResDefaultTypeInternal _MoveFLRes_default_instance_;
class MoveJCondReq;
class MoveJCondReqDefaultTypeInternal;
extern MoveJCondReqDefaultTypeInternal _MoveJCondReq_default_instance_;
class MoveJReq;
class MoveJReqDefaultTypeInternal;
extern MoveJReqDefaultTypeInternal _MoveJReq_default_instance_;
class MoveJTReq;
class MoveJTReqDefaultTypeInternal;
extern MoveJTReqDefaultTypeInternal _MoveJTReq_default_instance_;
class MoveJointTrajReq;
class MoveJointTrajReqDefaultTypeInternal;
extern MoveJointTrajReqDefaultTypeInternal _MoveJointTrajReq_default_instance_;
class MoveLFReq;
class MoveLFReqDefaultTypeInternal;
extern MoveLFReqDefaultTypeInternal _MoveLFReq_default_instance_;
class MoveLReq;
class MoveLReqDefaultTypeInternal;
extern MoveLReqDefaultTypeInternal _MoveLReq_default_instance_;
class MoveLTReq;
class MoveLTReqDefaultTypeInternal;
extern MoveLTReqDefaultTypeInternal _MoveLTReq_default_instance_;
class MoveTaskTrajReq;
class MoveTaskTrajReqDefaultTypeInternal;
extern MoveTaskTrajReqDefaultTypeInternal _MoveTaskTrajReq_default_instance_;
class MoveTeleJReq;
class MoveTeleJReqDefaultTypeInternal;
extern MoveTeleJReqDefaultTypeInternal _MoveTeleJReq_default_instance_;
class MoveTeleLReq;
class MoveTeleLReqDefaultTypeInternal;
extern MoveTeleLReqDefaultTypeInternal _MoveTeleLReq_default_instance_;
class PalletPoint;
class PalletPointDefaultTypeInternal;
extern PalletPointDefaultTypeInternal _PalletPoint_default_instance_;
class Program;
class ProgramDefaultTypeInternal;
extern ProgramDefaultTypeInternal _Program_default_instance_;
class ProgramInfo;
class ProgramInfoDefaultTypeInternal;
extern ProgramInfoDefaultTypeInternal _ProgramInfo_default_instance_;
class SDKLicenseInfo;
class SDKLicenseInfoDefaultTypeInternal;
extern SDKLicenseInfoDefaultTypeInternal _SDKLicenseInfo_default_instance_;
class SDKLicenseResp;
class SDKLicenseRespDefaultTypeInternal;
extern SDKLicenseRespDefaultTypeInternal _SDKLicenseResp_default_instance_;
class TPosVariable;
class TPosVariableDefaultTypeInternal;
extern TPosVariableDefaultTypeInternal _TPosVariable_default_instance_;
class TPosVars;
class TPosVarsDefaultTypeInternal;
extern TPosVarsDefaultTypeInternal _TPosVars_default_instance_;
class TargetC;
class TargetCDefaultTypeInternal;
extern TargetCDefaultTypeInternal _TargetC_default_instance_;
class TargetJ;
class TargetJDefaultTypeInternal;
extern TargetJDefaultTypeInternal _TargetJ_default_instance_;
class TargetP;
class TargetPDefaultTypeInternal;
extern TargetPDefaultTypeInternal _TargetP_default_instance_;
class TeleFileReq;
class TeleFileReqDefaultTypeInternal;
extern TeleFileReqDefaultTypeInternal _TeleFileReq_default_instance_;
class TeleOpDevice;
class TeleOpDeviceDefaultTypeInternal;
extern TeleOpDeviceDefaultTypeInternal _TeleOpDevice_default_instance_;
class TeleOpFileList;
class TeleOpFileListDefaultTypeInternal;
extern TeleOpFileListDefaultTypeInternal _TeleOpFileList_default_instance_;
class TeleOpState;
class TeleOpStateDefaultTypeInternal;
extern TeleOpStateDefaultTypeInternal _TeleOpState_default_instance_;
class TeleP;
class TelePDefaultTypeInternal;
extern TelePDefaultTypeInternal _TeleP_default_instance_;
class TelePlayRate;
class TelePlayRateDefaultTypeInternal;
extern TelePlayRateDefaultTypeInternal _TelePlayRate_default_instance_;
class TransformedFTSensorData;
class TransformedFTSensorDataDefaultTypeInternal;
extern TransformedFTSensorDataDefaultTypeInternal _TransformedFTSensorData_default_instance_;
class TuningProgram;
class TuningProgramDefaultTypeInternal;
extern TuningProgramDefaultTypeInternal _TuningProgram_default_instance_;
class Variable;
class VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
class VariableCondition;
class VariableConditionDefaultTypeInternal;
extern VariableConditionDefaultTypeInternal _VariableCondition_default_instance_;
class WaitIOReq;
class WaitIOReqDefaultTypeInternal;
extern WaitIOReqDefaultTypeInternal _WaitIOReq_default_instance_;
class WaitProgressReq;
class WaitProgressReqDefaultTypeInternal;
extern WaitProgressReqDefaultTypeInternal _WaitProgressReq_default_instance_;
class WaitRadiusReq;
class WaitRadiusReqDefaultTypeInternal;
extern WaitRadiusReqDefaultTypeInternal _WaitRadiusReq_default_instance_;
class WaitTimeReq;
class WaitTimeReqDefaultTypeInternal;
extern WaitTimeReqDefaultTypeInternal _WaitTimeReq_default_instance_;
class WaitTrajReq;
class WaitTrajReqDefaultTypeInternal;
extern WaitTrajReqDefaultTypeInternal _WaitTrajReq_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
PROTOBUF_NAMESPACE_OPEN
template<> ::Nrmk::IndyFramework::AllVars* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::AllVars>(Arena*);
template<> ::Nrmk::IndyFramework::BlendingType* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(Arena*);
template<> ::Nrmk::IndyFramework::BoolVariable* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::BoolVariable>(Arena*);
template<> ::Nrmk::IndyFramework::BoolVars* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::BoolVars>(Arena*);
template<> ::Nrmk::IndyFramework::CalculateCurrentPoseRelReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::CalculateCurrentPoseRelReq>(Arena*);
template<> ::Nrmk::IndyFramework::CalculateCurrentPoseRelRes* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::CalculateCurrentPoseRelRes>(Arena*);
template<> ::Nrmk::IndyFramework::CalculateRelativePoseReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::CalculateRelativePoseReq>(Arena*);
template<> ::Nrmk::IndyFramework::CalculateRelativePoseRes* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::CalculateRelativePoseRes>(Arena*);
template<> ::Nrmk::IndyFramework::CheckAproachRetractValidReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::CheckAproachRetractValidReq>(Arena*);
template<> ::Nrmk::IndyFramework::CheckAproachRetractValidRes* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::CheckAproachRetractValidRes>(Arena*);
template<> ::Nrmk::IndyFramework::ControlInfo* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ControlInfo>(Arena*);
template<> ::Nrmk::IndyFramework::FloatVariable* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::FloatVariable>(Arena*);
template<> ::Nrmk::IndyFramework::FloatVars* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::FloatVars>(Arena*);
template<> ::Nrmk::IndyFramework::ForwardKinematicsReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ForwardKinematicsReq>(Arena*);
template<> ::Nrmk::IndyFramework::ForwardKinematicsRes* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ForwardKinematicsRes>(Arena*);
template<> ::Nrmk::IndyFramework::GetPalletPointListReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::GetPalletPointListReq>(Arena*);
template<> ::Nrmk::IndyFramework::GetPalletPointListRes* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::GetPalletPointListRes>(Arena*);
template<> ::Nrmk::IndyFramework::IOCondition* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::IOCondition>(Arena*);
template<> ::Nrmk::IndyFramework::IntVariable* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::IntVariable>(Arena*);
template<> ::Nrmk::IndyFramework::IntVars* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::IntVars>(Arena*);
template<> ::Nrmk::IndyFramework::InverseKinematicsReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::InverseKinematicsReq>(Arena*);
template<> ::Nrmk::IndyFramework::InverseKinematicsRes* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::InverseKinematicsRes>(Arena*);
template<> ::Nrmk::IndyFramework::JPosVariable* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::JPosVariable>(Arena*);
template<> ::Nrmk::IndyFramework::JPosVars* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::JPosVars>(Arena*);
template<> ::Nrmk::IndyFramework::ModbusServer* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ModbusServer>(Arena*);
template<> ::Nrmk::IndyFramework::ModbusVariable* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ModbusVariable>(Arena*);
template<> ::Nrmk::IndyFramework::ModbusVariableList* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ModbusVariableList>(Arena*);
template<> ::Nrmk::IndyFramework::ModbusVars* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ModbusVars>(Arena*);
template<> ::Nrmk::IndyFramework::MotionCondition* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(Arena*);
template<> ::Nrmk::IndyFramework::MoveAxisReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveAxisReq>(Arena*);
template<> ::Nrmk::IndyFramework::MoveCReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveCReq>(Arena*);
template<> ::Nrmk::IndyFramework::MoveCTReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveCTReq>(Arena*);
template<> ::Nrmk::IndyFramework::MoveConveyorReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveConveyorReq>(Arena*);
template<> ::Nrmk::IndyFramework::MoveFLRes* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveFLRes>(Arena*);
template<> ::Nrmk::IndyFramework::MoveJCondReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveJCondReq>(Arena*);
template<> ::Nrmk::IndyFramework::MoveJReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveJReq>(Arena*);
template<> ::Nrmk::IndyFramework::MoveJTReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveJTReq>(Arena*);
template<> ::Nrmk::IndyFramework::MoveJointTrajReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveJointTrajReq>(Arena*);
template<> ::Nrmk::IndyFramework::MoveLFReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveLFReq>(Arena*);
template<> ::Nrmk::IndyFramework::MoveLReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveLReq>(Arena*);
template<> ::Nrmk::IndyFramework::MoveLTReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveLTReq>(Arena*);
template<> ::Nrmk::IndyFramework::MoveTaskTrajReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveTaskTrajReq>(Arena*);
template<> ::Nrmk::IndyFramework::MoveTeleJReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveTeleJReq>(Arena*);
template<> ::Nrmk::IndyFramework::MoveTeleLReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::MoveTeleLReq>(Arena*);
template<> ::Nrmk::IndyFramework::PalletPoint* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::PalletPoint>(Arena*);
template<> ::Nrmk::IndyFramework::Program* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::Program>(Arena*);
template<> ::Nrmk::IndyFramework::ProgramInfo* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::ProgramInfo>(Arena*);
template<> ::Nrmk::IndyFramework::SDKLicenseInfo* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::SDKLicenseInfo>(Arena*);
template<> ::Nrmk::IndyFramework::SDKLicenseResp* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::SDKLicenseResp>(Arena*);
template<> ::Nrmk::IndyFramework::TPosVariable* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TPosVariable>(Arena*);
template<> ::Nrmk::IndyFramework::TPosVars* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TPosVars>(Arena*);
template<> ::Nrmk::IndyFramework::TargetC* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TargetC>(Arena*);
template<> ::Nrmk::IndyFramework::TargetJ* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TargetJ>(Arena*);
template<> ::Nrmk::IndyFramework::TargetP* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TargetP>(Arena*);
template<> ::Nrmk::IndyFramework::TeleFileReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TeleFileReq>(Arena*);
template<> ::Nrmk::IndyFramework::TeleOpDevice* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TeleOpDevice>(Arena*);
template<> ::Nrmk::IndyFramework::TeleOpFileList* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TeleOpFileList>(Arena*);
template<> ::Nrmk::IndyFramework::TeleOpState* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TeleOpState>(Arena*);
template<> ::Nrmk::IndyFramework::TeleP* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TeleP>(Arena*);
template<> ::Nrmk::IndyFramework::TelePlayRate* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TelePlayRate>(Arena*);
template<> ::Nrmk::IndyFramework::TransformedFTSensorData* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TransformedFTSensorData>(Arena*);
template<> ::Nrmk::IndyFramework::TuningProgram* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::TuningProgram>(Arena*);
template<> ::Nrmk::IndyFramework::Variable* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::Variable>(Arena*);
template<> ::Nrmk::IndyFramework::VariableCondition* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::VariableCondition>(Arena*);
template<> ::Nrmk::IndyFramework::WaitIOReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::WaitIOReq>(Arena*);
template<> ::Nrmk::IndyFramework::WaitProgressReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::WaitProgressReq>(Arena*);
template<> ::Nrmk::IndyFramework::WaitRadiusReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::WaitRadiusReq>(Arena*);
template<> ::Nrmk::IndyFramework::WaitTimeReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::WaitTimeReq>(Arena*);
template<> ::Nrmk::IndyFramework::WaitTrajReq* Arena::CreateMaybeMessage<::Nrmk::IndyFramework::WaitTrajReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Nrmk {
namespace IndyFramework {

enum MotionCondition_ConditionType : int {
  MotionCondition_ConditionType_CONST_COND = 0,
  MotionCondition_ConditionType_IO_COND = 1,
  MotionCondition_ConditionType_VAR_COND = 2,
  MotionCondition_ConditionType_MotionCondition_ConditionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MotionCondition_ConditionType_MotionCondition_ConditionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MotionCondition_ConditionType_IsValid(int value);
constexpr MotionCondition_ConditionType MotionCondition_ConditionType_ConditionType_MIN = MotionCondition_ConditionType_CONST_COND;
constexpr MotionCondition_ConditionType MotionCondition_ConditionType_ConditionType_MAX = MotionCondition_ConditionType_VAR_COND;
constexpr int MotionCondition_ConditionType_ConditionType_ARRAYSIZE = MotionCondition_ConditionType_ConditionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionCondition_ConditionType_descriptor();
template<typename T>
inline const std::string& MotionCondition_ConditionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MotionCondition_ConditionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MotionCondition_ConditionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MotionCondition_ConditionType_descriptor(), enum_t_value);
}
inline bool MotionCondition_ConditionType_Parse(
    const std::string& name, MotionCondition_ConditionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MotionCondition_ConditionType>(
    MotionCondition_ConditionType_descriptor(), name, value);
}
enum MotionCondition_ReactionType : int {
  MotionCondition_ReactionType_NONE_COND = 0,
  MotionCondition_ReactionType_STOP_COND = 1,
  MotionCondition_ReactionType_PAUSE_COND = 2,
  MotionCondition_ReactionType_MotionCondition_ReactionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MotionCondition_ReactionType_MotionCondition_ReactionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MotionCondition_ReactionType_IsValid(int value);
constexpr MotionCondition_ReactionType MotionCondition_ReactionType_ReactionType_MIN = MotionCondition_ReactionType_NONE_COND;
constexpr MotionCondition_ReactionType MotionCondition_ReactionType_ReactionType_MAX = MotionCondition_ReactionType_PAUSE_COND;
constexpr int MotionCondition_ReactionType_ReactionType_ARRAYSIZE = MotionCondition_ReactionType_ReactionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionCondition_ReactionType_descriptor();
template<typename T>
inline const std::string& MotionCondition_ReactionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MotionCondition_ReactionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MotionCondition_ReactionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MotionCondition_ReactionType_descriptor(), enum_t_value);
}
inline bool MotionCondition_ReactionType_Parse(
    const std::string& name, MotionCondition_ReactionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MotionCondition_ReactionType>(
    MotionCondition_ReactionType_descriptor(), name, value);
}
enum BlendingType_Type : int {
  BlendingType_Type_NONE = 0,
  BlendingType_Type_OVERRIDE = 1,
  BlendingType_Type_DUPLICATE = 2,
  BlendingType_Type_BlendingType_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlendingType_Type_BlendingType_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlendingType_Type_IsValid(int value);
constexpr BlendingType_Type BlendingType_Type_Type_MIN = BlendingType_Type_NONE;
constexpr BlendingType_Type BlendingType_Type_Type_MAX = BlendingType_Type_DUPLICATE;
constexpr int BlendingType_Type_Type_ARRAYSIZE = BlendingType_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlendingType_Type_descriptor();
template<typename T>
inline const std::string& BlendingType_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlendingType_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlendingType_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BlendingType_Type_descriptor(), enum_t_value);
}
inline bool BlendingType_Type_Parse(
    const std::string& name, BlendingType_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BlendingType_Type>(
    BlendingType_Type_descriptor(), name, value);
}
enum ModbusVariable_SignalType : int {
  ModbusVariable_SignalType_ReadCoil = 0,
  ModbusVariable_SignalType_WriteCoil = 1,
  ModbusVariable_SignalType_ReadRegister = 2,
  ModbusVariable_SignalType_WriteRegister = 3,
  ModbusVariable_SignalType_ModbusVariable_SignalType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ModbusVariable_SignalType_ModbusVariable_SignalType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ModbusVariable_SignalType_IsValid(int value);
constexpr ModbusVariable_SignalType ModbusVariable_SignalType_SignalType_MIN = ModbusVariable_SignalType_ReadCoil;
constexpr ModbusVariable_SignalType ModbusVariable_SignalType_SignalType_MAX = ModbusVariable_SignalType_WriteRegister;
constexpr int ModbusVariable_SignalType_SignalType_ARRAYSIZE = ModbusVariable_SignalType_SignalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModbusVariable_SignalType_descriptor();
template<typename T>
inline const std::string& ModbusVariable_SignalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModbusVariable_SignalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModbusVariable_SignalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModbusVariable_SignalType_descriptor(), enum_t_value);
}
inline bool ModbusVariable_SignalType_Parse(
    const std::string& name, ModbusVariable_SignalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModbusVariable_SignalType>(
    ModbusVariable_SignalType_descriptor(), name, value);
}
enum TeleOpDevice_TeleOpDeviceType : int {
  TeleOpDevice_TeleOpDeviceType_NONE = 0,
  TeleOpDevice_TeleOpDeviceType_VIVE = 1,
  TeleOpDevice_TeleOpDeviceType_TeleOpDevice_TeleOpDeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TeleOpDevice_TeleOpDeviceType_TeleOpDevice_TeleOpDeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TeleOpDevice_TeleOpDeviceType_IsValid(int value);
constexpr TeleOpDevice_TeleOpDeviceType TeleOpDevice_TeleOpDeviceType_TeleOpDeviceType_MIN = TeleOpDevice_TeleOpDeviceType_NONE;
constexpr TeleOpDevice_TeleOpDeviceType TeleOpDevice_TeleOpDeviceType_TeleOpDeviceType_MAX = TeleOpDevice_TeleOpDeviceType_VIVE;
constexpr int TeleOpDevice_TeleOpDeviceType_TeleOpDeviceType_ARRAYSIZE = TeleOpDevice_TeleOpDeviceType_TeleOpDeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeleOpDevice_TeleOpDeviceType_descriptor();
template<typename T>
inline const std::string& TeleOpDevice_TeleOpDeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TeleOpDevice_TeleOpDeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TeleOpDevice_TeleOpDeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TeleOpDevice_TeleOpDeviceType_descriptor(), enum_t_value);
}
inline bool TeleOpDevice_TeleOpDeviceType_Parse(
    const std::string& name, TeleOpDevice_TeleOpDeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TeleOpDevice_TeleOpDeviceType>(
    TeleOpDevice_TeleOpDeviceType_descriptor(), name, value);
}
enum JointBaseType : int {
  ABSOLUTE_JOINT = 0,
  RELATIVE_JOINT = 1,
  JointBaseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JointBaseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool JointBaseType_IsValid(int value);
constexpr JointBaseType JointBaseType_MIN = ABSOLUTE_JOINT;
constexpr JointBaseType JointBaseType_MAX = RELATIVE_JOINT;
constexpr int JointBaseType_ARRAYSIZE = JointBaseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JointBaseType_descriptor();
template<typename T>
inline const std::string& JointBaseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JointBaseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JointBaseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JointBaseType_descriptor(), enum_t_value);
}
inline bool JointBaseType_Parse(
    const std::string& name, JointBaseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JointBaseType>(
    JointBaseType_descriptor(), name, value);
}
enum TaskBaseType : int {
  ABSOLUTE_TASK = 0,
  RELATIVE_TASK = 1,
  TCP_TASK = 2,
  TaskBaseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TaskBaseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TaskBaseType_IsValid(int value);
constexpr TaskBaseType TaskBaseType_MIN = ABSOLUTE_TASK;
constexpr TaskBaseType TaskBaseType_MAX = TCP_TASK;
constexpr int TaskBaseType_ARRAYSIZE = TaskBaseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskBaseType_descriptor();
template<typename T>
inline const std::string& TaskBaseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskBaseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskBaseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskBaseType_descriptor(), enum_t_value);
}
inline bool TaskBaseType_Parse(
    const std::string& name, TaskBaseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskBaseType>(
    TaskBaseType_descriptor(), name, value);
}
enum VelocityModeType : int {
  TIME_ORIENTED = 0,
  DISP_ORIENTED = 1,
  ROT_ORIENTED = 2,
  VelocityModeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VelocityModeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VelocityModeType_IsValid(int value);
constexpr VelocityModeType VelocityModeType_MIN = TIME_ORIENTED;
constexpr VelocityModeType VelocityModeType_MAX = ROT_ORIENTED;
constexpr int VelocityModeType_ARRAYSIZE = VelocityModeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VelocityModeType_descriptor();
template<typename T>
inline const std::string& VelocityModeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VelocityModeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VelocityModeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VelocityModeType_descriptor(), enum_t_value);
}
inline bool VelocityModeType_Parse(
    const std::string& name, VelocityModeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VelocityModeType>(
    VelocityModeType_descriptor(), name, value);
}
enum CircularSettingType : int {
  POINT_SET = 0,
  CENTER_AXIS = 1,
  CircularSettingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CircularSettingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CircularSettingType_IsValid(int value);
constexpr CircularSettingType CircularSettingType_MIN = POINT_SET;
constexpr CircularSettingType CircularSettingType_MAX = CENTER_AXIS;
constexpr int CircularSettingType_ARRAYSIZE = CircularSettingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CircularSettingType_descriptor();
template<typename T>
inline const std::string& CircularSettingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CircularSettingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CircularSettingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CircularSettingType_descriptor(), enum_t_value);
}
inline bool CircularSettingType_Parse(
    const std::string& name, CircularSettingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CircularSettingType>(
    CircularSettingType_descriptor(), name, value);
}
enum CircularMovingType : int {
  CONSTANT = 0,
  RADIAL = 1,
  SMOOTH = 2,
  CircularMovingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CircularMovingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CircularMovingType_IsValid(int value);
constexpr CircularMovingType CircularMovingType_MIN = CONSTANT;
constexpr CircularMovingType CircularMovingType_MAX = SMOOTH;
constexpr int CircularMovingType_ARRAYSIZE = CircularMovingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CircularMovingType_descriptor();
template<typename T>
inline const std::string& CircularMovingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CircularMovingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CircularMovingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CircularMovingType_descriptor(), enum_t_value);
}
inline bool CircularMovingType_Parse(
    const std::string& name, CircularMovingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CircularMovingType>(
    CircularMovingType_descriptor(), name, value);
}
enum TeleMode : int {
  TELE_INACTIVE = 0,
  TELE_CALIB = 1,
  TELE_RECORD = 2,
  TELE_PLAY = 3,
  TELE_RAW = 10,
  TELE_MOVE = 20,
  TeleMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TeleMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TeleMode_IsValid(int value);
constexpr TeleMode TeleMode_MIN = TELE_INACTIVE;
constexpr TeleMode TeleMode_MAX = TELE_MOVE;
constexpr int TeleMode_ARRAYSIZE = TeleMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeleMode_descriptor();
template<typename T>
inline const std::string& TeleMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TeleMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TeleMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TeleMode_descriptor(), enum_t_value);
}
inline bool TeleMode_Parse(
    const std::string& name, TeleMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TeleMode>(
    TeleMode_descriptor(), name, value);
}
enum TeleMethod : int {
  TELE_TASK_ABSOLUTE = 0,
  TELE_TASK_RELATIVE = 1,
  TELE_TASK_TCP = 2,
  TELE_JOINT_ABSOLUTE = 10,
  TELE_JOINT_RELATIVE = 11,
  TELE_RECORD_ABSOLUTE = 20,
  TeleMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TeleMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TeleMethod_IsValid(int value);
constexpr TeleMethod TeleMethod_MIN = TELE_TASK_ABSOLUTE;
constexpr TeleMethod TeleMethod_MAX = TELE_RECORD_ABSOLUTE;
constexpr int TeleMethod_ARRAYSIZE = TeleMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeleMethod_descriptor();
template<typename T>
inline const std::string& TeleMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TeleMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TeleMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TeleMethod_descriptor(), enum_t_value);
}
inline bool TeleMethod_Parse(
    const std::string& name, TeleMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TeleMethod>(
    TeleMethod_descriptor(), name, value);
}
// ===================================================================

class ControlInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ControlInfo) */ {
 public:
  ControlInfo();
  virtual ~ControlInfo();

  ControlInfo(const ControlInfo& from);
  ControlInfo(ControlInfo&& from) noexcept
    : ControlInfo() {
    *this = ::std::move(from);
  }

  inline ControlInfo& operator=(const ControlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlInfo& operator=(ControlInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlInfo* internal_default_instance() {
    return reinterpret_cast<const ControlInfo*>(
               &_ControlInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ControlInfo* other);
  friend void swap(ControlInfo& a, ControlInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlInfo* New() const final {
    return CreateMaybeMessage<ControlInfo>(nullptr);
  }

  ControlInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlInfo& from);
  void MergeFrom(const ControlInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ControlInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string control_version = 1;
  void clear_control_version();
  static const int kControlVersionFieldNumber = 1;
  const std::string& control_version() const;
  void set_control_version(const std::string& value);
  void set_control_version(std::string&& value);
  void set_control_version(const char* value);
  void set_control_version(const char* value, size_t size);
  std::string* mutable_control_version();
  std::string* release_control_version();
  void set_allocated_control_version(std::string* control_version);

  // string robot_model = 2;
  void clear_robot_model();
  static const int kRobotModelFieldNumber = 2;
  const std::string& robot_model() const;
  void set_robot_model(const std::string& value);
  void set_robot_model(std::string&& value);
  void set_robot_model(const char* value);
  void set_robot_model(const char* value, size_t size);
  std::string* mutable_robot_model();
  std::string* release_robot_model();
  void set_allocated_robot_model(std::string* robot_model);

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ControlInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr control_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_model_;
  ::Nrmk::IndyFramework::Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SDKLicenseInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SDKLicenseInfo) */ {
 public:
  SDKLicenseInfo();
  virtual ~SDKLicenseInfo();

  SDKLicenseInfo(const SDKLicenseInfo& from);
  SDKLicenseInfo(SDKLicenseInfo&& from) noexcept
    : SDKLicenseInfo() {
    *this = ::std::move(from);
  }

  inline SDKLicenseInfo& operator=(const SDKLicenseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKLicenseInfo& operator=(SDKLicenseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDKLicenseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDKLicenseInfo* internal_default_instance() {
    return reinterpret_cast<const SDKLicenseInfo*>(
               &_SDKLicenseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SDKLicenseInfo* other);
  friend void swap(SDKLicenseInfo& a, SDKLicenseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDKLicenseInfo* New() const final {
    return CreateMaybeMessage<SDKLicenseInfo>(nullptr);
  }

  SDKLicenseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDKLicenseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDKLicenseInfo& from);
  void MergeFrom(const SDKLicenseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKLicenseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.SDKLicenseInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string license_key = 1;
  void clear_license_key();
  static const int kLicenseKeyFieldNumber = 1;
  const std::string& license_key() const;
  void set_license_key(const std::string& value);
  void set_license_key(std::string&& value);
  void set_license_key(const char* value);
  void set_license_key(const char* value, size_t size);
  std::string* mutable_license_key();
  std::string* release_license_key();
  void set_allocated_license_key(std::string* license_key);

  // string expire_date = 2;
  void clear_expire_date();
  static const int kExpireDateFieldNumber = 2;
  const std::string& expire_date() const;
  void set_expire_date(const std::string& value);
  void set_expire_date(std::string&& value);
  void set_expire_date(const char* value);
  void set_expire_date(const char* value, size_t size);
  std::string* mutable_expire_date();
  std::string* release_expire_date();
  void set_allocated_expire_date(std::string* expire_date);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SDKLicenseInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr license_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expire_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SDKLicenseResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.SDKLicenseResp) */ {
 public:
  SDKLicenseResp();
  virtual ~SDKLicenseResp();

  SDKLicenseResp(const SDKLicenseResp& from);
  SDKLicenseResp(SDKLicenseResp&& from) noexcept
    : SDKLicenseResp() {
    *this = ::std::move(from);
  }

  inline SDKLicenseResp& operator=(const SDKLicenseResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKLicenseResp& operator=(SDKLicenseResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDKLicenseResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDKLicenseResp* internal_default_instance() {
    return reinterpret_cast<const SDKLicenseResp*>(
               &_SDKLicenseResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SDKLicenseResp* other);
  friend void swap(SDKLicenseResp& a, SDKLicenseResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDKLicenseResp* New() const final {
    return CreateMaybeMessage<SDKLicenseResp>(nullptr);
  }

  SDKLicenseResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDKLicenseResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDKLicenseResp& from);
  void MergeFrom(const SDKLicenseResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKLicenseResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.SDKLicenseResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // bool activated = 1;
  void clear_activated();
  static const int kActivatedFieldNumber = 1;
  bool activated() const;
  void set_activated(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.SDKLicenseResp)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::Response* response_;
  bool activated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class VariableCondition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.VariableCondition) */ {
 public:
  VariableCondition();
  virtual ~VariableCondition();

  VariableCondition(const VariableCondition& from);
  VariableCondition(VariableCondition&& from) noexcept
    : VariableCondition() {
    *this = ::std::move(from);
  }

  inline VariableCondition& operator=(const VariableCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableCondition& operator=(VariableCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VariableCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariableCondition* internal_default_instance() {
    return reinterpret_cast<const VariableCondition*>(
               &_VariableCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(VariableCondition* other);
  friend void swap(VariableCondition& a, VariableCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VariableCondition* New() const final {
    return CreateMaybeMessage<VariableCondition>(nullptr);
  }

  VariableCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariableCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariableCondition& from);
  void MergeFrom(const VariableCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.VariableCondition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.IntVariable i_vars = 1;
  int i_vars_size() const;
  void clear_i_vars();
  static const int kIVarsFieldNumber = 1;
  ::Nrmk::IndyFramework::IntVariable* mutable_i_vars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >*
      mutable_i_vars();
  const ::Nrmk::IndyFramework::IntVariable& i_vars(int index) const;
  ::Nrmk::IndyFramework::IntVariable* add_i_vars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >&
      i_vars() const;

  // repeated .Nrmk.IndyFramework.FloatVariable f_vars = 2;
  int f_vars_size() const;
  void clear_f_vars();
  static const int kFVarsFieldNumber = 2;
  ::Nrmk::IndyFramework::FloatVariable* mutable_f_vars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >*
      mutable_f_vars();
  const ::Nrmk::IndyFramework::FloatVariable& f_vars(int index) const;
  ::Nrmk::IndyFramework::FloatVariable* add_f_vars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >&
      f_vars() const;

  // repeated .Nrmk.IndyFramework.BoolVariable b_vars = 3;
  int b_vars_size() const;
  void clear_b_vars();
  static const int kBVarsFieldNumber = 3;
  ::Nrmk::IndyFramework::BoolVariable* mutable_b_vars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >*
      mutable_b_vars();
  const ::Nrmk::IndyFramework::BoolVariable& b_vars(int index) const;
  ::Nrmk::IndyFramework::BoolVariable* add_b_vars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >&
      b_vars() const;

  // repeated .Nrmk.IndyFramework.ModbusVariable m_vars = 4;
  int m_vars_size() const;
  void clear_m_vars();
  static const int kMVarsFieldNumber = 4;
  ::Nrmk::IndyFramework::ModbusVariable* mutable_m_vars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >*
      mutable_m_vars();
  const ::Nrmk::IndyFramework::ModbusVariable& m_vars(int index) const;
  ::Nrmk::IndyFramework::ModbusVariable* add_m_vars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >&
      m_vars() const;

  // repeated .Nrmk.IndyFramework.JPosVariable j_vars = 5;
  int j_vars_size() const;
  void clear_j_vars();
  static const int kJVarsFieldNumber = 5;
  ::Nrmk::IndyFramework::JPosVariable* mutable_j_vars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >*
      mutable_j_vars();
  const ::Nrmk::IndyFramework::JPosVariable& j_vars(int index) const;
  ::Nrmk::IndyFramework::JPosVariable* add_j_vars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >&
      j_vars() const;

  // repeated .Nrmk.IndyFramework.TPosVariable t_vars = 6;
  int t_vars_size() const;
  void clear_t_vars();
  static const int kTVarsFieldNumber = 6;
  ::Nrmk::IndyFramework::TPosVariable* mutable_t_vars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >*
      mutable_t_vars();
  const ::Nrmk::IndyFramework::TPosVariable& t_vars(int index) const;
  ::Nrmk::IndyFramework::TPosVariable* add_t_vars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >&
      t_vars() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.VariableCondition)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable > i_vars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable > f_vars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable > b_vars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable > m_vars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable > j_vars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable > t_vars_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class IOCondition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IOCondition) */ {
 public:
  IOCondition();
  virtual ~IOCondition();

  IOCondition(const IOCondition& from);
  IOCondition(IOCondition&& from) noexcept
    : IOCondition() {
    *this = ::std::move(from);
  }

  inline IOCondition& operator=(const IOCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOCondition& operator=(IOCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IOCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IOCondition* internal_default_instance() {
    return reinterpret_cast<const IOCondition*>(
               &_IOCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(IOCondition* other);
  friend void swap(IOCondition& a, IOCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IOCondition* New() const final {
    return CreateMaybeMessage<IOCondition>(nullptr);
  }

  IOCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IOCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IOCondition& from);
  void MergeFrom(const IOCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.IOCondition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
  int di_size() const;
  void clear_di();
  static const int kDiFieldNumber = 1;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_di(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_di();
  const ::Nrmk::IndyFramework::DigitalSignal& di(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_di();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      di() const;

  // repeated .Nrmk.IndyFramework.DigitalSignal end_di = 2;
  int end_di_size() const;
  void clear_end_di();
  static const int kEndDiFieldNumber = 2;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_end_di(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_end_di();
  const ::Nrmk::IndyFramework::DigitalSignal& end_di(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_end_di();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      end_di() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IOCondition)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > di_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > end_di_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MotionCondition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MotionCondition) */ {
 public:
  MotionCondition();
  virtual ~MotionCondition();

  MotionCondition(const MotionCondition& from);
  MotionCondition(MotionCondition&& from) noexcept
    : MotionCondition() {
    *this = ::std::move(from);
  }

  inline MotionCondition& operator=(const MotionCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionCondition& operator=(MotionCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MotionCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotionCondition* internal_default_instance() {
    return reinterpret_cast<const MotionCondition*>(
               &_MotionCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MotionCondition* other);
  friend void swap(MotionCondition& a, MotionCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MotionCondition* New() const final {
    return CreateMaybeMessage<MotionCondition>(nullptr);
  }

  MotionCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionCondition& from);
  void MergeFrom(const MotionCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MotionCondition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MotionCondition_ConditionType ConditionType;
  static constexpr ConditionType CONST_COND =
    MotionCondition_ConditionType_CONST_COND;
  static constexpr ConditionType IO_COND =
    MotionCondition_ConditionType_IO_COND;
  static constexpr ConditionType VAR_COND =
    MotionCondition_ConditionType_VAR_COND;
  static inline bool ConditionType_IsValid(int value) {
    return MotionCondition_ConditionType_IsValid(value);
  }
  static constexpr ConditionType ConditionType_MIN =
    MotionCondition_ConditionType_ConditionType_MIN;
  static constexpr ConditionType ConditionType_MAX =
    MotionCondition_ConditionType_ConditionType_MAX;
  static constexpr int ConditionType_ARRAYSIZE =
    MotionCondition_ConditionType_ConditionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConditionType_descriptor() {
    return MotionCondition_ConditionType_descriptor();
  }
  template<typename T>
  static inline const std::string& ConditionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConditionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConditionType_Name.");
    return MotionCondition_ConditionType_Name(enum_t_value);
  }
  static inline bool ConditionType_Parse(const std::string& name,
      ConditionType* value) {
    return MotionCondition_ConditionType_Parse(name, value);
  }

  typedef MotionCondition_ReactionType ReactionType;
  static constexpr ReactionType NONE_COND =
    MotionCondition_ReactionType_NONE_COND;
  static constexpr ReactionType STOP_COND =
    MotionCondition_ReactionType_STOP_COND;
  static constexpr ReactionType PAUSE_COND =
    MotionCondition_ReactionType_PAUSE_COND;
  static inline bool ReactionType_IsValid(int value) {
    return MotionCondition_ReactionType_IsValid(value);
  }
  static constexpr ReactionType ReactionType_MIN =
    MotionCondition_ReactionType_ReactionType_MIN;
  static constexpr ReactionType ReactionType_MAX =
    MotionCondition_ReactionType_ReactionType_MAX;
  static constexpr int ReactionType_ARRAYSIZE =
    MotionCondition_ReactionType_ReactionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReactionType_descriptor() {
    return MotionCondition_ReactionType_descriptor();
  }
  template<typename T>
  static inline const std::string& ReactionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReactionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReactionType_Name.");
    return MotionCondition_ReactionType_Name(enum_t_value);
  }
  static inline bool ReactionType_Parse(const std::string& name,
      ReactionType* value) {
    return MotionCondition_ReactionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.IOCondition io_cond = 4;
  bool has_io_cond() const;
  void clear_io_cond();
  static const int kIoCondFieldNumber = 4;
  const ::Nrmk::IndyFramework::IOCondition& io_cond() const;
  ::Nrmk::IndyFramework::IOCondition* release_io_cond();
  ::Nrmk::IndyFramework::IOCondition* mutable_io_cond();
  void set_allocated_io_cond(::Nrmk::IndyFramework::IOCondition* io_cond);

  // .Nrmk.IndyFramework.VariableCondition var_cond = 5;
  bool has_var_cond() const;
  void clear_var_cond();
  static const int kVarCondFieldNumber = 5;
  const ::Nrmk::IndyFramework::VariableCondition& var_cond() const;
  ::Nrmk::IndyFramework::VariableCondition* release_var_cond();
  ::Nrmk::IndyFramework::VariableCondition* mutable_var_cond();
  void set_allocated_var_cond(::Nrmk::IndyFramework::VariableCondition* var_cond);

  // .Nrmk.IndyFramework.MotionCondition.ConditionType type_cond = 1;
  void clear_type_cond();
  static const int kTypeCondFieldNumber = 1;
  ::Nrmk::IndyFramework::MotionCondition_ConditionType type_cond() const;
  void set_type_cond(::Nrmk::IndyFramework::MotionCondition_ConditionType value);

  // .Nrmk.IndyFramework.MotionCondition.ReactionType type_react = 2;
  void clear_type_react();
  static const int kTypeReactFieldNumber = 2;
  ::Nrmk::IndyFramework::MotionCondition_ReactionType type_react() const;
  void set_type_react(::Nrmk::IndyFramework::MotionCondition_ReactionType value);

  // bool const_cond = 3;
  void clear_const_cond();
  static const int kConstCondFieldNumber = 3;
  bool const_cond() const;
  void set_const_cond(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MotionCondition)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::IOCondition* io_cond_;
  ::Nrmk::IndyFramework::VariableCondition* var_cond_;
  int type_cond_;
  int type_react_;
  bool const_cond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class BlendingType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.BlendingType) */ {
 public:
  BlendingType();
  virtual ~BlendingType();

  BlendingType(const BlendingType& from);
  BlendingType(BlendingType&& from) noexcept
    : BlendingType() {
    *this = ::std::move(from);
  }

  inline BlendingType& operator=(const BlendingType& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlendingType& operator=(BlendingType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlendingType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlendingType* internal_default_instance() {
    return reinterpret_cast<const BlendingType*>(
               &_BlendingType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BlendingType* other);
  friend void swap(BlendingType& a, BlendingType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlendingType* New() const final {
    return CreateMaybeMessage<BlendingType>(nullptr);
  }

  BlendingType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlendingType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlendingType& from);
  void MergeFrom(const BlendingType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlendingType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.BlendingType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BlendingType_Type Type;
  static constexpr Type NONE =
    BlendingType_Type_NONE;
  static constexpr Type OVERRIDE =
    BlendingType_Type_OVERRIDE;
  static constexpr Type DUPLICATE =
    BlendingType_Type_DUPLICATE;
  static inline bool Type_IsValid(int value) {
    return BlendingType_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    BlendingType_Type_Type_MIN;
  static constexpr Type Type_MAX =
    BlendingType_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    BlendingType_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return BlendingType_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return BlendingType_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return BlendingType_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.BlendingType.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Nrmk::IndyFramework::BlendingType_Type type() const;
  void set_type(::Nrmk::IndyFramework::BlendingType_Type value);

  // float blending_radius = 2;
  void clear_blending_radius();
  static const int kBlendingRadiusFieldNumber = 2;
  float blending_radius() const;
  void set_blending_radius(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.BlendingType)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  float blending_radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TargetJ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TargetJ) */ {
 public:
  TargetJ();
  virtual ~TargetJ();

  TargetJ(const TargetJ& from);
  TargetJ(TargetJ&& from) noexcept
    : TargetJ() {
    *this = ::std::move(from);
  }

  inline TargetJ& operator=(const TargetJ& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetJ& operator=(TargetJ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetJ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetJ* internal_default_instance() {
    return reinterpret_cast<const TargetJ*>(
               &_TargetJ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TargetJ* other);
  friend void swap(TargetJ& a, TargetJ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TargetJ* New() const final {
    return CreateMaybeMessage<TargetJ>(nullptr);
  }

  TargetJ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetJ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetJ& from);
  void MergeFrom(const TargetJ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetJ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TargetJ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float j_start = 1;
  int j_start_size() const;
  void clear_j_start();
  static const int kJStartFieldNumber = 1;
  float j_start(int index) const;
  void set_j_start(int index, float value);
  void add_j_start(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      j_start() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_j_start();

  // repeated float j_target = 2;
  int j_target_size() const;
  void clear_j_target();
  static const int kJTargetFieldNumber = 2;
  float j_target(int index) const;
  void set_j_target(int index, float value);
  void add_j_target(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      j_target() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_j_target();

  // .Nrmk.IndyFramework.JointBaseType base_type = 3;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 3;
  ::Nrmk::IndyFramework::JointBaseType base_type() const;
  void set_base_type(::Nrmk::IndyFramework::JointBaseType value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TargetJ)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > j_start_;
  mutable std::atomic<int> _j_start_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > j_target_;
  mutable std::atomic<int> _j_target_cached_byte_size_;
  int base_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveJReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveJReq) */ {
 public:
  MoveJReq();
  virtual ~MoveJReq();

  MoveJReq(const MoveJReq& from);
  MoveJReq(MoveJReq&& from) noexcept
    : MoveJReq() {
    *this = ::std::move(from);
  }

  inline MoveJReq& operator=(const MoveJReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveJReq& operator=(MoveJReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveJReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveJReq* internal_default_instance() {
    return reinterpret_cast<const MoveJReq*>(
               &_MoveJReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MoveJReq* other);
  friend void swap(MoveJReq& a, MoveJReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveJReq* New() const final {
    return CreateMaybeMessage<MoveJReq>(nullptr);
  }

  MoveJReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveJReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveJReq& from);
  void MergeFrom(const MoveJReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveJReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveJReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.TargetJ target = 1;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  const ::Nrmk::IndyFramework::TargetJ& target() const;
  ::Nrmk::IndyFramework::TargetJ* release_target();
  ::Nrmk::IndyFramework::TargetJ* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetJ* target);

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending();
  static const int kBlendingFieldNumber = 2;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending);

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  bool has_post_condition() const;
  void clear_post_condition();
  static const int kPostConditionFieldNumber = 20;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition);

  // float vel_ratio = 3;
  void clear_vel_ratio();
  static const int kVelRatioFieldNumber = 3;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  // float acc_ratio = 4;
  void clear_acc_ratio();
  static const int kAccRatioFieldNumber = 4;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  // bool teaching_mode = 30;
  void clear_teaching_mode();
  static const int kTeachingModeFieldNumber = 30;
  bool teaching_mode() const;
  void set_teaching_mode(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveJReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::TargetJ* target_;
  ::Nrmk::IndyFramework::BlendingType* blending_;
  ::Nrmk::IndyFramework::MotionCondition* post_condition_;
  float vel_ratio_;
  float acc_ratio_;
  bool teaching_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveJCondReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveJCondReq) */ {
 public:
  MoveJCondReq();
  virtual ~MoveJCondReq();

  MoveJCondReq(const MoveJCondReq& from);
  MoveJCondReq(MoveJCondReq&& from) noexcept
    : MoveJCondReq() {
    *this = ::std::move(from);
  }

  inline MoveJCondReq& operator=(const MoveJCondReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveJCondReq& operator=(MoveJCondReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveJCondReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveJCondReq* internal_default_instance() {
    return reinterpret_cast<const MoveJCondReq*>(
               &_MoveJCondReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(MoveJCondReq* other);
  friend void swap(MoveJCondReq& a, MoveJCondReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveJCondReq* New() const final {
    return CreateMaybeMessage<MoveJCondReq>(nullptr);
  }

  MoveJCondReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveJCondReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveJCondReq& from);
  void MergeFrom(const MoveJCondReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveJCondReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveJCondReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.TargetJ target = 1;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  const ::Nrmk::IndyFramework::TargetJ& target() const;
  ::Nrmk::IndyFramework::TargetJ* release_target();
  ::Nrmk::IndyFramework::TargetJ* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetJ* target);

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending();
  static const int kBlendingFieldNumber = 2;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending);

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  bool has_post_condition() const;
  void clear_post_condition();
  static const int kPostConditionFieldNumber = 20;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition);

  // float vel_ratio = 3;
  void clear_vel_ratio();
  static const int kVelRatioFieldNumber = 3;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  // float acc_ratio = 4;
  void clear_acc_ratio();
  static const int kAccRatioFieldNumber = 4;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  // bool teaching_mode = 30;
  void clear_teaching_mode();
  static const int kTeachingModeFieldNumber = 30;
  bool teaching_mode() const;
  void set_teaching_mode(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveJCondReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::TargetJ* target_;
  ::Nrmk::IndyFramework::BlendingType* blending_;
  ::Nrmk::IndyFramework::MotionCondition* post_condition_;
  float vel_ratio_;
  float acc_ratio_;
  bool teaching_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveJTReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveJTReq) */ {
 public:
  MoveJTReq();
  virtual ~MoveJTReq();

  MoveJTReq(const MoveJTReq& from);
  MoveJTReq(MoveJTReq&& from) noexcept
    : MoveJTReq() {
    *this = ::std::move(from);
  }

  inline MoveJTReq& operator=(const MoveJTReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveJTReq& operator=(MoveJTReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveJTReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveJTReq* internal_default_instance() {
    return reinterpret_cast<const MoveJTReq*>(
               &_MoveJTReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(MoveJTReq* other);
  friend void swap(MoveJTReq& a, MoveJTReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveJTReq* New() const final {
    return CreateMaybeMessage<MoveJTReq>(nullptr);
  }

  MoveJTReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveJTReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveJTReq& from);
  void MergeFrom(const MoveJTReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveJTReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveJTReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.TargetJ target = 1;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  const ::Nrmk::IndyFramework::TargetJ& target() const;
  ::Nrmk::IndyFramework::TargetJ* release_target();
  ::Nrmk::IndyFramework::TargetJ* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetJ* target);

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending();
  static const int kBlendingFieldNumber = 2;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending);

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  bool has_post_condition() const;
  void clear_post_condition();
  static const int kPostConditionFieldNumber = 20;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition);

  // float time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveJTReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::TargetJ* target_;
  ::Nrmk::IndyFramework::BlendingType* blending_;
  ::Nrmk::IndyFramework::MotionCondition* post_condition_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TargetP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TargetP) */ {
 public:
  TargetP();
  virtual ~TargetP();

  TargetP(const TargetP& from);
  TargetP(TargetP&& from) noexcept
    : TargetP() {
    *this = ::std::move(from);
  }

  inline TargetP& operator=(const TargetP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetP& operator=(TargetP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetP* internal_default_instance() {
    return reinterpret_cast<const TargetP*>(
               &_TargetP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(TargetP* other);
  friend void swap(TargetP& a, TargetP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TargetP* New() const final {
    return CreateMaybeMessage<TargetP>(nullptr);
  }

  TargetP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetP& from);
  void MergeFrom(const TargetP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TargetP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float t_start = 1;
  int t_start_size() const;
  void clear_t_start();
  static const int kTStartFieldNumber = 1;
  float t_start(int index) const;
  void set_t_start(int index, float value);
  void add_t_start(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_start() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_start();

  // repeated float t_target = 2;
  int t_target_size() const;
  void clear_t_target();
  static const int kTTargetFieldNumber = 2;
  float t_target(int index) const;
  void set_t_target(int index, float value);
  void add_t_target(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_target() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_target();

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 3;
  ::Nrmk::IndyFramework::TaskBaseType base_type() const;
  void set_base_type(::Nrmk::IndyFramework::TaskBaseType value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TargetP)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_start_;
  mutable std::atomic<int> _t_start_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_target_;
  mutable std::atomic<int> _t_target_cached_byte_size_;
  int base_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TargetC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TargetC) */ {
 public:
  TargetC();
  virtual ~TargetC();

  TargetC(const TargetC& from);
  TargetC(TargetC&& from) noexcept
    : TargetC() {
    *this = ::std::move(from);
  }

  inline TargetC& operator=(const TargetC& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetC& operator=(TargetC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetC* internal_default_instance() {
    return reinterpret_cast<const TargetC*>(
               &_TargetC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(TargetC* other);
  friend void swap(TargetC& a, TargetC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TargetC* New() const final {
    return CreateMaybeMessage<TargetC>(nullptr);
  }

  TargetC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetC& from);
  void MergeFrom(const TargetC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TargetC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float t_start = 1;
  int t_start_size() const;
  void clear_t_start();
  static const int kTStartFieldNumber = 1;
  float t_start(int index) const;
  void set_t_start(int index, float value);
  void add_t_start(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_start() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_start();

  // repeated float t_pos0 = 2;
  int t_pos0_size() const;
  void clear_t_pos0();
  static const int kTPos0FieldNumber = 2;
  float t_pos0(int index) const;
  void set_t_pos0(int index, float value);
  void add_t_pos0(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_pos0() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_pos0();

  // repeated float t_pos1 = 3;
  int t_pos1_size() const;
  void clear_t_pos1();
  static const int kTPos1FieldNumber = 3;
  float t_pos1(int index) const;
  void set_t_pos1(int index, float value);
  void add_t_pos1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_pos1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_pos1();

  // .Nrmk.IndyFramework.TaskBaseType base_type = 4;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 4;
  ::Nrmk::IndyFramework::TaskBaseType base_type() const;
  void set_base_type(::Nrmk::IndyFramework::TaskBaseType value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TargetC)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_start_;
  mutable std::atomic<int> _t_start_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_pos0_;
  mutable std::atomic<int> _t_pos0_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_pos1_;
  mutable std::atomic<int> _t_pos1_cached_byte_size_;
  int base_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveLReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveLReq) */ {
 public:
  MoveLReq();
  virtual ~MoveLReq();

  MoveLReq(const MoveLReq& from);
  MoveLReq(MoveLReq&& from) noexcept
    : MoveLReq() {
    *this = ::std::move(from);
  }

  inline MoveLReq& operator=(const MoveLReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveLReq& operator=(MoveLReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveLReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveLReq* internal_default_instance() {
    return reinterpret_cast<const MoveLReq*>(
               &_MoveLReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(MoveLReq* other);
  friend void swap(MoveLReq& a, MoveLReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveLReq* New() const final {
    return CreateMaybeMessage<MoveLReq>(nullptr);
  }

  MoveLReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveLReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveLReq& from);
  void MergeFrom(const MoveLReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveLReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveLReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.TargetP target = 1;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  const ::Nrmk::IndyFramework::TargetP& target() const;
  ::Nrmk::IndyFramework::TargetP* release_target();
  ::Nrmk::IndyFramework::TargetP* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetP* target);

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending();
  static const int kBlendingFieldNumber = 2;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending);

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  bool has_post_condition() const;
  void clear_post_condition();
  static const int kPostConditionFieldNumber = 20;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition);

  // float vel_ratio = 3;
  void clear_vel_ratio();
  static const int kVelRatioFieldNumber = 3;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  // float acc_ratio = 4;
  void clear_acc_ratio();
  static const int kAccRatioFieldNumber = 4;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
  void clear_vel_type();
  static const int kVelTypeFieldNumber = 5;
  ::Nrmk::IndyFramework::VelocityModeType vel_type() const;
  void set_vel_type(::Nrmk::IndyFramework::VelocityModeType value);

  // bool teaching_mode = 30;
  void clear_teaching_mode();
  static const int kTeachingModeFieldNumber = 30;
  bool teaching_mode() const;
  void set_teaching_mode(bool value);

  // bool bypass_singular = 40;
  void clear_bypass_singular();
  static const int kBypassSingularFieldNumber = 40;
  bool bypass_singular() const;
  void set_bypass_singular(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveLReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::TargetP* target_;
  ::Nrmk::IndyFramework::BlendingType* blending_;
  ::Nrmk::IndyFramework::MotionCondition* post_condition_;
  float vel_ratio_;
  float acc_ratio_;
  int vel_type_;
  bool teaching_mode_;
  bool bypass_singular_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveLTReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveLTReq) */ {
 public:
  MoveLTReq();
  virtual ~MoveLTReq();

  MoveLTReq(const MoveLTReq& from);
  MoveLTReq(MoveLTReq&& from) noexcept
    : MoveLTReq() {
    *this = ::std::move(from);
  }

  inline MoveLTReq& operator=(const MoveLTReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveLTReq& operator=(MoveLTReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveLTReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveLTReq* internal_default_instance() {
    return reinterpret_cast<const MoveLTReq*>(
               &_MoveLTReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(MoveLTReq* other);
  friend void swap(MoveLTReq& a, MoveLTReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveLTReq* New() const final {
    return CreateMaybeMessage<MoveLTReq>(nullptr);
  }

  MoveLTReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveLTReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveLTReq& from);
  void MergeFrom(const MoveLTReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveLTReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveLTReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.TargetP target = 1;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  const ::Nrmk::IndyFramework::TargetP& target() const;
  ::Nrmk::IndyFramework::TargetP* release_target();
  ::Nrmk::IndyFramework::TargetP* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetP* target);

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending();
  static const int kBlendingFieldNumber = 2;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending);

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  bool has_post_condition() const;
  void clear_post_condition();
  static const int kPostConditionFieldNumber = 20;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition);

  // float time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveLTReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::TargetP* target_;
  ::Nrmk::IndyFramework::BlendingType* blending_;
  ::Nrmk::IndyFramework::MotionCondition* post_condition_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveAxisReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveAxisReq) */ {
 public:
  MoveAxisReq();
  virtual ~MoveAxisReq();

  MoveAxisReq(const MoveAxisReq& from);
  MoveAxisReq(MoveAxisReq&& from) noexcept
    : MoveAxisReq() {
    *this = ::std::move(from);
  }

  inline MoveAxisReq& operator=(const MoveAxisReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveAxisReq& operator=(MoveAxisReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveAxisReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveAxisReq* internal_default_instance() {
    return reinterpret_cast<const MoveAxisReq*>(
               &_MoveAxisReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(MoveAxisReq* other);
  friend void swap(MoveAxisReq& a, MoveAxisReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveAxisReq* New() const final {
    return CreateMaybeMessage<MoveAxisReq>(nullptr);
  }

  MoveAxisReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveAxisReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveAxisReq& from);
  void MergeFrom(const MoveAxisReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveAxisReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveAxisReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float start_mm = 1;
  int start_mm_size() const;
  void clear_start_mm();
  static const int kStartMmFieldNumber = 1;
  float start_mm(int index) const;
  void set_start_mm(int index, float value);
  void add_start_mm(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      start_mm() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_start_mm();

  // repeated float target_mm = 2;
  int target_mm_size() const;
  void clear_target_mm();
  static const int kTargetMmFieldNumber = 2;
  float target_mm(int index) const;
  void set_target_mm(int index, float value);
  void add_target_mm(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      target_mm() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_target_mm();

  // float vel_percentage = 3;
  void clear_vel_percentage();
  static const int kVelPercentageFieldNumber = 3;
  float vel_percentage() const;
  void set_vel_percentage(float value);

  // float acc_percentage = 4;
  void clear_acc_percentage();
  static const int kAccPercentageFieldNumber = 4;
  float acc_percentage() const;
  void set_acc_percentage(float value);

  // bool is_absolute = 5;
  void clear_is_absolute();
  static const int kIsAbsoluteFieldNumber = 5;
  bool is_absolute() const;
  void set_is_absolute(bool value);

  // bool teaching_mode = 10;
  void clear_teaching_mode();
  static const int kTeachingModeFieldNumber = 10;
  bool teaching_mode() const;
  void set_teaching_mode(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveAxisReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > start_mm_;
  mutable std::atomic<int> _start_mm_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > target_mm_;
  mutable std::atomic<int> _target_mm_cached_byte_size_;
  float vel_percentage_;
  float acc_percentage_;
  bool is_absolute_;
  bool teaching_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveCReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveCReq) */ {
 public:
  MoveCReq();
  virtual ~MoveCReq();

  MoveCReq(const MoveCReq& from);
  MoveCReq(MoveCReq&& from) noexcept
    : MoveCReq() {
    *this = ::std::move(from);
  }

  inline MoveCReq& operator=(const MoveCReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveCReq& operator=(MoveCReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveCReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveCReq* internal_default_instance() {
    return reinterpret_cast<const MoveCReq*>(
               &_MoveCReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(MoveCReq* other);
  friend void swap(MoveCReq& a, MoveCReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveCReq* New() const final {
    return CreateMaybeMessage<MoveCReq>(nullptr);
  }

  MoveCReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveCReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveCReq& from);
  void MergeFrom(const MoveCReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveCReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveCReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.TargetC target = 1;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  const ::Nrmk::IndyFramework::TargetC& target() const;
  ::Nrmk::IndyFramework::TargetC* release_target();
  ::Nrmk::IndyFramework::TargetC* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetC* target);

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending();
  static const int kBlendingFieldNumber = 2;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending);

  // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
  bool has_post_condition() const;
  void clear_post_condition();
  static const int kPostConditionFieldNumber = 25;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition);

  // float angle = 3;
  void clear_angle();
  static const int kAngleFieldNumber = 3;
  float angle() const;
  void set_angle(float value);

  // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
  void clear_setting_type();
  static const int kSettingTypeFieldNumber = 10;
  ::Nrmk::IndyFramework::CircularSettingType setting_type() const;
  void set_setting_type(::Nrmk::IndyFramework::CircularSettingType value);

  // bool teaching_mode = 30;
  void clear_teaching_mode();
  static const int kTeachingModeFieldNumber = 30;
  bool teaching_mode() const;
  void set_teaching_mode(bool value);

  // bool bypass_singular = 40;
  void clear_bypass_singular();
  static const int kBypassSingularFieldNumber = 40;
  bool bypass_singular() const;
  void set_bypass_singular(bool value);

  // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
  void clear_move_type();
  static const int kMoveTypeFieldNumber = 11;
  ::Nrmk::IndyFramework::CircularMovingType move_type() const;
  void set_move_type(::Nrmk::IndyFramework::CircularMovingType value);

  // float vel_ratio = 20;
  void clear_vel_ratio();
  static const int kVelRatioFieldNumber = 20;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  // float acc_ratio = 21;
  void clear_acc_ratio();
  static const int kAccRatioFieldNumber = 21;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 22;
  void clear_vel_type();
  static const int kVelTypeFieldNumber = 22;
  ::Nrmk::IndyFramework::VelocityModeType vel_type() const;
  void set_vel_type(::Nrmk::IndyFramework::VelocityModeType value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveCReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::TargetC* target_;
  ::Nrmk::IndyFramework::BlendingType* blending_;
  ::Nrmk::IndyFramework::MotionCondition* post_condition_;
  float angle_;
  int setting_type_;
  bool teaching_mode_;
  bool bypass_singular_;
  int move_type_;
  float vel_ratio_;
  float acc_ratio_;
  int vel_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveCTReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveCTReq) */ {
 public:
  MoveCTReq();
  virtual ~MoveCTReq();

  MoveCTReq(const MoveCTReq& from);
  MoveCTReq(MoveCTReq&& from) noexcept
    : MoveCTReq() {
    *this = ::std::move(from);
  }

  inline MoveCTReq& operator=(const MoveCTReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveCTReq& operator=(MoveCTReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveCTReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveCTReq* internal_default_instance() {
    return reinterpret_cast<const MoveCTReq*>(
               &_MoveCTReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(MoveCTReq* other);
  friend void swap(MoveCTReq& a, MoveCTReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveCTReq* New() const final {
    return CreateMaybeMessage<MoveCTReq>(nullptr);
  }

  MoveCTReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveCTReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveCTReq& from);
  void MergeFrom(const MoveCTReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveCTReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveCTReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.TargetC target = 1;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  const ::Nrmk::IndyFramework::TargetC& target() const;
  ::Nrmk::IndyFramework::TargetC* release_target();
  ::Nrmk::IndyFramework::TargetC* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetC* target);

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending();
  static const int kBlendingFieldNumber = 2;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending);

  // .Nrmk.IndyFramework.MotionCondition post_condition = 25;
  bool has_post_condition() const;
  void clear_post_condition();
  static const int kPostConditionFieldNumber = 25;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition);

  // float angle = 3;
  void clear_angle();
  static const int kAngleFieldNumber = 3;
  float angle() const;
  void set_angle(float value);

  // .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
  void clear_setting_type();
  static const int kSettingTypeFieldNumber = 10;
  ::Nrmk::IndyFramework::CircularSettingType setting_type() const;
  void set_setting_type(::Nrmk::IndyFramework::CircularSettingType value);

  // .Nrmk.IndyFramework.CircularMovingType move_type = 11;
  void clear_move_type();
  static const int kMoveTypeFieldNumber = 11;
  ::Nrmk::IndyFramework::CircularMovingType move_type() const;
  void set_move_type(::Nrmk::IndyFramework::CircularMovingType value);

  // float time = 20;
  void clear_time();
  static const int kTimeFieldNumber = 20;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveCTReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::TargetC* target_;
  ::Nrmk::IndyFramework::BlendingType* blending_;
  ::Nrmk::IndyFramework::MotionCondition* post_condition_;
  float angle_;
  int setting_type_;
  int move_type_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveJointTrajReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveJointTrajReq) */ {
 public:
  MoveJointTrajReq();
  virtual ~MoveJointTrajReq();

  MoveJointTrajReq(const MoveJointTrajReq& from);
  MoveJointTrajReq(MoveJointTrajReq&& from) noexcept
    : MoveJointTrajReq() {
    *this = ::std::move(from);
  }

  inline MoveJointTrajReq& operator=(const MoveJointTrajReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveJointTrajReq& operator=(MoveJointTrajReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveJointTrajReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveJointTrajReq* internal_default_instance() {
    return reinterpret_cast<const MoveJointTrajReq*>(
               &_MoveJointTrajReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(MoveJointTrajReq* other);
  friend void swap(MoveJointTrajReq& a, MoveJointTrajReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveJointTrajReq* New() const final {
    return CreateMaybeMessage<MoveJointTrajReq>(nullptr);
  }

  MoveJointTrajReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveJointTrajReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveJointTrajReq& from);
  void MergeFrom(const MoveJointTrajReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveJointTrajReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveJointTrajReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.Vector q_list = 1;
  int q_list_size() const;
  void clear_q_list();
  static const int kQListFieldNumber = 1;
  ::Nrmk::IndyFramework::Vector* mutable_q_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
      mutable_q_list();
  const ::Nrmk::IndyFramework::Vector& q_list(int index) const;
  ::Nrmk::IndyFramework::Vector* add_q_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
      q_list() const;

  // repeated .Nrmk.IndyFramework.Vector qdot_list = 2;
  int qdot_list_size() const;
  void clear_qdot_list();
  static const int kQdotListFieldNumber = 2;
  ::Nrmk::IndyFramework::Vector* mutable_qdot_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
      mutable_qdot_list();
  const ::Nrmk::IndyFramework::Vector& qdot_list(int index) const;
  ::Nrmk::IndyFramework::Vector* add_qdot_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
      qdot_list() const;

  // repeated .Nrmk.IndyFramework.Vector qddot_list = 3;
  int qddot_list_size() const;
  void clear_qddot_list();
  static const int kQddotListFieldNumber = 3;
  ::Nrmk::IndyFramework::Vector* mutable_qddot_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
      mutable_qddot_list();
  const ::Nrmk::IndyFramework::Vector& qddot_list(int index) const;
  ::Nrmk::IndyFramework::Vector* add_qddot_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
      qddot_list() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveJointTrajReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector > q_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector > qdot_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector > qddot_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveTaskTrajReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveTaskTrajReq) */ {
 public:
  MoveTaskTrajReq();
  virtual ~MoveTaskTrajReq();

  MoveTaskTrajReq(const MoveTaskTrajReq& from);
  MoveTaskTrajReq(MoveTaskTrajReq&& from) noexcept
    : MoveTaskTrajReq() {
    *this = ::std::move(from);
  }

  inline MoveTaskTrajReq& operator=(const MoveTaskTrajReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveTaskTrajReq& operator=(MoveTaskTrajReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveTaskTrajReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveTaskTrajReq* internal_default_instance() {
    return reinterpret_cast<const MoveTaskTrajReq*>(
               &_MoveTaskTrajReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(MoveTaskTrajReq* other);
  friend void swap(MoveTaskTrajReq& a, MoveTaskTrajReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveTaskTrajReq* New() const final {
    return CreateMaybeMessage<MoveTaskTrajReq>(nullptr);
  }

  MoveTaskTrajReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveTaskTrajReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveTaskTrajReq& from);
  void MergeFrom(const MoveTaskTrajReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveTaskTrajReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveTaskTrajReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.Vector p_list = 1;
  int p_list_size() const;
  void clear_p_list();
  static const int kPListFieldNumber = 1;
  ::Nrmk::IndyFramework::Vector* mutable_p_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
      mutable_p_list();
  const ::Nrmk::IndyFramework::Vector& p_list(int index) const;
  ::Nrmk::IndyFramework::Vector* add_p_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
      p_list() const;

  // repeated .Nrmk.IndyFramework.Vector pdot_list = 2;
  int pdot_list_size() const;
  void clear_pdot_list();
  static const int kPdotListFieldNumber = 2;
  ::Nrmk::IndyFramework::Vector* mutable_pdot_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
      mutable_pdot_list();
  const ::Nrmk::IndyFramework::Vector& pdot_list(int index) const;
  ::Nrmk::IndyFramework::Vector* add_pdot_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
      pdot_list() const;

  // repeated .Nrmk.IndyFramework.Vector pddot_list = 3;
  int pddot_list_size() const;
  void clear_pddot_list();
  static const int kPddotListFieldNumber = 3;
  ::Nrmk::IndyFramework::Vector* mutable_pddot_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
      mutable_pddot_list();
  const ::Nrmk::IndyFramework::Vector& pddot_list(int index) const;
  ::Nrmk::IndyFramework::Vector* add_pddot_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
      pddot_list() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveTaskTrajReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector > p_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector > pdot_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector > pddot_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveConveyorReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveConveyorReq) */ {
 public:
  MoveConveyorReq();
  virtual ~MoveConveyorReq();

  MoveConveyorReq(const MoveConveyorReq& from);
  MoveConveyorReq(MoveConveyorReq&& from) noexcept
    : MoveConveyorReq() {
    *this = ::std::move(from);
  }

  inline MoveConveyorReq& operator=(const MoveConveyorReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveConveyorReq& operator=(MoveConveyorReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveConveyorReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveConveyorReq* internal_default_instance() {
    return reinterpret_cast<const MoveConveyorReq*>(
               &_MoveConveyorReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(MoveConveyorReq* other);
  friend void swap(MoveConveyorReq& a, MoveConveyorReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveConveyorReq* New() const final {
    return CreateMaybeMessage<MoveConveyorReq>(nullptr);
  }

  MoveConveyorReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveConveyorReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveConveyorReq& from);
  void MergeFrom(const MoveConveyorReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveConveyorReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveConveyorReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.MotionCondition post_condition = 10;
  bool has_post_condition() const;
  void clear_post_condition();
  static const int kPostConditionFieldNumber = 10;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition);

  // bool teaching_mode = 1;
  void clear_teaching_mode();
  static const int kTeachingModeFieldNumber = 1;
  bool teaching_mode() const;
  void set_teaching_mode(bool value);

  // bool bypass_singular = 2;
  void clear_bypass_singular();
  static const int kBypassSingularFieldNumber = 2;
  bool bypass_singular() const;
  void set_bypass_singular(bool value);

  // float acc_ratio = 3;
  void clear_acc_ratio();
  static const int kAccRatioFieldNumber = 3;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveConveyorReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::MotionCondition* post_condition_;
  bool teaching_mode_;
  bool bypass_singular_;
  float acc_ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class WaitIOReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.WaitIOReq) */ {
 public:
  WaitIOReq();
  virtual ~WaitIOReq();

  WaitIOReq(const WaitIOReq& from);
  WaitIOReq(WaitIOReq&& from) noexcept
    : WaitIOReq() {
    *this = ::std::move(from);
  }

  inline WaitIOReq& operator=(const WaitIOReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitIOReq& operator=(WaitIOReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WaitIOReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaitIOReq* internal_default_instance() {
    return reinterpret_cast<const WaitIOReq*>(
               &_WaitIOReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(WaitIOReq* other);
  friend void swap(WaitIOReq& a, WaitIOReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaitIOReq* New() const final {
    return CreateMaybeMessage<WaitIOReq>(nullptr);
  }

  WaitIOReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitIOReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WaitIOReq& from);
  void MergeFrom(const WaitIOReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitIOReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.WaitIOReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.DigitalSignal di_list = 1;
  int di_list_size() const;
  void clear_di_list();
  static const int kDiListFieldNumber = 1;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_di_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_di_list();
  const ::Nrmk::IndyFramework::DigitalSignal& di_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_di_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      di_list() const;

  // repeated .Nrmk.IndyFramework.DigitalSignal do_list = 2;
  int do_list_size() const;
  void clear_do_list();
  static const int kDoListFieldNumber = 2;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_do_list();
  const ::Nrmk::IndyFramework::DigitalSignal& do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      do_list() const;

  // repeated .Nrmk.IndyFramework.DigitalSignal end_di_list = 3;
  int end_di_list_size() const;
  void clear_end_di_list();
  static const int kEndDiListFieldNumber = 3;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_end_di_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_end_di_list();
  const ::Nrmk::IndyFramework::DigitalSignal& end_di_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_end_di_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      end_di_list() const;

  // repeated .Nrmk.IndyFramework.DigitalSignal end_do_list = 4;
  int end_do_list_size() const;
  void clear_end_do_list();
  static const int kEndDoListFieldNumber = 4;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_end_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_end_do_list();
  const ::Nrmk::IndyFramework::DigitalSignal& end_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_end_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      end_do_list() const;

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 6;
  int set_do_list_size() const;
  void clear_set_do_list();
  static const int kSetDoListFieldNumber = 6;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_do_list();
  const ::Nrmk::IndyFramework::DigitalSignal& set_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_do_list() const;

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 7;
  int set_end_do_list_size() const;
  void clear_set_end_do_list();
  static const int kSetEndDoListFieldNumber = 7;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_end_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_end_do_list();
  const ::Nrmk::IndyFramework::DigitalSignal& set_end_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_end_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_end_do_list() const;

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 8;
  int set_ao_list_size() const;
  void clear_set_ao_list();
  static const int kSetAoListFieldNumber = 8;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_ao_list();
  const ::Nrmk::IndyFramework::AnalogSignal& set_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_ao_list() const;

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 9;
  int set_end_ao_list_size() const;
  void clear_set_end_ao_list();
  static const int kSetEndAoListFieldNumber = 9;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_end_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_end_ao_list();
  const ::Nrmk::IndyFramework::AnalogSignal& set_end_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_end_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_end_ao_list() const;

  // int32 conjunction = 5;
  void clear_conjunction();
  static const int kConjunctionFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 conjunction() const;
  void set_conjunction(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.WaitIOReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > di_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > end_di_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > end_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_end_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_end_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 conjunction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class WaitTimeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.WaitTimeReq) */ {
 public:
  WaitTimeReq();
  virtual ~WaitTimeReq();

  WaitTimeReq(const WaitTimeReq& from);
  WaitTimeReq(WaitTimeReq&& from) noexcept
    : WaitTimeReq() {
    *this = ::std::move(from);
  }

  inline WaitTimeReq& operator=(const WaitTimeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitTimeReq& operator=(WaitTimeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WaitTimeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaitTimeReq* internal_default_instance() {
    return reinterpret_cast<const WaitTimeReq*>(
               &_WaitTimeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(WaitTimeReq* other);
  friend void swap(WaitTimeReq& a, WaitTimeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaitTimeReq* New() const final {
    return CreateMaybeMessage<WaitTimeReq>(nullptr);
  }

  WaitTimeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitTimeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WaitTimeReq& from);
  void MergeFrom(const WaitTimeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitTimeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.WaitTimeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  int set_do_list_size() const;
  void clear_set_do_list();
  static const int kSetDoListFieldNumber = 2;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_do_list();
  const ::Nrmk::IndyFramework::DigitalSignal& set_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_do_list() const;

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  int set_end_do_list_size() const;
  void clear_set_end_do_list();
  static const int kSetEndDoListFieldNumber = 3;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_end_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_end_do_list();
  const ::Nrmk::IndyFramework::DigitalSignal& set_end_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_end_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_end_do_list() const;

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  int set_ao_list_size() const;
  void clear_set_ao_list();
  static const int kSetAoListFieldNumber = 4;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_ao_list();
  const ::Nrmk::IndyFramework::AnalogSignal& set_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_ao_list() const;

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  int set_end_ao_list_size() const;
  void clear_set_end_ao_list();
  static const int kSetEndAoListFieldNumber = 5;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_end_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_end_ao_list();
  const ::Nrmk::IndyFramework::AnalogSignal& set_end_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_end_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_end_ao_list() const;

  // float time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.WaitTimeReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_end_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_end_ao_list_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class WaitProgressReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.WaitProgressReq) */ {
 public:
  WaitProgressReq();
  virtual ~WaitProgressReq();

  WaitProgressReq(const WaitProgressReq& from);
  WaitProgressReq(WaitProgressReq&& from) noexcept
    : WaitProgressReq() {
    *this = ::std::move(from);
  }

  inline WaitProgressReq& operator=(const WaitProgressReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitProgressReq& operator=(WaitProgressReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WaitProgressReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaitProgressReq* internal_default_instance() {
    return reinterpret_cast<const WaitProgressReq*>(
               &_WaitProgressReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(WaitProgressReq* other);
  friend void swap(WaitProgressReq& a, WaitProgressReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaitProgressReq* New() const final {
    return CreateMaybeMessage<WaitProgressReq>(nullptr);
  }

  WaitProgressReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitProgressReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WaitProgressReq& from);
  void MergeFrom(const WaitProgressReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitProgressReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.WaitProgressReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  int set_do_list_size() const;
  void clear_set_do_list();
  static const int kSetDoListFieldNumber = 2;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_do_list();
  const ::Nrmk::IndyFramework::DigitalSignal& set_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_do_list() const;

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  int set_end_do_list_size() const;
  void clear_set_end_do_list();
  static const int kSetEndDoListFieldNumber = 3;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_end_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_end_do_list();
  const ::Nrmk::IndyFramework::DigitalSignal& set_end_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_end_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_end_do_list() const;

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  int set_ao_list_size() const;
  void clear_set_ao_list();
  static const int kSetAoListFieldNumber = 4;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_ao_list();
  const ::Nrmk::IndyFramework::AnalogSignal& set_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_ao_list() const;

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  int set_end_ao_list_size() const;
  void clear_set_end_ao_list();
  static const int kSetEndAoListFieldNumber = 5;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_end_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_end_ao_list();
  const ::Nrmk::IndyFramework::AnalogSignal& set_end_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_end_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_end_ao_list() const;

  // int32 progress = 1;
  void clear_progress();
  static const int kProgressFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 progress() const;
  void set_progress(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.WaitProgressReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_end_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_end_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class WaitTrajReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.WaitTrajReq) */ {
 public:
  WaitTrajReq();
  virtual ~WaitTrajReq();

  WaitTrajReq(const WaitTrajReq& from);
  WaitTrajReq(WaitTrajReq&& from) noexcept
    : WaitTrajReq() {
    *this = ::std::move(from);
  }

  inline WaitTrajReq& operator=(const WaitTrajReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitTrajReq& operator=(WaitTrajReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WaitTrajReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaitTrajReq* internal_default_instance() {
    return reinterpret_cast<const WaitTrajReq*>(
               &_WaitTrajReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(WaitTrajReq* other);
  friend void swap(WaitTrajReq& a, WaitTrajReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaitTrajReq* New() const final {
    return CreateMaybeMessage<WaitTrajReq>(nullptr);
  }

  WaitTrajReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitTrajReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WaitTrajReq& from);
  void MergeFrom(const WaitTrajReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitTrajReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.WaitTrajReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  int set_do_list_size() const;
  void clear_set_do_list();
  static const int kSetDoListFieldNumber = 2;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_do_list();
  const ::Nrmk::IndyFramework::DigitalSignal& set_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_do_list() const;

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  int set_end_do_list_size() const;
  void clear_set_end_do_list();
  static const int kSetEndDoListFieldNumber = 3;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_end_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_end_do_list();
  const ::Nrmk::IndyFramework::DigitalSignal& set_end_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_end_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_end_do_list() const;

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  int set_ao_list_size() const;
  void clear_set_ao_list();
  static const int kSetAoListFieldNumber = 4;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_ao_list();
  const ::Nrmk::IndyFramework::AnalogSignal& set_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_ao_list() const;

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  int set_end_ao_list_size() const;
  void clear_set_end_ao_list();
  static const int kSetEndAoListFieldNumber = 5;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_end_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_end_ao_list();
  const ::Nrmk::IndyFramework::AnalogSignal& set_end_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_end_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_end_ao_list() const;

  // .Nrmk.IndyFramework.TrajCondition traj_condition = 1;
  void clear_traj_condition();
  static const int kTrajConditionFieldNumber = 1;
  ::Nrmk::IndyFramework::TrajCondition traj_condition() const;
  void set_traj_condition(::Nrmk::IndyFramework::TrajCondition value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.WaitTrajReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_end_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_end_ao_list_;
  int traj_condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class WaitRadiusReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.WaitRadiusReq) */ {
 public:
  WaitRadiusReq();
  virtual ~WaitRadiusReq();

  WaitRadiusReq(const WaitRadiusReq& from);
  WaitRadiusReq(WaitRadiusReq&& from) noexcept
    : WaitRadiusReq() {
    *this = ::std::move(from);
  }

  inline WaitRadiusReq& operator=(const WaitRadiusReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitRadiusReq& operator=(WaitRadiusReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WaitRadiusReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaitRadiusReq* internal_default_instance() {
    return reinterpret_cast<const WaitRadiusReq*>(
               &_WaitRadiusReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(WaitRadiusReq* other);
  friend void swap(WaitRadiusReq& a, WaitRadiusReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WaitRadiusReq* New() const final {
    return CreateMaybeMessage<WaitRadiusReq>(nullptr);
  }

  WaitRadiusReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitRadiusReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WaitRadiusReq& from);
  void MergeFrom(const WaitRadiusReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitRadiusReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.WaitRadiusReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
  int set_do_list_size() const;
  void clear_set_do_list();
  static const int kSetDoListFieldNumber = 2;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_do_list();
  const ::Nrmk::IndyFramework::DigitalSignal& set_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_do_list() const;

  // repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
  int set_end_do_list_size() const;
  void clear_set_end_do_list();
  static const int kSetEndDoListFieldNumber = 3;
  ::Nrmk::IndyFramework::DigitalSignal* mutable_set_end_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
      mutable_set_end_do_list();
  const ::Nrmk::IndyFramework::DigitalSignal& set_end_do_list(int index) const;
  ::Nrmk::IndyFramework::DigitalSignal* add_set_end_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
      set_end_do_list() const;

  // repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
  int set_ao_list_size() const;
  void clear_set_ao_list();
  static const int kSetAoListFieldNumber = 4;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_ao_list();
  const ::Nrmk::IndyFramework::AnalogSignal& set_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_ao_list() const;

  // repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
  int set_end_ao_list_size() const;
  void clear_set_end_ao_list();
  static const int kSetEndAoListFieldNumber = 5;
  ::Nrmk::IndyFramework::AnalogSignal* mutable_set_end_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
      mutable_set_end_ao_list();
  const ::Nrmk::IndyFramework::AnalogSignal& set_end_ao_list(int index) const;
  ::Nrmk::IndyFramework::AnalogSignal* add_set_end_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
      set_end_ao_list() const;

  // int32 radius = 1;
  void clear_radius();
  static const int kRadiusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 radius() const;
  void set_radius(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.WaitRadiusReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal > set_end_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal > set_end_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Program :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Program) */ {
 public:
  Program();
  virtual ~Program();

  Program(const Program& from);
  Program(Program&& from) noexcept
    : Program() {
    *this = ::std::move(from);
  }

  inline Program& operator=(const Program& from) {
    CopyFrom(from);
    return *this;
  }
  inline Program& operator=(Program&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Program& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Program* internal_default_instance() {
    return reinterpret_cast<const Program*>(
               &_Program_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(Program* other);
  friend void swap(Program& a, Program& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Program* New() const final {
    return CreateMaybeMessage<Program>(nullptr);
  }

  Program* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Program>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Program& from);
  void MergeFrom(const Program& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Program* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.Program";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string prog_name = 1;
  void clear_prog_name();
  static const int kProgNameFieldNumber = 1;
  const std::string& prog_name() const;
  void set_prog_name(const std::string& value);
  void set_prog_name(std::string&& value);
  void set_prog_name(const char* value);
  void set_prog_name(const char* value, size_t size);
  std::string* mutable_prog_name();
  std::string* release_prog_name();
  void set_allocated_prog_name(std::string* prog_name);

  // int32 prog_idx = 2;
  void clear_prog_idx();
  static const int kProgIdxFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 prog_idx() const;
  void set_prog_idx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Program)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prog_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 prog_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TuningProgram :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TuningProgram) */ {
 public:
  TuningProgram();
  virtual ~TuningProgram();

  TuningProgram(const TuningProgram& from);
  TuningProgram(TuningProgram&& from) noexcept
    : TuningProgram() {
    *this = ::std::move(from);
  }

  inline TuningProgram& operator=(const TuningProgram& from) {
    CopyFrom(from);
    return *this;
  }
  inline TuningProgram& operator=(TuningProgram&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TuningProgram& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TuningProgram* internal_default_instance() {
    return reinterpret_cast<const TuningProgram*>(
               &_TuningProgram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(TuningProgram* other);
  friend void swap(TuningProgram& a, TuningProgram& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TuningProgram* New() const final {
    return CreateMaybeMessage<TuningProgram>(nullptr);
  }

  TuningProgram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TuningProgram>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TuningProgram& from);
  void MergeFrom(const TuningProgram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TuningProgram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TuningProgram";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.Program program = 1;
  bool has_program() const;
  void clear_program();
  static const int kProgramFieldNumber = 1;
  const ::Nrmk::IndyFramework::Program& program() const;
  ::Nrmk::IndyFramework::Program* release_program();
  ::Nrmk::IndyFramework::Program* mutable_program();
  void set_allocated_program(::Nrmk::IndyFramework::Program* program);

  // .Nrmk.IndyFramework.TuningSpace tuning_space = 2;
  void clear_tuning_space();
  static const int kTuningSpaceFieldNumber = 2;
  ::Nrmk::IndyFramework::TuningSpace tuning_space() const;
  void set_tuning_space(::Nrmk::IndyFramework::TuningSpace value);

  // .Nrmk.IndyFramework.TuningPrecision precision = 3;
  void clear_precision();
  static const int kPrecisionFieldNumber = 3;
  ::Nrmk::IndyFramework::TuningPrecision precision() const;
  void set_precision(::Nrmk::IndyFramework::TuningPrecision value);

  // uint32 vel_level_max = 4;
  void clear_vel_level_max();
  static const int kVelLevelMaxFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 vel_level_max() const;
  void set_vel_level_max(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TuningProgram)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::Program* program_;
  int tuning_space_;
  int precision_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vel_level_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ProgramInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ProgramInfo) */ {
 public:
  ProgramInfo();
  virtual ~ProgramInfo();

  ProgramInfo(const ProgramInfo& from);
  ProgramInfo(ProgramInfo&& from) noexcept
    : ProgramInfo() {
    *this = ::std::move(from);
  }

  inline ProgramInfo& operator=(const ProgramInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramInfo& operator=(ProgramInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProgramInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgramInfo* internal_default_instance() {
    return reinterpret_cast<const ProgramInfo*>(
               &_ProgramInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(ProgramInfo* other);
  friend void swap(ProgramInfo& a, ProgramInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProgramInfo* New() const final {
    return CreateMaybeMessage<ProgramInfo>(nullptr);
  }

  ProgramInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProgramInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProgramInfo& from);
  void MergeFrom(const ProgramInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ProgramInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // string timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);

  // uint64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ProgramInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Variable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.Variable) */ {
 public:
  Variable();
  virtual ~Variable();

  Variable(const Variable& from);
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variable& operator=(Variable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Variable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(Variable* other);
  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Variable* New() const final {
    return CreateMaybeMessage<Variable>(nullptr);
  }

  Variable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Variable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Variable& from);
  void MergeFrom(const Variable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.Variable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // int32 addr = 2;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool in_watching = 4;
  void clear_in_watching();
  static const int kInWatchingFieldNumber = 4;
  bool in_watching() const;
  void set_in_watching(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.Variable)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int32 addr_;
  bool in_watching_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class IntVariable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IntVariable) */ {
 public:
  IntVariable();
  virtual ~IntVariable();

  IntVariable(const IntVariable& from);
  IntVariable(IntVariable&& from) noexcept
    : IntVariable() {
    *this = ::std::move(from);
  }

  inline IntVariable& operator=(const IntVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntVariable& operator=(IntVariable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntVariable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntVariable* internal_default_instance() {
    return reinterpret_cast<const IntVariable*>(
               &_IntVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(IntVariable* other);
  friend void swap(IntVariable& a, IntVariable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntVariable* New() const final {
    return CreateMaybeMessage<IntVariable>(nullptr);
  }

  IntVariable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntVariable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntVariable& from);
  void MergeFrom(const IntVariable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntVariable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.IntVariable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IntVariable)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ModbusVariable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ModbusVariable) */ {
 public:
  ModbusVariable();
  virtual ~ModbusVariable();

  ModbusVariable(const ModbusVariable& from);
  ModbusVariable(ModbusVariable&& from) noexcept
    : ModbusVariable() {
    *this = ::std::move(from);
  }

  inline ModbusVariable& operator=(const ModbusVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModbusVariable& operator=(ModbusVariable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModbusVariable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModbusVariable* internal_default_instance() {
    return reinterpret_cast<const ModbusVariable*>(
               &_ModbusVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(ModbusVariable* other);
  friend void swap(ModbusVariable& a, ModbusVariable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModbusVariable* New() const final {
    return CreateMaybeMessage<ModbusVariable>(nullptr);
  }

  ModbusVariable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModbusVariable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModbusVariable& from);
  void MergeFrom(const ModbusVariable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModbusVariable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ModbusVariable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ModbusVariable_SignalType SignalType;
  static constexpr SignalType ReadCoil =
    ModbusVariable_SignalType_ReadCoil;
  static constexpr SignalType WriteCoil =
    ModbusVariable_SignalType_WriteCoil;
  static constexpr SignalType ReadRegister =
    ModbusVariable_SignalType_ReadRegister;
  static constexpr SignalType WriteRegister =
    ModbusVariable_SignalType_WriteRegister;
  static inline bool SignalType_IsValid(int value) {
    return ModbusVariable_SignalType_IsValid(value);
  }
  static constexpr SignalType SignalType_MIN =
    ModbusVariable_SignalType_SignalType_MIN;
  static constexpr SignalType SignalType_MAX =
    ModbusVariable_SignalType_SignalType_MAX;
  static constexpr int SignalType_ARRAYSIZE =
    ModbusVariable_SignalType_SignalType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalType_descriptor() {
    return ModbusVariable_SignalType_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalType_Name.");
    return ModbusVariable_SignalType_Name(enum_t_value);
  }
  static inline bool SignalType_Parse(const std::string& name,
      SignalType* value) {
    return ModbusVariable_SignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int32 addr = 2;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .Nrmk.IndyFramework.ModbusVariable.SignalType signal_type = 4;
  void clear_signal_type();
  static const int kSignalTypeFieldNumber = 4;
  ::Nrmk::IndyFramework::ModbusVariable_SignalType signal_type() const;
  void set_signal_type(::Nrmk::IndyFramework::ModbusVariable_SignalType value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ModbusVariable)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 addr_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  int signal_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class BoolVariable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.BoolVariable) */ {
 public:
  BoolVariable();
  virtual ~BoolVariable();

  BoolVariable(const BoolVariable& from);
  BoolVariable(BoolVariable&& from) noexcept
    : BoolVariable() {
    *this = ::std::move(from);
  }

  inline BoolVariable& operator=(const BoolVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolVariable& operator=(BoolVariable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoolVariable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoolVariable* internal_default_instance() {
    return reinterpret_cast<const BoolVariable*>(
               &_BoolVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(BoolVariable* other);
  friend void swap(BoolVariable& a, BoolVariable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoolVariable* New() const final {
    return CreateMaybeMessage<BoolVariable>(nullptr);
  }

  BoolVariable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolVariable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoolVariable& from);
  void MergeFrom(const BoolVariable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolVariable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.BoolVariable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.BoolVariable)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 addr_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class FloatVariable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FloatVariable) */ {
 public:
  FloatVariable();
  virtual ~FloatVariable();

  FloatVariable(const FloatVariable& from);
  FloatVariable(FloatVariable&& from) noexcept
    : FloatVariable() {
    *this = ::std::move(from);
  }

  inline FloatVariable& operator=(const FloatVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatVariable& operator=(FloatVariable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatVariable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatVariable* internal_default_instance() {
    return reinterpret_cast<const FloatVariable*>(
               &_FloatVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(FloatVariable* other);
  friend void swap(FloatVariable& a, FloatVariable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FloatVariable* New() const final {
    return CreateMaybeMessage<FloatVariable>(nullptr);
  }

  FloatVariable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatVariable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatVariable& from);
  void MergeFrom(const FloatVariable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatVariable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.FloatVariable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FloatVariable)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 addr_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class JPosVariable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.JPosVariable) */ {
 public:
  JPosVariable();
  virtual ~JPosVariable();

  JPosVariable(const JPosVariable& from);
  JPosVariable(JPosVariable&& from) noexcept
    : JPosVariable() {
    *this = ::std::move(from);
  }

  inline JPosVariable& operator=(const JPosVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline JPosVariable& operator=(JPosVariable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JPosVariable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JPosVariable* internal_default_instance() {
    return reinterpret_cast<const JPosVariable*>(
               &_JPosVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(JPosVariable* other);
  friend void swap(JPosVariable& a, JPosVariable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JPosVariable* New() const final {
    return CreateMaybeMessage<JPosVariable>(nullptr);
  }

  JPosVariable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JPosVariable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JPosVariable& from);
  void MergeFrom(const JPosVariable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JPosVariable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.JPosVariable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float jpos = 2;
  int jpos_size() const;
  void clear_jpos();
  static const int kJposFieldNumber = 2;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_jpos();

  // int32 addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.JPosVariable)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > jpos_;
  mutable std::atomic<int> _jpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TPosVariable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TPosVariable) */ {
 public:
  TPosVariable();
  virtual ~TPosVariable();

  TPosVariable(const TPosVariable& from);
  TPosVariable(TPosVariable&& from) noexcept
    : TPosVariable() {
    *this = ::std::move(from);
  }

  inline TPosVariable& operator=(const TPosVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPosVariable& operator=(TPosVariable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TPosVariable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TPosVariable* internal_default_instance() {
    return reinterpret_cast<const TPosVariable*>(
               &_TPosVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(TPosVariable* other);
  friend void swap(TPosVariable& a, TPosVariable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TPosVariable* New() const final {
    return CreateMaybeMessage<TPosVariable>(nullptr);
  }

  TPosVariable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TPosVariable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TPosVariable& from);
  void MergeFrom(const TPosVariable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPosVariable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TPosVariable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos = 2;
  int tpos_size() const;
  void clear_tpos();
  static const int kTposFieldNumber = 2;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos();

  // int32 addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TPosVariable)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos_;
  mutable std::atomic<int> _tpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ModbusServer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ModbusServer) */ {
 public:
  ModbusServer();
  virtual ~ModbusServer();

  ModbusServer(const ModbusServer& from);
  ModbusServer(ModbusServer&& from) noexcept
    : ModbusServer() {
    *this = ::std::move(from);
  }

  inline ModbusServer& operator=(const ModbusServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModbusServer& operator=(ModbusServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModbusServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModbusServer* internal_default_instance() {
    return reinterpret_cast<const ModbusServer*>(
               &_ModbusServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(ModbusServer* other);
  friend void swap(ModbusServer& a, ModbusServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModbusServer* New() const final {
    return CreateMaybeMessage<ModbusServer>(nullptr);
  }

  ModbusServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModbusServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModbusServer& from);
  void MergeFrom(const ModbusServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModbusServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ModbusServer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.ModbusVariable variable_list = 4;
  int variable_list_size() const;
  void clear_variable_list();
  static const int kVariableListFieldNumber = 4;
  ::Nrmk::IndyFramework::ModbusVariable* mutable_variable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >*
      mutable_variable_list();
  const ::Nrmk::IndyFramework::ModbusVariable& variable_list(int index) const;
  ::Nrmk::IndyFramework::ModbusVariable* add_variable_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >&
      variable_list() const;

  // string server_name = 1;
  void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  const std::string& server_name() const;
  void set_server_name(const std::string& value);
  void set_server_name(std::string&& value);
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  std::string* mutable_server_name();
  std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ModbusServer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable > variable_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ModbusVariableList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ModbusVariableList) */ {
 public:
  ModbusVariableList();
  virtual ~ModbusVariableList();

  ModbusVariableList(const ModbusVariableList& from);
  ModbusVariableList(ModbusVariableList&& from) noexcept
    : ModbusVariableList() {
    *this = ::std::move(from);
  }

  inline ModbusVariableList& operator=(const ModbusVariableList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModbusVariableList& operator=(ModbusVariableList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModbusVariableList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModbusVariableList* internal_default_instance() {
    return reinterpret_cast<const ModbusVariableList*>(
               &_ModbusVariableList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(ModbusVariableList* other);
  friend void swap(ModbusVariableList& a, ModbusVariableList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModbusVariableList* New() const final {
    return CreateMaybeMessage<ModbusVariableList>(nullptr);
  }

  ModbusVariableList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModbusVariableList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModbusVariableList& from);
  void MergeFrom(const ModbusVariableList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModbusVariableList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ModbusVariableList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.ModbusServer modbus_variables = 1;
  int modbus_variables_size() const;
  void clear_modbus_variables();
  static const int kModbusVariablesFieldNumber = 1;
  ::Nrmk::IndyFramework::ModbusServer* mutable_modbus_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusServer >*
      mutable_modbus_variables();
  const ::Nrmk::IndyFramework::ModbusServer& modbus_variables(int index) const;
  ::Nrmk::IndyFramework::ModbusServer* add_modbus_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusServer >&
      modbus_variables() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ModbusVariableList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusServer > modbus_variables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AllVars :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.AllVars) */ {
 public:
  AllVars();
  virtual ~AllVars();

  AllVars(const AllVars& from);
  AllVars(AllVars&& from) noexcept
    : AllVars() {
    *this = ::std::move(from);
  }

  inline AllVars& operator=(const AllVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllVars& operator=(AllVars&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllVars& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllVars* internal_default_instance() {
    return reinterpret_cast<const AllVars*>(
               &_AllVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(AllVars* other);
  friend void swap(AllVars& a, AllVars& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllVars* New() const final {
    return CreateMaybeMessage<AllVars>(nullptr);
  }

  AllVars* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllVars>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllVars& from);
  void MergeFrom(const AllVars& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllVars* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.AllVars";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.Variable variables = 1;
  int variables_size() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 1;
  ::Nrmk::IndyFramework::Variable* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Variable >*
      mutable_variables();
  const ::Nrmk::IndyFramework::Variable& variables(int index) const;
  ::Nrmk::IndyFramework::Variable* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Variable >&
      variables() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.AllVars)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Variable > variables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class IntVars :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.IntVars) */ {
 public:
  IntVars();
  virtual ~IntVars();

  IntVars(const IntVars& from);
  IntVars(IntVars&& from) noexcept
    : IntVars() {
    *this = ::std::move(from);
  }

  inline IntVars& operator=(const IntVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntVars& operator=(IntVars&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntVars& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntVars* internal_default_instance() {
    return reinterpret_cast<const IntVars*>(
               &_IntVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(IntVars* other);
  friend void swap(IntVars& a, IntVars& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntVars* New() const final {
    return CreateMaybeMessage<IntVars>(nullptr);
  }

  IntVars* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntVars>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntVars& from);
  void MergeFrom(const IntVars& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntVars* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.IntVars";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.IntVariable variables = 1;
  int variables_size() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 1;
  ::Nrmk::IndyFramework::IntVariable* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >*
      mutable_variables();
  const ::Nrmk::IndyFramework::IntVariable& variables(int index) const;
  ::Nrmk::IndyFramework::IntVariable* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >&
      variables() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.IntVars)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable > variables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ModbusVars :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ModbusVars) */ {
 public:
  ModbusVars();
  virtual ~ModbusVars();

  ModbusVars(const ModbusVars& from);
  ModbusVars(ModbusVars&& from) noexcept
    : ModbusVars() {
    *this = ::std::move(from);
  }

  inline ModbusVars& operator=(const ModbusVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModbusVars& operator=(ModbusVars&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModbusVars& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModbusVars* internal_default_instance() {
    return reinterpret_cast<const ModbusVars*>(
               &_ModbusVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(ModbusVars* other);
  friend void swap(ModbusVars& a, ModbusVars& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModbusVars* New() const final {
    return CreateMaybeMessage<ModbusVars>(nullptr);
  }

  ModbusVars* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModbusVars>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModbusVars& from);
  void MergeFrom(const ModbusVars& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModbusVars* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ModbusVars";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.ModbusVariable variables = 1;
  int variables_size() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 1;
  ::Nrmk::IndyFramework::ModbusVariable* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >*
      mutable_variables();
  const ::Nrmk::IndyFramework::ModbusVariable& variables(int index) const;
  ::Nrmk::IndyFramework::ModbusVariable* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >&
      variables() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ModbusVars)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable > variables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class BoolVars :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.BoolVars) */ {
 public:
  BoolVars();
  virtual ~BoolVars();

  BoolVars(const BoolVars& from);
  BoolVars(BoolVars&& from) noexcept
    : BoolVars() {
    *this = ::std::move(from);
  }

  inline BoolVars& operator=(const BoolVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolVars& operator=(BoolVars&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoolVars& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoolVars* internal_default_instance() {
    return reinterpret_cast<const BoolVars*>(
               &_BoolVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(BoolVars* other);
  friend void swap(BoolVars& a, BoolVars& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoolVars* New() const final {
    return CreateMaybeMessage<BoolVars>(nullptr);
  }

  BoolVars* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolVars>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoolVars& from);
  void MergeFrom(const BoolVars& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolVars* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.BoolVars";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.BoolVariable variables = 1;
  int variables_size() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 1;
  ::Nrmk::IndyFramework::BoolVariable* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >*
      mutable_variables();
  const ::Nrmk::IndyFramework::BoolVariable& variables(int index) const;
  ::Nrmk::IndyFramework::BoolVariable* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >&
      variables() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.BoolVars)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable > variables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class FloatVars :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.FloatVars) */ {
 public:
  FloatVars();
  virtual ~FloatVars();

  FloatVars(const FloatVars& from);
  FloatVars(FloatVars&& from) noexcept
    : FloatVars() {
    *this = ::std::move(from);
  }

  inline FloatVars& operator=(const FloatVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatVars& operator=(FloatVars&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatVars& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatVars* internal_default_instance() {
    return reinterpret_cast<const FloatVars*>(
               &_FloatVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(FloatVars* other);
  friend void swap(FloatVars& a, FloatVars& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FloatVars* New() const final {
    return CreateMaybeMessage<FloatVars>(nullptr);
  }

  FloatVars* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatVars>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatVars& from);
  void MergeFrom(const FloatVars& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatVars* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.FloatVars";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.FloatVariable variables = 1;
  int variables_size() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 1;
  ::Nrmk::IndyFramework::FloatVariable* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >*
      mutable_variables();
  const ::Nrmk::IndyFramework::FloatVariable& variables(int index) const;
  ::Nrmk::IndyFramework::FloatVariable* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >&
      variables() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.FloatVars)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable > variables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class JPosVars :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.JPosVars) */ {
 public:
  JPosVars();
  virtual ~JPosVars();

  JPosVars(const JPosVars& from);
  JPosVars(JPosVars&& from) noexcept
    : JPosVars() {
    *this = ::std::move(from);
  }

  inline JPosVars& operator=(const JPosVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline JPosVars& operator=(JPosVars&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JPosVars& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JPosVars* internal_default_instance() {
    return reinterpret_cast<const JPosVars*>(
               &_JPosVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(JPosVars* other);
  friend void swap(JPosVars& a, JPosVars& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JPosVars* New() const final {
    return CreateMaybeMessage<JPosVars>(nullptr);
  }

  JPosVars* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JPosVars>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JPosVars& from);
  void MergeFrom(const JPosVars& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JPosVars* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.JPosVars";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.JPosVariable variables = 1;
  int variables_size() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 1;
  ::Nrmk::IndyFramework::JPosVariable* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >*
      mutable_variables();
  const ::Nrmk::IndyFramework::JPosVariable& variables(int index) const;
  ::Nrmk::IndyFramework::JPosVariable* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >&
      variables() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.JPosVars)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable > variables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TPosVars :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TPosVars) */ {
 public:
  TPosVars();
  virtual ~TPosVars();

  TPosVars(const TPosVars& from);
  TPosVars(TPosVars&& from) noexcept
    : TPosVars() {
    *this = ::std::move(from);
  }

  inline TPosVars& operator=(const TPosVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPosVars& operator=(TPosVars&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TPosVars& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TPosVars* internal_default_instance() {
    return reinterpret_cast<const TPosVars*>(
               &_TPosVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(TPosVars* other);
  friend void swap(TPosVars& a, TPosVars& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TPosVars* New() const final {
    return CreateMaybeMessage<TPosVars>(nullptr);
  }

  TPosVars* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TPosVars>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TPosVars& from);
  void MergeFrom(const TPosVars& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPosVars* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TPosVars";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.TPosVariable variables = 1;
  int variables_size() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 1;
  ::Nrmk::IndyFramework::TPosVariable* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >*
      mutable_variables();
  const ::Nrmk::IndyFramework::TPosVariable& variables(int index) const;
  ::Nrmk::IndyFramework::TPosVariable* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >&
      variables() const;

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TPosVars)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable > variables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class InverseKinematicsReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.InverseKinematicsReq) */ {
 public:
  InverseKinematicsReq();
  virtual ~InverseKinematicsReq();

  InverseKinematicsReq(const InverseKinematicsReq& from);
  InverseKinematicsReq(InverseKinematicsReq&& from) noexcept
    : InverseKinematicsReq() {
    *this = ::std::move(from);
  }

  inline InverseKinematicsReq& operator=(const InverseKinematicsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline InverseKinematicsReq& operator=(InverseKinematicsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InverseKinematicsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InverseKinematicsReq* internal_default_instance() {
    return reinterpret_cast<const InverseKinematicsReq*>(
               &_InverseKinematicsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(InverseKinematicsReq* other);
  friend void swap(InverseKinematicsReq& a, InverseKinematicsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InverseKinematicsReq* New() const final {
    return CreateMaybeMessage<InverseKinematicsReq>(nullptr);
  }

  InverseKinematicsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InverseKinematicsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InverseKinematicsReq& from);
  void MergeFrom(const InverseKinematicsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InverseKinematicsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.InverseKinematicsReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos = 1;
  int tpos_size() const;
  void clear_tpos();
  static const int kTposFieldNumber = 1;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos();

  // repeated float init_jpos = 2;
  int init_jpos_size() const;
  void clear_init_jpos();
  static const int kInitJposFieldNumber = 2;
  float init_jpos(int index) const;
  void set_init_jpos(int index, float value);
  void add_init_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      init_jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_init_jpos();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.InverseKinematicsReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos_;
  mutable std::atomic<int> _tpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > init_jpos_;
  mutable std::atomic<int> _init_jpos_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class InverseKinematicsRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.InverseKinematicsRes) */ {
 public:
  InverseKinematicsRes();
  virtual ~InverseKinematicsRes();

  InverseKinematicsRes(const InverseKinematicsRes& from);
  InverseKinematicsRes(InverseKinematicsRes&& from) noexcept
    : InverseKinematicsRes() {
    *this = ::std::move(from);
  }

  inline InverseKinematicsRes& operator=(const InverseKinematicsRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline InverseKinematicsRes& operator=(InverseKinematicsRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InverseKinematicsRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InverseKinematicsRes* internal_default_instance() {
    return reinterpret_cast<const InverseKinematicsRes*>(
               &_InverseKinematicsRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(InverseKinematicsRes* other);
  friend void swap(InverseKinematicsRes& a, InverseKinematicsRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InverseKinematicsRes* New() const final {
    return CreateMaybeMessage<InverseKinematicsRes>(nullptr);
  }

  InverseKinematicsRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InverseKinematicsRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InverseKinematicsRes& from);
  void MergeFrom(const InverseKinematicsRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InverseKinematicsRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.InverseKinematicsRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float jpos = 1;
  int jpos_size() const;
  void clear_jpos();
  static const int kJposFieldNumber = 1;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_jpos();

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.InverseKinematicsRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > jpos_;
  mutable std::atomic<int> _jpos_cached_byte_size_;
  ::Nrmk::IndyFramework::Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ForwardKinematicsReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ForwardKinematicsReq) */ {
 public:
  ForwardKinematicsReq();
  virtual ~ForwardKinematicsReq();

  ForwardKinematicsReq(const ForwardKinematicsReq& from);
  ForwardKinematicsReq(ForwardKinematicsReq&& from) noexcept
    : ForwardKinematicsReq() {
    *this = ::std::move(from);
  }

  inline ForwardKinematicsReq& operator=(const ForwardKinematicsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardKinematicsReq& operator=(ForwardKinematicsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForwardKinematicsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForwardKinematicsReq* internal_default_instance() {
    return reinterpret_cast<const ForwardKinematicsReq*>(
               &_ForwardKinematicsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(ForwardKinematicsReq* other);
  friend void swap(ForwardKinematicsReq& a, ForwardKinematicsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForwardKinematicsReq* New() const final {
    return CreateMaybeMessage<ForwardKinematicsReq>(nullptr);
  }

  ForwardKinematicsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForwardKinematicsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForwardKinematicsReq& from);
  void MergeFrom(const ForwardKinematicsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardKinematicsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ForwardKinematicsReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float jpos = 1;
  int jpos_size() const;
  void clear_jpos();
  static const int kJposFieldNumber = 1;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_jpos();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ForwardKinematicsReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > jpos_;
  mutable std::atomic<int> _jpos_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ForwardKinematicsRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.ForwardKinematicsRes) */ {
 public:
  ForwardKinematicsRes();
  virtual ~ForwardKinematicsRes();

  ForwardKinematicsRes(const ForwardKinematicsRes& from);
  ForwardKinematicsRes(ForwardKinematicsRes&& from) noexcept
    : ForwardKinematicsRes() {
    *this = ::std::move(from);
  }

  inline ForwardKinematicsRes& operator=(const ForwardKinematicsRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardKinematicsRes& operator=(ForwardKinematicsRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForwardKinematicsRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForwardKinematicsRes* internal_default_instance() {
    return reinterpret_cast<const ForwardKinematicsRes*>(
               &_ForwardKinematicsRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(ForwardKinematicsRes* other);
  friend void swap(ForwardKinematicsRes& a, ForwardKinematicsRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForwardKinematicsRes* New() const final {
    return CreateMaybeMessage<ForwardKinematicsRes>(nullptr);
  }

  ForwardKinematicsRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForwardKinematicsRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForwardKinematicsRes& from);
  void MergeFrom(const ForwardKinematicsRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardKinematicsRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.ForwardKinematicsRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos = 1;
  int tpos_size() const;
  void clear_tpos();
  static const int kTposFieldNumber = 1;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos();

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.ForwardKinematicsRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos_;
  mutable std::atomic<int> _tpos_cached_byte_size_;
  ::Nrmk::IndyFramework::Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CheckAproachRetractValidReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CheckAproachRetractValidReq) */ {
 public:
  CheckAproachRetractValidReq();
  virtual ~CheckAproachRetractValidReq();

  CheckAproachRetractValidReq(const CheckAproachRetractValidReq& from);
  CheckAproachRetractValidReq(CheckAproachRetractValidReq&& from) noexcept
    : CheckAproachRetractValidReq() {
    *this = ::std::move(from);
  }

  inline CheckAproachRetractValidReq& operator=(const CheckAproachRetractValidReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckAproachRetractValidReq& operator=(CheckAproachRetractValidReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckAproachRetractValidReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckAproachRetractValidReq* internal_default_instance() {
    return reinterpret_cast<const CheckAproachRetractValidReq*>(
               &_CheckAproachRetractValidReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(CheckAproachRetractValidReq* other);
  friend void swap(CheckAproachRetractValidReq& a, CheckAproachRetractValidReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckAproachRetractValidReq* New() const final {
    return CreateMaybeMessage<CheckAproachRetractValidReq>(nullptr);
  }

  CheckAproachRetractValidReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckAproachRetractValidReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckAproachRetractValidReq& from);
  void MergeFrom(const CheckAproachRetractValidReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckAproachRetractValidReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.CheckAproachRetractValidReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos = 1;
  int tpos_size() const;
  void clear_tpos();
  static const int kTposFieldNumber = 1;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos();

  // repeated float init_jpos = 2;
  int init_jpos_size() const;
  void clear_init_jpos();
  static const int kInitJposFieldNumber = 2;
  float init_jpos(int index) const;
  void set_init_jpos(int index, float value);
  void add_init_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      init_jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_init_jpos();

  // repeated float pre_tpos = 3;
  int pre_tpos_size() const;
  void clear_pre_tpos();
  static const int kPreTposFieldNumber = 3;
  float pre_tpos(int index) const;
  void set_pre_tpos(int index, float value);
  void add_pre_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pre_tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pre_tpos();

  // repeated float post_tpos = 4;
  int post_tpos_size() const;
  void clear_post_tpos();
  static const int kPostTposFieldNumber = 4;
  float post_tpos(int index) const;
  void set_post_tpos(int index, float value);
  void add_post_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      post_tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_post_tpos();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CheckAproachRetractValidReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos_;
  mutable std::atomic<int> _tpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > init_jpos_;
  mutable std::atomic<int> _init_jpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pre_tpos_;
  mutable std::atomic<int> _pre_tpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > post_tpos_;
  mutable std::atomic<int> _post_tpos_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CheckAproachRetractValidRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CheckAproachRetractValidRes) */ {
 public:
  CheckAproachRetractValidRes();
  virtual ~CheckAproachRetractValidRes();

  CheckAproachRetractValidRes(const CheckAproachRetractValidRes& from);
  CheckAproachRetractValidRes(CheckAproachRetractValidRes&& from) noexcept
    : CheckAproachRetractValidRes() {
    *this = ::std::move(from);
  }

  inline CheckAproachRetractValidRes& operator=(const CheckAproachRetractValidRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckAproachRetractValidRes& operator=(CheckAproachRetractValidRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckAproachRetractValidRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckAproachRetractValidRes* internal_default_instance() {
    return reinterpret_cast<const CheckAproachRetractValidRes*>(
               &_CheckAproachRetractValidRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(CheckAproachRetractValidRes* other);
  friend void swap(CheckAproachRetractValidRes& a, CheckAproachRetractValidRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckAproachRetractValidRes* New() const final {
    return CreateMaybeMessage<CheckAproachRetractValidRes>(nullptr);
  }

  CheckAproachRetractValidRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckAproachRetractValidRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckAproachRetractValidRes& from);
  void MergeFrom(const CheckAproachRetractValidRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckAproachRetractValidRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.CheckAproachRetractValidRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tar_pos = 2;
  int tar_pos_size() const;
  void clear_tar_pos();
  static const int kTarPosFieldNumber = 2;
  float tar_pos(int index) const;
  void set_tar_pos(int index, float value);
  void add_tar_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tar_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tar_pos();

  // repeated float approach_pos = 3;
  int approach_pos_size() const;
  void clear_approach_pos();
  static const int kApproachPosFieldNumber = 3;
  float approach_pos(int index) const;
  void set_approach_pos(int index, float value);
  void add_approach_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      approach_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_approach_pos();

  // repeated float retract_pos = 4;
  int retract_pos_size() const;
  void clear_retract_pos();
  static const int kRetractPosFieldNumber = 4;
  float retract_pos(int index) const;
  void set_retract_pos(int index, float value);
  void add_retract_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      retract_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_retract_pos();

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // bool is_valid = 1;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 1;
  bool is_valid() const;
  void set_is_valid(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CheckAproachRetractValidRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tar_pos_;
  mutable std::atomic<int> _tar_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > approach_pos_;
  mutable std::atomic<int> _approach_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > retract_pos_;
  mutable std::atomic<int> _retract_pos_cached_byte_size_;
  ::Nrmk::IndyFramework::Response* response_;
  bool is_valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetPalletPointListReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.GetPalletPointListReq) */ {
 public:
  GetPalletPointListReq();
  virtual ~GetPalletPointListReq();

  GetPalletPointListReq(const GetPalletPointListReq& from);
  GetPalletPointListReq(GetPalletPointListReq&& from) noexcept
    : GetPalletPointListReq() {
    *this = ::std::move(from);
  }

  inline GetPalletPointListReq& operator=(const GetPalletPointListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPalletPointListReq& operator=(GetPalletPointListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPalletPointListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPalletPointListReq* internal_default_instance() {
    return reinterpret_cast<const GetPalletPointListReq*>(
               &_GetPalletPointListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(GetPalletPointListReq* other);
  friend void swap(GetPalletPointListReq& a, GetPalletPointListReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPalletPointListReq* New() const final {
    return CreateMaybeMessage<GetPalletPointListReq>(nullptr);
  }

  GetPalletPointListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPalletPointListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPalletPointListReq& from);
  void MergeFrom(const GetPalletPointListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPalletPointListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.GetPalletPointListReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos = 1;
  int tpos_size() const;
  void clear_tpos();
  static const int kTposFieldNumber = 1;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos();

  // repeated float jpos = 2;
  int jpos_size() const;
  void clear_jpos();
  static const int kJposFieldNumber = 2;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_jpos();

  // repeated float pre_tpos = 3;
  int pre_tpos_size() const;
  void clear_pre_tpos();
  static const int kPreTposFieldNumber = 3;
  float pre_tpos(int index) const;
  void set_pre_tpos(int index, float value);
  void add_pre_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pre_tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pre_tpos();

  // repeated float post_tpos = 4;
  int post_tpos_size() const;
  void clear_post_tpos();
  static const int kPostTposFieldNumber = 4;
  float post_tpos(int index) const;
  void set_post_tpos(int index, float value);
  void add_post_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      post_tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_post_tpos();

  // int32 pallet_pattern = 5;
  void clear_pallet_pattern();
  static const int kPalletPatternFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 pallet_pattern() const;
  void set_pallet_pattern(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 width = 6;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 height = 7;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.GetPalletPointListReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos_;
  mutable std::atomic<int> _tpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > jpos_;
  mutable std::atomic<int> _jpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pre_tpos_;
  mutable std::atomic<int> _pre_tpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > post_tpos_;
  mutable std::atomic<int> _post_tpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 pallet_pattern_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PalletPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.PalletPoint) */ {
 public:
  PalletPoint();
  virtual ~PalletPoint();

  PalletPoint(const PalletPoint& from);
  PalletPoint(PalletPoint&& from) noexcept
    : PalletPoint() {
    *this = ::std::move(from);
  }

  inline PalletPoint& operator=(const PalletPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PalletPoint& operator=(PalletPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PalletPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PalletPoint* internal_default_instance() {
    return reinterpret_cast<const PalletPoint*>(
               &_PalletPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(PalletPoint* other);
  friend void swap(PalletPoint& a, PalletPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PalletPoint* New() const final {
    return CreateMaybeMessage<PalletPoint>(nullptr);
  }

  PalletPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PalletPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PalletPoint& from);
  void MergeFrom(const PalletPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PalletPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.PalletPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tar_pos = 1;
  int tar_pos_size() const;
  void clear_tar_pos();
  static const int kTarPosFieldNumber = 1;
  float tar_pos(int index) const;
  void set_tar_pos(int index, float value);
  void add_tar_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tar_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tar_pos();

  // repeated float approach_pos = 2;
  int approach_pos_size() const;
  void clear_approach_pos();
  static const int kApproachPosFieldNumber = 2;
  float approach_pos(int index) const;
  void set_approach_pos(int index, float value);
  void add_approach_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      approach_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_approach_pos();

  // repeated float retract_pos = 3;
  int retract_pos_size() const;
  void clear_retract_pos();
  static const int kRetractPosFieldNumber = 3;
  float retract_pos(int index) const;
  void set_retract_pos(int index, float value);
  void add_retract_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      retract_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_retract_pos();

  // repeated float tar_jpos = 4;
  int tar_jpos_size() const;
  void clear_tar_jpos();
  static const int kTarJposFieldNumber = 4;
  float tar_jpos(int index) const;
  void set_tar_jpos(int index, float value);
  void add_tar_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tar_jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tar_jpos();

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.PalletPoint)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tar_pos_;
  mutable std::atomic<int> _tar_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > approach_pos_;
  mutable std::atomic<int> _approach_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > retract_pos_;
  mutable std::atomic<int> _retract_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tar_jpos_;
  mutable std::atomic<int> _tar_jpos_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetPalletPointListRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.GetPalletPointListRes) */ {
 public:
  GetPalletPointListRes();
  virtual ~GetPalletPointListRes();

  GetPalletPointListRes(const GetPalletPointListRes& from);
  GetPalletPointListRes(GetPalletPointListRes&& from) noexcept
    : GetPalletPointListRes() {
    *this = ::std::move(from);
  }

  inline GetPalletPointListRes& operator=(const GetPalletPointListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPalletPointListRes& operator=(GetPalletPointListRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPalletPointListRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPalletPointListRes* internal_default_instance() {
    return reinterpret_cast<const GetPalletPointListRes*>(
               &_GetPalletPointListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(GetPalletPointListRes* other);
  friend void swap(GetPalletPointListRes& a, GetPalletPointListRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPalletPointListRes* New() const final {
    return CreateMaybeMessage<GetPalletPointListRes>(nullptr);
  }

  GetPalletPointListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPalletPointListRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPalletPointListRes& from);
  void MergeFrom(const GetPalletPointListRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPalletPointListRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.GetPalletPointListRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Nrmk.IndyFramework.PalletPoint pallet_points = 1;
  int pallet_points_size() const;
  void clear_pallet_points();
  static const int kPalletPointsFieldNumber = 1;
  ::Nrmk::IndyFramework::PalletPoint* mutable_pallet_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::PalletPoint >*
      mutable_pallet_points();
  const ::Nrmk::IndyFramework::PalletPoint& pallet_points(int index) const;
  ::Nrmk::IndyFramework::PalletPoint* add_pallet_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::PalletPoint >&
      pallet_points() const;

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.GetPalletPointListRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::PalletPoint > pallet_points_;
  ::Nrmk::IndyFramework::Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CalculateRelativePoseReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CalculateRelativePoseReq) */ {
 public:
  CalculateRelativePoseReq();
  virtual ~CalculateRelativePoseReq();

  CalculateRelativePoseReq(const CalculateRelativePoseReq& from);
  CalculateRelativePoseReq(CalculateRelativePoseReq&& from) noexcept
    : CalculateRelativePoseReq() {
    *this = ::std::move(from);
  }

  inline CalculateRelativePoseReq& operator=(const CalculateRelativePoseReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateRelativePoseReq& operator=(CalculateRelativePoseReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculateRelativePoseReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateRelativePoseReq* internal_default_instance() {
    return reinterpret_cast<const CalculateRelativePoseReq*>(
               &_CalculateRelativePoseReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(CalculateRelativePoseReq* other);
  friend void swap(CalculateRelativePoseReq& a, CalculateRelativePoseReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalculateRelativePoseReq* New() const final {
    return CreateMaybeMessage<CalculateRelativePoseReq>(nullptr);
  }

  CalculateRelativePoseReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculateRelativePoseReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculateRelativePoseReq& from);
  void MergeFrom(const CalculateRelativePoseReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateRelativePoseReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.CalculateRelativePoseReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float start_pos = 1;
  int start_pos_size() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 1;
  float start_pos(int index) const;
  void set_start_pos(int index, float value);
  void add_start_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      start_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_start_pos();

  // repeated float end_pos = 2;
  int end_pos_size() const;
  void clear_end_pos();
  static const int kEndPosFieldNumber = 2;
  float end_pos(int index) const;
  void set_end_pos(int index, float value);
  void add_end_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      end_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_end_pos();

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 3;
  ::Nrmk::IndyFramework::TaskBaseType base_type() const;
  void set_base_type(::Nrmk::IndyFramework::TaskBaseType value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CalculateRelativePoseReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > start_pos_;
  mutable std::atomic<int> _start_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > end_pos_;
  mutable std::atomic<int> _end_pos_cached_byte_size_;
  int base_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CalculateRelativePoseRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CalculateRelativePoseRes) */ {
 public:
  CalculateRelativePoseRes();
  virtual ~CalculateRelativePoseRes();

  CalculateRelativePoseRes(const CalculateRelativePoseRes& from);
  CalculateRelativePoseRes(CalculateRelativePoseRes&& from) noexcept
    : CalculateRelativePoseRes() {
    *this = ::std::move(from);
  }

  inline CalculateRelativePoseRes& operator=(const CalculateRelativePoseRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateRelativePoseRes& operator=(CalculateRelativePoseRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculateRelativePoseRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateRelativePoseRes* internal_default_instance() {
    return reinterpret_cast<const CalculateRelativePoseRes*>(
               &_CalculateRelativePoseRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(CalculateRelativePoseRes* other);
  friend void swap(CalculateRelativePoseRes& a, CalculateRelativePoseRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalculateRelativePoseRes* New() const final {
    return CreateMaybeMessage<CalculateRelativePoseRes>(nullptr);
  }

  CalculateRelativePoseRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculateRelativePoseRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculateRelativePoseRes& from);
  void MergeFrom(const CalculateRelativePoseRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateRelativePoseRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.CalculateRelativePoseRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float relative_pos = 1;
  int relative_pos_size() const;
  void clear_relative_pos();
  static const int kRelativePosFieldNumber = 1;
  float relative_pos(int index) const;
  void set_relative_pos(int index, float value);
  void add_relative_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      relative_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_relative_pos();

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CalculateRelativePoseRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > relative_pos_;
  mutable std::atomic<int> _relative_pos_cached_byte_size_;
  ::Nrmk::IndyFramework::Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CalculateCurrentPoseRelReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CalculateCurrentPoseRelReq) */ {
 public:
  CalculateCurrentPoseRelReq();
  virtual ~CalculateCurrentPoseRelReq();

  CalculateCurrentPoseRelReq(const CalculateCurrentPoseRelReq& from);
  CalculateCurrentPoseRelReq(CalculateCurrentPoseRelReq&& from) noexcept
    : CalculateCurrentPoseRelReq() {
    *this = ::std::move(from);
  }

  inline CalculateCurrentPoseRelReq& operator=(const CalculateCurrentPoseRelReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateCurrentPoseRelReq& operator=(CalculateCurrentPoseRelReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculateCurrentPoseRelReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateCurrentPoseRelReq* internal_default_instance() {
    return reinterpret_cast<const CalculateCurrentPoseRelReq*>(
               &_CalculateCurrentPoseRelReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(CalculateCurrentPoseRelReq* other);
  friend void swap(CalculateCurrentPoseRelReq& a, CalculateCurrentPoseRelReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalculateCurrentPoseRelReq* New() const final {
    return CreateMaybeMessage<CalculateCurrentPoseRelReq>(nullptr);
  }

  CalculateCurrentPoseRelReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculateCurrentPoseRelReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculateCurrentPoseRelReq& from);
  void MergeFrom(const CalculateCurrentPoseRelReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateCurrentPoseRelReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.CalculateCurrentPoseRelReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float current_pos = 1;
  int current_pos_size() const;
  void clear_current_pos();
  static const int kCurrentPosFieldNumber = 1;
  float current_pos(int index) const;
  void set_current_pos(int index, float value);
  void add_current_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      current_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_current_pos();

  // repeated float relative_pos = 2;
  int relative_pos_size() const;
  void clear_relative_pos();
  static const int kRelativePosFieldNumber = 2;
  float relative_pos(int index) const;
  void set_relative_pos(int index, float value);
  void add_relative_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      relative_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_relative_pos();

  // .Nrmk.IndyFramework.TaskBaseType base_type = 3;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 3;
  ::Nrmk::IndyFramework::TaskBaseType base_type() const;
  void set_base_type(::Nrmk::IndyFramework::TaskBaseType value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CalculateCurrentPoseRelReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > current_pos_;
  mutable std::atomic<int> _current_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > relative_pos_;
  mutable std::atomic<int> _relative_pos_cached_byte_size_;
  int base_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CalculateCurrentPoseRelRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.CalculateCurrentPoseRelRes) */ {
 public:
  CalculateCurrentPoseRelRes();
  virtual ~CalculateCurrentPoseRelRes();

  CalculateCurrentPoseRelRes(const CalculateCurrentPoseRelRes& from);
  CalculateCurrentPoseRelRes(CalculateCurrentPoseRelRes&& from) noexcept
    : CalculateCurrentPoseRelRes() {
    *this = ::std::move(from);
  }

  inline CalculateCurrentPoseRelRes& operator=(const CalculateCurrentPoseRelRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateCurrentPoseRelRes& operator=(CalculateCurrentPoseRelRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculateCurrentPoseRelRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateCurrentPoseRelRes* internal_default_instance() {
    return reinterpret_cast<const CalculateCurrentPoseRelRes*>(
               &_CalculateCurrentPoseRelRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(CalculateCurrentPoseRelRes* other);
  friend void swap(CalculateCurrentPoseRelRes& a, CalculateCurrentPoseRelRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalculateCurrentPoseRelRes* New() const final {
    return CreateMaybeMessage<CalculateCurrentPoseRelRes>(nullptr);
  }

  CalculateCurrentPoseRelRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculateCurrentPoseRelRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculateCurrentPoseRelRes& from);
  void MergeFrom(const CalculateCurrentPoseRelRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateCurrentPoseRelRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.CalculateCurrentPoseRelRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float calculated_pos = 1;
  int calculated_pos_size() const;
  void clear_calculated_pos();
  static const int kCalculatedPosFieldNumber = 1;
  float calculated_pos(int index) const;
  void set_calculated_pos(int index, float value);
  void add_calculated_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      calculated_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_calculated_pos();

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.CalculateCurrentPoseRelRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > calculated_pos_;
  mutable std::atomic<int> _calculated_pos_cached_byte_size_;
  ::Nrmk::IndyFramework::Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TeleOpDevice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TeleOpDevice) */ {
 public:
  TeleOpDevice();
  virtual ~TeleOpDevice();

  TeleOpDevice(const TeleOpDevice& from);
  TeleOpDevice(TeleOpDevice&& from) noexcept
    : TeleOpDevice() {
    *this = ::std::move(from);
  }

  inline TeleOpDevice& operator=(const TeleOpDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleOpDevice& operator=(TeleOpDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeleOpDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleOpDevice* internal_default_instance() {
    return reinterpret_cast<const TeleOpDevice*>(
               &_TeleOpDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(TeleOpDevice* other);
  friend void swap(TeleOpDevice& a, TeleOpDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeleOpDevice* New() const final {
    return CreateMaybeMessage<TeleOpDevice>(nullptr);
  }

  TeleOpDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeleOpDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeleOpDevice& from);
  void MergeFrom(const TeleOpDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleOpDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TeleOpDevice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TeleOpDevice_TeleOpDeviceType TeleOpDeviceType;
  static constexpr TeleOpDeviceType NONE =
    TeleOpDevice_TeleOpDeviceType_NONE;
  static constexpr TeleOpDeviceType VIVE =
    TeleOpDevice_TeleOpDeviceType_VIVE;
  static inline bool TeleOpDeviceType_IsValid(int value) {
    return TeleOpDevice_TeleOpDeviceType_IsValid(value);
  }
  static constexpr TeleOpDeviceType TeleOpDeviceType_MIN =
    TeleOpDevice_TeleOpDeviceType_TeleOpDeviceType_MIN;
  static constexpr TeleOpDeviceType TeleOpDeviceType_MAX =
    TeleOpDevice_TeleOpDeviceType_TeleOpDeviceType_MAX;
  static constexpr int TeleOpDeviceType_ARRAYSIZE =
    TeleOpDevice_TeleOpDeviceType_TeleOpDeviceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TeleOpDeviceType_descriptor() {
    return TeleOpDevice_TeleOpDeviceType_descriptor();
  }
  template<typename T>
  static inline const std::string& TeleOpDeviceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TeleOpDeviceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TeleOpDeviceType_Name.");
    return TeleOpDevice_TeleOpDeviceType_Name(enum_t_value);
  }
  static inline bool TeleOpDeviceType_Parse(const std::string& name,
      TeleOpDeviceType* value) {
    return TeleOpDevice_TeleOpDeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // .Nrmk.IndyFramework.TeleOpDevice.TeleOpDeviceType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType type() const;
  void set_type(::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType value);

  // uint32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool connected = 5;
  void clear_connected();
  static const int kConnectedFieldNumber = 5;
  bool connected() const;
  void set_connected(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TeleOpDevice)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  bool connected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TeleOpState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TeleOpState) */ {
 public:
  TeleOpState();
  virtual ~TeleOpState();

  TeleOpState(const TeleOpState& from);
  TeleOpState(TeleOpState&& from) noexcept
    : TeleOpState() {
    *this = ::std::move(from);
  }

  inline TeleOpState& operator=(const TeleOpState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleOpState& operator=(TeleOpState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeleOpState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleOpState* internal_default_instance() {
    return reinterpret_cast<const TeleOpState*>(
               &_TeleOpState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(TeleOpState* other);
  friend void swap(TeleOpState& a, TeleOpState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeleOpState* New() const final {
    return CreateMaybeMessage<TeleOpState>(nullptr);
  }

  TeleOpState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeleOpState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeleOpState& from);
  void MergeFrom(const TeleOpState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleOpState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TeleOpState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.TeleMode mode = 1;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  ::Nrmk::IndyFramework::TeleMode mode() const;
  void set_mode(::Nrmk::IndyFramework::TeleMode value);

  // .Nrmk.IndyFramework.TeleMethod method = 2;
  void clear_method();
  static const int kMethodFieldNumber = 2;
  ::Nrmk::IndyFramework::TeleMethod method() const;
  void set_method(::Nrmk::IndyFramework::TeleMethod value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TeleOpState)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int mode_;
  int method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TeleP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TeleP) */ {
 public:
  TeleP();
  virtual ~TeleP();

  TeleP(const TeleP& from);
  TeleP(TeleP&& from) noexcept
    : TeleP() {
    *this = ::std::move(from);
  }

  inline TeleP& operator=(const TeleP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleP& operator=(TeleP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeleP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleP* internal_default_instance() {
    return reinterpret_cast<const TeleP*>(
               &_TeleP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(TeleP* other);
  friend void swap(TeleP& a, TeleP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeleP* New() const final {
    return CreateMaybeMessage<TeleP>(nullptr);
  }

  TeleP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeleP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeleP& from);
  void MergeFrom(const TeleP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TeleP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos = 1;
  int tpos_size() const;
  void clear_tpos();
  static const int kTposFieldNumber = 1;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos();

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TeleP)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos_;
  mutable std::atomic<int> _tpos_cached_byte_size_;
  ::Nrmk::IndyFramework::Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TeleOpFileList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TeleOpFileList) */ {
 public:
  TeleOpFileList();
  virtual ~TeleOpFileList();

  TeleOpFileList(const TeleOpFileList& from);
  TeleOpFileList(TeleOpFileList&& from) noexcept
    : TeleOpFileList() {
    *this = ::std::move(from);
  }

  inline TeleOpFileList& operator=(const TeleOpFileList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleOpFileList& operator=(TeleOpFileList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeleOpFileList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleOpFileList* internal_default_instance() {
    return reinterpret_cast<const TeleOpFileList*>(
               &_TeleOpFileList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(TeleOpFileList* other);
  friend void swap(TeleOpFileList& a, TeleOpFileList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeleOpFileList* New() const final {
    return CreateMaybeMessage<TeleOpFileList>(nullptr);
  }

  TeleOpFileList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeleOpFileList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeleOpFileList& from);
  void MergeFrom(const TeleOpFileList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleOpFileList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TeleOpFileList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string files = 1;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 1;
  const std::string& files(int index) const;
  std::string* mutable_files(int index);
  void set_files(int index, const std::string& value);
  void set_files(int index, std::string&& value);
  void set_files(int index, const char* value);
  void set_files(int index, const char* value, size_t size);
  std::string* add_files();
  void add_files(const std::string& value);
  void add_files(std::string&& value);
  void add_files(const char* value);
  void add_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_files();

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TeleOpFileList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> files_;
  ::Nrmk::IndyFramework::Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TeleFileReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TeleFileReq) */ {
 public:
  TeleFileReq();
  virtual ~TeleFileReq();

  TeleFileReq(const TeleFileReq& from);
  TeleFileReq(TeleFileReq&& from) noexcept
    : TeleFileReq() {
    *this = ::std::move(from);
  }

  inline TeleFileReq& operator=(const TeleFileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleFileReq& operator=(TeleFileReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeleFileReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleFileReq* internal_default_instance() {
    return reinterpret_cast<const TeleFileReq*>(
               &_TeleFileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(TeleFileReq* other);
  friend void swap(TeleFileReq& a, TeleFileReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeleFileReq* New() const final {
    return CreateMaybeMessage<TeleFileReq>(nullptr);
  }

  TeleFileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeleFileReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeleFileReq& from);
  void MergeFrom(const TeleFileReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleFileReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TeleFileReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TeleFileReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TelePlayRate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TelePlayRate) */ {
 public:
  TelePlayRate();
  virtual ~TelePlayRate();

  TelePlayRate(const TelePlayRate& from);
  TelePlayRate(TelePlayRate&& from) noexcept
    : TelePlayRate() {
    *this = ::std::move(from);
  }

  inline TelePlayRate& operator=(const TelePlayRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelePlayRate& operator=(TelePlayRate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TelePlayRate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TelePlayRate* internal_default_instance() {
    return reinterpret_cast<const TelePlayRate*>(
               &_TelePlayRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(TelePlayRate* other);
  friend void swap(TelePlayRate& a, TelePlayRate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TelePlayRate* New() const final {
    return CreateMaybeMessage<TelePlayRate>(nullptr);
  }

  TelePlayRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TelePlayRate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TelePlayRate& from);
  void MergeFrom(const TelePlayRate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelePlayRate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TelePlayRate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float rate = 1;
  void clear_rate();
  static const int kRateFieldNumber = 1;
  float rate() const;
  void set_rate(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TelePlayRate)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveTeleJReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveTeleJReq) */ {
 public:
  MoveTeleJReq();
  virtual ~MoveTeleJReq();

  MoveTeleJReq(const MoveTeleJReq& from);
  MoveTeleJReq(MoveTeleJReq&& from) noexcept
    : MoveTeleJReq() {
    *this = ::std::move(from);
  }

  inline MoveTeleJReq& operator=(const MoveTeleJReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveTeleJReq& operator=(MoveTeleJReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveTeleJReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveTeleJReq* internal_default_instance() {
    return reinterpret_cast<const MoveTeleJReq*>(
               &_MoveTeleJReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(MoveTeleJReq* other);
  friend void swap(MoveTeleJReq& a, MoveTeleJReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveTeleJReq* New() const final {
    return CreateMaybeMessage<MoveTeleJReq>(nullptr);
  }

  MoveTeleJReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveTeleJReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveTeleJReq& from);
  void MergeFrom(const MoveTeleJReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveTeleJReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveTeleJReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float jpos = 1;
  int jpos_size() const;
  void clear_jpos();
  static const int kJposFieldNumber = 1;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_jpos();

  // float vel_ratio = 2;
  void clear_vel_ratio();
  static const int kVelRatioFieldNumber = 2;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  // float acc_ratio = 3;
  void clear_acc_ratio();
  static const int kAccRatioFieldNumber = 3;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  // .Nrmk.IndyFramework.TeleMethod method = 10;
  void clear_method();
  static const int kMethodFieldNumber = 10;
  ::Nrmk::IndyFramework::TeleMethod method() const;
  void set_method(::Nrmk::IndyFramework::TeleMethod value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveTeleJReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > jpos_;
  mutable std::atomic<int> _jpos_cached_byte_size_;
  float vel_ratio_;
  float acc_ratio_;
  int method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveTeleLReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveTeleLReq) */ {
 public:
  MoveTeleLReq();
  virtual ~MoveTeleLReq();

  MoveTeleLReq(const MoveTeleLReq& from);
  MoveTeleLReq(MoveTeleLReq&& from) noexcept
    : MoveTeleLReq() {
    *this = ::std::move(from);
  }

  inline MoveTeleLReq& operator=(const MoveTeleLReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveTeleLReq& operator=(MoveTeleLReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveTeleLReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveTeleLReq* internal_default_instance() {
    return reinterpret_cast<const MoveTeleLReq*>(
               &_MoveTeleLReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(MoveTeleLReq* other);
  friend void swap(MoveTeleLReq& a, MoveTeleLReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveTeleLReq* New() const final {
    return CreateMaybeMessage<MoveTeleLReq>(nullptr);
  }

  MoveTeleLReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveTeleLReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveTeleLReq& from);
  void MergeFrom(const MoveTeleLReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveTeleLReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveTeleLReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos = 1;
  int tpos_size() const;
  void clear_tpos();
  static const int kTposFieldNumber = 1;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos();

  // float vel_ratio = 2;
  void clear_vel_ratio();
  static const int kVelRatioFieldNumber = 2;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  // float acc_ratio = 3;
  void clear_acc_ratio();
  static const int kAccRatioFieldNumber = 3;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  // .Nrmk.IndyFramework.TeleMethod method = 10;
  void clear_method();
  static const int kMethodFieldNumber = 10;
  ::Nrmk::IndyFramework::TeleMethod method() const;
  void set_method(::Nrmk::IndyFramework::TeleMethod value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveTeleLReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos_;
  mutable std::atomic<int> _tpos_cached_byte_size_;
  float vel_ratio_;
  float acc_ratio_;
  int method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveLFReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveLFReq) */ {
 public:
  MoveLFReq();
  virtual ~MoveLFReq();

  MoveLFReq(const MoveLFReq& from);
  MoveLFReq(MoveLFReq&& from) noexcept
    : MoveLFReq() {
    *this = ::std::move(from);
  }

  inline MoveLFReq& operator=(const MoveLFReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveLFReq& operator=(MoveLFReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveLFReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveLFReq* internal_default_instance() {
    return reinterpret_cast<const MoveLFReq*>(
               &_MoveLFReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(MoveLFReq* other);
  friend void swap(MoveLFReq& a, MoveLFReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveLFReq* New() const final {
    return CreateMaybeMessage<MoveLFReq>(nullptr);
  }

  MoveLFReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveLFReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveLFReq& from);
  void MergeFrom(const MoveLFReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveLFReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveLFReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float des_force = 6;
  int des_force_size() const;
  void clear_des_force();
  static const int kDesForceFieldNumber = 6;
  float des_force(int index) const;
  void set_des_force(int index, float value);
  void add_des_force(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      des_force() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_des_force();

  // repeated bool enabled_force = 7;
  int enabled_force_size() const;
  void clear_enabled_force();
  static const int kEnabledForceFieldNumber = 7;
  bool enabled_force(int index) const;
  void set_enabled_force(int index, bool value);
  void add_enabled_force(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      enabled_force() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_enabled_force();

  // .Nrmk.IndyFramework.TargetP target = 1;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  const ::Nrmk::IndyFramework::TargetP& target() const;
  ::Nrmk::IndyFramework::TargetP* release_target();
  ::Nrmk::IndyFramework::TargetP* mutable_target();
  void set_allocated_target(::Nrmk::IndyFramework::TargetP* target);

  // .Nrmk.IndyFramework.BlendingType blending = 2;
  bool has_blending() const;
  void clear_blending();
  static const int kBlendingFieldNumber = 2;
  const ::Nrmk::IndyFramework::BlendingType& blending() const;
  ::Nrmk::IndyFramework::BlendingType* release_blending();
  ::Nrmk::IndyFramework::BlendingType* mutable_blending();
  void set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending);

  // .Nrmk.IndyFramework.MotionCondition post_condition = 20;
  bool has_post_condition() const;
  void clear_post_condition();
  static const int kPostConditionFieldNumber = 20;
  const ::Nrmk::IndyFramework::MotionCondition& post_condition() const;
  ::Nrmk::IndyFramework::MotionCondition* release_post_condition();
  ::Nrmk::IndyFramework::MotionCondition* mutable_post_condition();
  void set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition);

  // float vel_ratio = 3;
  void clear_vel_ratio();
  static const int kVelRatioFieldNumber = 3;
  float vel_ratio() const;
  void set_vel_ratio(float value);

  // float acc_ratio = 4;
  void clear_acc_ratio();
  static const int kAccRatioFieldNumber = 4;
  float acc_ratio() const;
  void set_acc_ratio(float value);

  // .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
  void clear_vel_type();
  static const int kVelTypeFieldNumber = 5;
  ::Nrmk::IndyFramework::VelocityModeType vel_type() const;
  void set_vel_type(::Nrmk::IndyFramework::VelocityModeType value);

  // bool teaching_mode = 30;
  void clear_teaching_mode();
  static const int kTeachingModeFieldNumber = 30;
  bool teaching_mode() const;
  void set_teaching_mode(bool value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveLFReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > des_force_;
  mutable std::atomic<int> _des_force_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > enabled_force_;
  mutable std::atomic<int> _enabled_force_cached_byte_size_;
  ::Nrmk::IndyFramework::TargetP* target_;
  ::Nrmk::IndyFramework::BlendingType* blending_;
  ::Nrmk::IndyFramework::MotionCondition* post_condition_;
  float vel_ratio_;
  float acc_ratio_;
  int vel_type_;
  bool teaching_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveFLRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.MoveFLRes) */ {
 public:
  MoveFLRes();
  virtual ~MoveFLRes();

  MoveFLRes(const MoveFLRes& from);
  MoveFLRes(MoveFLRes&& from) noexcept
    : MoveFLRes() {
    *this = ::std::move(from);
  }

  inline MoveFLRes& operator=(const MoveFLRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveFLRes& operator=(MoveFLRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveFLRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveFLRes* internal_default_instance() {
    return reinterpret_cast<const MoveFLRes*>(
               &_MoveFLRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(MoveFLRes* other);
  friend void swap(MoveFLRes& a, MoveFLRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveFLRes* New() const final {
    return CreateMaybeMessage<MoveFLRes>(nullptr);
  }

  MoveFLRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveFLRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveFLRes& from);
  void MergeFrom(const MoveFLRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveFLRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.MoveFLRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.MoveFLRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TransformedFTSensorData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Nrmk.IndyFramework.TransformedFTSensorData) */ {
 public:
  TransformedFTSensorData();
  virtual ~TransformedFTSensorData();

  TransformedFTSensorData(const TransformedFTSensorData& from);
  TransformedFTSensorData(TransformedFTSensorData&& from) noexcept
    : TransformedFTSensorData() {
    *this = ::std::move(from);
  }

  inline TransformedFTSensorData& operator=(const TransformedFTSensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformedFTSensorData& operator=(TransformedFTSensorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransformedFTSensorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformedFTSensorData* internal_default_instance() {
    return reinterpret_cast<const TransformedFTSensorData*>(
               &_TransformedFTSensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void Swap(TransformedFTSensorData* other);
  friend void swap(TransformedFTSensorData& a, TransformedFTSensorData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransformedFTSensorData* New() const final {
    return CreateMaybeMessage<TransformedFTSensorData>(nullptr);
  }

  TransformedFTSensorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransformedFTSensorData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransformedFTSensorData& from);
  void MergeFrom(const TransformedFTSensorData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformedFTSensorData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Nrmk.IndyFramework.TransformedFTSensorData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Nrmk.IndyFramework.Response response = 100;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 100;
  const ::Nrmk::IndyFramework::Response& response() const;
  ::Nrmk::IndyFramework::Response* release_response();
  ::Nrmk::IndyFramework::Response* mutable_response();
  void set_allocated_response(::Nrmk::IndyFramework::Response* response);

  // float ft_Fx = 1;
  void clear_ft_fx();
  static const int kFtFxFieldNumber = 1;
  float ft_fx() const;
  void set_ft_fx(float value);

  // float ft_Fy = 2;
  void clear_ft_fy();
  static const int kFtFyFieldNumber = 2;
  float ft_fy() const;
  void set_ft_fy(float value);

  // float ft_Fz = 3;
  void clear_ft_fz();
  static const int kFtFzFieldNumber = 3;
  float ft_fz() const;
  void set_ft_fz(float value);

  // float ft_Tx = 4;
  void clear_ft_tx();
  static const int kFtTxFieldNumber = 4;
  float ft_tx() const;
  void set_ft_tx(float value);

  // float ft_Ty = 5;
  void clear_ft_ty();
  static const int kFtTyFieldNumber = 5;
  float ft_ty() const;
  void set_ft_ty(float value);

  // float ft_Tz = 6;
  void clear_ft_tz();
  static const int kFtTzFieldNumber = 6;
  float ft_tz() const;
  void set_ft_tz(float value);

  // @@protoc_insertion_point(class_scope:Nrmk.IndyFramework.TransformedFTSensorData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Nrmk::IndyFramework::Response* response_;
  float ft_fx_;
  float ft_fy_;
  float ft_fz_;
  float ft_tx_;
  float ft_ty_;
  float ft_tz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlInfo

// string control_version = 1;
inline void ControlInfo::clear_control_version() {
  control_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ControlInfo::control_version() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlInfo.control_version)
  return control_version_.GetNoArena();
}
inline void ControlInfo::set_control_version(const std::string& value) {
  
  control_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlInfo.control_version)
}
inline void ControlInfo::set_control_version(std::string&& value) {
  
  control_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.ControlInfo.control_version)
}
inline void ControlInfo::set_control_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  control_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.ControlInfo.control_version)
}
inline void ControlInfo::set_control_version(const char* value, size_t size) {
  
  control_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.ControlInfo.control_version)
}
inline std::string* ControlInfo::mutable_control_version() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ControlInfo.control_version)
  return control_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ControlInfo::release_control_version() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ControlInfo.control_version)
  
  return control_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ControlInfo::set_allocated_control_version(std::string* control_version) {
  if (control_version != nullptr) {
    
  } else {
    
  }
  control_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), control_version);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ControlInfo.control_version)
}

// string robot_model = 2;
inline void ControlInfo::clear_robot_model() {
  robot_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ControlInfo::robot_model() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlInfo.robot_model)
  return robot_model_.GetNoArena();
}
inline void ControlInfo::set_robot_model(const std::string& value) {
  
  robot_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ControlInfo.robot_model)
}
inline void ControlInfo::set_robot_model(std::string&& value) {
  
  robot_model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.ControlInfo.robot_model)
}
inline void ControlInfo::set_robot_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.ControlInfo.robot_model)
}
inline void ControlInfo::set_robot_model(const char* value, size_t size) {
  
  robot_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.ControlInfo.robot_model)
}
inline std::string* ControlInfo::mutable_robot_model() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ControlInfo.robot_model)
  return robot_model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ControlInfo::release_robot_model() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ControlInfo.robot_model)
  
  return robot_model_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ControlInfo::set_allocated_robot_model(std::string* robot_model) {
  if (robot_model != nullptr) {
    
  } else {
    
  }
  robot_model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_model);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ControlInfo.robot_model)
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ControlInfo::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& ControlInfo::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ControlInfo.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* ControlInfo::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ControlInfo.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ControlInfo::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ControlInfo.response)
  return response_;
}
inline void ControlInfo::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ControlInfo.response)
}

// -------------------------------------------------------------------

// SDKLicenseInfo

// string license_key = 1;
inline void SDKLicenseInfo::clear_license_key() {
  license_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SDKLicenseInfo::license_key() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SDKLicenseInfo.license_key)
  return license_key_.GetNoArena();
}
inline void SDKLicenseInfo::set_license_key(const std::string& value) {
  
  license_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SDKLicenseInfo.license_key)
}
inline void SDKLicenseInfo::set_license_key(std::string&& value) {
  
  license_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.SDKLicenseInfo.license_key)
}
inline void SDKLicenseInfo::set_license_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  license_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.SDKLicenseInfo.license_key)
}
inline void SDKLicenseInfo::set_license_key(const char* value, size_t size) {
  
  license_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.SDKLicenseInfo.license_key)
}
inline std::string* SDKLicenseInfo::mutable_license_key() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.SDKLicenseInfo.license_key)
  return license_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SDKLicenseInfo::release_license_key() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.SDKLicenseInfo.license_key)
  
  return license_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SDKLicenseInfo::set_allocated_license_key(std::string* license_key) {
  if (license_key != nullptr) {
    
  } else {
    
  }
  license_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), license_key);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.SDKLicenseInfo.license_key)
}

// string expire_date = 2;
inline void SDKLicenseInfo::clear_expire_date() {
  expire_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SDKLicenseInfo::expire_date() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SDKLicenseInfo.expire_date)
  return expire_date_.GetNoArena();
}
inline void SDKLicenseInfo::set_expire_date(const std::string& value) {
  
  expire_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SDKLicenseInfo.expire_date)
}
inline void SDKLicenseInfo::set_expire_date(std::string&& value) {
  
  expire_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.SDKLicenseInfo.expire_date)
}
inline void SDKLicenseInfo::set_expire_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expire_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.SDKLicenseInfo.expire_date)
}
inline void SDKLicenseInfo::set_expire_date(const char* value, size_t size) {
  
  expire_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.SDKLicenseInfo.expire_date)
}
inline std::string* SDKLicenseInfo::mutable_expire_date() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.SDKLicenseInfo.expire_date)
  return expire_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SDKLicenseInfo::release_expire_date() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.SDKLicenseInfo.expire_date)
  
  return expire_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SDKLicenseInfo::set_allocated_expire_date(std::string* expire_date) {
  if (expire_date != nullptr) {
    
  } else {
    
  }
  expire_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expire_date);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.SDKLicenseInfo.expire_date)
}

// -------------------------------------------------------------------

// SDKLicenseResp

// bool activated = 1;
inline void SDKLicenseResp::clear_activated() {
  activated_ = false;
}
inline bool SDKLicenseResp::activated() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SDKLicenseResp.activated)
  return activated_;
}
inline void SDKLicenseResp::set_activated(bool value) {
  
  activated_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.SDKLicenseResp.activated)
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool SDKLicenseResp::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& SDKLicenseResp::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.SDKLicenseResp.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* SDKLicenseResp::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.SDKLicenseResp.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* SDKLicenseResp::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.SDKLicenseResp.response)
  return response_;
}
inline void SDKLicenseResp::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.SDKLicenseResp.response)
}

// -------------------------------------------------------------------

// VariableCondition

// repeated .Nrmk.IndyFramework.IntVariable i_vars = 1;
inline int VariableCondition::i_vars_size() const {
  return i_vars_.size();
}
inline void VariableCondition::clear_i_vars() {
  i_vars_.Clear();
}
inline ::Nrmk::IndyFramework::IntVariable* VariableCondition::mutable_i_vars(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.VariableCondition.i_vars)
  return i_vars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >*
VariableCondition::mutable_i_vars() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.VariableCondition.i_vars)
  return &i_vars_;
}
inline const ::Nrmk::IndyFramework::IntVariable& VariableCondition::i_vars(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VariableCondition.i_vars)
  return i_vars_.Get(index);
}
inline ::Nrmk::IndyFramework::IntVariable* VariableCondition::add_i_vars() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.VariableCondition.i_vars)
  return i_vars_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >&
VariableCondition::i_vars() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.VariableCondition.i_vars)
  return i_vars_;
}

// repeated .Nrmk.IndyFramework.FloatVariable f_vars = 2;
inline int VariableCondition::f_vars_size() const {
  return f_vars_.size();
}
inline void VariableCondition::clear_f_vars() {
  f_vars_.Clear();
}
inline ::Nrmk::IndyFramework::FloatVariable* VariableCondition::mutable_f_vars(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.VariableCondition.f_vars)
  return f_vars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >*
VariableCondition::mutable_f_vars() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.VariableCondition.f_vars)
  return &f_vars_;
}
inline const ::Nrmk::IndyFramework::FloatVariable& VariableCondition::f_vars(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VariableCondition.f_vars)
  return f_vars_.Get(index);
}
inline ::Nrmk::IndyFramework::FloatVariable* VariableCondition::add_f_vars() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.VariableCondition.f_vars)
  return f_vars_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >&
VariableCondition::f_vars() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.VariableCondition.f_vars)
  return f_vars_;
}

// repeated .Nrmk.IndyFramework.BoolVariable b_vars = 3;
inline int VariableCondition::b_vars_size() const {
  return b_vars_.size();
}
inline void VariableCondition::clear_b_vars() {
  b_vars_.Clear();
}
inline ::Nrmk::IndyFramework::BoolVariable* VariableCondition::mutable_b_vars(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.VariableCondition.b_vars)
  return b_vars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >*
VariableCondition::mutable_b_vars() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.VariableCondition.b_vars)
  return &b_vars_;
}
inline const ::Nrmk::IndyFramework::BoolVariable& VariableCondition::b_vars(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VariableCondition.b_vars)
  return b_vars_.Get(index);
}
inline ::Nrmk::IndyFramework::BoolVariable* VariableCondition::add_b_vars() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.VariableCondition.b_vars)
  return b_vars_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >&
VariableCondition::b_vars() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.VariableCondition.b_vars)
  return b_vars_;
}

// repeated .Nrmk.IndyFramework.ModbusVariable m_vars = 4;
inline int VariableCondition::m_vars_size() const {
  return m_vars_.size();
}
inline void VariableCondition::clear_m_vars() {
  m_vars_.Clear();
}
inline ::Nrmk::IndyFramework::ModbusVariable* VariableCondition::mutable_m_vars(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.VariableCondition.m_vars)
  return m_vars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >*
VariableCondition::mutable_m_vars() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.VariableCondition.m_vars)
  return &m_vars_;
}
inline const ::Nrmk::IndyFramework::ModbusVariable& VariableCondition::m_vars(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VariableCondition.m_vars)
  return m_vars_.Get(index);
}
inline ::Nrmk::IndyFramework::ModbusVariable* VariableCondition::add_m_vars() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.VariableCondition.m_vars)
  return m_vars_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >&
VariableCondition::m_vars() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.VariableCondition.m_vars)
  return m_vars_;
}

// repeated .Nrmk.IndyFramework.JPosVariable j_vars = 5;
inline int VariableCondition::j_vars_size() const {
  return j_vars_.size();
}
inline void VariableCondition::clear_j_vars() {
  j_vars_.Clear();
}
inline ::Nrmk::IndyFramework::JPosVariable* VariableCondition::mutable_j_vars(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.VariableCondition.j_vars)
  return j_vars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >*
VariableCondition::mutable_j_vars() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.VariableCondition.j_vars)
  return &j_vars_;
}
inline const ::Nrmk::IndyFramework::JPosVariable& VariableCondition::j_vars(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VariableCondition.j_vars)
  return j_vars_.Get(index);
}
inline ::Nrmk::IndyFramework::JPosVariable* VariableCondition::add_j_vars() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.VariableCondition.j_vars)
  return j_vars_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >&
VariableCondition::j_vars() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.VariableCondition.j_vars)
  return j_vars_;
}

// repeated .Nrmk.IndyFramework.TPosVariable t_vars = 6;
inline int VariableCondition::t_vars_size() const {
  return t_vars_.size();
}
inline void VariableCondition::clear_t_vars() {
  t_vars_.Clear();
}
inline ::Nrmk::IndyFramework::TPosVariable* VariableCondition::mutable_t_vars(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.VariableCondition.t_vars)
  return t_vars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >*
VariableCondition::mutable_t_vars() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.VariableCondition.t_vars)
  return &t_vars_;
}
inline const ::Nrmk::IndyFramework::TPosVariable& VariableCondition::t_vars(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.VariableCondition.t_vars)
  return t_vars_.Get(index);
}
inline ::Nrmk::IndyFramework::TPosVariable* VariableCondition::add_t_vars() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.VariableCondition.t_vars)
  return t_vars_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >&
VariableCondition::t_vars() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.VariableCondition.t_vars)
  return t_vars_;
}

// -------------------------------------------------------------------

// IOCondition

// repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
inline int IOCondition::di_size() const {
  return di_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOCondition::mutable_di(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOCondition.di)
  return di_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
IOCondition::mutable_di() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOCondition.di)
  return &di_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& IOCondition::di(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOCondition.di)
  return di_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOCondition::add_di() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOCondition.di)
  return di_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
IOCondition::di() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOCondition.di)
  return di_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal end_di = 2;
inline int IOCondition::end_di_size() const {
  return end_di_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOCondition::mutable_end_di(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IOCondition.end_di)
  return end_di_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
IOCondition::mutable_end_di() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IOCondition.end_di)
  return &end_di_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& IOCondition::end_di(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IOCondition.end_di)
  return end_di_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* IOCondition::add_end_di() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IOCondition.end_di)
  return end_di_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
IOCondition::end_di() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IOCondition.end_di)
  return end_di_;
}

// -------------------------------------------------------------------

// MotionCondition

// .Nrmk.IndyFramework.MotionCondition.ConditionType type_cond = 1;
inline void MotionCondition::clear_type_cond() {
  type_cond_ = 0;
}
inline ::Nrmk::IndyFramework::MotionCondition_ConditionType MotionCondition::type_cond() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionCondition.type_cond)
  return static_cast< ::Nrmk::IndyFramework::MotionCondition_ConditionType >(type_cond_);
}
inline void MotionCondition::set_type_cond(::Nrmk::IndyFramework::MotionCondition_ConditionType value) {
  
  type_cond_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionCondition.type_cond)
}

// .Nrmk.IndyFramework.MotionCondition.ReactionType type_react = 2;
inline void MotionCondition::clear_type_react() {
  type_react_ = 0;
}
inline ::Nrmk::IndyFramework::MotionCondition_ReactionType MotionCondition::type_react() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionCondition.type_react)
  return static_cast< ::Nrmk::IndyFramework::MotionCondition_ReactionType >(type_react_);
}
inline void MotionCondition::set_type_react(::Nrmk::IndyFramework::MotionCondition_ReactionType value) {
  
  type_react_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionCondition.type_react)
}

// bool const_cond = 3;
inline void MotionCondition::clear_const_cond() {
  const_cond_ = false;
}
inline bool MotionCondition::const_cond() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionCondition.const_cond)
  return const_cond_;
}
inline void MotionCondition::set_const_cond(bool value) {
  
  const_cond_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MotionCondition.const_cond)
}

// .Nrmk.IndyFramework.IOCondition io_cond = 4;
inline bool MotionCondition::has_io_cond() const {
  return this != internal_default_instance() && io_cond_ != nullptr;
}
inline void MotionCondition::clear_io_cond() {
  if (GetArenaNoVirtual() == nullptr && io_cond_ != nullptr) {
    delete io_cond_;
  }
  io_cond_ = nullptr;
}
inline const ::Nrmk::IndyFramework::IOCondition& MotionCondition::io_cond() const {
  const ::Nrmk::IndyFramework::IOCondition* p = io_cond_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionCondition.io_cond)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::IOCondition*>(
      &::Nrmk::IndyFramework::_IOCondition_default_instance_);
}
inline ::Nrmk::IndyFramework::IOCondition* MotionCondition::release_io_cond() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MotionCondition.io_cond)
  
  ::Nrmk::IndyFramework::IOCondition* temp = io_cond_;
  io_cond_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::IOCondition* MotionCondition::mutable_io_cond() {
  
  if (io_cond_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::IOCondition>(GetArenaNoVirtual());
    io_cond_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MotionCondition.io_cond)
  return io_cond_;
}
inline void MotionCondition::set_allocated_io_cond(::Nrmk::IndyFramework::IOCondition* io_cond) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete io_cond_;
  }
  if (io_cond) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      io_cond = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, io_cond, submessage_arena);
    }
    
  } else {
    
  }
  io_cond_ = io_cond;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MotionCondition.io_cond)
}

// .Nrmk.IndyFramework.VariableCondition var_cond = 5;
inline bool MotionCondition::has_var_cond() const {
  return this != internal_default_instance() && var_cond_ != nullptr;
}
inline void MotionCondition::clear_var_cond() {
  if (GetArenaNoVirtual() == nullptr && var_cond_ != nullptr) {
    delete var_cond_;
  }
  var_cond_ = nullptr;
}
inline const ::Nrmk::IndyFramework::VariableCondition& MotionCondition::var_cond() const {
  const ::Nrmk::IndyFramework::VariableCondition* p = var_cond_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MotionCondition.var_cond)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::VariableCondition*>(
      &::Nrmk::IndyFramework::_VariableCondition_default_instance_);
}
inline ::Nrmk::IndyFramework::VariableCondition* MotionCondition::release_var_cond() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MotionCondition.var_cond)
  
  ::Nrmk::IndyFramework::VariableCondition* temp = var_cond_;
  var_cond_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::VariableCondition* MotionCondition::mutable_var_cond() {
  
  if (var_cond_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::VariableCondition>(GetArenaNoVirtual());
    var_cond_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MotionCondition.var_cond)
  return var_cond_;
}
inline void MotionCondition::set_allocated_var_cond(::Nrmk::IndyFramework::VariableCondition* var_cond) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete var_cond_;
  }
  if (var_cond) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      var_cond = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_cond, submessage_arena);
    }
    
  } else {
    
  }
  var_cond_ = var_cond;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MotionCondition.var_cond)
}

// -------------------------------------------------------------------

// BlendingType

// .Nrmk.IndyFramework.BlendingType.Type type = 1;
inline void BlendingType::clear_type() {
  type_ = 0;
}
inline ::Nrmk::IndyFramework::BlendingType_Type BlendingType::type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BlendingType.type)
  return static_cast< ::Nrmk::IndyFramework::BlendingType_Type >(type_);
}
inline void BlendingType::set_type(::Nrmk::IndyFramework::BlendingType_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BlendingType.type)
}

// float blending_radius = 2;
inline void BlendingType::clear_blending_radius() {
  blending_radius_ = 0;
}
inline float BlendingType::blending_radius() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BlendingType.blending_radius)
  return blending_radius_;
}
inline void BlendingType::set_blending_radius(float value) {
  
  blending_radius_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BlendingType.blending_radius)
}

// -------------------------------------------------------------------

// TargetJ

// repeated float j_start = 1;
inline int TargetJ::j_start_size() const {
  return j_start_.size();
}
inline void TargetJ::clear_j_start() {
  j_start_.Clear();
}
inline float TargetJ::j_start(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetJ.j_start)
  return j_start_.Get(index);
}
inline void TargetJ::set_j_start(int index, float value) {
  j_start_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetJ.j_start)
}
inline void TargetJ::add_j_start(float value) {
  j_start_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TargetJ.j_start)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TargetJ::j_start() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TargetJ.j_start)
  return j_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TargetJ::mutable_j_start() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TargetJ.j_start)
  return &j_start_;
}

// repeated float j_target = 2;
inline int TargetJ::j_target_size() const {
  return j_target_.size();
}
inline void TargetJ::clear_j_target() {
  j_target_.Clear();
}
inline float TargetJ::j_target(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetJ.j_target)
  return j_target_.Get(index);
}
inline void TargetJ::set_j_target(int index, float value) {
  j_target_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetJ.j_target)
}
inline void TargetJ::add_j_target(float value) {
  j_target_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TargetJ.j_target)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TargetJ::j_target() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TargetJ.j_target)
  return j_target_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TargetJ::mutable_j_target() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TargetJ.j_target)
  return &j_target_;
}

// .Nrmk.IndyFramework.JointBaseType base_type = 3;
inline void TargetJ::clear_base_type() {
  base_type_ = 0;
}
inline ::Nrmk::IndyFramework::JointBaseType TargetJ::base_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetJ.base_type)
  return static_cast< ::Nrmk::IndyFramework::JointBaseType >(base_type_);
}
inline void TargetJ::set_base_type(::Nrmk::IndyFramework::JointBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetJ.base_type)
}

// -------------------------------------------------------------------

// MoveJReq

// .Nrmk.IndyFramework.TargetJ target = 1;
inline bool MoveJReq::has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline void MoveJReq::clear_target() {
  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::Nrmk::IndyFramework::TargetJ& MoveJReq::target() const {
  const ::Nrmk::IndyFramework::TargetJ* p = target_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJReq.target)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::TargetJ*>(
      &::Nrmk::IndyFramework::_TargetJ_default_instance_);
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJReq::release_target() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJReq.target)
  
  ::Nrmk::IndyFramework::TargetJ* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJReq::mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetJ>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJReq.target)
  return target_;
}
inline void MoveJReq::set_allocated_target(::Nrmk::IndyFramework::TargetJ* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveJReq::has_blending() const {
  return this != internal_default_instance() && blending_ != nullptr;
}
inline void MoveJReq::clear_blending() {
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveJReq::blending() const {
  const ::Nrmk::IndyFramework::BlendingType* p = blending_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJReq.blending)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType*>(
      &::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJReq::release_blending() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJReq.blending)
  
  ::Nrmk::IndyFramework::BlendingType* temp = blending_;
  blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJReq::mutable_blending() {
  
  if (blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaNoVirtual());
    blending_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJReq.blending)
  return blending_;
}
inline void MoveJReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blending_;
  }
  if (blending) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blending = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blending, submessage_arena);
    }
    
  } else {
    
  }
  blending_ = blending;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJReq.blending)
}

// float vel_ratio = 3;
inline void MoveJReq::clear_vel_ratio() {
  vel_ratio_ = 0;
}
inline float MoveJReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJReq.vel_ratio)
  return vel_ratio_;
}
inline void MoveJReq::set_vel_ratio(float value) {
  
  vel_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveJReq.vel_ratio)
}

// float acc_ratio = 4;
inline void MoveJReq::clear_acc_ratio() {
  acc_ratio_ = 0;
}
inline float MoveJReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJReq.acc_ratio)
  return acc_ratio_;
}
inline void MoveJReq::set_acc_ratio(float value) {
  
  acc_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveJReq.acc_ratio)
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 20;
inline bool MoveJReq::has_post_condition() const {
  return this != internal_default_instance() && post_condition_ != nullptr;
}
inline void MoveJReq::clear_post_condition() {
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveJReq::post_condition() const {
  const ::Nrmk::IndyFramework::MotionCondition* p = post_condition_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJReq.post_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition*>(
      &::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJReq::release_post_condition() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJReq.post_condition)
  
  ::Nrmk::IndyFramework::MotionCondition* temp = post_condition_;
  post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJReq::mutable_post_condition() {
  
  if (post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaNoVirtual());
    post_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJReq.post_condition)
  return post_condition_;
}
inline void MoveJReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete post_condition_;
  }
  if (post_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_condition, submessage_arena);
    }
    
  } else {
    
  }
  post_condition_ = post_condition;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJReq.post_condition)
}

// bool teaching_mode = 30;
inline void MoveJReq::clear_teaching_mode() {
  teaching_mode_ = false;
}
inline bool MoveJReq::teaching_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJReq.teaching_mode)
  return teaching_mode_;
}
inline void MoveJReq::set_teaching_mode(bool value) {
  
  teaching_mode_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveJReq.teaching_mode)
}

// -------------------------------------------------------------------

// MoveJCondReq

// .Nrmk.IndyFramework.TargetJ target = 1;
inline bool MoveJCondReq::has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline void MoveJCondReq::clear_target() {
  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::Nrmk::IndyFramework::TargetJ& MoveJCondReq::target() const {
  const ::Nrmk::IndyFramework::TargetJ* p = target_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJCondReq.target)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::TargetJ*>(
      &::Nrmk::IndyFramework::_TargetJ_default_instance_);
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJCondReq::release_target() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJCondReq.target)
  
  ::Nrmk::IndyFramework::TargetJ* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJCondReq::mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetJ>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJCondReq.target)
  return target_;
}
inline void MoveJCondReq::set_allocated_target(::Nrmk::IndyFramework::TargetJ* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJCondReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveJCondReq::has_blending() const {
  return this != internal_default_instance() && blending_ != nullptr;
}
inline void MoveJCondReq::clear_blending() {
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveJCondReq::blending() const {
  const ::Nrmk::IndyFramework::BlendingType* p = blending_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJCondReq.blending)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType*>(
      &::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJCondReq::release_blending() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJCondReq.blending)
  
  ::Nrmk::IndyFramework::BlendingType* temp = blending_;
  blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJCondReq::mutable_blending() {
  
  if (blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaNoVirtual());
    blending_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJCondReq.blending)
  return blending_;
}
inline void MoveJCondReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blending_;
  }
  if (blending) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blending = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blending, submessage_arena);
    }
    
  } else {
    
  }
  blending_ = blending;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJCondReq.blending)
}

// float vel_ratio = 3;
inline void MoveJCondReq::clear_vel_ratio() {
  vel_ratio_ = 0;
}
inline float MoveJCondReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJCondReq.vel_ratio)
  return vel_ratio_;
}
inline void MoveJCondReq::set_vel_ratio(float value) {
  
  vel_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveJCondReq.vel_ratio)
}

// float acc_ratio = 4;
inline void MoveJCondReq::clear_acc_ratio() {
  acc_ratio_ = 0;
}
inline float MoveJCondReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJCondReq.acc_ratio)
  return acc_ratio_;
}
inline void MoveJCondReq::set_acc_ratio(float value) {
  
  acc_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveJCondReq.acc_ratio)
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 20;
inline bool MoveJCondReq::has_post_condition() const {
  return this != internal_default_instance() && post_condition_ != nullptr;
}
inline void MoveJCondReq::clear_post_condition() {
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveJCondReq::post_condition() const {
  const ::Nrmk::IndyFramework::MotionCondition* p = post_condition_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJCondReq.post_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition*>(
      &::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJCondReq::release_post_condition() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJCondReq.post_condition)
  
  ::Nrmk::IndyFramework::MotionCondition* temp = post_condition_;
  post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJCondReq::mutable_post_condition() {
  
  if (post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaNoVirtual());
    post_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJCondReq.post_condition)
  return post_condition_;
}
inline void MoveJCondReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete post_condition_;
  }
  if (post_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_condition, submessage_arena);
    }
    
  } else {
    
  }
  post_condition_ = post_condition;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJCondReq.post_condition)
}

// bool teaching_mode = 30;
inline void MoveJCondReq::clear_teaching_mode() {
  teaching_mode_ = false;
}
inline bool MoveJCondReq::teaching_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJCondReq.teaching_mode)
  return teaching_mode_;
}
inline void MoveJCondReq::set_teaching_mode(bool value) {
  
  teaching_mode_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveJCondReq.teaching_mode)
}

// -------------------------------------------------------------------

// MoveJTReq

// .Nrmk.IndyFramework.TargetJ target = 1;
inline bool MoveJTReq::has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline void MoveJTReq::clear_target() {
  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::Nrmk::IndyFramework::TargetJ& MoveJTReq::target() const {
  const ::Nrmk::IndyFramework::TargetJ* p = target_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJTReq.target)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::TargetJ*>(
      &::Nrmk::IndyFramework::_TargetJ_default_instance_);
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJTReq::release_target() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJTReq.target)
  
  ::Nrmk::IndyFramework::TargetJ* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetJ* MoveJTReq::mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetJ>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJTReq.target)
  return target_;
}
inline void MoveJTReq::set_allocated_target(::Nrmk::IndyFramework::TargetJ* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJTReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveJTReq::has_blending() const {
  return this != internal_default_instance() && blending_ != nullptr;
}
inline void MoveJTReq::clear_blending() {
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveJTReq::blending() const {
  const ::Nrmk::IndyFramework::BlendingType* p = blending_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJTReq.blending)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType*>(
      &::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJTReq::release_blending() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJTReq.blending)
  
  ::Nrmk::IndyFramework::BlendingType* temp = blending_;
  blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveJTReq::mutable_blending() {
  
  if (blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaNoVirtual());
    blending_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJTReq.blending)
  return blending_;
}
inline void MoveJTReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blending_;
  }
  if (blending) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blending = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blending, submessage_arena);
    }
    
  } else {
    
  }
  blending_ = blending;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJTReq.blending)
}

// float time = 3;
inline void MoveJTReq::clear_time() {
  time_ = 0;
}
inline float MoveJTReq::time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJTReq.time)
  return time_;
}
inline void MoveJTReq::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveJTReq.time)
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 20;
inline bool MoveJTReq::has_post_condition() const {
  return this != internal_default_instance() && post_condition_ != nullptr;
}
inline void MoveJTReq::clear_post_condition() {
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveJTReq::post_condition() const {
  const ::Nrmk::IndyFramework::MotionCondition* p = post_condition_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJTReq.post_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition*>(
      &::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJTReq::release_post_condition() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveJTReq.post_condition)
  
  ::Nrmk::IndyFramework::MotionCondition* temp = post_condition_;
  post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveJTReq::mutable_post_condition() {
  
  if (post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaNoVirtual());
    post_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJTReq.post_condition)
  return post_condition_;
}
inline void MoveJTReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete post_condition_;
  }
  if (post_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_condition, submessage_arena);
    }
    
  } else {
    
  }
  post_condition_ = post_condition;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveJTReq.post_condition)
}

// -------------------------------------------------------------------

// TargetP

// repeated float t_start = 1;
inline int TargetP::t_start_size() const {
  return t_start_.size();
}
inline void TargetP::clear_t_start() {
  t_start_.Clear();
}
inline float TargetP::t_start(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetP.t_start)
  return t_start_.Get(index);
}
inline void TargetP::set_t_start(int index, float value) {
  t_start_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetP.t_start)
}
inline void TargetP::add_t_start(float value) {
  t_start_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TargetP.t_start)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TargetP::t_start() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TargetP.t_start)
  return t_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TargetP::mutable_t_start() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TargetP.t_start)
  return &t_start_;
}

// repeated float t_target = 2;
inline int TargetP::t_target_size() const {
  return t_target_.size();
}
inline void TargetP::clear_t_target() {
  t_target_.Clear();
}
inline float TargetP::t_target(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetP.t_target)
  return t_target_.Get(index);
}
inline void TargetP::set_t_target(int index, float value) {
  t_target_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetP.t_target)
}
inline void TargetP::add_t_target(float value) {
  t_target_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TargetP.t_target)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TargetP::t_target() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TargetP.t_target)
  return t_target_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TargetP::mutable_t_target() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TargetP.t_target)
  return &t_target_;
}

// .Nrmk.IndyFramework.TaskBaseType base_type = 3;
inline void TargetP::clear_base_type() {
  base_type_ = 0;
}
inline ::Nrmk::IndyFramework::TaskBaseType TargetP::base_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetP.base_type)
  return static_cast< ::Nrmk::IndyFramework::TaskBaseType >(base_type_);
}
inline void TargetP::set_base_type(::Nrmk::IndyFramework::TaskBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetP.base_type)
}

// -------------------------------------------------------------------

// TargetC

// repeated float t_start = 1;
inline int TargetC::t_start_size() const {
  return t_start_.size();
}
inline void TargetC::clear_t_start() {
  t_start_.Clear();
}
inline float TargetC::t_start(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetC.t_start)
  return t_start_.Get(index);
}
inline void TargetC::set_t_start(int index, float value) {
  t_start_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetC.t_start)
}
inline void TargetC::add_t_start(float value) {
  t_start_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TargetC.t_start)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TargetC::t_start() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TargetC.t_start)
  return t_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TargetC::mutable_t_start() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TargetC.t_start)
  return &t_start_;
}

// repeated float t_pos0 = 2;
inline int TargetC::t_pos0_size() const {
  return t_pos0_.size();
}
inline void TargetC::clear_t_pos0() {
  t_pos0_.Clear();
}
inline float TargetC::t_pos0(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetC.t_pos0)
  return t_pos0_.Get(index);
}
inline void TargetC::set_t_pos0(int index, float value) {
  t_pos0_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetC.t_pos0)
}
inline void TargetC::add_t_pos0(float value) {
  t_pos0_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TargetC.t_pos0)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TargetC::t_pos0() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TargetC.t_pos0)
  return t_pos0_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TargetC::mutable_t_pos0() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TargetC.t_pos0)
  return &t_pos0_;
}

// repeated float t_pos1 = 3;
inline int TargetC::t_pos1_size() const {
  return t_pos1_.size();
}
inline void TargetC::clear_t_pos1() {
  t_pos1_.Clear();
}
inline float TargetC::t_pos1(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetC.t_pos1)
  return t_pos1_.Get(index);
}
inline void TargetC::set_t_pos1(int index, float value) {
  t_pos1_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetC.t_pos1)
}
inline void TargetC::add_t_pos1(float value) {
  t_pos1_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TargetC.t_pos1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TargetC::t_pos1() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TargetC.t_pos1)
  return t_pos1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TargetC::mutable_t_pos1() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TargetC.t_pos1)
  return &t_pos1_;
}

// .Nrmk.IndyFramework.TaskBaseType base_type = 4;
inline void TargetC::clear_base_type() {
  base_type_ = 0;
}
inline ::Nrmk::IndyFramework::TaskBaseType TargetC::base_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TargetC.base_type)
  return static_cast< ::Nrmk::IndyFramework::TaskBaseType >(base_type_);
}
inline void TargetC::set_base_type(::Nrmk::IndyFramework::TaskBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TargetC.base_type)
}

// -------------------------------------------------------------------

// MoveLReq

// .Nrmk.IndyFramework.TargetP target = 1;
inline bool MoveLReq::has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline void MoveLReq::clear_target() {
  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::Nrmk::IndyFramework::TargetP& MoveLReq::target() const {
  const ::Nrmk::IndyFramework::TargetP* p = target_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.target)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::TargetP*>(
      &::Nrmk::IndyFramework::_TargetP_default_instance_);
}
inline ::Nrmk::IndyFramework::TargetP* MoveLReq::release_target() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLReq.target)
  
  ::Nrmk::IndyFramework::TargetP* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetP* MoveLReq::mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetP>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLReq.target)
  return target_;
}
inline void MoveLReq::set_allocated_target(::Nrmk::IndyFramework::TargetP* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveLReq::has_blending() const {
  return this != internal_default_instance() && blending_ != nullptr;
}
inline void MoveLReq::clear_blending() {
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveLReq::blending() const {
  const ::Nrmk::IndyFramework::BlendingType* p = blending_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.blending)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType*>(
      &::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLReq::release_blending() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLReq.blending)
  
  ::Nrmk::IndyFramework::BlendingType* temp = blending_;
  blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLReq::mutable_blending() {
  
  if (blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaNoVirtual());
    blending_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLReq.blending)
  return blending_;
}
inline void MoveLReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blending_;
  }
  if (blending) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blending = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blending, submessage_arena);
    }
    
  } else {
    
  }
  blending_ = blending;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLReq.blending)
}

// float vel_ratio = 3;
inline void MoveLReq::clear_vel_ratio() {
  vel_ratio_ = 0;
}
inline float MoveLReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.vel_ratio)
  return vel_ratio_;
}
inline void MoveLReq::set_vel_ratio(float value) {
  
  vel_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLReq.vel_ratio)
}

// float acc_ratio = 4;
inline void MoveLReq::clear_acc_ratio() {
  acc_ratio_ = 0;
}
inline float MoveLReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.acc_ratio)
  return acc_ratio_;
}
inline void MoveLReq::set_acc_ratio(float value) {
  
  acc_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLReq.acc_ratio)
}

// .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
inline void MoveLReq::clear_vel_type() {
  vel_type_ = 0;
}
inline ::Nrmk::IndyFramework::VelocityModeType MoveLReq::vel_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.vel_type)
  return static_cast< ::Nrmk::IndyFramework::VelocityModeType >(vel_type_);
}
inline void MoveLReq::set_vel_type(::Nrmk::IndyFramework::VelocityModeType value) {
  
  vel_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLReq.vel_type)
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 20;
inline bool MoveLReq::has_post_condition() const {
  return this != internal_default_instance() && post_condition_ != nullptr;
}
inline void MoveLReq::clear_post_condition() {
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveLReq::post_condition() const {
  const ::Nrmk::IndyFramework::MotionCondition* p = post_condition_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.post_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition*>(
      &::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLReq::release_post_condition() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLReq.post_condition)
  
  ::Nrmk::IndyFramework::MotionCondition* temp = post_condition_;
  post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLReq::mutable_post_condition() {
  
  if (post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaNoVirtual());
    post_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLReq.post_condition)
  return post_condition_;
}
inline void MoveLReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete post_condition_;
  }
  if (post_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_condition, submessage_arena);
    }
    
  } else {
    
  }
  post_condition_ = post_condition;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLReq.post_condition)
}

// bool teaching_mode = 30;
inline void MoveLReq::clear_teaching_mode() {
  teaching_mode_ = false;
}
inline bool MoveLReq::teaching_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.teaching_mode)
  return teaching_mode_;
}
inline void MoveLReq::set_teaching_mode(bool value) {
  
  teaching_mode_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLReq.teaching_mode)
}

// bool bypass_singular = 40;
inline void MoveLReq::clear_bypass_singular() {
  bypass_singular_ = false;
}
inline bool MoveLReq::bypass_singular() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLReq.bypass_singular)
  return bypass_singular_;
}
inline void MoveLReq::set_bypass_singular(bool value) {
  
  bypass_singular_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLReq.bypass_singular)
}

// -------------------------------------------------------------------

// MoveLTReq

// .Nrmk.IndyFramework.TargetP target = 1;
inline bool MoveLTReq::has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline void MoveLTReq::clear_target() {
  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::Nrmk::IndyFramework::TargetP& MoveLTReq::target() const {
  const ::Nrmk::IndyFramework::TargetP* p = target_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLTReq.target)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::TargetP*>(
      &::Nrmk::IndyFramework::_TargetP_default_instance_);
}
inline ::Nrmk::IndyFramework::TargetP* MoveLTReq::release_target() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLTReq.target)
  
  ::Nrmk::IndyFramework::TargetP* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetP* MoveLTReq::mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetP>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLTReq.target)
  return target_;
}
inline void MoveLTReq::set_allocated_target(::Nrmk::IndyFramework::TargetP* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLTReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveLTReq::has_blending() const {
  return this != internal_default_instance() && blending_ != nullptr;
}
inline void MoveLTReq::clear_blending() {
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveLTReq::blending() const {
  const ::Nrmk::IndyFramework::BlendingType* p = blending_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLTReq.blending)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType*>(
      &::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLTReq::release_blending() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLTReq.blending)
  
  ::Nrmk::IndyFramework::BlendingType* temp = blending_;
  blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLTReq::mutable_blending() {
  
  if (blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaNoVirtual());
    blending_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLTReq.blending)
  return blending_;
}
inline void MoveLTReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blending_;
  }
  if (blending) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blending = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blending, submessage_arena);
    }
    
  } else {
    
  }
  blending_ = blending;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLTReq.blending)
}

// float time = 3;
inline void MoveLTReq::clear_time() {
  time_ = 0;
}
inline float MoveLTReq::time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLTReq.time)
  return time_;
}
inline void MoveLTReq::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLTReq.time)
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 20;
inline bool MoveLTReq::has_post_condition() const {
  return this != internal_default_instance() && post_condition_ != nullptr;
}
inline void MoveLTReq::clear_post_condition() {
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveLTReq::post_condition() const {
  const ::Nrmk::IndyFramework::MotionCondition* p = post_condition_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLTReq.post_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition*>(
      &::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLTReq::release_post_condition() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLTReq.post_condition)
  
  ::Nrmk::IndyFramework::MotionCondition* temp = post_condition_;
  post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLTReq::mutable_post_condition() {
  
  if (post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaNoVirtual());
    post_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLTReq.post_condition)
  return post_condition_;
}
inline void MoveLTReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete post_condition_;
  }
  if (post_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_condition, submessage_arena);
    }
    
  } else {
    
  }
  post_condition_ = post_condition;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLTReq.post_condition)
}

// -------------------------------------------------------------------

// MoveAxisReq

// repeated float start_mm = 1;
inline int MoveAxisReq::start_mm_size() const {
  return start_mm_.size();
}
inline void MoveAxisReq::clear_start_mm() {
  start_mm_.Clear();
}
inline float MoveAxisReq::start_mm(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveAxisReq.start_mm)
  return start_mm_.Get(index);
}
inline void MoveAxisReq::set_start_mm(int index, float value) {
  start_mm_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveAxisReq.start_mm)
}
inline void MoveAxisReq::add_start_mm(float value) {
  start_mm_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveAxisReq.start_mm)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MoveAxisReq::start_mm() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveAxisReq.start_mm)
  return start_mm_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MoveAxisReq::mutable_start_mm() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveAxisReq.start_mm)
  return &start_mm_;
}

// repeated float target_mm = 2;
inline int MoveAxisReq::target_mm_size() const {
  return target_mm_.size();
}
inline void MoveAxisReq::clear_target_mm() {
  target_mm_.Clear();
}
inline float MoveAxisReq::target_mm(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveAxisReq.target_mm)
  return target_mm_.Get(index);
}
inline void MoveAxisReq::set_target_mm(int index, float value) {
  target_mm_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveAxisReq.target_mm)
}
inline void MoveAxisReq::add_target_mm(float value) {
  target_mm_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveAxisReq.target_mm)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MoveAxisReq::target_mm() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveAxisReq.target_mm)
  return target_mm_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MoveAxisReq::mutable_target_mm() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveAxisReq.target_mm)
  return &target_mm_;
}

// float vel_percentage = 3;
inline void MoveAxisReq::clear_vel_percentage() {
  vel_percentage_ = 0;
}
inline float MoveAxisReq::vel_percentage() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveAxisReq.vel_percentage)
  return vel_percentage_;
}
inline void MoveAxisReq::set_vel_percentage(float value) {
  
  vel_percentage_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveAxisReq.vel_percentage)
}

// float acc_percentage = 4;
inline void MoveAxisReq::clear_acc_percentage() {
  acc_percentage_ = 0;
}
inline float MoveAxisReq::acc_percentage() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveAxisReq.acc_percentage)
  return acc_percentage_;
}
inline void MoveAxisReq::set_acc_percentage(float value) {
  
  acc_percentage_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveAxisReq.acc_percentage)
}

// bool is_absolute = 5;
inline void MoveAxisReq::clear_is_absolute() {
  is_absolute_ = false;
}
inline bool MoveAxisReq::is_absolute() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveAxisReq.is_absolute)
  return is_absolute_;
}
inline void MoveAxisReq::set_is_absolute(bool value) {
  
  is_absolute_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveAxisReq.is_absolute)
}

// bool teaching_mode = 10;
inline void MoveAxisReq::clear_teaching_mode() {
  teaching_mode_ = false;
}
inline bool MoveAxisReq::teaching_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveAxisReq.teaching_mode)
  return teaching_mode_;
}
inline void MoveAxisReq::set_teaching_mode(bool value) {
  
  teaching_mode_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveAxisReq.teaching_mode)
}

// -------------------------------------------------------------------

// MoveCReq

// .Nrmk.IndyFramework.TargetC target = 1;
inline bool MoveCReq::has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline void MoveCReq::clear_target() {
  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::Nrmk::IndyFramework::TargetC& MoveCReq::target() const {
  const ::Nrmk::IndyFramework::TargetC* p = target_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.target)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::TargetC*>(
      &::Nrmk::IndyFramework::_TargetC_default_instance_);
}
inline ::Nrmk::IndyFramework::TargetC* MoveCReq::release_target() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveCReq.target)
  
  ::Nrmk::IndyFramework::TargetC* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetC* MoveCReq::mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetC>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveCReq.target)
  return target_;
}
inline void MoveCReq::set_allocated_target(::Nrmk::IndyFramework::TargetC* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveCReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveCReq::has_blending() const {
  return this != internal_default_instance() && blending_ != nullptr;
}
inline void MoveCReq::clear_blending() {
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveCReq::blending() const {
  const ::Nrmk::IndyFramework::BlendingType* p = blending_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.blending)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType*>(
      &::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline ::Nrmk::IndyFramework::BlendingType* MoveCReq::release_blending() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveCReq.blending)
  
  ::Nrmk::IndyFramework::BlendingType* temp = blending_;
  blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveCReq::mutable_blending() {
  
  if (blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaNoVirtual());
    blending_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveCReq.blending)
  return blending_;
}
inline void MoveCReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blending_;
  }
  if (blending) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blending = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blending, submessage_arena);
    }
    
  } else {
    
  }
  blending_ = blending;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveCReq.blending)
}

// float angle = 3;
inline void MoveCReq::clear_angle() {
  angle_ = 0;
}
inline float MoveCReq::angle() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.angle)
  return angle_;
}
inline void MoveCReq::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.angle)
}

// .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
inline void MoveCReq::clear_setting_type() {
  setting_type_ = 0;
}
inline ::Nrmk::IndyFramework::CircularSettingType MoveCReq::setting_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.setting_type)
  return static_cast< ::Nrmk::IndyFramework::CircularSettingType >(setting_type_);
}
inline void MoveCReq::set_setting_type(::Nrmk::IndyFramework::CircularSettingType value) {
  
  setting_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.setting_type)
}

// .Nrmk.IndyFramework.CircularMovingType move_type = 11;
inline void MoveCReq::clear_move_type() {
  move_type_ = 0;
}
inline ::Nrmk::IndyFramework::CircularMovingType MoveCReq::move_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.move_type)
  return static_cast< ::Nrmk::IndyFramework::CircularMovingType >(move_type_);
}
inline void MoveCReq::set_move_type(::Nrmk::IndyFramework::CircularMovingType value) {
  
  move_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.move_type)
}

// float vel_ratio = 20;
inline void MoveCReq::clear_vel_ratio() {
  vel_ratio_ = 0;
}
inline float MoveCReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.vel_ratio)
  return vel_ratio_;
}
inline void MoveCReq::set_vel_ratio(float value) {
  
  vel_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.vel_ratio)
}

// float acc_ratio = 21;
inline void MoveCReq::clear_acc_ratio() {
  acc_ratio_ = 0;
}
inline float MoveCReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.acc_ratio)
  return acc_ratio_;
}
inline void MoveCReq::set_acc_ratio(float value) {
  
  acc_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.acc_ratio)
}

// .Nrmk.IndyFramework.VelocityModeType vel_type = 22;
inline void MoveCReq::clear_vel_type() {
  vel_type_ = 0;
}
inline ::Nrmk::IndyFramework::VelocityModeType MoveCReq::vel_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.vel_type)
  return static_cast< ::Nrmk::IndyFramework::VelocityModeType >(vel_type_);
}
inline void MoveCReq::set_vel_type(::Nrmk::IndyFramework::VelocityModeType value) {
  
  vel_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.vel_type)
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 25;
inline bool MoveCReq::has_post_condition() const {
  return this != internal_default_instance() && post_condition_ != nullptr;
}
inline void MoveCReq::clear_post_condition() {
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveCReq::post_condition() const {
  const ::Nrmk::IndyFramework::MotionCondition* p = post_condition_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.post_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition*>(
      &::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveCReq::release_post_condition() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveCReq.post_condition)
  
  ::Nrmk::IndyFramework::MotionCondition* temp = post_condition_;
  post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveCReq::mutable_post_condition() {
  
  if (post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaNoVirtual());
    post_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveCReq.post_condition)
  return post_condition_;
}
inline void MoveCReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete post_condition_;
  }
  if (post_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_condition, submessage_arena);
    }
    
  } else {
    
  }
  post_condition_ = post_condition;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveCReq.post_condition)
}

// bool teaching_mode = 30;
inline void MoveCReq::clear_teaching_mode() {
  teaching_mode_ = false;
}
inline bool MoveCReq::teaching_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.teaching_mode)
  return teaching_mode_;
}
inline void MoveCReq::set_teaching_mode(bool value) {
  
  teaching_mode_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.teaching_mode)
}

// bool bypass_singular = 40;
inline void MoveCReq::clear_bypass_singular() {
  bypass_singular_ = false;
}
inline bool MoveCReq::bypass_singular() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCReq.bypass_singular)
  return bypass_singular_;
}
inline void MoveCReq::set_bypass_singular(bool value) {
  
  bypass_singular_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCReq.bypass_singular)
}

// -------------------------------------------------------------------

// MoveCTReq

// .Nrmk.IndyFramework.TargetC target = 1;
inline bool MoveCTReq::has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline void MoveCTReq::clear_target() {
  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::Nrmk::IndyFramework::TargetC& MoveCTReq::target() const {
  const ::Nrmk::IndyFramework::TargetC* p = target_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCTReq.target)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::TargetC*>(
      &::Nrmk::IndyFramework::_TargetC_default_instance_);
}
inline ::Nrmk::IndyFramework::TargetC* MoveCTReq::release_target() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveCTReq.target)
  
  ::Nrmk::IndyFramework::TargetC* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetC* MoveCTReq::mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetC>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveCTReq.target)
  return target_;
}
inline void MoveCTReq::set_allocated_target(::Nrmk::IndyFramework::TargetC* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveCTReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveCTReq::has_blending() const {
  return this != internal_default_instance() && blending_ != nullptr;
}
inline void MoveCTReq::clear_blending() {
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveCTReq::blending() const {
  const ::Nrmk::IndyFramework::BlendingType* p = blending_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCTReq.blending)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType*>(
      &::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline ::Nrmk::IndyFramework::BlendingType* MoveCTReq::release_blending() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveCTReq.blending)
  
  ::Nrmk::IndyFramework::BlendingType* temp = blending_;
  blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveCTReq::mutable_blending() {
  
  if (blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaNoVirtual());
    blending_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveCTReq.blending)
  return blending_;
}
inline void MoveCTReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blending_;
  }
  if (blending) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blending = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blending, submessage_arena);
    }
    
  } else {
    
  }
  blending_ = blending;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveCTReq.blending)
}

// float angle = 3;
inline void MoveCTReq::clear_angle() {
  angle_ = 0;
}
inline float MoveCTReq::angle() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCTReq.angle)
  return angle_;
}
inline void MoveCTReq::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCTReq.angle)
}

// .Nrmk.IndyFramework.CircularSettingType setting_type = 10;
inline void MoveCTReq::clear_setting_type() {
  setting_type_ = 0;
}
inline ::Nrmk::IndyFramework::CircularSettingType MoveCTReq::setting_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCTReq.setting_type)
  return static_cast< ::Nrmk::IndyFramework::CircularSettingType >(setting_type_);
}
inline void MoveCTReq::set_setting_type(::Nrmk::IndyFramework::CircularSettingType value) {
  
  setting_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCTReq.setting_type)
}

// .Nrmk.IndyFramework.CircularMovingType move_type = 11;
inline void MoveCTReq::clear_move_type() {
  move_type_ = 0;
}
inline ::Nrmk::IndyFramework::CircularMovingType MoveCTReq::move_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCTReq.move_type)
  return static_cast< ::Nrmk::IndyFramework::CircularMovingType >(move_type_);
}
inline void MoveCTReq::set_move_type(::Nrmk::IndyFramework::CircularMovingType value) {
  
  move_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCTReq.move_type)
}

// float time = 20;
inline void MoveCTReq::clear_time() {
  time_ = 0;
}
inline float MoveCTReq::time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCTReq.time)
  return time_;
}
inline void MoveCTReq::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveCTReq.time)
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 25;
inline bool MoveCTReq::has_post_condition() const {
  return this != internal_default_instance() && post_condition_ != nullptr;
}
inline void MoveCTReq::clear_post_condition() {
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveCTReq::post_condition() const {
  const ::Nrmk::IndyFramework::MotionCondition* p = post_condition_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveCTReq.post_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition*>(
      &::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveCTReq::release_post_condition() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveCTReq.post_condition)
  
  ::Nrmk::IndyFramework::MotionCondition* temp = post_condition_;
  post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveCTReq::mutable_post_condition() {
  
  if (post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaNoVirtual());
    post_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveCTReq.post_condition)
  return post_condition_;
}
inline void MoveCTReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete post_condition_;
  }
  if (post_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_condition, submessage_arena);
    }
    
  } else {
    
  }
  post_condition_ = post_condition;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveCTReq.post_condition)
}

// -------------------------------------------------------------------

// MoveJointTrajReq

// repeated .Nrmk.IndyFramework.Vector q_list = 1;
inline int MoveJointTrajReq::q_list_size() const {
  return q_list_.size();
}
inline ::Nrmk::IndyFramework::Vector* MoveJointTrajReq::mutable_q_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJointTrajReq.q_list)
  return q_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
MoveJointTrajReq::mutable_q_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveJointTrajReq.q_list)
  return &q_list_;
}
inline const ::Nrmk::IndyFramework::Vector& MoveJointTrajReq::q_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJointTrajReq.q_list)
  return q_list_.Get(index);
}
inline ::Nrmk::IndyFramework::Vector* MoveJointTrajReq::add_q_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveJointTrajReq.q_list)
  return q_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
MoveJointTrajReq::q_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveJointTrajReq.q_list)
  return q_list_;
}

// repeated .Nrmk.IndyFramework.Vector qdot_list = 2;
inline int MoveJointTrajReq::qdot_list_size() const {
  return qdot_list_.size();
}
inline ::Nrmk::IndyFramework::Vector* MoveJointTrajReq::mutable_qdot_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJointTrajReq.qdot_list)
  return qdot_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
MoveJointTrajReq::mutable_qdot_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveJointTrajReq.qdot_list)
  return &qdot_list_;
}
inline const ::Nrmk::IndyFramework::Vector& MoveJointTrajReq::qdot_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJointTrajReq.qdot_list)
  return qdot_list_.Get(index);
}
inline ::Nrmk::IndyFramework::Vector* MoveJointTrajReq::add_qdot_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveJointTrajReq.qdot_list)
  return qdot_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
MoveJointTrajReq::qdot_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveJointTrajReq.qdot_list)
  return qdot_list_;
}

// repeated .Nrmk.IndyFramework.Vector qddot_list = 3;
inline int MoveJointTrajReq::qddot_list_size() const {
  return qddot_list_.size();
}
inline ::Nrmk::IndyFramework::Vector* MoveJointTrajReq::mutable_qddot_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveJointTrajReq.qddot_list)
  return qddot_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
MoveJointTrajReq::mutable_qddot_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveJointTrajReq.qddot_list)
  return &qddot_list_;
}
inline const ::Nrmk::IndyFramework::Vector& MoveJointTrajReq::qddot_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveJointTrajReq.qddot_list)
  return qddot_list_.Get(index);
}
inline ::Nrmk::IndyFramework::Vector* MoveJointTrajReq::add_qddot_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveJointTrajReq.qddot_list)
  return qddot_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
MoveJointTrajReq::qddot_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveJointTrajReq.qddot_list)
  return qddot_list_;
}

// -------------------------------------------------------------------

// MoveTaskTrajReq

// repeated .Nrmk.IndyFramework.Vector p_list = 1;
inline int MoveTaskTrajReq::p_list_size() const {
  return p_list_.size();
}
inline ::Nrmk::IndyFramework::Vector* MoveTaskTrajReq::mutable_p_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveTaskTrajReq.p_list)
  return p_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
MoveTaskTrajReq::mutable_p_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveTaskTrajReq.p_list)
  return &p_list_;
}
inline const ::Nrmk::IndyFramework::Vector& MoveTaskTrajReq::p_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTaskTrajReq.p_list)
  return p_list_.Get(index);
}
inline ::Nrmk::IndyFramework::Vector* MoveTaskTrajReq::add_p_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveTaskTrajReq.p_list)
  return p_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
MoveTaskTrajReq::p_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveTaskTrajReq.p_list)
  return p_list_;
}

// repeated .Nrmk.IndyFramework.Vector pdot_list = 2;
inline int MoveTaskTrajReq::pdot_list_size() const {
  return pdot_list_.size();
}
inline ::Nrmk::IndyFramework::Vector* MoveTaskTrajReq::mutable_pdot_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveTaskTrajReq.pdot_list)
  return pdot_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
MoveTaskTrajReq::mutable_pdot_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveTaskTrajReq.pdot_list)
  return &pdot_list_;
}
inline const ::Nrmk::IndyFramework::Vector& MoveTaskTrajReq::pdot_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTaskTrajReq.pdot_list)
  return pdot_list_.Get(index);
}
inline ::Nrmk::IndyFramework::Vector* MoveTaskTrajReq::add_pdot_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveTaskTrajReq.pdot_list)
  return pdot_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
MoveTaskTrajReq::pdot_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveTaskTrajReq.pdot_list)
  return pdot_list_;
}

// repeated .Nrmk.IndyFramework.Vector pddot_list = 3;
inline int MoveTaskTrajReq::pddot_list_size() const {
  return pddot_list_.size();
}
inline ::Nrmk::IndyFramework::Vector* MoveTaskTrajReq::mutable_pddot_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveTaskTrajReq.pddot_list)
  return pddot_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >*
MoveTaskTrajReq::mutable_pddot_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveTaskTrajReq.pddot_list)
  return &pddot_list_;
}
inline const ::Nrmk::IndyFramework::Vector& MoveTaskTrajReq::pddot_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTaskTrajReq.pddot_list)
  return pddot_list_.Get(index);
}
inline ::Nrmk::IndyFramework::Vector* MoveTaskTrajReq::add_pddot_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveTaskTrajReq.pddot_list)
  return pddot_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Vector >&
MoveTaskTrajReq::pddot_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveTaskTrajReq.pddot_list)
  return pddot_list_;
}

// -------------------------------------------------------------------

// MoveConveyorReq

// bool teaching_mode = 1;
inline void MoveConveyorReq::clear_teaching_mode() {
  teaching_mode_ = false;
}
inline bool MoveConveyorReq::teaching_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveConveyorReq.teaching_mode)
  return teaching_mode_;
}
inline void MoveConveyorReq::set_teaching_mode(bool value) {
  
  teaching_mode_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveConveyorReq.teaching_mode)
}

// bool bypass_singular = 2;
inline void MoveConveyorReq::clear_bypass_singular() {
  bypass_singular_ = false;
}
inline bool MoveConveyorReq::bypass_singular() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveConveyorReq.bypass_singular)
  return bypass_singular_;
}
inline void MoveConveyorReq::set_bypass_singular(bool value) {
  
  bypass_singular_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveConveyorReq.bypass_singular)
}

// float acc_ratio = 3;
inline void MoveConveyorReq::clear_acc_ratio() {
  acc_ratio_ = 0;
}
inline float MoveConveyorReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveConveyorReq.acc_ratio)
  return acc_ratio_;
}
inline void MoveConveyorReq::set_acc_ratio(float value) {
  
  acc_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveConveyorReq.acc_ratio)
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 10;
inline bool MoveConveyorReq::has_post_condition() const {
  return this != internal_default_instance() && post_condition_ != nullptr;
}
inline void MoveConveyorReq::clear_post_condition() {
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveConveyorReq::post_condition() const {
  const ::Nrmk::IndyFramework::MotionCondition* p = post_condition_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveConveyorReq.post_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition*>(
      &::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveConveyorReq::release_post_condition() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveConveyorReq.post_condition)
  
  ::Nrmk::IndyFramework::MotionCondition* temp = post_condition_;
  post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveConveyorReq::mutable_post_condition() {
  
  if (post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaNoVirtual());
    post_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveConveyorReq.post_condition)
  return post_condition_;
}
inline void MoveConveyorReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete post_condition_;
  }
  if (post_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_condition, submessage_arena);
    }
    
  } else {
    
  }
  post_condition_ = post_condition;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveConveyorReq.post_condition)
}

// -------------------------------------------------------------------

// WaitIOReq

// repeated .Nrmk.IndyFramework.DigitalSignal di_list = 1;
inline int WaitIOReq::di_list_size() const {
  return di_list_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::mutable_di_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.di_list)
  return di_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitIOReq::mutable_di_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.di_list)
  return &di_list_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitIOReq::di_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.di_list)
  return di_list_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::add_di_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.di_list)
  return di_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitIOReq::di_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.di_list)
  return di_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal do_list = 2;
inline int WaitIOReq::do_list_size() const {
  return do_list_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::mutable_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.do_list)
  return do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitIOReq::mutable_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.do_list)
  return &do_list_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitIOReq::do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.do_list)
  return do_list_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::add_do_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.do_list)
  return do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitIOReq::do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.do_list)
  return do_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal end_di_list = 3;
inline int WaitIOReq::end_di_list_size() const {
  return end_di_list_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::mutable_end_di_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.end_di_list)
  return end_di_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitIOReq::mutable_end_di_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.end_di_list)
  return &end_di_list_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitIOReq::end_di_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.end_di_list)
  return end_di_list_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::add_end_di_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.end_di_list)
  return end_di_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitIOReq::end_di_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.end_di_list)
  return end_di_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal end_do_list = 4;
inline int WaitIOReq::end_do_list_size() const {
  return end_do_list_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::mutable_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.end_do_list)
  return end_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitIOReq::mutable_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.end_do_list)
  return &end_do_list_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitIOReq::end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.end_do_list)
  return end_do_list_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::add_end_do_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.end_do_list)
  return end_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitIOReq::end_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.end_do_list)
  return end_do_list_;
}

// int32 conjunction = 5;
inline void WaitIOReq::clear_conjunction() {
  conjunction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WaitIOReq::conjunction() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.conjunction)
  return conjunction_;
}
inline void WaitIOReq::set_conjunction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conjunction_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.WaitIOReq.conjunction)
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 6;
inline int WaitIOReq::set_do_list_size() const {
  return set_do_list_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.set_do_list)
  return set_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitIOReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.set_do_list)
  return &set_do_list_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitIOReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.set_do_list)
  return set_do_list_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::add_set_do_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.set_do_list)
  return set_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitIOReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.set_do_list)
  return set_do_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 7;
inline int WaitIOReq::set_end_do_list_size() const {
  return set_end_do_list_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.set_end_do_list)
  return set_end_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitIOReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.set_end_do_list)
  return &set_end_do_list_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitIOReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.set_end_do_list)
  return set_end_do_list_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitIOReq::add_set_end_do_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.set_end_do_list)
  return set_end_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitIOReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.set_end_do_list)
  return set_end_do_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 8;
inline int WaitIOReq::set_ao_list_size() const {
  return set_ao_list_.size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitIOReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.set_ao_list)
  return set_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitIOReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.set_ao_list)
  return &set_ao_list_;
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitIOReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.set_ao_list)
  return set_ao_list_.Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitIOReq::add_set_ao_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.set_ao_list)
  return set_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitIOReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.set_ao_list)
  return set_ao_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 9;
inline int WaitIOReq::set_end_ao_list_size() const {
  return set_end_ao_list_.size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitIOReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitIOReq.set_end_ao_list)
  return set_end_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitIOReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitIOReq.set_end_ao_list)
  return &set_end_ao_list_;
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitIOReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitIOReq.set_end_ao_list)
  return set_end_ao_list_.Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitIOReq::add_set_end_ao_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitIOReq.set_end_ao_list)
  return set_end_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitIOReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitIOReq.set_end_ao_list)
  return set_end_ao_list_;
}

// -------------------------------------------------------------------

// WaitTimeReq

// float time = 1;
inline void WaitTimeReq::clear_time() {
  time_ = 0;
}
inline float WaitTimeReq::time() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTimeReq.time)
  return time_;
}
inline void WaitTimeReq::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.WaitTimeReq.time)
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
inline int WaitTimeReq::set_do_list_size() const {
  return set_do_list_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTimeReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTimeReq.set_do_list)
  return set_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitTimeReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTimeReq.set_do_list)
  return &set_do_list_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitTimeReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTimeReq.set_do_list)
  return set_do_list_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTimeReq::add_set_do_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTimeReq.set_do_list)
  return set_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitTimeReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTimeReq.set_do_list)
  return set_do_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
inline int WaitTimeReq::set_end_do_list_size() const {
  return set_end_do_list_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTimeReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTimeReq.set_end_do_list)
  return set_end_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitTimeReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTimeReq.set_end_do_list)
  return &set_end_do_list_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitTimeReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTimeReq.set_end_do_list)
  return set_end_do_list_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTimeReq::add_set_end_do_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTimeReq.set_end_do_list)
  return set_end_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitTimeReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTimeReq.set_end_do_list)
  return set_end_do_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
inline int WaitTimeReq::set_ao_list_size() const {
  return set_ao_list_.size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTimeReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTimeReq.set_ao_list)
  return set_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitTimeReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTimeReq.set_ao_list)
  return &set_ao_list_;
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitTimeReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTimeReq.set_ao_list)
  return set_ao_list_.Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTimeReq::add_set_ao_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTimeReq.set_ao_list)
  return set_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitTimeReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTimeReq.set_ao_list)
  return set_ao_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
inline int WaitTimeReq::set_end_ao_list_size() const {
  return set_end_ao_list_.size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTimeReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTimeReq.set_end_ao_list)
  return set_end_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitTimeReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTimeReq.set_end_ao_list)
  return &set_end_ao_list_;
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitTimeReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTimeReq.set_end_ao_list)
  return set_end_ao_list_.Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTimeReq::add_set_end_ao_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTimeReq.set_end_ao_list)
  return set_end_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitTimeReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTimeReq.set_end_ao_list)
  return set_end_ao_list_;
}

// -------------------------------------------------------------------

// WaitProgressReq

// int32 progress = 1;
inline void WaitProgressReq::clear_progress() {
  progress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WaitProgressReq::progress() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitProgressReq.progress)
  return progress_;
}
inline void WaitProgressReq::set_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.WaitProgressReq.progress)
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
inline int WaitProgressReq::set_do_list_size() const {
  return set_do_list_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitProgressReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitProgressReq.set_do_list)
  return set_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitProgressReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitProgressReq.set_do_list)
  return &set_do_list_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitProgressReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitProgressReq.set_do_list)
  return set_do_list_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitProgressReq::add_set_do_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitProgressReq.set_do_list)
  return set_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitProgressReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitProgressReq.set_do_list)
  return set_do_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
inline int WaitProgressReq::set_end_do_list_size() const {
  return set_end_do_list_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitProgressReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitProgressReq.set_end_do_list)
  return set_end_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitProgressReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitProgressReq.set_end_do_list)
  return &set_end_do_list_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitProgressReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitProgressReq.set_end_do_list)
  return set_end_do_list_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitProgressReq::add_set_end_do_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitProgressReq.set_end_do_list)
  return set_end_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitProgressReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitProgressReq.set_end_do_list)
  return set_end_do_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
inline int WaitProgressReq::set_ao_list_size() const {
  return set_ao_list_.size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitProgressReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitProgressReq.set_ao_list)
  return set_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitProgressReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitProgressReq.set_ao_list)
  return &set_ao_list_;
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitProgressReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitProgressReq.set_ao_list)
  return set_ao_list_.Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitProgressReq::add_set_ao_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitProgressReq.set_ao_list)
  return set_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitProgressReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitProgressReq.set_ao_list)
  return set_ao_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
inline int WaitProgressReq::set_end_ao_list_size() const {
  return set_end_ao_list_.size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitProgressReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitProgressReq.set_end_ao_list)
  return set_end_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitProgressReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitProgressReq.set_end_ao_list)
  return &set_end_ao_list_;
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitProgressReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitProgressReq.set_end_ao_list)
  return set_end_ao_list_.Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitProgressReq::add_set_end_ao_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitProgressReq.set_end_ao_list)
  return set_end_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitProgressReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitProgressReq.set_end_ao_list)
  return set_end_ao_list_;
}

// -------------------------------------------------------------------

// WaitTrajReq

// .Nrmk.IndyFramework.TrajCondition traj_condition = 1;
inline void WaitTrajReq::clear_traj_condition() {
  traj_condition_ = 0;
}
inline ::Nrmk::IndyFramework::TrajCondition WaitTrajReq::traj_condition() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTrajReq.traj_condition)
  return static_cast< ::Nrmk::IndyFramework::TrajCondition >(traj_condition_);
}
inline void WaitTrajReq::set_traj_condition(::Nrmk::IndyFramework::TrajCondition value) {
  
  traj_condition_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.WaitTrajReq.traj_condition)
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
inline int WaitTrajReq::set_do_list_size() const {
  return set_do_list_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTrajReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTrajReq.set_do_list)
  return set_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitTrajReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTrajReq.set_do_list)
  return &set_do_list_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitTrajReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTrajReq.set_do_list)
  return set_do_list_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTrajReq::add_set_do_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTrajReq.set_do_list)
  return set_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitTrajReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTrajReq.set_do_list)
  return set_do_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
inline int WaitTrajReq::set_end_do_list_size() const {
  return set_end_do_list_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTrajReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTrajReq.set_end_do_list)
  return set_end_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitTrajReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTrajReq.set_end_do_list)
  return &set_end_do_list_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitTrajReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTrajReq.set_end_do_list)
  return set_end_do_list_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitTrajReq::add_set_end_do_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTrajReq.set_end_do_list)
  return set_end_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitTrajReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTrajReq.set_end_do_list)
  return set_end_do_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
inline int WaitTrajReq::set_ao_list_size() const {
  return set_ao_list_.size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTrajReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTrajReq.set_ao_list)
  return set_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitTrajReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTrajReq.set_ao_list)
  return &set_ao_list_;
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitTrajReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTrajReq.set_ao_list)
  return set_ao_list_.Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTrajReq::add_set_ao_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTrajReq.set_ao_list)
  return set_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitTrajReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTrajReq.set_ao_list)
  return set_ao_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
inline int WaitTrajReq::set_end_ao_list_size() const {
  return set_end_ao_list_.size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTrajReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitTrajReq.set_end_ao_list)
  return set_end_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitTrajReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitTrajReq.set_end_ao_list)
  return &set_end_ao_list_;
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitTrajReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitTrajReq.set_end_ao_list)
  return set_end_ao_list_.Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitTrajReq::add_set_end_ao_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitTrajReq.set_end_ao_list)
  return set_end_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitTrajReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitTrajReq.set_end_ao_list)
  return set_end_ao_list_;
}

// -------------------------------------------------------------------

// WaitRadiusReq

// int32 radius = 1;
inline void WaitRadiusReq::clear_radius() {
  radius_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WaitRadiusReq::radius() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitRadiusReq.radius)
  return radius_;
}
inline void WaitRadiusReq::set_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.WaitRadiusReq.radius)
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_do_list = 2;
inline int WaitRadiusReq::set_do_list_size() const {
  return set_do_list_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitRadiusReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitRadiusReq.set_do_list)
  return set_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitRadiusReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitRadiusReq.set_do_list)
  return &set_do_list_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitRadiusReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitRadiusReq.set_do_list)
  return set_do_list_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitRadiusReq::add_set_do_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitRadiusReq.set_do_list)
  return set_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitRadiusReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitRadiusReq.set_do_list)
  return set_do_list_;
}

// repeated .Nrmk.IndyFramework.DigitalSignal set_end_do_list = 3;
inline int WaitRadiusReq::set_end_do_list_size() const {
  return set_end_do_list_.size();
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitRadiusReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitRadiusReq.set_end_do_list)
  return set_end_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >*
WaitRadiusReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitRadiusReq.set_end_do_list)
  return &set_end_do_list_;
}
inline const ::Nrmk::IndyFramework::DigitalSignal& WaitRadiusReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitRadiusReq.set_end_do_list)
  return set_end_do_list_.Get(index);
}
inline ::Nrmk::IndyFramework::DigitalSignal* WaitRadiusReq::add_set_end_do_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitRadiusReq.set_end_do_list)
  return set_end_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::DigitalSignal >&
WaitRadiusReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitRadiusReq.set_end_do_list)
  return set_end_do_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_ao_list = 4;
inline int WaitRadiusReq::set_ao_list_size() const {
  return set_ao_list_.size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitRadiusReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitRadiusReq.set_ao_list)
  return set_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitRadiusReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitRadiusReq.set_ao_list)
  return &set_ao_list_;
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitRadiusReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitRadiusReq.set_ao_list)
  return set_ao_list_.Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitRadiusReq::add_set_ao_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitRadiusReq.set_ao_list)
  return set_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitRadiusReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitRadiusReq.set_ao_list)
  return set_ao_list_;
}

// repeated .Nrmk.IndyFramework.AnalogSignal set_end_ao_list = 5;
inline int WaitRadiusReq::set_end_ao_list_size() const {
  return set_end_ao_list_.size();
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitRadiusReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.WaitRadiusReq.set_end_ao_list)
  return set_end_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >*
WaitRadiusReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.WaitRadiusReq.set_end_ao_list)
  return &set_end_ao_list_;
}
inline const ::Nrmk::IndyFramework::AnalogSignal& WaitRadiusReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.WaitRadiusReq.set_end_ao_list)
  return set_end_ao_list_.Get(index);
}
inline ::Nrmk::IndyFramework::AnalogSignal* WaitRadiusReq::add_set_end_ao_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.WaitRadiusReq.set_end_ao_list)
  return set_end_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::AnalogSignal >&
WaitRadiusReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.WaitRadiusReq.set_end_ao_list)
  return set_end_ao_list_;
}

// -------------------------------------------------------------------

// Program

// string prog_name = 1;
inline void Program::clear_prog_name() {
  prog_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Program::prog_name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Program.prog_name)
  return prog_name_.GetNoArena();
}
inline void Program::set_prog_name(const std::string& value) {
  
  prog_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Program.prog_name)
}
inline void Program::set_prog_name(std::string&& value) {
  
  prog_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.Program.prog_name)
}
inline void Program::set_prog_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prog_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.Program.prog_name)
}
inline void Program::set_prog_name(const char* value, size_t size) {
  
  prog_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.Program.prog_name)
}
inline std::string* Program::mutable_prog_name() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Program.prog_name)
  return prog_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Program::release_prog_name() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Program.prog_name)
  
  return prog_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Program::set_allocated_prog_name(std::string* prog_name) {
  if (prog_name != nullptr) {
    
  } else {
    
  }
  prog_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prog_name);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Program.prog_name)
}

// int32 prog_idx = 2;
inline void Program::clear_prog_idx() {
  prog_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Program::prog_idx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Program.prog_idx)
  return prog_idx_;
}
inline void Program::set_prog_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prog_idx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Program.prog_idx)
}

// -------------------------------------------------------------------

// TuningProgram

// .Nrmk.IndyFramework.Program program = 1;
inline bool TuningProgram::has_program() const {
  return this != internal_default_instance() && program_ != nullptr;
}
inline void TuningProgram::clear_program() {
  if (GetArenaNoVirtual() == nullptr && program_ != nullptr) {
    delete program_;
  }
  program_ = nullptr;
}
inline const ::Nrmk::IndyFramework::Program& TuningProgram::program() const {
  const ::Nrmk::IndyFramework::Program* p = program_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TuningProgram.program)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Program*>(
      &::Nrmk::IndyFramework::_Program_default_instance_);
}
inline ::Nrmk::IndyFramework::Program* TuningProgram::release_program() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TuningProgram.program)
  
  ::Nrmk::IndyFramework::Program* temp = program_;
  program_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Program* TuningProgram::mutable_program() {
  
  if (program_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Program>(GetArenaNoVirtual());
    program_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TuningProgram.program)
  return program_;
}
inline void TuningProgram::set_allocated_program(::Nrmk::IndyFramework::Program* program) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete program_;
  }
  if (program) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      program = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, program, submessage_arena);
    }
    
  } else {
    
  }
  program_ = program;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TuningProgram.program)
}

// .Nrmk.IndyFramework.TuningSpace tuning_space = 2;
inline void TuningProgram::clear_tuning_space() {
  tuning_space_ = 0;
}
inline ::Nrmk::IndyFramework::TuningSpace TuningProgram::tuning_space() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TuningProgram.tuning_space)
  return static_cast< ::Nrmk::IndyFramework::TuningSpace >(tuning_space_);
}
inline void TuningProgram::set_tuning_space(::Nrmk::IndyFramework::TuningSpace value) {
  
  tuning_space_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TuningProgram.tuning_space)
}

// .Nrmk.IndyFramework.TuningPrecision precision = 3;
inline void TuningProgram::clear_precision() {
  precision_ = 0;
}
inline ::Nrmk::IndyFramework::TuningPrecision TuningProgram::precision() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TuningProgram.precision)
  return static_cast< ::Nrmk::IndyFramework::TuningPrecision >(precision_);
}
inline void TuningProgram::set_precision(::Nrmk::IndyFramework::TuningPrecision value) {
  
  precision_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TuningProgram.precision)
}

// uint32 vel_level_max = 4;
inline void TuningProgram::clear_vel_level_max() {
  vel_level_max_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TuningProgram::vel_level_max() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TuningProgram.vel_level_max)
  return vel_level_max_;
}
inline void TuningProgram::set_vel_level_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vel_level_max_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TuningProgram.vel_level_max)
}

// -------------------------------------------------------------------

// ProgramInfo

// string path = 1;
inline void ProgramInfo::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProgramInfo::path() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramInfo.path)
  return path_.GetNoArena();
}
inline void ProgramInfo::set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramInfo.path)
}
inline void ProgramInfo::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.ProgramInfo.path)
}
inline void ProgramInfo::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.ProgramInfo.path)
}
inline void ProgramInfo::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.ProgramInfo.path)
}
inline std::string* ProgramInfo::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ProgramInfo.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProgramInfo::release_path() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ProgramInfo.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProgramInfo::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ProgramInfo.path)
}

// uint64 size = 2;
inline void ProgramInfo::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProgramInfo::size() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramInfo.size)
  return size_;
}
inline void ProgramInfo::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramInfo.size)
}

// string timestamp = 3;
inline void ProgramInfo::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProgramInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ProgramInfo.timestamp)
  return timestamp_.GetNoArena();
}
inline void ProgramInfo::set_timestamp(const std::string& value) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ProgramInfo.timestamp)
}
inline void ProgramInfo::set_timestamp(std::string&& value) {
  
  timestamp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.ProgramInfo.timestamp)
}
inline void ProgramInfo::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.ProgramInfo.timestamp)
}
inline void ProgramInfo::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.ProgramInfo.timestamp)
}
inline std::string* ProgramInfo::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ProgramInfo.timestamp)
  return timestamp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProgramInfo::release_timestamp() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ProgramInfo.timestamp)
  
  return timestamp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProgramInfo::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ProgramInfo.timestamp)
}

// -------------------------------------------------------------------

// Variable

// string name = 1;
inline void Variable::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Variable::name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Variable.name)
  return name_.GetNoArena();
}
inline void Variable::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Variable.name)
}
inline void Variable::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.Variable.name)
}
inline void Variable::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.Variable.name)
}
inline void Variable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.Variable.name)
}
inline std::string* Variable::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Variable.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Variable::release_name() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Variable.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Variable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Variable.name)
}

// int32 addr = 2;
inline void Variable::clear_addr() {
  addr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Variable::addr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Variable.addr)
  return addr_;
}
inline void Variable::set_addr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addr_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Variable.addr)
}

// string type = 3;
inline void Variable::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Variable::type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Variable.type)
  return type_.GetNoArena();
}
inline void Variable::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Variable.type)
}
inline void Variable::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.Variable.type)
}
inline void Variable::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.Variable.type)
}
inline void Variable::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.Variable.type)
}
inline std::string* Variable::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.Variable.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Variable::release_type() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.Variable.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Variable::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.Variable.type)
}

// bool in_watching = 4;
inline void Variable::clear_in_watching() {
  in_watching_ = false;
}
inline bool Variable::in_watching() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.Variable.in_watching)
  return in_watching_;
}
inline void Variable::set_in_watching(bool value) {
  
  in_watching_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.Variable.in_watching)
}

// -------------------------------------------------------------------

// IntVariable

// int32 addr = 1;
inline void IntVariable::clear_addr() {
  addr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntVariable::addr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IntVariable.addr)
  return addr_;
}
inline void IntVariable::set_addr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addr_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IntVariable.addr)
}

// int64 value = 2;
inline void IntVariable::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntVariable::value() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IntVariable.value)
  return value_;
}
inline void IntVariable::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.IntVariable.value)
}

// -------------------------------------------------------------------

// ModbusVariable

// string name = 1;
inline void ModbusVariable::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModbusVariable::name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusVariable.name)
  return name_.GetNoArena();
}
inline void ModbusVariable::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ModbusVariable.name)
}
inline void ModbusVariable::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.ModbusVariable.name)
}
inline void ModbusVariable::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.ModbusVariable.name)
}
inline void ModbusVariable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.ModbusVariable.name)
}
inline std::string* ModbusVariable::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ModbusVariable.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModbusVariable::release_name() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ModbusVariable.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModbusVariable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ModbusVariable.name)
}

// int32 addr = 2;
inline void ModbusVariable::clear_addr() {
  addr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModbusVariable::addr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusVariable.addr)
  return addr_;
}
inline void ModbusVariable::set_addr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addr_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ModbusVariable.addr)
}

// int32 value = 3;
inline void ModbusVariable::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModbusVariable::value() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusVariable.value)
  return value_;
}
inline void ModbusVariable::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ModbusVariable.value)
}

// .Nrmk.IndyFramework.ModbusVariable.SignalType signal_type = 4;
inline void ModbusVariable::clear_signal_type() {
  signal_type_ = 0;
}
inline ::Nrmk::IndyFramework::ModbusVariable_SignalType ModbusVariable::signal_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusVariable.signal_type)
  return static_cast< ::Nrmk::IndyFramework::ModbusVariable_SignalType >(signal_type_);
}
inline void ModbusVariable::set_signal_type(::Nrmk::IndyFramework::ModbusVariable_SignalType value) {
  
  signal_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ModbusVariable.signal_type)
}

// -------------------------------------------------------------------

// BoolVariable

// int32 addr = 1;
inline void BoolVariable::clear_addr() {
  addr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoolVariable::addr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BoolVariable.addr)
  return addr_;
}
inline void BoolVariable::set_addr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addr_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BoolVariable.addr)
}

// bool value = 2;
inline void BoolVariable::clear_value() {
  value_ = false;
}
inline bool BoolVariable::value() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BoolVariable.value)
  return value_;
}
inline void BoolVariable::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.BoolVariable.value)
}

// -------------------------------------------------------------------

// FloatVariable

// int32 addr = 1;
inline void FloatVariable::clear_addr() {
  addr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FloatVariable::addr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FloatVariable.addr)
  return addr_;
}
inline void FloatVariable::set_addr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addr_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FloatVariable.addr)
}

// float value = 2;
inline void FloatVariable::clear_value() {
  value_ = 0;
}
inline float FloatVariable::value() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FloatVariable.value)
  return value_;
}
inline void FloatVariable::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.FloatVariable.value)
}

// -------------------------------------------------------------------

// JPosVariable

// int32 addr = 1;
inline void JPosVariable::clear_addr() {
  addr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JPosVariable::addr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.JPosVariable.addr)
  return addr_;
}
inline void JPosVariable::set_addr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addr_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.JPosVariable.addr)
}

// repeated float jpos = 2;
inline int JPosVariable::jpos_size() const {
  return jpos_.size();
}
inline void JPosVariable::clear_jpos() {
  jpos_.Clear();
}
inline float JPosVariable::jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.JPosVariable.jpos)
  return jpos_.Get(index);
}
inline void JPosVariable::set_jpos(int index, float value) {
  jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.JPosVariable.jpos)
}
inline void JPosVariable::add_jpos(float value) {
  jpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.JPosVariable.jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
JPosVariable::jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.JPosVariable.jpos)
  return jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
JPosVariable::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.JPosVariable.jpos)
  return &jpos_;
}

// -------------------------------------------------------------------

// TPosVariable

// int32 addr = 1;
inline void TPosVariable::clear_addr() {
  addr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TPosVariable::addr() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TPosVariable.addr)
  return addr_;
}
inline void TPosVariable::set_addr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addr_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TPosVariable.addr)
}

// repeated float tpos = 2;
inline int TPosVariable::tpos_size() const {
  return tpos_.size();
}
inline void TPosVariable::clear_tpos() {
  tpos_.Clear();
}
inline float TPosVariable::tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TPosVariable.tpos)
  return tpos_.Get(index);
}
inline void TPosVariable::set_tpos(int index, float value) {
  tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TPosVariable.tpos)
}
inline void TPosVariable::add_tpos(float value) {
  tpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TPosVariable.tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TPosVariable::tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TPosVariable.tpos)
  return tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TPosVariable::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TPosVariable.tpos)
  return &tpos_;
}

// -------------------------------------------------------------------

// ModbusServer

// string server_name = 1;
inline void ModbusServer::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModbusServer::server_name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusServer.server_name)
  return server_name_.GetNoArena();
}
inline void ModbusServer::set_server_name(const std::string& value) {
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ModbusServer.server_name)
}
inline void ModbusServer::set_server_name(std::string&& value) {
  
  server_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.ModbusServer.server_name)
}
inline void ModbusServer::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.ModbusServer.server_name)
}
inline void ModbusServer::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.ModbusServer.server_name)
}
inline std::string* ModbusServer::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ModbusServer.server_name)
  return server_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModbusServer::release_server_name() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ModbusServer.server_name)
  
  return server_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModbusServer::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ModbusServer.server_name)
}

// string ip = 2;
inline void ModbusServer::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModbusServer::ip() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusServer.ip)
  return ip_.GetNoArena();
}
inline void ModbusServer::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ModbusServer.ip)
}
inline void ModbusServer::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.ModbusServer.ip)
}
inline void ModbusServer::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.ModbusServer.ip)
}
inline void ModbusServer::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.ModbusServer.ip)
}
inline std::string* ModbusServer::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ModbusServer.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModbusServer::release_ip() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ModbusServer.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModbusServer::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ModbusServer.ip)
}

// int32 port = 3;
inline void ModbusServer::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModbusServer::port() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusServer.port)
  return port_;
}
inline void ModbusServer::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ModbusServer.port)
}

// repeated .Nrmk.IndyFramework.ModbusVariable variable_list = 4;
inline int ModbusServer::variable_list_size() const {
  return variable_list_.size();
}
inline void ModbusServer::clear_variable_list() {
  variable_list_.Clear();
}
inline ::Nrmk::IndyFramework::ModbusVariable* ModbusServer::mutable_variable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ModbusServer.variable_list)
  return variable_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >*
ModbusServer::mutable_variable_list() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ModbusServer.variable_list)
  return &variable_list_;
}
inline const ::Nrmk::IndyFramework::ModbusVariable& ModbusServer::variable_list(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusServer.variable_list)
  return variable_list_.Get(index);
}
inline ::Nrmk::IndyFramework::ModbusVariable* ModbusServer::add_variable_list() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ModbusServer.variable_list)
  return variable_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >&
ModbusServer::variable_list() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ModbusServer.variable_list)
  return variable_list_;
}

// -------------------------------------------------------------------

// ModbusVariableList

// repeated .Nrmk.IndyFramework.ModbusServer modbus_variables = 1;
inline int ModbusVariableList::modbus_variables_size() const {
  return modbus_variables_.size();
}
inline void ModbusVariableList::clear_modbus_variables() {
  modbus_variables_.Clear();
}
inline ::Nrmk::IndyFramework::ModbusServer* ModbusVariableList::mutable_modbus_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ModbusVariableList.modbus_variables)
  return modbus_variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusServer >*
ModbusVariableList::mutable_modbus_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ModbusVariableList.modbus_variables)
  return &modbus_variables_;
}
inline const ::Nrmk::IndyFramework::ModbusServer& ModbusVariableList::modbus_variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusVariableList.modbus_variables)
  return modbus_variables_.Get(index);
}
inline ::Nrmk::IndyFramework::ModbusServer* ModbusVariableList::add_modbus_variables() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ModbusVariableList.modbus_variables)
  return modbus_variables_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusServer >&
ModbusVariableList::modbus_variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ModbusVariableList.modbus_variables)
  return modbus_variables_;
}

// -------------------------------------------------------------------

// AllVars

// repeated .Nrmk.IndyFramework.Variable variables = 1;
inline int AllVars::variables_size() const {
  return variables_.size();
}
inline void AllVars::clear_variables() {
  variables_.Clear();
}
inline ::Nrmk::IndyFramework::Variable* AllVars::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.AllVars.variables)
  return variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Variable >*
AllVars::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.AllVars.variables)
  return &variables_;
}
inline const ::Nrmk::IndyFramework::Variable& AllVars::variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.AllVars.variables)
  return variables_.Get(index);
}
inline ::Nrmk::IndyFramework::Variable* AllVars::add_variables() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.AllVars.variables)
  return variables_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::Variable >&
AllVars::variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.AllVars.variables)
  return variables_;
}

// -------------------------------------------------------------------

// IntVars

// repeated .Nrmk.IndyFramework.IntVariable variables = 1;
inline int IntVars::variables_size() const {
  return variables_.size();
}
inline void IntVars::clear_variables() {
  variables_.Clear();
}
inline ::Nrmk::IndyFramework::IntVariable* IntVars::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.IntVars.variables)
  return variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >*
IntVars::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.IntVars.variables)
  return &variables_;
}
inline const ::Nrmk::IndyFramework::IntVariable& IntVars::variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.IntVars.variables)
  return variables_.Get(index);
}
inline ::Nrmk::IndyFramework::IntVariable* IntVars::add_variables() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.IntVars.variables)
  return variables_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::IntVariable >&
IntVars::variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.IntVars.variables)
  return variables_;
}

// -------------------------------------------------------------------

// ModbusVars

// repeated .Nrmk.IndyFramework.ModbusVariable variables = 1;
inline int ModbusVars::variables_size() const {
  return variables_.size();
}
inline void ModbusVars::clear_variables() {
  variables_.Clear();
}
inline ::Nrmk::IndyFramework::ModbusVariable* ModbusVars::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ModbusVars.variables)
  return variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >*
ModbusVars::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ModbusVars.variables)
  return &variables_;
}
inline const ::Nrmk::IndyFramework::ModbusVariable& ModbusVars::variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ModbusVars.variables)
  return variables_.Get(index);
}
inline ::Nrmk::IndyFramework::ModbusVariable* ModbusVars::add_variables() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ModbusVars.variables)
  return variables_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::ModbusVariable >&
ModbusVars::variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ModbusVars.variables)
  return variables_;
}

// -------------------------------------------------------------------

// BoolVars

// repeated .Nrmk.IndyFramework.BoolVariable variables = 1;
inline int BoolVars::variables_size() const {
  return variables_.size();
}
inline void BoolVars::clear_variables() {
  variables_.Clear();
}
inline ::Nrmk::IndyFramework::BoolVariable* BoolVars::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.BoolVars.variables)
  return variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >*
BoolVars::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.BoolVars.variables)
  return &variables_;
}
inline const ::Nrmk::IndyFramework::BoolVariable& BoolVars::variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.BoolVars.variables)
  return variables_.Get(index);
}
inline ::Nrmk::IndyFramework::BoolVariable* BoolVars::add_variables() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.BoolVars.variables)
  return variables_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::BoolVariable >&
BoolVars::variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.BoolVars.variables)
  return variables_;
}

// -------------------------------------------------------------------

// FloatVars

// repeated .Nrmk.IndyFramework.FloatVariable variables = 1;
inline int FloatVars::variables_size() const {
  return variables_.size();
}
inline void FloatVars::clear_variables() {
  variables_.Clear();
}
inline ::Nrmk::IndyFramework::FloatVariable* FloatVars::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.FloatVars.variables)
  return variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >*
FloatVars::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.FloatVars.variables)
  return &variables_;
}
inline const ::Nrmk::IndyFramework::FloatVariable& FloatVars::variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.FloatVars.variables)
  return variables_.Get(index);
}
inline ::Nrmk::IndyFramework::FloatVariable* FloatVars::add_variables() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.FloatVars.variables)
  return variables_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::FloatVariable >&
FloatVars::variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.FloatVars.variables)
  return variables_;
}

// -------------------------------------------------------------------

// JPosVars

// repeated .Nrmk.IndyFramework.JPosVariable variables = 1;
inline int JPosVars::variables_size() const {
  return variables_.size();
}
inline void JPosVars::clear_variables() {
  variables_.Clear();
}
inline ::Nrmk::IndyFramework::JPosVariable* JPosVars::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.JPosVars.variables)
  return variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >*
JPosVars::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.JPosVars.variables)
  return &variables_;
}
inline const ::Nrmk::IndyFramework::JPosVariable& JPosVars::variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.JPosVars.variables)
  return variables_.Get(index);
}
inline ::Nrmk::IndyFramework::JPosVariable* JPosVars::add_variables() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.JPosVars.variables)
  return variables_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::JPosVariable >&
JPosVars::variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.JPosVars.variables)
  return variables_;
}

// -------------------------------------------------------------------

// TPosVars

// repeated .Nrmk.IndyFramework.TPosVariable variables = 1;
inline int TPosVars::variables_size() const {
  return variables_.size();
}
inline void TPosVars::clear_variables() {
  variables_.Clear();
}
inline ::Nrmk::IndyFramework::TPosVariable* TPosVars::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TPosVars.variables)
  return variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >*
TPosVars::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TPosVars.variables)
  return &variables_;
}
inline const ::Nrmk::IndyFramework::TPosVariable& TPosVars::variables(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TPosVars.variables)
  return variables_.Get(index);
}
inline ::Nrmk::IndyFramework::TPosVariable* TPosVars::add_variables() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TPosVars.variables)
  return variables_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::TPosVariable >&
TPosVars::variables() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TPosVars.variables)
  return variables_;
}

// -------------------------------------------------------------------

// InverseKinematicsReq

// repeated float tpos = 1;
inline int InverseKinematicsReq::tpos_size() const {
  return tpos_.size();
}
inline void InverseKinematicsReq::clear_tpos() {
  tpos_.Clear();
}
inline float InverseKinematicsReq::tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.InverseKinematicsReq.tpos)
  return tpos_.Get(index);
}
inline void InverseKinematicsReq::set_tpos(int index, float value) {
  tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.InverseKinematicsReq.tpos)
}
inline void InverseKinematicsReq::add_tpos(float value) {
  tpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.InverseKinematicsReq.tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
InverseKinematicsReq::tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.InverseKinematicsReq.tpos)
  return tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
InverseKinematicsReq::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.InverseKinematicsReq.tpos)
  return &tpos_;
}

// repeated float init_jpos = 2;
inline int InverseKinematicsReq::init_jpos_size() const {
  return init_jpos_.size();
}
inline void InverseKinematicsReq::clear_init_jpos() {
  init_jpos_.Clear();
}
inline float InverseKinematicsReq::init_jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.InverseKinematicsReq.init_jpos)
  return init_jpos_.Get(index);
}
inline void InverseKinematicsReq::set_init_jpos(int index, float value) {
  init_jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.InverseKinematicsReq.init_jpos)
}
inline void InverseKinematicsReq::add_init_jpos(float value) {
  init_jpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.InverseKinematicsReq.init_jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
InverseKinematicsReq::init_jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.InverseKinematicsReq.init_jpos)
  return init_jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
InverseKinematicsReq::mutable_init_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.InverseKinematicsReq.init_jpos)
  return &init_jpos_;
}

// -------------------------------------------------------------------

// InverseKinematicsRes

// repeated float jpos = 1;
inline int InverseKinematicsRes::jpos_size() const {
  return jpos_.size();
}
inline void InverseKinematicsRes::clear_jpos() {
  jpos_.Clear();
}
inline float InverseKinematicsRes::jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.InverseKinematicsRes.jpos)
  return jpos_.Get(index);
}
inline void InverseKinematicsRes::set_jpos(int index, float value) {
  jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.InverseKinematicsRes.jpos)
}
inline void InverseKinematicsRes::add_jpos(float value) {
  jpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.InverseKinematicsRes.jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
InverseKinematicsRes::jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.InverseKinematicsRes.jpos)
  return jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
InverseKinematicsRes::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.InverseKinematicsRes.jpos)
  return &jpos_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool InverseKinematicsRes::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& InverseKinematicsRes::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.InverseKinematicsRes.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* InverseKinematicsRes::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.InverseKinematicsRes.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* InverseKinematicsRes::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.InverseKinematicsRes.response)
  return response_;
}
inline void InverseKinematicsRes::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.InverseKinematicsRes.response)
}

// -------------------------------------------------------------------

// ForwardKinematicsReq

// repeated float jpos = 1;
inline int ForwardKinematicsReq::jpos_size() const {
  return jpos_.size();
}
inline void ForwardKinematicsReq::clear_jpos() {
  jpos_.Clear();
}
inline float ForwardKinematicsReq::jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForwardKinematicsReq.jpos)
  return jpos_.Get(index);
}
inline void ForwardKinematicsReq::set_jpos(int index, float value) {
  jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForwardKinematicsReq.jpos)
}
inline void ForwardKinematicsReq::add_jpos(float value) {
  jpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForwardKinematicsReq.jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ForwardKinematicsReq::jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForwardKinematicsReq.jpos)
  return jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ForwardKinematicsReq::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForwardKinematicsReq.jpos)
  return &jpos_;
}

// -------------------------------------------------------------------

// ForwardKinematicsRes

// repeated float tpos = 1;
inline int ForwardKinematicsRes::tpos_size() const {
  return tpos_.size();
}
inline void ForwardKinematicsRes::clear_tpos() {
  tpos_.Clear();
}
inline float ForwardKinematicsRes::tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForwardKinematicsRes.tpos)
  return tpos_.Get(index);
}
inline void ForwardKinematicsRes::set_tpos(int index, float value) {
  tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.ForwardKinematicsRes.tpos)
}
inline void ForwardKinematicsRes::add_tpos(float value) {
  tpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.ForwardKinematicsRes.tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ForwardKinematicsRes::tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.ForwardKinematicsRes.tpos)
  return tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ForwardKinematicsRes::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.ForwardKinematicsRes.tpos)
  return &tpos_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool ForwardKinematicsRes::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& ForwardKinematicsRes::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.ForwardKinematicsRes.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* ForwardKinematicsRes::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.ForwardKinematicsRes.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* ForwardKinematicsRes::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.ForwardKinematicsRes.response)
  return response_;
}
inline void ForwardKinematicsRes::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.ForwardKinematicsRes.response)
}

// -------------------------------------------------------------------

// CheckAproachRetractValidReq

// repeated float tpos = 1;
inline int CheckAproachRetractValidReq::tpos_size() const {
  return tpos_.size();
}
inline void CheckAproachRetractValidReq::clear_tpos() {
  tpos_.Clear();
}
inline float CheckAproachRetractValidReq::tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidReq.tpos)
  return tpos_.Get(index);
}
inline void CheckAproachRetractValidReq::set_tpos(int index, float value) {
  tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidReq.tpos)
}
inline void CheckAproachRetractValidReq::add_tpos(float value) {
  tpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CheckAproachRetractValidReq.tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CheckAproachRetractValidReq::tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.tpos)
  return tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CheckAproachRetractValidReq::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.tpos)
  return &tpos_;
}

// repeated float init_jpos = 2;
inline int CheckAproachRetractValidReq::init_jpos_size() const {
  return init_jpos_.size();
}
inline void CheckAproachRetractValidReq::clear_init_jpos() {
  init_jpos_.Clear();
}
inline float CheckAproachRetractValidReq::init_jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidReq.init_jpos)
  return init_jpos_.Get(index);
}
inline void CheckAproachRetractValidReq::set_init_jpos(int index, float value) {
  init_jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidReq.init_jpos)
}
inline void CheckAproachRetractValidReq::add_init_jpos(float value) {
  init_jpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CheckAproachRetractValidReq.init_jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CheckAproachRetractValidReq::init_jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.init_jpos)
  return init_jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CheckAproachRetractValidReq::mutable_init_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.init_jpos)
  return &init_jpos_;
}

// repeated float pre_tpos = 3;
inline int CheckAproachRetractValidReq::pre_tpos_size() const {
  return pre_tpos_.size();
}
inline void CheckAproachRetractValidReq::clear_pre_tpos() {
  pre_tpos_.Clear();
}
inline float CheckAproachRetractValidReq::pre_tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidReq.pre_tpos)
  return pre_tpos_.Get(index);
}
inline void CheckAproachRetractValidReq::set_pre_tpos(int index, float value) {
  pre_tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidReq.pre_tpos)
}
inline void CheckAproachRetractValidReq::add_pre_tpos(float value) {
  pre_tpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CheckAproachRetractValidReq.pre_tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CheckAproachRetractValidReq::pre_tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.pre_tpos)
  return pre_tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CheckAproachRetractValidReq::mutable_pre_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.pre_tpos)
  return &pre_tpos_;
}

// repeated float post_tpos = 4;
inline int CheckAproachRetractValidReq::post_tpos_size() const {
  return post_tpos_.size();
}
inline void CheckAproachRetractValidReq::clear_post_tpos() {
  post_tpos_.Clear();
}
inline float CheckAproachRetractValidReq::post_tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidReq.post_tpos)
  return post_tpos_.Get(index);
}
inline void CheckAproachRetractValidReq::set_post_tpos(int index, float value) {
  post_tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidReq.post_tpos)
}
inline void CheckAproachRetractValidReq::add_post_tpos(float value) {
  post_tpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CheckAproachRetractValidReq.post_tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CheckAproachRetractValidReq::post_tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.post_tpos)
  return post_tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CheckAproachRetractValidReq::mutable_post_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CheckAproachRetractValidReq.post_tpos)
  return &post_tpos_;
}

// -------------------------------------------------------------------

// CheckAproachRetractValidRes

// bool is_valid = 1;
inline void CheckAproachRetractValidRes::clear_is_valid() {
  is_valid_ = false;
}
inline bool CheckAproachRetractValidRes::is_valid() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidRes.is_valid)
  return is_valid_;
}
inline void CheckAproachRetractValidRes::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidRes.is_valid)
}

// repeated float tar_pos = 2;
inline int CheckAproachRetractValidRes::tar_pos_size() const {
  return tar_pos_.size();
}
inline void CheckAproachRetractValidRes::clear_tar_pos() {
  tar_pos_.Clear();
}
inline float CheckAproachRetractValidRes::tar_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidRes.tar_pos)
  return tar_pos_.Get(index);
}
inline void CheckAproachRetractValidRes::set_tar_pos(int index, float value) {
  tar_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidRes.tar_pos)
}
inline void CheckAproachRetractValidRes::add_tar_pos(float value) {
  tar_pos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CheckAproachRetractValidRes.tar_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CheckAproachRetractValidRes::tar_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CheckAproachRetractValidRes.tar_pos)
  return tar_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CheckAproachRetractValidRes::mutable_tar_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CheckAproachRetractValidRes.tar_pos)
  return &tar_pos_;
}

// repeated float approach_pos = 3;
inline int CheckAproachRetractValidRes::approach_pos_size() const {
  return approach_pos_.size();
}
inline void CheckAproachRetractValidRes::clear_approach_pos() {
  approach_pos_.Clear();
}
inline float CheckAproachRetractValidRes::approach_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidRes.approach_pos)
  return approach_pos_.Get(index);
}
inline void CheckAproachRetractValidRes::set_approach_pos(int index, float value) {
  approach_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidRes.approach_pos)
}
inline void CheckAproachRetractValidRes::add_approach_pos(float value) {
  approach_pos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CheckAproachRetractValidRes.approach_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CheckAproachRetractValidRes::approach_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CheckAproachRetractValidRes.approach_pos)
  return approach_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CheckAproachRetractValidRes::mutable_approach_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CheckAproachRetractValidRes.approach_pos)
  return &approach_pos_;
}

// repeated float retract_pos = 4;
inline int CheckAproachRetractValidRes::retract_pos_size() const {
  return retract_pos_.size();
}
inline void CheckAproachRetractValidRes::clear_retract_pos() {
  retract_pos_.Clear();
}
inline float CheckAproachRetractValidRes::retract_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidRes.retract_pos)
  return retract_pos_.Get(index);
}
inline void CheckAproachRetractValidRes::set_retract_pos(int index, float value) {
  retract_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CheckAproachRetractValidRes.retract_pos)
}
inline void CheckAproachRetractValidRes::add_retract_pos(float value) {
  retract_pos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CheckAproachRetractValidRes.retract_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CheckAproachRetractValidRes::retract_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CheckAproachRetractValidRes.retract_pos)
  return retract_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CheckAproachRetractValidRes::mutable_retract_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CheckAproachRetractValidRes.retract_pos)
  return &retract_pos_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool CheckAproachRetractValidRes::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& CheckAproachRetractValidRes::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CheckAproachRetractValidRes.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* CheckAproachRetractValidRes::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.CheckAproachRetractValidRes.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* CheckAproachRetractValidRes::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.CheckAproachRetractValidRes.response)
  return response_;
}
inline void CheckAproachRetractValidRes::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.CheckAproachRetractValidRes.response)
}

// -------------------------------------------------------------------

// GetPalletPointListReq

// repeated float tpos = 1;
inline int GetPalletPointListReq::tpos_size() const {
  return tpos_.size();
}
inline void GetPalletPointListReq::clear_tpos() {
  tpos_.Clear();
}
inline float GetPalletPointListReq::tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListReq.tpos)
  return tpos_.Get(index);
}
inline void GetPalletPointListReq::set_tpos(int index, float value) {
  tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetPalletPointListReq.tpos)
}
inline void GetPalletPointListReq::add_tpos(float value) {
  tpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.GetPalletPointListReq.tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetPalletPointListReq::tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.GetPalletPointListReq.tpos)
  return tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetPalletPointListReq::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.GetPalletPointListReq.tpos)
  return &tpos_;
}

// repeated float jpos = 2;
inline int GetPalletPointListReq::jpos_size() const {
  return jpos_.size();
}
inline void GetPalletPointListReq::clear_jpos() {
  jpos_.Clear();
}
inline float GetPalletPointListReq::jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListReq.jpos)
  return jpos_.Get(index);
}
inline void GetPalletPointListReq::set_jpos(int index, float value) {
  jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetPalletPointListReq.jpos)
}
inline void GetPalletPointListReq::add_jpos(float value) {
  jpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.GetPalletPointListReq.jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetPalletPointListReq::jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.GetPalletPointListReq.jpos)
  return jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetPalletPointListReq::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.GetPalletPointListReq.jpos)
  return &jpos_;
}

// repeated float pre_tpos = 3;
inline int GetPalletPointListReq::pre_tpos_size() const {
  return pre_tpos_.size();
}
inline void GetPalletPointListReq::clear_pre_tpos() {
  pre_tpos_.Clear();
}
inline float GetPalletPointListReq::pre_tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListReq.pre_tpos)
  return pre_tpos_.Get(index);
}
inline void GetPalletPointListReq::set_pre_tpos(int index, float value) {
  pre_tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetPalletPointListReq.pre_tpos)
}
inline void GetPalletPointListReq::add_pre_tpos(float value) {
  pre_tpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.GetPalletPointListReq.pre_tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetPalletPointListReq::pre_tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.GetPalletPointListReq.pre_tpos)
  return pre_tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetPalletPointListReq::mutable_pre_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.GetPalletPointListReq.pre_tpos)
  return &pre_tpos_;
}

// repeated float post_tpos = 4;
inline int GetPalletPointListReq::post_tpos_size() const {
  return post_tpos_.size();
}
inline void GetPalletPointListReq::clear_post_tpos() {
  post_tpos_.Clear();
}
inline float GetPalletPointListReq::post_tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListReq.post_tpos)
  return post_tpos_.Get(index);
}
inline void GetPalletPointListReq::set_post_tpos(int index, float value) {
  post_tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetPalletPointListReq.post_tpos)
}
inline void GetPalletPointListReq::add_post_tpos(float value) {
  post_tpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.GetPalletPointListReq.post_tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetPalletPointListReq::post_tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.GetPalletPointListReq.post_tpos)
  return post_tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetPalletPointListReq::mutable_post_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.GetPalletPointListReq.post_tpos)
  return &post_tpos_;
}

// int32 pallet_pattern = 5;
inline void GetPalletPointListReq::clear_pallet_pattern() {
  pallet_pattern_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPalletPointListReq::pallet_pattern() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListReq.pallet_pattern)
  return pallet_pattern_;
}
inline void GetPalletPointListReq::set_pallet_pattern(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pallet_pattern_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetPalletPointListReq.pallet_pattern)
}

// int32 width = 6;
inline void GetPalletPointListReq::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPalletPointListReq::width() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListReq.width)
  return width_;
}
inline void GetPalletPointListReq::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetPalletPointListReq.width)
}

// int32 height = 7;
inline void GetPalletPointListReq::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPalletPointListReq::height() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListReq.height)
  return height_;
}
inline void GetPalletPointListReq::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.GetPalletPointListReq.height)
}

// -------------------------------------------------------------------

// PalletPoint

// repeated float tar_pos = 1;
inline int PalletPoint::tar_pos_size() const {
  return tar_pos_.size();
}
inline void PalletPoint::clear_tar_pos() {
  tar_pos_.Clear();
}
inline float PalletPoint::tar_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PalletPoint.tar_pos)
  return tar_pos_.Get(index);
}
inline void PalletPoint::set_tar_pos(int index, float value) {
  tar_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PalletPoint.tar_pos)
}
inline void PalletPoint::add_tar_pos(float value) {
  tar_pos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PalletPoint.tar_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PalletPoint::tar_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PalletPoint.tar_pos)
  return tar_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PalletPoint::mutable_tar_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PalletPoint.tar_pos)
  return &tar_pos_;
}

// repeated float approach_pos = 2;
inline int PalletPoint::approach_pos_size() const {
  return approach_pos_.size();
}
inline void PalletPoint::clear_approach_pos() {
  approach_pos_.Clear();
}
inline float PalletPoint::approach_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PalletPoint.approach_pos)
  return approach_pos_.Get(index);
}
inline void PalletPoint::set_approach_pos(int index, float value) {
  approach_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PalletPoint.approach_pos)
}
inline void PalletPoint::add_approach_pos(float value) {
  approach_pos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PalletPoint.approach_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PalletPoint::approach_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PalletPoint.approach_pos)
  return approach_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PalletPoint::mutable_approach_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PalletPoint.approach_pos)
  return &approach_pos_;
}

// repeated float retract_pos = 3;
inline int PalletPoint::retract_pos_size() const {
  return retract_pos_.size();
}
inline void PalletPoint::clear_retract_pos() {
  retract_pos_.Clear();
}
inline float PalletPoint::retract_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PalletPoint.retract_pos)
  return retract_pos_.Get(index);
}
inline void PalletPoint::set_retract_pos(int index, float value) {
  retract_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PalletPoint.retract_pos)
}
inline void PalletPoint::add_retract_pos(float value) {
  retract_pos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PalletPoint.retract_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PalletPoint::retract_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PalletPoint.retract_pos)
  return retract_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PalletPoint::mutable_retract_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PalletPoint.retract_pos)
  return &retract_pos_;
}

// repeated float tar_jpos = 4;
inline int PalletPoint::tar_jpos_size() const {
  return tar_jpos_.size();
}
inline void PalletPoint::clear_tar_jpos() {
  tar_jpos_.Clear();
}
inline float PalletPoint::tar_jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.PalletPoint.tar_jpos)
  return tar_jpos_.Get(index);
}
inline void PalletPoint::set_tar_jpos(int index, float value) {
  tar_jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.PalletPoint.tar_jpos)
}
inline void PalletPoint::add_tar_jpos(float value) {
  tar_jpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.PalletPoint.tar_jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PalletPoint::tar_jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.PalletPoint.tar_jpos)
  return tar_jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PalletPoint::mutable_tar_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.PalletPoint.tar_jpos)
  return &tar_jpos_;
}

// -------------------------------------------------------------------

// GetPalletPointListRes

// repeated .Nrmk.IndyFramework.PalletPoint pallet_points = 1;
inline int GetPalletPointListRes::pallet_points_size() const {
  return pallet_points_.size();
}
inline void GetPalletPointListRes::clear_pallet_points() {
  pallet_points_.Clear();
}
inline ::Nrmk::IndyFramework::PalletPoint* GetPalletPointListRes::mutable_pallet_points(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.GetPalletPointListRes.pallet_points)
  return pallet_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::PalletPoint >*
GetPalletPointListRes::mutable_pallet_points() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.GetPalletPointListRes.pallet_points)
  return &pallet_points_;
}
inline const ::Nrmk::IndyFramework::PalletPoint& GetPalletPointListRes::pallet_points(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListRes.pallet_points)
  return pallet_points_.Get(index);
}
inline ::Nrmk::IndyFramework::PalletPoint* GetPalletPointListRes::add_pallet_points() {
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.GetPalletPointListRes.pallet_points)
  return pallet_points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Nrmk::IndyFramework::PalletPoint >&
GetPalletPointListRes::pallet_points() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.GetPalletPointListRes.pallet_points)
  return pallet_points_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool GetPalletPointListRes::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& GetPalletPointListRes::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.GetPalletPointListRes.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* GetPalletPointListRes::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.GetPalletPointListRes.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* GetPalletPointListRes::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.GetPalletPointListRes.response)
  return response_;
}
inline void GetPalletPointListRes::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.GetPalletPointListRes.response)
}

// -------------------------------------------------------------------

// CalculateRelativePoseReq

// repeated float start_pos = 1;
inline int CalculateRelativePoseReq::start_pos_size() const {
  return start_pos_.size();
}
inline void CalculateRelativePoseReq::clear_start_pos() {
  start_pos_.Clear();
}
inline float CalculateRelativePoseReq::start_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateRelativePoseReq.start_pos)
  return start_pos_.Get(index);
}
inline void CalculateRelativePoseReq::set_start_pos(int index, float value) {
  start_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateRelativePoseReq.start_pos)
}
inline void CalculateRelativePoseReq::add_start_pos(float value) {
  start_pos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CalculateRelativePoseReq.start_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateRelativePoseReq::start_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CalculateRelativePoseReq.start_pos)
  return start_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateRelativePoseReq::mutable_start_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CalculateRelativePoseReq.start_pos)
  return &start_pos_;
}

// repeated float end_pos = 2;
inline int CalculateRelativePoseReq::end_pos_size() const {
  return end_pos_.size();
}
inline void CalculateRelativePoseReq::clear_end_pos() {
  end_pos_.Clear();
}
inline float CalculateRelativePoseReq::end_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateRelativePoseReq.end_pos)
  return end_pos_.Get(index);
}
inline void CalculateRelativePoseReq::set_end_pos(int index, float value) {
  end_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateRelativePoseReq.end_pos)
}
inline void CalculateRelativePoseReq::add_end_pos(float value) {
  end_pos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CalculateRelativePoseReq.end_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateRelativePoseReq::end_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CalculateRelativePoseReq.end_pos)
  return end_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateRelativePoseReq::mutable_end_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CalculateRelativePoseReq.end_pos)
  return &end_pos_;
}

// .Nrmk.IndyFramework.TaskBaseType base_type = 3;
inline void CalculateRelativePoseReq::clear_base_type() {
  base_type_ = 0;
}
inline ::Nrmk::IndyFramework::TaskBaseType CalculateRelativePoseReq::base_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateRelativePoseReq.base_type)
  return static_cast< ::Nrmk::IndyFramework::TaskBaseType >(base_type_);
}
inline void CalculateRelativePoseReq::set_base_type(::Nrmk::IndyFramework::TaskBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateRelativePoseReq.base_type)
}

// -------------------------------------------------------------------

// CalculateRelativePoseRes

// repeated float relative_pos = 1;
inline int CalculateRelativePoseRes::relative_pos_size() const {
  return relative_pos_.size();
}
inline void CalculateRelativePoseRes::clear_relative_pos() {
  relative_pos_.Clear();
}
inline float CalculateRelativePoseRes::relative_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateRelativePoseRes.relative_pos)
  return relative_pos_.Get(index);
}
inline void CalculateRelativePoseRes::set_relative_pos(int index, float value) {
  relative_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateRelativePoseRes.relative_pos)
}
inline void CalculateRelativePoseRes::add_relative_pos(float value) {
  relative_pos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CalculateRelativePoseRes.relative_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateRelativePoseRes::relative_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CalculateRelativePoseRes.relative_pos)
  return relative_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateRelativePoseRes::mutable_relative_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CalculateRelativePoseRes.relative_pos)
  return &relative_pos_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool CalculateRelativePoseRes::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& CalculateRelativePoseRes::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateRelativePoseRes.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* CalculateRelativePoseRes::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.CalculateRelativePoseRes.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* CalculateRelativePoseRes::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.CalculateRelativePoseRes.response)
  return response_;
}
inline void CalculateRelativePoseRes::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.CalculateRelativePoseRes.response)
}

// -------------------------------------------------------------------

// CalculateCurrentPoseRelReq

// repeated float current_pos = 1;
inline int CalculateCurrentPoseRelReq::current_pos_size() const {
  return current_pos_.size();
}
inline void CalculateCurrentPoseRelReq::clear_current_pos() {
  current_pos_.Clear();
}
inline float CalculateCurrentPoseRelReq::current_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.current_pos)
  return current_pos_.Get(index);
}
inline void CalculateCurrentPoseRelReq::set_current_pos(int index, float value) {
  current_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.current_pos)
}
inline void CalculateCurrentPoseRelReq::add_current_pos(float value) {
  current_pos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.current_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateCurrentPoseRelReq::current_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.current_pos)
  return current_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateCurrentPoseRelReq::mutable_current_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.current_pos)
  return &current_pos_;
}

// repeated float relative_pos = 2;
inline int CalculateCurrentPoseRelReq::relative_pos_size() const {
  return relative_pos_.size();
}
inline void CalculateCurrentPoseRelReq::clear_relative_pos() {
  relative_pos_.Clear();
}
inline float CalculateCurrentPoseRelReq::relative_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.relative_pos)
  return relative_pos_.Get(index);
}
inline void CalculateCurrentPoseRelReq::set_relative_pos(int index, float value) {
  relative_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.relative_pos)
}
inline void CalculateCurrentPoseRelReq::add_relative_pos(float value) {
  relative_pos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.relative_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateCurrentPoseRelReq::relative_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.relative_pos)
  return relative_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateCurrentPoseRelReq::mutable_relative_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.relative_pos)
  return &relative_pos_;
}

// .Nrmk.IndyFramework.TaskBaseType base_type = 3;
inline void CalculateCurrentPoseRelReq::clear_base_type() {
  base_type_ = 0;
}
inline ::Nrmk::IndyFramework::TaskBaseType CalculateCurrentPoseRelReq::base_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.base_type)
  return static_cast< ::Nrmk::IndyFramework::TaskBaseType >(base_type_);
}
inline void CalculateCurrentPoseRelReq::set_base_type(::Nrmk::IndyFramework::TaskBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateCurrentPoseRelReq.base_type)
}

// -------------------------------------------------------------------

// CalculateCurrentPoseRelRes

// repeated float calculated_pos = 1;
inline int CalculateCurrentPoseRelRes::calculated_pos_size() const {
  return calculated_pos_.size();
}
inline void CalculateCurrentPoseRelRes::clear_calculated_pos() {
  calculated_pos_.Clear();
}
inline float CalculateCurrentPoseRelRes::calculated_pos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.calculated_pos)
  return calculated_pos_.Get(index);
}
inline void CalculateCurrentPoseRelRes::set_calculated_pos(int index, float value) {
  calculated_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.calculated_pos)
}
inline void CalculateCurrentPoseRelRes::add_calculated_pos(float value) {
  calculated_pos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.calculated_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateCurrentPoseRelRes::calculated_pos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.calculated_pos)
  return calculated_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateCurrentPoseRelRes::mutable_calculated_pos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.calculated_pos)
  return &calculated_pos_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool CalculateCurrentPoseRelRes::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& CalculateCurrentPoseRelRes::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* CalculateCurrentPoseRelRes::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* CalculateCurrentPoseRelRes::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.response)
  return response_;
}
inline void CalculateCurrentPoseRelRes::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.CalculateCurrentPoseRelRes.response)
}

// -------------------------------------------------------------------

// TeleOpDevice

// string name = 1;
inline void TeleOpDevice::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TeleOpDevice::name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpDevice.name)
  return name_.GetNoArena();
}
inline void TeleOpDevice::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpDevice.name)
}
inline void TeleOpDevice::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.TeleOpDevice.name)
}
inline void TeleOpDevice::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.TeleOpDevice.name)
}
inline void TeleOpDevice::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.TeleOpDevice.name)
}
inline std::string* TeleOpDevice::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TeleOpDevice.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TeleOpDevice::release_name() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TeleOpDevice.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TeleOpDevice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TeleOpDevice.name)
}

// .Nrmk.IndyFramework.TeleOpDevice.TeleOpDeviceType type = 2;
inline void TeleOpDevice::clear_type() {
  type_ = 0;
}
inline ::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType TeleOpDevice::type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpDevice.type)
  return static_cast< ::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType >(type_);
}
inline void TeleOpDevice::set_type(::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpDevice.type)
}

// string ip = 3;
inline void TeleOpDevice::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TeleOpDevice::ip() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpDevice.ip)
  return ip_.GetNoArena();
}
inline void TeleOpDevice::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpDevice.ip)
}
inline void TeleOpDevice::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.TeleOpDevice.ip)
}
inline void TeleOpDevice::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.TeleOpDevice.ip)
}
inline void TeleOpDevice::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.TeleOpDevice.ip)
}
inline std::string* TeleOpDevice::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TeleOpDevice.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TeleOpDevice::release_ip() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TeleOpDevice.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TeleOpDevice::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TeleOpDevice.ip)
}

// uint32 port = 4;
inline void TeleOpDevice::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeleOpDevice::port() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpDevice.port)
  return port_;
}
inline void TeleOpDevice::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpDevice.port)
}

// bool connected = 5;
inline void TeleOpDevice::clear_connected() {
  connected_ = false;
}
inline bool TeleOpDevice::connected() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpDevice.connected)
  return connected_;
}
inline void TeleOpDevice::set_connected(bool value) {
  
  connected_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpDevice.connected)
}

// -------------------------------------------------------------------

// TeleOpState

// .Nrmk.IndyFramework.TeleMode mode = 1;
inline void TeleOpState::clear_mode() {
  mode_ = 0;
}
inline ::Nrmk::IndyFramework::TeleMode TeleOpState::mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpState.mode)
  return static_cast< ::Nrmk::IndyFramework::TeleMode >(mode_);
}
inline void TeleOpState::set_mode(::Nrmk::IndyFramework::TeleMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpState.mode)
}

// .Nrmk.IndyFramework.TeleMethod method = 2;
inline void TeleOpState::clear_method() {
  method_ = 0;
}
inline ::Nrmk::IndyFramework::TeleMethod TeleOpState::method() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpState.method)
  return static_cast< ::Nrmk::IndyFramework::TeleMethod >(method_);
}
inline void TeleOpState::set_method(::Nrmk::IndyFramework::TeleMethod value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpState.method)
}

// -------------------------------------------------------------------

// TeleP

// repeated float tpos = 1;
inline int TeleP::tpos_size() const {
  return tpos_.size();
}
inline void TeleP::clear_tpos() {
  tpos_.Clear();
}
inline float TeleP::tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleP.tpos)
  return tpos_.Get(index);
}
inline void TeleP::set_tpos(int index, float value) {
  tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleP.tpos)
}
inline void TeleP::add_tpos(float value) {
  tpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TeleP.tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TeleP::tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TeleP.tpos)
  return tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TeleP::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TeleP.tpos)
  return &tpos_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool TeleP::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& TeleP::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleP.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* TeleP::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TeleP.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* TeleP::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TeleP.response)
  return response_;
}
inline void TeleP::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TeleP.response)
}

// -------------------------------------------------------------------

// TeleOpFileList

// repeated string files = 1;
inline int TeleOpFileList::files_size() const {
  return files_.size();
}
inline void TeleOpFileList::clear_files() {
  files_.Clear();
}
inline const std::string& TeleOpFileList::files(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpFileList.files)
  return files_.Get(index);
}
inline std::string* TeleOpFileList::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TeleOpFileList.files)
  return files_.Mutable(index);
}
inline void TeleOpFileList::set_files(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpFileList.files)
  files_.Mutable(index)->assign(value);
}
inline void TeleOpFileList::set_files(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleOpFileList.files)
  files_.Mutable(index)->assign(std::move(value));
}
inline void TeleOpFileList::set_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline void TeleOpFileList::set_files(int index, const char* value, size_t size) {
  files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline std::string* TeleOpFileList::add_files() {
  // @@protoc_insertion_point(field_add_mutable:Nrmk.IndyFramework.TeleOpFileList.files)
  return files_.Add();
}
inline void TeleOpFileList::add_files(const std::string& value) {
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline void TeleOpFileList::add_files(std::string&& value) {
  files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline void TeleOpFileList::add_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline void TeleOpFileList::add_files(const char* value, size_t size) {
  files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Nrmk.IndyFramework.TeleOpFileList.files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TeleOpFileList::files() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.TeleOpFileList.files)
  return files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TeleOpFileList::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.TeleOpFileList.files)
  return &files_;
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool TeleOpFileList::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& TeleOpFileList::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleOpFileList.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* TeleOpFileList::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TeleOpFileList.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* TeleOpFileList::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TeleOpFileList.response)
  return response_;
}
inline void TeleOpFileList::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TeleOpFileList.response)
}

// -------------------------------------------------------------------

// TeleFileReq

// string name = 1;
inline void TeleFileReq::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TeleFileReq::name() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TeleFileReq.name)
  return name_.GetNoArena();
}
inline void TeleFileReq::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TeleFileReq.name)
}
inline void TeleFileReq::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.TeleFileReq.name)
}
inline void TeleFileReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.TeleFileReq.name)
}
inline void TeleFileReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.TeleFileReq.name)
}
inline std::string* TeleFileReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TeleFileReq.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TeleFileReq::release_name() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TeleFileReq.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TeleFileReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TeleFileReq.name)
}

// -------------------------------------------------------------------

// TelePlayRate

// float rate = 1;
inline void TelePlayRate::clear_rate() {
  rate_ = 0;
}
inline float TelePlayRate::rate() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TelePlayRate.rate)
  return rate_;
}
inline void TelePlayRate::set_rate(float value) {
  
  rate_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TelePlayRate.rate)
}

// -------------------------------------------------------------------

// MoveTeleJReq

// repeated float jpos = 1;
inline int MoveTeleJReq::jpos_size() const {
  return jpos_.size();
}
inline void MoveTeleJReq::clear_jpos() {
  jpos_.Clear();
}
inline float MoveTeleJReq::jpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleJReq.jpos)
  return jpos_.Get(index);
}
inline void MoveTeleJReq::set_jpos(int index, float value) {
  jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleJReq.jpos)
}
inline void MoveTeleJReq::add_jpos(float value) {
  jpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveTeleJReq.jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MoveTeleJReq::jpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveTeleJReq.jpos)
  return jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MoveTeleJReq::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveTeleJReq.jpos)
  return &jpos_;
}

// float vel_ratio = 2;
inline void MoveTeleJReq::clear_vel_ratio() {
  vel_ratio_ = 0;
}
inline float MoveTeleJReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleJReq.vel_ratio)
  return vel_ratio_;
}
inline void MoveTeleJReq::set_vel_ratio(float value) {
  
  vel_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleJReq.vel_ratio)
}

// float acc_ratio = 3;
inline void MoveTeleJReq::clear_acc_ratio() {
  acc_ratio_ = 0;
}
inline float MoveTeleJReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleJReq.acc_ratio)
  return acc_ratio_;
}
inline void MoveTeleJReq::set_acc_ratio(float value) {
  
  acc_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleJReq.acc_ratio)
}

// .Nrmk.IndyFramework.TeleMethod method = 10;
inline void MoveTeleJReq::clear_method() {
  method_ = 0;
}
inline ::Nrmk::IndyFramework::TeleMethod MoveTeleJReq::method() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleJReq.method)
  return static_cast< ::Nrmk::IndyFramework::TeleMethod >(method_);
}
inline void MoveTeleJReq::set_method(::Nrmk::IndyFramework::TeleMethod value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleJReq.method)
}

// -------------------------------------------------------------------

// MoveTeleLReq

// repeated float tpos = 1;
inline int MoveTeleLReq::tpos_size() const {
  return tpos_.size();
}
inline void MoveTeleLReq::clear_tpos() {
  tpos_.Clear();
}
inline float MoveTeleLReq::tpos(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleLReq.tpos)
  return tpos_.Get(index);
}
inline void MoveTeleLReq::set_tpos(int index, float value) {
  tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleLReq.tpos)
}
inline void MoveTeleLReq::add_tpos(float value) {
  tpos_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveTeleLReq.tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MoveTeleLReq::tpos() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveTeleLReq.tpos)
  return tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MoveTeleLReq::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveTeleLReq.tpos)
  return &tpos_;
}

// float vel_ratio = 2;
inline void MoveTeleLReq::clear_vel_ratio() {
  vel_ratio_ = 0;
}
inline float MoveTeleLReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleLReq.vel_ratio)
  return vel_ratio_;
}
inline void MoveTeleLReq::set_vel_ratio(float value) {
  
  vel_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleLReq.vel_ratio)
}

// float acc_ratio = 3;
inline void MoveTeleLReq::clear_acc_ratio() {
  acc_ratio_ = 0;
}
inline float MoveTeleLReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleLReq.acc_ratio)
  return acc_ratio_;
}
inline void MoveTeleLReq::set_acc_ratio(float value) {
  
  acc_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleLReq.acc_ratio)
}

// .Nrmk.IndyFramework.TeleMethod method = 10;
inline void MoveTeleLReq::clear_method() {
  method_ = 0;
}
inline ::Nrmk::IndyFramework::TeleMethod MoveTeleLReq::method() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveTeleLReq.method)
  return static_cast< ::Nrmk::IndyFramework::TeleMethod >(method_);
}
inline void MoveTeleLReq::set_method(::Nrmk::IndyFramework::TeleMethod value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveTeleLReq.method)
}

// -------------------------------------------------------------------

// MoveLFReq

// .Nrmk.IndyFramework.TargetP target = 1;
inline bool MoveLFReq::has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline void MoveLFReq::clear_target() {
  if (GetArenaNoVirtual() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::Nrmk::IndyFramework::TargetP& MoveLFReq::target() const {
  const ::Nrmk::IndyFramework::TargetP* p = target_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.target)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::TargetP*>(
      &::Nrmk::IndyFramework::_TargetP_default_instance_);
}
inline ::Nrmk::IndyFramework::TargetP* MoveLFReq::release_target() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLFReq.target)
  
  ::Nrmk::IndyFramework::TargetP* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::TargetP* MoveLFReq::mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::TargetP>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLFReq.target)
  return target_;
}
inline void MoveLFReq::set_allocated_target(::Nrmk::IndyFramework::TargetP* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLFReq.target)
}

// .Nrmk.IndyFramework.BlendingType blending = 2;
inline bool MoveLFReq::has_blending() const {
  return this != internal_default_instance() && blending_ != nullptr;
}
inline void MoveLFReq::clear_blending() {
  if (GetArenaNoVirtual() == nullptr && blending_ != nullptr) {
    delete blending_;
  }
  blending_ = nullptr;
}
inline const ::Nrmk::IndyFramework::BlendingType& MoveLFReq::blending() const {
  const ::Nrmk::IndyFramework::BlendingType* p = blending_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.blending)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::BlendingType*>(
      &::Nrmk::IndyFramework::_BlendingType_default_instance_);
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLFReq::release_blending() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLFReq.blending)
  
  ::Nrmk::IndyFramework::BlendingType* temp = blending_;
  blending_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::BlendingType* MoveLFReq::mutable_blending() {
  
  if (blending_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::BlendingType>(GetArenaNoVirtual());
    blending_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLFReq.blending)
  return blending_;
}
inline void MoveLFReq::set_allocated_blending(::Nrmk::IndyFramework::BlendingType* blending) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blending_;
  }
  if (blending) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blending = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blending, submessage_arena);
    }
    
  } else {
    
  }
  blending_ = blending;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLFReq.blending)
}

// float vel_ratio = 3;
inline void MoveLFReq::clear_vel_ratio() {
  vel_ratio_ = 0;
}
inline float MoveLFReq::vel_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.vel_ratio)
  return vel_ratio_;
}
inline void MoveLFReq::set_vel_ratio(float value) {
  
  vel_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLFReq.vel_ratio)
}

// float acc_ratio = 4;
inline void MoveLFReq::clear_acc_ratio() {
  acc_ratio_ = 0;
}
inline float MoveLFReq::acc_ratio() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.acc_ratio)
  return acc_ratio_;
}
inline void MoveLFReq::set_acc_ratio(float value) {
  
  acc_ratio_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLFReq.acc_ratio)
}

// .Nrmk.IndyFramework.VelocityModeType vel_type = 5;
inline void MoveLFReq::clear_vel_type() {
  vel_type_ = 0;
}
inline ::Nrmk::IndyFramework::VelocityModeType MoveLFReq::vel_type() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.vel_type)
  return static_cast< ::Nrmk::IndyFramework::VelocityModeType >(vel_type_);
}
inline void MoveLFReq::set_vel_type(::Nrmk::IndyFramework::VelocityModeType value) {
  
  vel_type_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLFReq.vel_type)
}

// repeated float des_force = 6;
inline int MoveLFReq::des_force_size() const {
  return des_force_.size();
}
inline void MoveLFReq::clear_des_force() {
  des_force_.Clear();
}
inline float MoveLFReq::des_force(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.des_force)
  return des_force_.Get(index);
}
inline void MoveLFReq::set_des_force(int index, float value) {
  des_force_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLFReq.des_force)
}
inline void MoveLFReq::add_des_force(float value) {
  des_force_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveLFReq.des_force)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MoveLFReq::des_force() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveLFReq.des_force)
  return des_force_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MoveLFReq::mutable_des_force() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveLFReq.des_force)
  return &des_force_;
}

// repeated bool enabled_force = 7;
inline int MoveLFReq::enabled_force_size() const {
  return enabled_force_.size();
}
inline void MoveLFReq::clear_enabled_force() {
  enabled_force_.Clear();
}
inline bool MoveLFReq::enabled_force(int index) const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.enabled_force)
  return enabled_force_.Get(index);
}
inline void MoveLFReq::set_enabled_force(int index, bool value) {
  enabled_force_.Set(index, value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLFReq.enabled_force)
}
inline void MoveLFReq::add_enabled_force(bool value) {
  enabled_force_.Add(value);
  // @@protoc_insertion_point(field_add:Nrmk.IndyFramework.MoveLFReq.enabled_force)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
MoveLFReq::enabled_force() const {
  // @@protoc_insertion_point(field_list:Nrmk.IndyFramework.MoveLFReq.enabled_force)
  return enabled_force_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
MoveLFReq::mutable_enabled_force() {
  // @@protoc_insertion_point(field_mutable_list:Nrmk.IndyFramework.MoveLFReq.enabled_force)
  return &enabled_force_;
}

// .Nrmk.IndyFramework.MotionCondition post_condition = 20;
inline bool MoveLFReq::has_post_condition() const {
  return this != internal_default_instance() && post_condition_ != nullptr;
}
inline void MoveLFReq::clear_post_condition() {
  if (GetArenaNoVirtual() == nullptr && post_condition_ != nullptr) {
    delete post_condition_;
  }
  post_condition_ = nullptr;
}
inline const ::Nrmk::IndyFramework::MotionCondition& MoveLFReq::post_condition() const {
  const ::Nrmk::IndyFramework::MotionCondition* p = post_condition_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.post_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::MotionCondition*>(
      &::Nrmk::IndyFramework::_MotionCondition_default_instance_);
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLFReq::release_post_condition() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveLFReq.post_condition)
  
  ::Nrmk::IndyFramework::MotionCondition* temp = post_condition_;
  post_condition_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::MotionCondition* MoveLFReq::mutable_post_condition() {
  
  if (post_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::MotionCondition>(GetArenaNoVirtual());
    post_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveLFReq.post_condition)
  return post_condition_;
}
inline void MoveLFReq::set_allocated_post_condition(::Nrmk::IndyFramework::MotionCondition* post_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete post_condition_;
  }
  if (post_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_condition, submessage_arena);
    }
    
  } else {
    
  }
  post_condition_ = post_condition;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveLFReq.post_condition)
}

// bool teaching_mode = 30;
inline void MoveLFReq::clear_teaching_mode() {
  teaching_mode_ = false;
}
inline bool MoveLFReq::teaching_mode() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveLFReq.teaching_mode)
  return teaching_mode_;
}
inline void MoveLFReq::set_teaching_mode(bool value) {
  
  teaching_mode_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveLFReq.teaching_mode)
}

// -------------------------------------------------------------------

// MoveFLRes

// string msg = 100;
inline void MoveFLRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MoveFLRes::msg() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.MoveFLRes.msg)
  return msg_.GetNoArena();
}
inline void MoveFLRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.MoveFLRes.msg)
}
inline void MoveFLRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Nrmk.IndyFramework.MoveFLRes.msg)
}
inline void MoveFLRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Nrmk.IndyFramework.MoveFLRes.msg)
}
inline void MoveFLRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Nrmk.IndyFramework.MoveFLRes.msg)
}
inline std::string* MoveFLRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.MoveFLRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MoveFLRes::release_msg() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.MoveFLRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MoveFLRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.MoveFLRes.msg)
}

// -------------------------------------------------------------------

// TransformedFTSensorData

// float ft_Fx = 1;
inline void TransformedFTSensorData::clear_ft_fx() {
  ft_fx_ = 0;
}
inline float TransformedFTSensorData::ft_fx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TransformedFTSensorData.ft_Fx)
  return ft_fx_;
}
inline void TransformedFTSensorData::set_ft_fx(float value) {
  
  ft_fx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TransformedFTSensorData.ft_Fx)
}

// float ft_Fy = 2;
inline void TransformedFTSensorData::clear_ft_fy() {
  ft_fy_ = 0;
}
inline float TransformedFTSensorData::ft_fy() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TransformedFTSensorData.ft_Fy)
  return ft_fy_;
}
inline void TransformedFTSensorData::set_ft_fy(float value) {
  
  ft_fy_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TransformedFTSensorData.ft_Fy)
}

// float ft_Fz = 3;
inline void TransformedFTSensorData::clear_ft_fz() {
  ft_fz_ = 0;
}
inline float TransformedFTSensorData::ft_fz() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TransformedFTSensorData.ft_Fz)
  return ft_fz_;
}
inline void TransformedFTSensorData::set_ft_fz(float value) {
  
  ft_fz_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TransformedFTSensorData.ft_Fz)
}

// float ft_Tx = 4;
inline void TransformedFTSensorData::clear_ft_tx() {
  ft_tx_ = 0;
}
inline float TransformedFTSensorData::ft_tx() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TransformedFTSensorData.ft_Tx)
  return ft_tx_;
}
inline void TransformedFTSensorData::set_ft_tx(float value) {
  
  ft_tx_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TransformedFTSensorData.ft_Tx)
}

// float ft_Ty = 5;
inline void TransformedFTSensorData::clear_ft_ty() {
  ft_ty_ = 0;
}
inline float TransformedFTSensorData::ft_ty() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TransformedFTSensorData.ft_Ty)
  return ft_ty_;
}
inline void TransformedFTSensorData::set_ft_ty(float value) {
  
  ft_ty_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TransformedFTSensorData.ft_Ty)
}

// float ft_Tz = 6;
inline void TransformedFTSensorData::clear_ft_tz() {
  ft_tz_ = 0;
}
inline float TransformedFTSensorData::ft_tz() const {
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TransformedFTSensorData.ft_Tz)
  return ft_tz_;
}
inline void TransformedFTSensorData::set_ft_tz(float value) {
  
  ft_tz_ = value;
  // @@protoc_insertion_point(field_set:Nrmk.IndyFramework.TransformedFTSensorData.ft_Tz)
}

// .Nrmk.IndyFramework.Response response = 100;
inline bool TransformedFTSensorData::has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline const ::Nrmk::IndyFramework::Response& TransformedFTSensorData::response() const {
  const ::Nrmk::IndyFramework::Response* p = response_;
  // @@protoc_insertion_point(field_get:Nrmk.IndyFramework.TransformedFTSensorData.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Nrmk::IndyFramework::Response*>(
      &::Nrmk::IndyFramework::_Response_default_instance_);
}
inline ::Nrmk::IndyFramework::Response* TransformedFTSensorData::release_response() {
  // @@protoc_insertion_point(field_release:Nrmk.IndyFramework.TransformedFTSensorData.response)
  
  ::Nrmk::IndyFramework::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Nrmk::IndyFramework::Response* TransformedFTSensorData::mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Nrmk::IndyFramework::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Nrmk.IndyFramework.TransformedFTSensorData.response)
  return response_;
}
inline void TransformedFTSensorData::set_allocated_response(::Nrmk::IndyFramework::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Nrmk.IndyFramework.TransformedFTSensorData.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IndyFramework
}  // namespace Nrmk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Nrmk::IndyFramework::MotionCondition_ConditionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::MotionCondition_ConditionType>() {
  return ::Nrmk::IndyFramework::MotionCondition_ConditionType_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::MotionCondition_ReactionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::MotionCondition_ReactionType>() {
  return ::Nrmk::IndyFramework::MotionCondition_ReactionType_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::BlendingType_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::BlendingType_Type>() {
  return ::Nrmk::IndyFramework::BlendingType_Type_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::ModbusVariable_SignalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::ModbusVariable_SignalType>() {
  return ::Nrmk::IndyFramework::ModbusVariable_SignalType_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType>() {
  return ::Nrmk::IndyFramework::TeleOpDevice_TeleOpDeviceType_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::JointBaseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::JointBaseType>() {
  return ::Nrmk::IndyFramework::JointBaseType_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::TaskBaseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::TaskBaseType>() {
  return ::Nrmk::IndyFramework::TaskBaseType_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::VelocityModeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::VelocityModeType>() {
  return ::Nrmk::IndyFramework::VelocityModeType_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::CircularSettingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::CircularSettingType>() {
  return ::Nrmk::IndyFramework::CircularSettingType_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::CircularMovingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::CircularMovingType>() {
  return ::Nrmk::IndyFramework::CircularMovingType_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::TeleMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::TeleMode>() {
  return ::Nrmk::IndyFramework::TeleMode_descriptor();
}
template <> struct is_proto_enum< ::Nrmk::IndyFramework::TeleMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Nrmk::IndyFramework::TeleMethod>() {
  return ::Nrmk::IndyFramework::TeleMethod_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2eproto
