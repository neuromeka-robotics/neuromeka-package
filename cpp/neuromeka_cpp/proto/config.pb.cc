// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Nrmk {
namespace IndyFramework {
}  // namespace IndyFramework
}  // namespace Nrmk
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_config_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_config_2eproto = nullptr;
const ::uint32_t TableStruct_config_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;
const char descriptor_table_protodef_config_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\014config.proto\022\022Nrmk.IndyFramework\032\021conf"
    "ig_msgs.proto\032\021common_msgs.proto2\226\037\n\006Con"
    "fig\022E\n\013GetRefFrame\022\031.Nrmk.IndyFramework."
    "Empty\032\031.Nrmk.IndyFramework.Frame\"\000\022H\n\013Se"
    "tRefFrame\022\031.Nrmk.IndyFramework.Frame\032\034.N"
    "rmk.IndyFramework.Response\"\000\022W\n\021SetRefFr"
    "amePlanar\022\037.Nrmk.IndyFramework.PlanarFra"
    "me\032\037.Nrmk.IndyFramework.FrameResult\"\000\022I\n"
    "\014SetToolFrame\022\031.Nrmk.IndyFramework.Frame"
    "\032\034.Nrmk.IndyFramework.Response\"\000\022J\n\rSetS"
    "peedRatio\022\031.Nrmk.IndyFramework.Ratio\032\034.N"
    "rmk.IndyFramework.Response\"\000\022U\n\020SetFTsen"
    "sorFrame\022!.Nrmk.IndyFramework.FTsensorFr"
    "ame\032\034.Nrmk.IndyFramework.Response\"\000\022U\n\020G"
    "etFTsensorFrame\022\034.Nrmk.IndyFramework.Res"
    "ponse\032!.Nrmk.IndyFramework.FTsensorFrame"
    "\"\000\022S\n\017SetDIConfigList\022 .Nrmk.IndyFramewo"
    "rk.DIConfigList\032\034.Nrmk.IndyFramework.Res"
    "ponse\"\000\022P\n\017GetDIConfigList\022\031.Nrmk.IndyFr"
    "amework.Empty\032 .Nrmk.IndyFramework.DICon"
    "figList\"\000\022S\n\017SetDOConfigList\022 .Nrmk.Indy"
    "Framework.DOConfigList\032\034.Nrmk.IndyFramew"
    "ork.Response\"\000\022P\n\017GetDOConfigList\022\031.Nrmk"
    ".IndyFramework.Empty\032 .Nrmk.IndyFramewor"
    "k.DOConfigList\"\000\022O\n\017SetHomePosition\022\034.Nr"
    "mk.IndyFramework.JointPos\032\034.Nrmk.IndyFra"
    "mework.Response\"\000\022L\n\017GetHomePosition\022\031.N"
    "rmk.IndyFramework.Empty\032\034.Nrmk.IndyFrame"
    "work.JointPos\"\000\022Y\n\017SetAutoServoOff\022&.Nrm"
    "k.IndyFramework.AutoServoOffConfig\032\034.Nrm"
    "k.IndyFramework.Response\"\000\022V\n\017GetAutoSer"
    "voOff\022\031.Nrmk.IndyFramework.Empty\032&.Nrmk."
    "IndyFramework.AutoServoOffConfig\"\000\022W\n\023Se"
    "tJointControlGain\022 .Nrmk.IndyFramework.J"
    "ointGainSet\032\034.Nrmk.IndyFramework.Respons"
    "e\"\000\022T\n\023GetJointControlGain\022\031.Nrmk.IndyFr"
    "amework.Empty\032 .Nrmk.IndyFramework.Joint"
    "GainSet\"\000\022U\n\022SetTaskControlGain\022\037.Nrmk.I"
    "ndyFramework.TaskGainSet\032\034.Nrmk.IndyFram"
    "ework.Response\"\000\022R\n\022GetTaskControlGain\022\031"
    ".Nrmk.IndyFramework.Empty\032\037.Nrmk.IndyFra"
    "mework.TaskGainSet\"\000\022_\n\027SetImpedanceCont"
    "rolGain\022$.Nrmk.IndyFramework.ImpedanceGa"
    "inSet\032\034.Nrmk.IndyFramework.Response\"\000\022\\\n"
    "\027GetImpedanceControlGain\022\031.Nrmk.IndyFram"
    "ework.Empty\032$.Nrmk.IndyFramework.Impedan"
    "ceGainSet\"\000\022W\n\023SetForceControlGain\022 .Nrm"
    "k.IndyFramework.ForceGainSet\032\034.Nrmk.Indy"
    "Framework.Response\"\000\022T\n\023GetForceControlG"
    "ain\022\031.Nrmk.IndyFramework.Empty\032 .Nrmk.In"
    "dyFramework.ForceGainSet\"\000\022U\n\022SetTestCon"
    "trolGain\022\037.Nrmk.IndyFramework.TestGainSe"
    "t\032\034.Nrmk.IndyFramework.Response\"\000\022R\n\022Get"
    "TestControlGain\022\031.Nrmk.IndyFramework.Emp"
    "ty\032\037.Nrmk.IndyFramework.TestGainSet\"\000\022Y\n"
    "\024SetCustomControlGain\022!.Nrmk.IndyFramewo"
    "rk.CustomGainSet\032\034.Nrmk.IndyFramework.Re"
    "sponse\"\000\022V\n\024GetCustomControlGain\022\031.Nrmk."
    "IndyFramework.Empty\032!.Nrmk.IndyFramework"
    ".CustomGainSet\"\000\022g\n\031SetNewControllerTest"
    "OnOff\022*.Nrmk.IndyFramework.NewController"
    "TestState\032\034.Nrmk.IndyFramework.Response\""
    "\000\022i\n\036GetNewControllerTestOnOffState\022\031.Nr"
    "mk.IndyFramework.Empty\032*.Nrmk.IndyFramew"
    "ork.NewControllerTestState\"\000\022V\n\017SetFrict"
    "ionComp\022#.Nrmk.IndyFramework.FrictionCom"
    "pSet\032\034.Nrmk.IndyFramework.Response\"\000\022S\n\017"
    "GetFrictionComp\022\031.Nrmk.IndyFramework.Emp"
    "ty\032#.Nrmk.IndyFramework.FrictionCompSet\""
    "\000\022Q\n\013SetMountPos\022\".Nrmk.IndyFramework.Mo"
    "untingAngles\032\034.Nrmk.IndyFramework.Respon"
    "se\"\000\022N\n\013GetMountPos\022\031.Nrmk.IndyFramework"
    ".Empty\032\".Nrmk.IndyFramework.MountingAngl"
    "es\"\000\022U\n\017SetToolProperty\022\".Nrmk.IndyFrame"
    "work.ToolProperties\032\034.Nrmk.IndyFramework"
    ".Response\"\000\022R\n\017GetToolProperty\022\031.Nrmk.In"
    "dyFramework.Empty\032\".Nrmk.IndyFramework.T"
    "oolProperties\"\000\022Z\n\020SetCollSensLevel\022&.Nr"
    "mk.IndyFramework.CollisionSensLevel\032\034.Nr"
    "mk.IndyFramework.Response\"\000\022W\n\020GetCollSe"
    "nsLevel\022\031.Nrmk.IndyFramework.Empty\032&.Nrm"
    "k.IndyFramework.CollisionSensLevel\"\000\022[\n\020"
    "SetCollSensParam\022\'.Nrmk.IndyFramework.Co"
    "llisionThresholds\032\034.Nrmk.IndyFramework.R"
    "esponse\"\000\022X\n\020GetCollSensParam\022\031.Nrmk.Ind"
    "yFramework.Empty\032\'.Nrmk.IndyFramework.Co"
    "llisionThresholds\"\000\022T\n\rSetCollPolicy\022#.N"
    "rmk.IndyFramework.CollisionPolicy\032\034.Nrmk"
    ".IndyFramework.Response\"\000\022Q\n\rGetCollPoli"
    "cy\022\031.Nrmk.IndyFramework.Empty\032#.Nrmk.Ind"
    "yFramework.CollisionPolicy\"\000\022S\n\017SetSafet"
    "yLimits\022 .Nrmk.IndyFramework.SafetyLimit"
    "s\032\034.Nrmk.IndyFramework.Response\"\000\022P\n\017Get"
    "SafetyLimits\022\031.Nrmk.IndyFramework.Empty\032"
    " .Nrmk.IndyFramework.SafetyLimits\"\000\022[\n\023S"
    "etSafetyStopConfig\022$.Nrmk.IndyFramework."
    "SafetyStopConfig\032\034.Nrmk.IndyFramework.Re"
    "sponse\"\000\022X\n\023GetSafetyStopConfig\022\031.Nrmk.I"
    "ndyFramework.Empty\032$.Nrmk.IndyFramework."
    "SafetyStopConfig\"\000\022U\n\rSetCollTuning\022$.Nr"
    "mk.IndyFramework.CollTuningConfig\032\034.Nrmk"
    ".IndyFramework.Response\"\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_config_2eproto_deps[2] =
    {
        &::descriptor_table_common_5fmsgs_2eproto,
        &::descriptor_table_config_5fmsgs_2eproto,
};
static ::absl::once_flag descriptor_table_config_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_config_2eproto = {
    false,
    false,
    4073,
    descriptor_table_protodef_config_2eproto,
    "config.proto",
    &descriptor_table_config_2eproto_once,
    descriptor_table_config_2eproto_deps,
    2,
    0,
    schemas,
    file_default_instances,
    TableStruct_config_2eproto::offsets,
    nullptr,
    file_level_enum_descriptors_config_2eproto,
    file_level_service_descriptors_config_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_config_2eproto_getter() {
  return &descriptor_table_config_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_config_2eproto(&descriptor_table_config_2eproto);
namespace Nrmk {
namespace IndyFramework {
// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
