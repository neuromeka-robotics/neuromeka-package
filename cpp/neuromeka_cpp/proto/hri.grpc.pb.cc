// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hri.proto

#include "hri.pb.h"
#include "hri.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace IndyFramework {
namespace Protobuf {
namespace HRI {

static const char* HRI_method_names[] = {
  "/IndyFramework.Protobuf.HRI.HRI/ContyInit",
  "/IndyFramework.Protobuf.HRI.HRI/RobotUpdate",
  "/IndyFramework.Protobuf.HRI.HRI/ProgramUpdate",
  "/IndyFramework.Protobuf.HRI.HRI/ControlUpdate",
  "/IndyFramework.Protobuf.HRI.HRI/LinearUpdate",
  "/IndyFramework.Protobuf.HRI.HRI/JogJoint",
  "/IndyFramework.Protobuf.HRI.HRI/JogTask",
  "/IndyFramework.Protobuf.HRI.HRI/JogAxis",
  "/IndyFramework.Protobuf.HRI.HRI/HoldToMoveJ",
  "/IndyFramework.Protobuf.HRI.HRI/HoldToMoveL",
  "/IndyFramework.Protobuf.HRI.HRI/HoldToAxisJ",
  "/IndyFramework.Protobuf.HRI.HRI/StopMotion",
  "/IndyFramework.Protobuf.HRI.HRI/SetRefFrame",
  "/IndyFramework.Protobuf.HRI.HRI/SetRefFramePlanar",
  "/IndyFramework.Protobuf.HRI.HRI/SetToolFrame",
  "/IndyFramework.Protobuf.HRI.HRI/SetSpeedRatio",
  "/IndyFramework.Protobuf.HRI.HRI/SetSimulationMode",
  "/IndyFramework.Protobuf.HRI.HRI/SetDirectTeachingMode",
  "/IndyFramework.Protobuf.HRI.HRI/SetCustomControlMode",
  "/IndyFramework.Protobuf.HRI.HRI/GetCustomControlMode",
  "/IndyFramework.Protobuf.HRI.HRI/SetSensorlessComplianceMode",
  "/IndyFramework.Protobuf.HRI.HRI/GetBrakeControlStyle",
  "/IndyFramework.Protobuf.HRI.HRI/SetBrake",
  "/IndyFramework.Protobuf.HRI.HRI/SetServo",
  "/IndyFramework.Protobuf.HRI.HRI/SetAutoServoOff",
  "/IndyFramework.Protobuf.HRI.HRI/GetAutoServoOff",
  "/IndyFramework.Protobuf.HRI.HRI/ExecuteTool",
  "/IndyFramework.Protobuf.HRI.HRI/InverseKinematics",
  "/IndyFramework.Protobuf.HRI.HRI/CalculateRelativePose",
  "/IndyFramework.Protobuf.HRI.HRI/CalculateCurrentPoseRel",
  "/IndyFramework.Protobuf.HRI.HRI/SetManualRecoverMode",
  "/IndyFramework.Protobuf.HRI.HRI/SetServoRecover",
  "/IndyFramework.Protobuf.HRI.HRI/JogJointRecover",
  "/IndyFramework.Protobuf.HRI.HRI/Recover",
  "/IndyFramework.Protobuf.HRI.HRI/Reboot",
  "/IndyFramework.Protobuf.HRI.HRI/PowerOff",
  "/IndyFramework.Protobuf.HRI.HRI/UpdateIndySW",
  "/IndyFramework.Protobuf.HRI.HRI/GetFile",
  "/IndyFramework.Protobuf.HRI.HRI/SetFile",
  "/IndyFramework.Protobuf.HRI.HRI/RenameFile",
  "/IndyFramework.Protobuf.HRI.HRI/RemoveFile",
  "/IndyFramework.Protobuf.HRI.HRI/GetIndexProgramList",
  "/IndyFramework.Protobuf.HRI.HRI/GetProgramList",
  "/IndyFramework.Protobuf.HRI.HRI/GetLogList",
  "/IndyFramework.Protobuf.HRI.HRI/GetLogContent",
  "/IndyFramework.Protobuf.HRI.HRI/GetLogContentList",
  "/IndyFramework.Protobuf.HRI.HRI/GetLog",
  "/IndyFramework.Protobuf.HRI.HRI/GetVariableList",
  "/IndyFramework.Protobuf.HRI.HRI/GetMonitoringVariableList",
  "/IndyFramework.Protobuf.HRI.HRI/SetMonitoringVariableList",
  "/IndyFramework.Protobuf.HRI.HRI/GetPalletMakerList",
  "/IndyFramework.Protobuf.HRI.HRI/SetPalletMakerList",
  "/IndyFramework.Protobuf.HRI.HRI/CheckAproachRetractValid",
  "/IndyFramework.Protobuf.HRI.HRI/GetPalletPointList",
  "/IndyFramework.Protobuf.HRI.HRI/SetPalletPointList",
  "/IndyFramework.Protobuf.HRI.HRI/GetConveyor",
  "/IndyFramework.Protobuf.HRI.HRI/SetConveyorName",
  "/IndyFramework.Protobuf.HRI.HRI/SetConveyorByName",
  "/IndyFramework.Protobuf.HRI.HRI/SetConveyorEncoder",
  "/IndyFramework.Protobuf.HRI.HRI/SetConveyorTrigger",
  "/IndyFramework.Protobuf.HRI.HRI/SetConveyorOffset",
  "/IndyFramework.Protobuf.HRI.HRI/SetConveyorStartingPose",
  "/IndyFramework.Protobuf.HRI.HRI/SetConveyorTerminalPose",
  "/IndyFramework.Protobuf.HRI.HRI/GetConveyorState",
  "/IndyFramework.Protobuf.HRI.HRI/HoldToMoveConveyor",
  "/IndyFramework.Protobuf.HRI.HRI/GetConveyorList",
  "/IndyFramework.Protobuf.HRI.HRI/SetConveyorList",
  "/IndyFramework.Protobuf.HRI.HRI/SetInching",
  "/IndyFramework.Protobuf.HRI.HRI/StopInching",
  "/IndyFramework.Protobuf.HRI.HRI/SetArc",
  "/IndyFramework.Protobuf.HRI.HRI/SetTouch",
  "/IndyFramework.Protobuf.HRI.HRI/SetGas",
  "/IndyFramework.Protobuf.HRI.HRI/IsTouched",
  "/IndyFramework.Protobuf.HRI.HRI/GetVisionServerList",
  "/IndyFramework.Protobuf.HRI.HRI/SetVisionServerList",
  "/IndyFramework.Protobuf.HRI.HRI/GetVisionObjectList",
  "/IndyFramework.Protobuf.HRI.HRI/GetVisionDetection",
  "/IndyFramework.Protobuf.HRI.HRI/GetVisionRetrieval",
  "/IndyFramework.Protobuf.HRI.HRI/GetGcodeMotionList",
  "/IndyFramework.Protobuf.HRI.HRI/GetModbusServerList",
  "/IndyFramework.Protobuf.HRI.HRI/SetModbusServerList",
  "/IndyFramework.Protobuf.HRI.HRI/CheckModbusConnection",
  "/IndyFramework.Protobuf.HRI.HRI/GetToolFrameList",
  "/IndyFramework.Protobuf.HRI.HRI/SetToolFrameList",
  "/IndyFramework.Protobuf.HRI.HRI/GetRefFrameList",
  "/IndyFramework.Protobuf.HRI.HRI/SetRefFrameList",
  "/IndyFramework.Protobuf.HRI.HRI/GetCustomPosList",
  "/IndyFramework.Protobuf.HRI.HRI/SetCustomPosList",
  "/IndyFramework.Protobuf.HRI.HRI/SetJointControlGain",
  "/IndyFramework.Protobuf.HRI.HRI/GetJointControlGain",
  "/IndyFramework.Protobuf.HRI.HRI/SetTaskControlGain",
  "/IndyFramework.Protobuf.HRI.HRI/GetTaskControlGain",
  "/IndyFramework.Protobuf.HRI.HRI/SetImpedanceControlGain",
  "/IndyFramework.Protobuf.HRI.HRI/GetImpedanceControlGain",
  "/IndyFramework.Protobuf.HRI.HRI/SetForceControlGain",
  "/IndyFramework.Protobuf.HRI.HRI/GetForceControlGain",
  "/IndyFramework.Protobuf.HRI.HRI/SetExtAxisControlGain",
  "/IndyFramework.Protobuf.HRI.HRI/GetExtAxisControlGain",
  "/IndyFramework.Protobuf.HRI.HRI/SetSensorlessComplianceControlJointGain",
  "/IndyFramework.Protobuf.HRI.HRI/GetSensorlessComplianceControlJointGain",
  "/IndyFramework.Protobuf.HRI.HRI/SetSensorlessComplianceControlTaskGain",
  "/IndyFramework.Protobuf.HRI.HRI/GetSensorlessComplianceControlTaskGain",
  "/IndyFramework.Protobuf.HRI.HRI/SetFricComp",
  "/IndyFramework.Protobuf.HRI.HRI/GetFricComp",
  "/IndyFramework.Protobuf.HRI.HRI/SetHomePos",
  "/IndyFramework.Protobuf.HRI.HRI/GetHomePos",
  "/IndyFramework.Protobuf.HRI.HRI/SetMountPos",
  "/IndyFramework.Protobuf.HRI.HRI/GetMountPos",
  "/IndyFramework.Protobuf.HRI.HRI/GetPackagingPos",
  "/IndyFramework.Protobuf.HRI.HRI/SetToolProperty",
  "/IndyFramework.Protobuf.HRI.HRI/GetToolProperty",
  "/IndyFramework.Protobuf.HRI.HRI/GetOnStartProgramConfig",
  "/IndyFramework.Protobuf.HRI.HRI/SetOnStartProgramConfig",
  "/IndyFramework.Protobuf.HRI.HRI/GetSafetyLimitConfig",
  "/IndyFramework.Protobuf.HRI.HRI/SetSafetyLimitConfig",
  "/IndyFramework.Protobuf.HRI.HRI/GetSafetyStopConfig",
  "/IndyFramework.Protobuf.HRI.HRI/SetSafetyStopConfig",
  "/IndyFramework.Protobuf.HRI.HRI/GetSafetyConfigHash",
  "/IndyFramework.Protobuf.HRI.HRI/GetKinematicsParams",
  "/IndyFramework.Protobuf.HRI.HRI/KeyInit",
  "/IndyFramework.Protobuf.HRI.HRI/KeyData",
  "/IndyFramework.Protobuf.HRI.HRI/ProgramUpdateKey",
  "/IndyFramework.Protobuf.HRI.HRI/SetDirectTeachingModeKey",
  "/IndyFramework.Protobuf.HRI.HRI/GetAutoModeConfig",
  "/IndyFramework.Protobuf.HRI.HRI/SetAutoMode",
  "/IndyFramework.Protobuf.HRI.HRI/CheckAutoMode",
  "/IndyFramework.Protobuf.HRI.HRI/CheckReducedMode",
  "/IndyFramework.Protobuf.HRI.HRI/GetReducedRatio",
  "/IndyFramework.Protobuf.HRI.HRI/GetReducedSpeed",
  "/IndyFramework.Protobuf.HRI.HRI/SetReducedSpeed",
  "/IndyFramework.Protobuf.HRI.HRI/GetStopState",
  "/IndyFramework.Protobuf.HRI.HRI/GetSafetyFunctionState",
  "/IndyFramework.Protobuf.HRI.HRI/RequestSafetyFunction",
  "/IndyFramework.Protobuf.HRI.HRI/PlayProgram",
  "/IndyFramework.Protobuf.HRI.HRI/PlayIndexProgram",
  "/IndyFramework.Protobuf.HRI.HRI/PlayProgramLine",
  "/IndyFramework.Protobuf.HRI.HRI/ResumeProgram",
  "/IndyFramework.Protobuf.HRI.HRI/StopProgram",
  "/IndyFramework.Protobuf.HRI.HRI/PauseProgram",
  "/IndyFramework.Protobuf.HRI.HRI/SetDO",
  "/IndyFramework.Protobuf.HRI.HRI/SetAO",
  "/IndyFramework.Protobuf.HRI.HRI/SetEndDO",
  "/IndyFramework.Protobuf.HRI.HRI/SetEndAO",
  "/IndyFramework.Protobuf.HRI.HRI/SetToolList",
  "/IndyFramework.Protobuf.HRI.HRI/GetToolList",
  "/IndyFramework.Protobuf.HRI.HRI/SetDIConfigList",
  "/IndyFramework.Protobuf.HRI.HRI/GetDIConfigList",
  "/IndyFramework.Protobuf.HRI.HRI/SetDOConfigList",
  "/IndyFramework.Protobuf.HRI.HRI/GetDOConfigList",
  "/IndyFramework.Protobuf.HRI.HRI/SetCollSensLevel",
  "/IndyFramework.Protobuf.HRI.HRI/GetCollSensLevel",
  "/IndyFramework.Protobuf.HRI.HRI/SetCollPolicy",
  "/IndyFramework.Protobuf.HRI.HRI/GetCollPolicy",
  "/IndyFramework.Protobuf.HRI.HRI/SetCollSensParam",
  "/IndyFramework.Protobuf.HRI.HRI/GetCollSensParam",
  "/IndyFramework.Protobuf.HRI.HRI/InitCollSensParam",
  "/IndyFramework.Protobuf.HRI.HRI/PlayTuningProgram",
  "/IndyFramework.Protobuf.HRI.HRI/GetTeleOpDevice",
  "/IndyFramework.Protobuf.HRI.HRI/GetTeleOpState",
  "/IndyFramework.Protobuf.HRI.HRI/ConnectTeleOpDevice",
  "/IndyFramework.Protobuf.HRI.HRI/DisConnectTeleOpDevice",
  "/IndyFramework.Protobuf.HRI.HRI/ReadTeleOpInput",
  "/IndyFramework.Protobuf.HRI.HRI/StartTeleCalib",
  "/IndyFramework.Protobuf.HRI.HRI/StartTeleRecord",
  "/IndyFramework.Protobuf.HRI.HRI/StartTelePlay",
  "/IndyFramework.Protobuf.HRI.HRI/StartTeleJogL",
  "/IndyFramework.Protobuf.HRI.HRI/StartTeleJogJ",
  "/IndyFramework.Protobuf.HRI.HRI/StopTeleOp",
  "/IndyFramework.Protobuf.HRI.HRI/SetPlayRate",
  "/IndyFramework.Protobuf.HRI.HRI/GetPlayRate",
  "/IndyFramework.Protobuf.HRI.HRI/GetTeleFileList",
  "/IndyFramework.Protobuf.HRI.HRI/SaveTeleMotion",
  "/IndyFramework.Protobuf.HRI.HRI/LoadTeleMotion",
  "/IndyFramework.Protobuf.HRI.HRI/DeleteTeleMotion",
  "/IndyFramework.Protobuf.HRI.HRI/MoveTeleJ",
  "/IndyFramework.Protobuf.HRI.HRI/MoveTeleL",
  "/IndyFramework.Protobuf.HRI.HRI/SetTeleOpParams",
  "/IndyFramework.Protobuf.HRI.HRI/GetTeleOpParams",
  "/IndyFramework.Protobuf.HRI.HRI/SetFTSensorConfig",
  "/IndyFramework.Protobuf.HRI.HRI/GetFTSensorConfig",
  "/IndyFramework.Protobuf.HRI.HRI/GetFTSensorData",
  "/IndyFramework.Protobuf.HRI.HRI/GetLoadFactors",
  "/IndyFramework.Protobuf.HRI.HRI/SetSanderCommand",
  "/IndyFramework.Protobuf.HRI.HRI/GetSanderCommand",
  "/IndyFramework.Protobuf.HRI.HRI/SetSandingStopCondition",
  "/IndyFramework.Protobuf.HRI.HRI/GetSandingStopCondition",
  "/IndyFramework.Protobuf.HRI.HRI/GetGripperData",
  "/IndyFramework.Protobuf.HRI.HRI/SetGripperCommand",
  "/IndyFramework.Protobuf.HRI.HRI/SetSFDActivate",
  "/IndyFramework.Protobuf.HRI.HRI/IsSFDActivate",
  "/IndyFramework.Protobuf.HRI.HRI/SFDLogin",
  "/IndyFramework.Protobuf.HRI.HRI/IsSFDLogin",
  "/IndyFramework.Protobuf.HRI.HRI/SetSFDTarget",
  "/IndyFramework.Protobuf.HRI.HRI/SetSFDOption",
  "/IndyFramework.Protobuf.HRI.HRI/GetSFDProjList",
  "/IndyFramework.Protobuf.HRI.HRI/GetSFDCRI",
  "/IndyFramework.Protobuf.HRI.HRI/GetTactTime",
  "/IndyFramework.Protobuf.HRI.HRI/AddPhotoneoCalibPoint",
};

std::unique_ptr< HRI::Stub> HRI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HRI::Stub> stub(new HRI::Stub(channel, options));
  return stub;
}

HRI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ContyInit_(HRI_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RobotUpdate_(HRI_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProgramUpdate_(HRI_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ControlUpdate_(HRI_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LinearUpdate_(HRI_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JogJoint_(HRI_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JogTask_(HRI_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JogAxis_(HRI_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HoldToMoveJ_(HRI_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HoldToMoveL_(HRI_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HoldToAxisJ_(HRI_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopMotion_(HRI_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRefFrame_(HRI_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRefFramePlanar_(HRI_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetToolFrame_(HRI_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSpeedRatio_(HRI_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSimulationMode_(HRI_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDirectTeachingMode_(HRI_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCustomControlMode_(HRI_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCustomControlMode_(HRI_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSensorlessComplianceMode_(HRI_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBrakeControlStyle_(HRI_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBrake_(HRI_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetServo_(HRI_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAutoServoOff_(HRI_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAutoServoOff_(HRI_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteTool_(HRI_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InverseKinematics_(HRI_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalculateRelativePose_(HRI_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalculateCurrentPoseRel_(HRI_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetManualRecoverMode_(HRI_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetServoRecover_(HRI_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JogJointRecover_(HRI_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Recover_(HRI_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reboot_(HRI_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PowerOff_(HRI_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateIndySW_(HRI_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetFile_(HRI_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetFile_(HRI_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_RenameFile_(HRI_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveFile_(HRI_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIndexProgramList_(HRI_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProgramList_(HRI_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLogList_(HRI_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLogContent_(HRI_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetLogContentList_(HRI_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetLog_(HRI_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetVariableList_(HRI_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMonitoringVariableList_(HRI_method_names[48], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMonitoringVariableList_(HRI_method_names[49], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPalletMakerList_(HRI_method_names[50], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPalletMakerList_(HRI_method_names[51], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckAproachRetractValid_(HRI_method_names[52], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPalletPointList_(HRI_method_names[53], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPalletPointList_(HRI_method_names[54], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConveyor_(HRI_method_names[55], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetConveyorName_(HRI_method_names[56], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetConveyorByName_(HRI_method_names[57], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetConveyorEncoder_(HRI_method_names[58], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetConveyorTrigger_(HRI_method_names[59], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetConveyorOffset_(HRI_method_names[60], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetConveyorStartingPose_(HRI_method_names[61], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetConveyorTerminalPose_(HRI_method_names[62], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConveyorState_(HRI_method_names[63], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HoldToMoveConveyor_(HRI_method_names[64], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConveyorList_(HRI_method_names[65], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetConveyorList_(HRI_method_names[66], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetInching_(HRI_method_names[67], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopInching_(HRI_method_names[68], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetArc_(HRI_method_names[69], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTouch_(HRI_method_names[70], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetGas_(HRI_method_names[71], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsTouched_(HRI_method_names[72], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVisionServerList_(HRI_method_names[73], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetVisionServerList_(HRI_method_names[74], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVisionObjectList_(HRI_method_names[75], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVisionDetection_(HRI_method_names[76], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVisionRetrieval_(HRI_method_names[77], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGcodeMotionList_(HRI_method_names[78], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModbusServerList_(HRI_method_names[79], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetModbusServerList_(HRI_method_names[80], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckModbusConnection_(HRI_method_names[81], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetToolFrameList_(HRI_method_names[82], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetToolFrameList_(HRI_method_names[83], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRefFrameList_(HRI_method_names[84], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRefFrameList_(HRI_method_names[85], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCustomPosList_(HRI_method_names[86], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCustomPosList_(HRI_method_names[87], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetJointControlGain_(HRI_method_names[88], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointControlGain_(HRI_method_names[89], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTaskControlGain_(HRI_method_names[90], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTaskControlGain_(HRI_method_names[91], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetImpedanceControlGain_(HRI_method_names[92], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImpedanceControlGain_(HRI_method_names[93], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetForceControlGain_(HRI_method_names[94], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetForceControlGain_(HRI_method_names[95], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetExtAxisControlGain_(HRI_method_names[96], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExtAxisControlGain_(HRI_method_names[97], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSensorlessComplianceControlJointGain_(HRI_method_names[98], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSensorlessComplianceControlJointGain_(HRI_method_names[99], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSensorlessComplianceControlTaskGain_(HRI_method_names[100], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSensorlessComplianceControlTaskGain_(HRI_method_names[101], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFricComp_(HRI_method_names[102], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFricComp_(HRI_method_names[103], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetHomePos_(HRI_method_names[104], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHomePos_(HRI_method_names[105], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMountPos_(HRI_method_names[106], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMountPos_(HRI_method_names[107], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPackagingPos_(HRI_method_names[108], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetToolProperty_(HRI_method_names[109], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetToolProperty_(HRI_method_names[110], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOnStartProgramConfig_(HRI_method_names[111], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetOnStartProgramConfig_(HRI_method_names[112], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSafetyLimitConfig_(HRI_method_names[113], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSafetyLimitConfig_(HRI_method_names[114], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSafetyStopConfig_(HRI_method_names[115], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSafetyStopConfig_(HRI_method_names[116], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSafetyConfigHash_(HRI_method_names[117], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetKinematicsParams_(HRI_method_names[118], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KeyInit_(HRI_method_names[119], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KeyData_(HRI_method_names[120], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProgramUpdateKey_(HRI_method_names[121], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDirectTeachingModeKey_(HRI_method_names[122], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAutoModeConfig_(HRI_method_names[123], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAutoMode_(HRI_method_names[124], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckAutoMode_(HRI_method_names[125], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckReducedMode_(HRI_method_names[126], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReducedRatio_(HRI_method_names[127], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReducedSpeed_(HRI_method_names[128], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetReducedSpeed_(HRI_method_names[129], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStopState_(HRI_method_names[130], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSafetyFunctionState_(HRI_method_names[131], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestSafetyFunction_(HRI_method_names[132], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayProgram_(HRI_method_names[133], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayIndexProgram_(HRI_method_names[134], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayProgramLine_(HRI_method_names[135], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResumeProgram_(HRI_method_names[136], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopProgram_(HRI_method_names[137], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseProgram_(HRI_method_names[138], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDO_(HRI_method_names[139], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAO_(HRI_method_names[140], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEndDO_(HRI_method_names[141], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEndAO_(HRI_method_names[142], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetToolList_(HRI_method_names[143], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetToolList_(HRI_method_names[144], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDIConfigList_(HRI_method_names[145], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDIConfigList_(HRI_method_names[146], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDOConfigList_(HRI_method_names[147], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDOConfigList_(HRI_method_names[148], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCollSensLevel_(HRI_method_names[149], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCollSensLevel_(HRI_method_names[150], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCollPolicy_(HRI_method_names[151], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCollPolicy_(HRI_method_names[152], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCollSensParam_(HRI_method_names[153], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCollSensParam_(HRI_method_names[154], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InitCollSensParam_(HRI_method_names[155], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayTuningProgram_(HRI_method_names[156], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTeleOpDevice_(HRI_method_names[157], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTeleOpState_(HRI_method_names[158], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectTeleOpDevice_(HRI_method_names[159], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisConnectTeleOpDevice_(HRI_method_names[160], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadTeleOpInput_(HRI_method_names[161], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartTeleCalib_(HRI_method_names[162], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartTeleRecord_(HRI_method_names[163], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartTelePlay_(HRI_method_names[164], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartTeleJogL_(HRI_method_names[165], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartTeleJogJ_(HRI_method_names[166], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopTeleOp_(HRI_method_names[167], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPlayRate_(HRI_method_names[168], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPlayRate_(HRI_method_names[169], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTeleFileList_(HRI_method_names[170], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SaveTeleMotion_(HRI_method_names[171], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadTeleMotion_(HRI_method_names[172], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTeleMotion_(HRI_method_names[173], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveTeleJ_(HRI_method_names[174], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveTeleL_(HRI_method_names[175], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTeleOpParams_(HRI_method_names[176], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTeleOpParams_(HRI_method_names[177], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFTSensorConfig_(HRI_method_names[178], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFTSensorConfig_(HRI_method_names[179], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFTSensorData_(HRI_method_names[180], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLoadFactors_(HRI_method_names[181], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSanderCommand_(HRI_method_names[182], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSanderCommand_(HRI_method_names[183], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSandingStopCondition_(HRI_method_names[184], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSandingStopCondition_(HRI_method_names[185], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGripperData_(HRI_method_names[186], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetGripperCommand_(HRI_method_names[187], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSFDActivate_(HRI_method_names[188], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsSFDActivate_(HRI_method_names[189], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SFDLogin_(HRI_method_names[190], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsSFDLogin_(HRI_method_names[191], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSFDTarget_(HRI_method_names[192], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSFDOption_(HRI_method_names[193], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSFDProjList_(HRI_method_names[194], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSFDCRI_(HRI_method_names[195], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTactTime_(HRI_method_names[196], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPhotoneoCalibPoint_(HRI_method_names[197], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HRI::Stub::ContyInit(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ContyInitReq& request, ::IndyFramework::Protobuf::HRI::ContyInitRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::ContyInitReq, ::IndyFramework::Protobuf::HRI::ContyInitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ContyInit_, context, request, response);
}

void HRI::Stub::async::ContyInit(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ContyInitReq* request, ::IndyFramework::Protobuf::HRI::ContyInitRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::ContyInitReq, ::IndyFramework::Protobuf::HRI::ContyInitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContyInit_, context, request, response, std::move(f));
}

void HRI::Stub::async::ContyInit(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ContyInitReq* request, ::IndyFramework::Protobuf::HRI::ContyInitRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContyInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::ContyInitRes>* HRI::Stub::PrepareAsyncContyInitRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ContyInitReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::ContyInitRes, ::IndyFramework::Protobuf::HRI::ContyInitReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ContyInit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::ContyInitRes>* HRI::Stub::AsyncContyInitRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ContyInitReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncContyInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::RobotUpdate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::RobotData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::RobotData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RobotUpdate_, context, request, response);
}

void HRI::Stub::async::RobotUpdate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::RobotData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::RobotData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RobotUpdate_, context, request, response, std::move(f));
}

void HRI::Stub::async::RobotUpdate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::RobotData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RobotUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::RobotData>* HRI::Stub::PrepareAsyncRobotUpdateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::RobotData, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RobotUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::RobotData>* HRI::Stub::AsyncRobotUpdateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRobotUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::ProgramUpdate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::ProgramData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ProgramData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProgramUpdate_, context, request, response);
}

void HRI::Stub::async::ProgramUpdate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ProgramData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ProgramData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProgramUpdate_, context, request, response, std::move(f));
}

void HRI::Stub::async::ProgramUpdate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ProgramData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProgramUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::ProgramData>* HRI::Stub::PrepareAsyncProgramUpdateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::ProgramData, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProgramUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::ProgramData>* HRI::Stub::AsyncProgramUpdateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProgramUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::ControlUpdate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::ControlData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ControlData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ControlUpdate_, context, request, response);
}

void HRI::Stub::async::ControlUpdate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ControlData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ControlData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ControlUpdate_, context, request, response, std::move(f));
}

void HRI::Stub::async::ControlUpdate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ControlData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ControlUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::ControlData>* HRI::Stub::PrepareAsyncControlUpdateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::ControlData, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ControlUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::ControlData>* HRI::Stub::AsyncControlUpdateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncControlUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::LinearUpdate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::LinearData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::LinearData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LinearUpdate_, context, request, response);
}

void HRI::Stub::async::LinearUpdate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::LinearData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::LinearData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LinearUpdate_, context, request, response, std::move(f));
}

void HRI::Stub::async::LinearUpdate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::LinearData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LinearUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::LinearData>* HRI::Stub::PrepareAsyncLinearUpdateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::LinearData, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LinearUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::LinearData>* HRI::Stub::AsyncLinearUpdateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLinearUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::JogJoint(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogJointReq& request, ::IndyFramework::Protobuf::HRI::JogJointRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::JogJointReq, ::IndyFramework::Protobuf::HRI::JogJointRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JogJoint_, context, request, response);
}

void HRI::Stub::async::JogJoint(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogJointReq* request, ::IndyFramework::Protobuf::HRI::JogJointRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::JogJointReq, ::IndyFramework::Protobuf::HRI::JogJointRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JogJoint_, context, request, response, std::move(f));
}

void HRI::Stub::async::JogJoint(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogJointReq* request, ::IndyFramework::Protobuf::HRI::JogJointRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JogJoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::JogJointRes>* HRI::Stub::PrepareAsyncJogJointRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogJointReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::JogJointRes, ::IndyFramework::Protobuf::HRI::JogJointReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JogJoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::JogJointRes>* HRI::Stub::AsyncJogJointRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogJointReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJogJointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::JogTask(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogTaskReq& request, ::IndyFramework::Protobuf::HRI::JogTaskRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::JogTaskReq, ::IndyFramework::Protobuf::HRI::JogTaskRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JogTask_, context, request, response);
}

void HRI::Stub::async::JogTask(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogTaskReq* request, ::IndyFramework::Protobuf::HRI::JogTaskRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::JogTaskReq, ::IndyFramework::Protobuf::HRI::JogTaskRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JogTask_, context, request, response, std::move(f));
}

void HRI::Stub::async::JogTask(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogTaskReq* request, ::IndyFramework::Protobuf::HRI::JogTaskRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JogTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::JogTaskRes>* HRI::Stub::PrepareAsyncJogTaskRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogTaskReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::JogTaskRes, ::IndyFramework::Protobuf::HRI::JogTaskReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JogTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::JogTaskRes>* HRI::Stub::AsyncJogTaskRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogTaskReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJogTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::JogAxis(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogAxisReq& request, ::IndyFramework::Protobuf::HRI::JogAxisRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::JogAxisReq, ::IndyFramework::Protobuf::HRI::JogAxisRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JogAxis_, context, request, response);
}

void HRI::Stub::async::JogAxis(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogAxisReq* request, ::IndyFramework::Protobuf::HRI::JogAxisRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::JogAxisReq, ::IndyFramework::Protobuf::HRI::JogAxisRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JogAxis_, context, request, response, std::move(f));
}

void HRI::Stub::async::JogAxis(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogAxisReq* request, ::IndyFramework::Protobuf::HRI::JogAxisRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JogAxis_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::JogAxisRes>* HRI::Stub::PrepareAsyncJogAxisRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogAxisReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::JogAxisRes, ::IndyFramework::Protobuf::HRI::JogAxisReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JogAxis_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::JogAxisRes>* HRI::Stub::AsyncJogAxisRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogAxisReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJogAxisRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::HoldToMoveJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveJReq& request, ::IndyFramework::Protobuf::HRI::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::MoveJReq, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HoldToMoveJ_, context, request, response);
}

void HRI::Stub::async::HoldToMoveJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveJReq* request, ::IndyFramework::Protobuf::HRI::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::MoveJReq, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HoldToMoveJ_, context, request, response, std::move(f));
}

void HRI::Stub::async::HoldToMoveJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveJReq* request, ::IndyFramework::Protobuf::HRI::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HoldToMoveJ_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Empty>* HRI::Stub::PrepareAsyncHoldToMoveJRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveJReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::MoveJReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HoldToMoveJ_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Empty>* HRI::Stub::AsyncHoldToMoveJRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveJReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHoldToMoveJRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::HoldToMoveL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveLReq& request, ::IndyFramework::Protobuf::HRI::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::MoveLReq, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HoldToMoveL_, context, request, response);
}

void HRI::Stub::async::HoldToMoveL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveLReq* request, ::IndyFramework::Protobuf::HRI::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::MoveLReq, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HoldToMoveL_, context, request, response, std::move(f));
}

void HRI::Stub::async::HoldToMoveL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveLReq* request, ::IndyFramework::Protobuf::HRI::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HoldToMoveL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Empty>* HRI::Stub::PrepareAsyncHoldToMoveLRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveLReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::MoveLReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HoldToMoveL_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Empty>* HRI::Stub::AsyncHoldToMoveLRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveLReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHoldToMoveLRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::HoldToAxisJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AxisJReq& request, ::IndyFramework::Protobuf::HRI::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::AxisJReq, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HoldToAxisJ_, context, request, response);
}

void HRI::Stub::async::HoldToAxisJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AxisJReq* request, ::IndyFramework::Protobuf::HRI::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::AxisJReq, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HoldToAxisJ_, context, request, response, std::move(f));
}

void HRI::Stub::async::HoldToAxisJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AxisJReq* request, ::IndyFramework::Protobuf::HRI::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HoldToAxisJ_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Empty>* HRI::Stub::PrepareAsyncHoldToAxisJRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AxisJReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::AxisJReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HoldToAxisJ_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Empty>* HRI::Stub::AsyncHoldToAxisJRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AxisJReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHoldToAxisJRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::StopMotion(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopMotionReq& request, ::IndyFramework::Protobuf::HRI::StopMotionRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::StopMotionReq, ::IndyFramework::Protobuf::HRI::StopMotionRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopMotion_, context, request, response);
}

void HRI::Stub::async::StopMotion(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopMotionReq* request, ::IndyFramework::Protobuf::HRI::StopMotionRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::StopMotionReq, ::IndyFramework::Protobuf::HRI::StopMotionRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopMotion_, context, request, response, std::move(f));
}

void HRI::Stub::async::StopMotion(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopMotionReq* request, ::IndyFramework::Protobuf::HRI::StopMotionRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopMotion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::StopMotionRes>* HRI::Stub::PrepareAsyncStopMotionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopMotionReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::StopMotionRes, ::IndyFramework::Protobuf::HRI::StopMotionReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopMotion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::StopMotionRes>* HRI::Stub::AsyncStopMotionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopMotionReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopMotionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetRefFrame(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameReq& request, ::IndyFramework::Protobuf::HRI::SetRefFrameRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetRefFrameReq, ::IndyFramework::Protobuf::HRI::SetRefFrameRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetRefFrame_, context, request, response);
}

void HRI::Stub::async::SetRefFrame(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetRefFrameReq, ::IndyFramework::Protobuf::HRI::SetRefFrameRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRefFrame_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetRefFrame(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRefFrame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetRefFrameRes>* HRI::Stub::PrepareAsyncSetRefFrameRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetRefFrameRes, ::IndyFramework::Protobuf::HRI::SetRefFrameReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetRefFrame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetRefFrameRes>* HRI::Stub::AsyncSetRefFrameRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRefFrameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetRefFramePlanar(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFramePlanarReq& request, ::IndyFramework::Protobuf::HRI::SetRefFramePlanarRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetRefFramePlanarReq, ::IndyFramework::Protobuf::HRI::SetRefFramePlanarRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetRefFramePlanar_, context, request, response);
}

void HRI::Stub::async::SetRefFramePlanar(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFramePlanarReq* request, ::IndyFramework::Protobuf::HRI::SetRefFramePlanarRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetRefFramePlanarReq, ::IndyFramework::Protobuf::HRI::SetRefFramePlanarRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRefFramePlanar_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetRefFramePlanar(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFramePlanarReq* request, ::IndyFramework::Protobuf::HRI::SetRefFramePlanarRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRefFramePlanar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetRefFramePlanarRes>* HRI::Stub::PrepareAsyncSetRefFramePlanarRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFramePlanarReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetRefFramePlanarRes, ::IndyFramework::Protobuf::HRI::SetRefFramePlanarReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetRefFramePlanar_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetRefFramePlanarRes>* HRI::Stub::AsyncSetRefFramePlanarRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFramePlanarReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRefFramePlanarRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetToolFrame(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolFrameReq& request, ::IndyFramework::Protobuf::HRI::SetToolFrameRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetToolFrameReq, ::IndyFramework::Protobuf::HRI::SetToolFrameRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetToolFrame_, context, request, response);
}

void HRI::Stub::async::SetToolFrame(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolFrameReq* request, ::IndyFramework::Protobuf::HRI::SetToolFrameRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetToolFrameReq, ::IndyFramework::Protobuf::HRI::SetToolFrameRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetToolFrame_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetToolFrame(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolFrameReq* request, ::IndyFramework::Protobuf::HRI::SetToolFrameRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetToolFrame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetToolFrameRes>* HRI::Stub::PrepareAsyncSetToolFrameRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolFrameReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetToolFrameRes, ::IndyFramework::Protobuf::HRI::SetToolFrameReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetToolFrame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetToolFrameRes>* HRI::Stub::AsyncSetToolFrameRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolFrameReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetToolFrameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetSpeedRatio(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSpeedRatioReq& request, ::IndyFramework::Protobuf::HRI::SetSpeedRatioRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetSpeedRatioReq, ::IndyFramework::Protobuf::HRI::SetSpeedRatioRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSpeedRatio_, context, request, response);
}

void HRI::Stub::async::SetSpeedRatio(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSpeedRatioReq* request, ::IndyFramework::Protobuf::HRI::SetSpeedRatioRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetSpeedRatioReq, ::IndyFramework::Protobuf::HRI::SetSpeedRatioRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSpeedRatio_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetSpeedRatio(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSpeedRatioReq* request, ::IndyFramework::Protobuf::HRI::SetSpeedRatioRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSpeedRatio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetSpeedRatioRes>* HRI::Stub::PrepareAsyncSetSpeedRatioRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSpeedRatioReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetSpeedRatioRes, ::IndyFramework::Protobuf::HRI::SetSpeedRatioReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSpeedRatio_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetSpeedRatioRes>* HRI::Stub::AsyncSetSpeedRatioRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSpeedRatioReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSpeedRatioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetSimulationMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSimulationModeReq& request, ::IndyFramework::Protobuf::HRI::SetSimulationModeRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetSimulationModeReq, ::IndyFramework::Protobuf::HRI::SetSimulationModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSimulationMode_, context, request, response);
}

void HRI::Stub::async::SetSimulationMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSimulationModeReq* request, ::IndyFramework::Protobuf::HRI::SetSimulationModeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetSimulationModeReq, ::IndyFramework::Protobuf::HRI::SetSimulationModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSimulationMode_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetSimulationMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSimulationModeReq* request, ::IndyFramework::Protobuf::HRI::SetSimulationModeRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSimulationMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetSimulationModeRes>* HRI::Stub::PrepareAsyncSetSimulationModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSimulationModeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetSimulationModeRes, ::IndyFramework::Protobuf::HRI::SetSimulationModeReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSimulationMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetSimulationModeRes>* HRI::Stub::AsyncSetSimulationModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSimulationModeReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSimulationModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetDirectTeachingMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq& request, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDirectTeachingMode_, context, request, response);
}

void HRI::Stub::async::SetDirectTeachingMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq* request, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDirectTeachingMode_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetDirectTeachingMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq* request, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDirectTeachingMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes>* HRI::Stub::PrepareAsyncSetDirectTeachingModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDirectTeachingMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes>* HRI::Stub::AsyncSetDirectTeachingModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDirectTeachingModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetCustomControlMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::IntMode& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::IntMode, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCustomControlMode_, context, request, response);
}

void HRI::Stub::async::SetCustomControlMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::IntMode* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::IntMode, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCustomControlMode_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetCustomControlMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::IntMode* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCustomControlMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetCustomControlModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::IntMode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::IntMode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCustomControlMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetCustomControlModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::IntMode& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCustomControlModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetCustomControlMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::IntMode* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::IntMode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCustomControlMode_, context, request, response);
}

void HRI::Stub::async::GetCustomControlMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::IntMode* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::IntMode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCustomControlMode_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetCustomControlMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::IntMode* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCustomControlMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::IntMode>* HRI::Stub::PrepareAsyncGetCustomControlModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::IntMode, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCustomControlMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::IntMode>* HRI::Stub::AsyncGetCustomControlModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCustomControlModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetSensorlessComplianceMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeReq& request, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeReq, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSensorlessComplianceMode_, context, request, response);
}

void HRI::Stub::async::SetSensorlessComplianceMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeReq* request, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeReq, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSensorlessComplianceMode_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetSensorlessComplianceMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeReq* request, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSensorlessComplianceMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeRes>* HRI::Stub::PrepareAsyncSetSensorlessComplianceModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeRes, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSensorlessComplianceMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeRes>* HRI::Stub::AsyncSetSensorlessComplianceModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSensorlessComplianceModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetBrakeControlStyle(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::BrakeControlStyle* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::BrakeControlStyle, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBrakeControlStyle_, context, request, response);
}

void HRI::Stub::async::GetBrakeControlStyle(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::BrakeControlStyle* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::BrakeControlStyle, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBrakeControlStyle_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetBrakeControlStyle(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::BrakeControlStyle* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBrakeControlStyle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::BrakeControlStyle>* HRI::Stub::PrepareAsyncGetBrakeControlStyleRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::BrakeControlStyle, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBrakeControlStyle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::BrakeControlStyle>* HRI::Stub::AsyncGetBrakeControlStyleRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBrakeControlStyleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetBrake(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetBrakeReq& request, ::IndyFramework::Protobuf::HRI::SetBrakeRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetBrakeReq, ::IndyFramework::Protobuf::HRI::SetBrakeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBrake_, context, request, response);
}

void HRI::Stub::async::SetBrake(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetBrakeReq* request, ::IndyFramework::Protobuf::HRI::SetBrakeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetBrakeReq, ::IndyFramework::Protobuf::HRI::SetBrakeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBrake_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetBrake(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetBrakeReq* request, ::IndyFramework::Protobuf::HRI::SetBrakeRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBrake_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetBrakeRes>* HRI::Stub::PrepareAsyncSetBrakeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetBrakeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetBrakeRes, ::IndyFramework::Protobuf::HRI::SetBrakeReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBrake_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetBrakeRes>* HRI::Stub::AsyncSetBrakeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetBrakeReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBrakeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetServo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetServoReq& request, ::IndyFramework::Protobuf::HRI::SetServoRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetServoReq, ::IndyFramework::Protobuf::HRI::SetServoRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetServo_, context, request, response);
}

void HRI::Stub::async::SetServo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetServoReq* request, ::IndyFramework::Protobuf::HRI::SetServoRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetServoReq, ::IndyFramework::Protobuf::HRI::SetServoRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServo_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetServo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetServoReq* request, ::IndyFramework::Protobuf::HRI::SetServoRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetServoRes>* HRI::Stub::PrepareAsyncSetServoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetServoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetServoRes, ::IndyFramework::Protobuf::HRI::SetServoReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetServo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetServoRes>* HRI::Stub::AsyncSetServoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetServoReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetServoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetAutoServoOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetAutoServoOffReq& request, ::IndyFramework::Protobuf::HRI::SetAutoServoOffRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetAutoServoOffReq, ::IndyFramework::Protobuf::HRI::SetAutoServoOffRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAutoServoOff_, context, request, response);
}

void HRI::Stub::async::SetAutoServoOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetAutoServoOffReq* request, ::IndyFramework::Protobuf::HRI::SetAutoServoOffRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetAutoServoOffReq, ::IndyFramework::Protobuf::HRI::SetAutoServoOffRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAutoServoOff_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetAutoServoOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetAutoServoOffReq* request, ::IndyFramework::Protobuf::HRI::SetAutoServoOffRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAutoServoOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetAutoServoOffRes>* HRI::Stub::PrepareAsyncSetAutoServoOffRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetAutoServoOffReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetAutoServoOffRes, ::IndyFramework::Protobuf::HRI::SetAutoServoOffReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAutoServoOff_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetAutoServoOffRes>* HRI::Stub::AsyncSetAutoServoOffRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetAutoServoOffReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAutoServoOffRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetAutoServoOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetAutoServoOffReq& request, ::IndyFramework::Protobuf::HRI::GetAutoServoOffRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetAutoServoOffReq, ::IndyFramework::Protobuf::HRI::GetAutoServoOffRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAutoServoOff_, context, request, response);
}

void HRI::Stub::async::GetAutoServoOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetAutoServoOffReq* request, ::IndyFramework::Protobuf::HRI::GetAutoServoOffRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetAutoServoOffReq, ::IndyFramework::Protobuf::HRI::GetAutoServoOffRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAutoServoOff_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetAutoServoOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetAutoServoOffReq* request, ::IndyFramework::Protobuf::HRI::GetAutoServoOffRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAutoServoOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetAutoServoOffRes>* HRI::Stub::PrepareAsyncGetAutoServoOffRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetAutoServoOffReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetAutoServoOffRes, ::IndyFramework::Protobuf::HRI::GetAutoServoOffReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAutoServoOff_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetAutoServoOffRes>* HRI::Stub::AsyncGetAutoServoOffRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetAutoServoOffReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAutoServoOffRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::ExecuteTool(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Name, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteTool_, context, request, response);
}

void HRI::Stub::async::ExecuteTool(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Name, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteTool_, context, request, response, std::move(f));
}

void HRI::Stub::async::ExecuteTool(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteTool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncExecuteToolRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Name, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteTool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncExecuteToolRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteToolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::InverseKinematics(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::InverseKinematicsReq& request, ::IndyFramework::Protobuf::HRI::InverseKinematicsRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::InverseKinematicsReq, ::IndyFramework::Protobuf::HRI::InverseKinematicsRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InverseKinematics_, context, request, response);
}

void HRI::Stub::async::InverseKinematics(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::InverseKinematicsReq* request, ::IndyFramework::Protobuf::HRI::InverseKinematicsRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::InverseKinematicsReq, ::IndyFramework::Protobuf::HRI::InverseKinematicsRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InverseKinematics_, context, request, response, std::move(f));
}

void HRI::Stub::async::InverseKinematics(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::InverseKinematicsReq* request, ::IndyFramework::Protobuf::HRI::InverseKinematicsRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InverseKinematics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::InverseKinematicsRes>* HRI::Stub::PrepareAsyncInverseKinematicsRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::InverseKinematicsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::InverseKinematicsRes, ::IndyFramework::Protobuf::HRI::InverseKinematicsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InverseKinematics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::InverseKinematicsRes>* HRI::Stub::AsyncInverseKinematicsRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::InverseKinematicsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInverseKinematicsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::CalculateRelativePose(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CalculateRelativePoseReq& request, ::IndyFramework::Protobuf::HRI::CalculateRelativePoseRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::CalculateRelativePoseReq, ::IndyFramework::Protobuf::HRI::CalculateRelativePoseRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CalculateRelativePose_, context, request, response);
}

void HRI::Stub::async::CalculateRelativePose(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CalculateRelativePoseReq* request, ::IndyFramework::Protobuf::HRI::CalculateRelativePoseRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::CalculateRelativePoseReq, ::IndyFramework::Protobuf::HRI::CalculateRelativePoseRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalculateRelativePose_, context, request, response, std::move(f));
}

void HRI::Stub::async::CalculateRelativePose(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CalculateRelativePoseReq* request, ::IndyFramework::Protobuf::HRI::CalculateRelativePoseRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalculateRelativePose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CalculateRelativePoseRes>* HRI::Stub::PrepareAsyncCalculateRelativePoseRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CalculateRelativePoseReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::CalculateRelativePoseRes, ::IndyFramework::Protobuf::HRI::CalculateRelativePoseReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CalculateRelativePose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CalculateRelativePoseRes>* HRI::Stub::AsyncCalculateRelativePoseRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CalculateRelativePoseReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCalculateRelativePoseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::CalculateCurrentPoseRel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelReq& request, ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelReq, ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CalculateCurrentPoseRel_, context, request, response);
}

void HRI::Stub::async::CalculateCurrentPoseRel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelReq* request, ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelReq, ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalculateCurrentPoseRel_, context, request, response, std::move(f));
}

void HRI::Stub::async::CalculateCurrentPoseRel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelReq* request, ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalculateCurrentPoseRel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelRes>* HRI::Stub::PrepareAsyncCalculateCurrentPoseRelRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelRes, ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CalculateCurrentPoseRel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelRes>* HRI::Stub::AsyncCalculateCurrentPoseRelRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCalculateCurrentPoseRelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetManualRecoverMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::State, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetManualRecoverMode_, context, request, response);
}

void HRI::Stub::async::SetManualRecoverMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::State, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetManualRecoverMode_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetManualRecoverMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetManualRecoverMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetManualRecoverModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::State, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetManualRecoverMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetManualRecoverModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetManualRecoverModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetServoRecover(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Servo& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Servo, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetServoRecover_, context, request, response);
}

void HRI::Stub::async::SetServoRecover(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Servo* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Servo, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServoRecover_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetServoRecover(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Servo* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServoRecover_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetServoRecoverRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Servo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Servo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetServoRecover_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetServoRecoverRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Servo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetServoRecoverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::JogJointRecover(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogJTar& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::JogJTar, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JogJointRecover_, context, request, response);
}

void HRI::Stub::async::JogJointRecover(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogJTar* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::JogJTar, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JogJointRecover_, context, request, response, std::move(f));
}

void HRI::Stub::async::JogJointRecover(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogJTar* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JogJointRecover_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncJogJointRecoverRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogJTar& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::JogJTar, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JogJointRecover_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncJogJointRecoverRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::JogJTar& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJogJointRecoverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::Recover(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RecoverReq& request, ::IndyFramework::Protobuf::HRI::RecoverRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::RecoverReq, ::IndyFramework::Protobuf::HRI::RecoverRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Recover_, context, request, response);
}

void HRI::Stub::async::Recover(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RecoverReq* request, ::IndyFramework::Protobuf::HRI::RecoverRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::RecoverReq, ::IndyFramework::Protobuf::HRI::RecoverRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, std::move(f));
}

void HRI::Stub::async::Recover(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RecoverReq* request, ::IndyFramework::Protobuf::HRI::RecoverRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::RecoverRes>* HRI::Stub::PrepareAsyncRecoverRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RecoverReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::RecoverRes, ::IndyFramework::Protobuf::HRI::RecoverReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Recover_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::RecoverRes>* HRI::Stub::AsyncRecoverRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RecoverReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecoverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::Reboot(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RebootReq& request, ::IndyFramework::Protobuf::HRI::RebootRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::RebootReq, ::IndyFramework::Protobuf::HRI::RebootRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Reboot_, context, request, response);
}

void HRI::Stub::async::Reboot(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RebootReq* request, ::IndyFramework::Protobuf::HRI::RebootRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::RebootReq, ::IndyFramework::Protobuf::HRI::RebootRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, std::move(f));
}

void HRI::Stub::async::Reboot(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RebootReq* request, ::IndyFramework::Protobuf::HRI::RebootRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::RebootRes>* HRI::Stub::PrepareAsyncRebootRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RebootReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::RebootRes, ::IndyFramework::Protobuf::HRI::RebootReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Reboot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::RebootRes>* HRI::Stub::AsyncRebootRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RebootReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRebootRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::PowerOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PowerOffReq& request, ::IndyFramework::Protobuf::HRI::PowerOffRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::PowerOffReq, ::IndyFramework::Protobuf::HRI::PowerOffRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PowerOff_, context, request, response);
}

void HRI::Stub::async::PowerOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PowerOffReq* request, ::IndyFramework::Protobuf::HRI::PowerOffRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::PowerOffReq, ::IndyFramework::Protobuf::HRI::PowerOffRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PowerOff_, context, request, response, std::move(f));
}

void HRI::Stub::async::PowerOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PowerOffReq* request, ::IndyFramework::Protobuf::HRI::PowerOffRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PowerOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::PowerOffRes>* HRI::Stub::PrepareAsyncPowerOffRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PowerOffReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::PowerOffRes, ::IndyFramework::Protobuf::HRI::PowerOffReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PowerOff_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::PowerOffRes>* HRI::Stub::AsyncPowerOffRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PowerOffReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPowerOffRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::IndyFramework::Protobuf::HRI::UpdateIndySWReq>* HRI::Stub::UpdateIndySWRaw(::grpc::ClientContext* context, ::IndyFramework::Protobuf::HRI::UpdateIndySWRes* response) {
  return ::grpc::internal::ClientWriterFactory< ::IndyFramework::Protobuf::HRI::UpdateIndySWReq>::Create(channel_.get(), rpcmethod_UpdateIndySW_, context, response);
}

void HRI::Stub::async::UpdateIndySW(::grpc::ClientContext* context, ::IndyFramework::Protobuf::HRI::UpdateIndySWRes* response, ::grpc::ClientWriteReactor< ::IndyFramework::Protobuf::HRI::UpdateIndySWReq>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::IndyFramework::Protobuf::HRI::UpdateIndySWReq>::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateIndySW_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::IndyFramework::Protobuf::HRI::UpdateIndySWReq>* HRI::Stub::AsyncUpdateIndySWRaw(::grpc::ClientContext* context, ::IndyFramework::Protobuf::HRI::UpdateIndySWRes* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::IndyFramework::Protobuf::HRI::UpdateIndySWReq>::Create(channel_.get(), cq, rpcmethod_UpdateIndySW_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::IndyFramework::Protobuf::HRI::UpdateIndySWReq>* HRI::Stub::PrepareAsyncUpdateIndySWRaw(::grpc::ClientContext* context, ::IndyFramework::Protobuf::HRI::UpdateIndySWRes* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::IndyFramework::Protobuf::HRI::UpdateIndySWReq>::Create(channel_.get(), cq, rpcmethod_UpdateIndySW_, context, response, false, nullptr);
}

::grpc::ClientReader< ::IndyFramework::Protobuf::HRI::GetFileRes>* HRI::Stub::GetFileRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetFileReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::IndyFramework::Protobuf::HRI::GetFileRes>::Create(channel_.get(), rpcmethod_GetFile_, context, request);
}

void HRI::Stub::async::GetFile(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetFileReq* request, ::grpc::ClientReadReactor< ::IndyFramework::Protobuf::HRI::GetFileRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::IndyFramework::Protobuf::HRI::GetFileRes>::Create(stub_->channel_.get(), stub_->rpcmethod_GetFile_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::IndyFramework::Protobuf::HRI::GetFileRes>* HRI::Stub::AsyncGetFileRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetFileReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::IndyFramework::Protobuf::HRI::GetFileRes>::Create(channel_.get(), cq, rpcmethod_GetFile_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::IndyFramework::Protobuf::HRI::GetFileRes>* HRI::Stub::PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::IndyFramework::Protobuf::HRI::GetFileRes>::Create(channel_.get(), cq, rpcmethod_GetFile_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::IndyFramework::Protobuf::HRI::SetFileReq>* HRI::Stub::SetFileRaw(::grpc::ClientContext* context, ::IndyFramework::Protobuf::HRI::SetFileRes* response) {
  return ::grpc::internal::ClientWriterFactory< ::IndyFramework::Protobuf::HRI::SetFileReq>::Create(channel_.get(), rpcmethod_SetFile_, context, response);
}

void HRI::Stub::async::SetFile(::grpc::ClientContext* context, ::IndyFramework::Protobuf::HRI::SetFileRes* response, ::grpc::ClientWriteReactor< ::IndyFramework::Protobuf::HRI::SetFileReq>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::IndyFramework::Protobuf::HRI::SetFileReq>::Create(stub_->channel_.get(), stub_->rpcmethod_SetFile_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::IndyFramework::Protobuf::HRI::SetFileReq>* HRI::Stub::AsyncSetFileRaw(::grpc::ClientContext* context, ::IndyFramework::Protobuf::HRI::SetFileRes* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::IndyFramework::Protobuf::HRI::SetFileReq>::Create(channel_.get(), cq, rpcmethod_SetFile_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::IndyFramework::Protobuf::HRI::SetFileReq>* HRI::Stub::PrepareAsyncSetFileRaw(::grpc::ClientContext* context, ::IndyFramework::Protobuf::HRI::SetFileRes* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::IndyFramework::Protobuf::HRI::SetFileReq>::Create(channel_.get(), cq, rpcmethod_SetFile_, context, response, false, nullptr);
}

::grpc::Status HRI::Stub::RenameFile(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RenameFileReq& request, ::IndyFramework::Protobuf::HRI::RenameFileRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::RenameFileReq, ::IndyFramework::Protobuf::HRI::RenameFileRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RenameFile_, context, request, response);
}

void HRI::Stub::async::RenameFile(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RenameFileReq* request, ::IndyFramework::Protobuf::HRI::RenameFileRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::RenameFileReq, ::IndyFramework::Protobuf::HRI::RenameFileRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenameFile_, context, request, response, std::move(f));
}

void HRI::Stub::async::RenameFile(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RenameFileReq* request, ::IndyFramework::Protobuf::HRI::RenameFileRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenameFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::RenameFileRes>* HRI::Stub::PrepareAsyncRenameFileRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RenameFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::RenameFileRes, ::IndyFramework::Protobuf::HRI::RenameFileReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RenameFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::RenameFileRes>* HRI::Stub::AsyncRenameFileRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RenameFileReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenameFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::RemoveFile(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RemoveFileReq& request, ::IndyFramework::Protobuf::HRI::RemoveFileRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::RemoveFileReq, ::IndyFramework::Protobuf::HRI::RemoveFileRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveFile_, context, request, response);
}

void HRI::Stub::async::RemoveFile(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RemoveFileReq* request, ::IndyFramework::Protobuf::HRI::RemoveFileRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::RemoveFileReq, ::IndyFramework::Protobuf::HRI::RemoveFileRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFile_, context, request, response, std::move(f));
}

void HRI::Stub::async::RemoveFile(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RemoveFileReq* request, ::IndyFramework::Protobuf::HRI::RemoveFileRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::RemoveFileRes>* HRI::Stub::PrepareAsyncRemoveFileRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RemoveFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::RemoveFileRes, ::IndyFramework::Protobuf::HRI::RemoveFileReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::RemoveFileRes>* HRI::Stub::AsyncRemoveFileRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::RemoveFileReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetIndexProgramList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetIndexProgramListReq& request, ::IndyFramework::Protobuf::HRI::GetIndexProgramListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetIndexProgramListReq, ::IndyFramework::Protobuf::HRI::GetIndexProgramListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIndexProgramList_, context, request, response);
}

void HRI::Stub::async::GetIndexProgramList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetIndexProgramListReq* request, ::IndyFramework::Protobuf::HRI::GetIndexProgramListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetIndexProgramListReq, ::IndyFramework::Protobuf::HRI::GetIndexProgramListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIndexProgramList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetIndexProgramList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetIndexProgramListReq* request, ::IndyFramework::Protobuf::HRI::GetIndexProgramListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIndexProgramList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetIndexProgramListRes>* HRI::Stub::PrepareAsyncGetIndexProgramListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetIndexProgramListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetIndexProgramListRes, ::IndyFramework::Protobuf::HRI::GetIndexProgramListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIndexProgramList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetIndexProgramListRes>* HRI::Stub::AsyncGetIndexProgramListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetIndexProgramListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIndexProgramListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetProgramList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetProgramListReq& request, ::IndyFramework::Protobuf::HRI::GetProgramListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetProgramListReq, ::IndyFramework::Protobuf::HRI::GetProgramListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProgramList_, context, request, response);
}

void HRI::Stub::async::GetProgramList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetProgramListReq* request, ::IndyFramework::Protobuf::HRI::GetProgramListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetProgramListReq, ::IndyFramework::Protobuf::HRI::GetProgramListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProgramList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetProgramList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetProgramListReq* request, ::IndyFramework::Protobuf::HRI::GetProgramListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProgramList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetProgramListRes>* HRI::Stub::PrepareAsyncGetProgramListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetProgramListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetProgramListRes, ::IndyFramework::Protobuf::HRI::GetProgramListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProgramList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetProgramListRes>* HRI::Stub::AsyncGetProgramListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetProgramListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProgramListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetLogList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogListReq& request, ::IndyFramework::Protobuf::HRI::GetLogListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetLogListReq, ::IndyFramework::Protobuf::HRI::GetLogListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLogList_, context, request, response);
}

void HRI::Stub::async::GetLogList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogListReq* request, ::IndyFramework::Protobuf::HRI::GetLogListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetLogListReq, ::IndyFramework::Protobuf::HRI::GetLogListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLogList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetLogList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogListReq* request, ::IndyFramework::Protobuf::HRI::GetLogListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLogList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetLogListRes>* HRI::Stub::PrepareAsyncGetLogListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetLogListRes, ::IndyFramework::Protobuf::HRI::GetLogListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLogList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetLogListRes>* HRI::Stub::AsyncGetLogListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLogListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::IndyFramework::Protobuf::HRI::GetLogContentRes>* HRI::Stub::GetLogContentRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogContentReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::IndyFramework::Protobuf::HRI::GetLogContentRes>::Create(channel_.get(), rpcmethod_GetLogContent_, context, request);
}

void HRI::Stub::async::GetLogContent(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogContentReq* request, ::grpc::ClientReadReactor< ::IndyFramework::Protobuf::HRI::GetLogContentRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::IndyFramework::Protobuf::HRI::GetLogContentRes>::Create(stub_->channel_.get(), stub_->rpcmethod_GetLogContent_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::IndyFramework::Protobuf::HRI::GetLogContentRes>* HRI::Stub::AsyncGetLogContentRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogContentReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::IndyFramework::Protobuf::HRI::GetLogContentRes>::Create(channel_.get(), cq, rpcmethod_GetLogContent_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::IndyFramework::Protobuf::HRI::GetLogContentRes>* HRI::Stub::PrepareAsyncGetLogContentRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogContentReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::IndyFramework::Protobuf::HRI::GetLogContentRes>::Create(channel_.get(), cq, rpcmethod_GetLogContent_, context, request, false, nullptr);
}

::grpc::ClientReader< ::IndyFramework::Protobuf::HRI::GetLogContentListRes>* HRI::Stub::GetLogContentListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogContentListReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::IndyFramework::Protobuf::HRI::GetLogContentListRes>::Create(channel_.get(), rpcmethod_GetLogContentList_, context, request);
}

void HRI::Stub::async::GetLogContentList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogContentListReq* request, ::grpc::ClientReadReactor< ::IndyFramework::Protobuf::HRI::GetLogContentListRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::IndyFramework::Protobuf::HRI::GetLogContentListRes>::Create(stub_->channel_.get(), stub_->rpcmethod_GetLogContentList_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::IndyFramework::Protobuf::HRI::GetLogContentListRes>* HRI::Stub::AsyncGetLogContentListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogContentListReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::IndyFramework::Protobuf::HRI::GetLogContentListRes>::Create(channel_.get(), cq, rpcmethod_GetLogContentList_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::IndyFramework::Protobuf::HRI::GetLogContentListRes>* HRI::Stub::PrepareAsyncGetLogContentListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogContentListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::IndyFramework::Protobuf::HRI::GetLogContentListRes>::Create(channel_.get(), cq, rpcmethod_GetLogContentList_, context, request, false, nullptr);
}

::grpc::ClientReader< ::IndyFramework::Protobuf::HRI::GetLogRes>* HRI::Stub::GetLogRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::IndyFramework::Protobuf::HRI::GetLogRes>::Create(channel_.get(), rpcmethod_GetLog_, context, request);
}

void HRI::Stub::async::GetLog(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogReq* request, ::grpc::ClientReadReactor< ::IndyFramework::Protobuf::HRI::GetLogRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::IndyFramework::Protobuf::HRI::GetLogRes>::Create(stub_->channel_.get(), stub_->rpcmethod_GetLog_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::IndyFramework::Protobuf::HRI::GetLogRes>* HRI::Stub::AsyncGetLogRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::IndyFramework::Protobuf::HRI::GetLogRes>::Create(channel_.get(), cq, rpcmethod_GetLog_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::IndyFramework::Protobuf::HRI::GetLogRes>* HRI::Stub::PrepareAsyncGetLogRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetLogReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::IndyFramework::Protobuf::HRI::GetLogRes>::Create(channel_.get(), cq, rpcmethod_GetLog_, context, request, false, nullptr);
}

::grpc::Status HRI::Stub::GetVariableList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVariableListReq& request, ::IndyFramework::Protobuf::HRI::GetVariableListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetVariableListReq, ::IndyFramework::Protobuf::HRI::GetVariableListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVariableList_, context, request, response);
}

void HRI::Stub::async::GetVariableList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVariableListReq* request, ::IndyFramework::Protobuf::HRI::GetVariableListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetVariableListReq, ::IndyFramework::Protobuf::HRI::GetVariableListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVariableList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetVariableList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVariableListReq* request, ::IndyFramework::Protobuf::HRI::GetVariableListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVariableList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetVariableListRes>* HRI::Stub::PrepareAsyncGetVariableListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVariableListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetVariableListRes, ::IndyFramework::Protobuf::HRI::GetVariableListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVariableList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetVariableListRes>* HRI::Stub::AsyncGetVariableListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVariableListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVariableListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetMonitoringVariableList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListReq& request, ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListReq, ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMonitoringVariableList_, context, request, response);
}

void HRI::Stub::async::GetMonitoringVariableList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListReq* request, ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListReq, ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMonitoringVariableList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetMonitoringVariableList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListReq* request, ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMonitoringVariableList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListRes>* HRI::Stub::PrepareAsyncGetMonitoringVariableListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListRes, ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMonitoringVariableList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListRes>* HRI::Stub::AsyncGetMonitoringVariableListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMonitoringVariableListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetMonitoringVariableList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListReq& request, ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListReq, ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMonitoringVariableList_, context, request, response);
}

void HRI::Stub::async::SetMonitoringVariableList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListReq* request, ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListReq, ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMonitoringVariableList_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetMonitoringVariableList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListReq* request, ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMonitoringVariableList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListRes>* HRI::Stub::PrepareAsyncSetMonitoringVariableListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListRes, ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMonitoringVariableList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListRes>* HRI::Stub::AsyncSetMonitoringVariableListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMonitoringVariableListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetPalletMakerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPalletMakerListReq& request, ::IndyFramework::Protobuf::HRI::GetPalletMakerListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetPalletMakerListReq, ::IndyFramework::Protobuf::HRI::GetPalletMakerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPalletMakerList_, context, request, response);
}

void HRI::Stub::async::GetPalletMakerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPalletMakerListReq* request, ::IndyFramework::Protobuf::HRI::GetPalletMakerListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetPalletMakerListReq, ::IndyFramework::Protobuf::HRI::GetPalletMakerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPalletMakerList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetPalletMakerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPalletMakerListReq* request, ::IndyFramework::Protobuf::HRI::GetPalletMakerListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPalletMakerList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetPalletMakerListRes>* HRI::Stub::PrepareAsyncGetPalletMakerListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPalletMakerListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetPalletMakerListRes, ::IndyFramework::Protobuf::HRI::GetPalletMakerListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPalletMakerList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetPalletMakerListRes>* HRI::Stub::AsyncGetPalletMakerListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPalletMakerListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPalletMakerListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetPalletMakerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetPalletMakerListReq& request, ::IndyFramework::Protobuf::HRI::SetPalletMakerListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetPalletMakerListReq, ::IndyFramework::Protobuf::HRI::SetPalletMakerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPalletMakerList_, context, request, response);
}

void HRI::Stub::async::SetPalletMakerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetPalletMakerListReq* request, ::IndyFramework::Protobuf::HRI::SetPalletMakerListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetPalletMakerListReq, ::IndyFramework::Protobuf::HRI::SetPalletMakerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPalletMakerList_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetPalletMakerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetPalletMakerListReq* request, ::IndyFramework::Protobuf::HRI::SetPalletMakerListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPalletMakerList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetPalletMakerListRes>* HRI::Stub::PrepareAsyncSetPalletMakerListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetPalletMakerListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetPalletMakerListRes, ::IndyFramework::Protobuf::HRI::SetPalletMakerListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPalletMakerList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetPalletMakerListRes>* HRI::Stub::AsyncSetPalletMakerListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetPalletMakerListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPalletMakerListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::CheckAproachRetractValid(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidReq& request, ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidReq, ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckAproachRetractValid_, context, request, response);
}

void HRI::Stub::async::CheckAproachRetractValid(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidReq* request, ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidReq, ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckAproachRetractValid_, context, request, response, std::move(f));
}

void HRI::Stub::async::CheckAproachRetractValid(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidReq* request, ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckAproachRetractValid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidRes>* HRI::Stub::PrepareAsyncCheckAproachRetractValidRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidRes, ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckAproachRetractValid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidRes>* HRI::Stub::AsyncCheckAproachRetractValidRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckAproachRetractValidRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetPalletPointList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPalletPointListReq& request, ::IndyFramework::Protobuf::HRI::GetPalletPointListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetPalletPointListReq, ::IndyFramework::Protobuf::HRI::GetPalletPointListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPalletPointList_, context, request, response);
}

void HRI::Stub::async::GetPalletPointList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPalletPointListReq* request, ::IndyFramework::Protobuf::HRI::GetPalletPointListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetPalletPointListReq, ::IndyFramework::Protobuf::HRI::GetPalletPointListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPalletPointList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetPalletPointList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPalletPointListReq* request, ::IndyFramework::Protobuf::HRI::GetPalletPointListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPalletPointList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetPalletPointListRes>* HRI::Stub::PrepareAsyncGetPalletPointListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPalletPointListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetPalletPointListRes, ::IndyFramework::Protobuf::HRI::GetPalletPointListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPalletPointList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetPalletPointListRes>* HRI::Stub::AsyncGetPalletPointListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPalletPointListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPalletPointListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetPalletPointList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetPalletPointListReq& request, ::IndyFramework::Protobuf::HRI::SetPalletPointListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetPalletPointListReq, ::IndyFramework::Protobuf::HRI::SetPalletPointListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPalletPointList_, context, request, response);
}

void HRI::Stub::async::SetPalletPointList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetPalletPointListReq* request, ::IndyFramework::Protobuf::HRI::SetPalletPointListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetPalletPointListReq, ::IndyFramework::Protobuf::HRI::SetPalletPointListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPalletPointList_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetPalletPointList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetPalletPointListReq* request, ::IndyFramework::Protobuf::HRI::SetPalletPointListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPalletPointList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetPalletPointListRes>* HRI::Stub::PrepareAsyncSetPalletPointListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetPalletPointListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetPalletPointListRes, ::IndyFramework::Protobuf::HRI::SetPalletPointListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPalletPointList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetPalletPointListRes>* HRI::Stub::AsyncSetPalletPointListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetPalletPointListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPalletPointListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetConveyor(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::Conveyor* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Conveyor, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConveyor_, context, request, response);
}

void HRI::Stub::async::GetConveyor(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Conveyor* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Conveyor, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConveyor_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetConveyor(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Conveyor* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConveyor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Conveyor>* HRI::Stub::PrepareAsyncGetConveyorRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Conveyor, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConveyor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Conveyor>* HRI::Stub::AsyncGetConveyorRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConveyorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetConveyorName(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Name, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetConveyorName_, context, request, response);
}

void HRI::Stub::async::SetConveyorName(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Name, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorName_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetConveyorName(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetConveyorNameRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Name, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetConveyorName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetConveyorNameRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetConveyorNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetConveyorByName(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Name, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetConveyorByName_, context, request, response);
}

void HRI::Stub::async::SetConveyorByName(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Name, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorByName_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetConveyorByName(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorByName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetConveyorByNameRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Name, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetConveyorByName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetConveyorByNameRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Name& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetConveyorByNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetConveyorEncoder(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Encoder& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Encoder, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetConveyorEncoder_, context, request, response);
}

void HRI::Stub::async::SetConveyorEncoder(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Encoder* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Encoder, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorEncoder_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetConveyorEncoder(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Encoder* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorEncoder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetConveyorEncoderRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Encoder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Encoder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetConveyorEncoder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetConveyorEncoderRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Encoder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetConveyorEncoderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetConveyorTrigger(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Trigger& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Trigger, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetConveyorTrigger_, context, request, response);
}

void HRI::Stub::async::SetConveyorTrigger(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Trigger* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Trigger, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorTrigger_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetConveyorTrigger(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Trigger* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorTrigger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetConveyorTriggerRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Trigger& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Trigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetConveyorTrigger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetConveyorTriggerRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Trigger& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetConveyorTriggerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetConveyorOffset(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Float& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Float, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetConveyorOffset_, context, request, response);
}

void HRI::Stub::async::SetConveyorOffset(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Float* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Float, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorOffset_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetConveyorOffset(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Float* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorOffset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetConveyorOffsetRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Float& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Float, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetConveyorOffset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetConveyorOffsetRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Float& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetConveyorOffsetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetConveyorStartingPose(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PosePair& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::PosePair, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetConveyorStartingPose_, context, request, response);
}

void HRI::Stub::async::SetConveyorStartingPose(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PosePair* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::PosePair, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorStartingPose_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetConveyorStartingPose(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PosePair* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorStartingPose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetConveyorStartingPoseRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PosePair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::PosePair, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetConveyorStartingPose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetConveyorStartingPoseRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PosePair& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetConveyorStartingPoseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetConveyorTerminalPose(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PosePair& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::PosePair, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetConveyorTerminalPose_, context, request, response);
}

void HRI::Stub::async::SetConveyorTerminalPose(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PosePair* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::PosePair, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorTerminalPose_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetConveyorTerminalPose(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PosePair* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorTerminalPose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetConveyorTerminalPoseRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PosePair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::PosePair, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetConveyorTerminalPose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetConveyorTerminalPoseRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PosePair& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetConveyorTerminalPoseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetConveyorState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::ConveyorState* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ConveyorState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConveyorState_, context, request, response);
}

void HRI::Stub::async::GetConveyorState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ConveyorState* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ConveyorState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConveyorState_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetConveyorState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ConveyorState* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConveyorState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::ConveyorState>* HRI::Stub::PrepareAsyncGetConveyorStateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::ConveyorState, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConveyorState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::ConveyorState>* HRI::Stub::AsyncGetConveyorStateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConveyorStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::HoldToMoveConveyor(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::HoldToMoveConveyorReq& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::HoldToMoveConveyorReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HoldToMoveConveyor_, context, request, response);
}

void HRI::Stub::async::HoldToMoveConveyor(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::HoldToMoveConveyorReq* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::HoldToMoveConveyorReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HoldToMoveConveyor_, context, request, response, std::move(f));
}

void HRI::Stub::async::HoldToMoveConveyor(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::HoldToMoveConveyorReq* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HoldToMoveConveyor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncHoldToMoveConveyorRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::HoldToMoveConveyorReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::HoldToMoveConveyorReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HoldToMoveConveyor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncHoldToMoveConveyorRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::HoldToMoveConveyorReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHoldToMoveConveyorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetConveyorList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetConveyorListReq& request, ::IndyFramework::Protobuf::HRI::GetConveyorListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetConveyorListReq, ::IndyFramework::Protobuf::HRI::GetConveyorListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConveyorList_, context, request, response);
}

void HRI::Stub::async::GetConveyorList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetConveyorListReq* request, ::IndyFramework::Protobuf::HRI::GetConveyorListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetConveyorListReq, ::IndyFramework::Protobuf::HRI::GetConveyorListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConveyorList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetConveyorList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetConveyorListReq* request, ::IndyFramework::Protobuf::HRI::GetConveyorListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConveyorList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetConveyorListRes>* HRI::Stub::PrepareAsyncGetConveyorListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetConveyorListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetConveyorListRes, ::IndyFramework::Protobuf::HRI::GetConveyorListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConveyorList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetConveyorListRes>* HRI::Stub::AsyncGetConveyorListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetConveyorListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConveyorListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetConveyorList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetConveyorListReq& request, ::IndyFramework::Protobuf::HRI::SetConveyorListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetConveyorListReq, ::IndyFramework::Protobuf::HRI::SetConveyorListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetConveyorList_, context, request, response);
}

void HRI::Stub::async::SetConveyorList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetConveyorListReq* request, ::IndyFramework::Protobuf::HRI::SetConveyorListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetConveyorListReq, ::IndyFramework::Protobuf::HRI::SetConveyorListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorList_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetConveyorList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetConveyorListReq* request, ::IndyFramework::Protobuf::HRI::SetConveyorListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConveyorList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetConveyorListRes>* HRI::Stub::PrepareAsyncSetConveyorListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetConveyorListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetConveyorListRes, ::IndyFramework::Protobuf::HRI::SetConveyorListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetConveyorList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetConveyorListRes>* HRI::Stub::AsyncSetConveyorListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetConveyorListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetConveyorListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetInching(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetInchingReq& request, ::IndyFramework::Protobuf::HRI::SetInchingRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetInchingReq, ::IndyFramework::Protobuf::HRI::SetInchingRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetInching_, context, request, response);
}

void HRI::Stub::async::SetInching(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetInchingReq* request, ::IndyFramework::Protobuf::HRI::SetInchingRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetInchingReq, ::IndyFramework::Protobuf::HRI::SetInchingRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInching_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetInching(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetInchingReq* request, ::IndyFramework::Protobuf::HRI::SetInchingRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInching_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetInchingRes>* HRI::Stub::PrepareAsyncSetInchingRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetInchingReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetInchingRes, ::IndyFramework::Protobuf::HRI::SetInchingReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetInching_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetInchingRes>* HRI::Stub::AsyncSetInchingRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetInchingReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetInchingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::StopInching(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopInchingReq& request, ::IndyFramework::Protobuf::HRI::StopInchingRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::StopInchingReq, ::IndyFramework::Protobuf::HRI::StopInchingRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopInching_, context, request, response);
}

void HRI::Stub::async::StopInching(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopInchingReq* request, ::IndyFramework::Protobuf::HRI::StopInchingRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::StopInchingReq, ::IndyFramework::Protobuf::HRI::StopInchingRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopInching_, context, request, response, std::move(f));
}

void HRI::Stub::async::StopInching(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopInchingReq* request, ::IndyFramework::Protobuf::HRI::StopInchingRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopInching_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::StopInchingRes>* HRI::Stub::PrepareAsyncStopInchingRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopInchingReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::StopInchingRes, ::IndyFramework::Protobuf::HRI::StopInchingReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopInching_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::StopInchingRes>* HRI::Stub::AsyncStopInchingRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopInchingReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopInchingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetArc(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetArcReq& request, ::IndyFramework::Protobuf::HRI::SetArcRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetArcReq, ::IndyFramework::Protobuf::HRI::SetArcRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetArc_, context, request, response);
}

void HRI::Stub::async::SetArc(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetArcReq* request, ::IndyFramework::Protobuf::HRI::SetArcRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetArcReq, ::IndyFramework::Protobuf::HRI::SetArcRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetArc_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetArc(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetArcReq* request, ::IndyFramework::Protobuf::HRI::SetArcRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetArc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetArcRes>* HRI::Stub::PrepareAsyncSetArcRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetArcReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetArcRes, ::IndyFramework::Protobuf::HRI::SetArcReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetArc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetArcRes>* HRI::Stub::AsyncSetArcRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetArcReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetArcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetTouch(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetTouchReq& request, ::IndyFramework::Protobuf::HRI::SetTouchRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetTouchReq, ::IndyFramework::Protobuf::HRI::SetTouchRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTouch_, context, request, response);
}

void HRI::Stub::async::SetTouch(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetTouchReq* request, ::IndyFramework::Protobuf::HRI::SetTouchRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetTouchReq, ::IndyFramework::Protobuf::HRI::SetTouchRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTouch_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetTouch(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetTouchReq* request, ::IndyFramework::Protobuf::HRI::SetTouchRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTouch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetTouchRes>* HRI::Stub::PrepareAsyncSetTouchRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetTouchReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetTouchRes, ::IndyFramework::Protobuf::HRI::SetTouchReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTouch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetTouchRes>* HRI::Stub::AsyncSetTouchRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetTouchReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTouchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetGas(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetGasReq& request, ::IndyFramework::Protobuf::HRI::SetGasRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetGasReq, ::IndyFramework::Protobuf::HRI::SetGasRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetGas_, context, request, response);
}

void HRI::Stub::async::SetGas(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetGasReq* request, ::IndyFramework::Protobuf::HRI::SetGasRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetGasReq, ::IndyFramework::Protobuf::HRI::SetGasRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGas_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetGas(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetGasReq* request, ::IndyFramework::Protobuf::HRI::SetGasRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGas_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetGasRes>* HRI::Stub::PrepareAsyncSetGasRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetGasReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetGasRes, ::IndyFramework::Protobuf::HRI::SetGasReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetGas_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetGasRes>* HRI::Stub::AsyncSetGasRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetGasReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetGasRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::IsTouched(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::IsTouchedReq& request, ::IndyFramework::Protobuf::HRI::IsTouchedRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::IsTouchedReq, ::IndyFramework::Protobuf::HRI::IsTouchedRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsTouched_, context, request, response);
}

void HRI::Stub::async::IsTouched(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::IsTouchedReq* request, ::IndyFramework::Protobuf::HRI::IsTouchedRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::IsTouchedReq, ::IndyFramework::Protobuf::HRI::IsTouchedRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsTouched_, context, request, response, std::move(f));
}

void HRI::Stub::async::IsTouched(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::IsTouchedReq* request, ::IndyFramework::Protobuf::HRI::IsTouchedRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsTouched_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::IsTouchedRes>* HRI::Stub::PrepareAsyncIsTouchedRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::IsTouchedReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::IsTouchedRes, ::IndyFramework::Protobuf::HRI::IsTouchedReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsTouched_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::IsTouchedRes>* HRI::Stub::AsyncIsTouchedRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::IsTouchedReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsTouchedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetVisionServerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVisionServerListReq& request, ::IndyFramework::Protobuf::HRI::GetVisionServerListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetVisionServerListReq, ::IndyFramework::Protobuf::HRI::GetVisionServerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVisionServerList_, context, request, response);
}

void HRI::Stub::async::GetVisionServerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVisionServerListReq* request, ::IndyFramework::Protobuf::HRI::GetVisionServerListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetVisionServerListReq, ::IndyFramework::Protobuf::HRI::GetVisionServerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVisionServerList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetVisionServerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVisionServerListReq* request, ::IndyFramework::Protobuf::HRI::GetVisionServerListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVisionServerList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetVisionServerListRes>* HRI::Stub::PrepareAsyncGetVisionServerListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVisionServerListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetVisionServerListRes, ::IndyFramework::Protobuf::HRI::GetVisionServerListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVisionServerList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetVisionServerListRes>* HRI::Stub::AsyncGetVisionServerListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVisionServerListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVisionServerListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetVisionServerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetVisionServerListReq& request, ::IndyFramework::Protobuf::HRI::SetVisionServerListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetVisionServerListReq, ::IndyFramework::Protobuf::HRI::SetVisionServerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetVisionServerList_, context, request, response);
}

void HRI::Stub::async::SetVisionServerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetVisionServerListReq* request, ::IndyFramework::Protobuf::HRI::SetVisionServerListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetVisionServerListReq, ::IndyFramework::Protobuf::HRI::SetVisionServerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVisionServerList_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetVisionServerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetVisionServerListReq* request, ::IndyFramework::Protobuf::HRI::SetVisionServerListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVisionServerList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetVisionServerListRes>* HRI::Stub::PrepareAsyncSetVisionServerListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetVisionServerListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetVisionServerListRes, ::IndyFramework::Protobuf::HRI::SetVisionServerListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetVisionServerList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetVisionServerListRes>* HRI::Stub::AsyncSetVisionServerListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetVisionServerListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetVisionServerListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetVisionObjectList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVisionObjectListReq& request, ::IndyFramework::Protobuf::HRI::GetVisionObjectListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetVisionObjectListReq, ::IndyFramework::Protobuf::HRI::GetVisionObjectListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVisionObjectList_, context, request, response);
}

void HRI::Stub::async::GetVisionObjectList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVisionObjectListReq* request, ::IndyFramework::Protobuf::HRI::GetVisionObjectListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetVisionObjectListReq, ::IndyFramework::Protobuf::HRI::GetVisionObjectListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVisionObjectList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetVisionObjectList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVisionObjectListReq* request, ::IndyFramework::Protobuf::HRI::GetVisionObjectListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVisionObjectList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetVisionObjectListRes>* HRI::Stub::PrepareAsyncGetVisionObjectListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVisionObjectListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetVisionObjectListRes, ::IndyFramework::Protobuf::HRI::GetVisionObjectListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVisionObjectList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetVisionObjectListRes>* HRI::Stub::AsyncGetVisionObjectListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetVisionObjectListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVisionObjectListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetVisionDetection(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::VisionRequest& request, ::IndyFramework::Protobuf::HRI::VisionResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::VisionRequest, ::IndyFramework::Protobuf::HRI::VisionResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVisionDetection_, context, request, response);
}

void HRI::Stub::async::GetVisionDetection(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::VisionRequest* request, ::IndyFramework::Protobuf::HRI::VisionResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::VisionRequest, ::IndyFramework::Protobuf::HRI::VisionResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVisionDetection_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetVisionDetection(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::VisionRequest* request, ::IndyFramework::Protobuf::HRI::VisionResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVisionDetection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::VisionResult>* HRI::Stub::PrepareAsyncGetVisionDetectionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::VisionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::VisionResult, ::IndyFramework::Protobuf::HRI::VisionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVisionDetection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::VisionResult>* HRI::Stub::AsyncGetVisionDetectionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::VisionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVisionDetectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetVisionRetrieval(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::VisionRequest& request, ::IndyFramework::Protobuf::HRI::VisionResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::VisionRequest, ::IndyFramework::Protobuf::HRI::VisionResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVisionRetrieval_, context, request, response);
}

void HRI::Stub::async::GetVisionRetrieval(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::VisionRequest* request, ::IndyFramework::Protobuf::HRI::VisionResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::VisionRequest, ::IndyFramework::Protobuf::HRI::VisionResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVisionRetrieval_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetVisionRetrieval(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::VisionRequest* request, ::IndyFramework::Protobuf::HRI::VisionResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVisionRetrieval_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::VisionResult>* HRI::Stub::PrepareAsyncGetVisionRetrievalRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::VisionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::VisionResult, ::IndyFramework::Protobuf::HRI::VisionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVisionRetrieval_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::VisionResult>* HRI::Stub::AsyncGetVisionRetrievalRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::VisionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVisionRetrievalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetGcodeMotionList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetGcodeMotionListReq& request, ::IndyFramework::Protobuf::HRI::GetGcodeMotionListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetGcodeMotionListReq, ::IndyFramework::Protobuf::HRI::GetGcodeMotionListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGcodeMotionList_, context, request, response);
}

void HRI::Stub::async::GetGcodeMotionList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetGcodeMotionListReq* request, ::IndyFramework::Protobuf::HRI::GetGcodeMotionListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetGcodeMotionListReq, ::IndyFramework::Protobuf::HRI::GetGcodeMotionListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGcodeMotionList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetGcodeMotionList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetGcodeMotionListReq* request, ::IndyFramework::Protobuf::HRI::GetGcodeMotionListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGcodeMotionList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetGcodeMotionListRes>* HRI::Stub::PrepareAsyncGetGcodeMotionListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetGcodeMotionListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetGcodeMotionListRes, ::IndyFramework::Protobuf::HRI::GetGcodeMotionListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGcodeMotionList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetGcodeMotionListRes>* HRI::Stub::AsyncGetGcodeMotionListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetGcodeMotionListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGcodeMotionListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetModbusServerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetModbusServerListReq& request, ::IndyFramework::Protobuf::HRI::GetModbusServerListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetModbusServerListReq, ::IndyFramework::Protobuf::HRI::GetModbusServerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModbusServerList_, context, request, response);
}

void HRI::Stub::async::GetModbusServerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetModbusServerListReq* request, ::IndyFramework::Protobuf::HRI::GetModbusServerListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetModbusServerListReq, ::IndyFramework::Protobuf::HRI::GetModbusServerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModbusServerList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetModbusServerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetModbusServerListReq* request, ::IndyFramework::Protobuf::HRI::GetModbusServerListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModbusServerList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetModbusServerListRes>* HRI::Stub::PrepareAsyncGetModbusServerListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetModbusServerListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetModbusServerListRes, ::IndyFramework::Protobuf::HRI::GetModbusServerListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModbusServerList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetModbusServerListRes>* HRI::Stub::AsyncGetModbusServerListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetModbusServerListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModbusServerListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetModbusServerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetModbusServerListReq& request, ::IndyFramework::Protobuf::HRI::SetModbusServerListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetModbusServerListReq, ::IndyFramework::Protobuf::HRI::SetModbusServerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetModbusServerList_, context, request, response);
}

void HRI::Stub::async::SetModbusServerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetModbusServerListReq* request, ::IndyFramework::Protobuf::HRI::SetModbusServerListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetModbusServerListReq, ::IndyFramework::Protobuf::HRI::SetModbusServerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetModbusServerList_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetModbusServerList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetModbusServerListReq* request, ::IndyFramework::Protobuf::HRI::SetModbusServerListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetModbusServerList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetModbusServerListRes>* HRI::Stub::PrepareAsyncSetModbusServerListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetModbusServerListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetModbusServerListRes, ::IndyFramework::Protobuf::HRI::SetModbusServerListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetModbusServerList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetModbusServerListRes>* HRI::Stub::AsyncSetModbusServerListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetModbusServerListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetModbusServerListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::CheckModbusConnection(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CheckModbusConnectionReq& request, ::IndyFramework::Protobuf::HRI::CheckModbusConnectionRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::CheckModbusConnectionReq, ::IndyFramework::Protobuf::HRI::CheckModbusConnectionRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckModbusConnection_, context, request, response);
}

void HRI::Stub::async::CheckModbusConnection(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CheckModbusConnectionReq* request, ::IndyFramework::Protobuf::HRI::CheckModbusConnectionRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::CheckModbusConnectionReq, ::IndyFramework::Protobuf::HRI::CheckModbusConnectionRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckModbusConnection_, context, request, response, std::move(f));
}

void HRI::Stub::async::CheckModbusConnection(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CheckModbusConnectionReq* request, ::IndyFramework::Protobuf::HRI::CheckModbusConnectionRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckModbusConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CheckModbusConnectionRes>* HRI::Stub::PrepareAsyncCheckModbusConnectionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CheckModbusConnectionReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::CheckModbusConnectionRes, ::IndyFramework::Protobuf::HRI::CheckModbusConnectionReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckModbusConnection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CheckModbusConnectionRes>* HRI::Stub::AsyncCheckModbusConnectionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CheckModbusConnectionReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckModbusConnectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetToolFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetToolFrameListReq& request, ::IndyFramework::Protobuf::HRI::GetToolFrameListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetToolFrameListReq, ::IndyFramework::Protobuf::HRI::GetToolFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetToolFrameList_, context, request, response);
}

void HRI::Stub::async::GetToolFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetToolFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetToolFrameListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetToolFrameListReq, ::IndyFramework::Protobuf::HRI::GetToolFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetToolFrameList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetToolFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetToolFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetToolFrameListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetToolFrameList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetToolFrameListRes>* HRI::Stub::PrepareAsyncGetToolFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetToolFrameListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetToolFrameListRes, ::IndyFramework::Protobuf::HRI::GetToolFrameListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetToolFrameList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetToolFrameListRes>* HRI::Stub::AsyncGetToolFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetToolFrameListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetToolFrameListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetToolFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolFrameListReq& request, ::IndyFramework::Protobuf::HRI::SetToolFrameListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetToolFrameListReq, ::IndyFramework::Protobuf::HRI::SetToolFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetToolFrameList_, context, request, response);
}

void HRI::Stub::async::SetToolFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetToolFrameListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetToolFrameListReq, ::IndyFramework::Protobuf::HRI::SetToolFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetToolFrameList_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetToolFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetToolFrameListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetToolFrameList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetToolFrameListRes>* HRI::Stub::PrepareAsyncSetToolFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolFrameListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetToolFrameListRes, ::IndyFramework::Protobuf::HRI::SetToolFrameListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetToolFrameList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetToolFrameListRes>* HRI::Stub::AsyncSetToolFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolFrameListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetToolFrameListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetRefFrameListReq, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRefFrameList_, context, request, response);
}

void HRI::Stub::async::GetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetRefFrameListReq, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRefFrameList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRefFrameList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>* HRI::Stub::PrepareAsyncGetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes, ::IndyFramework::Protobuf::HRI::GetRefFrameListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRefFrameList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>* HRI::Stub::AsyncGetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRefFrameListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetRefFrameListReq, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetRefFrameList_, context, request, response);
}

void HRI::Stub::async::SetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetRefFrameListReq, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRefFrameList_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRefFrameList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>* HRI::Stub::PrepareAsyncSetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes, ::IndyFramework::Protobuf::HRI::SetRefFrameListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetRefFrameList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>* HRI::Stub::AsyncSetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRefFrameListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetCustomPosList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetCustomPosListReq& request, ::IndyFramework::Protobuf::HRI::GetCustomPosListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetCustomPosListReq, ::IndyFramework::Protobuf::HRI::GetCustomPosListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCustomPosList_, context, request, response);
}

void HRI::Stub::async::GetCustomPosList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetCustomPosListReq* request, ::IndyFramework::Protobuf::HRI::GetCustomPosListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetCustomPosListReq, ::IndyFramework::Protobuf::HRI::GetCustomPosListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCustomPosList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetCustomPosList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetCustomPosListReq* request, ::IndyFramework::Protobuf::HRI::GetCustomPosListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCustomPosList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetCustomPosListRes>* HRI::Stub::PrepareAsyncGetCustomPosListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetCustomPosListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetCustomPosListRes, ::IndyFramework::Protobuf::HRI::GetCustomPosListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCustomPosList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetCustomPosListRes>* HRI::Stub::AsyncGetCustomPosListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetCustomPosListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCustomPosListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetCustomPosList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetCustomPosListReq& request, ::IndyFramework::Protobuf::HRI::SetCustomPosListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetCustomPosListReq, ::IndyFramework::Protobuf::HRI::SetCustomPosListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCustomPosList_, context, request, response);
}

void HRI::Stub::async::SetCustomPosList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetCustomPosListReq* request, ::IndyFramework::Protobuf::HRI::SetCustomPosListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetCustomPosListReq, ::IndyFramework::Protobuf::HRI::SetCustomPosListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCustomPosList_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetCustomPosList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetCustomPosListReq* request, ::IndyFramework::Protobuf::HRI::SetCustomPosListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCustomPosList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetCustomPosListRes>* HRI::Stub::PrepareAsyncSetCustomPosListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetCustomPosListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetCustomPosListRes, ::IndyFramework::Protobuf::HRI::SetCustomPosListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCustomPosList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetCustomPosListRes>* HRI::Stub::AsyncSetCustomPosListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetCustomPosListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCustomPosListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetJointControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetJointControlGainReq& request, ::IndyFramework::Protobuf::HRI::SetJointControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetJointControlGainReq, ::IndyFramework::Protobuf::HRI::SetJointControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetJointControlGain_, context, request, response);
}

void HRI::Stub::async::SetJointControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetJointControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetJointControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetJointControlGainReq, ::IndyFramework::Protobuf::HRI::SetJointControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetJointControlGain_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetJointControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetJointControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetJointControlGainRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetJointControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetJointControlGainRes>* HRI::Stub::PrepareAsyncSetJointControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetJointControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetJointControlGainRes, ::IndyFramework::Protobuf::HRI::SetJointControlGainReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetJointControlGain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetJointControlGainRes>* HRI::Stub::AsyncSetJointControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetJointControlGainReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetJointControlGainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetJointControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetJointControlGainReq& request, ::IndyFramework::Protobuf::HRI::GetJointControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetJointControlGainReq, ::IndyFramework::Protobuf::HRI::GetJointControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJointControlGain_, context, request, response);
}

void HRI::Stub::async::GetJointControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetJointControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetJointControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetJointControlGainReq, ::IndyFramework::Protobuf::HRI::GetJointControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointControlGain_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetJointControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetJointControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetJointControlGainRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJointControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetJointControlGainRes>* HRI::Stub::PrepareAsyncGetJointControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetJointControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetJointControlGainRes, ::IndyFramework::Protobuf::HRI::GetJointControlGainReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJointControlGain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetJointControlGainRes>* HRI::Stub::AsyncGetJointControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetJointControlGainReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJointControlGainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetTaskControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetTaskControlGainReq& request, ::IndyFramework::Protobuf::HRI::SetTaskControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetTaskControlGainReq, ::IndyFramework::Protobuf::HRI::SetTaskControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTaskControlGain_, context, request, response);
}

void HRI::Stub::async::SetTaskControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetTaskControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetTaskControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetTaskControlGainReq, ::IndyFramework::Protobuf::HRI::SetTaskControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTaskControlGain_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetTaskControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetTaskControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetTaskControlGainRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTaskControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetTaskControlGainRes>* HRI::Stub::PrepareAsyncSetTaskControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetTaskControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetTaskControlGainRes, ::IndyFramework::Protobuf::HRI::SetTaskControlGainReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTaskControlGain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetTaskControlGainRes>* HRI::Stub::AsyncSetTaskControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetTaskControlGainReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTaskControlGainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetTaskControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetTaskControlGainReq& request, ::IndyFramework::Protobuf::HRI::GetTaskControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetTaskControlGainReq, ::IndyFramework::Protobuf::HRI::GetTaskControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTaskControlGain_, context, request, response);
}

void HRI::Stub::async::GetTaskControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetTaskControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetTaskControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetTaskControlGainReq, ::IndyFramework::Protobuf::HRI::GetTaskControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTaskControlGain_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetTaskControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetTaskControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetTaskControlGainRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTaskControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetTaskControlGainRes>* HRI::Stub::PrepareAsyncGetTaskControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetTaskControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetTaskControlGainRes, ::IndyFramework::Protobuf::HRI::GetTaskControlGainReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTaskControlGain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetTaskControlGainRes>* HRI::Stub::AsyncGetTaskControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetTaskControlGainReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTaskControlGainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetImpedanceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainReq& request, ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainReq, ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetImpedanceControlGain_, context, request, response);
}

void HRI::Stub::async::SetImpedanceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainReq, ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetImpedanceControlGain_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetImpedanceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetImpedanceControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainRes>* HRI::Stub::PrepareAsyncSetImpedanceControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainRes, ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetImpedanceControlGain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainRes>* HRI::Stub::AsyncSetImpedanceControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetImpedanceControlGainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetImpedanceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainReq& request, ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainReq, ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImpedanceControlGain_, context, request, response);
}

void HRI::Stub::async::GetImpedanceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainReq, ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImpedanceControlGain_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetImpedanceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImpedanceControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainRes>* HRI::Stub::PrepareAsyncGetImpedanceControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainRes, ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImpedanceControlGain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainRes>* HRI::Stub::AsyncGetImpedanceControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImpedanceControlGainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetForceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetForceControlGainReq& request, ::IndyFramework::Protobuf::HRI::SetForceControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetForceControlGainReq, ::IndyFramework::Protobuf::HRI::SetForceControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetForceControlGain_, context, request, response);
}

void HRI::Stub::async::SetForceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetForceControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetForceControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetForceControlGainReq, ::IndyFramework::Protobuf::HRI::SetForceControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetForceControlGain_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetForceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetForceControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetForceControlGainRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetForceControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetForceControlGainRes>* HRI::Stub::PrepareAsyncSetForceControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetForceControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetForceControlGainRes, ::IndyFramework::Protobuf::HRI::SetForceControlGainReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetForceControlGain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetForceControlGainRes>* HRI::Stub::AsyncSetForceControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetForceControlGainReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetForceControlGainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetForceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetForceControlGainReq& request, ::IndyFramework::Protobuf::HRI::GetForceControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetForceControlGainReq, ::IndyFramework::Protobuf::HRI::GetForceControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetForceControlGain_, context, request, response);
}

void HRI::Stub::async::GetForceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetForceControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetForceControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetForceControlGainReq, ::IndyFramework::Protobuf::HRI::GetForceControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetForceControlGain_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetForceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetForceControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetForceControlGainRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetForceControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetForceControlGainRes>* HRI::Stub::PrepareAsyncGetForceControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetForceControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetForceControlGainRes, ::IndyFramework::Protobuf::HRI::GetForceControlGainReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetForceControlGain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetForceControlGainRes>* HRI::Stub::AsyncGetForceControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetForceControlGainReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetForceControlGainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetExtAxisControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainReq& request, ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainReq, ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetExtAxisControlGain_, context, request, response);
}

void HRI::Stub::async::SetExtAxisControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainReq, ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetExtAxisControlGain_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetExtAxisControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetExtAxisControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainRes>* HRI::Stub::PrepareAsyncSetExtAxisControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainRes, ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetExtAxisControlGain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainRes>* HRI::Stub::AsyncSetExtAxisControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetExtAxisControlGainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetExtAxisControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainReq& request, ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainReq, ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExtAxisControlGain_, context, request, response);
}

void HRI::Stub::async::GetExtAxisControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainReq, ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExtAxisControlGain_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetExtAxisControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExtAxisControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainRes>* HRI::Stub::PrepareAsyncGetExtAxisControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainRes, ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExtAxisControlGain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainRes>* HRI::Stub::AsyncGetExtAxisControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExtAxisControlGainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetSensorlessComplianceControlJointGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq& request, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSensorlessComplianceControlJointGain_, context, request, response);
}

void HRI::Stub::async::SetSensorlessComplianceControlJointGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq* request, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSensorlessComplianceControlJointGain_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetSensorlessComplianceControlJointGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq* request, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSensorlessComplianceControlJointGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes>* HRI::Stub::PrepareAsyncSetSensorlessComplianceControlJointGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSensorlessComplianceControlJointGain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes>* HRI::Stub::AsyncSetSensorlessComplianceControlJointGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSensorlessComplianceControlJointGainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetSensorlessComplianceControlJointGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq& request, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSensorlessComplianceControlJointGain_, context, request, response);
}

void HRI::Stub::async::GetSensorlessComplianceControlJointGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq* request, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSensorlessComplianceControlJointGain_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetSensorlessComplianceControlJointGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq* request, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSensorlessComplianceControlJointGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes>* HRI::Stub::PrepareAsyncGetSensorlessComplianceControlJointGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSensorlessComplianceControlJointGain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes>* HRI::Stub::AsyncGetSensorlessComplianceControlJointGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSensorlessComplianceControlJointGainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetSensorlessComplianceControlTaskGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq& request, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSensorlessComplianceControlTaskGain_, context, request, response);
}

void HRI::Stub::async::SetSensorlessComplianceControlTaskGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq* request, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSensorlessComplianceControlTaskGain_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetSensorlessComplianceControlTaskGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq* request, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSensorlessComplianceControlTaskGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes>* HRI::Stub::PrepareAsyncSetSensorlessComplianceControlTaskGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSensorlessComplianceControlTaskGain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes>* HRI::Stub::AsyncSetSensorlessComplianceControlTaskGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSensorlessComplianceControlTaskGainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetSensorlessComplianceControlTaskGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq& request, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSensorlessComplianceControlTaskGain_, context, request, response);
}

void HRI::Stub::async::GetSensorlessComplianceControlTaskGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq* request, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSensorlessComplianceControlTaskGain_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetSensorlessComplianceControlTaskGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq* request, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSensorlessComplianceControlTaskGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes>* HRI::Stub::PrepareAsyncGetSensorlessComplianceControlTaskGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSensorlessComplianceControlTaskGain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes>* HRI::Stub::AsyncGetSensorlessComplianceControlTaskGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSensorlessComplianceControlTaskGainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetFricComp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetFricCompReq& request, ::IndyFramework::Protobuf::HRI::SetFricCompRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetFricCompReq, ::IndyFramework::Protobuf::HRI::SetFricCompRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetFricComp_, context, request, response);
}

void HRI::Stub::async::SetFricComp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetFricCompReq* request, ::IndyFramework::Protobuf::HRI::SetFricCompRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetFricCompReq, ::IndyFramework::Protobuf::HRI::SetFricCompRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFricComp_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetFricComp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetFricCompReq* request, ::IndyFramework::Protobuf::HRI::SetFricCompRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFricComp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetFricCompRes>* HRI::Stub::PrepareAsyncSetFricCompRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetFricCompReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetFricCompRes, ::IndyFramework::Protobuf::HRI::SetFricCompReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetFricComp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetFricCompRes>* HRI::Stub::AsyncSetFricCompRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetFricCompReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetFricCompRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetFricComp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetFricCompReq& request, ::IndyFramework::Protobuf::HRI::GetFricCompRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetFricCompReq, ::IndyFramework::Protobuf::HRI::GetFricCompRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFricComp_, context, request, response);
}

void HRI::Stub::async::GetFricComp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetFricCompReq* request, ::IndyFramework::Protobuf::HRI::GetFricCompRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetFricCompReq, ::IndyFramework::Protobuf::HRI::GetFricCompRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFricComp_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetFricComp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetFricCompReq* request, ::IndyFramework::Protobuf::HRI::GetFricCompRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFricComp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetFricCompRes>* HRI::Stub::PrepareAsyncGetFricCompRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetFricCompReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetFricCompRes, ::IndyFramework::Protobuf::HRI::GetFricCompReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFricComp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetFricCompRes>* HRI::Stub::AsyncGetFricCompRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetFricCompReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFricCompRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetHomePos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetHomePosReq& request, ::IndyFramework::Protobuf::HRI::SetHomePosRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetHomePosReq, ::IndyFramework::Protobuf::HRI::SetHomePosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetHomePos_, context, request, response);
}

void HRI::Stub::async::SetHomePos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetHomePosReq* request, ::IndyFramework::Protobuf::HRI::SetHomePosRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetHomePosReq, ::IndyFramework::Protobuf::HRI::SetHomePosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetHomePos_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetHomePos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetHomePosReq* request, ::IndyFramework::Protobuf::HRI::SetHomePosRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetHomePos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetHomePosRes>* HRI::Stub::PrepareAsyncSetHomePosRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetHomePosReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetHomePosRes, ::IndyFramework::Protobuf::HRI::SetHomePosReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetHomePos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetHomePosRes>* HRI::Stub::AsyncSetHomePosRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetHomePosReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetHomePosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetHomePos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetHomePosReq& request, ::IndyFramework::Protobuf::HRI::GetHomePosRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetHomePosReq, ::IndyFramework::Protobuf::HRI::GetHomePosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetHomePos_, context, request, response);
}

void HRI::Stub::async::GetHomePos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetHomePosReq* request, ::IndyFramework::Protobuf::HRI::GetHomePosRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetHomePosReq, ::IndyFramework::Protobuf::HRI::GetHomePosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHomePos_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetHomePos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetHomePosReq* request, ::IndyFramework::Protobuf::HRI::GetHomePosRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHomePos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetHomePosRes>* HRI::Stub::PrepareAsyncGetHomePosRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetHomePosReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetHomePosRes, ::IndyFramework::Protobuf::HRI::GetHomePosReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetHomePos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetHomePosRes>* HRI::Stub::AsyncGetHomePosRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetHomePosReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetHomePosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetMountPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetMountPosReq& request, ::IndyFramework::Protobuf::HRI::SetMountPosRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetMountPosReq, ::IndyFramework::Protobuf::HRI::SetMountPosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMountPos_, context, request, response);
}

void HRI::Stub::async::SetMountPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetMountPosReq* request, ::IndyFramework::Protobuf::HRI::SetMountPosRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetMountPosReq, ::IndyFramework::Protobuf::HRI::SetMountPosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMountPos_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetMountPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetMountPosReq* request, ::IndyFramework::Protobuf::HRI::SetMountPosRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMountPos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetMountPosRes>* HRI::Stub::PrepareAsyncSetMountPosRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetMountPosReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetMountPosRes, ::IndyFramework::Protobuf::HRI::SetMountPosReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMountPos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetMountPosRes>* HRI::Stub::AsyncSetMountPosRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetMountPosReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMountPosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetMountPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetMountPosReq& request, ::IndyFramework::Protobuf::HRI::GetMountPosRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetMountPosReq, ::IndyFramework::Protobuf::HRI::GetMountPosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMountPos_, context, request, response);
}

void HRI::Stub::async::GetMountPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetMountPosReq* request, ::IndyFramework::Protobuf::HRI::GetMountPosRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetMountPosReq, ::IndyFramework::Protobuf::HRI::GetMountPosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMountPos_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetMountPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetMountPosReq* request, ::IndyFramework::Protobuf::HRI::GetMountPosRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMountPos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetMountPosRes>* HRI::Stub::PrepareAsyncGetMountPosRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetMountPosReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetMountPosRes, ::IndyFramework::Protobuf::HRI::GetMountPosReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMountPos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetMountPosRes>* HRI::Stub::AsyncGetMountPosRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetMountPosReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMountPosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetPackagingPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPackagingPosReq& request, ::IndyFramework::Protobuf::HRI::GetPackagingPosRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetPackagingPosReq, ::IndyFramework::Protobuf::HRI::GetPackagingPosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPackagingPos_, context, request, response);
}

void HRI::Stub::async::GetPackagingPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPackagingPosReq* request, ::IndyFramework::Protobuf::HRI::GetPackagingPosRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetPackagingPosReq, ::IndyFramework::Protobuf::HRI::GetPackagingPosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPackagingPos_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetPackagingPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPackagingPosReq* request, ::IndyFramework::Protobuf::HRI::GetPackagingPosRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPackagingPos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetPackagingPosRes>* HRI::Stub::PrepareAsyncGetPackagingPosRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPackagingPosReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetPackagingPosRes, ::IndyFramework::Protobuf::HRI::GetPackagingPosReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPackagingPos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetPackagingPosRes>* HRI::Stub::AsyncGetPackagingPosRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetPackagingPosReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPackagingPosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetToolProperty(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolPropertyReq& request, ::IndyFramework::Protobuf::HRI::SetToolPropertyRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetToolPropertyReq, ::IndyFramework::Protobuf::HRI::SetToolPropertyRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetToolProperty_, context, request, response);
}

void HRI::Stub::async::SetToolProperty(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolPropertyReq* request, ::IndyFramework::Protobuf::HRI::SetToolPropertyRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetToolPropertyReq, ::IndyFramework::Protobuf::HRI::SetToolPropertyRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetToolProperty_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetToolProperty(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolPropertyReq* request, ::IndyFramework::Protobuf::HRI::SetToolPropertyRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetToolProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetToolPropertyRes>* HRI::Stub::PrepareAsyncSetToolPropertyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolPropertyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetToolPropertyRes, ::IndyFramework::Protobuf::HRI::SetToolPropertyReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetToolProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetToolPropertyRes>* HRI::Stub::AsyncSetToolPropertyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetToolPropertyReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetToolPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetToolProperty(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetToolPropertyReq& request, ::IndyFramework::Protobuf::HRI::GetToolPropertyRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetToolPropertyReq, ::IndyFramework::Protobuf::HRI::GetToolPropertyRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetToolProperty_, context, request, response);
}

void HRI::Stub::async::GetToolProperty(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetToolPropertyReq* request, ::IndyFramework::Protobuf::HRI::GetToolPropertyRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetToolPropertyReq, ::IndyFramework::Protobuf::HRI::GetToolPropertyRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetToolProperty_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetToolProperty(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetToolPropertyReq* request, ::IndyFramework::Protobuf::HRI::GetToolPropertyRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetToolProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetToolPropertyRes>* HRI::Stub::PrepareAsyncGetToolPropertyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetToolPropertyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetToolPropertyRes, ::IndyFramework::Protobuf::HRI::GetToolPropertyReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetToolProperty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetToolPropertyRes>* HRI::Stub::AsyncGetToolPropertyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetToolPropertyReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetToolPropertyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetOnStartProgramConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigReq& request, ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigReq, ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOnStartProgramConfig_, context, request, response);
}

void HRI::Stub::async::GetOnStartProgramConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigReq* request, ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigReq, ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOnStartProgramConfig_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetOnStartProgramConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigReq* request, ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOnStartProgramConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigRes>* HRI::Stub::PrepareAsyncGetOnStartProgramConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigRes, ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOnStartProgramConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigRes>* HRI::Stub::AsyncGetOnStartProgramConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOnStartProgramConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetOnStartProgramConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigReq& request, ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigReq, ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetOnStartProgramConfig_, context, request, response);
}

void HRI::Stub::async::SetOnStartProgramConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigReq* request, ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigReq, ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOnStartProgramConfig_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetOnStartProgramConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigReq* request, ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOnStartProgramConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigRes>* HRI::Stub::PrepareAsyncSetOnStartProgramConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigRes, ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetOnStartProgramConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigRes>* HRI::Stub::AsyncSetOnStartProgramConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetOnStartProgramConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetSafetyLimitConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigReq& request, ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigReq, ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSafetyLimitConfig_, context, request, response);
}

void HRI::Stub::async::GetSafetyLimitConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigReq* request, ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigReq, ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSafetyLimitConfig_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetSafetyLimitConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigReq* request, ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSafetyLimitConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigRes>* HRI::Stub::PrepareAsyncGetSafetyLimitConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigRes, ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSafetyLimitConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigRes>* HRI::Stub::AsyncGetSafetyLimitConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSafetyLimitConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetSafetyLimitConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigReq& request, ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigReq, ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSafetyLimitConfig_, context, request, response);
}

void HRI::Stub::async::SetSafetyLimitConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigReq* request, ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigReq, ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSafetyLimitConfig_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetSafetyLimitConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigReq* request, ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSafetyLimitConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigRes>* HRI::Stub::PrepareAsyncSetSafetyLimitConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigRes, ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSafetyLimitConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigRes>* HRI::Stub::AsyncSetSafetyLimitConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSafetyLimitConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetSafetyStopConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigReq& request, ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigReq, ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSafetyStopConfig_, context, request, response);
}

void HRI::Stub::async::GetSafetyStopConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigReq* request, ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigReq, ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSafetyStopConfig_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetSafetyStopConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigReq* request, ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSafetyStopConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigRes>* HRI::Stub::PrepareAsyncGetSafetyStopConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigRes, ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSafetyStopConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigRes>* HRI::Stub::AsyncGetSafetyStopConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSafetyStopConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetSafetyStopConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigReq& request, ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigReq, ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSafetyStopConfig_, context, request, response);
}

void HRI::Stub::async::SetSafetyStopConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigReq* request, ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigReq, ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSafetyStopConfig_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetSafetyStopConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigReq* request, ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSafetyStopConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigRes>* HRI::Stub::PrepareAsyncSetSafetyStopConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigRes, ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSafetyStopConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigRes>* HRI::Stub::AsyncSetSafetyStopConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSafetyStopConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetSafetyConfigHash(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashReq& request, ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashReq, ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSafetyConfigHash_, context, request, response);
}

void HRI::Stub::async::GetSafetyConfigHash(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashReq* request, ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashReq, ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSafetyConfigHash_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetSafetyConfigHash(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashReq* request, ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSafetyConfigHash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashRes>* HRI::Stub::PrepareAsyncGetSafetyConfigHashRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashRes, ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSafetyConfigHash_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashRes>* HRI::Stub::AsyncGetSafetyConfigHashRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSafetyConfigHashRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetKinematicsParams(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::KinematicsParams* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::KinematicsParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetKinematicsParams_, context, request, response);
}

void HRI::Stub::async::GetKinematicsParams(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::KinematicsParams* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::KinematicsParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetKinematicsParams_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetKinematicsParams(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::KinematicsParams* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetKinematicsParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::KinematicsParams>* HRI::Stub::PrepareAsyncGetKinematicsParamsRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::KinematicsParams, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetKinematicsParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::KinematicsParams>* HRI::Stub::AsyncGetKinematicsParamsRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetKinematicsParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::KeyInit(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::KeyInitReq& request, ::IndyFramework::Protobuf::HRI::KeyInitRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::KeyInitReq, ::IndyFramework::Protobuf::HRI::KeyInitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_KeyInit_, context, request, response);
}

void HRI::Stub::async::KeyInit(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::KeyInitReq* request, ::IndyFramework::Protobuf::HRI::KeyInitRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::KeyInitReq, ::IndyFramework::Protobuf::HRI::KeyInitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KeyInit_, context, request, response, std::move(f));
}

void HRI::Stub::async::KeyInit(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::KeyInitReq* request, ::IndyFramework::Protobuf::HRI::KeyInitRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KeyInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::KeyInitRes>* HRI::Stub::PrepareAsyncKeyInitRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::KeyInitReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::KeyInitRes, ::IndyFramework::Protobuf::HRI::KeyInitReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_KeyInit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::KeyInitRes>* HRI::Stub::AsyncKeyInitRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::KeyInitReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncKeyInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::KeyData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::KeyDataReq& request, ::IndyFramework::Protobuf::HRI::KeyDataRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::KeyDataReq, ::IndyFramework::Protobuf::HRI::KeyDataRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_KeyData_, context, request, response);
}

void HRI::Stub::async::KeyData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::KeyDataReq* request, ::IndyFramework::Protobuf::HRI::KeyDataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::KeyDataReq, ::IndyFramework::Protobuf::HRI::KeyDataRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KeyData_, context, request, response, std::move(f));
}

void HRI::Stub::async::KeyData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::KeyDataReq* request, ::IndyFramework::Protobuf::HRI::KeyDataRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KeyData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::KeyDataRes>* HRI::Stub::PrepareAsyncKeyDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::KeyDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::KeyDataRes, ::IndyFramework::Protobuf::HRI::KeyDataReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_KeyData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::KeyDataRes>* HRI::Stub::AsyncKeyDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::KeyDataReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncKeyDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::ProgramUpdateKey(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::ProgramData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ProgramData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProgramUpdateKey_, context, request, response);
}

void HRI::Stub::async::ProgramUpdateKey(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ProgramData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ProgramData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProgramUpdateKey_, context, request, response, std::move(f));
}

void HRI::Stub::async::ProgramUpdateKey(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ProgramData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProgramUpdateKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::ProgramData>* HRI::Stub::PrepareAsyncProgramUpdateKeyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::ProgramData, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProgramUpdateKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::ProgramData>* HRI::Stub::AsyncProgramUpdateKeyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProgramUpdateKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetDirectTeachingModeKey(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq& request, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDirectTeachingModeKey_, context, request, response);
}

void HRI::Stub::async::SetDirectTeachingModeKey(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq* request, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDirectTeachingModeKey_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetDirectTeachingModeKey(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq* request, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDirectTeachingModeKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes>* HRI::Stub::PrepareAsyncSetDirectTeachingModeKeyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDirectTeachingModeKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes>* HRI::Stub::AsyncSetDirectTeachingModeKeyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDirectTeachingModeKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetAutoModeConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::GetAutoModeConfigRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GetAutoModeConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAutoModeConfig_, context, request, response);
}

void HRI::Stub::async::GetAutoModeConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GetAutoModeConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GetAutoModeConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAutoModeConfig_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetAutoModeConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GetAutoModeConfigRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAutoModeConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetAutoModeConfigRes>* HRI::Stub::PrepareAsyncGetAutoModeConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetAutoModeConfigRes, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAutoModeConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetAutoModeConfigRes>* HRI::Stub::AsyncGetAutoModeConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAutoModeConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetAutoMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetAutoModeReq& request, ::IndyFramework::Protobuf::HRI::SetAutoModeRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetAutoModeReq, ::IndyFramework::Protobuf::HRI::SetAutoModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAutoMode_, context, request, response);
}

void HRI::Stub::async::SetAutoMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetAutoModeReq* request, ::IndyFramework::Protobuf::HRI::SetAutoModeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetAutoModeReq, ::IndyFramework::Protobuf::HRI::SetAutoModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAutoMode_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetAutoMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetAutoModeReq* request, ::IndyFramework::Protobuf::HRI::SetAutoModeRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAutoMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetAutoModeRes>* HRI::Stub::PrepareAsyncSetAutoModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetAutoModeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetAutoModeRes, ::IndyFramework::Protobuf::HRI::SetAutoModeReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAutoMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetAutoModeRes>* HRI::Stub::AsyncSetAutoModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetAutoModeReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAutoModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::CheckAutoMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::CheckAutoModeRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CheckAutoModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckAutoMode_, context, request, response);
}

void HRI::Stub::async::CheckAutoMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CheckAutoModeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CheckAutoModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckAutoMode_, context, request, response, std::move(f));
}

void HRI::Stub::async::CheckAutoMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CheckAutoModeRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckAutoMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CheckAutoModeRes>* HRI::Stub::PrepareAsyncCheckAutoModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::CheckAutoModeRes, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckAutoMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CheckAutoModeRes>* HRI::Stub::AsyncCheckAutoModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckAutoModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::CheckReducedMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::CheckReducedModeRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CheckReducedModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckReducedMode_, context, request, response);
}

void HRI::Stub::async::CheckReducedMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CheckReducedModeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CheckReducedModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckReducedMode_, context, request, response, std::move(f));
}

void HRI::Stub::async::CheckReducedMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CheckReducedModeRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckReducedMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CheckReducedModeRes>* HRI::Stub::PrepareAsyncCheckReducedModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::CheckReducedModeRes, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckReducedMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CheckReducedModeRes>* HRI::Stub::AsyncCheckReducedModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckReducedModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetReducedRatio(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::GetReducedRatioRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GetReducedRatioRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetReducedRatio_, context, request, response);
}

void HRI::Stub::async::GetReducedRatio(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GetReducedRatioRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GetReducedRatioRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetReducedRatio_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetReducedRatio(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GetReducedRatioRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetReducedRatio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetReducedRatioRes>* HRI::Stub::PrepareAsyncGetReducedRatioRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetReducedRatioRes, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetReducedRatio_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetReducedRatioRes>* HRI::Stub::AsyncGetReducedRatioRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetReducedRatioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetReducedSpeed(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::GetReducedSpeedRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GetReducedSpeedRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetReducedSpeed_, context, request, response);
}

void HRI::Stub::async::GetReducedSpeed(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GetReducedSpeedRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GetReducedSpeedRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetReducedSpeed_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetReducedSpeed(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GetReducedSpeedRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetReducedSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetReducedSpeedRes>* HRI::Stub::PrepareAsyncGetReducedSpeedRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetReducedSpeedRes, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetReducedSpeed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetReducedSpeedRes>* HRI::Stub::AsyncGetReducedSpeedRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetReducedSpeedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetReducedSpeed(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetReducedSpeedReq& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetReducedSpeedReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetReducedSpeed_, context, request, response);
}

void HRI::Stub::async::SetReducedSpeed(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetReducedSpeedReq* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetReducedSpeedReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetReducedSpeed_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetReducedSpeed(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetReducedSpeedReq* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetReducedSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetReducedSpeedRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetReducedSpeedReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::SetReducedSpeedReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetReducedSpeed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetReducedSpeedRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetReducedSpeedReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetReducedSpeedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetStopState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::StopState* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::StopState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStopState_, context, request, response);
}

void HRI::Stub::async::GetStopState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::StopState* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::StopState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStopState_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetStopState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::StopState* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStopState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::StopState>* HRI::Stub::PrepareAsyncGetStopStateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::StopState, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStopState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::StopState>* HRI::Stub::AsyncGetStopStateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStopStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetSafetyFunctionState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::SafetyFunctionState* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SafetyFunctionState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSafetyFunctionState_, context, request, response);
}

void HRI::Stub::async::GetSafetyFunctionState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SafetyFunctionState* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SafetyFunctionState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSafetyFunctionState_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetSafetyFunctionState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SafetyFunctionState* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSafetyFunctionState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SafetyFunctionState>* HRI::Stub::PrepareAsyncGetSafetyFunctionStateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SafetyFunctionState, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSafetyFunctionState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SafetyFunctionState>* HRI::Stub::AsyncGetSafetyFunctionStateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSafetyFunctionStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::RequestSafetyFunction(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SafetyFunctionState& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SafetyFunctionState, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestSafetyFunction_, context, request, response);
}

void HRI::Stub::async::RequestSafetyFunction(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SafetyFunctionState* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SafetyFunctionState, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestSafetyFunction_, context, request, response, std::move(f));
}

void HRI::Stub::async::RequestSafetyFunction(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SafetyFunctionState* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestSafetyFunction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncRequestSafetyFunctionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SafetyFunctionState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::SafetyFunctionState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestSafetyFunction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncRequestSafetyFunctionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SafetyFunctionState& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestSafetyFunctionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::PlayProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayProgramReq& request, ::IndyFramework::Protobuf::HRI::PlayProgramRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::PlayProgramReq, ::IndyFramework::Protobuf::HRI::PlayProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlayProgram_, context, request, response);
}

void HRI::Stub::async::PlayProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayProgramReq* request, ::IndyFramework::Protobuf::HRI::PlayProgramRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::PlayProgramReq, ::IndyFramework::Protobuf::HRI::PlayProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayProgram_, context, request, response, std::move(f));
}

void HRI::Stub::async::PlayProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayProgramReq* request, ::IndyFramework::Protobuf::HRI::PlayProgramRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::PlayProgramRes>* HRI::Stub::PrepareAsyncPlayProgramRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayProgramReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::PlayProgramRes, ::IndyFramework::Protobuf::HRI::PlayProgramReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlayProgram_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::PlayProgramRes>* HRI::Stub::AsyncPlayProgramRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayProgramReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayProgramRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::PlayIndexProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayIndexProgramReq& request, ::IndyFramework::Protobuf::HRI::PlayIndexProgramRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::PlayIndexProgramReq, ::IndyFramework::Protobuf::HRI::PlayIndexProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlayIndexProgram_, context, request, response);
}

void HRI::Stub::async::PlayIndexProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayIndexProgramReq* request, ::IndyFramework::Protobuf::HRI::PlayIndexProgramRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::PlayIndexProgramReq, ::IndyFramework::Protobuf::HRI::PlayIndexProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayIndexProgram_, context, request, response, std::move(f));
}

void HRI::Stub::async::PlayIndexProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayIndexProgramReq* request, ::IndyFramework::Protobuf::HRI::PlayIndexProgramRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayIndexProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::PlayIndexProgramRes>* HRI::Stub::PrepareAsyncPlayIndexProgramRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayIndexProgramReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::PlayIndexProgramRes, ::IndyFramework::Protobuf::HRI::PlayIndexProgramReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlayIndexProgram_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::PlayIndexProgramRes>* HRI::Stub::AsyncPlayIndexProgramRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayIndexProgramReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayIndexProgramRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::PlayProgramLine(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayProgramLineReq& request, ::IndyFramework::Protobuf::HRI::PlayProgramLineRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::PlayProgramLineReq, ::IndyFramework::Protobuf::HRI::PlayProgramLineRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlayProgramLine_, context, request, response);
}

void HRI::Stub::async::PlayProgramLine(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayProgramLineReq* request, ::IndyFramework::Protobuf::HRI::PlayProgramLineRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::PlayProgramLineReq, ::IndyFramework::Protobuf::HRI::PlayProgramLineRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayProgramLine_, context, request, response, std::move(f));
}

void HRI::Stub::async::PlayProgramLine(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayProgramLineReq* request, ::IndyFramework::Protobuf::HRI::PlayProgramLineRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayProgramLine_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::PlayProgramLineRes>* HRI::Stub::PrepareAsyncPlayProgramLineRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayProgramLineReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::PlayProgramLineRes, ::IndyFramework::Protobuf::HRI::PlayProgramLineReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlayProgramLine_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::PlayProgramLineRes>* HRI::Stub::AsyncPlayProgramLineRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PlayProgramLineReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayProgramLineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::ResumeProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ResumeProgramReq& request, ::IndyFramework::Protobuf::HRI::ResumeProgramRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::ResumeProgramReq, ::IndyFramework::Protobuf::HRI::ResumeProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResumeProgram_, context, request, response);
}

void HRI::Stub::async::ResumeProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ResumeProgramReq* request, ::IndyFramework::Protobuf::HRI::ResumeProgramRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::ResumeProgramReq, ::IndyFramework::Protobuf::HRI::ResumeProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResumeProgram_, context, request, response, std::move(f));
}

void HRI::Stub::async::ResumeProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ResumeProgramReq* request, ::IndyFramework::Protobuf::HRI::ResumeProgramRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResumeProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::ResumeProgramRes>* HRI::Stub::PrepareAsyncResumeProgramRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ResumeProgramReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::ResumeProgramRes, ::IndyFramework::Protobuf::HRI::ResumeProgramReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResumeProgram_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::ResumeProgramRes>* HRI::Stub::AsyncResumeProgramRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ResumeProgramReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResumeProgramRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::StopProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopProgramReq& request, ::IndyFramework::Protobuf::HRI::StopProgramRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::StopProgramReq, ::IndyFramework::Protobuf::HRI::StopProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopProgram_, context, request, response);
}

void HRI::Stub::async::StopProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopProgramReq* request, ::IndyFramework::Protobuf::HRI::StopProgramRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::StopProgramReq, ::IndyFramework::Protobuf::HRI::StopProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopProgram_, context, request, response, std::move(f));
}

void HRI::Stub::async::StopProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopProgramReq* request, ::IndyFramework::Protobuf::HRI::StopProgramRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::StopProgramRes>* HRI::Stub::PrepareAsyncStopProgramRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopProgramReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::StopProgramRes, ::IndyFramework::Protobuf::HRI::StopProgramReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopProgram_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::StopProgramRes>* HRI::Stub::AsyncStopProgramRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::StopProgramReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopProgramRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::PauseProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PauseProgramReq& request, ::IndyFramework::Protobuf::HRI::PauseProgramRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::PauseProgramReq, ::IndyFramework::Protobuf::HRI::PauseProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PauseProgram_, context, request, response);
}

void HRI::Stub::async::PauseProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PauseProgramReq* request, ::IndyFramework::Protobuf::HRI::PauseProgramRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::PauseProgramReq, ::IndyFramework::Protobuf::HRI::PauseProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseProgram_, context, request, response, std::move(f));
}

void HRI::Stub::async::PauseProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PauseProgramReq* request, ::IndyFramework::Protobuf::HRI::PauseProgramRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::PauseProgramRes>* HRI::Stub::PrepareAsyncPauseProgramRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PauseProgramReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::PauseProgramRes, ::IndyFramework::Protobuf::HRI::PauseProgramReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PauseProgram_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::PauseProgramRes>* HRI::Stub::AsyncPauseProgramRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::PauseProgramReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPauseProgramRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DOSignals& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::DOSignals, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDO_, context, request, response);
}

void HRI::Stub::async::SetDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DOSignals* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::DOSignals, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDO_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DOSignals* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetDORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DOSignals& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::DOSignals, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetDORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DOSignals& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AOSignals& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::AOSignals, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAO_, context, request, response);
}

void HRI::Stub::async::SetAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AOSignals* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::AOSignals, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAO_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AOSignals* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetAORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AOSignals& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::AOSignals, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetAORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AOSignals& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetEndDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::EndtoolSignalList& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::EndtoolSignalList, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetEndDO_, context, request, response);
}

void HRI::Stub::async::SetEndDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::EndtoolSignalList* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::EndtoolSignalList, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEndDO_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetEndDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::EndtoolSignalList* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEndDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetEndDORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::EndtoolSignalList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::EndtoolSignalList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetEndDO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetEndDORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::EndtoolSignalList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetEndDORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetEndAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AOSignals& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::AOSignals, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetEndAO_, context, request, response);
}

void HRI::Stub::async::SetEndAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AOSignals* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::AOSignals, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEndAO_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetEndAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AOSignals* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEndAO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetEndAORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AOSignals& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::AOSignals, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetEndAO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetEndAORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AOSignals& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetEndAORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetToolList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ToolList& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::ToolList, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetToolList_, context, request, response);
}

void HRI::Stub::async::SetToolList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ToolList* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::ToolList, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetToolList_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetToolList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ToolList* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetToolList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetToolListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ToolList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::ToolList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetToolList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetToolListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::ToolList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetToolListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetToolList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::ToolList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ToolList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetToolList_, context, request, response);
}

void HRI::Stub::async::GetToolList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ToolList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ToolList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetToolList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetToolList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ToolList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetToolList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::ToolList>* HRI::Stub::PrepareAsyncGetToolListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::ToolList, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetToolList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::ToolList>* HRI::Stub::AsyncGetToolListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetToolListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetDIConfigList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DIConfigList& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::DIConfigList, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDIConfigList_, context, request, response);
}

void HRI::Stub::async::SetDIConfigList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DIConfigList* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::DIConfigList, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDIConfigList_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetDIConfigList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DIConfigList* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDIConfigList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetDIConfigListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DIConfigList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::DIConfigList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDIConfigList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetDIConfigListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DIConfigList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDIConfigListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetDIConfigList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::DIConfigList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::DIConfigList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDIConfigList_, context, request, response);
}

void HRI::Stub::async::GetDIConfigList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::DIConfigList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::DIConfigList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDIConfigList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetDIConfigList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::DIConfigList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDIConfigList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::DIConfigList>* HRI::Stub::PrepareAsyncGetDIConfigListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::DIConfigList, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDIConfigList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::DIConfigList>* HRI::Stub::AsyncGetDIConfigListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDIConfigListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetDOConfigList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DOConfigList& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::DOConfigList, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDOConfigList_, context, request, response);
}

void HRI::Stub::async::SetDOConfigList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DOConfigList* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::DOConfigList, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDOConfigList_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetDOConfigList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DOConfigList* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDOConfigList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetDOConfigListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DOConfigList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::DOConfigList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDOConfigList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetDOConfigListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::DOConfigList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDOConfigListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetDOConfigList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::DOConfigList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::DOConfigList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDOConfigList_, context, request, response);
}

void HRI::Stub::async::GetDOConfigList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::DOConfigList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::DOConfigList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDOConfigList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetDOConfigList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::DOConfigList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDOConfigList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::DOConfigList>* HRI::Stub::PrepareAsyncGetDOConfigListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::DOConfigList, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDOConfigList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::DOConfigList>* HRI::Stub::AsyncGetDOConfigListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDOConfigListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetCollSensLevel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionSensLevel& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::CollisionSensLevel, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCollSensLevel_, context, request, response);
}

void HRI::Stub::async::SetCollSensLevel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionSensLevel* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::CollisionSensLevel, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCollSensLevel_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetCollSensLevel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionSensLevel* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCollSensLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetCollSensLevelRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionSensLevel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::CollisionSensLevel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCollSensLevel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetCollSensLevelRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionSensLevel& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCollSensLevelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetCollSensLevel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::CollisionSensLevel* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CollisionSensLevel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCollSensLevel_, context, request, response);
}

void HRI::Stub::async::GetCollSensLevel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CollisionSensLevel* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CollisionSensLevel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCollSensLevel_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetCollSensLevel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CollisionSensLevel* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCollSensLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CollisionSensLevel>* HRI::Stub::PrepareAsyncGetCollSensLevelRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::CollisionSensLevel, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCollSensLevel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CollisionSensLevel>* HRI::Stub::AsyncGetCollSensLevelRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCollSensLevelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetCollPolicy(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionPolicy& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::CollisionPolicy, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCollPolicy_, context, request, response);
}

void HRI::Stub::async::SetCollPolicy(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionPolicy* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::CollisionPolicy, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCollPolicy_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetCollPolicy(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionPolicy* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCollPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetCollPolicyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionPolicy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::CollisionPolicy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCollPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetCollPolicyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionPolicy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCollPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetCollPolicy(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::CollisionPolicy* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CollisionPolicy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCollPolicy_, context, request, response);
}

void HRI::Stub::async::GetCollPolicy(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CollisionPolicy* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CollisionPolicy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCollPolicy_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetCollPolicy(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CollisionPolicy* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCollPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CollisionPolicy>* HRI::Stub::PrepareAsyncGetCollPolicyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::CollisionPolicy, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCollPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CollisionPolicy>* HRI::Stub::AsyncGetCollPolicyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCollPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionThresholds& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::CollisionThresholds, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCollSensParam_, context, request, response);
}

void HRI::Stub::async::SetCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionThresholds* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::CollisionThresholds, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCollSensParam_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionThresholds* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCollSensParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetCollSensParamRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionThresholds& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::CollisionThresholds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCollSensParam_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetCollSensParamRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::CollisionThresholds& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCollSensParamRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::CollisionThresholds* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CollisionThresholds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCollSensParam_, context, request, response);
}

void HRI::Stub::async::GetCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CollisionThresholds* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CollisionThresholds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCollSensParam_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CollisionThresholds* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCollSensParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CollisionThresholds>* HRI::Stub::PrepareAsyncGetCollSensParamRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::CollisionThresholds, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCollSensParam_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CollisionThresholds>* HRI::Stub::AsyncGetCollSensParamRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCollSensParamRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::InitCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitCollSensParam_, context, request, response);
}

void HRI::Stub::async::InitCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitCollSensParam_, context, request, response, std::move(f));
}

void HRI::Stub::async::InitCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitCollSensParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncInitCollSensParamRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitCollSensParam_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncInitCollSensParamRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitCollSensParamRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::PlayTuningProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TuningProgram& request, ::IndyFramework::Protobuf::HRI::CollisionThresholds* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::TuningProgram, ::IndyFramework::Protobuf::HRI::CollisionThresholds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlayTuningProgram_, context, request, response);
}

void HRI::Stub::async::PlayTuningProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TuningProgram* request, ::IndyFramework::Protobuf::HRI::CollisionThresholds* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::TuningProgram, ::IndyFramework::Protobuf::HRI::CollisionThresholds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayTuningProgram_, context, request, response, std::move(f));
}

void HRI::Stub::async::PlayTuningProgram(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TuningProgram* request, ::IndyFramework::Protobuf::HRI::CollisionThresholds* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayTuningProgram_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CollisionThresholds>* HRI::Stub::PrepareAsyncPlayTuningProgramRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TuningProgram& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::CollisionThresholds, ::IndyFramework::Protobuf::HRI::TuningProgram, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlayTuningProgram_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::CollisionThresholds>* HRI::Stub::AsyncPlayTuningProgramRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TuningProgram& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayTuningProgramRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetTeleOpDevice(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::TeleOpDevice* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleOpDevice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTeleOpDevice_, context, request, response);
}

void HRI::Stub::async::GetTeleOpDevice(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleOpDevice* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleOpDevice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpDevice_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetTeleOpDevice(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleOpDevice* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::TeleOpDevice>* HRI::Stub::PrepareAsyncGetTeleOpDeviceRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::TeleOpDevice, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTeleOpDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::TeleOpDevice>* HRI::Stub::AsyncGetTeleOpDeviceRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTeleOpDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetTeleOpState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::TeleOpState* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleOpState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTeleOpState_, context, request, response);
}

void HRI::Stub::async::GetTeleOpState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleOpState* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleOpState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpState_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetTeleOpState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleOpState* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::TeleOpState>* HRI::Stub::PrepareAsyncGetTeleOpStateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::TeleOpState, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTeleOpState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::TeleOpState>* HRI::Stub::AsyncGetTeleOpStateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTeleOpStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::ConnectTeleOpDevice(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleOpDevice& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::TeleOpDevice, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConnectTeleOpDevice_, context, request, response);
}

void HRI::Stub::async::ConnectTeleOpDevice(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleOpDevice* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::TeleOpDevice, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectTeleOpDevice_, context, request, response, std::move(f));
}

void HRI::Stub::async::ConnectTeleOpDevice(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleOpDevice* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectTeleOpDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncConnectTeleOpDeviceRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleOpDevice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::TeleOpDevice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConnectTeleOpDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncConnectTeleOpDeviceRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleOpDevice& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectTeleOpDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::DisConnectTeleOpDevice(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisConnectTeleOpDevice_, context, request, response);
}

void HRI::Stub::async::DisConnectTeleOpDevice(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisConnectTeleOpDevice_, context, request, response, std::move(f));
}

void HRI::Stub::async::DisConnectTeleOpDevice(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisConnectTeleOpDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncDisConnectTeleOpDeviceRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisConnectTeleOpDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncDisConnectTeleOpDeviceRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisConnectTeleOpDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::ReadTeleOpInput(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::TeleP* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleP, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadTeleOpInput_, context, request, response);
}

void HRI::Stub::async::ReadTeleOpInput(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleP* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleP, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadTeleOpInput_, context, request, response, std::move(f));
}

void HRI::Stub::async::ReadTeleOpInput(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleP* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadTeleOpInput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::TeleP>* HRI::Stub::PrepareAsyncReadTeleOpInputRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::TeleP, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadTeleOpInput_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::TeleP>* HRI::Stub::AsyncReadTeleOpInputRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadTeleOpInputRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::StartTeleCalib(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartTeleCalib_, context, request, response);
}

void HRI::Stub::async::StartTeleCalib(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartTeleCalib_, context, request, response, std::move(f));
}

void HRI::Stub::async::StartTeleCalib(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartTeleCalib_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncStartTeleCalibRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartTeleCalib_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncStartTeleCalibRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartTeleCalibRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::StartTeleRecord(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartTeleRecord_, context, request, response);
}

void HRI::Stub::async::StartTeleRecord(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartTeleRecord_, context, request, response, std::move(f));
}

void HRI::Stub::async::StartTeleRecord(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartTeleRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncStartTeleRecordRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartTeleRecord_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncStartTeleRecordRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartTeleRecordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::StartTelePlay(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartTelePlay_, context, request, response);
}

void HRI::Stub::async::StartTelePlay(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartTelePlay_, context, request, response, std::move(f));
}

void HRI::Stub::async::StartTelePlay(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartTelePlay_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncStartTelePlayRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartTelePlay_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncStartTelePlayRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartTelePlayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::StartTeleJogL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartTeleJogL_, context, request, response);
}

void HRI::Stub::async::StartTeleJogL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartTeleJogL_, context, request, response, std::move(f));
}

void HRI::Stub::async::StartTeleJogL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartTeleJogL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncStartTeleJogLRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartTeleJogL_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncStartTeleJogLRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartTeleJogLRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::StartTeleJogJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartTeleJogJ_, context, request, response);
}

void HRI::Stub::async::StartTeleJogJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartTeleJogJ_, context, request, response, std::move(f));
}

void HRI::Stub::async::StartTeleJogJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartTeleJogJ_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncStartTeleJogJRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartTeleJogJ_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncStartTeleJogJRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartTeleJogJRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::StopTeleOp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopTeleOp_, context, request, response);
}

void HRI::Stub::async::StopTeleOp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopTeleOp_, context, request, response, std::move(f));
}

void HRI::Stub::async::StopTeleOp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopTeleOp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncStopTeleOpRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopTeleOp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncStopTeleOpRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopTeleOpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetPlayRate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TelePlayRate& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::TelePlayRate, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPlayRate_, context, request, response);
}

void HRI::Stub::async::SetPlayRate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TelePlayRate* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::TelePlayRate, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPlayRate_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetPlayRate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TelePlayRate* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPlayRate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetPlayRateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TelePlayRate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::TelePlayRate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPlayRate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetPlayRateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TelePlayRate& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPlayRateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetPlayRate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::TelePlayRate* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TelePlayRate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPlayRate_, context, request, response);
}

void HRI::Stub::async::GetPlayRate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TelePlayRate* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TelePlayRate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlayRate_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetPlayRate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TelePlayRate* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlayRate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::TelePlayRate>* HRI::Stub::PrepareAsyncGetPlayRateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::TelePlayRate, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPlayRate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::TelePlayRate>* HRI::Stub::AsyncGetPlayRateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPlayRateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetTeleFileList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::TeleOpFileList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleOpFileList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTeleFileList_, context, request, response);
}

void HRI::Stub::async::GetTeleFileList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleOpFileList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleOpFileList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTeleFileList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetTeleFileList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleOpFileList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTeleFileList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::TeleOpFileList>* HRI::Stub::PrepareAsyncGetTeleFileListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::TeleOpFileList, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTeleFileList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::TeleOpFileList>* HRI::Stub::AsyncGetTeleFileListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTeleFileListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SaveTeleMotion(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::TeleFileReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SaveTeleMotion_, context, request, response);
}

void HRI::Stub::async::SaveTeleMotion(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::TeleFileReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SaveTeleMotion_, context, request, response, std::move(f));
}

void HRI::Stub::async::SaveTeleMotion(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SaveTeleMotion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSaveTeleMotionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::TeleFileReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SaveTeleMotion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSaveTeleMotionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSaveTeleMotionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::LoadTeleMotion(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::TeleFileReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoadTeleMotion_, context, request, response);
}

void HRI::Stub::async::LoadTeleMotion(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::TeleFileReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadTeleMotion_, context, request, response, std::move(f));
}

void HRI::Stub::async::LoadTeleMotion(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadTeleMotion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncLoadTeleMotionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::TeleFileReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoadTeleMotion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncLoadTeleMotionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoadTeleMotionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::DeleteTeleMotion(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::TeleFileReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteTeleMotion_, context, request, response);
}

void HRI::Stub::async::DeleteTeleMotion(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::TeleFileReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTeleMotion_, context, request, response, std::move(f));
}

void HRI::Stub::async::DeleteTeleMotion(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTeleMotion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncDeleteTeleMotionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::TeleFileReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteTeleMotion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncDeleteTeleMotionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteTeleMotionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::MoveTeleJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveTeleJReq& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::MoveTeleJReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveTeleJ_, context, request, response);
}

void HRI::Stub::async::MoveTeleJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveTeleJReq* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::MoveTeleJReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveTeleJ_, context, request, response, std::move(f));
}

void HRI::Stub::async::MoveTeleJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveTeleJReq* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveTeleJ_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncMoveTeleJRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveTeleJReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::MoveTeleJReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveTeleJ_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncMoveTeleJRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveTeleJReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveTeleJRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::MoveTeleL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveTeleLReq& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::MoveTeleLReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveTeleL_, context, request, response);
}

void HRI::Stub::async::MoveTeleL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveTeleLReq* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::MoveTeleLReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveTeleL_, context, request, response, std::move(f));
}

void HRI::Stub::async::MoveTeleL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveTeleLReq* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveTeleL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncMoveTeleLRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveTeleLReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::MoveTeleLReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveTeleL_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncMoveTeleLRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::MoveTeleLReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveTeleLRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetTeleOpParams(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleOpParams& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::TeleOpParams, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTeleOpParams_, context, request, response);
}

void HRI::Stub::async::SetTeleOpParams(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleOpParams* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::TeleOpParams, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTeleOpParams_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetTeleOpParams(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleOpParams* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTeleOpParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetTeleOpParamsRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleOpParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::TeleOpParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTeleOpParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetTeleOpParamsRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::TeleOpParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTeleOpParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetTeleOpParams(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::TeleOpParams* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleOpParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTeleOpParams_, context, request, response);
}

void HRI::Stub::async::GetTeleOpParams(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleOpParams* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleOpParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpParams_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetTeleOpParams(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleOpParams* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTeleOpParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::TeleOpParams>* HRI::Stub::PrepareAsyncGetTeleOpParamsRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::TeleOpParams, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTeleOpParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::TeleOpParams>* HRI::Stub::AsyncGetTeleOpParamsRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTeleOpParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetFTSensorConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::FTSensorDevice& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::FTSensorDevice, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetFTSensorConfig_, context, request, response);
}

void HRI::Stub::async::SetFTSensorConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::FTSensorDevice* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::FTSensorDevice, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFTSensorConfig_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetFTSensorConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::FTSensorDevice* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFTSensorConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetFTSensorConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::FTSensorDevice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::FTSensorDevice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetFTSensorConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetFTSensorConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::FTSensorDevice& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetFTSensorConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetFTSensorConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::FTSensorDevice* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::FTSensorDevice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFTSensorConfig_, context, request, response);
}

void HRI::Stub::async::GetFTSensorConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::FTSensorDevice* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::FTSensorDevice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFTSensorConfig_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetFTSensorConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::FTSensorDevice* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFTSensorConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::FTSensorDevice>* HRI::Stub::PrepareAsyncGetFTSensorConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::FTSensorDevice, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFTSensorConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::FTSensorDevice>* HRI::Stub::AsyncGetFTSensorConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFTSensorConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetFTSensorData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::FTSensorData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::FTSensorData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFTSensorData_, context, request, response);
}

void HRI::Stub::async::GetFTSensorData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::FTSensorData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::FTSensorData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFTSensorData_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetFTSensorData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::FTSensorData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFTSensorData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::FTSensorData>* HRI::Stub::PrepareAsyncGetFTSensorDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::FTSensorData, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFTSensorData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::FTSensorData>* HRI::Stub::AsyncGetFTSensorDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFTSensorDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetLoadFactors(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::GetLoadFactorsRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GetLoadFactorsRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLoadFactors_, context, request, response);
}

void HRI::Stub::async::GetLoadFactors(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GetLoadFactorsRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GetLoadFactorsRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLoadFactors_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetLoadFactors(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GetLoadFactorsRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLoadFactors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetLoadFactorsRes>* HRI::Stub::PrepareAsyncGetLoadFactorsRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetLoadFactorsRes, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLoadFactors_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetLoadFactorsRes>* HRI::Stub::AsyncGetLoadFactorsRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLoadFactorsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetSanderCommand(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SanderCommand& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SanderCommand, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSanderCommand_, context, request, response);
}

void HRI::Stub::async::SetSanderCommand(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SanderCommand* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SanderCommand, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSanderCommand_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetSanderCommand(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SanderCommand* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSanderCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetSanderCommandRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SanderCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::SanderCommand, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSanderCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetSanderCommandRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SanderCommand& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSanderCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetSanderCommand(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::SanderCommand* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SanderCommand, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSanderCommand_, context, request, response);
}

void HRI::Stub::async::GetSanderCommand(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SanderCommand* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SanderCommand, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSanderCommand_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetSanderCommand(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SanderCommand* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSanderCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SanderCommand>* HRI::Stub::PrepareAsyncGetSanderCommandRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SanderCommand, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSanderCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SanderCommand>* HRI::Stub::AsyncGetSanderCommandRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSanderCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetSandingStopCondition(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SandingStopConditionState& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SandingStopConditionState, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSandingStopCondition_, context, request, response);
}

void HRI::Stub::async::SetSandingStopCondition(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SandingStopConditionState* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SandingStopConditionState, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSandingStopCondition_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetSandingStopCondition(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SandingStopConditionState* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSandingStopCondition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetSandingStopConditionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SandingStopConditionState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::SandingStopConditionState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSandingStopCondition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetSandingStopConditionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SandingStopConditionState& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSandingStopConditionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetSandingStopCondition(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::SandingStopConditionState* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SandingStopConditionState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSandingStopCondition_, context, request, response);
}

void HRI::Stub::async::GetSandingStopCondition(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SandingStopConditionState* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SandingStopConditionState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSandingStopCondition_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetSandingStopCondition(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SandingStopConditionState* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSandingStopCondition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SandingStopConditionState>* HRI::Stub::PrepareAsyncGetSandingStopConditionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SandingStopConditionState, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSandingStopCondition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SandingStopConditionState>* HRI::Stub::AsyncGetSandingStopConditionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSandingStopConditionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetGripperData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::GripperData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GripperData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGripperData_, context, request, response);
}

void HRI::Stub::async::GetGripperData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GripperData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GripperData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGripperData_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetGripperData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GripperData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGripperData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GripperData>* HRI::Stub::PrepareAsyncGetGripperDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GripperData, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGripperData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GripperData>* HRI::Stub::AsyncGetGripperDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGripperDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetGripperCommand(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GripperCommand& request, ::IndyFramework::Protobuf::HRI::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GripperCommand, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetGripperCommand_, context, request, response);
}

void HRI::Stub::async::SetGripperCommand(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GripperCommand* request, ::IndyFramework::Protobuf::HRI::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GripperCommand, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGripperCommand_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetGripperCommand(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GripperCommand* request, ::IndyFramework::Protobuf::HRI::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGripperCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Empty>* HRI::Stub::PrepareAsyncSetGripperCommandRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GripperCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GripperCommand, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetGripperCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Empty>* HRI::Stub::AsyncSetGripperCommandRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GripperCommand& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetGripperCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetSFDActivate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::State, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSFDActivate_, context, request, response);
}

void HRI::Stub::async::SetSFDActivate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::State, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSFDActivate_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetSFDActivate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSFDActivate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetSFDActivateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::State, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSFDActivate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetSFDActivateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSFDActivateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::IsSFDActivate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::State* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::State, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsSFDActivate_, context, request, response);
}

void HRI::Stub::async::IsSFDActivate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::State* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::State, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsSFDActivate_, context, request, response, std::move(f));
}

void HRI::Stub::async::IsSFDActivate(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::State* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsSFDActivate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::State>* HRI::Stub::PrepareAsyncIsSFDActivateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::State, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsSFDActivate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::State>* HRI::Stub::AsyncIsSFDActivateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsSFDActivateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SFDLogin(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SFDAccount& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SFDAccount, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SFDLogin_, context, request, response);
}

void HRI::Stub::async::SFDLogin(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SFDAccount* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SFDAccount, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SFDLogin_, context, request, response, std::move(f));
}

void HRI::Stub::async::SFDLogin(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SFDAccount* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SFDLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSFDLoginRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SFDAccount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::SFDAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SFDLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSFDLoginRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SFDAccount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSFDLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::IsSFDLogin(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::State* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::State, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsSFDLogin_, context, request, response);
}

void HRI::Stub::async::IsSFDLogin(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::State* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::State, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsSFDLogin_, context, request, response, std::move(f));
}

void HRI::Stub::async::IsSFDLogin(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::State* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsSFDLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::State>* HRI::Stub::PrepareAsyncIsSFDLoginRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::State, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsSFDLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::State>* HRI::Stub::AsyncIsSFDLoginRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsSFDLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetSFDTarget(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SFDCriTarget& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SFDCriTarget, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSFDTarget_, context, request, response);
}

void HRI::Stub::async::SetSFDTarget(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SFDCriTarget* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SFDCriTarget, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSFDTarget_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetSFDTarget(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SFDCriTarget* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSFDTarget_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetSFDTargetRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SFDCriTarget& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::SFDCriTarget, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSFDTarget_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetSFDTargetRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SFDCriTarget& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSFDTargetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetSFDOption(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State& request, ::IndyFramework::Protobuf::HRI::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::State, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSFDOption_, context, request, response);
}

void HRI::Stub::async::SetSFDOption(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State* request, ::IndyFramework::Protobuf::HRI::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::State, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSFDOption_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetSFDOption(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State* request, ::IndyFramework::Protobuf::HRI::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSFDOption_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::PrepareAsyncSetSFDOptionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Response, ::IndyFramework::Protobuf::HRI::State, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSFDOption_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Response>* HRI::Stub::AsyncSetSFDOptionRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::State& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSFDOptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetSFDProjList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::SFDProjectList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SFDProjectList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSFDProjList_, context, request, response);
}

void HRI::Stub::async::GetSFDProjList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SFDProjectList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SFDProjectList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSFDProjList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetSFDProjList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SFDProjectList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSFDProjList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SFDProjectList>* HRI::Stub::PrepareAsyncGetSFDProjListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SFDProjectList, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSFDProjList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SFDProjectList>* HRI::Stub::AsyncGetSFDProjListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSFDProjListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetSFDCRI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::SFDCriData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SFDCriData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSFDCRI_, context, request, response);
}

void HRI::Stub::async::GetSFDCRI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SFDCriData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SFDCriData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSFDCRI_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetSFDCRI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SFDCriData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSFDCRI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SFDCriData>* HRI::Stub::PrepareAsyncGetSFDCRIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SFDCriData, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSFDCRI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SFDCriData>* HRI::Stub::AsyncGetSFDCRIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSFDCRIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::GetTactTime(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::IndyFramework::Protobuf::HRI::TactTime* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TactTime, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTactTime_, context, request, response);
}

void HRI::Stub::async::GetTactTime(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TactTime* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TactTime, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTactTime_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetTactTime(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TactTime* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTactTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::TactTime>* HRI::Stub::PrepareAsyncGetTactTimeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::TactTime, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTactTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::TactTime>* HRI::Stub::AsyncGetTactTimeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTactTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::AddPhotoneoCalibPoint(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AddPhotoneoCalibPointReq& request, ::IndyFramework::Protobuf::HRI::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::AddPhotoneoCalibPointReq, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPhotoneoCalibPoint_, context, request, response);
}

void HRI::Stub::async::AddPhotoneoCalibPoint(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AddPhotoneoCalibPointReq* request, ::IndyFramework::Protobuf::HRI::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::AddPhotoneoCalibPointReq, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPhotoneoCalibPoint_, context, request, response, std::move(f));
}

void HRI::Stub::async::AddPhotoneoCalibPoint(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AddPhotoneoCalibPointReq* request, ::IndyFramework::Protobuf::HRI::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPhotoneoCalibPoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Empty>* HRI::Stub::PrepareAsyncAddPhotoneoCalibPointRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AddPhotoneoCalibPointReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::AddPhotoneoCalibPointReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPhotoneoCalibPoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::Empty>* HRI::Stub::AsyncAddPhotoneoCalibPointRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::AddPhotoneoCalibPointReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPhotoneoCalibPointRaw(context, request, cq);
  result->StartCall();
  return result;
}

HRI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::ContyInitReq, ::IndyFramework::Protobuf::HRI::ContyInitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::ContyInitReq* req,
             ::IndyFramework::Protobuf::HRI::ContyInitRes* resp) {
               return service->ContyInit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::RobotData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::RobotData* resp) {
               return service->RobotUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ProgramData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::ProgramData* resp) {
               return service->ProgramUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ControlData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::ControlData* resp) {
               return service->ControlUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::LinearData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::LinearData* resp) {
               return service->LinearUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::JogJointReq, ::IndyFramework::Protobuf::HRI::JogJointRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::JogJointReq* req,
             ::IndyFramework::Protobuf::HRI::JogJointRes* resp) {
               return service->JogJoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::JogTaskReq, ::IndyFramework::Protobuf::HRI::JogTaskRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::JogTaskReq* req,
             ::IndyFramework::Protobuf::HRI::JogTaskRes* resp) {
               return service->JogTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::JogAxisReq, ::IndyFramework::Protobuf::HRI::JogAxisRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::JogAxisReq* req,
             ::IndyFramework::Protobuf::HRI::JogAxisRes* resp) {
               return service->JogAxis(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::MoveJReq, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::MoveJReq* req,
             ::IndyFramework::Protobuf::HRI::Empty* resp) {
               return service->HoldToMoveJ(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::MoveLReq, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::MoveLReq* req,
             ::IndyFramework::Protobuf::HRI::Empty* resp) {
               return service->HoldToMoveL(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::AxisJReq, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::AxisJReq* req,
             ::IndyFramework::Protobuf::HRI::Empty* resp) {
               return service->HoldToAxisJ(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::StopMotionReq, ::IndyFramework::Protobuf::HRI::StopMotionRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::StopMotionReq* req,
             ::IndyFramework::Protobuf::HRI::StopMotionRes* resp) {
               return service->StopMotion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetRefFrameReq, ::IndyFramework::Protobuf::HRI::SetRefFrameRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetRefFrameReq* req,
             ::IndyFramework::Protobuf::HRI::SetRefFrameRes* resp) {
               return service->SetRefFrame(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetRefFramePlanarReq, ::IndyFramework::Protobuf::HRI::SetRefFramePlanarRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetRefFramePlanarReq* req,
             ::IndyFramework::Protobuf::HRI::SetRefFramePlanarRes* resp) {
               return service->SetRefFramePlanar(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetToolFrameReq, ::IndyFramework::Protobuf::HRI::SetToolFrameRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetToolFrameReq* req,
             ::IndyFramework::Protobuf::HRI::SetToolFrameRes* resp) {
               return service->SetToolFrame(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetSpeedRatioReq, ::IndyFramework::Protobuf::HRI::SetSpeedRatioRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetSpeedRatioReq* req,
             ::IndyFramework::Protobuf::HRI::SetSpeedRatioRes* resp) {
               return service->SetSpeedRatio(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetSimulationModeReq, ::IndyFramework::Protobuf::HRI::SetSimulationModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetSimulationModeReq* req,
             ::IndyFramework::Protobuf::HRI::SetSimulationModeRes* resp) {
               return service->SetSimulationMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq* req,
             ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes* resp) {
               return service->SetDirectTeachingMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::IntMode, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::IntMode* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetCustomControlMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::IntMode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::IntMode* resp) {
               return service->GetCustomControlMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeReq, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeReq* req,
             ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeRes* resp) {
               return service->SetSensorlessComplianceMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::BrakeControlStyle, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::BrakeControlStyle* resp) {
               return service->GetBrakeControlStyle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetBrakeReq, ::IndyFramework::Protobuf::HRI::SetBrakeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetBrakeReq* req,
             ::IndyFramework::Protobuf::HRI::SetBrakeRes* resp) {
               return service->SetBrake(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetServoReq, ::IndyFramework::Protobuf::HRI::SetServoRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetServoReq* req,
             ::IndyFramework::Protobuf::HRI::SetServoRes* resp) {
               return service->SetServo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetAutoServoOffReq, ::IndyFramework::Protobuf::HRI::SetAutoServoOffRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetAutoServoOffReq* req,
             ::IndyFramework::Protobuf::HRI::SetAutoServoOffRes* resp) {
               return service->SetAutoServoOff(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetAutoServoOffReq, ::IndyFramework::Protobuf::HRI::GetAutoServoOffRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetAutoServoOffReq* req,
             ::IndyFramework::Protobuf::HRI::GetAutoServoOffRes* resp) {
               return service->GetAutoServoOff(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Name, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Name* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->ExecuteTool(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::InverseKinematicsReq, ::IndyFramework::Protobuf::HRI::InverseKinematicsRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::InverseKinematicsReq* req,
             ::IndyFramework::Protobuf::HRI::InverseKinematicsRes* resp) {
               return service->InverseKinematics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::CalculateRelativePoseReq, ::IndyFramework::Protobuf::HRI::CalculateRelativePoseRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::CalculateRelativePoseReq* req,
             ::IndyFramework::Protobuf::HRI::CalculateRelativePoseRes* resp) {
               return service->CalculateRelativePose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelReq, ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelReq* req,
             ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelRes* resp) {
               return service->CalculateCurrentPoseRel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::State, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::State* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetManualRecoverMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Servo, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Servo* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetServoRecover(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::JogJTar, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::JogJTar* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->JogJointRecover(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::RecoverReq, ::IndyFramework::Protobuf::HRI::RecoverRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::RecoverReq* req,
             ::IndyFramework::Protobuf::HRI::RecoverRes* resp) {
               return service->Recover(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::RebootReq, ::IndyFramework::Protobuf::HRI::RebootRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::RebootReq* req,
             ::IndyFramework::Protobuf::HRI::RebootRes* resp) {
               return service->Reboot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::PowerOffReq, ::IndyFramework::Protobuf::HRI::PowerOffRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::PowerOffReq* req,
             ::IndyFramework::Protobuf::HRI::PowerOffRes* resp) {
               return service->PowerOff(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[36],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::UpdateIndySWReq, ::IndyFramework::Protobuf::HRI::UpdateIndySWRes>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::IndyFramework::Protobuf::HRI::UpdateIndySWReq>* reader,
             ::IndyFramework::Protobuf::HRI::UpdateIndySWRes* resp) {
               return service->UpdateIndySW(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[37],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetFileReq, ::IndyFramework::Protobuf::HRI::GetFileRes>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetFileReq* req,
             ::grpc::ServerWriter<::IndyFramework::Protobuf::HRI::GetFileRes>* writer) {
               return service->GetFile(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[38],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetFileReq, ::IndyFramework::Protobuf::HRI::SetFileRes>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::IndyFramework::Protobuf::HRI::SetFileReq>* reader,
             ::IndyFramework::Protobuf::HRI::SetFileRes* resp) {
               return service->SetFile(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::RenameFileReq, ::IndyFramework::Protobuf::HRI::RenameFileRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::RenameFileReq* req,
             ::IndyFramework::Protobuf::HRI::RenameFileRes* resp) {
               return service->RenameFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::RemoveFileReq, ::IndyFramework::Protobuf::HRI::RemoveFileRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::RemoveFileReq* req,
             ::IndyFramework::Protobuf::HRI::RemoveFileRes* resp) {
               return service->RemoveFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetIndexProgramListReq, ::IndyFramework::Protobuf::HRI::GetIndexProgramListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetIndexProgramListReq* req,
             ::IndyFramework::Protobuf::HRI::GetIndexProgramListRes* resp) {
               return service->GetIndexProgramList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetProgramListReq, ::IndyFramework::Protobuf::HRI::GetProgramListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetProgramListReq* req,
             ::IndyFramework::Protobuf::HRI::GetProgramListRes* resp) {
               return service->GetProgramList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetLogListReq, ::IndyFramework::Protobuf::HRI::GetLogListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetLogListReq* req,
             ::IndyFramework::Protobuf::HRI::GetLogListRes* resp) {
               return service->GetLogList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[44],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetLogContentReq, ::IndyFramework::Protobuf::HRI::GetLogContentRes>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetLogContentReq* req,
             ::grpc::ServerWriter<::IndyFramework::Protobuf::HRI::GetLogContentRes>* writer) {
               return service->GetLogContent(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[45],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetLogContentListReq, ::IndyFramework::Protobuf::HRI::GetLogContentListRes>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetLogContentListReq* req,
             ::grpc::ServerWriter<::IndyFramework::Protobuf::HRI::GetLogContentListRes>* writer) {
               return service->GetLogContentList(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[46],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetLogReq, ::IndyFramework::Protobuf::HRI::GetLogRes>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetLogReq* req,
             ::grpc::ServerWriter<::IndyFramework::Protobuf::HRI::GetLogRes>* writer) {
               return service->GetLog(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetVariableListReq, ::IndyFramework::Protobuf::HRI::GetVariableListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetVariableListReq* req,
             ::IndyFramework::Protobuf::HRI::GetVariableListRes* resp) {
               return service->GetVariableList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListReq, ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListReq* req,
             ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListRes* resp) {
               return service->GetMonitoringVariableList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListReq, ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListReq* req,
             ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListRes* resp) {
               return service->SetMonitoringVariableList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetPalletMakerListReq, ::IndyFramework::Protobuf::HRI::GetPalletMakerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetPalletMakerListReq* req,
             ::IndyFramework::Protobuf::HRI::GetPalletMakerListRes* resp) {
               return service->GetPalletMakerList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetPalletMakerListReq, ::IndyFramework::Protobuf::HRI::SetPalletMakerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetPalletMakerListReq* req,
             ::IndyFramework::Protobuf::HRI::SetPalletMakerListRes* resp) {
               return service->SetPalletMakerList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidReq, ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidReq* req,
             ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidRes* resp) {
               return service->CheckAproachRetractValid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetPalletPointListReq, ::IndyFramework::Protobuf::HRI::GetPalletPointListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetPalletPointListReq* req,
             ::IndyFramework::Protobuf::HRI::GetPalletPointListRes* resp) {
               return service->GetPalletPointList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetPalletPointListReq, ::IndyFramework::Protobuf::HRI::SetPalletPointListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetPalletPointListReq* req,
             ::IndyFramework::Protobuf::HRI::SetPalletPointListRes* resp) {
               return service->SetPalletPointList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Conveyor, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::Conveyor* resp) {
               return service->GetConveyor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Name, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Name* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetConveyorName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Name, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Name* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetConveyorByName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Encoder, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Encoder* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetConveyorEncoder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Trigger, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Trigger* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetConveyorTrigger(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[60],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Float, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Float* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetConveyorOffset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[61],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::PosePair, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::PosePair* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetConveyorStartingPose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[62],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::PosePair, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::PosePair* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetConveyorTerminalPose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[63],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ConveyorState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::ConveyorState* resp) {
               return service->GetConveyorState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[64],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::HoldToMoveConveyorReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::HoldToMoveConveyorReq* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->HoldToMoveConveyor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[65],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetConveyorListReq, ::IndyFramework::Protobuf::HRI::GetConveyorListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetConveyorListReq* req,
             ::IndyFramework::Protobuf::HRI::GetConveyorListRes* resp) {
               return service->GetConveyorList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[66],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetConveyorListReq, ::IndyFramework::Protobuf::HRI::SetConveyorListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetConveyorListReq* req,
             ::IndyFramework::Protobuf::HRI::SetConveyorListRes* resp) {
               return service->SetConveyorList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[67],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetInchingReq, ::IndyFramework::Protobuf::HRI::SetInchingRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetInchingReq* req,
             ::IndyFramework::Protobuf::HRI::SetInchingRes* resp) {
               return service->SetInching(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[68],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::StopInchingReq, ::IndyFramework::Protobuf::HRI::StopInchingRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::StopInchingReq* req,
             ::IndyFramework::Protobuf::HRI::StopInchingRes* resp) {
               return service->StopInching(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[69],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetArcReq, ::IndyFramework::Protobuf::HRI::SetArcRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetArcReq* req,
             ::IndyFramework::Protobuf::HRI::SetArcRes* resp) {
               return service->SetArc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[70],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetTouchReq, ::IndyFramework::Protobuf::HRI::SetTouchRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetTouchReq* req,
             ::IndyFramework::Protobuf::HRI::SetTouchRes* resp) {
               return service->SetTouch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[71],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetGasReq, ::IndyFramework::Protobuf::HRI::SetGasRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetGasReq* req,
             ::IndyFramework::Protobuf::HRI::SetGasRes* resp) {
               return service->SetGas(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[72],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::IsTouchedReq, ::IndyFramework::Protobuf::HRI::IsTouchedRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::IsTouchedReq* req,
             ::IndyFramework::Protobuf::HRI::IsTouchedRes* resp) {
               return service->IsTouched(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[73],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetVisionServerListReq, ::IndyFramework::Protobuf::HRI::GetVisionServerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetVisionServerListReq* req,
             ::IndyFramework::Protobuf::HRI::GetVisionServerListRes* resp) {
               return service->GetVisionServerList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[74],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetVisionServerListReq, ::IndyFramework::Protobuf::HRI::SetVisionServerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetVisionServerListReq* req,
             ::IndyFramework::Protobuf::HRI::SetVisionServerListRes* resp) {
               return service->SetVisionServerList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[75],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetVisionObjectListReq, ::IndyFramework::Protobuf::HRI::GetVisionObjectListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetVisionObjectListReq* req,
             ::IndyFramework::Protobuf::HRI::GetVisionObjectListRes* resp) {
               return service->GetVisionObjectList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[76],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::VisionRequest, ::IndyFramework::Protobuf::HRI::VisionResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::VisionRequest* req,
             ::IndyFramework::Protobuf::HRI::VisionResult* resp) {
               return service->GetVisionDetection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[77],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::VisionRequest, ::IndyFramework::Protobuf::HRI::VisionResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::VisionRequest* req,
             ::IndyFramework::Protobuf::HRI::VisionResult* resp) {
               return service->GetVisionRetrieval(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[78],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetGcodeMotionListReq, ::IndyFramework::Protobuf::HRI::GetGcodeMotionListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetGcodeMotionListReq* req,
             ::IndyFramework::Protobuf::HRI::GetGcodeMotionListRes* resp) {
               return service->GetGcodeMotionList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[79],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetModbusServerListReq, ::IndyFramework::Protobuf::HRI::GetModbusServerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetModbusServerListReq* req,
             ::IndyFramework::Protobuf::HRI::GetModbusServerListRes* resp) {
               return service->GetModbusServerList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[80],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetModbusServerListReq, ::IndyFramework::Protobuf::HRI::SetModbusServerListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetModbusServerListReq* req,
             ::IndyFramework::Protobuf::HRI::SetModbusServerListRes* resp) {
               return service->SetModbusServerList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[81],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::CheckModbusConnectionReq, ::IndyFramework::Protobuf::HRI::CheckModbusConnectionRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::CheckModbusConnectionReq* req,
             ::IndyFramework::Protobuf::HRI::CheckModbusConnectionRes* resp) {
               return service->CheckModbusConnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[82],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetToolFrameListReq, ::IndyFramework::Protobuf::HRI::GetToolFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetToolFrameListReq* req,
             ::IndyFramework::Protobuf::HRI::GetToolFrameListRes* resp) {
               return service->GetToolFrameList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[83],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetToolFrameListReq, ::IndyFramework::Protobuf::HRI::SetToolFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetToolFrameListReq* req,
             ::IndyFramework::Protobuf::HRI::SetToolFrameListRes* resp) {
               return service->SetToolFrameList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[84],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetRefFrameListReq, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* req,
             ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* resp) {
               return service->GetRefFrameList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[85],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetRefFrameListReq, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* req,
             ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* resp) {
               return service->SetRefFrameList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[86],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetCustomPosListReq, ::IndyFramework::Protobuf::HRI::GetCustomPosListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetCustomPosListReq* req,
             ::IndyFramework::Protobuf::HRI::GetCustomPosListRes* resp) {
               return service->GetCustomPosList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[87],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetCustomPosListReq, ::IndyFramework::Protobuf::HRI::SetCustomPosListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetCustomPosListReq* req,
             ::IndyFramework::Protobuf::HRI::SetCustomPosListRes* resp) {
               return service->SetCustomPosList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[88],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetJointControlGainReq, ::IndyFramework::Protobuf::HRI::SetJointControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetJointControlGainReq* req,
             ::IndyFramework::Protobuf::HRI::SetJointControlGainRes* resp) {
               return service->SetJointControlGain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[89],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetJointControlGainReq, ::IndyFramework::Protobuf::HRI::GetJointControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetJointControlGainReq* req,
             ::IndyFramework::Protobuf::HRI::GetJointControlGainRes* resp) {
               return service->GetJointControlGain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[90],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetTaskControlGainReq, ::IndyFramework::Protobuf::HRI::SetTaskControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetTaskControlGainReq* req,
             ::IndyFramework::Protobuf::HRI::SetTaskControlGainRes* resp) {
               return service->SetTaskControlGain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[91],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetTaskControlGainReq, ::IndyFramework::Protobuf::HRI::GetTaskControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetTaskControlGainReq* req,
             ::IndyFramework::Protobuf::HRI::GetTaskControlGainRes* resp) {
               return service->GetTaskControlGain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[92],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainReq, ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainReq* req,
             ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainRes* resp) {
               return service->SetImpedanceControlGain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[93],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainReq, ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainReq* req,
             ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainRes* resp) {
               return service->GetImpedanceControlGain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[94],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetForceControlGainReq, ::IndyFramework::Protobuf::HRI::SetForceControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetForceControlGainReq* req,
             ::IndyFramework::Protobuf::HRI::SetForceControlGainRes* resp) {
               return service->SetForceControlGain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[95],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetForceControlGainReq, ::IndyFramework::Protobuf::HRI::GetForceControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetForceControlGainReq* req,
             ::IndyFramework::Protobuf::HRI::GetForceControlGainRes* resp) {
               return service->GetForceControlGain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[96],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainReq, ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainReq* req,
             ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainRes* resp) {
               return service->SetExtAxisControlGain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[97],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainReq, ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainReq* req,
             ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainRes* resp) {
               return service->GetExtAxisControlGain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[98],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq* req,
             ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes* resp) {
               return service->SetSensorlessComplianceControlJointGain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[99],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq* req,
             ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes* resp) {
               return service->GetSensorlessComplianceControlJointGain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[100],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq* req,
             ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes* resp) {
               return service->SetSensorlessComplianceControlTaskGain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[101],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq* req,
             ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes* resp) {
               return service->GetSensorlessComplianceControlTaskGain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[102],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetFricCompReq, ::IndyFramework::Protobuf::HRI::SetFricCompRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetFricCompReq* req,
             ::IndyFramework::Protobuf::HRI::SetFricCompRes* resp) {
               return service->SetFricComp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[103],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetFricCompReq, ::IndyFramework::Protobuf::HRI::GetFricCompRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetFricCompReq* req,
             ::IndyFramework::Protobuf::HRI::GetFricCompRes* resp) {
               return service->GetFricComp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[104],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetHomePosReq, ::IndyFramework::Protobuf::HRI::SetHomePosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetHomePosReq* req,
             ::IndyFramework::Protobuf::HRI::SetHomePosRes* resp) {
               return service->SetHomePos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[105],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetHomePosReq, ::IndyFramework::Protobuf::HRI::GetHomePosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetHomePosReq* req,
             ::IndyFramework::Protobuf::HRI::GetHomePosRes* resp) {
               return service->GetHomePos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[106],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetMountPosReq, ::IndyFramework::Protobuf::HRI::SetMountPosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetMountPosReq* req,
             ::IndyFramework::Protobuf::HRI::SetMountPosRes* resp) {
               return service->SetMountPos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[107],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetMountPosReq, ::IndyFramework::Protobuf::HRI::GetMountPosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetMountPosReq* req,
             ::IndyFramework::Protobuf::HRI::GetMountPosRes* resp) {
               return service->GetMountPos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[108],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetPackagingPosReq, ::IndyFramework::Protobuf::HRI::GetPackagingPosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetPackagingPosReq* req,
             ::IndyFramework::Protobuf::HRI::GetPackagingPosRes* resp) {
               return service->GetPackagingPos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[109],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetToolPropertyReq, ::IndyFramework::Protobuf::HRI::SetToolPropertyRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetToolPropertyReq* req,
             ::IndyFramework::Protobuf::HRI::SetToolPropertyRes* resp) {
               return service->SetToolProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[110],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetToolPropertyReq, ::IndyFramework::Protobuf::HRI::GetToolPropertyRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetToolPropertyReq* req,
             ::IndyFramework::Protobuf::HRI::GetToolPropertyRes* resp) {
               return service->GetToolProperty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[111],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigReq, ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigReq* req,
             ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigRes* resp) {
               return service->GetOnStartProgramConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[112],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigReq, ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigReq* req,
             ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigRes* resp) {
               return service->SetOnStartProgramConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[113],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigReq, ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigReq* req,
             ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigRes* resp) {
               return service->GetSafetyLimitConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[114],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigReq, ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigReq* req,
             ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigRes* resp) {
               return service->SetSafetyLimitConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[115],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigReq, ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigReq* req,
             ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigRes* resp) {
               return service->GetSafetyStopConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[116],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigReq, ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigReq* req,
             ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigRes* resp) {
               return service->SetSafetyStopConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[117],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashReq, ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashReq* req,
             ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashRes* resp) {
               return service->GetSafetyConfigHash(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[118],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::KinematicsParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::KinematicsParams* resp) {
               return service->GetKinematicsParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[119],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::KeyInitReq, ::IndyFramework::Protobuf::HRI::KeyInitRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::KeyInitReq* req,
             ::IndyFramework::Protobuf::HRI::KeyInitRes* resp) {
               return service->KeyInit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[120],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::KeyDataReq, ::IndyFramework::Protobuf::HRI::KeyDataRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::KeyDataReq* req,
             ::IndyFramework::Protobuf::HRI::KeyDataRes* resp) {
               return service->KeyData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[121],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ProgramData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::ProgramData* resp) {
               return service->ProgramUpdateKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[122],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq* req,
             ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes* resp) {
               return service->SetDirectTeachingModeKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[123],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GetAutoModeConfigRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::GetAutoModeConfigRes* resp) {
               return service->GetAutoModeConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[124],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetAutoModeReq, ::IndyFramework::Protobuf::HRI::SetAutoModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetAutoModeReq* req,
             ::IndyFramework::Protobuf::HRI::SetAutoModeRes* resp) {
               return service->SetAutoMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[125],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CheckAutoModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::CheckAutoModeRes* resp) {
               return service->CheckAutoMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[126],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CheckReducedModeRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::CheckReducedModeRes* resp) {
               return service->CheckReducedMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[127],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GetReducedRatioRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::GetReducedRatioRes* resp) {
               return service->GetReducedRatio(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[128],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GetReducedSpeedRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::GetReducedSpeedRes* resp) {
               return service->GetReducedSpeed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[129],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetReducedSpeedReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetReducedSpeedReq* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetReducedSpeed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[130],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::StopState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::StopState* resp) {
               return service->GetStopState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[131],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SafetyFunctionState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::SafetyFunctionState* resp) {
               return service->GetSafetyFunctionState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[132],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SafetyFunctionState, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SafetyFunctionState* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->RequestSafetyFunction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[133],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::PlayProgramReq, ::IndyFramework::Protobuf::HRI::PlayProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::PlayProgramReq* req,
             ::IndyFramework::Protobuf::HRI::PlayProgramRes* resp) {
               return service->PlayProgram(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[134],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::PlayIndexProgramReq, ::IndyFramework::Protobuf::HRI::PlayIndexProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::PlayIndexProgramReq* req,
             ::IndyFramework::Protobuf::HRI::PlayIndexProgramRes* resp) {
               return service->PlayIndexProgram(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[135],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::PlayProgramLineReq, ::IndyFramework::Protobuf::HRI::PlayProgramLineRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::PlayProgramLineReq* req,
             ::IndyFramework::Protobuf::HRI::PlayProgramLineRes* resp) {
               return service->PlayProgramLine(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[136],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::ResumeProgramReq, ::IndyFramework::Protobuf::HRI::ResumeProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::ResumeProgramReq* req,
             ::IndyFramework::Protobuf::HRI::ResumeProgramRes* resp) {
               return service->ResumeProgram(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[137],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::StopProgramReq, ::IndyFramework::Protobuf::HRI::StopProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::StopProgramReq* req,
             ::IndyFramework::Protobuf::HRI::StopProgramRes* resp) {
               return service->StopProgram(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[138],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::PauseProgramReq, ::IndyFramework::Protobuf::HRI::PauseProgramRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::PauseProgramReq* req,
             ::IndyFramework::Protobuf::HRI::PauseProgramRes* resp) {
               return service->PauseProgram(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[139],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::DOSignals, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::DOSignals* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetDO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[140],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::AOSignals, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::AOSignals* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetAO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[141],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::EndtoolSignalList, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::EndtoolSignalList* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetEndDO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[142],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::AOSignals, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::AOSignals* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetEndAO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[143],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::ToolList, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::ToolList* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetToolList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[144],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::ToolList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::ToolList* resp) {
               return service->GetToolList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[145],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::DIConfigList, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::DIConfigList* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetDIConfigList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[146],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::DIConfigList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::DIConfigList* resp) {
               return service->GetDIConfigList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[147],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::DOConfigList, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::DOConfigList* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetDOConfigList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[148],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::DOConfigList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::DOConfigList* resp) {
               return service->GetDOConfigList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[149],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::CollisionSensLevel, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::CollisionSensLevel* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetCollSensLevel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[150],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CollisionSensLevel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::CollisionSensLevel* resp) {
               return service->GetCollSensLevel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[151],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::CollisionPolicy, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::CollisionPolicy* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetCollPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[152],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CollisionPolicy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::CollisionPolicy* resp) {
               return service->GetCollPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[153],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::CollisionThresholds, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::CollisionThresholds* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetCollSensParam(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[154],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::CollisionThresholds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::CollisionThresholds* resp) {
               return service->GetCollSensParam(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[155],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->InitCollSensParam(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[156],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::TuningProgram, ::IndyFramework::Protobuf::HRI::CollisionThresholds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::TuningProgram* req,
             ::IndyFramework::Protobuf::HRI::CollisionThresholds* resp) {
               return service->PlayTuningProgram(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[157],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleOpDevice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::TeleOpDevice* resp) {
               return service->GetTeleOpDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[158],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleOpState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::TeleOpState* resp) {
               return service->GetTeleOpState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[159],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::TeleOpDevice, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::TeleOpDevice* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->ConnectTeleOpDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[160],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->DisConnectTeleOpDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[161],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleP, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::TeleP* resp) {
               return service->ReadTeleOpInput(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[162],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->StartTeleCalib(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[163],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->StartTeleRecord(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[164],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->StartTelePlay(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[165],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->StartTeleJogL(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[166],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->StartTeleJogJ(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[167],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->StopTeleOp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[168],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::TelePlayRate, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::TelePlayRate* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetPlayRate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[169],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TelePlayRate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::TelePlayRate* resp) {
               return service->GetPlayRate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[170],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleOpFileList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::TeleOpFileList* resp) {
               return service->GetTeleFileList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[171],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::TeleFileReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::TeleFileReq* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SaveTeleMotion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[172],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::TeleFileReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::TeleFileReq* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->LoadTeleMotion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[173],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::TeleFileReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::TeleFileReq* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->DeleteTeleMotion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[174],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::MoveTeleJReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::MoveTeleJReq* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->MoveTeleJ(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[175],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::MoveTeleLReq, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::MoveTeleLReq* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->MoveTeleL(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[176],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::TeleOpParams, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::TeleOpParams* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetTeleOpParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[177],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TeleOpParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::TeleOpParams* resp) {
               return service->GetTeleOpParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[178],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::FTSensorDevice, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::FTSensorDevice* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetFTSensorConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[179],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::FTSensorDevice, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::FTSensorDevice* resp) {
               return service->GetFTSensorConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[180],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::FTSensorData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::FTSensorData* resp) {
               return service->GetFTSensorData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[181],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GetLoadFactorsRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::GetLoadFactorsRes* resp) {
               return service->GetLoadFactors(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[182],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SanderCommand, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SanderCommand* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetSanderCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[183],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SanderCommand, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::SanderCommand* resp) {
               return service->GetSanderCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[184],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SandingStopConditionState, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SandingStopConditionState* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetSandingStopCondition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[185],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SandingStopConditionState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::SandingStopConditionState* resp) {
               return service->GetSandingStopCondition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[186],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::GripperData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::GripperData* resp) {
               return service->GetGripperData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[187],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GripperCommand, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GripperCommand* req,
             ::IndyFramework::Protobuf::HRI::Empty* resp) {
               return service->SetGripperCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[188],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::State, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::State* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetSFDActivate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[189],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::State, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::State* resp) {
               return service->IsSFDActivate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[190],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SFDAccount, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SFDAccount* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SFDLogin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[191],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::State, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::State* resp) {
               return service->IsSFDLogin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[192],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SFDCriTarget, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SFDCriTarget* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetSFDTarget(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[193],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::State, ::IndyFramework::Protobuf::HRI::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::State* req,
             ::IndyFramework::Protobuf::HRI::Response* resp) {
               return service->SetSFDOption(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[194],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SFDProjectList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::SFDProjectList* resp) {
               return service->GetSFDProjList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[195],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::SFDCriData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::SFDCriData* resp) {
               return service->GetSFDCRI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[196],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::Empty, ::IndyFramework::Protobuf::HRI::TactTime, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::Empty* req,
             ::IndyFramework::Protobuf::HRI::TactTime* resp) {
               return service->GetTactTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[197],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::AddPhotoneoCalibPointReq, ::IndyFramework::Protobuf::HRI::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::AddPhotoneoCalibPointReq* req,
             ::IndyFramework::Protobuf::HRI::Empty* resp) {
               return service->AddPhotoneoCalibPoint(ctx, req, resp);
             }, this)));
}

HRI::Service::~Service() {
}

::grpc::Status HRI::Service::ContyInit(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::ContyInitReq* request, ::IndyFramework::Protobuf::HRI::ContyInitRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::RobotUpdate(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::RobotData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::ProgramUpdate(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ProgramData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::ControlUpdate(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ControlData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::LinearUpdate(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::LinearData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::JogJoint(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::JogJointReq* request, ::IndyFramework::Protobuf::HRI::JogJointRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::JogTask(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::JogTaskReq* request, ::IndyFramework::Protobuf::HRI::JogTaskRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::JogAxis(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::JogAxisReq* request, ::IndyFramework::Protobuf::HRI::JogAxisRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::HoldToMoveJ(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::MoveJReq* request, ::IndyFramework::Protobuf::HRI::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::HoldToMoveL(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::MoveLReq* request, ::IndyFramework::Protobuf::HRI::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::HoldToAxisJ(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::AxisJReq* request, ::IndyFramework::Protobuf::HRI::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::StopMotion(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::StopMotionReq* request, ::IndyFramework::Protobuf::HRI::StopMotionRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetRefFrame(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetRefFramePlanar(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFramePlanarReq* request, ::IndyFramework::Protobuf::HRI::SetRefFramePlanarRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetToolFrame(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetToolFrameReq* request, ::IndyFramework::Protobuf::HRI::SetToolFrameRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetSpeedRatio(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetSpeedRatioReq* request, ::IndyFramework::Protobuf::HRI::SetSpeedRatioRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetSimulationMode(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetSimulationModeReq* request, ::IndyFramework::Protobuf::HRI::SetSimulationModeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetDirectTeachingMode(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq* request, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetCustomControlMode(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::IntMode* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetCustomControlMode(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::IntMode* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetSensorlessComplianceMode(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeReq* request, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceModeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetBrakeControlStyle(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::BrakeControlStyle* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetBrake(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetBrakeReq* request, ::IndyFramework::Protobuf::HRI::SetBrakeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetServo(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetServoReq* request, ::IndyFramework::Protobuf::HRI::SetServoRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetAutoServoOff(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetAutoServoOffReq* request, ::IndyFramework::Protobuf::HRI::SetAutoServoOffRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetAutoServoOff(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetAutoServoOffReq* request, ::IndyFramework::Protobuf::HRI::GetAutoServoOffRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::ExecuteTool(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Name* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::InverseKinematics(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::InverseKinematicsReq* request, ::IndyFramework::Protobuf::HRI::InverseKinematicsRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::CalculateRelativePose(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::CalculateRelativePoseReq* request, ::IndyFramework::Protobuf::HRI::CalculateRelativePoseRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::CalculateCurrentPoseRel(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelReq* request, ::IndyFramework::Protobuf::HRI::CalculateCurrentPoseRelRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetManualRecoverMode(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::State* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetServoRecover(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Servo* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::JogJointRecover(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::JogJTar* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::Recover(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::RecoverReq* request, ::IndyFramework::Protobuf::HRI::RecoverRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::Reboot(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::RebootReq* request, ::IndyFramework::Protobuf::HRI::RebootRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::PowerOff(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::PowerOffReq* request, ::IndyFramework::Protobuf::HRI::PowerOffRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::UpdateIndySW(::grpc::ServerContext* context, ::grpc::ServerReader< ::IndyFramework::Protobuf::HRI::UpdateIndySWReq>* reader, ::IndyFramework::Protobuf::HRI::UpdateIndySWRes* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetFile(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetFileReq* request, ::grpc::ServerWriter< ::IndyFramework::Protobuf::HRI::GetFileRes>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::IndyFramework::Protobuf::HRI::SetFileReq>* reader, ::IndyFramework::Protobuf::HRI::SetFileRes* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::RenameFile(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::RenameFileReq* request, ::IndyFramework::Protobuf::HRI::RenameFileRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::RemoveFile(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::RemoveFileReq* request, ::IndyFramework::Protobuf::HRI::RemoveFileRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetIndexProgramList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetIndexProgramListReq* request, ::IndyFramework::Protobuf::HRI::GetIndexProgramListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetProgramList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetProgramListReq* request, ::IndyFramework::Protobuf::HRI::GetProgramListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetLogList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetLogListReq* request, ::IndyFramework::Protobuf::HRI::GetLogListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetLogContent(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetLogContentReq* request, ::grpc::ServerWriter< ::IndyFramework::Protobuf::HRI::GetLogContentRes>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetLogContentList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetLogContentListReq* request, ::grpc::ServerWriter< ::IndyFramework::Protobuf::HRI::GetLogContentListRes>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetLog(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetLogReq* request, ::grpc::ServerWriter< ::IndyFramework::Protobuf::HRI::GetLogRes>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetVariableList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetVariableListReq* request, ::IndyFramework::Protobuf::HRI::GetVariableListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetMonitoringVariableList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListReq* request, ::IndyFramework::Protobuf::HRI::GetMonitoringVariableListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetMonitoringVariableList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListReq* request, ::IndyFramework::Protobuf::HRI::SetMonitoringVariableListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetPalletMakerList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetPalletMakerListReq* request, ::IndyFramework::Protobuf::HRI::GetPalletMakerListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetPalletMakerList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetPalletMakerListReq* request, ::IndyFramework::Protobuf::HRI::SetPalletMakerListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::CheckAproachRetractValid(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidReq* request, ::IndyFramework::Protobuf::HRI::CheckAproachRetractValidRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetPalletPointList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetPalletPointListReq* request, ::IndyFramework::Protobuf::HRI::GetPalletPointListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetPalletPointList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetPalletPointListReq* request, ::IndyFramework::Protobuf::HRI::SetPalletPointListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetConveyor(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Conveyor* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetConveyorName(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Name* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetConveyorByName(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Name* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetConveyorEncoder(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Encoder* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetConveyorTrigger(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Trigger* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetConveyorOffset(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Float* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetConveyorStartingPose(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::PosePair* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetConveyorTerminalPose(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::PosePair* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetConveyorState(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ConveyorState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::HoldToMoveConveyor(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::HoldToMoveConveyorReq* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetConveyorList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetConveyorListReq* request, ::IndyFramework::Protobuf::HRI::GetConveyorListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetConveyorList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetConveyorListReq* request, ::IndyFramework::Protobuf::HRI::SetConveyorListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetInching(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetInchingReq* request, ::IndyFramework::Protobuf::HRI::SetInchingRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::StopInching(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::StopInchingReq* request, ::IndyFramework::Protobuf::HRI::StopInchingRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetArc(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetArcReq* request, ::IndyFramework::Protobuf::HRI::SetArcRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetTouch(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetTouchReq* request, ::IndyFramework::Protobuf::HRI::SetTouchRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetGas(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetGasReq* request, ::IndyFramework::Protobuf::HRI::SetGasRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::IsTouched(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::IsTouchedReq* request, ::IndyFramework::Protobuf::HRI::IsTouchedRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetVisionServerList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetVisionServerListReq* request, ::IndyFramework::Protobuf::HRI::GetVisionServerListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetVisionServerList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetVisionServerListReq* request, ::IndyFramework::Protobuf::HRI::SetVisionServerListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetVisionObjectList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetVisionObjectListReq* request, ::IndyFramework::Protobuf::HRI::GetVisionObjectListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetVisionDetection(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::VisionRequest* request, ::IndyFramework::Protobuf::HRI::VisionResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetVisionRetrieval(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::VisionRequest* request, ::IndyFramework::Protobuf::HRI::VisionResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetGcodeMotionList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetGcodeMotionListReq* request, ::IndyFramework::Protobuf::HRI::GetGcodeMotionListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetModbusServerList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetModbusServerListReq* request, ::IndyFramework::Protobuf::HRI::GetModbusServerListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetModbusServerList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetModbusServerListReq* request, ::IndyFramework::Protobuf::HRI::SetModbusServerListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::CheckModbusConnection(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::CheckModbusConnectionReq* request, ::IndyFramework::Protobuf::HRI::CheckModbusConnectionRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetToolFrameList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetToolFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetToolFrameListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetToolFrameList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetToolFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetToolFrameListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetRefFrameList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetRefFrameList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetCustomPosList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetCustomPosListReq* request, ::IndyFramework::Protobuf::HRI::GetCustomPosListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetCustomPosList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetCustomPosListReq* request, ::IndyFramework::Protobuf::HRI::SetCustomPosListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetJointControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetJointControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetJointControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetJointControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetJointControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetJointControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetTaskControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetTaskControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetTaskControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetTaskControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetTaskControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetTaskControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetImpedanceControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetImpedanceControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetImpedanceControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetImpedanceControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetForceControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetForceControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetForceControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetForceControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetForceControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetForceControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetExtAxisControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainReq* request, ::IndyFramework::Protobuf::HRI::SetExtAxisControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetExtAxisControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainReq* request, ::IndyFramework::Protobuf::HRI::GetExtAxisControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetSensorlessComplianceControlJointGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq* request, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetSensorlessComplianceControlJointGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq* request, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetSensorlessComplianceControlTaskGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainReq* request, ::IndyFramework::Protobuf::HRI::SetSensorlessComplianceGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetSensorlessComplianceControlTaskGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainReq* request, ::IndyFramework::Protobuf::HRI::GetSensorlessComplianceGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetFricComp(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetFricCompReq* request, ::IndyFramework::Protobuf::HRI::SetFricCompRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetFricComp(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetFricCompReq* request, ::IndyFramework::Protobuf::HRI::GetFricCompRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetHomePos(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetHomePosReq* request, ::IndyFramework::Protobuf::HRI::SetHomePosRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetHomePos(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetHomePosReq* request, ::IndyFramework::Protobuf::HRI::GetHomePosRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetMountPos(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetMountPosReq* request, ::IndyFramework::Protobuf::HRI::SetMountPosRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetMountPos(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetMountPosReq* request, ::IndyFramework::Protobuf::HRI::GetMountPosRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetPackagingPos(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetPackagingPosReq* request, ::IndyFramework::Protobuf::HRI::GetPackagingPosRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetToolProperty(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetToolPropertyReq* request, ::IndyFramework::Protobuf::HRI::SetToolPropertyRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetToolProperty(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetToolPropertyReq* request, ::IndyFramework::Protobuf::HRI::GetToolPropertyRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetOnStartProgramConfig(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigReq* request, ::IndyFramework::Protobuf::HRI::GetOnStartProgramConfigRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetOnStartProgramConfig(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigReq* request, ::IndyFramework::Protobuf::HRI::SetOnStartProgramConfigRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetSafetyLimitConfig(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigReq* request, ::IndyFramework::Protobuf::HRI::GetSafetyLimitConfigRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetSafetyLimitConfig(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigReq* request, ::IndyFramework::Protobuf::HRI::SetSafetyLimitConfigRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetSafetyStopConfig(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigReq* request, ::IndyFramework::Protobuf::HRI::GetSafetyStopConfigRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetSafetyStopConfig(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigReq* request, ::IndyFramework::Protobuf::HRI::SetSafetyStopConfigRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetSafetyConfigHash(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashReq* request, ::IndyFramework::Protobuf::HRI::GetSafetyConfigHashRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetKinematicsParams(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::KinematicsParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::KeyInit(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::KeyInitReq* request, ::IndyFramework::Protobuf::HRI::KeyInitRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::KeyData(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::KeyDataReq* request, ::IndyFramework::Protobuf::HRI::KeyDataRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::ProgramUpdateKey(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ProgramData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetDirectTeachingModeKey(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeReq* request, ::IndyFramework::Protobuf::HRI::SetDirectTeachingModeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetAutoModeConfig(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GetAutoModeConfigRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetAutoMode(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetAutoModeReq* request, ::IndyFramework::Protobuf::HRI::SetAutoModeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::CheckAutoMode(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CheckAutoModeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::CheckReducedMode(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CheckReducedModeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetReducedRatio(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GetReducedRatioRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetReducedSpeed(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GetReducedSpeedRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetReducedSpeed(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetReducedSpeedReq* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetStopState(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::StopState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetSafetyFunctionState(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SafetyFunctionState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::RequestSafetyFunction(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SafetyFunctionState* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::PlayProgram(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::PlayProgramReq* request, ::IndyFramework::Protobuf::HRI::PlayProgramRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::PlayIndexProgram(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::PlayIndexProgramReq* request, ::IndyFramework::Protobuf::HRI::PlayIndexProgramRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::PlayProgramLine(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::PlayProgramLineReq* request, ::IndyFramework::Protobuf::HRI::PlayProgramLineRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::ResumeProgram(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::ResumeProgramReq* request, ::IndyFramework::Protobuf::HRI::ResumeProgramRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::StopProgram(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::StopProgramReq* request, ::IndyFramework::Protobuf::HRI::StopProgramRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::PauseProgram(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::PauseProgramReq* request, ::IndyFramework::Protobuf::HRI::PauseProgramRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetDO(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::DOSignals* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetAO(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::AOSignals* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetEndDO(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::EndtoolSignalList* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetEndAO(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::AOSignals* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetToolList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::ToolList* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetToolList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::ToolList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetDIConfigList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::DIConfigList* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetDIConfigList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::DIConfigList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetDOConfigList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::DOConfigList* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetDOConfigList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::DOConfigList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetCollSensLevel(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::CollisionSensLevel* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetCollSensLevel(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CollisionSensLevel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetCollPolicy(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::CollisionPolicy* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetCollPolicy(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CollisionPolicy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetCollSensParam(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::CollisionThresholds* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetCollSensParam(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::CollisionThresholds* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::InitCollSensParam(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::PlayTuningProgram(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::TuningProgram* request, ::IndyFramework::Protobuf::HRI::CollisionThresholds* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetTeleOpDevice(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleOpDevice* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetTeleOpState(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleOpState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::ConnectTeleOpDevice(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::TeleOpDevice* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::DisConnectTeleOpDevice(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::ReadTeleOpInput(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleP* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::StartTeleCalib(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::StartTeleRecord(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::StartTelePlay(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::StartTeleJogL(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::StartTeleJogJ(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::StopTeleOp(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetPlayRate(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::TelePlayRate* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetPlayRate(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TelePlayRate* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetTeleFileList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleOpFileList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SaveTeleMotion(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::LoadTeleMotion(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::DeleteTeleMotion(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::TeleFileReq* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::MoveTeleJ(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::MoveTeleJReq* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::MoveTeleL(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::MoveTeleLReq* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetTeleOpParams(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::TeleOpParams* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetTeleOpParams(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TeleOpParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetFTSensorConfig(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::FTSensorDevice* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetFTSensorConfig(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::FTSensorDevice* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetFTSensorData(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::FTSensorData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetLoadFactors(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GetLoadFactorsRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetSanderCommand(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SanderCommand* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetSanderCommand(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SanderCommand* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetSandingStopCondition(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SandingStopConditionState* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetSandingStopCondition(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SandingStopConditionState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetGripperData(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::GripperData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetGripperCommand(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GripperCommand* request, ::IndyFramework::Protobuf::HRI::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetSFDActivate(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::State* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::IsSFDActivate(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::State* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SFDLogin(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SFDAccount* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::IsSFDLogin(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::State* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetSFDTarget(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SFDCriTarget* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetSFDOption(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::State* request, ::IndyFramework::Protobuf::HRI::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetSFDProjList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SFDProjectList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetSFDCRI(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::SFDCriData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::GetTactTime(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::Empty* request, ::IndyFramework::Protobuf::HRI::TactTime* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::AddPhotoneoCalibPoint(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::AddPhotoneoCalibPointReq* request, ::IndyFramework::Protobuf::HRI::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace IndyFramework
}  // namespace Protobuf
}  // namespace HRI

