// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hri.proto

#include "hri.pb.h"
#include "hri.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace IndyFramework {
namespace Protobuf {
namespace HRI {

static const char* HRI_method_names[] = {
  "/IndyFramework.Protobuf.HRI.HRI/GetRefFrameList",
  "/IndyFramework.Protobuf.HRI.HRI/SetRefFrameList",
};

std::unique_ptr< HRI::Stub> HRI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HRI::Stub> stub(new HRI::Stub(channel, options));
  return stub;
}

HRI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetRefFrameList_(HRI_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRefFrameList_(HRI_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HRI::Stub::GetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::GetRefFrameListReq, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRefFrameList_, context, request, response);
}

void HRI::Stub::async::GetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::GetRefFrameListReq, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRefFrameList_, context, request, response, std::move(f));
}

void HRI::Stub::async::GetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRefFrameList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>* HRI::Stub::PrepareAsyncGetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes, ::IndyFramework::Protobuf::HRI::GetRefFrameListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRefFrameList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>* HRI::Stub::AsyncGetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRefFrameListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HRI::Stub::SetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IndyFramework::Protobuf::HRI::SetRefFrameListReq, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetRefFrameList_, context, request, response);
}

void HRI::Stub::async::SetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IndyFramework::Protobuf::HRI::SetRefFrameListReq, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRefFrameList_, context, request, response, std::move(f));
}

void HRI::Stub::async::SetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRefFrameList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>* HRI::Stub::PrepareAsyncSetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes, ::IndyFramework::Protobuf::HRI::SetRefFrameListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetRefFrameList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>* HRI::Stub::AsyncSetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRefFrameListRaw(context, request, cq);
  result->StartCall();
  return result;
}

HRI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::GetRefFrameListReq, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* req,
             ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* resp) {
               return service->GetRefFrameList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HRI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HRI::Service, ::IndyFramework::Protobuf::HRI::SetRefFrameListReq, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HRI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* req,
             ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* resp) {
               return service->SetRefFrameList(ctx, req, resp);
             }, this)));
}

HRI::Service::~Service() {
}

::grpc::Status HRI::Service::GetRefFrameList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HRI::Service::SetRefFrameList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace IndyFramework
}  // namespace Protobuf
}  // namespace HRI

