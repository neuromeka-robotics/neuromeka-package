// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eyetask.proto

#include "eyetask.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace EyeTask {
        template <typename>
PROTOBUF_CONSTEXPR ImageRequest::ImageRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ImageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageRequestDefaultTypeInternal() {}
  union {
    ImageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageRequestDefaultTypeInternal _ImageRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ImageResponse::ImageResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.color_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.depth_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_.width_)*/ 0,
      /*decltype(_impl_.height_)*/ 0,
      /*decltype(_impl_.depth_scale_)*/ 0,
      /*decltype(_impl_.error_state_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ImageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageResponseDefaultTypeInternal() {}
  union {
    ImageResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageResponseDefaultTypeInternal _ImageResponse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Request::Request(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ClassList::ClassList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.class_names_)*/ {},
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.error_state_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ClassListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassListDefaultTypeInternal() {}
  union {
    ClassList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassListDefaultTypeInternal _ClassList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR DetectRequest::DetectRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.pose_cmd_)*/ {},
      /*decltype(_impl_.robot_ip_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.cls_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct DetectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectRequestDefaultTypeInternal() {}
  union {
    DetectRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectRequestDefaultTypeInternal _DetectRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR RetrieveRequest::RetrieveRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.cls_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct RetrieveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RetrieveRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RetrieveRequestDefaultTypeInternal() {}
  union {
    RetrieveRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RetrieveRequestDefaultTypeInternal _RetrieveRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR DetectResponse::DetectResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.tar_ee_pose_)*/ {},
      /*decltype(_impl_.tar_tool_pose_)*/ {},
      /*decltype(_impl_.tar_obj_pose_)*/ {},
      /*decltype(_impl_.error_module_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.cls_)*/ 0,
      /*decltype(_impl_.detected_)*/ false,
      /*decltype(_impl_.passed_)*/ false,
      /*decltype(_impl_.error_state_)*/ false,
      /*decltype(_impl_.tool_idx_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct DetectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectResponseDefaultTypeInternal() {}
  union {
    DetectResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectResponseDefaultTypeInternal _DetectResponse_default_instance_;
}  // namespace EyeTask
static ::_pb::Metadata file_level_metadata_eyetask_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_eyetask_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_eyetask_2eproto = nullptr;
const ::uint32_t TableStruct_eyetask_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::EyeTask::ImageRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::EyeTask::ImageRequest, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::ImageRequest, _impl_.type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::EyeTask::ImageResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::EyeTask::ImageResponse, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::ImageResponse, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::ImageResponse, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::ImageResponse, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::ImageResponse, _impl_.color_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::ImageResponse, _impl_.depth_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::ImageResponse, _impl_.depth_scale_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::ImageResponse, _impl_.error_state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::EyeTask::Request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::EyeTask::Request, _impl_.id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::EyeTask::ClassList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::EyeTask::ClassList, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::ClassList, _impl_.class_names_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::ClassList, _impl_.error_state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectRequest, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectRequest, _impl_.cls_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectRequest, _impl_.pose_cmd_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectRequest, _impl_.robot_ip_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::EyeTask::RetrieveRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::EyeTask::RetrieveRequest, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::RetrieveRequest, _impl_.cls_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectResponse, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectResponse, _impl_.detected_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectResponse, _impl_.passed_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectResponse, _impl_.cls_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectResponse, _impl_.tar_ee_pose_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectResponse, _impl_.tar_tool_pose_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectResponse, _impl_.tar_obj_pose_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectResponse, _impl_.tool_idx_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectResponse, _impl_.error_state_),
    PROTOBUF_FIELD_OFFSET(::EyeTask::DetectResponse, _impl_.error_module_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::EyeTask::ImageRequest)},
        {10, -1, -1, sizeof(::EyeTask::ImageResponse)},
        {26, -1, -1, sizeof(::EyeTask::Request)},
        {35, -1, -1, sizeof(::EyeTask::ClassList)},
        {46, -1, -1, sizeof(::EyeTask::DetectRequest)},
        {58, -1, -1, sizeof(::EyeTask::RetrieveRequest)},
        {68, -1, -1, sizeof(::EyeTask::DetectResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::EyeTask::_ImageRequest_default_instance_._instance,
    &::EyeTask::_ImageResponse_default_instance_._instance,
    &::EyeTask::_Request_default_instance_._instance,
    &::EyeTask::_ClassList_default_instance_._instance,
    &::EyeTask::_DetectRequest_default_instance_._instance,
    &::EyeTask::_RetrieveRequest_default_instance_._instance,
    &::EyeTask::_DetectResponse_default_instance_._instance,
};
const char descriptor_table_protodef_eyetask_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\reyetask.proto\022\007EyeTask\"(\n\014ImageRequest"
    "\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\"\220\001\n\rImageResp"
    "onse\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\r\n\005width\030"
    "\003 \001(\005\022\016\n\006height\030\004 \001(\005\022\r\n\005color\030\005 \001(\014\022\r\n\005"
    "depth\030\006 \001(\014\022\023\n\013depth_scale\030\007 \001(\002\022\023\n\013erro"
    "r_state\030\010 \001(\010\"\025\n\007Request\022\n\n\002id\030\001 \001(\005\"A\n\t"
    "ClassList\022\n\n\002id\030\001 \001(\005\022\023\n\013class_names\030\002 \003"
    "(\t\022\023\n\013error_state\030\010 \001(\010\"L\n\rDetectRequest"
    "\022\n\n\002id\030\001 \001(\005\022\013\n\003cls\030\002 \001(\005\022\020\n\010pose_cmd\030\003 "
    "\003(\002\022\020\n\010robot_ip\030\004 \001(\t\"*\n\017RetrieveRequest"
    "\022\n\n\002id\030\001 \001(\005\022\013\n\003cls\030\002 \001(\005\"\312\001\n\016DetectResp"
    "onse\022\n\n\002id\030\001 \001(\005\022\020\n\010detected\030\002 \001(\010\022\016\n\006pa"
    "ssed\030\003 \001(\010\022\013\n\003cls\030\004 \001(\005\022\023\n\013tar_ee_pose\030\005"
    " \003(\002\022\025\n\rtar_tool_pose\030\006 \003(\002\022\024\n\014tar_obj_p"
    "ose\030\007 \003(\002\022\020\n\010tool_idx\030\010 \001(\005\022\023\n\013error_sta"
    "te\030\t \001(\010\022\024\n\014error_module\030\n \001(\t2\374\001\n\007EyeTa"
    "sk\022;\n\010GetImage\022\025.EyeTask.ImageRequest\032\026."
    "EyeTask.ImageResponse\"\000\0226\n\014GetClassList\022"
    "\020.EyeTask.Request\032\022.EyeTask.ClassList\"\000\022"
    ";\n\006Detect\022\026.EyeTask.DetectRequest\032\027.EyeT"
    "ask.DetectResponse\"\000\022\?\n\010Retrieve\022\030.EyeTa"
    "sk.RetrieveRequest\032\027.EyeTask.DetectRespo"
    "nse\"\000B9\n io.grpc.custom.neuromeka.EyeTas"
    "kB\014EyeTaskProtoP\001\242\002\004FDDOb\006proto3"
};
static ::absl::once_flag descriptor_table_eyetask_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_eyetask_2eproto = {
    false,
    false,
    952,
    descriptor_table_protodef_eyetask_2eproto,
    "eyetask.proto",
    &descriptor_table_eyetask_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_eyetask_2eproto::offsets,
    file_level_metadata_eyetask_2eproto,
    file_level_enum_descriptors_eyetask_2eproto,
    file_level_service_descriptors_eyetask_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_eyetask_2eproto_getter() {
  return &descriptor_table_eyetask_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_eyetask_2eproto(&descriptor_table_eyetask_2eproto);
namespace EyeTask {
// ===================================================================

class ImageRequest::_Internal {
 public:
};

ImageRequest::ImageRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:EyeTask.ImageRequest)
}
ImageRequest::ImageRequest(const ImageRequest& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EyeTask.ImageRequest)
}
inline void ImageRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0},
      decltype(_impl_.type_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
ImageRequest::~ImageRequest() {
  // @@protoc_insertion_point(destructor:EyeTask.ImageRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ImageRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void ImageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EyeTask.ImageRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ImageRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ImageRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ImageRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ImageRequest, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ImageRequest, _impl_.type_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ImageRequest, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ImageRequest, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(ImageRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 type = 2;
    {PROTOBUF_FIELD_OFFSET(ImageRequest, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ImageRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EyeTask.ImageRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EyeTask.ImageRequest)
  return target;
}

::size_t ImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EyeTask.ImageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ImageRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ImageRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*ImageRequest::GetClassData() const { return &_class_data_; }


void ImageRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ImageRequest*>(&to_msg);
  auto& from = static_cast<const ImageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EyeTask.ImageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImageRequest::CopyFrom(const ImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EyeTask.ImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ImageRequest::IsInitialized() const {
  return true;
}

void ImageRequest::InternalSwap(ImageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageRequest, _impl_.type_)
      + sizeof(ImageRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ImageRequest, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata ImageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_eyetask_2eproto_getter, &descriptor_table_eyetask_2eproto_once,
      file_level_metadata_eyetask_2eproto[0]);
}
// ===================================================================

class ImageResponse::_Internal {
 public:
};

ImageResponse::ImageResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:EyeTask.ImageResponse)
}
ImageResponse::ImageResponse(const ImageResponse& from) : ::google::protobuf::Message() {
  ImageResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.color_){},
      decltype(_impl_.depth_){},
      decltype(_impl_.id_){},
      decltype(_impl_.type_){},
      decltype(_impl_.width_){},
      decltype(_impl_.height_){},
      decltype(_impl_.depth_scale_){},
      decltype(_impl_.error_state_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.color_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_color().empty()) {
    _this->_impl_.color_.Set(from._internal_color(), _this->GetArenaForAllocation());
  }
  _impl_.depth_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.depth_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_depth().empty()) {
    _this->_impl_.depth_.Set(from._internal_depth(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.error_state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.error_state_));

  // @@protoc_insertion_point(copy_constructor:EyeTask.ImageResponse)
}
inline void ImageResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.color_){},
      decltype(_impl_.depth_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.type_){0},
      decltype(_impl_.width_){0},
      decltype(_impl_.height_){0},
      decltype(_impl_.depth_scale_){0},
      decltype(_impl_.error_state_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.color_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.depth_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.depth_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ImageResponse::~ImageResponse() {
  // @@protoc_insertion_point(destructor:EyeTask.ImageResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ImageResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.color_.Destroy();
  _impl_.depth_.Destroy();
}
void ImageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:EyeTask.ImageResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_.ClearToEmpty();
  _impl_.depth_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_state_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.error_state_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ImageResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 0, 2> ImageResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ImageResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool error_state = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ImageResponse, _impl_.error_state_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.error_state_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ImageResponse, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.id_)}},
    // int32 type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ImageResponse, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.type_)}},
    // int32 width = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ImageResponse, _impl_.width_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.width_)}},
    // int32 height = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ImageResponse, _impl_.height_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.height_)}},
    // bytes color = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.color_)}},
    // bytes depth = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.depth_)}},
    // float depth_scale = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.depth_scale_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 type = 2;
    {PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 width = 3;
    {PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 height = 4;
    {PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bytes color = 5;
    {PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes depth = 6;
    {PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.depth_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // float depth_scale = 7;
    {PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.depth_scale_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool error_state = 8;
    {PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.error_state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ImageResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EyeTask.ImageResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_type(), target);
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_width(), target);
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_height(), target);
  }

  // bytes color = 5;
  if (!this->_internal_color().empty()) {
    const std::string& _s = this->_internal_color();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // bytes depth = 6;
  if (!this->_internal_depth().empty()) {
    const std::string& _s = this->_internal_depth();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // float depth_scale = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_depth_scale = this->_internal_depth_scale();
  ::uint32_t raw_depth_scale;
  memcpy(&raw_depth_scale, &tmp_depth_scale, sizeof(tmp_depth_scale));
  if (raw_depth_scale != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_depth_scale(), target);
  }

  // bool error_state = 8;
  if (this->_internal_error_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_error_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EyeTask.ImageResponse)
  return target;
}

::size_t ImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EyeTask.ImageResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes color = 5;
  if (!this->_internal_color().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_color());
  }

  // bytes depth = 6;
  if (!this->_internal_depth().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_depth());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_type());
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_width());
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_height());
  }

  // float depth_scale = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_depth_scale = this->_internal_depth_scale();
  ::uint32_t raw_depth_scale;
  memcpy(&raw_depth_scale, &tmp_depth_scale, sizeof(tmp_depth_scale));
  if (raw_depth_scale != 0) {
    total_size += 5;
  }

  // bool error_state = 8;
  if (this->_internal_error_state() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ImageResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ImageResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*ImageResponse::GetClassData() const { return &_class_data_; }


void ImageResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ImageResponse*>(&to_msg);
  auto& from = static_cast<const ImageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EyeTask.ImageResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_color().empty()) {
    _this->_internal_set_color(from._internal_color());
  }
  if (!from._internal_depth().empty()) {
    _this->_internal_set_depth(from._internal_depth());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_depth_scale = from._internal_depth_scale();
  ::uint32_t raw_depth_scale;
  memcpy(&raw_depth_scale, &tmp_depth_scale, sizeof(tmp_depth_scale));
  if (raw_depth_scale != 0) {
    _this->_internal_set_depth_scale(from._internal_depth_scale());
  }
  if (from._internal_error_state() != 0) {
    _this->_internal_set_error_state(from._internal_error_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImageResponse::CopyFrom(const ImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EyeTask.ImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ImageResponse::IsInitialized() const {
  return true;
}

void ImageResponse::InternalSwap(ImageResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.color_, lhs_arena,
                                       &other->_impl_.color_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.depth_, lhs_arena,
                                       &other->_impl_.depth_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.error_state_)
      + sizeof(ImageResponse::_impl_.error_state_)
      - PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata ImageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_eyetask_2eproto_getter, &descriptor_table_eyetask_2eproto_once,
      file_level_metadata_eyetask_2eproto[1]);
}
// ===================================================================

class Request::_Internal {
 public:
};

Request::Request(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:EyeTask.Request)
}
Request::Request(const Request& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EyeTask.Request)
}
inline void Request::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Request::~Request() {
  // @@protoc_insertion_point(destructor:EyeTask.Request)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Request::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:EyeTask.Request)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Request::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Request::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Request_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Request, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Request, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(Request, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Request::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EyeTask.Request)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EyeTask.Request)
  return target;
}

::size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EyeTask.Request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Request::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Request::MergeImpl
};
const ::google::protobuf::Message::ClassData*Request::GetClassData() const { return &_class_data_; }


void Request::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Request*>(&to_msg);
  auto& from = static_cast<const Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EyeTask.Request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EyeTask.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_eyetask_2eproto_getter, &descriptor_table_eyetask_2eproto_once,
      file_level_metadata_eyetask_2eproto[2]);
}
// ===================================================================

class ClassList::_Internal {
 public:
};

ClassList::ClassList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:EyeTask.ClassList)
}
ClassList::ClassList(const ClassList& from) : ::google::protobuf::Message() {
  ClassList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.class_names_){from._impl_.class_names_},
      decltype(_impl_.id_){},
      decltype(_impl_.error_state_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.error_state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.error_state_));

  // @@protoc_insertion_point(copy_constructor:EyeTask.ClassList)
}
inline void ClassList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.class_names_){arena},
      decltype(_impl_.id_){0},
      decltype(_impl_.error_state_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
ClassList::~ClassList() {
  // @@protoc_insertion_point(destructor:EyeTask.ClassList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ClassList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_class_names()->~RepeatedPtrField();
}
void ClassList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ClassList::Clear() {
// @@protoc_insertion_point(message_clear_start:EyeTask.ClassList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_class_names()->Clear();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_state_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.error_state_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ClassList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 37, 2> ClassList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967164,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ClassList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool error_state = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ClassList, _impl_.error_state_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(ClassList, _impl_.error_state_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ClassList, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ClassList, _impl_.id_)}},
    // repeated string class_names = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ClassList, _impl_.class_names_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(ClassList, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated string class_names = 2;
    {PROTOBUF_FIELD_OFFSET(ClassList, _impl_.class_names_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool error_state = 8;
    {PROTOBUF_FIELD_OFFSET(ClassList, _impl_.error_state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\21\0\13\0\0\0\0\0"
    "EyeTask.ClassList"
    "class_names"
  }},
};

::uint8_t* ClassList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EyeTask.ClassList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // repeated string class_names = 2;
  for (int i = 0, n = this->_internal_class_names_size(); i < n; ++i) {
    const auto& s = this->_internal_class_names().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "EyeTask.ClassList.class_names");
    target = stream->WriteString(2, s, target);
  }

  // bool error_state = 8;
  if (this->_internal_error_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_error_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EyeTask.ClassList)
  return target;
}

::size_t ClassList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EyeTask.ClassList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string class_names = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_class_names().size());
  for (int i = 0, n = _internal_class_names().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_class_names().Get(i));
  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // bool error_state = 8;
  if (this->_internal_error_state() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ClassList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ClassList::MergeImpl
};
const ::google::protobuf::Message::ClassData*ClassList::GetClassData() const { return &_class_data_; }


void ClassList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ClassList*>(&to_msg);
  auto& from = static_cast<const ClassList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EyeTask.ClassList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_class_names()->MergeFrom(from._internal_class_names());
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_error_state() != 0) {
    _this->_internal_set_error_state(from._internal_error_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ClassList::CopyFrom(const ClassList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EyeTask.ClassList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ClassList::IsInitialized() const {
  return true;
}

void ClassList::InternalSwap(ClassList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.class_names_.InternalSwap(&other->_impl_.class_names_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClassList, _impl_.error_state_)
      + sizeof(ClassList::_impl_.error_state_)
      - PROTOBUF_FIELD_OFFSET(ClassList, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata ClassList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_eyetask_2eproto_getter, &descriptor_table_eyetask_2eproto_once,
      file_level_metadata_eyetask_2eproto[3]);
}
// ===================================================================

class DetectRequest::_Internal {
 public:
};

DetectRequest::DetectRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:EyeTask.DetectRequest)
}
DetectRequest::DetectRequest(const DetectRequest& from) : ::google::protobuf::Message() {
  DetectRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_cmd_){from._impl_.pose_cmd_},
      decltype(_impl_.robot_ip_){},
      decltype(_impl_.id_){},
      decltype(_impl_.cls_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.robot_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.robot_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robot_ip().empty()) {
    _this->_impl_.robot_ip_.Set(from._internal_robot_ip(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.cls_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.cls_));

  // @@protoc_insertion_point(copy_constructor:EyeTask.DetectRequest)
}
inline void DetectRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_cmd_){arena},
      decltype(_impl_.robot_ip_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.cls_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.robot_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.robot_ip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
DetectRequest::~DetectRequest() {
  // @@protoc_insertion_point(destructor:EyeTask.DetectRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DetectRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pose_cmd_.~RepeatedField();
  _impl_.robot_ip_.Destroy();
}
void DetectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void DetectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EyeTask.DetectRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_pose_cmd()->Clear();
  _impl_.robot_ip_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cls_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.cls_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DetectRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 38, 2> DetectRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_DetectRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string robot_ip = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(DetectRequest, _impl_.robot_ip_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DetectRequest, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DetectRequest, _impl_.id_)}},
    // int32 cls = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DetectRequest, _impl_.cls_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DetectRequest, _impl_.cls_)}},
    // repeated float pose_cmd = 3;
    {::_pbi::TcParser::FastF32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DetectRequest, _impl_.pose_cmd_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(DetectRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cls = 2;
    {PROTOBUF_FIELD_OFFSET(DetectRequest, _impl_.cls_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated float pose_cmd = 3;
    {PROTOBUF_FIELD_OFFSET(DetectRequest, _impl_.pose_cmd_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // string robot_ip = 4;
    {PROTOBUF_FIELD_OFFSET(DetectRequest, _impl_.robot_ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\25\0\0\0\10\0\0\0"
    "EyeTask.DetectRequest"
    "robot_ip"
  }},
};

::uint8_t* DetectRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EyeTask.DetectRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int32 cls = 2;
  if (this->_internal_cls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_cls(), target);
  }

  // repeated float pose_cmd = 3;
  if (this->_internal_pose_cmd_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_pose_cmd(), target);
  }

  // string robot_ip = 4;
  if (!this->_internal_robot_ip().empty()) {
    const std::string& _s = this->_internal_robot_ip();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "EyeTask.DetectRequest.robot_ip");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EyeTask.DetectRequest)
  return target;
}

::size_t DetectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EyeTask.DetectRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float pose_cmd = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_pose_cmd_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string robot_ip = 4;
  if (!this->_internal_robot_ip().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_robot_ip());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 cls = 2;
  if (this->_internal_cls() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cls());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DetectRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    DetectRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*DetectRequest::GetClassData() const { return &_class_data_; }


void DetectRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DetectRequest*>(&to_msg);
  auto& from = static_cast<const DetectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EyeTask.DetectRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_pose_cmd()->MergeFrom(from._internal_pose_cmd());
  if (!from._internal_robot_ip().empty()) {
    _this->_internal_set_robot_ip(from._internal_robot_ip());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_cls() != 0) {
    _this->_internal_set_cls(from._internal_cls());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DetectRequest::CopyFrom(const DetectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EyeTask.DetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DetectRequest::IsInitialized() const {
  return true;
}

void DetectRequest::InternalSwap(DetectRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pose_cmd_.InternalSwap(&other->_impl_.pose_cmd_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.robot_ip_, lhs_arena,
                                       &other->_impl_.robot_ip_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectRequest, _impl_.cls_)
      + sizeof(DetectRequest::_impl_.cls_)
      - PROTOBUF_FIELD_OFFSET(DetectRequest, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata DetectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_eyetask_2eproto_getter, &descriptor_table_eyetask_2eproto_once,
      file_level_metadata_eyetask_2eproto[4]);
}
// ===================================================================

class RetrieveRequest::_Internal {
 public:
};

RetrieveRequest::RetrieveRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:EyeTask.RetrieveRequest)
}
RetrieveRequest::RetrieveRequest(const RetrieveRequest& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EyeTask.RetrieveRequest)
}
inline void RetrieveRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0},
      decltype(_impl_.cls_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
RetrieveRequest::~RetrieveRequest() {
  // @@protoc_insertion_point(destructor:EyeTask.RetrieveRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RetrieveRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void RetrieveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void RetrieveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EyeTask.RetrieveRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cls_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.cls_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RetrieveRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> RetrieveRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RetrieveRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 cls = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RetrieveRequest, _impl_.cls_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RetrieveRequest, _impl_.cls_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RetrieveRequest, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RetrieveRequest, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(RetrieveRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cls = 2;
    {PROTOBUF_FIELD_OFFSET(RetrieveRequest, _impl_.cls_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* RetrieveRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EyeTask.RetrieveRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int32 cls = 2;
  if (this->_internal_cls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_cls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EyeTask.RetrieveRequest)
  return target;
}

::size_t RetrieveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EyeTask.RetrieveRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 cls = 2;
  if (this->_internal_cls() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cls());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RetrieveRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    RetrieveRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*RetrieveRequest::GetClassData() const { return &_class_data_; }


void RetrieveRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RetrieveRequest*>(&to_msg);
  auto& from = static_cast<const RetrieveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EyeTask.RetrieveRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_cls() != 0) {
    _this->_internal_set_cls(from._internal_cls());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RetrieveRequest::CopyFrom(const RetrieveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EyeTask.RetrieveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RetrieveRequest::IsInitialized() const {
  return true;
}

void RetrieveRequest::InternalSwap(RetrieveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RetrieveRequest, _impl_.cls_)
      + sizeof(RetrieveRequest::_impl_.cls_)
      - PROTOBUF_FIELD_OFFSET(RetrieveRequest, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata RetrieveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_eyetask_2eproto_getter, &descriptor_table_eyetask_2eproto_once,
      file_level_metadata_eyetask_2eproto[5]);
}
// ===================================================================

class DetectResponse::_Internal {
 public:
};

DetectResponse::DetectResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:EyeTask.DetectResponse)
}
DetectResponse::DetectResponse(const DetectResponse& from) : ::google::protobuf::Message() {
  DetectResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tar_ee_pose_){from._impl_.tar_ee_pose_},
      decltype(_impl_.tar_tool_pose_){from._impl_.tar_tool_pose_},
      decltype(_impl_.tar_obj_pose_){from._impl_.tar_obj_pose_},
      decltype(_impl_.error_module_){},
      decltype(_impl_.id_){},
      decltype(_impl_.cls_){},
      decltype(_impl_.detected_){},
      decltype(_impl_.passed_){},
      decltype(_impl_.error_state_){},
      decltype(_impl_.tool_idx_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.error_module_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_module_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_module().empty()) {
    _this->_impl_.error_module_.Set(from._internal_error_module(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tool_idx_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.tool_idx_));

  // @@protoc_insertion_point(copy_constructor:EyeTask.DetectResponse)
}
inline void DetectResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tar_ee_pose_){arena},
      decltype(_impl_.tar_tool_pose_){arena},
      decltype(_impl_.tar_obj_pose_){arena},
      decltype(_impl_.error_module_){},
      decltype(_impl_.id_){0},
      decltype(_impl_.cls_){0},
      decltype(_impl_.detected_){false},
      decltype(_impl_.passed_){false},
      decltype(_impl_.error_state_){false},
      decltype(_impl_.tool_idx_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.error_module_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_module_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
DetectResponse::~DetectResponse() {
  // @@protoc_insertion_point(destructor:EyeTask.DetectResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DetectResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tar_ee_pose_.~RepeatedField();
  _impl_.tar_tool_pose_.~RepeatedField();
  _impl_.tar_obj_pose_.~RepeatedField();
  _impl_.error_module_.Destroy();
}
void DetectResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void DetectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:EyeTask.DetectResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tar_ee_pose()->Clear();
  _internal_mutable_tar_tool_pose()->Clear();
  _internal_mutable_tar_obj_pose()->Clear();
  _impl_.error_module_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tool_idx_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.tool_idx_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DetectResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 51, 2> DetectResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_DetectResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DetectResponse, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.id_)}},
    // bool detected = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DetectResponse, _impl_.detected_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.detected_)}},
    // bool passed = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DetectResponse, _impl_.passed_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.passed_)}},
    // int32 cls = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DetectResponse, _impl_.cls_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.cls_)}},
    // repeated float tar_ee_pose = 5;
    {::_pbi::TcParser::FastF32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.tar_ee_pose_)}},
    // repeated float tar_tool_pose = 6;
    {::_pbi::TcParser::FastF32P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.tar_tool_pose_)}},
    // repeated float tar_obj_pose = 7;
    {::_pbi::TcParser::FastF32P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.tar_obj_pose_)}},
    // int32 tool_idx = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DetectResponse, _impl_.tool_idx_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.tool_idx_)}},
    // bool error_state = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DetectResponse, _impl_.error_state_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.error_state_)}},
    // string error_module = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.error_module_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool detected = 2;
    {PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.detected_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool passed = 3;
    {PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.passed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 cls = 4;
    {PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.cls_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated float tar_ee_pose = 5;
    {PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.tar_ee_pose_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float tar_tool_pose = 6;
    {PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.tar_tool_pose_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated float tar_obj_pose = 7;
    {PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.tar_obj_pose_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // int32 tool_idx = 8;
    {PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.tool_idx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool error_state = 9;
    {PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.error_state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string error_module = 10;
    {PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.error_module_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\0\0\0\0\0\0\0\0\0\14\0\0\0\0\0"
    "EyeTask.DetectResponse"
    "error_module"
  }},
};

::uint8_t* DetectResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EyeTask.DetectResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // bool detected = 2;
  if (this->_internal_detected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_detected(), target);
  }

  // bool passed = 3;
  if (this->_internal_passed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_passed(), target);
  }

  // int32 cls = 4;
  if (this->_internal_cls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_cls(), target);
  }

  // repeated float tar_ee_pose = 5;
  if (this->_internal_tar_ee_pose_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_tar_ee_pose(), target);
  }

  // repeated float tar_tool_pose = 6;
  if (this->_internal_tar_tool_pose_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_tar_tool_pose(), target);
  }

  // repeated float tar_obj_pose = 7;
  if (this->_internal_tar_obj_pose_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_tar_obj_pose(), target);
  }

  // int32 tool_idx = 8;
  if (this->_internal_tool_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_tool_idx(), target);
  }

  // bool error_state = 9;
  if (this->_internal_error_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_error_state(), target);
  }

  // string error_module = 10;
  if (!this->_internal_error_module().empty()) {
    const std::string& _s = this->_internal_error_module();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "EyeTask.DetectResponse.error_module");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EyeTask.DetectResponse)
  return target;
}

::size_t DetectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EyeTask.DetectResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tar_ee_pose = 5;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tar_ee_pose_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float tar_tool_pose = 6;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tar_tool_pose_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float tar_obj_pose = 7;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_tar_obj_pose_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string error_module = 10;
  if (!this->_internal_error_module().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_error_module());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 cls = 4;
  if (this->_internal_cls() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cls());
  }

  // bool detected = 2;
  if (this->_internal_detected() != 0) {
    total_size += 2;
  }

  // bool passed = 3;
  if (this->_internal_passed() != 0) {
    total_size += 2;
  }

  // bool error_state = 9;
  if (this->_internal_error_state() != 0) {
    total_size += 2;
  }

  // int32 tool_idx = 8;
  if (this->_internal_tool_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_tool_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DetectResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    DetectResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*DetectResponse::GetClassData() const { return &_class_data_; }


void DetectResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DetectResponse*>(&to_msg);
  auto& from = static_cast<const DetectResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EyeTask.DetectResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tar_ee_pose()->MergeFrom(from._internal_tar_ee_pose());
  _this->_internal_mutable_tar_tool_pose()->MergeFrom(from._internal_tar_tool_pose());
  _this->_internal_mutable_tar_obj_pose()->MergeFrom(from._internal_tar_obj_pose());
  if (!from._internal_error_module().empty()) {
    _this->_internal_set_error_module(from._internal_error_module());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_cls() != 0) {
    _this->_internal_set_cls(from._internal_cls());
  }
  if (from._internal_detected() != 0) {
    _this->_internal_set_detected(from._internal_detected());
  }
  if (from._internal_passed() != 0) {
    _this->_internal_set_passed(from._internal_passed());
  }
  if (from._internal_error_state() != 0) {
    _this->_internal_set_error_state(from._internal_error_state());
  }
  if (from._internal_tool_idx() != 0) {
    _this->_internal_set_tool_idx(from._internal_tool_idx());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DetectResponse::CopyFrom(const DetectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EyeTask.DetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DetectResponse::IsInitialized() const {
  return true;
}

void DetectResponse::InternalSwap(DetectResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tar_ee_pose_.InternalSwap(&other->_impl_.tar_ee_pose_);
  _impl_.tar_tool_pose_.InternalSwap(&other->_impl_.tar_tool_pose_);
  _impl_.tar_obj_pose_.InternalSwap(&other->_impl_.tar_obj_pose_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_module_, lhs_arena,
                                       &other->_impl_.error_module_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.tool_idx_)
      + sizeof(DetectResponse::_impl_.tool_idx_)
      - PROTOBUF_FIELD_OFFSET(DetectResponse, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata DetectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_eyetask_2eproto_getter, &descriptor_table_eyetask_2eproto_once,
      file_level_metadata_eyetask_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace EyeTask
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
