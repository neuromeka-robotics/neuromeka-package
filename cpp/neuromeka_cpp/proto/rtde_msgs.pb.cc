// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtde_msgs.proto

#include "rtde_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_device_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnalogSignal_device_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitalSignal_device_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_device_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndtoolSignal_device_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_common_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtde_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ViolationData_rtde_5fmsgs_2eproto;
namespace Nrmk {
namespace IndyFramework {
class TestRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestRequest> _instance;
} _TestRequest_default_instance_;
class TestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestResponse> _instance;
} _TestResponse_default_instance_;
class MotionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotionData> _instance;
} _MotionData_default_instance_;
class ControlDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlData> _instance;
} _ControlData_default_instance_;
class ControlData2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlData2> _instance;
} _ControlData2_default_instance_;
class IODataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IOData> _instance;
} _IOData_default_instance_;
class ViolationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViolationData> _instance;
} _ViolationData_default_instance_;
class ViolationMessageQueueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViolationMessageQueue> _instance;
} _ViolationMessageQueue_default_instance_;
class ServoDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServoData> _instance;
} _ServoData_default_instance_;
class ProgramDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProgramData> _instance;
} _ProgramData_default_instance_;
class StopStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopState> _instance;
} _StopState_default_instance_;
}  // namespace IndyFramework
}  // namespace Nrmk
static void InitDefaultsscc_info_ControlData_rtde_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_ControlData_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::ControlData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::ControlData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControlData_rtde_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ControlData_rtde_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_ControlData2_rtde_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_ControlData2_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::ControlData2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::ControlData2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControlData2_rtde_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ControlData2_rtde_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_IOData_rtde_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_IOData_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::IOData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::IOData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_IOData_rtde_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_IOData_rtde_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_device_5fmsgs_2eproto.base,
      &scc_info_AnalogSignal_device_5fmsgs_2eproto.base,
      &scc_info_EndtoolSignal_device_5fmsgs_2eproto.base,
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MotionData_rtde_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_MotionData_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::MotionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::MotionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MotionData_rtde_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MotionData_rtde_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_ProgramData_rtde_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_ProgramData_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::ProgramData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::ProgramData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProgramData_rtde_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ProgramData_rtde_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_ServoData_rtde_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_ServoData_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::ServoData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::ServoData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServoData_rtde_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ServoData_rtde_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_StopState_rtde_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_StopState_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::StopState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::StopState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StopState_rtde_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StopState_rtde_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_TestRequest_rtde_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TestRequest_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TestRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TestRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestRequest_rtde_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TestRequest_rtde_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_TestResponse_rtde_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_TestResponse_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::TestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::TestResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestResponse_rtde_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TestResponse_rtde_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_ViolationData_rtde_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_ViolationData_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::ViolationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::ViolationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ViolationData_rtde_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ViolationData_rtde_5fmsgs_2eproto}, {
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_ViolationMessageQueue_rtde_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Nrmk::IndyFramework::_ViolationMessageQueue_default_instance_;
    new (ptr) ::Nrmk::IndyFramework::ViolationMessageQueue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Nrmk::IndyFramework::ViolationMessageQueue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ViolationMessageQueue_rtde_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ViolationMessageQueue_rtde_5fmsgs_2eproto}, {
      &scc_info_ViolationData_rtde_5fmsgs_2eproto.base,
      &scc_info_Response_common_5fmsgs_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rtde_5fmsgs_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rtde_5fmsgs_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rtde_5fmsgs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rtde_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestRequest, intval_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestRequest, strval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestResponse, code_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::TestResponse, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, traj_state_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, traj_progress_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, is_in_motion_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, is_target_reached_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, is_pausing_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, is_stopping_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, has_motion_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, speed_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, motion_id_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, remain_distance_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, motion_queue_size_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, cur_traj_progress_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::MotionData, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, running_hours_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, running_mins_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, running_secs_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, op_state_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, sim_mode_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, q_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, qdot_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, p_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, pdot_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, ref_frame_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, tool_frame_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, q_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, qdot_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, qddot_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, qdes_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, qdotdes_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, qddotdes_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, p_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, pdot_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, pddot_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, pdes_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, pdotdes_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, pddotdes_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, tau_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, tau_act_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, tau_ext_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ControlData2, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, di_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, do__),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, ai_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, ao_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, end_di_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, end_do_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, end_ai_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, end_ao_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::IOData, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, violation_code_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, j_index_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, i_args_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, f_args_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, violation_str_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationData, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationMessageQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationMessageQueue, violation_queue_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ViolationMessageQueue, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, status_codes_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, temperatures_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, voltages_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, currents_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, servo_actives_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, brake_actives_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ServoData, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, program_state_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, cmd_id_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, sub_cmd_id_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, running_hours_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, running_mins_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, running_secs_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, program_name_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, program_alarm_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, program_annotation_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, speed_ratio_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::ProgramData, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::StopState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::StopState, category_),
  PROTOBUF_FIELD_OFFSET(::Nrmk::IndyFramework::StopState, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Nrmk::IndyFramework::TestRequest)},
  { 7, -1, sizeof(::Nrmk::IndyFramework::TestResponse)},
  { 14, -1, sizeof(::Nrmk::IndyFramework::MotionData)},
  { 32, -1, sizeof(::Nrmk::IndyFramework::ControlData)},
  { 49, -1, sizeof(::Nrmk::IndyFramework::ControlData2)},
  { 70, -1, sizeof(::Nrmk::IndyFramework::IOData)},
  { 84, -1, sizeof(::Nrmk::IndyFramework::ViolationData)},
  { 95, -1, sizeof(::Nrmk::IndyFramework::ViolationMessageQueue)},
  { 102, -1, sizeof(::Nrmk::IndyFramework::ServoData)},
  { 114, -1, sizeof(::Nrmk::IndyFramework::ProgramData)},
  { 130, -1, sizeof(::Nrmk::IndyFramework::StopState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TestRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_TestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_MotionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_ControlData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_ControlData2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_IOData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_ViolationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_ViolationMessageQueue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_ServoData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_ProgramData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Nrmk::IndyFramework::_StopState_default_instance_),
};

const char descriptor_table_protodef_rtde_5fmsgs_2eproto[] =
  "\n\017rtde_msgs.proto\022\022Nrmk.IndyFramework\032\021d"
  "evice_msgs.proto\032\021common_msgs.proto\"-\n\013T"
  "estRequest\022\016\n\006intVal\030\001 \001(\005\022\016\n\006strVal\030\002 \001"
  "(\t\")\n\014TestResponse\022\014\n\004code\030\001 \001(\003\022\013\n\003msg\030"
  "\002 \001(\t\"\353\002\n\nMotionData\0221\n\ntraj_state\030\001 \001(\016"
  "2\035.Nrmk.IndyFramework.TrajState\022\025\n\rtraj_"
  "progress\030\002 \001(\005\022\024\n\014is_in_motion\030\003 \001(\010\022\031\n\021"
  "is_target_reached\030\004 \001(\010\022\022\n\nis_pausing\030\005 "
  "\001(\010\022\023\n\013is_stopping\030\006 \001(\010\022\022\n\nhas_motion\030\007"
  " \001(\010\022\023\n\013speed_ratio\030\010 \001(\005\022\021\n\tmotion_id\030\t"
  " \001(\005\022\027\n\017remain_distance\030\n \001(\002\022\031\n\021motion_"
  "queue_size\030\013 \001(\r\022\031\n\021cur_traj_progress\030\014 "
  "\001(\005\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFramewo"
  "rk.Response\"\232\002\n\013ControlData\022\025\n\rrunning_h"
  "ours\030\001 \001(\r\022\024\n\014running_mins\030\002 \001(\r\022\024\n\014runn"
  "ing_secs\030\003 \001(\r\022-\n\010op_state\030\004 \001(\0162\033.Nrmk."
  "IndyFramework.OpState\022\020\n\010sim_mode\030\005 \001(\010\022"
  "\t\n\001q\030\n \003(\002\022\014\n\004qdot\030\013 \003(\002\022\t\n\001p\030\014 \003(\002\022\014\n\004p"
  "dot\030\r \003(\002\022\021\n\tref_frame\030\024 \003(\002\022\022\n\ntool_fra"
  "me\030\025 \003(\002\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFr"
  "amework.Response\"\237\002\n\014ControlData2\022\t\n\001q\030\001"
  " \003(\002\022\014\n\004qdot\030\002 \003(\002\022\r\n\005qddot\030\003 \003(\002\022\014\n\004qde"
  "s\030\004 \003(\002\022\017\n\007qdotdes\030\005 \003(\002\022\020\n\010qddotdes\030\006 \003"
  "(\002\022\t\n\001p\030\n \003(\002\022\014\n\004pdot\030\013 \003(\002\022\r\n\005pddot\030\014 \003"
  "(\002\022\014\n\004pdes\030\r \003(\002\022\017\n\007pdotdes\030\016 \003(\002\022\020\n\010pdd"
  "otdes\030\017 \003(\002\022\013\n\003tau\030\024 \003(\002\022\017\n\007tau_act\030\025 \003("
  "\002\022\017\n\007tau_ext\030\026 \003(\002\022.\n\010response\030d \001(\0132\034.N"
  "rmk.IndyFramework.Response\"\274\003\n\006IOData\022-\n"
  "\002di\030\001 \003(\0132!.Nrmk.IndyFramework.DigitalSi"
  "gnal\022-\n\002do\030\002 \003(\0132!.Nrmk.IndyFramework.Di"
  "gitalSignal\022,\n\002ai\030\003 \003(\0132 .Nrmk.IndyFrame"
  "work.AnalogSignal\022,\n\002ao\030\004 \003(\0132 .Nrmk.Ind"
  "yFramework.AnalogSignal\0221\n\006end_di\030\005 \003(\0132"
  "!.Nrmk.IndyFramework.EndtoolSignal\0221\n\006en"
  "d_do\030\006 \003(\0132!.Nrmk.IndyFramework.EndtoolS"
  "ignal\0220\n\006end_ai\030\007 \003(\0132 .Nrmk.IndyFramewo"
  "rk.AnalogSignal\0220\n\006end_ao\030\010 \003(\0132 .Nrmk.I"
  "ndyFramework.AnalogSignal\022.\n\010response\030d "
  "\001(\0132\034.Nrmk.IndyFramework.Response\"\237\001\n\rVi"
  "olationData\022\026\n\016violation_code\030\001 \001(\004\022\017\n\007j"
  "_index\030\002 \001(\r\022\016\n\006i_args\030\003 \003(\005\022\016\n\006f_args\030\004"
  " \003(\002\022\025\n\rviolation_str\030\005 \001(\t\022.\n\010response\030"
  "d \001(\0132\034.Nrmk.IndyFramework.Response\"\203\001\n\025"
  "ViolationMessageQueue\022:\n\017violation_queue"
  "\030\001 \003(\0132!.Nrmk.IndyFramework.ViolationDat"
  "a\022.\n\010response\030d \001(\0132\034.Nrmk.IndyFramework"
  ".Response\"\271\001\n\tServoData\022\024\n\014status_codes\030"
  "\001 \003(\t\022\024\n\014temperatures\030\002 \003(\002\022\020\n\010voltages\030"
  "\003 \003(\002\022\020\n\010currents\030\004 \003(\002\022\025\n\rservo_actives"
  "\030\n \003(\010\022\025\n\rbrake_actives\030\013 \003(\010\022.\n\010respons"
  "e\030d \001(\0132\034.Nrmk.IndyFramework.Response\"\273\002"
  "\n\013ProgramData\0227\n\rprogram_state\030\001 \001(\0162 .N"
  "rmk.IndyFramework.ProgramState\022\016\n\006cmd_id"
  "\030\002 \001(\005\022\022\n\nsub_cmd_id\030\003 \001(\005\022\025\n\rrunning_ho"
  "urs\030\004 \001(\r\022\024\n\014running_mins\030\005 \001(\r\022\024\n\014runni"
  "ng_secs\030\006 \001(\r\022\024\n\014program_name\030\007 \001(\t\022\025\n\rp"
  "rogram_alarm\030\010 \001(\t\022\032\n\022program_annotation"
  "\030\t \001(\t\022\023\n\013speed_ratio\030\n \001(\005\022.\n\010response\030"
  "d \001(\0132\034.Nrmk.IndyFramework.Response\"\325\001\n\t"
  "StopState\022<\n\010category\030\001 \001(\0162*.Nrmk.IndyF"
  "ramework.StopState.StopCategory\022.\n\010respo"
  "nse\030d \001(\0132\034.Nrmk.IndyFramework.Response\""
  "Z\n\014StopCategory\022\016\n\nSTOP_CAT_0\020\000\022\016\n\nSTOP_"
  "CAT_1\020\001\022\016\n\nSTOP_CAT_2\020\002\022\032\n\rSTOP_CAT_NONE"
  "\020\377\377\377\377\377\377\377\377\377\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rtde_5fmsgs_2eproto_deps[2] = {
  &::descriptor_table_common_5fmsgs_2eproto,
  &::descriptor_table_device_5fmsgs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rtde_5fmsgs_2eproto_sccs[11] = {
  &scc_info_ControlData_rtde_5fmsgs_2eproto.base,
  &scc_info_ControlData2_rtde_5fmsgs_2eproto.base,
  &scc_info_IOData_rtde_5fmsgs_2eproto.base,
  &scc_info_MotionData_rtde_5fmsgs_2eproto.base,
  &scc_info_ProgramData_rtde_5fmsgs_2eproto.base,
  &scc_info_ServoData_rtde_5fmsgs_2eproto.base,
  &scc_info_StopState_rtde_5fmsgs_2eproto.base,
  &scc_info_TestRequest_rtde_5fmsgs_2eproto.base,
  &scc_info_TestResponse_rtde_5fmsgs_2eproto.base,
  &scc_info_ViolationData_rtde_5fmsgs_2eproto.base,
  &scc_info_ViolationMessageQueue_rtde_5fmsgs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rtde_5fmsgs_2eproto_once;
static bool descriptor_table_rtde_5fmsgs_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rtde_5fmsgs_2eproto = {
  &descriptor_table_rtde_5fmsgs_2eproto_initialized, descriptor_table_protodef_rtde_5fmsgs_2eproto, "rtde_msgs.proto", 2579,
  &descriptor_table_rtde_5fmsgs_2eproto_once, descriptor_table_rtde_5fmsgs_2eproto_sccs, descriptor_table_rtde_5fmsgs_2eproto_deps, 11, 2,
  schemas, file_default_instances, TableStruct_rtde_5fmsgs_2eproto::offsets,
  file_level_metadata_rtde_5fmsgs_2eproto, 11, file_level_enum_descriptors_rtde_5fmsgs_2eproto, file_level_service_descriptors_rtde_5fmsgs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rtde_5fmsgs_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rtde_5fmsgs_2eproto), true);
namespace Nrmk {
namespace IndyFramework {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopState_StopCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rtde_5fmsgs_2eproto);
  return file_level_enum_descriptors_rtde_5fmsgs_2eproto[0];
}
bool StopState_StopCategory_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StopState_StopCategory StopState::STOP_CAT_0;
constexpr StopState_StopCategory StopState::STOP_CAT_1;
constexpr StopState_StopCategory StopState::STOP_CAT_2;
constexpr StopState_StopCategory StopState::STOP_CAT_NONE;
constexpr StopState_StopCategory StopState::StopCategory_MIN;
constexpr StopState_StopCategory StopState::StopCategory_MAX;
constexpr int StopState::StopCategory_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TestRequest::InitAsDefaultInstance() {
}
class TestRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestRequest::kIntValFieldNumber;
const int TestRequest::kStrValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestRequest::TestRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TestRequest)
}
TestRequest::TestRequest(const TestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.strval().size() > 0) {
    strval_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strval_);
  }
  intval_ = from.intval_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TestRequest)
}

void TestRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestRequest_rtde_5fmsgs_2eproto.base);
  strval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intval_ = 0;
}

TestRequest::~TestRequest() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TestRequest)
  SharedDtor();
}

void TestRequest::SharedDtor() {
  strval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestRequest& TestRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestRequest_rtde_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strval_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intval_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 intVal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          intval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strVal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_strval(), ptr, ctx, "Nrmk.IndyFramework.TestRequest.strVal");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TestRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 intVal = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &intval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strVal = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_strval()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->strval().data(), static_cast<int>(this->strval().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.TestRequest.strVal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TestRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TestRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 intVal = 1;
  if (this->intval() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->intval(), output);
  }

  // string strVal = 2;
  if (this->strval().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->strval().data(), static_cast<int>(this->strval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.TestRequest.strVal");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TestRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* TestRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 intVal = 1;
  if (this->intval() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->intval(), target);
  }

  // string strVal = 2;
  if (this->strval().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->strval().data(), static_cast<int>(this->strval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.TestRequest.strVal");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->strval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TestRequest)
  return target;
}

size_t TestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TestRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strVal = 2;
  if (this->strval().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->strval());
  }

  // int32 intVal = 1;
  if (this->intval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->intval());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TestRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TestRequest)
    MergeFrom(*source);
  }
}

void TestRequest::MergeFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strval().size() > 0) {

    strval_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strval_);
  }
  if (from.intval() != 0) {
    set_intval(from.intval());
  }
}

void TestRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRequest::CopyFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequest::IsInitialized() const {
  return true;
}

void TestRequest::Swap(TestRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestRequest::InternalSwap(TestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  strval_.Swap(&other->strval_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(intval_, other->intval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestResponse::InitAsDefaultInstance() {
}
class TestResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestResponse::kCodeFieldNumber;
const int TestResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestResponse::TestResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.TestResponse)
}
TestResponse::TestResponse(const TestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.TestResponse)
}

void TestResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestResponse_rtde_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = PROTOBUF_LONGLONG(0);
}

TestResponse::~TestResponse() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.TestResponse)
  SharedDtor();
}

void TestResponse::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestResponse& TestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestResponse_rtde_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.TestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "Nrmk.IndyFramework.TestResponse.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.TestResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.TestResponse.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.TestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.TestResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.TestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 code = 1;
  if (this->code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->code(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.TestResponse.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.TestResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* TestResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.TestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 code = 1;
  if (this->code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->code(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.TestResponse.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.TestResponse)
  return target;
}

size_t TestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.TestResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // int64 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.TestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.TestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.TestResponse)
    MergeFrom(*source);
  }
}

void TestResponse::MergeFrom(const TestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.TestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void TestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.TestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestResponse::CopyFrom(const TestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.TestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResponse::IsInitialized() const {
  return true;
}

void TestResponse::Swap(TestResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestResponse::InternalSwap(TestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MotionData::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_MotionData_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class MotionData::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const MotionData* msg);
};

const ::Nrmk::IndyFramework::Response&
MotionData::HasBitSetters::response(const MotionData* msg) {
  return *msg->response_;
}
void MotionData::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotionData::kTrajStateFieldNumber;
const int MotionData::kTrajProgressFieldNumber;
const int MotionData::kIsInMotionFieldNumber;
const int MotionData::kIsTargetReachedFieldNumber;
const int MotionData::kIsPausingFieldNumber;
const int MotionData::kIsStoppingFieldNumber;
const int MotionData::kHasMotionFieldNumber;
const int MotionData::kSpeedRatioFieldNumber;
const int MotionData::kMotionIdFieldNumber;
const int MotionData::kRemainDistanceFieldNumber;
const int MotionData::kMotionQueueSizeFieldNumber;
const int MotionData::kCurTrajProgressFieldNumber;
const int MotionData::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotionData::MotionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.MotionData)
}
MotionData::MotionData(const MotionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  ::memcpy(&traj_state_, &from.traj_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_traj_progress_) -
    reinterpret_cast<char*>(&traj_state_)) + sizeof(cur_traj_progress_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.MotionData)
}

void MotionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MotionData_rtde_5fmsgs_2eproto.base);
  ::memset(&response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_traj_progress_) -
      reinterpret_cast<char*>(&response_)) + sizeof(cur_traj_progress_));
}

MotionData::~MotionData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.MotionData)
  SharedDtor();
}

void MotionData::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void MotionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotionData& MotionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotionData_rtde_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MotionData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.MotionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  ::memset(&traj_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_traj_progress_) -
      reinterpret_cast<char*>(&traj_state_)) + sizeof(cur_traj_progress_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.TrajState traj_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_traj_state(static_cast<::Nrmk::IndyFramework::TrajState>(val));
        } else goto handle_unusual;
        continue;
      // int32 traj_progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          traj_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_in_motion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_in_motion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_target_reached = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_target_reached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_pausing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_pausing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_stopping = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_stopping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_motion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          has_motion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 speed_ratio = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          speed_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 motion_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          motion_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float remain_distance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          remain_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 motion_queue_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          motion_queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_traj_progress = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          cur_traj_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotionData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.MotionData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.TrajState traj_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_traj_state(static_cast< ::Nrmk::IndyFramework::TrajState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 traj_progress = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &traj_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_in_motion = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_motion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_target_reached = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_target_reached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_pausing = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pausing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_stopping = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stopping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_motion = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_motion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speed_ratio = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 motion_id = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &motion_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float remain_distance = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &remain_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 motion_queue_size = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motion_queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cur_traj_progress = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_traj_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.MotionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.MotionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotionData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.MotionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TrajState traj_state = 1;
  if (this->traj_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->traj_state(), output);
  }

  // int32 traj_progress = 2;
  if (this->traj_progress() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->traj_progress(), output);
  }

  // bool is_in_motion = 3;
  if (this->is_in_motion() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_in_motion(), output);
  }

  // bool is_target_reached = 4;
  if (this->is_target_reached() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_target_reached(), output);
  }

  // bool is_pausing = 5;
  if (this->is_pausing() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_pausing(), output);
  }

  // bool is_stopping = 6;
  if (this->is_stopping() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->is_stopping(), output);
  }

  // bool has_motion = 7;
  if (this->has_motion() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->has_motion(), output);
  }

  // int32 speed_ratio = 8;
  if (this->speed_ratio() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->speed_ratio(), output);
  }

  // int32 motion_id = 9;
  if (this->motion_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->motion_id(), output);
  }

  // float remain_distance = 10;
  if (!(this->remain_distance() <= 0 && this->remain_distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->remain_distance(), output);
  }

  // uint32 motion_queue_size = 11;
  if (this->motion_queue_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->motion_queue_size(), output);
  }

  // int32 cur_traj_progress = 12;
  if (this->cur_traj_progress() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->cur_traj_progress(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.MotionData)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.MotionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.TrajState traj_state = 1;
  if (this->traj_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->traj_state(), target);
  }

  // int32 traj_progress = 2;
  if (this->traj_progress() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->traj_progress(), target);
  }

  // bool is_in_motion = 3;
  if (this->is_in_motion() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_in_motion(), target);
  }

  // bool is_target_reached = 4;
  if (this->is_target_reached() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->is_target_reached(), target);
  }

  // bool is_pausing = 5;
  if (this->is_pausing() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->is_pausing(), target);
  }

  // bool is_stopping = 6;
  if (this->is_stopping() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->is_stopping(), target);
  }

  // bool has_motion = 7;
  if (this->has_motion() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->has_motion(), target);
  }

  // int32 speed_ratio = 8;
  if (this->speed_ratio() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->speed_ratio(), target);
  }

  // int32 motion_id = 9;
  if (this->motion_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->motion_id(), target);
  }

  // float remain_distance = 10;
  if (!(this->remain_distance() <= 0 && this->remain_distance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->remain_distance(), target);
  }

  // uint32 motion_queue_size = 11;
  if (this->motion_queue_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->motion_queue_size(), target);
  }

  // int32 cur_traj_progress = 12;
  if (this->cur_traj_progress() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->cur_traj_progress(), target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.MotionData)
  return target;
}

size_t MotionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.MotionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // .Nrmk.IndyFramework.TrajState traj_state = 1;
  if (this->traj_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->traj_state());
  }

  // int32 traj_progress = 2;
  if (this->traj_progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->traj_progress());
  }

  // bool is_in_motion = 3;
  if (this->is_in_motion() != 0) {
    total_size += 1 + 1;
  }

  // bool is_target_reached = 4;
  if (this->is_target_reached() != 0) {
    total_size += 1 + 1;
  }

  // bool is_pausing = 5;
  if (this->is_pausing() != 0) {
    total_size += 1 + 1;
  }

  // bool is_stopping = 6;
  if (this->is_stopping() != 0) {
    total_size += 1 + 1;
  }

  // bool has_motion = 7;
  if (this->has_motion() != 0) {
    total_size += 1 + 1;
  }

  // int32 speed_ratio = 8;
  if (this->speed_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->speed_ratio());
  }

  // int32 motion_id = 9;
  if (this->motion_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->motion_id());
  }

  // float remain_distance = 10;
  if (!(this->remain_distance() <= 0 && this->remain_distance() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 motion_queue_size = 11;
  if (this->motion_queue_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->motion_queue_size());
  }

  // int32 cur_traj_progress = 12;
  if (this->cur_traj_progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cur_traj_progress());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.MotionData)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.MotionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.MotionData)
    MergeFrom(*source);
  }
}

void MotionData::MergeFrom(const MotionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.MotionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
  if (from.traj_state() != 0) {
    set_traj_state(from.traj_state());
  }
  if (from.traj_progress() != 0) {
    set_traj_progress(from.traj_progress());
  }
  if (from.is_in_motion() != 0) {
    set_is_in_motion(from.is_in_motion());
  }
  if (from.is_target_reached() != 0) {
    set_is_target_reached(from.is_target_reached());
  }
  if (from.is_pausing() != 0) {
    set_is_pausing(from.is_pausing());
  }
  if (from.is_stopping() != 0) {
    set_is_stopping(from.is_stopping());
  }
  if (from.has_motion() != 0) {
    set_has_motion(from.has_motion());
  }
  if (from.speed_ratio() != 0) {
    set_speed_ratio(from.speed_ratio());
  }
  if (from.motion_id() != 0) {
    set_motion_id(from.motion_id());
  }
  if (!(from.remain_distance() <= 0 && from.remain_distance() >= 0)) {
    set_remain_distance(from.remain_distance());
  }
  if (from.motion_queue_size() != 0) {
    set_motion_queue_size(from.motion_queue_size());
  }
  if (from.cur_traj_progress() != 0) {
    set_cur_traj_progress(from.cur_traj_progress());
  }
}

void MotionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.MotionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionData::CopyFrom(const MotionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.MotionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionData::IsInitialized() const {
  return true;
}

void MotionData::Swap(MotionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotionData::InternalSwap(MotionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(traj_state_, other->traj_state_);
  swap(traj_progress_, other->traj_progress_);
  swap(is_in_motion_, other->is_in_motion_);
  swap(is_target_reached_, other->is_target_reached_);
  swap(is_pausing_, other->is_pausing_);
  swap(is_stopping_, other->is_stopping_);
  swap(has_motion_, other->has_motion_);
  swap(speed_ratio_, other->speed_ratio_);
  swap(motion_id_, other->motion_id_);
  swap(remain_distance_, other->remain_distance_);
  swap(motion_queue_size_, other->motion_queue_size_);
  swap(cur_traj_progress_, other->cur_traj_progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlData::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_ControlData_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class ControlData::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const ControlData* msg);
};

const ::Nrmk::IndyFramework::Response&
ControlData::HasBitSetters::response(const ControlData* msg) {
  return *msg->response_;
}
void ControlData::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlData::kRunningHoursFieldNumber;
const int ControlData::kRunningMinsFieldNumber;
const int ControlData::kRunningSecsFieldNumber;
const int ControlData::kOpStateFieldNumber;
const int ControlData::kSimModeFieldNumber;
const int ControlData::kQFieldNumber;
const int ControlData::kQdotFieldNumber;
const int ControlData::kPFieldNumber;
const int ControlData::kPdotFieldNumber;
const int ControlData::kRefFrameFieldNumber;
const int ControlData::kToolFrameFieldNumber;
const int ControlData::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlData::ControlData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.ControlData)
}
ControlData::ControlData(const ControlData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      q_(from.q_),
      qdot_(from.qdot_),
      p_(from.p_),
      pdot_(from.pdot_),
      ref_frame_(from.ref_frame_),
      tool_frame_(from.tool_frame_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  ::memcpy(&running_hours_, &from.running_hours_,
    static_cast<size_t>(reinterpret_cast<char*>(&sim_mode_) -
    reinterpret_cast<char*>(&running_hours_)) + sizeof(sim_mode_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ControlData)
}

void ControlData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlData_rtde_5fmsgs_2eproto.base);
  ::memset(&response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sim_mode_) -
      reinterpret_cast<char*>(&response_)) + sizeof(sim_mode_));
}

ControlData::~ControlData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ControlData)
  SharedDtor();
}

void ControlData::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void ControlData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlData& ControlData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlData_rtde_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ControlData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ControlData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  q_.Clear();
  qdot_.Clear();
  p_.Clear();
  pdot_.Clear();
  ref_frame_.Clear();
  tool_frame_.Clear();
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  ::memset(&running_hours_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sim_mode_) -
      reinterpret_cast<char*>(&running_hours_)) + sizeof(sim_mode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ControlData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 running_hours = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          running_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 running_mins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          running_mins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 running_secs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          running_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.OpState op_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_op_state(static_cast<::Nrmk::IndyFramework::OpState>(val));
        } else goto handle_unusual;
        continue;
      // bool sim_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sim_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float q = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_q(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85) {
          add_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float qdot = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_qdot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93) {
          add_qdot(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float p = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_p(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          add_p(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pdot = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_pdot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109) {
          add_pdot(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float ref_frame = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_ref_frame(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165) {
          add_ref_frame(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tool_frame = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tool_frame(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173) {
          add_tool_frame(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ControlData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.ControlData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 running_hours = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &running_hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 running_mins = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &running_mins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 running_secs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &running_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.OpState op_state = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op_state(static_cast< ::Nrmk::IndyFramework::OpState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sim_mode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sim_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float q = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_q())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_q())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float qdot = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_qdot())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_qdot())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float p = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_p())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_p())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pdot = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pdot())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 106u, input, this->mutable_pdot())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float ref_frame = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ref_frame())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (165 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 162u, input, this->mutable_ref_frame())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tool_frame = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tool_frame())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (173 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 170u, input, this->mutable_tool_frame())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.ControlData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.ControlData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ControlData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.ControlData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 running_hours = 1;
  if (this->running_hours() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->running_hours(), output);
  }

  // uint32 running_mins = 2;
  if (this->running_mins() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->running_mins(), output);
  }

  // uint32 running_secs = 3;
  if (this->running_secs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->running_secs(), output);
  }

  // .Nrmk.IndyFramework.OpState op_state = 4;
  if (this->op_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->op_state(), output);
  }

  // bool sim_mode = 5;
  if (this->sim_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->sim_mode(), output);
  }

  // repeated float q = 10;
  if (this->q_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(10, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_q_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->q().data(), this->q_size(), output);
  }

  // repeated float qdot = 11;
  if (this->qdot_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(11, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_qdot_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->qdot().data(), this->qdot_size(), output);
  }

  // repeated float p = 12;
  if (this->p_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(12, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_p_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->p().data(), this->p_size(), output);
  }

  // repeated float pdot = 13;
  if (this->pdot_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(13, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pdot_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->pdot().data(), this->pdot_size(), output);
  }

  // repeated float ref_frame = 20;
  if (this->ref_frame_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(20, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ref_frame_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->ref_frame().data(), this->ref_frame_size(), output);
  }

  // repeated float tool_frame = 21;
  if (this->tool_frame_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(21, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tool_frame_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tool_frame().data(), this->tool_frame_size(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.ControlData)
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ControlData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 running_hours = 1;
  if (this->running_hours() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->running_hours(), target);
  }

  // uint32 running_mins = 2;
  if (this->running_mins() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->running_mins(), target);
  }

  // uint32 running_secs = 3;
  if (this->running_secs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->running_secs(), target);
  }

  // .Nrmk.IndyFramework.OpState op_state = 4;
  if (this->op_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->op_state(), target);
  }

  // bool sim_mode = 5;
  if (this->sim_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->sim_mode(), target);
  }

  // repeated float q = 10;
  if (this->q_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      10,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _q_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->q_, target);
  }

  // repeated float qdot = 11;
  if (this->qdot_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      11,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _qdot_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->qdot_, target);
  }

  // repeated float p = 12;
  if (this->p_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      12,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _p_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->p_, target);
  }

  // repeated float pdot = 13;
  if (this->pdot_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      13,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pdot_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pdot_, target);
  }

  // repeated float ref_frame = 20;
  if (this->ref_frame_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      20,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ref_frame_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ref_frame_, target);
  }

  // repeated float tool_frame = 21;
  if (this->tool_frame_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      21,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tool_frame_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tool_frame_, target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ControlData)
  return target;
}

size_t ControlData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ControlData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float q = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->q_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _q_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float qdot = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->qdot_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _qdot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float p = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->p_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _p_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float pdot = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->pdot_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pdot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float ref_frame = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->ref_frame_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ref_frame_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tool_frame = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->tool_frame_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tool_frame_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // uint32 running_hours = 1;
  if (this->running_hours() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->running_hours());
  }

  // uint32 running_mins = 2;
  if (this->running_mins() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->running_mins());
  }

  // uint32 running_secs = 3;
  if (this->running_secs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->running_secs());
  }

  // .Nrmk.IndyFramework.OpState op_state = 4;
  if (this->op_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->op_state());
  }

  // bool sim_mode = 5;
  if (this->sim_mode() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.ControlData)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.ControlData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.ControlData)
    MergeFrom(*source);
  }
}

void ControlData::MergeFrom(const ControlData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ControlData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  q_.MergeFrom(from.q_);
  qdot_.MergeFrom(from.qdot_);
  p_.MergeFrom(from.p_);
  pdot_.MergeFrom(from.pdot_);
  ref_frame_.MergeFrom(from.ref_frame_);
  tool_frame_.MergeFrom(from.tool_frame_);
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
  if (from.running_hours() != 0) {
    set_running_hours(from.running_hours());
  }
  if (from.running_mins() != 0) {
    set_running_mins(from.running_mins());
  }
  if (from.running_secs() != 0) {
    set_running_secs(from.running_secs());
  }
  if (from.op_state() != 0) {
    set_op_state(from.op_state());
  }
  if (from.sim_mode() != 0) {
    set_sim_mode(from.sim_mode());
  }
}

void ControlData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.ControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlData::CopyFrom(const ControlData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlData::IsInitialized() const {
  return true;
}

void ControlData::Swap(ControlData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlData::InternalSwap(ControlData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  q_.InternalSwap(&other->q_);
  qdot_.InternalSwap(&other->qdot_);
  p_.InternalSwap(&other->p_);
  pdot_.InternalSwap(&other->pdot_);
  ref_frame_.InternalSwap(&other->ref_frame_);
  tool_frame_.InternalSwap(&other->tool_frame_);
  swap(response_, other->response_);
  swap(running_hours_, other->running_hours_);
  swap(running_mins_, other->running_mins_);
  swap(running_secs_, other->running_secs_);
  swap(op_state_, other->op_state_);
  swap(sim_mode_, other->sim_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlData2::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_ControlData2_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class ControlData2::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const ControlData2* msg);
};

const ::Nrmk::IndyFramework::Response&
ControlData2::HasBitSetters::response(const ControlData2* msg) {
  return *msg->response_;
}
void ControlData2::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlData2::kQFieldNumber;
const int ControlData2::kQdotFieldNumber;
const int ControlData2::kQddotFieldNumber;
const int ControlData2::kQdesFieldNumber;
const int ControlData2::kQdotdesFieldNumber;
const int ControlData2::kQddotdesFieldNumber;
const int ControlData2::kPFieldNumber;
const int ControlData2::kPdotFieldNumber;
const int ControlData2::kPddotFieldNumber;
const int ControlData2::kPdesFieldNumber;
const int ControlData2::kPdotdesFieldNumber;
const int ControlData2::kPddotdesFieldNumber;
const int ControlData2::kTauFieldNumber;
const int ControlData2::kTauActFieldNumber;
const int ControlData2::kTauExtFieldNumber;
const int ControlData2::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlData2::ControlData2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.ControlData2)
}
ControlData2::ControlData2(const ControlData2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      q_(from.q_),
      qdot_(from.qdot_),
      qddot_(from.qddot_),
      qdes_(from.qdes_),
      qdotdes_(from.qdotdes_),
      qddotdes_(from.qddotdes_),
      p_(from.p_),
      pdot_(from.pdot_),
      pddot_(from.pddot_),
      pdes_(from.pdes_),
      pdotdes_(from.pdotdes_),
      pddotdes_(from.pddotdes_),
      tau_(from.tau_),
      tau_act_(from.tau_act_),
      tau_ext_(from.tau_ext_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ControlData2)
}

void ControlData2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlData2_rtde_5fmsgs_2eproto.base);
  response_ = nullptr;
}

ControlData2::~ControlData2() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ControlData2)
  SharedDtor();
}

void ControlData2::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void ControlData2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlData2& ControlData2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlData2_rtde_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ControlData2::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ControlData2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  q_.Clear();
  qdot_.Clear();
  qddot_.Clear();
  qdes_.Clear();
  qdotdes_.Clear();
  qddotdes_.Clear();
  p_.Clear();
  pdot_.Clear();
  pddot_.Clear();
  pdes_.Clear();
  pdotdes_.Clear();
  pddotdes_.Clear();
  tau_.Clear();
  tau_act_.Clear();
  tau_ext_.Clear();
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ControlData2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_q(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float qdot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_qdot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_qdot(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float qddot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_qddot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_qddot(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float qdes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_qdes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_qdes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float qdotdes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_qdotdes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          add_qdotdes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float qddotdes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_qddotdes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          add_qddotdes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float p = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_p(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85) {
          add_p(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pdot = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_pdot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93) {
          add_pdot(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pddot = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_pddot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          add_pddot(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pdes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_pdes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109) {
          add_pdes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pdotdes = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_pdotdes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117) {
          add_pdotdes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pddotdes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_pddotdes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125) {
          add_pddotdes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tau = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tau(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165) {
          add_tau(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tau_act = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tau_act(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173) {
          add_tau_act(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tau_ext = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tau_ext(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181) {
          add_tau_ext(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ControlData2::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.ControlData2)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float q = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_q())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_q())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float qdot = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_qdot())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_qdot())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float qddot = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_qddot())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_qddot())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float qdes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_qdes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_qdes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float qdotdes = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_qdotdes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_qdotdes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float qddotdes = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_qddotdes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_qddotdes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float p = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_p())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_p())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pdot = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pdot())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_pdot())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pddot = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pddot())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_pddot())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pdes = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pdes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 106u, input, this->mutable_pdes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pdotdes = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pdotdes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 114u, input, this->mutable_pdotdes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pddotdes = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pddotdes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (125 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 122u, input, this->mutable_pddotdes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tau = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tau())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (165 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 162u, input, this->mutable_tau())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tau_act = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tau_act())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (173 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 170u, input, this->mutable_tau_act())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tau_ext = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tau_ext())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (181 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 178u, input, this->mutable_tau_ext())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.ControlData2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.ControlData2)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ControlData2::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.ControlData2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float q = 1;
  if (this->q_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_q_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->q().data(), this->q_size(), output);
  }

  // repeated float qdot = 2;
  if (this->qdot_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_qdot_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->qdot().data(), this->qdot_size(), output);
  }

  // repeated float qddot = 3;
  if (this->qddot_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_qddot_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->qddot().data(), this->qddot_size(), output);
  }

  // repeated float qdes = 4;
  if (this->qdes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_qdes_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->qdes().data(), this->qdes_size(), output);
  }

  // repeated float qdotdes = 5;
  if (this->qdotdes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_qdotdes_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->qdotdes().data(), this->qdotdes_size(), output);
  }

  // repeated float qddotdes = 6;
  if (this->qddotdes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_qddotdes_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->qddotdes().data(), this->qddotdes_size(), output);
  }

  // repeated float p = 10;
  if (this->p_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(10, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_p_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->p().data(), this->p_size(), output);
  }

  // repeated float pdot = 11;
  if (this->pdot_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(11, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pdot_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->pdot().data(), this->pdot_size(), output);
  }

  // repeated float pddot = 12;
  if (this->pddot_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(12, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pddot_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->pddot().data(), this->pddot_size(), output);
  }

  // repeated float pdes = 13;
  if (this->pdes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(13, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pdes_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->pdes().data(), this->pdes_size(), output);
  }

  // repeated float pdotdes = 14;
  if (this->pdotdes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(14, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pdotdes_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->pdotdes().data(), this->pdotdes_size(), output);
  }

  // repeated float pddotdes = 15;
  if (this->pddotdes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(15, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pddotdes_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->pddotdes().data(), this->pddotdes_size(), output);
  }

  // repeated float tau = 20;
  if (this->tau_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(20, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tau_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tau().data(), this->tau_size(), output);
  }

  // repeated float tau_act = 21;
  if (this->tau_act_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(21, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tau_act_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tau_act().data(), this->tau_act_size(), output);
  }

  // repeated float tau_ext = 22;
  if (this->tau_ext_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(22, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tau_ext_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tau_ext().data(), this->tau_ext_size(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.ControlData2)
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlData2::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ControlData2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float q = 1;
  if (this->q_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _q_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->q_, target);
  }

  // repeated float qdot = 2;
  if (this->qdot_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _qdot_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->qdot_, target);
  }

  // repeated float qddot = 3;
  if (this->qddot_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _qddot_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->qddot_, target);
  }

  // repeated float qdes = 4;
  if (this->qdes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _qdes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->qdes_, target);
  }

  // repeated float qdotdes = 5;
  if (this->qdotdes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _qdotdes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->qdotdes_, target);
  }

  // repeated float qddotdes = 6;
  if (this->qddotdes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      6,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _qddotdes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->qddotdes_, target);
  }

  // repeated float p = 10;
  if (this->p_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      10,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _p_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->p_, target);
  }

  // repeated float pdot = 11;
  if (this->pdot_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      11,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pdot_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pdot_, target);
  }

  // repeated float pddot = 12;
  if (this->pddot_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      12,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pddot_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pddot_, target);
  }

  // repeated float pdes = 13;
  if (this->pdes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      13,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pdes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pdes_, target);
  }

  // repeated float pdotdes = 14;
  if (this->pdotdes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      14,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pdotdes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pdotdes_, target);
  }

  // repeated float pddotdes = 15;
  if (this->pddotdes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      15,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pddotdes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pddotdes_, target);
  }

  // repeated float tau = 20;
  if (this->tau_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      20,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tau_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tau_, target);
  }

  // repeated float tau_act = 21;
  if (this->tau_act_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      21,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tau_act_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tau_act_, target);
  }

  // repeated float tau_ext = 22;
  if (this->tau_ext_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      22,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tau_ext_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tau_ext_, target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ControlData2)
  return target;
}

size_t ControlData2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ControlData2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float q = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->q_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _q_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float qdot = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->qdot_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _qdot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float qddot = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->qddot_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _qddot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float qdes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->qdes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _qdes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float qdotdes = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->qdotdes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _qdotdes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float qddotdes = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->qddotdes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _qddotdes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float p = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->p_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _p_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float pdot = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->pdot_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pdot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float pddot = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->pddot_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pddot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float pdes = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->pdes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pdes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float pdotdes = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->pdotdes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pdotdes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float pddotdes = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->pddotdes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pddotdes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tau = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->tau_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tau_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tau_act = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->tau_act_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tau_act_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tau_ext = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->tau_ext_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tau_ext_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlData2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.ControlData2)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlData2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlData2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.ControlData2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.ControlData2)
    MergeFrom(*source);
  }
}

void ControlData2::MergeFrom(const ControlData2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ControlData2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  q_.MergeFrom(from.q_);
  qdot_.MergeFrom(from.qdot_);
  qddot_.MergeFrom(from.qddot_);
  qdes_.MergeFrom(from.qdes_);
  qdotdes_.MergeFrom(from.qdotdes_);
  qddotdes_.MergeFrom(from.qddotdes_);
  p_.MergeFrom(from.p_);
  pdot_.MergeFrom(from.pdot_);
  pddot_.MergeFrom(from.pddot_);
  pdes_.MergeFrom(from.pdes_);
  pdotdes_.MergeFrom(from.pdotdes_);
  pddotdes_.MergeFrom(from.pddotdes_);
  tau_.MergeFrom(from.tau_);
  tau_act_.MergeFrom(from.tau_act_);
  tau_ext_.MergeFrom(from.tau_ext_);
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
}

void ControlData2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.ControlData2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlData2::CopyFrom(const ControlData2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ControlData2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlData2::IsInitialized() const {
  return true;
}

void ControlData2::Swap(ControlData2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlData2::InternalSwap(ControlData2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  q_.InternalSwap(&other->q_);
  qdot_.InternalSwap(&other->qdot_);
  qddot_.InternalSwap(&other->qddot_);
  qdes_.InternalSwap(&other->qdes_);
  qdotdes_.InternalSwap(&other->qdotdes_);
  qddotdes_.InternalSwap(&other->qddotdes_);
  p_.InternalSwap(&other->p_);
  pdot_.InternalSwap(&other->pdot_);
  pddot_.InternalSwap(&other->pddot_);
  pdes_.InternalSwap(&other->pdes_);
  pdotdes_.InternalSwap(&other->pdotdes_);
  pddotdes_.InternalSwap(&other->pddotdes_);
  tau_.InternalSwap(&other->tau_);
  tau_act_.InternalSwap(&other->tau_act_);
  tau_ext_.InternalSwap(&other->tau_ext_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlData2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IOData::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_IOData_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class IOData::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const IOData* msg);
};

const ::Nrmk::IndyFramework::Response&
IOData::HasBitSetters::response(const IOData* msg) {
  return *msg->response_;
}
void IOData::clear_di() {
  di_.Clear();
}
void IOData::clear_do_() {
  do__.Clear();
}
void IOData::clear_ai() {
  ai_.Clear();
}
void IOData::clear_ao() {
  ao_.Clear();
}
void IOData::clear_end_di() {
  end_di_.Clear();
}
void IOData::clear_end_do() {
  end_do_.Clear();
}
void IOData::clear_end_ai() {
  end_ai_.Clear();
}
void IOData::clear_end_ao() {
  end_ao_.Clear();
}
void IOData::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IOData::kDiFieldNumber;
const int IOData::kDoFieldNumber;
const int IOData::kAiFieldNumber;
const int IOData::kAoFieldNumber;
const int IOData::kEndDiFieldNumber;
const int IOData::kEndDoFieldNumber;
const int IOData::kEndAiFieldNumber;
const int IOData::kEndAoFieldNumber;
const int IOData::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IOData::IOData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.IOData)
}
IOData::IOData(const IOData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      di_(from.di_),
      do__(from.do__),
      ai_(from.ai_),
      ao_(from.ao_),
      end_di_(from.end_di_),
      end_do_(from.end_do_),
      end_ai_(from.end_ai_),
      end_ao_(from.end_ao_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.IOData)
}

void IOData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IOData_rtde_5fmsgs_2eproto.base);
  response_ = nullptr;
}

IOData::~IOData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.IOData)
  SharedDtor();
}

void IOData::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void IOData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IOData& IOData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IOData_rtde_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void IOData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.IOData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  di_.Clear();
  do__.Clear();
  ai_.Clear();
  ao_.Clear();
  end_di_.Clear();
  end_do_.Clear();
  end_ai_.Clear();
  end_ao_.Clear();
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IOData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_di(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.DigitalSignal do = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_do_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.AnalogSignal ai = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ai(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.AnalogSignal ao = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ao(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.EndtoolSignal end_di = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_end_di(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.EndtoolSignal end_do = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_end_do(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.AnalogSignal end_ai = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_end_ai(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .Nrmk.IndyFramework.AnalogSignal end_ao = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_end_ao(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IOData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.IOData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_di()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.DigitalSignal do = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_do_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.AnalogSignal ai = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ai()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.AnalogSignal ao = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ao()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.EndtoolSignal end_di = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_end_di()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.EndtoolSignal end_do = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_end_do()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.AnalogSignal end_ai = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_end_ai()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Nrmk.IndyFramework.AnalogSignal end_ao = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_end_ao()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.IOData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.IOData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IOData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.IOData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->di_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->di(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal do = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->do__size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->do_(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal ai = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ai_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->ai(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal ao = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ao_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->ao(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.EndtoolSignal end_di = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_di_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->end_di(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.EndtoolSignal end_do = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_do_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->end_do(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal end_ai = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_ai_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->end_ai(static_cast<int>(i)),
      output);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal end_ao = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_ao_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->end_ao(static_cast<int>(i)),
      output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.IOData)
}

::PROTOBUF_NAMESPACE_ID::uint8* IOData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.IOData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->di_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->di(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal do = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->do__size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->do_(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal ai = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ai_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->ai(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal ao = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ao_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->ao(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.EndtoolSignal end_di = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_di_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->end_di(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.EndtoolSignal end_do = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_do_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->end_do(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal end_ai = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_ai_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->end_ai(static_cast<int>(i)), target);
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal end_ao = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_ao_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->end_ao(static_cast<int>(i)), target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.IOData)
  return target;
}

size_t IOData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.IOData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.DigitalSignal di = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->di_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->di(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.DigitalSignal do = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->do__size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->do_(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal ai = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->ai_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ai(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal ao = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->ao_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ao(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.EndtoolSignal end_di = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->end_di_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->end_di(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.EndtoolSignal end_do = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->end_do_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->end_do(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal end_ai = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->end_ai_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->end_ai(static_cast<int>(i)));
    }
  }

  // repeated .Nrmk.IndyFramework.AnalogSignal end_ao = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->end_ao_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->end_ao(static_cast<int>(i)));
    }
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IOData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.IOData)
  GOOGLE_DCHECK_NE(&from, this);
  const IOData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IOData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.IOData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.IOData)
    MergeFrom(*source);
  }
}

void IOData::MergeFrom(const IOData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.IOData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  di_.MergeFrom(from.di_);
  do__.MergeFrom(from.do__);
  ai_.MergeFrom(from.ai_);
  ao_.MergeFrom(from.ao_);
  end_di_.MergeFrom(from.end_di_);
  end_do_.MergeFrom(from.end_do_);
  end_ai_.MergeFrom(from.end_ai_);
  end_ao_.MergeFrom(from.end_ao_);
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
}

void IOData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.IOData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOData::CopyFrom(const IOData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.IOData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOData::IsInitialized() const {
  return true;
}

void IOData::Swap(IOData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IOData::InternalSwap(IOData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&di_)->InternalSwap(CastToBase(&other->di_));
  CastToBase(&do__)->InternalSwap(CastToBase(&other->do__));
  CastToBase(&ai_)->InternalSwap(CastToBase(&other->ai_));
  CastToBase(&ao_)->InternalSwap(CastToBase(&other->ao_));
  CastToBase(&end_di_)->InternalSwap(CastToBase(&other->end_di_));
  CastToBase(&end_do_)->InternalSwap(CastToBase(&other->end_do_));
  CastToBase(&end_ai_)->InternalSwap(CastToBase(&other->end_ai_));
  CastToBase(&end_ao_)->InternalSwap(CastToBase(&other->end_ao_));
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IOData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViolationData::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_ViolationData_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class ViolationData::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const ViolationData* msg);
};

const ::Nrmk::IndyFramework::Response&
ViolationData::HasBitSetters::response(const ViolationData* msg) {
  return *msg->response_;
}
void ViolationData::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViolationData::kViolationCodeFieldNumber;
const int ViolationData::kJIndexFieldNumber;
const int ViolationData::kIArgsFieldNumber;
const int ViolationData::kFArgsFieldNumber;
const int ViolationData::kViolationStrFieldNumber;
const int ViolationData::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViolationData::ViolationData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.ViolationData)
}
ViolationData::ViolationData(const ViolationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      i_args_(from.i_args_),
      f_args_(from.f_args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  violation_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.violation_str().size() > 0) {
    violation_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.violation_str_);
  }
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  ::memcpy(&violation_code_, &from.violation_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&j_index_) -
    reinterpret_cast<char*>(&violation_code_)) + sizeof(j_index_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ViolationData)
}

void ViolationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViolationData_rtde_5fmsgs_2eproto.base);
  violation_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&j_index_) -
      reinterpret_cast<char*>(&response_)) + sizeof(j_index_));
}

ViolationData::~ViolationData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ViolationData)
  SharedDtor();
}

void ViolationData::SharedDtor() {
  violation_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_;
}

void ViolationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViolationData& ViolationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViolationData_rtde_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ViolationData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ViolationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i_args_.Clear();
  f_args_.Clear();
  violation_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  ::memset(&violation_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&j_index_) -
      reinterpret_cast<char*>(&violation_code_)) + sizeof(j_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ViolationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 violation_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          violation_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 j_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          j_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 i_args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_i_args(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_i_args(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float f_args = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_f_args(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_f_args(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string violation_str = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_violation_str(), ptr, ctx, "Nrmk.IndyFramework.ViolationData.violation_str");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ViolationData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.ViolationData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 violation_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &violation_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 j_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &j_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 i_args = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_i_args())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_i_args())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float f_args = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_f_args())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_f_args())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string violation_str = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_violation_str()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->violation_str().data(), static_cast<int>(this->violation_str().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.ViolationData.violation_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.ViolationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.ViolationData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ViolationData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.ViolationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 violation_code = 1;
  if (this->violation_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->violation_code(), output);
  }

  // uint32 j_index = 2;
  if (this->j_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->j_index(), output);
  }

  // repeated int32 i_args = 3;
  if (this->i_args_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_i_args_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->i_args_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->i_args(i), output);
  }

  // repeated float f_args = 4;
  if (this->f_args_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_f_args_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->f_args().data(), this->f_args_size(), output);
  }

  // string violation_str = 5;
  if (this->violation_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->violation_str().data(), static_cast<int>(this->violation_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ViolationData.violation_str");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->violation_str(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.ViolationData)
}

::PROTOBUF_NAMESPACE_ID::uint8* ViolationData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ViolationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 violation_code = 1;
  if (this->violation_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->violation_code(), target);
  }

  // uint32 j_index = 2;
  if (this->j_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->j_index(), target);
  }

  // repeated int32 i_args = 3;
  if (this->i_args_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _i_args_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->i_args_, target);
  }

  // repeated float f_args = 4;
  if (this->f_args_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _f_args_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->f_args_, target);
  }

  // string violation_str = 5;
  if (this->violation_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->violation_str().data(), static_cast<int>(this->violation_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ViolationData.violation_str");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->violation_str(), target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ViolationData)
  return target;
}

size_t ViolationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ViolationData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 i_args = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->i_args_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _i_args_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float f_args = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->f_args_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _f_args_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string violation_str = 5;
  if (this->violation_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->violation_str());
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // uint64 violation_code = 1;
  if (this->violation_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->violation_code());
  }

  // uint32 j_index = 2;
  if (this->j_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->j_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViolationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.ViolationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ViolationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViolationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.ViolationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.ViolationData)
    MergeFrom(*source);
  }
}

void ViolationData::MergeFrom(const ViolationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ViolationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  i_args_.MergeFrom(from.i_args_);
  f_args_.MergeFrom(from.f_args_);
  if (from.violation_str().size() > 0) {

    violation_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.violation_str_);
  }
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
  if (from.violation_code() != 0) {
    set_violation_code(from.violation_code());
  }
  if (from.j_index() != 0) {
    set_j_index(from.j_index());
  }
}

void ViolationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.ViolationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViolationData::CopyFrom(const ViolationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ViolationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViolationData::IsInitialized() const {
  return true;
}

void ViolationData::Swap(ViolationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViolationData::InternalSwap(ViolationData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  i_args_.InternalSwap(&other->i_args_);
  f_args_.InternalSwap(&other->f_args_);
  violation_str_.Swap(&other->violation_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(response_, other->response_);
  swap(violation_code_, other->violation_code_);
  swap(j_index_, other->j_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViolationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViolationMessageQueue::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_ViolationMessageQueue_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class ViolationMessageQueue::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const ViolationMessageQueue* msg);
};

const ::Nrmk::IndyFramework::Response&
ViolationMessageQueue::HasBitSetters::response(const ViolationMessageQueue* msg) {
  return *msg->response_;
}
void ViolationMessageQueue::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViolationMessageQueue::kViolationQueueFieldNumber;
const int ViolationMessageQueue::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViolationMessageQueue::ViolationMessageQueue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.ViolationMessageQueue)
}
ViolationMessageQueue::ViolationMessageQueue(const ViolationMessageQueue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      violation_queue_(from.violation_queue_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ViolationMessageQueue)
}

void ViolationMessageQueue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViolationMessageQueue_rtde_5fmsgs_2eproto.base);
  response_ = nullptr;
}

ViolationMessageQueue::~ViolationMessageQueue() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ViolationMessageQueue)
  SharedDtor();
}

void ViolationMessageQueue::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void ViolationMessageQueue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViolationMessageQueue& ViolationMessageQueue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViolationMessageQueue_rtde_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ViolationMessageQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ViolationMessageQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  violation_queue_.Clear();
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ViolationMessageQueue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Nrmk.IndyFramework.ViolationData violation_queue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_violation_queue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ViolationMessageQueue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.ViolationMessageQueue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Nrmk.IndyFramework.ViolationData violation_queue = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_violation_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.ViolationMessageQueue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.ViolationMessageQueue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ViolationMessageQueue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.ViolationMessageQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.ViolationData violation_queue = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->violation_queue_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->violation_queue(static_cast<int>(i)),
      output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.ViolationMessageQueue)
}

::PROTOBUF_NAMESPACE_ID::uint8* ViolationMessageQueue::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ViolationMessageQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.ViolationData violation_queue = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->violation_queue_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->violation_queue(static_cast<int>(i)), target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ViolationMessageQueue)
  return target;
}

size_t ViolationMessageQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ViolationMessageQueue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Nrmk.IndyFramework.ViolationData violation_queue = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->violation_queue_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->violation_queue(static_cast<int>(i)));
    }
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViolationMessageQueue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.ViolationMessageQueue)
  GOOGLE_DCHECK_NE(&from, this);
  const ViolationMessageQueue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViolationMessageQueue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.ViolationMessageQueue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.ViolationMessageQueue)
    MergeFrom(*source);
  }
}

void ViolationMessageQueue::MergeFrom(const ViolationMessageQueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ViolationMessageQueue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  violation_queue_.MergeFrom(from.violation_queue_);
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
}

void ViolationMessageQueue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.ViolationMessageQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViolationMessageQueue::CopyFrom(const ViolationMessageQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ViolationMessageQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViolationMessageQueue::IsInitialized() const {
  return true;
}

void ViolationMessageQueue::Swap(ViolationMessageQueue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViolationMessageQueue::InternalSwap(ViolationMessageQueue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&violation_queue_)->InternalSwap(CastToBase(&other->violation_queue_));
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViolationMessageQueue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServoData::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_ServoData_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class ServoData::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const ServoData* msg);
};

const ::Nrmk::IndyFramework::Response&
ServoData::HasBitSetters::response(const ServoData* msg) {
  return *msg->response_;
}
void ServoData::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoData::kStatusCodesFieldNumber;
const int ServoData::kTemperaturesFieldNumber;
const int ServoData::kVoltagesFieldNumber;
const int ServoData::kCurrentsFieldNumber;
const int ServoData::kServoActivesFieldNumber;
const int ServoData::kBrakeActivesFieldNumber;
const int ServoData::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoData::ServoData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.ServoData)
}
ServoData::ServoData(const ServoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      status_codes_(from.status_codes_),
      temperatures_(from.temperatures_),
      voltages_(from.voltages_),
      currents_(from.currents_),
      servo_actives_(from.servo_actives_),
      brake_actives_(from.brake_actives_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ServoData)
}

void ServoData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServoData_rtde_5fmsgs_2eproto.base);
  response_ = nullptr;
}

ServoData::~ServoData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ServoData)
  SharedDtor();
}

void ServoData::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void ServoData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServoData& ServoData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServoData_rtde_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ServoData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ServoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_codes_.Clear();
  temperatures_.Clear();
  voltages_.Clear();
  currents_.Clear();
  servo_actives_.Clear();
  brake_actives_.Clear();
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServoData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string status_codes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_status_codes(), ptr, ctx, "Nrmk.IndyFramework.ServoData.status_codes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated float temperatures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_temperatures(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_temperatures(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float voltages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_voltages(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_voltages(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float currents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_currents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_currents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated bool servo_actives = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_servo_actives(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          add_servo_actives(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool brake_actives = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_brake_actives(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          add_brake_actives(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServoData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.ServoData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string status_codes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_status_codes()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->status_codes(this->status_codes_size() - 1).data(),
            static_cast<int>(this->status_codes(this->status_codes_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.ServoData.status_codes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float temperatures = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_temperatures())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_temperatures())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float voltages = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_voltages())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_voltages())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float currents = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_currents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_currents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool servo_actives = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_servo_actives())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 82u, input, this->mutable_servo_actives())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool brake_actives = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_brake_actives())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 90u, input, this->mutable_brake_actives())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.ServoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.ServoData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServoData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.ServoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string status_codes = 1;
  for (int i = 0, n = this->status_codes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->status_codes(i).data(), static_cast<int>(this->status_codes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ServoData.status_codes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->status_codes(i), output);
  }

  // repeated float temperatures = 2;
  if (this->temperatures_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_temperatures_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->temperatures().data(), this->temperatures_size(), output);
  }

  // repeated float voltages = 3;
  if (this->voltages_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_voltages_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->voltages().data(), this->voltages_size(), output);
  }

  // repeated float currents = 4;
  if (this->currents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_currents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->currents().data(), this->currents_size(), output);
  }

  // repeated bool servo_actives = 10;
  if (this->servo_actives_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(10, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_servo_actives_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->servo_actives().data(), this->servo_actives_size(), output);
  }

  // repeated bool brake_actives = 11;
  if (this->brake_actives_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(11, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_brake_actives_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->brake_actives().data(), this->brake_actives_size(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.ServoData)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServoData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ServoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string status_codes = 1;
  for (int i = 0, n = this->status_codes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->status_codes(i).data(), static_cast<int>(this->status_codes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ServoData.status_codes");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->status_codes(i), target);
  }

  // repeated float temperatures = 2;
  if (this->temperatures_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _temperatures_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->temperatures_, target);
  }

  // repeated float voltages = 3;
  if (this->voltages_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _voltages_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->voltages_, target);
  }

  // repeated float currents = 4;
  if (this->currents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _currents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->currents_, target);
  }

  // repeated bool servo_actives = 10;
  if (this->servo_actives_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      10,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _servo_actives_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->servo_actives_, target);
  }

  // repeated bool brake_actives = 11;
  if (this->brake_actives_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      11,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _brake_actives_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->brake_actives_, target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ServoData)
  return target;
}

size_t ServoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ServoData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string status_codes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->status_codes_size());
  for (int i = 0, n = this->status_codes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->status_codes(i));
  }

  // repeated float temperatures = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->temperatures_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _temperatures_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float voltages = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->voltages_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _voltages_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float currents = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->currents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _currents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool servo_actives = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->servo_actives_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _servo_actives_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool brake_actives = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->brake_actives_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _brake_actives_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.ServoData)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServoData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.ServoData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.ServoData)
    MergeFrom(*source);
  }
}

void ServoData::MergeFrom(const ServoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ServoData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_codes_.MergeFrom(from.status_codes_);
  temperatures_.MergeFrom(from.temperatures_);
  voltages_.MergeFrom(from.voltages_);
  currents_.MergeFrom(from.currents_);
  servo_actives_.MergeFrom(from.servo_actives_);
  brake_actives_.MergeFrom(from.brake_actives_);
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
}

void ServoData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.ServoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoData::CopyFrom(const ServoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ServoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoData::IsInitialized() const {
  return true;
}

void ServoData::Swap(ServoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoData::InternalSwap(ServoData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_codes_.InternalSwap(CastToBase(&other->status_codes_));
  temperatures_.InternalSwap(&other->temperatures_);
  voltages_.InternalSwap(&other->voltages_);
  currents_.InternalSwap(&other->currents_);
  servo_actives_.InternalSwap(&other->servo_actives_);
  brake_actives_.InternalSwap(&other->brake_actives_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServoData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProgramData::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_ProgramData_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class ProgramData::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const ProgramData* msg);
};

const ::Nrmk::IndyFramework::Response&
ProgramData::HasBitSetters::response(const ProgramData* msg) {
  return *msg->response_;
}
void ProgramData::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProgramData::kProgramStateFieldNumber;
const int ProgramData::kCmdIdFieldNumber;
const int ProgramData::kSubCmdIdFieldNumber;
const int ProgramData::kRunningHoursFieldNumber;
const int ProgramData::kRunningMinsFieldNumber;
const int ProgramData::kRunningSecsFieldNumber;
const int ProgramData::kProgramNameFieldNumber;
const int ProgramData::kProgramAlarmFieldNumber;
const int ProgramData::kProgramAnnotationFieldNumber;
const int ProgramData::kSpeedRatioFieldNumber;
const int ProgramData::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProgramData::ProgramData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.ProgramData)
}
ProgramData::ProgramData(const ProgramData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  program_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.program_name().size() > 0) {
    program_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_name_);
  }
  program_alarm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.program_alarm().size() > 0) {
    program_alarm_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_alarm_);
  }
  program_annotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.program_annotation().size() > 0) {
    program_annotation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_annotation_);
  }
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  ::memcpy(&program_state_, &from.program_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_ratio_) -
    reinterpret_cast<char*>(&program_state_)) + sizeof(speed_ratio_));
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.ProgramData)
}

void ProgramData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProgramData_rtde_5fmsgs_2eproto.base);
  program_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_alarm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_annotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_ratio_) -
      reinterpret_cast<char*>(&response_)) + sizeof(speed_ratio_));
}

ProgramData::~ProgramData() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.ProgramData)
  SharedDtor();
}

void ProgramData::SharedDtor() {
  program_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_alarm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_annotation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_;
}

void ProgramData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProgramData& ProgramData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProgramData_rtde_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ProgramData::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.ProgramData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  program_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_alarm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_annotation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  ::memset(&program_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_ratio_) -
      reinterpret_cast<char*>(&program_state_)) + sizeof(speed_ratio_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProgramData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.ProgramState program_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_program_state(static_cast<::Nrmk::IndyFramework::ProgramState>(val));
        } else goto handle_unusual;
        continue;
      // int32 cmd_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cmd_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sub_cmd_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sub_cmd_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 running_hours = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          running_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 running_mins = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          running_mins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 running_secs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          running_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string program_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_program_name(), ptr, ctx, "Nrmk.IndyFramework.ProgramData.program_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string program_alarm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_program_alarm(), ptr, ctx, "Nrmk.IndyFramework.ProgramData.program_alarm");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string program_annotation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_program_annotation(), ptr, ctx, "Nrmk.IndyFramework.ProgramData.program_annotation");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 speed_ratio = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          speed_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProgramData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.ProgramData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.ProgramState program_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_program_state(static_cast< ::Nrmk::IndyFramework::ProgramState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cmd_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sub_cmd_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_cmd_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 running_hours = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &running_hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 running_mins = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &running_mins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 running_secs = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &running_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string program_name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_program_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->program_name().data(), static_cast<int>(this->program_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.ProgramData.program_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string program_alarm = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_program_alarm()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->program_alarm().data(), static_cast<int>(this->program_alarm().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.ProgramData.program_alarm"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string program_annotation = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_program_annotation()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->program_annotation().data(), static_cast<int>(this->program_annotation().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Nrmk.IndyFramework.ProgramData.program_annotation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speed_ratio = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.ProgramData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.ProgramData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProgramData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.ProgramData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.ProgramState program_state = 1;
  if (this->program_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->program_state(), output);
  }

  // int32 cmd_id = 2;
  if (this->cmd_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->cmd_id(), output);
  }

  // int32 sub_cmd_id = 3;
  if (this->sub_cmd_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->sub_cmd_id(), output);
  }

  // uint32 running_hours = 4;
  if (this->running_hours() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->running_hours(), output);
  }

  // uint32 running_mins = 5;
  if (this->running_mins() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->running_mins(), output);
  }

  // uint32 running_secs = 6;
  if (this->running_secs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->running_secs(), output);
  }

  // string program_name = 7;
  if (this->program_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->program_name().data(), static_cast<int>(this->program_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ProgramData.program_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->program_name(), output);
  }

  // string program_alarm = 8;
  if (this->program_alarm().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->program_alarm().data(), static_cast<int>(this->program_alarm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ProgramData.program_alarm");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->program_alarm(), output);
  }

  // string program_annotation = 9;
  if (this->program_annotation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->program_annotation().data(), static_cast<int>(this->program_annotation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ProgramData.program_annotation");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->program_annotation(), output);
  }

  // int32 speed_ratio = 10;
  if (this->speed_ratio() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->speed_ratio(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.ProgramData)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProgramData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.ProgramData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.ProgramState program_state = 1;
  if (this->program_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->program_state(), target);
  }

  // int32 cmd_id = 2;
  if (this->cmd_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd_id(), target);
  }

  // int32 sub_cmd_id = 3;
  if (this->sub_cmd_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->sub_cmd_id(), target);
  }

  // uint32 running_hours = 4;
  if (this->running_hours() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->running_hours(), target);
  }

  // uint32 running_mins = 5;
  if (this->running_mins() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->running_mins(), target);
  }

  // uint32 running_secs = 6;
  if (this->running_secs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->running_secs(), target);
  }

  // string program_name = 7;
  if (this->program_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->program_name().data(), static_cast<int>(this->program_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ProgramData.program_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->program_name(), target);
  }

  // string program_alarm = 8;
  if (this->program_alarm().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->program_alarm().data(), static_cast<int>(this->program_alarm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ProgramData.program_alarm");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->program_alarm(), target);
  }

  // string program_annotation = 9;
  if (this->program_annotation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->program_annotation().data(), static_cast<int>(this->program_annotation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Nrmk.IndyFramework.ProgramData.program_annotation");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->program_annotation(), target);
  }

  // int32 speed_ratio = 10;
  if (this->speed_ratio() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->speed_ratio(), target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.ProgramData)
  return target;
}

size_t ProgramData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.ProgramData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string program_name = 7;
  if (this->program_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->program_name());
  }

  // string program_alarm = 8;
  if (this->program_alarm().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->program_alarm());
  }

  // string program_annotation = 9;
  if (this->program_annotation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->program_annotation());
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // .Nrmk.IndyFramework.ProgramState program_state = 1;
  if (this->program_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->program_state());
  }

  // int32 cmd_id = 2;
  if (this->cmd_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cmd_id());
  }

  // int32 sub_cmd_id = 3;
  if (this->sub_cmd_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sub_cmd_id());
  }

  // uint32 running_hours = 4;
  if (this->running_hours() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->running_hours());
  }

  // uint32 running_mins = 5;
  if (this->running_mins() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->running_mins());
  }

  // uint32 running_secs = 6;
  if (this->running_secs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->running_secs());
  }

  // int32 speed_ratio = 10;
  if (this->speed_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->speed_ratio());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProgramData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.ProgramData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProgramData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProgramData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.ProgramData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.ProgramData)
    MergeFrom(*source);
  }
}

void ProgramData::MergeFrom(const ProgramData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.ProgramData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.program_name().size() > 0) {

    program_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_name_);
  }
  if (from.program_alarm().size() > 0) {

    program_alarm_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_alarm_);
  }
  if (from.program_annotation().size() > 0) {

    program_annotation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.program_annotation_);
  }
  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
  if (from.program_state() != 0) {
    set_program_state(from.program_state());
  }
  if (from.cmd_id() != 0) {
    set_cmd_id(from.cmd_id());
  }
  if (from.sub_cmd_id() != 0) {
    set_sub_cmd_id(from.sub_cmd_id());
  }
  if (from.running_hours() != 0) {
    set_running_hours(from.running_hours());
  }
  if (from.running_mins() != 0) {
    set_running_mins(from.running_mins());
  }
  if (from.running_secs() != 0) {
    set_running_secs(from.running_secs());
  }
  if (from.speed_ratio() != 0) {
    set_speed_ratio(from.speed_ratio());
  }
}

void ProgramData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.ProgramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgramData::CopyFrom(const ProgramData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.ProgramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgramData::IsInitialized() const {
  return true;
}

void ProgramData::Swap(ProgramData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProgramData::InternalSwap(ProgramData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  program_name_.Swap(&other->program_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  program_alarm_.Swap(&other->program_alarm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  program_annotation_.Swap(&other->program_annotation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(response_, other->response_);
  swap(program_state_, other->program_state_);
  swap(cmd_id_, other->cmd_id_);
  swap(sub_cmd_id_, other->sub_cmd_id_);
  swap(running_hours_, other->running_hours_);
  swap(running_mins_, other->running_mins_);
  swap(running_secs_, other->running_secs_);
  swap(speed_ratio_, other->speed_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProgramData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopState::InitAsDefaultInstance() {
  ::Nrmk::IndyFramework::_StopState_default_instance_._instance.get_mutable()->response_ = const_cast< ::Nrmk::IndyFramework::Response*>(
      ::Nrmk::IndyFramework::Response::internal_default_instance());
}
class StopState::HasBitSetters {
 public:
  static const ::Nrmk::IndyFramework::Response& response(const StopState* msg);
};

const ::Nrmk::IndyFramework::Response&
StopState::HasBitSetters::response(const StopState* msg) {
  return *msg->response_;
}
void StopState::clear_response() {
  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopState::kCategoryFieldNumber;
const int StopState::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopState::StopState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Nrmk.IndyFramework.StopState)
}
StopState::StopState(const StopState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::Nrmk::IndyFramework::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  category_ = from.category_;
  // @@protoc_insertion_point(copy_constructor:Nrmk.IndyFramework.StopState)
}

void StopState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopState_rtde_5fmsgs_2eproto.base);
  ::memset(&response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&response_)) + sizeof(category_));
}

StopState::~StopState() {
  // @@protoc_insertion_point(destructor:Nrmk.IndyFramework.StopState)
  SharedDtor();
}

void StopState::SharedDtor() {
  if (this != internal_default_instance()) delete response_;
}

void StopState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopState& StopState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopState_rtde_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void StopState::Clear() {
// @@protoc_insertion_point(message_clear_start:Nrmk.IndyFramework.StopState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  category_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Nrmk.IndyFramework.StopState.StopCategory category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_category(static_cast<::Nrmk::IndyFramework::StopState_StopCategory>(val));
        } else goto handle_unusual;
        continue;
      // .Nrmk.IndyFramework.Response response = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Nrmk.IndyFramework.StopState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Nrmk.IndyFramework.StopState.StopCategory category = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_category(static_cast< ::Nrmk::IndyFramework::StopState_StopCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Nrmk.IndyFramework.Response response = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Nrmk.IndyFramework.StopState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Nrmk.IndyFramework.StopState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Nrmk.IndyFramework.StopState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.StopState.StopCategory category = 1;
  if (this->category() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->category(), output);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Nrmk.IndyFramework.StopState)
}

::PROTOBUF_NAMESPACE_ID::uint8* StopState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Nrmk.IndyFramework.StopState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.StopState.StopCategory category = 1;
  if (this->category() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->category(), target);
  }

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Nrmk.IndyFramework.StopState)
  return target;
}

size_t StopState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Nrmk.IndyFramework.StopState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Nrmk.IndyFramework.Response response = 100;
  if (this->has_response()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // .Nrmk.IndyFramework.StopState.StopCategory category = 1;
  if (this->category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->category());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Nrmk.IndyFramework.StopState)
  GOOGLE_DCHECK_NE(&from, this);
  const StopState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Nrmk.IndyFramework.StopState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Nrmk.IndyFramework.StopState)
    MergeFrom(*source);
  }
}

void StopState::MergeFrom(const StopState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Nrmk.IndyFramework.StopState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    mutable_response()->::Nrmk::IndyFramework::Response::MergeFrom(from.response());
  }
  if (from.category() != 0) {
    set_category(from.category());
  }
}

void StopState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Nrmk.IndyFramework.StopState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopState::CopyFrom(const StopState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Nrmk.IndyFramework.StopState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopState::IsInitialized() const {
  return true;
}

void StopState::Swap(StopState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopState::InternalSwap(StopState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(category_, other->category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace IndyFramework
}  // namespace Nrmk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TestRequest* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TestRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::TestResponse* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::TestResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::TestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::MotionData* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::MotionData >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::MotionData >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::ControlData* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::ControlData >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::ControlData >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::ControlData2* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::ControlData2 >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::ControlData2 >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::IOData* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::IOData >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::IOData >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::ViolationData* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::ViolationData >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::ViolationData >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::ViolationMessageQueue* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::ViolationMessageQueue >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::ViolationMessageQueue >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::ServoData* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::ServoData >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::ServoData >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::ProgramData* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::ProgramData >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::ProgramData >(arena);
}
template<> PROTOBUF_NOINLINE ::Nrmk::IndyFramework::StopState* Arena::CreateMaybeMessage< ::Nrmk::IndyFramework::StopState >(Arena* arena) {
  return Arena::CreateInternal< ::Nrmk::IndyFramework::StopState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
