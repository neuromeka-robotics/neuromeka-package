// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hri.proto
// Original file comments:
// Created by Gwanwoo Kim on 2021-05-28.
// Copyright 2021 Neuromeka Inc. All rights reserved.
//
#ifndef GRPC_hri_2eproto__INCLUDED
#define GRPC_hri_2eproto__INCLUDED

#include "hri.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace IndyFramework {
namespace Protobuf {
namespace HRI {

class HRI final {
 public:
  static constexpr char const* service_full_name() {
    return "IndyFramework.Protobuf.HRI.HRI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>> AsyncGetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>>(AsyncGetRefFrameListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>> PrepareAsyncGetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>>(PrepareAsyncGetRefFrameListRaw(context, request, cq));
    }
    virtual ::grpc::Status SetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>> AsyncSetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>>(AsyncSetRefFrameListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>> PrepareAsyncSetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>>(PrepareAsyncSetRefFrameListRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>* AsyncGetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>* PrepareAsyncGetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>* AsyncSetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>* PrepareAsyncSetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>> AsyncGetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>>(AsyncGetRefFrameListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>> PrepareAsyncGetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>>(PrepareAsyncGetRefFrameListRaw(context, request, cq));
    }
    ::grpc::Status SetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>> AsyncSetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>>(AsyncSetRefFrameListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>> PrepareAsyncSetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>>(PrepareAsyncSetRefFrameListRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response, std::function<void(::grpc::Status)>) override;
      void GetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response, std::function<void(::grpc::Status)>) override;
      void SetRefFrameList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>* AsyncGetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>* PrepareAsyncGetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>* AsyncSetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>* PrepareAsyncSetRefFrameListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetRefFrameList_;
    const ::grpc::internal::RpcMethod rpcmethod_SetRefFrameList_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetRefFrameList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response);
    virtual ::grpc::Status SetRefFrameList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRefFrameList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRefFrameList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetRefFrameList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRefFrameList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* /*request*/, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRefFrameList(::grpc::ServerContext* context, ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* request, ::grpc::ServerAsyncResponseWriter< ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetRefFrameList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetRefFrameList() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetRefFrameList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRefFrameList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* /*request*/, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRefFrameList(::grpc::ServerContext* context, ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* request, ::grpc::ServerAsyncResponseWriter< ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetRefFrameList<WithAsyncMethod_SetRefFrameList<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetRefFrameList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRefFrameList() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::HRI::GetRefFrameListReq, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* response) { return this->GetRefFrameList(context, request, response); }));}
    void SetMessageAllocatorFor_GetRefFrameList(
        ::grpc::MessageAllocator< ::IndyFramework::Protobuf::HRI::GetRefFrameListReq, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::HRI::GetRefFrameListReq, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRefFrameList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRefFrameList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* /*request*/, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRefFrameList(
      ::grpc::CallbackServerContext* /*context*/, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* /*request*/, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetRefFrameList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetRefFrameList() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::HRI::SetRefFrameListReq, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* request, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* response) { return this->SetRefFrameList(context, request, response); }));}
    void SetMessageAllocatorFor_SetRefFrameList(
        ::grpc::MessageAllocator< ::IndyFramework::Protobuf::HRI::SetRefFrameListReq, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IndyFramework::Protobuf::HRI::SetRefFrameListReq, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetRefFrameList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRefFrameList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* /*request*/, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetRefFrameList(
      ::grpc::CallbackServerContext* /*context*/, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* /*request*/, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetRefFrameList<WithCallbackMethod_SetRefFrameList<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetRefFrameList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRefFrameList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetRefFrameList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRefFrameList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* /*request*/, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetRefFrameList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetRefFrameList() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetRefFrameList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRefFrameList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* /*request*/, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRefFrameList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRefFrameList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetRefFrameList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRefFrameList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* /*request*/, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRefFrameList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetRefFrameList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetRefFrameList() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetRefFrameList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRefFrameList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* /*request*/, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRefFrameList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRefFrameList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRefFrameList() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRefFrameList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRefFrameList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRefFrameList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* /*request*/, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRefFrameList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetRefFrameList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetRefFrameList() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetRefFrameList(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetRefFrameList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRefFrameList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* /*request*/, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetRefFrameList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRefFrameList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRefFrameList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IndyFramework::Protobuf::HRI::GetRefFrameListReq, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IndyFramework::Protobuf::HRI::GetRefFrameListReq, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes>* streamer) {
                       return this->StreamedGetRefFrameList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRefFrameList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRefFrameList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::HRI::GetRefFrameListReq* /*request*/, ::IndyFramework::Protobuf::HRI::GetRefFrameListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRefFrameList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IndyFramework::Protobuf::HRI::GetRefFrameListReq,::IndyFramework::Protobuf::HRI::GetRefFrameListRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetRefFrameList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetRefFrameList() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IndyFramework::Protobuf::HRI::SetRefFrameListReq, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IndyFramework::Protobuf::HRI::SetRefFrameListReq, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes>* streamer) {
                       return this->StreamedSetRefFrameList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetRefFrameList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetRefFrameList(::grpc::ServerContext* /*context*/, const ::IndyFramework::Protobuf::HRI::SetRefFrameListReq* /*request*/, ::IndyFramework::Protobuf::HRI::SetRefFrameListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetRefFrameList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IndyFramework::Protobuf::HRI::SetRefFrameListReq,::IndyFramework::Protobuf::HRI::SetRefFrameListRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetRefFrameList<WithStreamedUnaryMethod_SetRefFrameList<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetRefFrameList<WithStreamedUnaryMethod_SetRefFrameList<Service > > StreamedService;
};
// ---------------------------------------------------------------- //
// Conty
// ---------------------------------------------------------------- //

}  // namespace HRI
}  // namespace Protobuf
}  // namespace IndyFramework


#endif  // GRPC_hri_2eproto__INCLUDED
